
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	a0 53 00 20 29 69 00 00 8f 2a 02 00 59 69 00 00     .S. )i...*..Yi..
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  10:	59 69 00 00 59 69 00 00 59 69 00 00 00 00 00 00     Yi..Yi..Yi......
	...
	errno = ENFILE;
  2c:	cd 66 00 00 59 69 00 00 00 00 00 00 85 66 00 00     .f..Yi.......f..
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  3c:	45 18 02 00                                         E...

00000040 <_irq_vector_table>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
  40:	e9 68 00 00 0d a3 01 00 e9 68 00 00 e9 68 00 00     .h.......h...h..
  50:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
		fdtable[fd].vtable = NULL;
  60:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  70:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  80:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  90:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  a0:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  b0:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  c0:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  d0:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  e0:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..
  f0:	e9 68 00 00 e9 68 00 00 e9 68 00 00 e9 68 00 00     .h...h...h...h..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_frsub>:
     1a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__addsf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_fsub>:
     1a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000001ac <__addsf3>:
     1ac:	0042      	lsls	r2, r0, #1
     1ae:	bf1f      	itttt	ne
     1b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     1b4:	ea92 0f03 	teqne	r2, r3
     1b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     1bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     1c0:	d06a      	beq.n	298 <CONFIG_UART_MUX_RX_STACK_SIZE+0x98>
     1c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
     1c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     1ca:	bfc1      	itttt	gt
     1cc:	18d2      	addgt	r2, r2, r3
     1ce:	4041      	eorgt	r1, r0
     1d0:	4048      	eorgt	r0, r1
     1d2:	4041      	eorgt	r1, r0
     1d4:	bfb8      	it	lt
     1d6:	425b      	neglt	r3, r3
     1d8:	2b19      	cmp	r3, #25
     1da:	bf88      	it	hi
     1dc:	4770      	bxhi	lr
     1de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     1e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     1e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     1ea:	bf18      	it	ne
     1ec:	4240      	negne	r0, r0
     1ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     1f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     1fa:	bf18      	it	ne
     1fc:	4249      	negne	r1, r1
     1fe:	ea92 0f03 	teq	r2, r3
     202:	d03f      	beq.n	284 <CONFIG_UART_MUX_RX_STACK_SIZE+0x84>
     204:	f1a2 0201 	sub.w	r2, r2, #1
     208:	fa41 fc03 	asr.w	ip, r1, r3
     20c:	eb10 000c 	adds.w	r0, r0, ip
     210:	f1c3 0320 	rsb	r3, r3, #32
     214:	fa01 f103 	lsl.w	r1, r1, r3
     218:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     21c:	d502      	bpl.n	224 <CONFIG_UART_MUX_RX_STACK_SIZE+0x24>
     21e:	4249      	negs	r1, r1
     220:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     224:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     228:	d313      	bcc.n	252 <CONFIG_UART_MUX_RX_STACK_SIZE+0x52>
     22a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     22e:	d306      	bcc.n	23e <CONFIG_UART_MUX_RX_STACK_SIZE+0x3e>
     230:	0840      	lsrs	r0, r0, #1
     232:	ea4f 0131 	mov.w	r1, r1, rrx
     236:	f102 0201 	add.w	r2, r2, #1
     23a:	2afe      	cmp	r2, #254	; 0xfe
     23c:	d251      	bcs.n	2e2 <CONFIG_UART_MUX_RX_STACK_SIZE+0xe2>
     23e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     242:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     246:	bf08      	it	eq
     248:	f020 0001 	biceq.w	r0, r0, #1
     24c:	ea40 0003 	orr.w	r0, r0, r3
     250:	4770      	bx	lr
     252:	0049      	lsls	r1, r1, #1
     254:	eb40 0000 	adc.w	r0, r0, r0
     258:	3a01      	subs	r2, #1
     25a:	bf28      	it	cs
     25c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     260:	d2ed      	bcs.n	23e <CONFIG_UART_MUX_RX_STACK_SIZE+0x3e>
     262:	fab0 fc80 	clz	ip, r0
     266:	f1ac 0c08 	sub.w	ip, ip, #8
     26a:	ebb2 020c 	subs.w	r2, r2, ip
     26e:	fa00 f00c 	lsl.w	r0, r0, ip
     272:	bfaa      	itet	ge
     274:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     278:	4252      	neglt	r2, r2
     27a:	4318      	orrge	r0, r3
     27c:	bfbc      	itt	lt
     27e:	40d0      	lsrlt	r0, r2
     280:	4318      	orrlt	r0, r3
     282:	4770      	bx	lr
     284:	f092 0f00 	teq	r2, #0
     288:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     28c:	bf06      	itte	eq
     28e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     292:	3201      	addeq	r2, #1
     294:	3b01      	subne	r3, #1
     296:	e7b5      	b.n	204 <CONFIG_UART_MUX_RX_STACK_SIZE+0x4>
     298:	ea4f 0341 	mov.w	r3, r1, lsl #1
     29c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     2a0:	bf18      	it	ne
     2a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     2a6:	d021      	beq.n	2ec <CONFIG_UART_MUX_RX_STACK_SIZE+0xec>
     2a8:	ea92 0f03 	teq	r2, r3
     2ac:	d004      	beq.n	2b8 <CONFIG_UART_MUX_RX_STACK_SIZE+0xb8>
     2ae:	f092 0f00 	teq	r2, #0
     2b2:	bf08      	it	eq
     2b4:	4608      	moveq	r0, r1
     2b6:	4770      	bx	lr
     2b8:	ea90 0f01 	teq	r0, r1
     2bc:	bf1c      	itt	ne
     2be:	2000      	movne	r0, #0
     2c0:	4770      	bxne	lr
     2c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     2c6:	d104      	bne.n	2d2 <CONFIG_UART_MUX_RX_STACK_SIZE+0xd2>
     2c8:	0040      	lsls	r0, r0, #1
     2ca:	bf28      	it	cs
     2cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     2d0:	4770      	bx	lr
     2d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     2d6:	bf3c      	itt	cc
     2d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     2dc:	4770      	bxcc	lr
     2de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     2e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ea:	4770      	bx	lr
     2ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
     2f0:	bf16      	itet	ne
     2f2:	4608      	movne	r0, r1
     2f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     2f8:	4601      	movne	r1, r0
     2fa:	0242      	lsls	r2, r0, #9
     2fc:	bf06      	itte	eq
     2fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     302:	ea90 0f01 	teqeq	r0, r1
     306:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     30a:	4770      	bx	lr

0000030c <__aeabi_ui2f>:
     30c:	f04f 0300 	mov.w	r3, #0
     310:	e004      	b.n	31c <__aeabi_i2f+0x8>
     312:	bf00      	nop

00000314 <__aeabi_i2f>:
     314:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     318:	bf48      	it	mi
     31a:	4240      	negmi	r0, r0
     31c:	ea5f 0c00 	movs.w	ip, r0
     320:	bf08      	it	eq
     322:	4770      	bxeq	lr
     324:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     328:	4601      	mov	r1, r0
     32a:	f04f 0000 	mov.w	r0, #0
     32e:	e01c      	b.n	36a <CONFIG_BT_DEVICE_APPEARANCE+0x29>

00000330 <__aeabi_ul2f>:
     330:	ea50 0201 	orrs.w	r2, r0, r1
     334:	bf08      	it	eq
     336:	4770      	bxeq	lr
     338:	f04f 0300 	mov.w	r3, #0
     33c:	e00a      	b.n	354 <CONFIG_BT_DEVICE_APPEARANCE+0x13>
     33e:	bf00      	nop

00000340 <__aeabi_l2f>:
     340:	ea50 0201 	orrs.w	r2, r0, r1
     344:	bf08      	it	eq
     346:	4770      	bxeq	lr
     348:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     34c:	d502      	bpl.n	354 <CONFIG_BT_DEVICE_APPEARANCE+0x13>
     34e:	4240      	negs	r0, r0
     350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     354:	ea5f 0c01 	movs.w	ip, r1
     358:	bf02      	ittt	eq
     35a:	4684      	moveq	ip, r0
     35c:	4601      	moveq	r1, r0
     35e:	2000      	moveq	r0, #0
     360:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     364:	bf08      	it	eq
     366:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     36a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     36e:	fabc f28c 	clz	r2, ip
     372:	3a08      	subs	r2, #8
     374:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     378:	db10      	blt.n	39c <CONFIG_BT_DEVICE_APPEARANCE+0x5b>
     37a:	fa01 fc02 	lsl.w	ip, r1, r2
     37e:	4463      	add	r3, ip
     380:	fa00 fc02 	lsl.w	ip, r0, r2
     384:	f1c2 0220 	rsb	r2, r2, #32
     388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     38c:	fa20 f202 	lsr.w	r2, r0, r2
     390:	eb43 0002 	adc.w	r0, r3, r2
     394:	bf08      	it	eq
     396:	f020 0001 	biceq.w	r0, r0, #1
     39a:	4770      	bx	lr
     39c:	f102 0220 	add.w	r2, r2, #32
     3a0:	fa01 fc02 	lsl.w	ip, r1, r2
     3a4:	f1c2 0220 	rsb	r2, r2, #32
     3a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     3ac:	fa21 f202 	lsr.w	r2, r1, r2
     3b0:	eb43 0002 	adc.w	r0, r3, r2
     3b4:	bf08      	it	eq
     3b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3ba:	4770      	bx	lr

000003bc <__aeabi_fmul>:
     3bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     3c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     3c4:	bf1e      	ittt	ne
     3c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     3ca:	ea92 0f0c 	teqne	r2, ip
     3ce:	ea93 0f0c 	teqne	r3, ip
     3d2:	d06f      	beq.n	4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x68>
     3d4:	441a      	add	r2, r3
     3d6:	ea80 0c01 	eor.w	ip, r0, r1
     3da:	0240      	lsls	r0, r0, #9
     3dc:	bf18      	it	ne
     3de:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     3e2:	d01e      	beq.n	422 <CONFIG_BT_HCI_TX_STACK_SIZE+0x22>
     3e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     3e8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     3ec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     3f0:	fba0 3101 	umull	r3, r1, r0, r1
     3f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     3f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     3fc:	bf3e      	ittt	cc
     3fe:	0049      	lslcc	r1, r1, #1
     400:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     404:	005b      	lslcc	r3, r3, #1
     406:	ea40 0001 	orr.w	r0, r0, r1
     40a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     40e:	2afd      	cmp	r2, #253	; 0xfd
     410:	d81d      	bhi.n	44e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     416:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     41a:	bf08      	it	eq
     41c:	f020 0001 	biceq.w	r0, r0, #1
     420:	4770      	bx	lr
     422:	f090 0f00 	teq	r0, #0
     426:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     42a:	bf08      	it	eq
     42c:	0249      	lsleq	r1, r1, #9
     42e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     432:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     436:	3a7f      	subs	r2, #127	; 0x7f
     438:	bfc2      	ittt	gt
     43a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     43e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     442:	4770      	bxgt	lr
     444:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     448:	f04f 0300 	mov.w	r3, #0
     44c:	3a01      	subs	r2, #1
     44e:	dc5d      	bgt.n	50c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc0>
     450:	f112 0f19 	cmn.w	r2, #25
     454:	bfdc      	itt	le
     456:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     45a:	4770      	bxle	lr
     45c:	f1c2 0200 	rsb	r2, r2, #0
     460:	0041      	lsls	r1, r0, #1
     462:	fa21 f102 	lsr.w	r1, r1, r2
     466:	f1c2 0220 	rsb	r2, r2, #32
     46a:	fa00 fc02 	lsl.w	ip, r0, r2
     46e:	ea5f 0031 	movs.w	r0, r1, rrx
     472:	f140 0000 	adc.w	r0, r0, #0
     476:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     47a:	bf08      	it	eq
     47c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     480:	4770      	bx	lr
     482:	f092 0f00 	teq	r2, #0
     486:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     48a:	bf02      	ittt	eq
     48c:	0040      	lsleq	r0, r0, #1
     48e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     492:	3a01      	subeq	r2, #1
     494:	d0f9      	beq.n	48a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     496:	ea40 000c 	orr.w	r0, r0, ip
     49a:	f093 0f00 	teq	r3, #0
     49e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     4a2:	bf02      	ittt	eq
     4a4:	0049      	lsleq	r1, r1, #1
     4a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     4aa:	3b01      	subeq	r3, #1
     4ac:	d0f9      	beq.n	4a2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x56>
     4ae:	ea41 010c 	orr.w	r1, r1, ip
     4b2:	e78f      	b.n	3d4 <__aeabi_fmul+0x18>
     4b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     4b8:	ea92 0f0c 	teq	r2, ip
     4bc:	bf18      	it	ne
     4be:	ea93 0f0c 	teqne	r3, ip
     4c2:	d00a      	beq.n	4da <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8e>
     4c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     4c8:	bf18      	it	ne
     4ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     4ce:	d1d8      	bne.n	482 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x36>
     4d0:	ea80 0001 	eor.w	r0, r0, r1
     4d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     4d8:	4770      	bx	lr
     4da:	f090 0f00 	teq	r0, #0
     4de:	bf17      	itett	ne
     4e0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     4e4:	4608      	moveq	r0, r1
     4e6:	f091 0f00 	teqne	r1, #0
     4ea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     4ee:	d014      	beq.n	51a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xce>
     4f0:	ea92 0f0c 	teq	r2, ip
     4f4:	d101      	bne.n	4fa <CONFIG_BT_HCI_ECC_STACK_SIZE+0xae>
     4f6:	0242      	lsls	r2, r0, #9
     4f8:	d10f      	bne.n	51a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xce>
     4fa:	ea93 0f0c 	teq	r3, ip
     4fe:	d103      	bne.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
     500:	024b      	lsls	r3, r1, #9
     502:	bf18      	it	ne
     504:	4608      	movne	r0, r1
     506:	d108      	bne.n	51a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xce>
     508:	ea80 0001 	eor.w	r0, r0, r1
     50c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     510:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     518:	4770      	bx	lr
     51a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     51e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     522:	4770      	bx	lr

00000524 <__aeabi_fdiv>:
     524:	f04f 0cff 	mov.w	ip, #255	; 0xff
     528:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     52c:	bf1e      	ittt	ne
     52e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     532:	ea92 0f0c 	teqne	r2, ip
     536:	ea93 0f0c 	teqne	r3, ip
     53a:	d069      	beq.n	610 <CONFIG_BT_COMPANY_ID+0x1f>
     53c:	eba2 0203 	sub.w	r2, r2, r3
     540:	ea80 0c01 	eor.w	ip, r0, r1
     544:	0249      	lsls	r1, r1, #9
     546:	ea4f 2040 	mov.w	r0, r0, lsl #9
     54a:	d037      	beq.n	5bc <__aeabi_fdiv+0x98>
     54c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     550:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     554:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     558:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     55c:	428b      	cmp	r3, r1
     55e:	bf38      	it	cc
     560:	005b      	lslcc	r3, r3, #1
     562:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     566:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     56a:	428b      	cmp	r3, r1
     56c:	bf24      	itt	cs
     56e:	1a5b      	subcs	r3, r3, r1
     570:	ea40 000c 	orrcs.w	r0, r0, ip
     574:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     578:	bf24      	itt	cs
     57a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     57e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     582:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     586:	bf24      	itt	cs
     588:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     58c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     590:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     594:	bf24      	itt	cs
     596:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     59a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     59e:	011b      	lsls	r3, r3, #4
     5a0:	bf18      	it	ne
     5a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     5a6:	d1e0      	bne.n	56a <__aeabi_fdiv+0x46>
     5a8:	2afd      	cmp	r2, #253	; 0xfd
     5aa:	f63f af50 	bhi.w	44e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     5ae:	428b      	cmp	r3, r1
     5b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     5b4:	bf08      	it	eq
     5b6:	f020 0001 	biceq.w	r0, r0, #1
     5ba:	4770      	bx	lr
     5bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     5c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     5c4:	327f      	adds	r2, #127	; 0x7f
     5c6:	bfc2      	ittt	gt
     5c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     5cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     5d0:	4770      	bxgt	lr
     5d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     5d6:	f04f 0300 	mov.w	r3, #0
     5da:	3a01      	subs	r2, #1
     5dc:	e737      	b.n	44e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     5de:	f092 0f00 	teq	r2, #0
     5e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     5e6:	bf02      	ittt	eq
     5e8:	0040      	lsleq	r0, r0, #1
     5ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     5ee:	3a01      	subeq	r2, #1
     5f0:	d0f9      	beq.n	5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
     5f2:	ea40 000c 	orr.w	r0, r0, ip
     5f6:	f093 0f00 	teq	r3, #0
     5fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     5fe:	bf02      	ittt	eq
     600:	0049      	lsleq	r1, r1, #1
     602:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     606:	3b01      	subeq	r3, #1
     608:	d0f9      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60a:	ea41 010c 	orr.w	r1, r1, ip
     60e:	e795      	b.n	53c <__aeabi_fdiv+0x18>
     610:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     614:	ea92 0f0c 	teq	r2, ip
     618:	d108      	bne.n	62c <CONFIG_BT_COMPANY_ID+0x3b>
     61a:	0242      	lsls	r2, r0, #9
     61c:	f47f af7d 	bne.w	51a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xce>
     620:	ea93 0f0c 	teq	r3, ip
     624:	f47f af70 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
     628:	4608      	mov	r0, r1
     62a:	e776      	b.n	51a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xce>
     62c:	ea93 0f0c 	teq	r3, ip
     630:	d104      	bne.n	63c <CONFIG_BT_COMPANY_ID+0x4b>
     632:	024b      	lsls	r3, r1, #9
     634:	f43f af4c 	beq.w	4d0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x84>
     638:	4608      	mov	r0, r1
     63a:	e76e      	b.n	51a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xce>
     63c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     640:	bf18      	it	ne
     642:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     646:	d1ca      	bne.n	5de <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x2>
     648:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     64c:	f47f af5c 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
     650:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     654:	f47f af3c 	bne.w	4d0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x84>
     658:	e75f      	b.n	51a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xce>
     65a:	bf00      	nop

0000065c <__gesf2>:
     65c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     660:	e006      	b.n	670 <__cmpsf2+0x4>
     662:	bf00      	nop

00000664 <__lesf2>:
     664:	f04f 0c01 	mov.w	ip, #1
     668:	e002      	b.n	670 <__cmpsf2+0x4>
     66a:	bf00      	nop

0000066c <__cmpsf2>:
     66c:	f04f 0c01 	mov.w	ip, #1
     670:	f84d cd04 	str.w	ip, [sp, #-4]!
     674:	ea4f 0240 	mov.w	r2, r0, lsl #1
     678:	ea4f 0341 	mov.w	r3, r1, lsl #1
     67c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     680:	bf18      	it	ne
     682:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     686:	d011      	beq.n	6ac <__cmpsf2+0x40>
     688:	b001      	add	sp, #4
     68a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     68e:	bf18      	it	ne
     690:	ea90 0f01 	teqne	r0, r1
     694:	bf58      	it	pl
     696:	ebb2 0003 	subspl.w	r0, r2, r3
     69a:	bf88      	it	hi
     69c:	17c8      	asrhi	r0, r1, #31
     69e:	bf38      	it	cc
     6a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     6a4:	bf18      	it	ne
     6a6:	f040 0001 	orrne.w	r0, r0, #1
     6aa:	4770      	bx	lr
     6ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     6b0:	d102      	bne.n	6b8 <__cmpsf2+0x4c>
     6b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     6b6:	d105      	bne.n	6c4 <__cmpsf2+0x58>
     6b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     6bc:	d1e4      	bne.n	688 <__cmpsf2+0x1c>
     6be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     6c2:	d0e1      	beq.n	688 <__cmpsf2+0x1c>
     6c4:	f85d 0b04 	ldr.w	r0, [sp], #4
     6c8:	4770      	bx	lr
     6ca:	bf00      	nop

000006cc <__aeabi_cfrcmple>:
     6cc:	4684      	mov	ip, r0
     6ce:	4608      	mov	r0, r1
     6d0:	4661      	mov	r1, ip
     6d2:	e7ff      	b.n	6d4 <__aeabi_cfcmpeq>

000006d4 <__aeabi_cfcmpeq>:
     6d4:	b50f      	push	{r0, r1, r2, r3, lr}
     6d6:	f7ff ffc9 	bl	66c <__cmpsf2>
     6da:	2800      	cmp	r0, #0
     6dc:	bf48      	it	mi
     6de:	f110 0f00 	cmnmi.w	r0, #0
     6e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000006e4 <__aeabi_fcmpeq>:
     6e4:	f84d ed08 	str.w	lr, [sp, #-8]!
     6e8:	f7ff fff4 	bl	6d4 <__aeabi_cfcmpeq>
     6ec:	bf0c      	ite	eq
     6ee:	2001      	moveq	r0, #1
     6f0:	2000      	movne	r0, #0
     6f2:	f85d fb08 	ldr.w	pc, [sp], #8
     6f6:	bf00      	nop

000006f8 <__aeabi_fcmplt>:
     6f8:	f84d ed08 	str.w	lr, [sp, #-8]!
     6fc:	f7ff ffea 	bl	6d4 <__aeabi_cfcmpeq>
     700:	bf34      	ite	cc
     702:	2001      	movcc	r0, #1
     704:	2000      	movcs	r0, #0
     706:	f85d fb08 	ldr.w	pc, [sp], #8
     70a:	bf00      	nop

0000070c <__aeabi_fcmple>:
     70c:	f84d ed08 	str.w	lr, [sp, #-8]!
     710:	f7ff ffe0 	bl	6d4 <__aeabi_cfcmpeq>
     714:	bf94      	ite	ls
     716:	2001      	movls	r0, #1
     718:	2000      	movhi	r0, #0
     71a:	f85d fb08 	ldr.w	pc, [sp], #8
     71e:	bf00      	nop

00000720 <__aeabi_fcmpge>:
     720:	f84d ed08 	str.w	lr, [sp, #-8]!
     724:	f7ff ffd2 	bl	6cc <__aeabi_cfrcmple>
     728:	bf94      	ite	ls
     72a:	2001      	movls	r0, #1
     72c:	2000      	movhi	r0, #0
     72e:	f85d fb08 	ldr.w	pc, [sp], #8
     732:	bf00      	nop

00000734 <__aeabi_fcmpgt>:
     734:	f84d ed08 	str.w	lr, [sp, #-8]!
     738:	f7ff ffc8 	bl	6cc <__aeabi_cfrcmple>
     73c:	bf34      	ite	cc
     73e:	2001      	movcc	r0, #1
     740:	2000      	movcs	r0, #0
     742:	f85d fb08 	ldr.w	pc, [sp], #8
     746:	bf00      	nop

00000748 <__aeabi_uldivmod>:
     748:	b953      	cbnz	r3, 760 <__aeabi_uldivmod+0x18>
     74a:	b94a      	cbnz	r2, 760 <__aeabi_uldivmod+0x18>
     74c:	2900      	cmp	r1, #0
     74e:	bf08      	it	eq
     750:	2800      	cmpeq	r0, #0
     752:	bf1c      	itt	ne
     754:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     758:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     75c:	f000 b974 	b.w	a48 <__aeabi_idiv0>
     760:	f1ad 0c08 	sub.w	ip, sp, #8
     764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     768:	f000 f806 	bl	778 <__udivmoddi4>
     76c:	f8dd e004 	ldr.w	lr, [sp, #4]
     770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     774:	b004      	add	sp, #16
     776:	4770      	bx	lr

00000778 <__udivmoddi4>:
     778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     77c:	9e08      	ldr	r6, [sp, #32]
     77e:	460d      	mov	r5, r1
     780:	4604      	mov	r4, r0
     782:	4688      	mov	r8, r1
     784:	2b00      	cmp	r3, #0
     786:	d14d      	bne.n	824 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24>
     788:	428a      	cmp	r2, r1
     78a:	4694      	mov	ip, r2
     78c:	d968      	bls.n	860 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x60>
     78e:	fab2 f282 	clz	r2, r2
     792:	b152      	cbz	r2, 7aa <__udivmoddi4+0x32>
     794:	fa01 f302 	lsl.w	r3, r1, r2
     798:	f1c2 0120 	rsb	r1, r2, #32
     79c:	fa20 f101 	lsr.w	r1, r0, r1
     7a0:	fa0c fc02 	lsl.w	ip, ip, r2
     7a4:	ea41 0803 	orr.w	r8, r1, r3
     7a8:	4094      	lsls	r4, r2
     7aa:	ea4f 451c 	mov.w	r5, ip, lsr #16
     7ae:	0c21      	lsrs	r1, r4, #16
     7b0:	fbb8 fef5 	udiv	lr, r8, r5
     7b4:	fa1f f78c 	uxth.w	r7, ip
     7b8:	fb05 831e 	mls	r3, r5, lr, r8
     7bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     7c0:	fb0e f107 	mul.w	r1, lr, r7
     7c4:	4299      	cmp	r1, r3
     7c6:	d90b      	bls.n	7e0 <__udivmoddi4+0x68>
     7c8:	eb1c 0303 	adds.w	r3, ip, r3
     7cc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     7d0:	f080 811e 	bcs.w	a10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x210>
     7d4:	4299      	cmp	r1, r3
     7d6:	f240 811b 	bls.w	a10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x210>
     7da:	f1ae 0e02 	sub.w	lr, lr, #2
     7de:	4463      	add	r3, ip
     7e0:	1a5b      	subs	r3, r3, r1
     7e2:	b2a4      	uxth	r4, r4
     7e4:	fbb3 f0f5 	udiv	r0, r3, r5
     7e8:	fb05 3310 	mls	r3, r5, r0, r3
     7ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     7f0:	fb00 f707 	mul.w	r7, r0, r7
     7f4:	42a7      	cmp	r7, r4
     7f6:	d90a      	bls.n	80e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe>
     7f8:	eb1c 0404 	adds.w	r4, ip, r4
     7fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     800:	f080 8108 	bcs.w	a14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x214>
     804:	42a7      	cmp	r7, r4
     806:	f240 8105 	bls.w	a14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x214>
     80a:	4464      	add	r4, ip
     80c:	3802      	subs	r0, #2
     80e:	1be4      	subs	r4, r4, r7
     810:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     814:	2100      	movs	r1, #0
     816:	b11e      	cbz	r6, 820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
     818:	40d4      	lsrs	r4, r2
     81a:	2300      	movs	r3, #0
     81c:	e9c6 4300 	strd	r4, r3, [r6]
     820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     824:	428b      	cmp	r3, r1
     826:	d908      	bls.n	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
     828:	2e00      	cmp	r6, #0
     82a:	f000 80ee 	beq.w	a0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20a>
     82e:	2100      	movs	r1, #0
     830:	e9c6 0500 	strd	r0, r5, [r6]
     834:	4608      	mov	r0, r1
     836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     83a:	fab3 f183 	clz	r1, r3
     83e:	2900      	cmp	r1, #0
     840:	d14a      	bne.n	8d8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd8>
     842:	42ab      	cmp	r3, r5
     844:	d302      	bcc.n	84c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c>
     846:	4282      	cmp	r2, r0
     848:	f200 80f9 	bhi.w	a3e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x23e>
     84c:	1a84      	subs	r4, r0, r2
     84e:	eb65 0303 	sbc.w	r3, r5, r3
     852:	2001      	movs	r0, #1
     854:	4698      	mov	r8, r3
     856:	2e00      	cmp	r6, #0
     858:	d0e2      	beq.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
     85a:	e9c6 4800 	strd	r4, r8, [r6]
     85e:	e7df      	b.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
     860:	b902      	cbnz	r2, 864 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x64>
     862:	deff      	udf	#255	; 0xff
     864:	fab2 f282 	clz	r2, r2
     868:	2a00      	cmp	r2, #0
     86a:	f040 8091 	bne.w	990 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x190>
     86e:	eba1 050c 	sub.w	r5, r1, ip
     872:	ea4f 471c 	mov.w	r7, ip, lsr #16
     876:	fa1f fe8c 	uxth.w	lr, ip
     87a:	2101      	movs	r1, #1
     87c:	fbb5 f3f7 	udiv	r3, r5, r7
     880:	fb07 5013 	mls	r0, r7, r3, r5
     884:	0c25      	lsrs	r5, r4, #16
     886:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     88a:	fb0e f003 	mul.w	r0, lr, r3
     88e:	42a8      	cmp	r0, r5
     890:	d908      	bls.n	8a4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa4>
     892:	eb1c 0505 	adds.w	r5, ip, r5
     896:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     89a:	d202      	bcs.n	8a2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa2>
     89c:	42a8      	cmp	r0, r5
     89e:	f200 80cb 	bhi.w	a38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x238>
     8a2:	4643      	mov	r3, r8
     8a4:	1a2d      	subs	r5, r5, r0
     8a6:	b2a4      	uxth	r4, r4
     8a8:	fbb5 f0f7 	udiv	r0, r5, r7
     8ac:	fb07 5510 	mls	r5, r7, r0, r5
     8b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     8b4:	fb0e fe00 	mul.w	lr, lr, r0
     8b8:	45a6      	cmp	lr, r4
     8ba:	d908      	bls.n	8ce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xce>
     8bc:	eb1c 0404 	adds.w	r4, ip, r4
     8c0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     8c4:	d202      	bcs.n	8cc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xcc>
     8c6:	45a6      	cmp	lr, r4
     8c8:	f200 80bb 	bhi.w	a42 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x242>
     8cc:	4628      	mov	r0, r5
     8ce:	eba4 040e 	sub.w	r4, r4, lr
     8d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     8d6:	e79e      	b.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     8d8:	f1c1 0720 	rsb	r7, r1, #32
     8dc:	408b      	lsls	r3, r1
     8de:	fa22 fc07 	lsr.w	ip, r2, r7
     8e2:	ea4c 0c03 	orr.w	ip, ip, r3
     8e6:	fa20 f407 	lsr.w	r4, r0, r7
     8ea:	fa05 f301 	lsl.w	r3, r5, r1
     8ee:	431c      	orrs	r4, r3
     8f0:	40fd      	lsrs	r5, r7
     8f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
     8f6:	fa00 f301 	lsl.w	r3, r0, r1
     8fa:	fbb5 f8f9 	udiv	r8, r5, r9
     8fe:	0c20      	lsrs	r0, r4, #16
     900:	fa1f fe8c 	uxth.w	lr, ip
     904:	fb09 5518 	mls	r5, r9, r8, r5
     908:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     90c:	fb08 f00e 	mul.w	r0, r8, lr
     910:	42a8      	cmp	r0, r5
     912:	fa02 f201 	lsl.w	r2, r2, r1
     916:	d90b      	bls.n	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
     918:	eb1c 0505 	adds.w	r5, ip, r5
     91c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     920:	f080 8088 	bcs.w	a34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x234>
     924:	42a8      	cmp	r0, r5
     926:	f240 8085 	bls.w	a34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x234>
     92a:	f1a8 0802 	sub.w	r8, r8, #2
     92e:	4465      	add	r5, ip
     930:	1a2d      	subs	r5, r5, r0
     932:	b2a4      	uxth	r4, r4
     934:	fbb5 f0f9 	udiv	r0, r5, r9
     938:	fb09 5510 	mls	r5, r9, r0, r5
     93c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     940:	fb00 fe0e 	mul.w	lr, r0, lr
     944:	45ae      	cmp	lr, r5
     946:	d908      	bls.n	95a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15a>
     948:	eb1c 0505 	adds.w	r5, ip, r5
     94c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     950:	d26c      	bcs.n	a2c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x22c>
     952:	45ae      	cmp	lr, r5
     954:	d96a      	bls.n	a2c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x22c>
     956:	3802      	subs	r0, #2
     958:	4465      	add	r5, ip
     95a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     95e:	fba0 9402 	umull	r9, r4, r0, r2
     962:	eba5 050e 	sub.w	r5, r5, lr
     966:	42a5      	cmp	r5, r4
     968:	46c8      	mov	r8, r9
     96a:	46a6      	mov	lr, r4
     96c:	d356      	bcc.n	a1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x21c>
     96e:	d053      	beq.n	a18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x218>
     970:	b15e      	cbz	r6, 98a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18a>
     972:	ebb3 0208 	subs.w	r2, r3, r8
     976:	eb65 050e 	sbc.w	r5, r5, lr
     97a:	fa05 f707 	lsl.w	r7, r5, r7
     97e:	fa22 f301 	lsr.w	r3, r2, r1
     982:	40cd      	lsrs	r5, r1
     984:	431f      	orrs	r7, r3
     986:	e9c6 7500 	strd	r7, r5, [r6]
     98a:	2100      	movs	r1, #0
     98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     990:	f1c2 0320 	rsb	r3, r2, #32
     994:	fa20 f103 	lsr.w	r1, r0, r3
     998:	fa0c fc02 	lsl.w	ip, ip, r2
     99c:	fa25 f303 	lsr.w	r3, r5, r3
     9a0:	4095      	lsls	r5, r2
     9a2:	430d      	orrs	r5, r1
     9a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
     9a8:	fa1f fe8c 	uxth.w	lr, ip
     9ac:	fbb3 f1f7 	udiv	r1, r3, r7
     9b0:	fb07 3011 	mls	r0, r7, r1, r3
     9b4:	0c2b      	lsrs	r3, r5, #16
     9b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     9ba:	fb01 f00e 	mul.w	r0, r1, lr
     9be:	4298      	cmp	r0, r3
     9c0:	fa04 f402 	lsl.w	r4, r4, r2
     9c4:	d908      	bls.n	9d8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d8>
     9c6:	eb1c 0303 	adds.w	r3, ip, r3
     9ca:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     9ce:	d22f      	bcs.n	a30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x230>
     9d0:	4298      	cmp	r0, r3
     9d2:	d92d      	bls.n	a30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x230>
     9d4:	3902      	subs	r1, #2
     9d6:	4463      	add	r3, ip
     9d8:	1a1b      	subs	r3, r3, r0
     9da:	b2ad      	uxth	r5, r5
     9dc:	fbb3 f0f7 	udiv	r0, r3, r7
     9e0:	fb07 3310 	mls	r3, r7, r0, r3
     9e4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     9e8:	fb00 f30e 	mul.w	r3, r0, lr
     9ec:	42ab      	cmp	r3, r5
     9ee:	d908      	bls.n	a02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x202>
     9f0:	eb1c 0505 	adds.w	r5, ip, r5
     9f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     9f8:	d216      	bcs.n	a28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x228>
     9fa:	42ab      	cmp	r3, r5
     9fc:	d914      	bls.n	a28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x228>
     9fe:	3802      	subs	r0, #2
     a00:	4465      	add	r5, ip
     a02:	1aed      	subs	r5, r5, r3
     a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     a08:	e738      	b.n	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
     a0a:	4631      	mov	r1, r6
     a0c:	4630      	mov	r0, r6
     a0e:	e707      	b.n	820 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20>
     a10:	4686      	mov	lr, r0
     a12:	e6e5      	b.n	7e0 <__udivmoddi4+0x68>
     a14:	4618      	mov	r0, r3
     a16:	e6fa      	b.n	80e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe>
     a18:	454b      	cmp	r3, r9
     a1a:	d2a9      	bcs.n	970 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x170>
     a1c:	ebb9 0802 	subs.w	r8, r9, r2
     a20:	eb64 0e0c 	sbc.w	lr, r4, ip
     a24:	3801      	subs	r0, #1
     a26:	e7a3      	b.n	970 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x170>
     a28:	4640      	mov	r0, r8
     a2a:	e7ea      	b.n	a02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x202>
     a2c:	4620      	mov	r0, r4
     a2e:	e794      	b.n	95a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15a>
     a30:	4641      	mov	r1, r8
     a32:	e7d1      	b.n	9d8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d8>
     a34:	46d0      	mov	r8, sl
     a36:	e77b      	b.n	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
     a38:	3b02      	subs	r3, #2
     a3a:	4465      	add	r5, ip
     a3c:	e732      	b.n	8a4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa4>
     a3e:	4608      	mov	r0, r1
     a40:	e709      	b.n	856 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56>
     a42:	4464      	add	r4, ip
     a44:	3802      	subs	r0, #2
     a46:	e742      	b.n	8ce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xce>

00000a48 <__aeabi_idiv0>:
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <strcmp>:
     a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
     a50:	f811 3b01 	ldrb.w	r3, [r1], #1
     a54:	2a01      	cmp	r2, #1
     a56:	bf28      	it	cs
     a58:	429a      	cmpcs	r2, r3
     a5a:	d0f7      	beq.n	a4c <strcmp>
     a5c:	1ad0      	subs	r0, r2, r3
     a5e:	4770      	bx	lr

00000a60 <strlen>:
     a60:	4603      	mov	r3, r0
     a62:	f813 2b01 	ldrb.w	r2, [r3], #1
     a66:	2a00      	cmp	r2, #0
     a68:	d1fb      	bne.n	a62 <strlen+0x2>
     a6a:	1a18      	subs	r0, r3, r0
     a6c:	3801      	subs	r0, #1
     a6e:	4770      	bx	lr

00000a70 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     a70:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     a72:	4d48      	ldr	r5, [pc, #288]	; (b94 <bt_init+0x124>)
     a74:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     a78:	6899      	ldr	r1, [r3, #8]
     a7a:	f011 0101 	ands.w	r1, r1, #1
{
     a7e:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     a80:	d121      	bne.n	ac6 <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     a82:	aa03      	add	r2, sp, #12
     a84:	f640 4003 	movw	r0, #3075	; 0xc03
     a88:	f007 fb80 	bl	818c <bt_hci_cmd_send_sync>
		if (err) {
     a8c:	4604      	mov	r4, r0
     a8e:	2800      	cmp	r0, #0
     a90:	d17c      	bne.n	b8c <bt_init+0x11c>
	uint8_t status = buf->data[0];
     a92:	9b03      	ldr	r3, [sp, #12]
     a94:	689b      	ldr	r3, [r3, #8]
	if (status) {
     a96:	781b      	ldrb	r3, [r3, #0]
     a98:	b993      	cbnz	r3, ac0 <bt_init+0x50>
	scan_dev_found_cb = NULL;
     a9a:	4a3f      	ldr	r2, [pc, #252]	; (b98 <bt_init+0x128>)
     a9c:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     a9e:	f105 0398 	add.w	r3, r5, #152	; 0x98
     aa2:	4618      	mov	r0, r3
     aa4:	f022 f8f6 	bl	22c94 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     aa8:	f3bf 8f5b 	dmb	ish
     aac:	f000 0005 	and.w	r0, r0, #5
     ab0:	e853 2f00 	ldrex	r2, [r3]
     ab4:	e843 0100 	strex	r1, r0, [r3]
     ab8:	2900      	cmp	r1, #0
     aba:	d1f9      	bne.n	ab0 <bt_init+0x40>
     abc:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     ac0:	9803      	ldr	r0, [sp, #12]
     ac2:	f01c ffab 	bl	1da1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     ac6:	aa03      	add	r2, sp, #12
     ac8:	2100      	movs	r1, #0
     aca:	f241 0003 	movw	r0, #4099	; 0x1003
     ace:	f007 fb5d 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
     ad2:	4604      	mov	r4, r0
     ad4:	2800      	cmp	r0, #0
     ad6:	d159      	bne.n	b8c <bt_init+0x11c>
	read_local_features_complete(rsp);
     ad8:	9b03      	ldr	r3, [sp, #12]
     ada:	4e30      	ldr	r6, [pc, #192]	; (b9c <bt_init+0x12c>)
     adc:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     ade:	f8d2 0001 	ldr.w	r0, [r2, #1]
     ae2:	f8d2 1005 	ldr.w	r1, [r2, #5]
     ae6:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     ae8:	4618      	mov	r0, r3
     aea:	f01c ff97 	bl	1da1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     aee:	4621      	mov	r1, r4
     af0:	aa03      	add	r2, sp, #12
     af2:	f241 0001 	movw	r0, #4097	; 0x1001
     af6:	f007 fb49 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
     afa:	4604      	mov	r4, r0
     afc:	2800      	cmp	r0, #0
     afe:	d145      	bne.n	b8c <bt_init+0x11c>
	read_local_ver_complete(rsp);
     b00:	9803      	ldr	r0, [sp, #12]
     b02:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     b04:	785a      	ldrb	r2, [r3, #1]
     b06:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     b0a:	78d9      	ldrb	r1, [r3, #3]
     b0c:	789a      	ldrb	r2, [r3, #2]
     b0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     b12:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     b14:	791a      	ldrb	r2, [r3, #4]
     b16:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     b1a:	7a19      	ldrb	r1, [r3, #8]
     b1c:	79da      	ldrb	r2, [r3, #7]
     b1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     b22:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     b24:	795a      	ldrb	r2, [r3, #5]
     b26:	799b      	ldrb	r3, [r3, #6]
     b28:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     b2c:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     b2e:	f01c ff75 	bl	1da1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     b32:	4621      	mov	r1, r4
     b34:	aa03      	add	r2, sp, #12
     b36:	f241 0002 	movw	r0, #4098	; 0x1002
     b3a:	f007 fb27 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
     b3e:	4604      	mov	r4, r0
     b40:	bb20      	cbnz	r0, b8c <bt_init+0x11c>
	read_supported_commands_complete(rsp);
     b42:	9f03      	ldr	r7, [sp, #12]
     b44:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
     b46:	1c53      	adds	r3, r2, #1
     b48:	3241      	adds	r2, #65	; 0x41
     b4a:	6818      	ldr	r0, [r3, #0]
     b4c:	6859      	ldr	r1, [r3, #4]
     b4e:	4634      	mov	r4, r6
     b50:	c403      	stmia	r4!, {r0, r1}
     b52:	3308      	adds	r3, #8
     b54:	4293      	cmp	r3, r2
     b56:	4626      	mov	r6, r4
     b58:	d1f7      	bne.n	b4a <bt_init+0xda>
		bt_dev.supported_commands[34] |= 0x04;
     b5a:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     b5e:	4638      	mov	r0, r7
		bt_dev.supported_commands[34] |= 0x04;
     b60:	f043 0306 	orr.w	r3, r3, #6
     b64:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     b68:	f01c ff58 	bl	1da1c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     b6c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     b70:	065a      	lsls	r2, r3, #25
     b72:	d41b      	bmi.n	bac <bt_init+0x13c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     b74:	4b0a      	ldr	r3, [pc, #40]	; (ba0 <bt_init+0x130>)
     b76:	490b      	ldr	r1, [pc, #44]	; (ba4 <bt_init+0x134>)
		BT_ERR("Non-LE capable controller detected!");
     b78:	480b      	ldr	r0, [pc, #44]	; (ba8 <bt_init+0x138>)
     b7a:	1ac9      	subs	r1, r1, r3
     b7c:	08c9      	lsrs	r1, r1, #3
     b7e:	0189      	lsls	r1, r1, #6
     b80:	f041 0101 	orr.w	r1, r1, #1
     b84:	f020 fa84 	bl	21090 <log_0>
		return -ENODEV;
     b88:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     b8c:	4620      	mov	r0, r4
     b8e:	b009      	add	sp, #36	; 0x24
     b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b92:	bf00      	nop
     b94:	20000000 	.word	0x20000000
     b98:	20001be0 	.word	0x20001be0
     b9c:	20000040 	.word	0x20000040
     ba0:	00026828 	.word	0x00026828
     ba4:	00026918 	.word	0x00026918
     ba8:	0002975e 	.word	0x0002975e
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     bac:	aa03      	add	r2, sp, #12
     bae:	2100      	movs	r1, #0
     bb0:	f242 0003 	movw	r0, #8195	; 0x2003
     bb4:	f007 faea 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
     bb8:	4604      	mov	r4, r0
     bba:	2800      	cmp	r0, #0
     bbc:	d1e6      	bne.n	b8c <bt_init+0x11c>
	read_le_features_complete(rsp);
     bbe:	9b03      	ldr	r3, [sp, #12]
     bc0:	4ea9      	ldr	r6, [pc, #676]	; (e68 <bt_init+0x3f8>)
     bc2:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     bc4:	f8d2 0001 	ldr.w	r0, [r2, #1]
     bc8:	f8d2 1005 	ldr.w	r1, [r2, #5]
     bcc:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     bce:	4618      	mov	r0, r3
     bd0:	f01c ff24 	bl	1da1c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     bd4:	4621      	mov	r1, r4
     bd6:	aa03      	add	r2, sp, #12
     bd8:	f242 0002 	movw	r0, #8194	; 0x2002
     bdc:	f007 fad6 	bl	818c <bt_hci_cmd_send_sync>
		if (err) {
     be0:	4604      	mov	r4, r0
     be2:	2800      	cmp	r0, #0
     be4:	d1d2      	bne.n	b8c <bt_init+0x11c>
		le_read_buffer_size_complete(rsp);
     be6:	9b03      	ldr	r3, [sp, #12]
     be8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     bea:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     bee:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
     bf2:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     bf4:	b129      	cbz	r1, c02 <bt_init+0x192>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     bf6:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     bf8:	4611      	mov	r1, r2
     bfa:	f106 0028 	add.w	r0, r6, #40	; 0x28
     bfe:	f025 f8c3 	bl	25d88 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     c02:	9803      	ldr	r0, [sp, #12]
     c04:	f01c ff0a 	bl	1da1c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     c08:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     c0c:	f016 0620 	ands.w	r6, r6, #32
     c10:	f000 8105 	beq.w	e1e <bt_init+0x3ae>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     c14:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     c18:	071b      	lsls	r3, r3, #28
     c1a:	d512      	bpl.n	c42 <bt_init+0x1d2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     c1c:	aa03      	add	r2, sp, #12
     c1e:	2100      	movs	r1, #0
     c20:	f242 001c 	movw	r0, #8220	; 0x201c
     c24:	f007 fab2 	bl	818c <bt_hci_cmd_send_sync>
		if (err) {
     c28:	4604      	mov	r4, r0
     c2a:	2800      	cmp	r0, #0
     c2c:	d1ae      	bne.n	b8c <bt_init+0x11c>
		le_read_supp_states_complete(rsp);
     c2e:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     c30:	6883      	ldr	r3, [r0, #8]
     c32:	f8d3 2001 	ldr.w	r2, [r3, #1]
     c36:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     c3a:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     c3e:	f01c feed 	bl	1da1c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     c42:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     c46:	069f      	lsls	r7, r3, #26
     c48:	d529      	bpl.n	c9e <bt_init+0x22e>
		if (!IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
     c4a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     c4e:	689b      	ldr	r3, [r3, #8]
     c50:	079e      	lsls	r6, r3, #30
     c52:	d424      	bmi.n	c9e <bt_init+0x22e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     c54:	a902      	add	r1, sp, #8
     c56:	f10d 0006 	add.w	r0, sp, #6
     c5a:	f007 fb11 	bl	8280 <hci_le_read_max_data_len>
			if (err) {
     c5e:	4604      	mov	r4, r0
     c60:	2800      	cmp	r0, #0
     c62:	d193      	bne.n	b8c <bt_init+0x11c>
			buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     c64:	2104      	movs	r1, #4
     c66:	f242 0024 	movw	r0, #8228	; 0x2024
     c6a:	f007 f927 	bl	7ebc <bt_hci_cmd_create>
			if (!buf) {
     c6e:	4606      	mov	r6, r0
     c70:	2800      	cmp	r0, #0
     c72:	f000 80db 	beq.w	e2c <bt_init+0x3bc>
			cp = net_buf_add(buf, sizeof(*cp));
     c76:	2104      	movs	r1, #4
     c78:	3008      	adds	r0, #8
     c7a:	f024 fc06 	bl	2548a <net_buf_simple_add>
			cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     c7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c82:	8003      	strh	r3, [r0, #0]
			cp->max_tx_time = sys_cpu_to_le16(tx_time);
     c84:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     c88:	8043      	strh	r3, [r0, #2]
			err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     c8a:	4622      	mov	r2, r4
     c8c:	4631      	mov	r1, r6
     c8e:	f242 0024 	movw	r0, #8228	; 0x2024
     c92:	f007 fa7b 	bl	818c <bt_hci_cmd_send_sync>
			if (err) {
     c96:	4604      	mov	r4, r0
     c98:	2800      	cmp	r0, #0
     c9a:	f47f af77 	bne.w	b8c <bt_init+0x11c>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     c9e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     ca2:	065c      	lsls	r4, r3, #25
     ca4:	d510      	bpl.n	cc8 <bt_init+0x258>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     ca6:	aa03      	add	r2, sp, #12
     ca8:	2100      	movs	r1, #0
     caa:	f242 002a 	movw	r0, #8234	; 0x202a
     cae:	f007 fa6d 	bl	818c <bt_hci_cmd_send_sync>
		if (err) {
     cb2:	4604      	mov	r4, r0
     cb4:	2800      	cmp	r0, #0
     cb6:	f47f af69 	bne.w	b8c <bt_init+0x11c>
		le_read_resolving_list_size_complete(rsp);
     cba:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     cbc:	6883      	ldr	r3, [r0, #8]
     cbe:	785b      	ldrb	r3, [r3, #1]
     cc0:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
     cc4:	f01c feaa 	bl	1da1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     cc8:	2108      	movs	r1, #8
     cca:	f242 0001 	movw	r0, #8193	; 0x2001
     cce:	f007 f8f5 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
     cd2:	4604      	mov	r4, r0
     cd4:	2800      	cmp	r0, #0
     cd6:	f000 80a9 	beq.w	e2c <bt_init+0x3bc>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     cda:	2108      	movs	r1, #8
     cdc:	4408      	add	r0, r1
     cde:	f024 fbd4 	bl	2548a <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     ce2:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     ce6:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     cea:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     cec:	f240 2302 	movw	r3, #514	; 0x202
     cf0:	bf08      	it	eq
     cf2:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     cf4:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     cf6:	bf4c      	ite	mi
     cf8:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     cfc:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     d00:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     d04:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     d06:	bf48      	it	mi
     d08:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     d0c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     d10:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     d14:	bf18      	it	ne
     d16:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     d1a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     d1e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     d20:	bf48      	it	mi
     d22:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     d26:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     d28:	bf08      	it	eq
     d2a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     d2e:	2100      	movs	r1, #0
     d30:	f022 f81c 	bl	22d6c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     d34:	4621      	mov	r1, r4
     d36:	2200      	movs	r2, #0
     d38:	f242 0001 	movw	r0, #8193	; 0x2001
     d3c:	f007 fa26 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
     d40:	4604      	mov	r4, r0
     d42:	2800      	cmp	r0, #0
     d44:	f47f af22 	bne.w	b8c <bt_init+0x11c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     d48:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     d4c:	0698      	lsls	r0, r3, #26
     d4e:	d41e      	bmi.n	d8e <bt_init+0x31e>
	if (bt_dev.le.acl_mtu) {
     d50:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
     d54:	b9d9      	cbnz	r1, d8e <bt_init+0x31e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     d56:	aa03      	add	r2, sp, #12
     d58:	f241 0005 	movw	r0, #4101	; 0x1005
     d5c:	f007 fa16 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
     d60:	4604      	mov	r4, r0
     d62:	2800      	cmp	r0, #0
     d64:	f47f af12 	bne.w	b8c <bt_init+0x11c>
	if (bt_dev.le.acl_mtu) {
     d68:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
     d6c:	b963      	cbnz	r3, d88 <bt_init+0x318>
     d6e:	9b03      	ldr	r3, [sp, #12]
     d70:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     d72:	785a      	ldrb	r2, [r3, #1]
     d74:	7899      	ldrb	r1, [r3, #2]
     d76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     d7a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     d7e:	889a      	ldrh	r2, [r3, #4]
     d80:	483a      	ldr	r0, [pc, #232]	; (e6c <bt_init+0x3fc>)
     d82:	4611      	mov	r1, r2
     d84:	f025 f800 	bl	25d88 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     d88:	9803      	ldr	r0, [sp, #12]
     d8a:	f01c fe47 	bl	1da1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     d8e:	2108      	movs	r1, #8
     d90:	f640 4001 	movw	r0, #3073	; 0xc01
     d94:	f007 f892 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
     d98:	4604      	mov	r4, r0
     d9a:	2800      	cmp	r0, #0
     d9c:	d046      	beq.n	e2c <bt_init+0x3bc>
	ev = net_buf_add(buf, sizeof(*ev));
     d9e:	2108      	movs	r1, #8
     da0:	4408      	add	r0, r1
     da2:	f024 fb72 	bl	2548a <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     da6:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     daa:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     dac:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     dae:	d552      	bpl.n	e56 <bt_init+0x3e6>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     db0:	a12b      	add	r1, pc, #172	; (adr r1, e60 <bt_init+0x3f0>)
     db2:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     db6:	f021 ffd9 	bl	22d6c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     dba:	4621      	mov	r1, r4
     dbc:	2200      	movs	r2, #0
     dbe:	f640 4001 	movw	r0, #3073	; 0xc01
     dc2:	f007 f9e3 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
     dc6:	4604      	mov	r4, r0
     dc8:	2800      	cmp	r0, #0
     dca:	f47f aedf 	bne.w	b8c <bt_init+0x11c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     dce:	4601      	mov	r1, r0
     dd0:	aa02      	add	r2, sp, #8
     dd2:	f64f 4001 	movw	r0, #64513	; 0xfc01
     dd6:	f007 f9d9 	bl	818c <bt_hci_cmd_send_sync>
     dda:	4e25      	ldr	r6, [pc, #148]	; (e70 <bt_init+0x400>)
     ddc:	4b25      	ldr	r3, [pc, #148]	; (e74 <bt_init+0x404>)
     dde:	1af6      	subs	r6, r6, r3
     de0:	08f6      	lsrs	r6, r6, #3
     de2:	01b6      	lsls	r6, r6, #6
	if (err) {
     de4:	2800      	cmp	r0, #0
     de6:	d04d      	beq.n	e84 <bt_init+0x414>
		BT_WARN("Vendor HCI extensions not available");
     de8:	4823      	ldr	r0, [pc, #140]	; (e78 <bt_init+0x408>)
     dea:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
     dee:	f020 f94f 	bl	21090 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     df2:	79eb      	ldrb	r3, [r5, #7]
     df4:	2b00      	cmp	r3, #0
     df6:	f040 80b7 	bne.w	f68 <bt_init+0x4f8>
		bt_setup_public_id_addr();
     dfa:	f008 fb89 	bl	9510 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     dfe:	79eb      	ldrb	r3, [r5, #7]
     e00:	2b00      	cmp	r3, #0
     e02:	f040 80b1 	bne.w	f68 <bt_init+0x4f8>
		err = bt_setup_random_id_addr();
     e06:	f008 fc35 	bl	9674 <bt_setup_random_id_addr>
		if (err) {
     e0a:	4604      	mov	r4, r0
     e0c:	2800      	cmp	r0, #0
     e0e:	f000 80a2 	beq.w	f56 <bt_init+0x4e6>
			BT_ERR("Unable to set identity address");
     e12:	481a      	ldr	r0, [pc, #104]	; (e7c <bt_init+0x40c>)
     e14:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
     e18:	f020 f93a 	bl	21090 <log_0>
			return err;
     e1c:	e6b6      	b.n	b8c <bt_init+0x11c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     e1e:	2102      	movs	r1, #2
     e20:	f640 406d 	movw	r0, #3181	; 0xc6d
     e24:	f007 f84a 	bl	7ebc <bt_hci_cmd_create>
		if (!buf) {
     e28:	4604      	mov	r4, r0
     e2a:	b910      	cbnz	r0, e32 <bt_init+0x3c2>
		return -ENOBUFS;
     e2c:	f06f 0468 	mvn.w	r4, #104	; 0x68
     e30:	e6ac      	b.n	b8c <bt_init+0x11c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     e32:	2102      	movs	r1, #2
     e34:	3008      	adds	r0, #8
     e36:	f024 fb28 	bl	2548a <net_buf_simple_add>
		cp_le->le = 0x01;
     e3a:	2301      	movs	r3, #1
     e3c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     e3e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     e40:	4621      	mov	r1, r4
     e42:	4632      	mov	r2, r6
     e44:	f640 406d 	movw	r0, #3181	; 0xc6d
     e48:	f007 f9a0 	bl	818c <bt_hci_cmd_send_sync>
		if (err) {
     e4c:	4604      	mov	r4, r0
     e4e:	2800      	cmp	r0, #0
     e50:	f43f aee0 	beq.w	c14 <bt_init+0x1a4>
     e54:	e69a      	b.n	b8c <bt_init+0x11c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     e56:	480a      	ldr	r0, [pc, #40]	; (e80 <bt_init+0x410>)
     e58:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     e5c:	e7ab      	b.n	db6 <bt_init+0x346>
     e5e:	bf00      	nop
     e60:	02008890 	.word	0x02008890
     e64:	20008000 	.word	0x20008000
     e68:	200000a0 	.word	0x200000a0
     e6c:	200000d0 	.word	0x200000d0
     e70:	00026918 	.word	0x00026918
     e74:	00026828 	.word	0x00026828
     e78:	00029782 	.word	0x00029782
     e7c:	00029856 	.word	0x00029856
     e80:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
     e84:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     e86:	483d      	ldr	r0, [pc, #244]	; (f7c <bt_init+0x50c>)
	rp.info = (void *)rsp->data;
     e88:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     e8a:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     e8e:	2a03      	cmp	r2, #3
		return plat_str[platform];
     e90:	bf96      	itet	ls
     e92:	493b      	ldrls	r1, [pc, #236]	; (f80 <bt_init+0x510>)
	return "unknown";
     e94:	493b      	ldrhi	r1, [pc, #236]	; (f84 <bt_init+0x514>)
		return plat_str[platform];
     e96:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     e9a:	f046 0303 	orr.w	r3, r6, #3
     e9e:	f020 f918 	bl	210d2 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     ea2:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     ea6:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     eaa:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     eac:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     eb0:	d12e      	bne.n	f10 <bt_init+0x4a0>
	if (variant < ARRAY_SIZE(nordic_str)) {
     eb2:	2a03      	cmp	r2, #3
     eb4:	d82c      	bhi.n	f10 <bt_init+0x4a0>
		return nordic_str[variant];
     eb6:	4934      	ldr	r1, [pc, #208]	; (f88 <bt_init+0x518>)
     eb8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     ebc:	4833      	ldr	r0, [pc, #204]	; (f8c <bt_init+0x51c>)
     ebe:	f020 f908 	bl	210d2 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     ec2:	7962      	ldrb	r2, [r4, #5]
     ec4:	4832      	ldr	r0, [pc, #200]	; (f90 <bt_init+0x520>)
	if (variant < ARRAY_SIZE(var_str)) {
     ec6:	2a03      	cmp	r2, #3
		return var_str[variant];
     ec8:	bf96      	itet	ls
     eca:	4932      	ldrls	r1, [pc, #200]	; (f94 <bt_init+0x524>)
	return "unknown";
     ecc:	492d      	ldrhi	r1, [pc, #180]	; (f84 <bt_init+0x514>)
		return var_str[variant];
     ece:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     ed2:	e9cd 1203 	strd	r1, r2, [sp, #12]
     ed6:	79a2      	ldrb	r2, [r4, #6]
     ed8:	9205      	str	r2, [sp, #20]
     eda:	f8b4 2007 	ldrh.w	r2, [r4, #7]
     ede:	9206      	str	r2, [sp, #24]
     ee0:	f8d4 2009 	ldr.w	r2, [r4, #9]
     ee4:	9207      	str	r2, [sp, #28]
     ee6:	f046 0303 	orr.w	r3, r6, #3
     eea:	2205      	movs	r2, #5
     eec:	a903      	add	r1, sp, #12
     eee:	f020 f925 	bl	2113c <log_n>
	net_buf_unref(rsp);
     ef2:	9802      	ldr	r0, [sp, #8]
     ef4:	f01c fd92 	bl	1da1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     ef8:	aa02      	add	r2, sp, #8
     efa:	2100      	movs	r1, #0
     efc:	f64f 4002 	movw	r0, #64514	; 0xfc02
     f00:	f007 f944 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
     f04:	4604      	mov	r4, r0
     f06:	b128      	cbz	r0, f14 <bt_init+0x4a4>
		BT_WARN("Failed to read supported vendor commands");
     f08:	4823      	ldr	r0, [pc, #140]	; (f98 <bt_init+0x528>)
     f0a:	f046 0102 	orr.w	r1, r6, #2
     f0e:	e76e      	b.n	dee <bt_init+0x37e>
		return "unknown";
     f10:	491c      	ldr	r1, [pc, #112]	; (f84 <bt_init+0x514>)
     f12:	e7d3      	b.n	ebc <bt_init+0x44c>
	rp.cmds = (void *)rsp->data;
     f14:	9802      	ldr	r0, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     f16:	4f21      	ldr	r7, [pc, #132]	; (f9c <bt_init+0x52c>)
     f18:	6883      	ldr	r3, [r0, #8]
     f1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
     f1e:	f8a7 3089 	strh.w	r3, [r7, #137]	; 0x89
	net_buf_unref(rsp);
     f22:	f01c fd7b 	bl	1da1c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     f26:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
     f2a:	075b      	lsls	r3, r3, #29
     f2c:	f57f af61 	bpl.w	df2 <bt_init+0x382>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     f30:	aa02      	add	r2, sp, #8
     f32:	4621      	mov	r1, r4
     f34:	f64f 4003 	movw	r0, #64515	; 0xfc03
     f38:	f007 f928 	bl	818c <bt_hci_cmd_send_sync>
		if (err) {
     f3c:	b118      	cbz	r0, f46 <bt_init+0x4d6>
			BT_WARN("Failed to read supported vendor features");
     f3e:	4818      	ldr	r0, [pc, #96]	; (fa0 <bt_init+0x530>)
     f40:	f046 0102 	orr.w	r1, r6, #2
     f44:	e753      	b.n	dee <bt_init+0x37e>
		rp.feat = (void *)rsp->data;
     f46:	9802      	ldr	r0, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
     f48:	6883      	ldr	r3, [r0, #8]
     f4a:	785b      	ldrb	r3, [r3, #1]
     f4c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		net_buf_unref(rsp);
     f50:	f01c fd64 	bl	1da1c <net_buf_unref>
     f54:	e74d      	b.n	df2 <bt_init+0x382>
		err = set_random_address(&bt_dev.id_addr[0].a);
     f56:	4813      	ldr	r0, [pc, #76]	; (fa4 <bt_init+0x534>)
     f58:	f007 f9bc 	bl	82d4 <set_random_address>
		if (err) {
     f5c:	4604      	mov	r4, r0
     f5e:	b118      	cbz	r0, f68 <bt_init+0x4f8>
			BT_ERR("Unable to set random address");
     f60:	4811      	ldr	r0, [pc, #68]	; (fa8 <bt_init+0x538>)
     f62:	f046 0101 	orr.w	r1, r6, #1
     f66:	e757      	b.n	e18 <bt_init+0x3a8>
		err = bt_conn_init();
     f68:	f009 ff3e 	bl	ade8 <bt_conn_init>
		if (err) {
     f6c:	4604      	mov	r4, r0
     f6e:	2800      	cmp	r0, #0
     f70:	f47f ae0c 	bne.w	b8c <bt_init+0x11c>
	bt_finalize_init();
     f74:	f008 fa14 	bl	93a0 <bt_finalize_init>
	return 0;
     f78:	e608      	b.n	b8c <bt_init+0x11c>
     f7a:	bf00      	nop
     f7c:	000297a6 	.word	0x000297a6
     f80:	00026f24 	.word	0x00026f24
     f84:	00029079 	.word	0x00029079
     f88:	00026ee4 	.word	0x00026ee4
     f8c:	000297bf 	.word	0x000297bf
     f90:	000297d7 	.word	0x000297d7
     f94:	00026f5c 	.word	0x00026f5c
     f98:	00029804 	.word	0x00029804
     f9c:	20000000 	.word	0x20000000
     fa0:	0002982d 	.word	0x0002982d
     fa4:	20000001 	.word	0x20000001
     fa8:	00029875 	.word	0x00029875
     fac:	00000000 	.word	0x00000000

00000fb0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fb4:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     fb6:	2800      	cmp	r0, #0
     fb8:	f000 808f 	beq.w	10da <ll_adv_enable+0x12a>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     fbc:	4cb9      	ldr	r4, [pc, #740]	; (12a4 <ll_adv_enable+0x2f4>)
     fbe:	f894 60d6 	ldrb.w	r6, [r4, #214]	; 0xd6
     fc2:	f016 0601 	ands.w	r6, r6, #1
     fc6:	d136      	bne.n	1036 <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     fc8:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     fcc:	f894 707c 	ldrb.w	r7, [r4, #124]	; 0x7c
		ull_filter_adv_update(lll->filter_policy);
     fd0:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     fd4:	2327      	movs	r3, #39	; 0x27
     fd6:	222d      	movs	r2, #45	; 0x2d
     fd8:	fb13 2808 	smlabb	r8, r3, r8, r2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     fdc:	fb03 4707 	mla	r7, r3, r7, r4
     fe0:	f000 0003 	and.w	r0, r0, #3
		lll->rl_idx = FILTER_IDX_NONE;
     fe4:	23ff      	movs	r3, #255	; 0xff
     fe6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		ull_filter_adv_update(lll->filter_policy);
     fea:	f018 f855 	bl	19098 <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     fee:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
     ff2:	0743      	lsls	r3, r0, #29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     ff4:	eb04 0908 	add.w	r9, r4, r8
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     ff8:	f107 077d 	add.w	r7, r7, #125	; 0x7d
     ffc:	d420      	bmi.n	1040 <ll_adv_enable+0x90>
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     ffe:	f814 0008 	ldrb.w	r0, [r4, r8]
    1002:	4631      	mov	r1, r6
    1004:	f3c0 1080 	ubfx	r0, r0, #6, #1
    1008:	f00f febe 	bl	10d88 <ll_addr_get>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    100c:	6803      	ldr	r3, [r0, #0]
    100e:	f8c9 3002 	str.w	r3, [r9, #2]
    1012:	8883      	ldrh	r3, [r0, #4]
    1014:	f8a9 3006 	strh.w	r3, [r9, #6]
    1018:	6803      	ldr	r3, [r0, #0]
    101a:	f8c7 3002 	str.w	r3, [r7, #2]
    101e:	8883      	ldrh	r3, [r0, #4]
    1020:	80fb      	strh	r3, [r7, #6]
		if (pdu_adv->tx_addr &&
    1022:	f814 3008 	ldrb.w	r3, [r4, r8]
    1026:	065d      	lsls	r5, r3, #25
    1028:	d421      	bmi.n	106e <ll_adv_enable+0xbe>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    102a:	f013 0f0e 	tst.w	r3, #14
    102e:	d12b      	bne.n	1088 <ll_adv_enable+0xd8>
		if (lll->conn) {
    1030:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1032:	2b00      	cmp	r3, #0
    1034:	d05f      	beq.n	10f6 <ll_adv_enable+0x146>
	return BT_HCI_ERR_CMD_DISALLOWED;
    1036:	260c      	movs	r6, #12
}
    1038:	4630      	mov	r0, r6
    103a:	b00f      	add	sp, #60	; 0x3c
    103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1040:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1044:	4632      	mov	r2, r6
    1046:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
    104a:	f018 fa31 	bl	194b0 <ull_filter_rl_find>
			if (lll->rl_idx != FILTER_IDX_NONE) {
    104e:	28ff      	cmp	r0, #255	; 0xff
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1050:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
			if (lll->rl_idx != FILTER_IDX_NONE) {
    1054:	d14b      	bne.n	10ee <ll_adv_enable+0x13e>
			ull_filter_adv_pdu_update(adv, pdu_adv);
    1056:	4893      	ldr	r0, [pc, #588]	; (12a4 <ll_adv_enable+0x2f4>)
    1058:	4649      	mov	r1, r9
    105a:	f018 f863 	bl	19124 <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, pdu_scan);
    105e:	4891      	ldr	r0, [pc, #580]	; (12a4 <ll_adv_enable+0x2f4>)
    1060:	4639      	mov	r1, r7
    1062:	f018 f85f 	bl	19124 <ull_filter_adv_pdu_update>
		if (pdu_adv->tx_addr &&
    1066:	f814 3008 	ldrb.w	r3, [r4, r8]
    106a:	065d      	lsls	r5, r3, #25
    106c:	d5dd      	bpl.n	102a <ll_adv_enable+0x7a>
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
    106e:	2106      	movs	r1, #6
    1070:	f109 0002 	add.w	r0, r9, #2
    1074:	f00e fa3e 	bl	f4f4 <mem_nz>
		if (pdu_adv->tx_addr &&
    1078:	2800      	cmp	r0, #0
    107a:	f000 81d5 	beq.w	1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    107e:	f814 3008 	ldrb.w	r3, [r4, r8]
    1082:	f013 0f0e 	tst.w	r3, #14
    1086:	d0d3      	beq.n	1030 <ll_adv_enable+0x80>
	uint8_t ch_map = lll->chan_map;
    1088:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    108c:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    108e:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1092:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    1096:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    109a:	f00e fbb1 	bl	f800 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    109e:	2800      	cmp	r0, #0
    10a0:	f000 815f 	beq.w	1362 <ll_adv_enable+0x3b2>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    10a4:	f814 2008 	ldrb.w	r2, [r4, r8]
    10a8:	f002 020f 	and.w	r2, r2, #15
    10ac:	2a02      	cmp	r2, #2
    10ae:	f000 8101 	beq.w	12b4 <ll_adv_enable+0x304>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    10b2:	2a01      	cmp	r2, #1
    10b4:	f000 81ba 	beq.w	142c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    10b8:	787b      	ldrb	r3, [r7, #1]
    10ba:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
    10bc:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    10be:	2a00      	cmp	r2, #0
    10c0:	f000 81a7 	beq.w	1412 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8a>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    10c4:	2a06      	cmp	r2, #6
    10c6:	f000 81c4 	beq.w	1452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca>
    10ca:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    10ce:	f44f 711b 	mov.w	r1, #620	; 0x26c
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    10d2:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    10d4:	fb03 1100 	mla	r1, r3, r0, r1
    10d8:	e0f8      	b.n	12cc <ll_adv_enable+0x31c>
	if (!adv || !adv->is_enabled) {
    10da:	4b72      	ldr	r3, [pc, #456]	; (12a4 <ll_adv_enable+0x2f4>)
    10dc:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
    10e0:	07da      	lsls	r2, r3, #31
    10e2:	d5a8      	bpl.n	1036 <ll_adv_enable+0x86>
}
    10e4:	b00f      	add	sp, #60	; 0x3c
    10e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10ea:	f013 b8d9 	b.w	142a0 <disable.part.0>
				ull_filter_rpa_update(false);
    10ee:	4630      	mov	r0, r6
    10f0:	f018 f8a2 	bl	19238 <ull_filter_rpa_update>
    10f4:	e7af      	b.n	1056 <ll_adv_enable+0xa6>
		link = ll_rx_link_alloc();
    10f6:	f012 fcd1 	bl	13a9c <ll_rx_link_alloc>
		if (!link) {
    10fa:	4682      	mov	sl, r0
    10fc:	2800      	cmp	r0, #0
    10fe:	f000 819e 	beq.w	143e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb6>
		node_rx = ll_rx_alloc();
    1102:	f012 fcd7 	bl	13ab4 <ll_rx_alloc>
		if (!node_rx) {
    1106:	4683      	mov	fp, r0
    1108:	2800      	cmp	r0, #0
    110a:	f000 819d 	beq.w	1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>
		conn = ll_conn_acquire();
    110e:	f014 f8ed 	bl	152ec <ll_conn_acquire>
		if (!conn) {
    1112:	4605      	mov	r5, r0
    1114:	2800      	cmp	r0, #0
    1116:	f000 8194 	beq.w	1442 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba>
		if (!conn_lll->link_tx_free) {
    111a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
		conn_lll->handle = 0xFFFF;
    111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1120:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
    1122:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    1126:	2800      	cmp	r0, #0
    1128:	f000 8185 	beq.w	1436 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    112c:	f105 0270 	add.w	r2, r5, #112	; 0x70
    1130:	f105 016c 	add.w	r1, r5, #108	; 0x6c
    1134:	930b      	str	r3, [sp, #44]	; 0x2c
    1136:	f00e f9e9 	bl	f50c <memq_init>
		conn_lll->phy_tx = BIT(0);
    113a:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
		conn_lll->slave.latency_enabled = 0;
    113e:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
		conn->llcp_terminate.node_rx.hdr.link = link;
    1142:	f8c5 a134 	str.w	sl, [r5, #308]	; 0x134
		conn_lll->phy_tx = BIT(0);
    1146:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    114a:	f022 0207 	bic.w	r2, r2, #7
    114e:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    1152:	f042 0201 	orr.w	r2, r2, #1
    1156:	f8a5 2068 	strh.w	r2, [r5, #104]	; 0x68
		conn_lll->data_chan_sel = 0;
    115a:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
    115e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    1162:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1166:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
    116a:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
    116e:	f022 0203 	bic.w	r2, r2, #3
    1172:	f885 20e0 	strb.w	r2, [r5, #224]	; 0xe0
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1176:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
    117a:	f022 0203 	bic.w	r2, r2, #3
    117e:	f885 212a 	strb.w	r2, [r5, #298]	; 0x12a
		conn_lll->data_chan_use = 0;
    1182:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
    1184:	f362 0100 	bfi	r1, r2, #0, #1
    1188:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    118c:	4946      	ldr	r1, [pc, #280]	; (12a8 <ll_adv_enable+0x2f8>)
    118e:	6669      	str	r1, [r5, #100]	; 0x64
		conn->llcp_feature.features_conn = LL_FEAT;
    1190:	4946      	ldr	r1, [pc, #280]	; (12ac <ll_adv_enable+0x2fc>)
    1192:	f8c5 1120 	str.w	r1, [r5, #288]	; 0x120
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1196:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
    119a:	6629      	str	r1, [r5, #96]	; 0x60
		conn_lll->rssi_latest = 0x7F;
    119c:	217f      	movs	r1, #127	; 0x7f
    119e:	f885 10c5 	strb.w	r1, [r5, #197]	; 0xc5
		conn->connect_expire = 6;
    11a2:	2106      	movs	r1, #6
		conn_lll->slave.window_widening_event_us = 0;
    11a4:	e9c5 2214 	strd	r2, r2, [r5, #80]	; 0x50
		conn_lll->data_chan_use = 0;
    11a8:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    11ac:	866a      	strh	r2, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
    11ae:	636a      	str	r2, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
    11b0:	65aa      	str	r2, [r5, #88]	; 0x58
		conn->supervision_expire = 0;
    11b2:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->procedure_expire = 0;
    11b6:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    11ba:	f8a5 20ec 	strh.w	r2, [r5, #236]	; 0xec
    11be:	f885 20ee 	strb.w	r2, [r5, #238]	; 0xee
		conn->llcp_rx = NULL;
    11c2:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    11c6:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    11ca:	f8a5 211c 	strh.w	r2, [r5, #284]	; 0x11c
		conn->llcp_feature.features_peer = 0;
    11ce:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    11d2:	f8a5 2128 	strh.w	r2, [r5, #296]	; 0x128
		conn->llcp_terminate.reason_peer = 0;
    11d6:	f885 2133 	strb.w	r2, [r5, #307]	; 0x133
		conn->connect_expire = 6;
    11da:	f8a5 10c8 	strh.w	r1, [r5, #200]	; 0xc8
		conn_lll->link_tx_free = NULL;
    11de:	67ea      	str	r2, [r5, #124]	; 0x7c
		conn_lll->sn = 0;
    11e0:	f895 1082 	ldrb.w	r1, [r5, #130]	; 0x82
		conn_lll->packet_tx_head_len = 0;
    11e4:	f8a5 2080 	strh.w	r2, [r5, #128]	; 0x80
		conn_lll->sn = 0;
    11e8:	f021 011f 	bic.w	r1, r1, #31
    11ec:	f885 1082 	strb.w	r1, [r5, #130]	; 0x82
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    11f0:	f895 1156 	ldrb.w	r1, [r5, #342]	; 0x156
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    11f4:	f8a5 2154 	strh.w	r2, [r5, #340]	; 0x154
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    11f8:	f021 0107 	bic.w	r1, r1, #7
    11fc:	f885 1156 	strb.w	r1, [r5, #342]	; 0x156
		conn->llcp_conn_param.disabled = 0;
    1200:	f895 1176 	ldrb.w	r1, [r5, #374]	; 0x176
		conn->llcp_conn_param.req = 0;
    1204:	f8a5 2174 	strh.w	r2, [r5, #372]	; 0x174
		conn->llcp_conn_param.disabled = 0;
    1208:	f362 1104 	bfi	r1, r2, #4, #1
    120c:	f885 1176 	strb.w	r1, [r5, #374]	; 0x176
		conn->llcp_length.disabled = 0U;
    1210:	f895 119e 	ldrb.w	r1, [r5, #414]	; 0x19e
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    1214:	f8a5 219c 	strh.w	r2, [r5, #412]	; 0x19c
		conn->llcp_length.disabled = 0U;
    1218:	f362 01c3 	bfi	r1, r2, #3, #1
		conn->llcp_length.cache.tx_octets = 0U;
    121c:	f8a5 21a8 	strh.w	r2, [r5, #424]	; 0x1a8
		conn->llcp_length.disabled = 0U;
    1220:	f885 119e 	strb.w	r1, [r5, #414]	; 0x19e
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1224:	f014 fbb8 	bl	15998 <ull_conn_default_tx_octets_get>
    1228:	f8a5 00da 	strh.w	r0, [r5, #218]	; 0xda
		conn->default_tx_time = ull_conn_default_tx_time_get();
    122c:	f014 fbba 	bl	159a4 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1230:	491f      	ldr	r1, [pc, #124]	; (12b0 <ll_adv_enable+0x300>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1232:	f8a5 00dc 	strh.w	r0, [r5, #220]	; 0xdc
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1236:	f8d5 01ac 	ldr.w	r0, [r5, #428]	; 0x1ac
    123a:	4001      	ands	r1, r0
    123c:	f8c5 11ac 	str.w	r1, [r5, #428]	; 0x1ac
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1240:	f014 fbb6 	bl	159b0 <ull_conn_default_phy_tx_get>
    1244:	f895 11b0 	ldrb.w	r1, [r5, #432]	; 0x1b0
    1248:	f360 0102 	bfi	r1, r0, #0, #3
    124c:	f885 11b0 	strb.w	r1, [r5, #432]	; 0x1b0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1250:	f014 fbb4 	bl	159bc <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    1254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		conn->phy_pref_flags = 0;
    1256:	f895 11b0 	ldrb.w	r1, [r5, #432]	; 0x1b0
		lll->conn = conn_lll;
    125a:	6263      	str	r3, [r4, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
    125c:	e9c4 ab33 	strd	sl, fp, [r4, #204]	; 0xcc
		conn->phy_pref_flags = 0;
    1260:	0103      	lsls	r3, r0, #4
    1262:	f003 0370 	and.w	r3, r3, #112	; 0x70
    1266:	f021 0178 	bic.w	r1, r1, #120	; 0x78
    126a:	430b      	orrs	r3, r1
    126c:	f885 31b0 	strb.w	r3, [r5, #432]	; 0x1b0
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    1270:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->parent = parent;
    1274:	61ed      	str	r5, [r5, #28]
		conn->tx_data = conn->tx_data_last = 0;
    1276:	2200      	movs	r2, #0
	hdr->is_stop = 0U;
    1278:	f362 0300 	bfi	r3, r2, #0, #1
    127c:	e9c5 2270 	strd	r2, r2, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1280:	e9c5 226e 	strd	r2, r2, [r5, #440]	; 0x1b8
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1284:	e9c5 2205 	strd	r2, r2, [r5, #20]
    1288:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
    128c:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
    1290:	f019 fc7a 	bl	1ab88 <lll_clock_wait>
		if (err) {
    1294:	2800      	cmp	r0, #0
    1296:	f43f aef7 	beq.w	1088 <ll_adv_enable+0xd8>
			conn_release(adv);
    129a:	f012 ffbb 	bl	14214 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    129e:	2603      	movs	r6, #3
    12a0:	e6ca      	b.n	1038 <ll_adv_enable+0x88>
    12a2:	bf00      	nop
    12a4:	200026cc 	.word	0x200026cc
    12a8:	01480148 	.word	0x01480148
    12ac:	000149ff 	.word	0x000149ff
    12b0:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
    12b4:	f899 3001 	ldrb.w	r3, [r9, #1]
    12b8:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    12ba:	00db      	lsls	r3, r3, #3
    12bc:	fb00 f303 	mul.w	r3, r0, r3
				   rxtx_turn_us * (adv_chn_cnt - 1);
    12c0:	1e41      	subs	r1, r0, #1
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    12c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    12c6:	2064      	movs	r0, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    12c8:	fb00 3101 	mla	r1, r0, r1, r3
    12cc:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    12d0:	4867      	ldr	r0, [pc, #412]	; (1470 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8>)
	hdr->parent = parent;
    12d2:	61e4      	str	r4, [r4, #28]
    12d4:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    12d6:	f365 0300 	bfi	r3, r5, #0, #1
    12da:	f884 3020 	strb.w	r3, [r4, #32]
	adv->evt.ticks_xtal_to_start =
    12de:	2331      	movs	r3, #49	; 0x31
    12e0:	6023      	str	r3, [r4, #0]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    12e2:	fba1 0100 	umull	r0, r1, r1, r0
    12e6:	a360      	add	r3, pc, #384	; (adr r3, 1468 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe0>)
    12e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    12ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
    12f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    12f4:	f7ff fa28 	bl	748 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    12f8:	f8b4 70d4 	ldrh.w	r7, [r4, #212]	; 0xd4
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    12fc:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    12fe:	f00f fd3d 	bl	10d7c <ticker_ticks_now_get>
    1302:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1304:	b947      	cbnz	r7, 1318 <ll_adv_enable+0x368>
    1306:	f814 5008 	ldrb.w	r5, [r4, r8]
    130a:	f005 050f 	and.w	r5, r5, #15
    130e:	f1a5 0501 	sub.w	r5, r5, #1
    1312:	fab5 f585 	clz	r5, r5
    1316:	096d      	lsrs	r5, r5, #5
    1318:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    131c:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    1320:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1324:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
    1328:	d022      	beq.n	1370 <ll_adv_enable+0x3c0>
				   (adv->evt.ticks_slot + ticks_slot_overhead),
    132a:	68e3      	ldr	r3, [r4, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    132c:	4a51      	ldr	r2, [pc, #324]	; (1474 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xec>)
    132e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 1478 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf0>
    1332:	9304      	str	r3, [sp, #16]
    1334:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    1336:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1338:	af0d      	add	r7, sp, #52	; 0x34
    133a:	9301      	str	r3, [sp, #4]
    133c:	9205      	str	r2, [sp, #20]
    133e:	2103      	movs	r1, #3
    1340:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1344:	9406      	str	r4, [sp, #24]
    1346:	464b      	mov	r3, r9
    1348:	9000      	str	r0, [sp, #0]
    134a:	9708      	str	r7, [sp, #32]
    134c:	f8cd 801c 	str.w	r8, [sp, #28]
    1350:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    1352:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1354:	f00f fc04 	bl	10b60 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1358:	4639      	mov	r1, r7
    135a:	f012 fc35 	bl	13bc8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    135e:	2800      	cmp	r0, #0
    1360:	d043      	beq.n	13ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62>
	if (adv->lll.conn) {
    1362:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1364:	2b00      	cmp	r3, #0
    1366:	f43f ae66 	beq.w	1036 <ll_adv_enable+0x86>
		conn_release(adv);
    136a:	f012 ff53 	bl	14214 <conn_release.constprop.0>
    136e:	e662      	b.n	1036 <ll_adv_enable+0x86>
		const uint32_t ticks_slot = adv->evt.ticks_slot +
    1370:	68e3      	ldr	r3, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1372:	4a42      	ldr	r2, [pc, #264]	; (147c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf4>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1374:	4842      	ldr	r0, [pc, #264]	; (1480 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf8>)
		ret = ticker_start_ext(
    1376:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1378:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    137c:	fba7 0100 	umull	r0, r1, r7, r0
		ret = ticker_start_ext(
    1380:	9406      	str	r4, [sp, #24]
    1382:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1384:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1386:	2391      	movs	r3, #145	; 0x91
    1388:	fb03 1107 	mla	r1, r3, r7, r1
		ret = ticker_start_ext(
    138c:	4b3a      	ldr	r3, [pc, #232]	; (1478 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf0>)
    138e:	9307      	str	r3, [sp, #28]
    1390:	4b38      	ldr	r3, [pc, #224]	; (1474 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xec>)
    1392:	9305      	str	r3, [sp, #20]
    1394:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1398:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    139a:	f04f 0802 	mov.w	r8, #2
		ret = ticker_start_ext(
    139e:	9303      	str	r3, [sp, #12]
    13a0:	af0d      	add	r7, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    13a2:	a331      	add	r3, pc, #196	; (adr r3, 1468 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe0>)
    13a4:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    13a8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    13ac:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    13ae:	f7ff f9cb 	bl	748 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    13b2:	464b      	mov	r3, r9
    13b4:	e9cd 5000 	strd	r5, r0, [sp]
    13b8:	4642      	mov	r2, r8
    13ba:	4628      	mov	r0, r5
    13bc:	2103      	movs	r1, #3
    13be:	f00f fb79 	bl	10ab4 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    13c2:	4639      	mov	r1, r7
    13c4:	f012 fc00 	bl	13bc8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    13c8:	2800      	cmp	r0, #0
    13ca:	d1ca      	bne.n	1362 <ll_adv_enable+0x3b2>
	adv->is_enabled = 1;
    13cc:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    13d0:	f043 0301 	orr.w	r3, r3, #1
    13d4:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    13d8:	f013 fb12 	bl	14a00 <ull_scan_is_enabled_get>
    13dc:	2800      	cmp	r0, #0
    13de:	f47f ae2b 	bne.w	1038 <ll_adv_enable+0x88>
		ull_filter_adv_scan_state_cb(BIT(0));
    13e2:	2001      	movs	r0, #1
    13e4:	f017 fe36 	bl	19054 <ull_filter_adv_scan_state_cb>
    13e8:	e626      	b.n	1038 <ll_adv_enable+0x88>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    13ea:	4a26      	ldr	r2, [pc, #152]	; (1484 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc>)
    13ec:	9205      	str	r2, [sp, #20]
    13ee:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    13f2:	9200      	str	r2, [sp, #0]
    13f4:	e9cd 0003 	strd	r0, r0, [sp, #12]
    13f8:	e9cd 0001 	strd	r0, r0, [sp, #4]
    13fc:	f8cd 801c 	str.w	r8, [sp, #28]
    1400:	9708      	str	r7, [sp, #32]
    1402:	9406      	str	r4, [sp, #24]
    1404:	464b      	mov	r3, r9
    1406:	2201      	movs	r2, #1
    1408:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    140a:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    140c:	f00f fba8 	bl	10b60 <ticker_start>
    1410:	e7d7      	b.n	13c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a>
				adv_size += pdu_adv->len;
    1412:	f899 1001 	ldrb.w	r1, [r9, #1]
    1416:	3110      	adds	r1, #16
				slot_us += MAX(scan_req_us + EVENT_IFS_MAX_US +
    1418:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    141c:	00ca      	lsls	r2, r1, #3
    141e:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1422:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1426:	e654      	b.n	10d2 <ll_adv_enable+0x122>
			return BT_HCI_ERR_INVALID_PARAM;
    1428:	2612      	movs	r6, #18
    142a:	e605      	b.n	1038 <ll_adv_enable+0x88>
    142c:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    1430:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    1434:	e64d      	b.n	10d2 <ll_adv_enable+0x122>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1436:	f105 0074 	add.w	r0, r5, #116	; 0x74
    143a:	67e8      	str	r0, [r5, #124]	; 0x7c
    143c:	e676      	b.n	112c <ll_adv_enable+0x17c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    143e:	2607      	movs	r6, #7
    1440:	e5fa      	b.n	1038 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    1442:	4658      	mov	r0, fp
    1444:	f012 fb3c 	bl	13ac0 <ll_rx_release>
			ll_rx_link_release(link);
    1448:	4650      	mov	r0, sl
    144a:	f012 fb2d 	bl	13aa8 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    144e:	2607      	movs	r6, #7
    1450:	e5f2      	b.n	1038 <ll_adv_enable+0x88>
				adv_size += pdu_adv->len;
    1452:	f899 2001 	ldrb.w	r2, [r9, #1]
    1456:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    1458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    145c:	00d2      	lsls	r2, r2, #3
    145e:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1462:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1466:	e634      	b.n	10d2 <ll_adv_enable+0x122>
    1468:	1afd498d 	.word	0x1afd498d
    146c:	00000007 	.word	0x00000007
    1470:	3b9aca00 	.word	0x3b9aca00
    1474:	00013f55 	.word	0x00013f55
    1478:	00013bbd 	.word	0x00013bbd
    147c:	200027ac 	.word	0x200027ac
    1480:	84e72a00 	.word	0x84e72a00
    1484:	00013ed1 	.word	0x00013ed1

00001488 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1488:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    148a:	4c19      	ldr	r4, [pc, #100]	; (14f0 <ll_scan_params_set+0x68>)
{
    148c:	f89d c010 	ldrb.w	ip, [sp, #16]
	if (!scan || scan->is_enabled) {
    1490:	f894 e048 	ldrb.w	lr, [r4, #72]	; 0x48
    1494:	f01e 0501 	ands.w	r5, lr, #1
    1498:	d121      	bne.n	14de <ll_scan_params_set+0x56>
	lll->filter_policy = filter_policy;
    149a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    149e:	f00c 0c18 	and.w	ip, ip, #24
    14a2:	ea4c 1cc0 	orr.w	ip, ip, r0, lsl #7
    14a6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
	lll->interval = interval;
    14aa:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	lll->filter_policy = filter_policy;
    14ae:	f000 0067 	and.w	r0, r0, #103	; 0x67
    14b2:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    14b6:	480f      	ldr	r0, [pc, #60]	; (14f4 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    14b8:	f884 c032 	strb.w	ip, [r4, #50]	; 0x32
	scan->own_addr_type = own_addr_type;
    14bc:	f363 0e42 	bfi	lr, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    14c0:	fba2 0100 	umull	r0, r1, r2, r0
    14c4:	2391      	movs	r3, #145	; 0x91
    14c6:	fb03 1102 	mla	r1, r3, r2, r1
    14ca:	a307      	add	r3, pc, #28	; (adr r3, 14e8 <ll_scan_params_set+0x60>)
    14cc:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    14d0:	f884 e048 	strb.w	lr, [r4, #72]	; 0x48
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    14d4:	f7ff f938 	bl	748 <__aeabi_uldivmod>
    14d8:	6460      	str	r0, [r4, #68]	; 0x44
}
    14da:	4628      	mov	r0, r5
    14dc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    14de:	250c      	movs	r5, #12
}
    14e0:	4628      	mov	r0, r5
    14e2:	bd38      	pop	{r3, r4, r5, pc}
    14e4:	f3af 8000 	nop.w
    14e8:	1afd498d 	.word	0x1afd498d
    14ec:	00000007 	.word	0x00000007
    14f0:	200027d0 	.word	0x200027d0
    14f4:	84e72a00 	.word	0x84e72a00

000014f8 <ull_scan_params_set>:
{
    14f8:	b510      	push	{r4, lr}
    14fa:	f89d c008 	ldrb.w	ip, [sp, #8]
	lll->filter_policy = filter_policy;
    14fe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    1502:	f00c 0c18 	and.w	ip, ip, #24
    1506:	ea4c 1cc1 	orr.w	ip, ip, r1, lsl #7
    150a:	7d81      	ldrb	r1, [r0, #22]
{
    150c:	4604      	mov	r4, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    150e:	480c      	ldr	r0, [pc, #48]	; (1540 <ull_scan_params_set+0x48>)
	lll->interval = interval;
    1510:	84e2      	strh	r2, [r4, #38]	; 0x26
	lll->filter_policy = filter_policy;
    1512:	f001 0167 	and.w	r1, r1, #103	; 0x67
    1516:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    151a:	2291      	movs	r2, #145	; 0x91
    151c:	fba3 0100 	umull	r0, r1, r3, r0
    1520:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    1524:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window * 625U);
    1528:	a303      	add	r3, pc, #12	; (adr r3, 1538 <ull_scan_params_set+0x40>)
    152a:	e9d3 2300 	ldrd	r2, r3, [r3]
    152e:	f7ff f90b 	bl	748 <__aeabi_uldivmod>
    1532:	62a0      	str	r0, [r4, #40]	; 0x28
}
    1534:	bd10      	pop	{r4, pc}
    1536:	bf00      	nop
    1538:	1afd498d 	.word	0x1afd498d
    153c:	00000007 	.word	0x00000007
    1540:	84e72a00 	.word	0x84e72a00
    1544:	00000000 	.word	0x00000000

00001548 <ull_scan_enable>:
{
    1548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	lll->chan = 0;
    154c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    1550:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    1552:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1556:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    155a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    155e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1562:	f360 1386 	bfi	r3, r0, #6, #1
{
    1566:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1568:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    156c:	f00f fc0c 	bl	10d88 <ll_addr_get>
    1570:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval * 625U);
    1574:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    1578:	484d      	ldr	r0, [pc, #308]	; (16b0 <ull_scan_enable+0x168>)
	hdr->parent = parent;
    157a:	61e4      	str	r4, [r4, #28]
    157c:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    157e:	f365 0200 	bfi	r2, r5, #0, #1
    1582:	fba3 0100 	umull	r0, r1, r3, r0
    1586:	f884 2020 	strb.w	r2, [r4, #32]
    158a:	2291      	movs	r2, #145	; 0x91
    158c:	fb02 1103 	mla	r1, r2, r3, r1
    1590:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1594:	a344      	add	r3, pc, #272	; (adr r3, 16a8 <ull_scan_enable+0x160>)
    1596:	e9d3 2300 	ldrd	r2, r3, [r3]
    159a:	f7ff f8d5 	bl	748 <__aeabi_uldivmod>
	scan->evt.ticks_xtal_to_start =
    159e:	2331      	movs	r3, #49	; 0x31
    15a0:	e9c4 3500 	strd	r3, r5, [r4]
	if ((lll->ticks_window +
    15a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
	scan->evt.ticks_preempt_to_start =
    15a6:	60a5      	str	r5, [r4, #8]
	if ((lll->ticks_window +
    15a8:	3309      	adds	r3, #9
	    (ticks_interval -
    15aa:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    15ae:	4293      	cmp	r3, r2
		scan->evt.ticks_slot =
    15b0:	bf32      	itee	cc
    15b2:	60e3      	strcc	r3, [r4, #12]
			scan->evt.ticks_slot = ticks_interval -
    15b4:	60e2      	strcs	r2, [r4, #12]
		lll->ticks_window = 0U;
    15b6:	6465      	strcs	r5, [r4, #68]	; 0x44
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval * 625U);
    15b8:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    15ba:	f00f fbdf 	bl	10d7c <ticker_ticks_now_get>
	if (!lll->conn) {
    15be:	6a63      	ldr	r3, [r4, #36]	; 0x24
	ticks_anchor = ticker_ticks_now_get();
    15c0:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    15c2:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    15c6:	2b00      	cmp	r3, #0
    15c8:	d04f      	beq.n	166a <ull_scan_enable+0x122>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    15ca:	4d3a      	ldr	r5, [pc, #232]	; (16b4 <ull_scan_enable+0x16c>)
    15cc:	4b3a      	ldr	r3, [pc, #232]	; (16b8 <ull_scan_enable+0x170>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15ce:	f8cd 8020 	str.w	r8, [sp, #32]
	ret_cb = TICKER_STATUS_BUSY;
    15d2:	f04f 0902 	mov.w	r9, #2
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    15d6:	1b65      	subs	r5, r4, r5
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15d8:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    15da:	fa25 f509 	lsr.w	r5, r5, r9
    15de:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    15e2:	4833      	ldr	r0, [pc, #204]	; (16b0 <ull_scan_enable+0x168>)
    15e4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	ret_cb = TICKER_STATUS_BUSY;
    15e8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15ec:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    15f0:	fba3 0100 	umull	r0, r1, r3, r0
    15f4:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15f6:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    15fa:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15fe:	68e3      	ldr	r3, [r4, #12]
    1600:	9304      	str	r3, [sp, #16]
    1602:	4b2e      	ldr	r3, [pc, #184]	; (16bc <ull_scan_enable+0x174>)
    1604:	9307      	str	r3, [sp, #28]
    1606:	4b2e      	ldr	r3, [pc, #184]	; (16c0 <ull_scan_enable+0x178>)
    1608:	9305      	str	r3, [sp, #20]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval * 625U),
    160a:	a327      	add	r3, pc, #156	; (adr r3, 16a8 <ull_scan_enable+0x160>)
    160c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1610:	f7ff f89a 	bl	748 <__aeabi_uldivmod>
    1614:	4610      	mov	r0, r2
    1616:	4619      	mov	r1, r3
    1618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    161c:	2300      	movs	r3, #0
    161e:	f7ff f893 	bl	748 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1622:	086d      	lsrs	r5, r5, #1
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    1624:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1626:	b2ed      	uxtb	r5, r5
    1628:	462a      	mov	r2, r5
    162a:	e9cd 6001 	strd	r6, r0, [sp, #4]
    162e:	463b      	mov	r3, r7
    1630:	2103      	movs	r1, #3
    1632:	f8cd a000 	str.w	sl, [sp]
    1636:	4650      	mov	r0, sl
    1638:	f00f fa92 	bl	10b60 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    163c:	4641      	mov	r1, r8
    163e:	f012 fac3 	bl	13bc8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1642:	4605      	mov	r5, r0
    1644:	b968      	cbnz	r0, 1662 <ull_scan_enable+0x11a>
	scan->is_enabled = 1U;
    1646:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    164a:	f043 0301 	orr.w	r3, r3, #1
    164e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ull_adv_is_enabled_get(0))
    1652:	f012 ff9b 	bl	1458c <ull_adv_is_enabled_get>
    1656:	4604      	mov	r4, r0
    1658:	b1f8      	cbz	r0, 169a <ull_scan_enable+0x152>
	return 0;
    165a:	4628      	mov	r0, r5
}
    165c:	b00c      	add	sp, #48	; 0x30
    165e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1662:	200c      	movs	r0, #12
}
    1664:	b00c      	add	sp, #48	; 0x30
    1666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    166a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    166e:	68e1      	ldr	r1, [r4, #12]
    1670:	4643      	mov	r3, r8
    1672:	aa0a      	add	r2, sp, #40	; 0x28
    1674:	2003      	movs	r0, #3
    1676:	f002 fb1b 	bl	3cb0 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    167a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    167c:	2900      	cmp	r1, #0
    167e:	d0a4      	beq.n	15ca <ull_scan_enable+0x82>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1680:	4810      	ldr	r0, [pc, #64]	; (16c4 <ull_scan_enable+0x17c>)
    1682:	a309      	add	r3, pc, #36	; (adr r3, 16a8 <ull_scan_enable+0x160>)
    1684:	e9d3 2300 	ldrd	r2, r3, [r3]
    1688:	fba1 0100 	umull	r0, r1, r1, r0
    168c:	f7ff f85c 	bl	748 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    1690:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1692:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1696:	4407      	add	r7, r0
    1698:	e797      	b.n	15ca <ull_scan_enable+0x82>
		ull_filter_adv_scan_state_cb(BIT(1));
    169a:	4648      	mov	r0, r9
    169c:	f017 fcda 	bl	19054 <ull_filter_adv_scan_state_cb>
	return 0;
    16a0:	4620      	mov	r0, r4
}
    16a2:	b00c      	add	sp, #48	; 0x30
    16a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16a8:	1afd498d 	.word	0x1afd498d
    16ac:	00000007 	.word	0x00000007
    16b0:	84e72a00 	.word	0x84e72a00
    16b4:	200027d0 	.word	0x200027d0
    16b8:	1af286bd 	.word	0x1af286bd
    16bc:	00013bbd 	.word	0x00013bbd
    16c0:	00014759 	.word	0x00014759
    16c4:	3b9aca00 	.word	0x3b9aca00

000016c8 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    16c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16cc:	4604      	mov	r4, r0
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    16ce:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    16d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16d4:	4298      	cmp	r0, r3
{
    16d6:	b08d      	sub	sp, #52	; 0x34
    16d8:	460d      	mov	r5, r1
    16da:	4616      	mov	r6, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    16dc:	f000 81e2 	beq.w	1aa4 <ull_conn_llcp+0x3dc>

	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    16e0:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
    16e4:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
    16e8:	4283      	cmp	r3, r0
    16ea:	d075      	beq.n	17d8 <ull_conn_llcp+0x110>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    16ec:	1ac0      	subs	r0, r0, r3
    16ee:	f000 0003 	and.w	r0, r0, #3
    16f2:	2802      	cmp	r0, #2
    16f4:	d009      	beq.n	170a <ull_conn_llcp+0x42>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    16f6:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
    16fa:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    16fe:	429a      	cmp	r2, r3
    1700:	d11e      	bne.n	1740 <ull_conn_llcp+0x78>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1702:	2000      	movs	r0, #0
}
    1704:	b00d      	add	sp, #52	; 0x34
    1706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    170a:	f894 219d 	ldrb.w	r2, [r4, #413]	; 0x19d
    170e:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    1712:	429a      	cmp	r2, r3
    1714:	d006      	beq.n	1724 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
    1716:	f894 319e 	ldrb.w	r3, [r4, #414]	; 0x19e
			if ((conn->llcp_length.state ==
    171a:	f003 0306 	and.w	r3, r3, #6
    171e:	2b04      	cmp	r3, #4
    1720:	f000 83e8 	beq.w	1ef4 <ull_conn_llcp+0x82c>
		switch (conn->llcp_type) {
    1724:	f894 70ee 	ldrb.w	r7, [r4, #238]	; 0xee
    1728:	1e7b      	subs	r3, r7, #1
    172a:	2b05      	cmp	r3, #5
    172c:	f200 8390 	bhi.w	1e50 <ull_conn_llcp+0x788>
    1730:	e8df f013 	tbh	[pc, r3, lsl #1]
    1734:	0365006a 	.word	0x0365006a
    1738:	038e02e6 	.word	0x038e02e6
    173c:	01f202a9 	.word	0x01f202a9
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1740:	4824      	ldr	r0, [pc, #144]	; (17d4 <ull_conn_llcp+0x10c>)
    1742:	f00d fe91 	bl	f468 <mem_acquire>
		if (tx) {
    1746:	b358      	cbz	r0, 17a0 <ull_conn_llcp+0xd8>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    1748:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    174c:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1750:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1752:	2202      	movs	r2, #2
    1754:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1756:	f043 0303 	orr.w	r3, r3, #3
    175a:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    175c:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
    175e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
			pdu_tx->llctrl.terminate_ind.error_code =
    1762:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
    1766:	7202      	strb	r2, [r0, #8]
	if (
    1768:	b333      	cbz	r3, 17b8 <ull_conn_llcp+0xf0>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
    176a:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    176e:	0791      	lsls	r1, r2, #30
    1770:	d422      	bmi.n	17b8 <ull_conn_llcp+0xf0>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
    1772:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    1776:	07d2      	lsls	r2, r2, #31
    1778:	d41e      	bmi.n	17b8 <ull_conn_llcp+0xf0>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    177a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    177e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1780:	bf04      	itt	eq
    1782:	681a      	ldreq	r2, [r3, #0]
    1784:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    1788:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    178c:	b9ca      	cbnz	r2, 17c2 <ull_conn_llcp+0xfa>
			tx->next = conn->tx_head->next;
    178e:	681a      	ldr	r2, [r3, #0]
    1790:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1792:	6018      	str	r0, [r3, #0]
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    1794:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1796:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    179a:	b90b      	cbnz	r3, 17a0 <ull_conn_llcp+0xd8>
		conn->tx_data_last = tx;
    179c:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
		if (!conn->procedure_expire) {
    17a0:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
    17a4:	2800      	cmp	r0, #0
    17a6:	d1ac      	bne.n	1702 <ull_conn_llcp+0x3a>
			conn->procedure_expire = conn->supervision_reload;
    17a8:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
			if (conn->procedure_expire <= 1U) {
    17ac:	2b01      	cmp	r3, #1
    17ae:	f240 8187 	bls.w	1ac0 <ull_conn_llcp+0x3f8>
			conn->procedure_expire = conn->supervision_reload;
    17b2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    17b6:	e7a4      	b.n	1702 <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    17b8:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    17bc:	2a00      	cmp	r2, #0
    17be:	f000 8185 	beq.w	1acc <ull_conn_llcp+0x404>
	tx->next = conn->tx_ctrl_last->next;
    17c2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    17c6:	681a      	ldr	r2, [r3, #0]
    17c8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    17ca:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    17cc:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    17ce:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
}
    17d2:	e7e2      	b.n	179a <ull_conn_llcp+0xd2>
    17d4:	20002a78 	.word	0x20002a78
	    !conn->llcp_enc.pause_rx) {
    17d8:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	if ((conn->llcp_ack == conn->llcp_req) &&
    17dc:	f012 0801 	ands.w	r8, r2, #1
    17e0:	d189      	bne.n	16f6 <ull_conn_llcp+0x2e>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    17e2:	f894 c109 	ldrb.w	ip, [r4, #265]	; 0x109
    17e6:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
    17ea:	4561      	cmp	r1, ip
    17ec:	f000 833e 	beq.w	1e6c <ull_conn_llcp+0x7a4>
			conn->llcp_type = LLCP_CONN_UPD;
    17f0:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    17f2:	1e98      	subs	r0, r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
    17f4:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    17f8:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
    17fc:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
			conn->llcp_ack -= 2U;
    1800:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1804:	429a      	cmp	r2, r3
    1806:	d186      	bne.n	1716 <ull_conn_llcp+0x4e>
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    1808:	49b5      	ldr	r1, [pc, #724]	; (1ae0 <ull_conn_llcp+0x418>)

	/* set mutex */
	if (!conn_upd) {
    180a:	680b      	ldr	r3, [r1, #0]
    180c:	2b00      	cmp	r3, #0
    180e:	f000 8562 	beq.w	22d6 <ull_conn_llcp+0xc0e>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1812:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1814:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
    1816:	441f      	add	r7, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1818:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    181c:	4437      	add	r7, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    181e:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1822:	b2bf      	uxth	r7, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1824:	f040 8448 	bne.w	20b8 <ull_conn_llcp+0x9f0>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1828:	f8b4 80f0 	ldrh.w	r8, [r4, #240]	; 0xf0
    182c:	eba7 0208 	sub.w	r2, r7, r8
    1830:	fa1f fb82 	uxth.w	fp, r2
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
    1834:	0412      	lsls	r2, r2, #16
    1836:	f53f af5e 	bmi.w	16f6 <ull_conn_llcp+0x2e>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    183a:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    183e:	f894 2175 	ldrb.w	r2, [r4, #373]	; 0x175
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1842:	f894 c108 	ldrb.w	ip, [r4, #264]	; 0x108
    1846:	f884 c109 	strb.w	ip, [r4, #265]	; 0x109
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    184a:	4282      	cmp	r2, r0
		conn->llcp_ack = conn->llcp_req;
    184c:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
    1850:	f884 c0ed 	strb.w	ip, [r4, #237]	; 0xed
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1854:	d009      	beq.n	186a <ull_conn_llcp+0x1a2>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1856:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    185a:	f002 0207 	and.w	r2, r2, #7
    185e:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1860:	bf04      	itt	eq
    1862:	f884 0175 	strbeq.w	r0, [r4, #373]	; 0x175

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    1866:	f8a4 30d0 	strheq.w	r3, [r4, #208]	; 0xd0
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    186a:	680b      	ldr	r3, [r1, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    186c:	f8d4 9104 	ldr.w	r9, [r4, #260]	; 0x104
		if (conn_upd_curr == conn) {
    1870:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    1872:	bf04      	itt	eq
    1874:	2300      	moveq	r3, #0
    1876:	600b      	streq	r3, [r1, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1878:	f1b9 0f00 	cmp.w	r9, #0
    187c:	f000 854b 	beq.w	2316 <ull_conn_llcp+0xc4e>
    1880:	f8d9 0000 	ldr.w	r0, [r9]
    1884:	2800      	cmp	r0, #0
    1886:	f000 8546 	beq.w	2316 <ull_conn_llcp+0xc4e>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    188a:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
    188e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    1890:	6841      	ldr	r1, [r0, #4]
    1892:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
		if ((conn->llcp_cu.interval != lll->interval) ||
    1896:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
    1898:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
		if ((conn->llcp_cu.interval != lll->interval) ||
    189c:	f000 867f 	beq.w	259e <ull_conn_llcp+0xed6>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    18a0:	f8b4 c110 	ldrh.w	ip, [r4, #272]	; 0x110
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    18a4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    18a6:	f8a9 301e 	strh.w	r3, [r9, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    18aa:	230c      	movs	r3, #12
    18ac:	f889 3004 	strb.w	r3, [r9, #4]
			cu->status = 0x00;
    18b0:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    18b2:	f8a9 2006 	strh.w	r2, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
    18b6:	f8a9 1020 	strh.w	r1, [r9, #32]
			cu->timeout = conn->llcp_cu.timeout;
    18ba:	f8a9 c022 	strh.w	ip, [r9, #34]	; 0x22
			cu->status = 0x00;
    18be:	f889 301c 	strb.w	r3, [r9, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    18c2:	4649      	mov	r1, r9
    18c4:	f012 f902 	bl	13acc <ll_rx_put>
		ll_rx_sched();
    18c8:	f012 f90a 	bl	13ae0 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    18cc:	6823      	ldr	r3, [r4, #0]
    18ce:	2b00      	cmp	r3, #0
    18d0:	da09      	bge.n	18e6 <ull_conn_llcp+0x21e>
			uint32_t ticks_prepare_to_start =
    18d2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    18d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    18da:	4291      	cmp	r1, r2
    18dc:	bf2c      	ite	cs
    18de:	186d      	addcs	r5, r5, r1
    18e0:	18ad      	addcc	r5, r5, r2
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    18e2:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    18e4:	1aed      	subs	r5, r5, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    18e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    18e8:	f8b4 910c 	ldrh.w	r9, [r4, #268]	; 0x10c
		conn_interval_old = instant_latency * lll->interval;
    18ec:	fb13 f30b 	smulbb	r3, r3, fp
    18f0:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    18f2:	fbb3 f1f9 	udiv	r1, r3, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
    18f6:	fb19 f201 	smulbb	r2, r9, r1
    18fa:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    18fc:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    18fe:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    1902:	f080 84f6 	bcs.w	22f2 <ull_conn_llcp+0xc2a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1906:	1ad3      	subs	r3, r2, r3
    1908:	4876      	ldr	r0, [pc, #472]	; (1ae4 <ull_conn_llcp+0x41c>)
    190a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    190e:	fb02 f303 	mul.w	r3, r2, r3
    1912:	fba3 0100 	umull	r0, r1, r3, r0
    1916:	a370      	add	r3, pc, #448	; (adr r3, 1ad8 <ull_conn_llcp+0x410>)
    1918:	e9d3 2300 	ldrd	r2, r3, [r3]
    191c:	f7fe ff14 	bl	748 <__aeabi_uldivmod>
    1920:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1924:	4405      	add	r5, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
    1926:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		lll->latency_prepare -= (instant_latency - latency);
    1928:	eba8 0707 	sub.w	r7, r8, r7
		lll->latency_prepare += lazy;
    192c:	441e      	add	r6, r3
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    192e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    1932:	4457      	add	r7, sl
    1934:	4437      	add	r7, r6
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1936:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
    193a:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    193c:	8667      	strh	r7, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    193e:	fb08 f709 	mul.w	r7, r8, r9
		} else if (lll->role) {
    1942:	f2c0 866d 	blt.w	2620 <ull_conn_llcp+0xf58>
			periodic_us -= lll->slave.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1946:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    194a:	4866      	ldr	r0, [pc, #408]	; (1ae4 <ull_conn_llcp+0x41c>)
    194c:	a362      	add	r3, pc, #392	; (adr r3, 1ad8 <ull_conn_llcp+0x410>)
    194e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1952:	fba1 0100 	umull	r0, r1, r1, r0
    1956:	f7fe fef7 	bl	748 <__aeabi_uldivmod>
    195a:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
    195e:	463e      	mov	r6, r7

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    1960:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1964:	4a60      	ldr	r2, [pc, #384]	; (1ae8 <ull_conn_llcp+0x420>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1966:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
		lll->latency = conn->llcp_cu.latency;
    196a:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    196e:	485f      	ldr	r0, [pc, #380]	; (1aec <ull_conn_llcp+0x424>)
		lll->interval = conn->llcp_cu.interval;
    1970:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1974:	443a      	add	r2, r7
    1976:	fbb2 f2f7 	udiv	r2, r2, r7
    197a:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    197e:	f242 7210 	movw	r2, #10000	; 0x2710
    1982:	fb02 7303 	mla	r3, r2, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1986:	4438      	add	r0, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1988:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    198a:	fbb0 f0f7 	udiv	r0, r0, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    198e:	fbb3 f7f7 	udiv	r7, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1992:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1994:	1d88      	adds	r0, r1, #6
    1996:	4283      	cmp	r3, r0
		lll->latency = conn->llcp_cu.latency;
    1998:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    199a:	f8a4 70ca 	strh.w	r7, [r4, #202]	; 0xca
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    199e:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19a2:	dd02      	ble.n	19aa <ull_conn_llcp+0x2e2>
				     (conn->apto_reload - (lll->latency + 6)) :
    19a4:	1a5b      	subs	r3, r3, r1
    19a6:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19a8:	b29b      	uxth	r3, r3
    19aa:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    19ae:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
    19b2:	075b      	lsls	r3, r3, #29
			conn->supervision_expire = 0U;
    19b4:	bf44      	itt	mi
    19b6:	2300      	movmi	r3, #0
    19b8:	f8a4 30cc 	strhmi.w	r3, [r4, #204]	; 0xcc
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    19bc:	2102      	movs	r1, #2
    19be:	2001      	movs	r0, #1
    19c0:	f01b fd62 	bl	1d488 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    19c4:	2200      	movs	r2, #0
    19c6:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    19c8:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    19ca:	2001      	movs	r0, #1
    19cc:	f00d fdee 	bl	f5ac <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    19d0:	4947      	ldr	r1, [pc, #284]	; (1af0 <ull_conn_llcp+0x428>)
    19d2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
    19d6:	4620      	mov	r0, r4
    19d8:	f00d fd78 	bl	f4cc <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    19dc:	1d47      	adds	r7, r0, #5
    19de:	b2ff      	uxtb	r7, r7
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    19e0:	4b44      	ldr	r3, [pc, #272]	; (1af4 <ull_conn_llcp+0x42c>)
    19e2:	9400      	str	r4, [sp, #0]
    19e4:	463a      	mov	r2, r7
    19e6:	2101      	movs	r1, #1
    19e8:	2000      	movs	r0, #0
    19ea:	f00f f927 	bl	10c3c <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    19ee:	f030 0302 	bics.w	r3, r0, #2
    19f2:	d00c      	beq.n	1a0e <ull_conn_llcp+0x346>
    19f4:	4a40      	ldr	r2, [pc, #256]	; (1af8 <ull_conn_llcp+0x430>)
    19f6:	4941      	ldr	r1, [pc, #260]	; (1afc <ull_conn_llcp+0x434>)
    19f8:	4841      	ldr	r0, [pc, #260]	; (1b00 <ull_conn_llcp+0x438>)
    19fa:	f640 1353 	movw	r3, #2387	; 0x953
    19fe:	f01e ffee 	bl	209de <printk>
    1a02:	4040      	eors	r0, r0
    1a04:	f380 8811 	msr	BASEPRI, r0
    1a08:	f04f 0003 	mov.w	r0, #3
    1a0c:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1a0e:	4835      	ldr	r0, [pc, #212]	; (1ae4 <ull_conn_llcp+0x41c>)
    1a10:	fba6 6b00 	umull	r6, fp, r6, r0
    1a14:	a330      	add	r3, pc, #192	; (adr r3, 1ad8 <ull_conn_llcp+0x410>)
    1a16:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a1a:	4630      	mov	r0, r6
    1a1c:	4659      	mov	r1, fp
    1a1e:	f7fe fe93 	bl	748 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a22:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    1a26:	4837      	ldr	r0, [pc, #220]	; (1b04 <ull_conn_llcp+0x43c>)
    1a28:	2307      	movs	r3, #7
    1a2a:	fba9 0100 	umull	r0, r1, r9, r0
    1a2e:	1a30      	subs	r0, r6, r0
    1a30:	fb03 1109 	mla	r1, r3, r9, r1
    1a34:	eb6b 0101 	sbc.w	r1, fp, r1
    1a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1a3c:	2300      	movs	r3, #0
    1a3e:	f7fe fe83 	bl	748 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a42:	e9cd 9001 	strd	r9, r0, [sp, #4]
    1a46:	f8cd 8000 	str.w	r8, [sp]
    1a4a:	9408      	str	r4, [sp, #32]
    1a4c:	9406      	str	r4, [sp, #24]
				     TICKER_LAZY_MUST_EXPIRE,
#else
				     TICKER_NULL_LAZY,
#endif /* CONFIG_BT_CTLR_CONN_META */
				     (ticks_slot_overhead +
				      conn->evt.ticks_slot),
    1a4e:	68e1      	ldr	r1, [r4, #12]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a50:	482d      	ldr	r0, [pc, #180]	; (1b08 <ull_conn_llcp+0x440>)
    1a52:	462b      	mov	r3, r5
    1a54:	f994 503d 	ldrsb.w	r5, [r4, #61]	; 0x3d
    1a58:	9104      	str	r1, [sp, #16]
    1a5a:	492c      	ldr	r1, [pc, #176]	; (1b0c <ull_conn_llcp+0x444>)
    1a5c:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    1a60:	bf38      	it	cc
    1a62:	4601      	movcc	r1, r0
    1a64:	9105      	str	r1, [sp, #20]
    1a66:	2000      	movs	r0, #0
    1a68:	4929      	ldr	r1, [pc, #164]	; (1b10 <ull_conn_llcp+0x448>)
    1a6a:	9107      	str	r1, [sp, #28]
    1a6c:	463a      	mov	r2, r7
    1a6e:	9003      	str	r0, [sp, #12]
    1a70:	2101      	movs	r1, #1
    1a72:	f00f f875 	bl	10b60 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1a76:	f030 0302 	bics.w	r3, r0, #2
    1a7a:	d00c      	beq.n	1a96 <ull_conn_llcp+0x3ce>
    1a7c:	4a1e      	ldr	r2, [pc, #120]	; (1af8 <ull_conn_llcp+0x430>)
    1a7e:	491f      	ldr	r1, [pc, #124]	; (1afc <ull_conn_llcp+0x434>)
    1a80:	481f      	ldr	r0, [pc, #124]	; (1b00 <ull_conn_llcp+0x438>)
    1a82:	f640 136d 	movw	r3, #2413	; 0x96d
    1a86:	f01e ffaa 	bl	209de <printk>
    1a8a:	4040      	eors	r0, r0
    1a8c:	f380 8811 	msr	BASEPRI, r0
    1a90:	f04f 0003 	mov.w	r0, #3
    1a94:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1a96:	f1ba 0f00 	cmp.w	sl, #0
    1a9a:	f040 859c 	bne.w	25d6 <ull_conn_llcp+0xf0e>
				return -ECANCELED;
    1a9e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1aa2:	e62f      	b.n	1704 <ull_conn_llcp+0x3c>
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    1aa4:	4a14      	ldr	r2, [pc, #80]	; (1af8 <ull_conn_llcp+0x430>)
    1aa6:	491b      	ldr	r1, [pc, #108]	; (1b14 <ull_conn_llcp+0x44c>)
    1aa8:	4815      	ldr	r0, [pc, #84]	; (1b00 <ull_conn_llcp+0x438>)
    1aaa:	f240 23f3 	movw	r3, #755	; 0x2f3
    1aae:	f01e ff96 	bl	209de <printk>
    1ab2:	4040      	eors	r0, r0
    1ab4:	f380 8811 	msr	BASEPRI, r0
    1ab8:	f04f 0003 	mov.w	r0, #3
    1abc:	df02      	svc	2
    1abe:	e60f      	b.n	16e0 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
    1ac0:	3301      	adds	r3, #1
    1ac2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
}
    1ac6:	b00d      	add	sp, #52	; 0x34
    1ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    1acc:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1ace:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    1ad2:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    1ad6:	e660      	b.n	179a <ull_conn_llcp+0xd2>
    1ad8:	1afd498d 	.word	0x1afd498d
    1adc:	00000007 	.word	0x00000007
    1ae0:	200029fc 	.word	0x200029fc
    1ae4:	3b9aca00 	.word	0x3b9aca00
    1ae8:	026259ff 	.word	0x026259ff
    1aec:	01c9c37f 	.word	0x01c9c37f
    1af0:	20002830 	.word	0x20002830
    1af4:	00014de1 	.word	0x00014de1
    1af8:	000277f0 	.word	0x000277f0
    1afc:	000278e4 	.word	0x000278e4
    1b00:	000272c0 	.word	0x000272c0
    1b04:	1afd498d 	.word	0x1afd498d
    1b08:	00017fb5 	.word	0x00017fb5
    1b0c:	00017e39 	.word	0x00017e39
    1b10:	00014d89 	.word	0x00014d89
    1b14:	0002796c 	.word	0x0002796c
			event_counter = lll->event_counter +
    1b18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1b1a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    1b1c:	f894 50f0 	ldrb.w	r5, [r4, #240]	; 0xf0
			event_counter = lll->event_counter +
    1b20:	4413      	add	r3, r2
					lll->latency_prepare + lazy;
    1b22:	441e      	add	r6, r3
	if (conn->llcp.phy_upd_ind.initiate) {
    1b24:	07ef      	lsls	r7, r5, #31
			event_counter = lll->event_counter +
    1b26:	b2b6      	uxth	r6, r6
	if (conn->llcp.phy_upd_ind.initiate) {
    1b28:	46ab      	mov	fp, r5
    1b2a:	f100 8377 	bmi.w	221c <ull_conn_llcp+0xb54>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    1b2e:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1b32:	1ab6      	subs	r6, r6, r2
    1b34:	0437      	lsls	r7, r6, #16
    1b36:	f53f adde 	bmi.w	16f6 <ull_conn_llcp+0x2e>
		struct lll_conn *lll = &conn->lll;
		struct node_rx_pdu *rx;
		uint8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    1b3a:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    1b3e:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (!conn->common.fex_valid ||
    1b42:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0

		/* apply new phy */
		old_tx = lll->phy_tx;
    1b46:	f894 9068 	ldrb.w	r9, [r4, #104]	; 0x68
		old_rx = lll->phy_rx;
    1b4a:	f894 a069 	ldrb.w	sl, [r4, #105]	; 0x69

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    1b4e:	f8b4 7066 	ldrh.w	r7, [r4, #102]	; 0x66
    1b52:	f8b4 80dc 	ldrh.w	r8, [r4, #220]	; 0xdc
    1b56:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
	if (!conn->common.fex_valid ||
    1b5a:	07d6      	lsls	r6, r2, #31
		old_tx = lll->phy_tx;
    1b5c:	f009 0907 	and.w	r9, r9, #7
		old_rx = lll->phy_rx;
    1b60:	f00a 0a07 	and.w	sl, sl, #7
	if (!conn->common.fex_valid ||
    1b64:	f140 8540 	bpl.w	25e8 <ull_conn_llcp+0xf20>
    1b68:	0508      	lsls	r0, r1, #20
    1b6a:	f140 853d 	bpl.w	25e8 <ull_conn_llcp+0xf20>
	tx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, tx_time);
    1b6e:	f5b8 6f29 	cmp.w	r8, #2704	; 0xa90
    1b72:	bf28      	it	cs
    1b74:	f44f 6829 	movcs.w	r8, #2704	; 0xa90
    1b78:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    1b7c:	f44f 6329 	mov.w	r3, #2704	; 0xa90
    1b80:	bf38      	it	cc
    1b82:	f44f 78a4 	movcc.w	r8, #328	; 0x148
    1b86:	930b      	str	r3, [sp, #44]	; 0x2c
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    1b88:	f015 0f1c 	tst.w	r5, #28
    1b8c:	f040 85fa 	bne.w	2784 <ull_conn_llcp+0x10bc>
		uint16_t eff_tx_time = lll->max_tx_time;
    1b90:	f8b4 6064 	ldrh.w	r6, [r4, #100]	; 0x64
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    1b94:	f015 0fe0 	tst.w	r5, #224	; 0xe0
    1b98:	d00c      	beq.n	1bb4 <ull_conn_llcp+0x4ec>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1b9a:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1b9e:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1ba2:	0969      	lsrs	r1, r5, #5
    1ba4:	f361 0202 	bfi	r2, r1, #0, #3
    1ba8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1bae:	f012 ffb1 	bl	14b14 <calc_eff_time>
    1bb2:	4607      	mov	r7, r0
					      max_rx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		lll->phy_flags = conn->phy_pref_flags;
    1bb4:	f894 21b0 	ldrb.w	r2, [r4, #432]	; 0x1b0
    1bb8:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1bbc:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
		lll->phy_flags = conn->phy_pref_flags;
    1bc0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    1bc4:	f362 01c3 	bfi	r1, r2, #3, #1
    1bc8:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
		LL_ASSERT(rx && rx->hdr.link);
    1bcc:	2d00      	cmp	r5, #0
    1bce:	f000 860d 	beq.w	27ec <ull_conn_llcp+0x1124>
    1bd2:	6828      	ldr	r0, [r5, #0]
    1bd4:	2800      	cmp	r0, #0
    1bd6:	f000 8609 	beq.w	27ec <ull_conn_llcp+0x1124>
		conn->llcp_rx = rx->hdr.link->mem;
    1bda:	6842      	ldr	r2, [r0, #4]

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1bdc:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
		conn->llcp_rx = rx->hdr.link->mem;
    1be0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		    (lll->phy_rx == old_rx)) {
    1be4:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1be8:	f01b 0f02 	tst.w	fp, #2
    1bec:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    1bf0:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1bf4:	d102      	bne.n	1bfc <ull_conn_llcp+0x534>
    1bf6:	4599      	cmp	r9, r3
    1bf8:	f000 87aa 	beq.w	2b50 <ull_conn_llcp+0x1488>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    1bfc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;

		upd = (void *)rx->pdu;
		upd->status = 0U;
		upd->tx = lll->phy_tx;
    1bfe:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1c00:	2310      	movs	r3, #16
    1c02:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
    1c04:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
    1c06:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
    1c08:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
    1c0a:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1c0c:	4629      	mov	r1, r5
    1c0e:	f011 ff5d 	bl	13acc <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    1c12:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
		LL_ASSERT(rx && rx->hdr.link);
    1c16:	2d00      	cmp	r5, #0
    1c18:	f000 85fa 	beq.w	2810 <ull_conn_llcp+0x1148>
    1c1c:	6828      	ldr	r0, [r5, #0]
    1c1e:	2800      	cmp	r0, #0
    1c20:	f000 85f6 	beq.w	2810 <ull_conn_llcp+0x1148>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    1c24:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
		conn->llcp_rx = rx->hdr.link->mem;
    1c28:	6842      	ldr	r2, [r0, #4]
    1c2a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		if ((eff_tx_time <= lll->max_tx_time) &&
    1c2e:	42b3      	cmp	r3, r6
    1c30:	d309      	bcc.n	1c46 <ull_conn_llcp+0x57e>
    1c32:	4543      	cmp	r3, r8
    1c34:	d807      	bhi.n	1c46 <ull_conn_llcp+0x57e>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    1c36:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		    (lll->max_tx_time <= max_tx_time) &&
    1c3a:	42bb      	cmp	r3, r7
    1c3c:	d303      	bcc.n	1c46 <ull_conn_llcp+0x57e>
		    (eff_rx_time <= lll->max_rx_time) &&
    1c3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1c40:	4293      	cmp	r3, r2
    1c42:	f241 812a 	bls.w	2e9a <ull_conn_llcp+0x17d2>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    1c46:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
		lll->max_rx_time = eff_rx_time;
    1c4a:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1c4e:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    1c50:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1c52:	80ea      	strh	r2, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1c54:	f04f 0c02 	mov.w	ip, #2
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1c58:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1c5c:	2109      	movs	r1, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1c5e:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1c62:	7769      	strb	r1, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1c64:	772b      	strb	r3, [r5, #28]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1c66:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    1c6a:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1c6c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    1c70:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1c72:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1c74:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1c76:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1c78:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1c7a:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1c7c:	f011 ff26 	bl	13acc <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    1c80:	f011 ff2e 	bl	13ae0 <ll_rx_sched>
    1c84:	e537      	b.n	16f6 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1c86:	48b4      	ldr	r0, [pc, #720]	; (1f58 <ull_conn_llcp+0x890>)
    1c88:	f00d fbee 	bl	f468 <mem_acquire>
	if (tx) {
    1c8c:	2800      	cmp	r0, #0
    1c8e:	f43f ad32 	beq.w	16f6 <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    1c92:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1c96:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1c9a:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c9c:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1c9e:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    1ca0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ca4:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1ca8:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1caa:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1cac:	71c1      	strb	r1, [r0, #7]
	if (
    1cae:	2b00      	cmp	r3, #0
    1cb0:	f000 8314 	beq.w	22dc <ull_conn_llcp+0xc14>
	    !conn->llcp_enc.pause_tx &&
    1cb4:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    1cb8:	0791      	lsls	r1, r2, #30
    1cba:	f100 830f 	bmi.w	22dc <ull_conn_llcp+0xc14>
	    !conn->llcp_phy.pause_tx &&
    1cbe:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    1cc2:	07d2      	lsls	r2, r2, #31
    1cc4:	f100 830a 	bmi.w	22dc <ull_conn_llcp+0xc14>
		if (conn->tx_head == conn->tx_data) {
    1cc8:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    1ccc:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1cce:	bf04      	itt	eq
    1cd0:	681a      	ldreq	r2, [r3, #0]
    1cd2:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    1cd6:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    1cda:	2a00      	cmp	r2, #0
    1cdc:	f001 804c 	beq.w	2d78 <ull_conn_llcp+0x16b0>
	tx->next = conn->tx_ctrl_last->next;
    1ce0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1ce4:	681a      	ldr	r2, [r3, #0]
    1ce6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1ce8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    1cea:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    1cec:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	f000 8538 	beq.w	2766 <ull_conn_llcp+0x109e>
		conn->procedure_expire = conn->procedure_reload;
    1cf6:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    1cfa:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    1cfe:	e4fa      	b.n	16f6 <ull_conn_llcp+0x2e>
	if (conn->llcp.encryption.state) {
    1d00:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
    1d04:	f012 0503 	ands.w	r5, r2, #3
    1d08:	f000 817b 	beq.w	2002 <ull_conn_llcp+0x93a>
		if (lll->role &&
    1d0c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1d10:	2b00      	cmp	r3, #0
    1d12:	f6bf acf0 	bge.w	16f6 <ull_conn_llcp+0x2e>
    1d16:	2d01      	cmp	r5, #1
    1d18:	f47f aced 	bne.w	16f6 <ull_conn_llcp+0x2e>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1d1c:	488e      	ldr	r0, [pc, #568]	; (1f58 <ull_conn_llcp+0x890>)
    1d1e:	f00d fba3 	bl	f468 <mem_acquire>
	if (!tx) {
    1d22:	4607      	mov	r7, r0
    1d24:	2800      	cmp	r0, #0
    1d26:	f43f ace6 	beq.w	16f6 <ull_conn_llcp+0x2e>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d2a:	7903      	ldrb	r3, [r0, #4]
    1d2c:	f043 0303 	orr.w	r3, r3, #3
    1d30:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1d32:	2304      	movs	r3, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1d34:	220d      	movs	r2, #13
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1d36:	18c6      	adds	r6, r0, r3
    1d38:	f100 0508 	add.w	r5, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1d3c:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1d3e:	71c3      	strb	r3, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1d40:	210c      	movs	r1, #12
    1d42:	4628      	mov	r0, r5
    1d44:	f018 fd02 	bl	1a74c <lll_csrand_isr_get>
    1d48:	6873      	ldr	r3, [r6, #4]
    1d4a:	68fa      	ldr	r2, [r7, #12]
    1d4c:	f8c4 20fe 	str.w	r2, [r4, #254]	; 0xfe
    1d50:	f8c4 30fa 	str.w	r3, [r4, #250]	; 0xfa
	    conn->tx_head &&
    1d54:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1d58:	693a      	ldr	r2, [r7, #16]
    1d5a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	if (
    1d5e:	2b00      	cmp	r3, #0
    1d60:	f000 85ec 	beq.w	293c <ull_conn_llcp+0x1274>
	    !conn->llcp_enc.pause_tx &&
    1d64:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    1d68:	0792      	lsls	r2, r2, #30
    1d6a:	f100 85e7 	bmi.w	293c <ull_conn_llcp+0x1274>
	    !conn->llcp_phy.pause_tx &&
    1d6e:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    1d72:	07d6      	lsls	r6, r2, #31
    1d74:	f100 85e2 	bmi.w	293c <ull_conn_llcp+0x1274>
		if (conn->tx_head == conn->tx_data) {
    1d78:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    1d7c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1d7e:	bf04      	itt	eq
    1d80:	681a      	ldreq	r2, [r3, #0]
    1d82:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    1d86:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    1d8a:	2a00      	cmp	r2, #0
    1d8c:	f001 80e8 	beq.w	2f60 <ull_conn_llcp+0x1898>
	tx->next = conn->tx_ctrl_last->next;
    1d90:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1d94:	681a      	ldr	r2, [r3, #0]
    1d96:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    1d98:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    1d9a:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
    1d9c:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
	if (!tx->next) {
    1da0:	2b00      	cmp	r3, #0
    1da2:	f000 87e5 	beq.w	2d70 <ull_conn_llcp+0x16a8>
			rx = ll_pdu_rx_alloc();
    1da6:	f011 febf 	bl	13b28 <ll_pdu_rx_alloc>
			if (!rx) {
    1daa:	4601      	mov	r1, r0
    1dac:	2800      	cmp	r0, #0
    1dae:	f43f aca2 	beq.w	16f6 <ull_conn_llcp+0x2e>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1db2:	7f0b      	ldrb	r3, [r1, #28]
			rx->hdr.handle = conn->lll.handle;
    1db4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1db6:	80ca      	strh	r2, [r1, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1db8:	f043 0303 	orr.w	r3, r3, #3
    1dbc:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1dbe:	2502      	movs	r5, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1dc0:	2217      	movs	r2, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1dc2:	2303      	movs	r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1dc4:	710d      	strb	r5, [r1, #4]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1dc6:	774a      	strb	r2, [r1, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1dc8:	77cb      	strb	r3, [r1, #31]
    1dca:	f8d4 3159 	ldr.w	r3, [r4, #345]	; 0x159
    1dce:	f8d4 215d 	ldr.w	r2, [r4, #349]	; 0x15d
    1dd2:	624a      	str	r2, [r1, #36]	; 0x24
    1dd4:	620b      	str	r3, [r1, #32]
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    1dd6:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
    1dda:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    1dde:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    1de2:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    1de6:	6808      	ldr	r0, [r1, #0]
    1de8:	f011 fe70 	bl	13acc <ll_rx_put>
			ll_rx_sched();
    1dec:	f011 fe78 	bl	13ae0 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    1df0:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    1df4:	f365 0301 	bfi	r3, r5, #0, #2
    1df8:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    1dfc:	e47b      	b.n	16f6 <ull_conn_llcp+0x2e>
			event_counter = lll->event_counter +
    1dfe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1e00:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    1e02:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
			event_counter = lll->event_counter +
    1e06:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    1e08:	441e      	add	r6, r3
	if (conn->llcp.chan_map.initiate) {
    1e0a:	07d7      	lsls	r7, r2, #31
			event_counter = lll->event_counter +
    1e0c:	b2b6      	uxth	r6, r6
	if (conn->llcp.chan_map.initiate) {
    1e0e:	f100 80ab 	bmi.w	1f68 <ull_conn_llcp+0x8a0>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1e12:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    1e16:	1af6      	subs	r6, r6, r3
    1e18:	0431      	lsls	r1, r6, #16
    1e1a:	f53f ac6c 	bmi.w	16f6 <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
    1e1e:	f104 0038 	add.w	r0, r4, #56	; 0x38
		conn->llcp_ack = conn->llcp_req;
    1e22:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    1e26:	f8d4 20f1 	ldr.w	r2, [r4, #241]	; 0xf1
    1e2a:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
    1e2e:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
    1e32:	63a2      	str	r2, [r4, #56]	; 0x38
			util_ones_count_get(&lll->data_chan_map[0],
    1e34:	2105      	movs	r1, #5
    1e36:	7103      	strb	r3, [r0, #4]
    1e38:	f00d fce2 	bl	f800 <util_ones_count_get>
		lll->data_chan_count =
    1e3c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1e40:	2201      	movs	r2, #1
		lll->data_chan_count =
    1e42:	f360 0305 	bfi	r3, r0, #0, #6
    1e46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1e4a:	f884 21c8 	strb.w	r2, [r4, #456]	; 0x1c8
    1e4e:	e452      	b.n	16f6 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
    1e50:	4a42      	ldr	r2, [pc, #264]	; (1f5c <ull_conn_llcp+0x894>)
    1e52:	4943      	ldr	r1, [pc, #268]	; (1f60 <ull_conn_llcp+0x898>)
    1e54:	4843      	ldr	r0, [pc, #268]	; (1f64 <ull_conn_llcp+0x89c>)
    1e56:	f240 3379 	movw	r3, #889	; 0x379
    1e5a:	f01e fdc0 	bl	209de <printk>
    1e5e:	4040      	eors	r0, r0
    1e60:	f380 8811 	msr	BASEPRI, r0
    1e64:	f04f 0003 	mov.w	r0, #3
    1e68:	df02      	svc	2
			break;
    1e6a:	e444      	b.n	16f6 <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1e6c:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
    1e70:	f894 711c 	ldrb.w	r7, [r4, #284]	; 0x11c
    1e74:	42b9      	cmp	r1, r7
    1e76:	d141      	bne.n	1efc <ull_conn_llcp+0x834>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1e78:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
    1e7c:	f894 7128 	ldrb.w	r7, [r4, #296]	; 0x128
    1e80:	42b9      	cmp	r1, r7
    1e82:	f000 8259 	beq.w	2338 <ull_conn_llcp+0xc70>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1e86:	1bc9      	subs	r1, r1, r7
    1e88:	07cf      	lsls	r7, r1, #31
    1e8a:	f57f ac34 	bpl.w	16f6 <ull_conn_llcp+0x2e>
	if (conn->llcp_version.tx == 0U) {
    1e8e:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
    1e92:	07d8      	lsls	r0, r3, #31
    1e94:	f140 869d 	bpl.w	2bd2 <ull_conn_llcp+0x150a>
	} else if (conn->llcp_version.rx) {
    1e98:	079b      	lsls	r3, r3, #30
    1e9a:	f140 8695 	bpl.w	2bc8 <ull_conn_llcp+0x1500>
		rx = ll_pdu_rx_alloc();
    1e9e:	f011 fe43 	bl	13b28 <ll_pdu_rx_alloc>
		if (!rx) {
    1ea2:	4601      	mov	r1, r0
    1ea4:	b300      	cbz	r0, 1ee8 <ull_conn_llcp+0x820>
		conn->llcp_version.ack = conn->llcp_version.req;
    1ea6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    1eaa:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
		rx->hdr.handle = conn->lll.handle;
    1eae:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1eb0:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1eb2:	2302      	movs	r3, #2
    1eb4:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1eb6:	7f03      	ldrb	r3, [r0, #28]
    1eb8:	f043 0303 	orr.w	r3, r3, #3
    1ebc:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1ebe:	2306      	movs	r3, #6
    1ec0:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1ec2:	230c      	movs	r3, #12
    1ec4:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    1ec6:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
    1eca:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    1ece:	f8b4 312c 	ldrh.w	r3, [r4, #300]	; 0x12c
    1ed2:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    1ed6:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
    1eda:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
    1ede:	6808      	ldr	r0, [r1, #0]
    1ee0:	f011 fdf4 	bl	13acc <ll_rx_put>
	ll_rx_sched();
    1ee4:	f011 fdfc 	bl	13ae0 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1ee8:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
    1eec:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
    1ef0:	f7ff bbfc 	b.w	16ec <ull_conn_llcp+0x24>
				event_len_prep(conn);
    1ef4:	4620      	mov	r0, r4
    1ef6:	f013 f8f9 	bl	150ec <event_len_prep>
    1efa:	e413      	b.n	1724 <ull_conn_llcp+0x5c>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1efc:	1bc9      	subs	r1, r1, r7
    1efe:	07c8      	lsls	r0, r1, #31
    1f00:	f57f abf9 	bpl.w	16f6 <ull_conn_llcp+0x2e>
	if (conn->common.fex_valid) {
    1f04:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    1f08:	f013 0701 	ands.w	r7, r3, #1
    1f0c:	f000 83d5 	beq.w	26ba <ull_conn_llcp+0xff2>
		rx = ll_pdu_rx_alloc();
    1f10:	f011 fe0a 	bl	13b28 <ll_pdu_rx_alloc>
		if (!rx) {
    1f14:	4601      	mov	r1, r0
    1f16:	2800      	cmp	r0, #0
    1f18:	d0e6      	beq.n	1ee8 <ull_conn_llcp+0x820>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1f1a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    1f1e:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
		rx->hdr.handle = conn->lll.handle;
    1f22:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1f24:	80ca      	strh	r2, [r1, #6]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1f26:	2309      	movs	r3, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f28:	2002      	movs	r0, #2
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    1f2a:	f8c1 8020 	str.w	r8, [r1, #32]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f2e:	7f0a      	ldrb	r2, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f30:	7108      	strb	r0, [r1, #4]
    1f32:	f8c1 8024 	str.w	r8, [r1, #36]	; 0x24
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1f36:	774b      	strb	r3, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1f38:	77cb      	strb	r3, [r1, #31]
		sys_put_le24(conn->llcp_feature.features_peer,
    1f3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	dst[0] = val;
    1f3e:	f881 3020 	strb.w	r3, [r1, #32]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f42:	f042 0203 	orr.w	r2, r2, #3
    1f46:	770a      	strb	r2, [r1, #28]
	dst[1] = val >> 8;
    1f48:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1f4c:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1f4e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
	dst[2] = val >> 16;
    1f52:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    1f56:	e7c2      	b.n	1ede <ull_conn_llcp+0x816>
    1f58:	20002a78 	.word	0x20002a78
    1f5c:	000277f0 	.word	0x000277f0
    1f60:	00027358 	.word	0x00027358
    1f64:	000272c0 	.word	0x000272c0
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f68:	48a6      	ldr	r0, [pc, #664]	; (2204 <ull_conn_llcp+0xb3c>)
    1f6a:	f00d fa7d 	bl	f468 <mem_acquire>
		if (tx) {
    1f6e:	2800      	cmp	r0, #0
    1f70:	f43f abc1 	beq.w	16f6 <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
    1f74:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
    1f76:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f7a:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
    1f7c:	441e      	add	r6, r3
						      conn->lll.latency + 6;
    1f7e:	1db3      	adds	r3, r6, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f80:	f042 0203 	orr.w	r2, r2, #3
			conn->llcp.chan_map.initiate = 0U;
    1f84:	f36f 0100 	bfc	r1, #0, #1
			conn->llcp.chan_map.instant = event_counter +
    1f88:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
			conn->llcp.chan_map.initiate = 0U;
    1f8c:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
			pdu_ctrl_tx->llctrl.opcode =
    1f90:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f92:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1f94:	2208      	movs	r2, #8
    1f96:	7142      	strb	r2, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1f98:	71c3      	strb	r3, [r0, #7]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1f9a:	f8d4 30f1 	ldr.w	r3, [r4, #241]	; 0xf1
    1f9e:	6083      	str	r3, [r0, #8]
    1fa0:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
    1fa4:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    1fa6:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1faa:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
    1fae:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	f000 831e 	beq.w	25f4 <ull_conn_llcp+0xf2c>
	    !conn->llcp_enc.pause_tx &&
    1fb8:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    1fbc:	0796      	lsls	r6, r2, #30
    1fbe:	f100 8319 	bmi.w	25f4 <ull_conn_llcp+0xf2c>
	    !conn->llcp_phy.pause_tx &&
    1fc2:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    1fc6:	07d5      	lsls	r5, r2, #31
    1fc8:	f100 8314 	bmi.w	25f4 <ull_conn_llcp+0xf2c>
		if (conn->tx_head == conn->tx_data) {
    1fcc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    1fd0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1fd2:	bf04      	itt	eq
    1fd4:	681a      	ldreq	r2, [r3, #0]
    1fd6:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    1fda:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    1fde:	2a00      	cmp	r2, #0
    1fe0:	f000 874b 	beq.w	2e7a <ull_conn_llcp+0x17b2>
	tx->next = conn->tx_ctrl_last->next;
    1fe4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1fe8:	681a      	ldr	r2, [r3, #0]
    1fea:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1fec:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    1fee:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    1ff0:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	f47f ab7e 	bne.w	16f6 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    1ffa:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    1ffe:	f7ff bb7a 	b.w	16f6 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2002:	4880      	ldr	r0, [pc, #512]	; (2204 <ull_conn_llcp+0xb3c>)
    2004:	f00d fa30 	bl	f468 <mem_acquire>
	if (!tx) {
    2008:	4606      	mov	r6, r0
    200a:	2800      	cmp	r0, #0
    200c:	f43f ab73 	beq.w	16f6 <ull_conn_llcp+0x2e>
	if (!lll->role) {
    2010:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2014:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    2016:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    201a:	f280 840b 	bge.w	2834 <ull_conn_llcp+0x116c>
	else if (!lll->enc_rx) {
    201e:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    2022:	0719      	lsls	r1, r3, #28
    2024:	f100 861d 	bmi.w	2c62 <ull_conn_llcp+0x159a>
		if (conn->llcp.encryption.error_code) {
    2028:	f894 50f1 	ldrb.w	r5, [r4, #241]	; 0xf1
    202c:	2d00      	cmp	r5, #0
    202e:	f000 849c 	beq.w	296a <ull_conn_llcp+0x12a2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2032:	7903      	ldrb	r3, [r0, #4]
    2034:	f043 0303 	orr.w	r3, r3, #3
    2038:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    203a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    203e:	07da      	lsls	r2, r3, #31
    2040:	f140 8654 	bpl.w	2cec <ull_conn_llcp+0x1624>
	    (conn->llcp_feature.features_conn &
    2044:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (conn->common.fex_valid &&
    2048:	075b      	lsls	r3, r3, #29
    204a:	f140 864f 	bpl.w	2cec <ull_conn_llcp+0x1624>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    204e:	2311      	movs	r3, #17
    2050:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2052:	2303      	movs	r3, #3
    2054:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    2056:	7245      	strb	r5, [r0, #9]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    2058:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    205a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	conn->llcp.encryption.error_code = 0U;
    205e:	2200      	movs	r2, #0
    2060:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
	if (
    2064:	2b00      	cmp	r3, #0
    2066:	f000 84d3 	beq.w	2a10 <ull_conn_llcp+0x1348>
	    !conn->llcp_enc.pause_tx &&
    206a:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    206e:	0790      	lsls	r0, r2, #30
    2070:	f100 84ce 	bmi.w	2a10 <ull_conn_llcp+0x1348>
	    !conn->llcp_phy.pause_tx &&
    2074:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    2078:	07d1      	lsls	r1, r2, #31
    207a:	f100 84c9 	bmi.w	2a10 <ull_conn_llcp+0x1348>
		if (conn->tx_head == conn->tx_data) {
    207e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    2082:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2084:	bf04      	itt	eq
    2086:	681a      	ldreq	r2, [r3, #0]
    2088:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    208c:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2090:	2a00      	cmp	r2, #0
    2092:	f000 877d 	beq.w	2f90 <ull_conn_llcp+0x18c8>
	tx->next = conn->tx_ctrl_last->next;
    2096:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    209a:	681a      	ldr	r2, [r3, #0]
    209c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    209e:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    20a0:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
	if (!tx->next) {
    20a4:	6833      	ldr	r3, [r6, #0]
    20a6:	2b00      	cmp	r3, #0
    20a8:	f000 8444 	beq.w	2934 <ull_conn_llcp+0x126c>
	conn->llcp_ack = conn->llcp_req;
    20ac:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    20b0:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    20b4:	f7ff bb1f 	b.w	16f6 <ull_conn_llcp+0x2e>
		rx = ll_pdu_rx_alloc_peek(1);
    20b8:	2001      	movs	r0, #1
    20ba:	f011 fd17 	bl	13aec <ll_pdu_rx_alloc_peek>
		if (!rx) {
    20be:	4680      	mov	r8, r0
    20c0:	2800      	cmp	r0, #0
    20c2:	f43f ab18 	beq.w	16f6 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20c6:	484f      	ldr	r0, [pc, #316]	; (2204 <ull_conn_llcp+0xb3c>)
    20c8:	f00d f9ce 	bl	f468 <mem_acquire>
		if (!tx) {
    20cc:	4606      	mov	r6, r0
    20ce:	2800      	cmp	r0, #0
    20d0:	f43f ab11 	beq.w	16f6 <ull_conn_llcp+0x2e>
		(void)ll_pdu_rx_alloc();
    20d4:	f011 fd28 	bl	13b28 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    20d8:	f8d8 3000 	ldr.w	r3, [r8]
    20dc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    20e0:	605a      	str	r2, [r3, #4]
		switch (conn->llcp_cu.state) {
    20e2:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
		conn->llcp_rx = rx;
    20e6:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
		switch (conn->llcp_cu.state) {
    20ea:	f003 0303 	and.w	r3, r3, #3
    20ee:	2b01      	cmp	r3, #1
    20f0:	f000 84a7 	beq.w	2a42 <ull_conn_llcp+0x137a>
    20f4:	2b02      	cmp	r3, #2
    20f6:	f000 839b 	beq.w	2830 <ull_conn_llcp+0x1168>
			LL_ASSERT(0);
    20fa:	4a43      	ldr	r2, [pc, #268]	; (2208 <ull_conn_llcp+0xb40>)
    20fc:	4943      	ldr	r1, [pc, #268]	; (220c <ull_conn_llcp+0xb44>)
    20fe:	4844      	ldr	r0, [pc, #272]	; (2210 <ull_conn_llcp+0xb48>)
    2100:	f640 037e 	movw	r3, #2174	; 0x87e
    2104:	f01e fc6b 	bl	209de <printk>
    2108:	4040      	eors	r0, r0
    210a:	f380 8811 	msr	BASEPRI, r0
    210e:	f04f 0003 	mov.w	r0, #3
    2112:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    2114:	2000      	movs	r0, #0
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2116:	8e23      	ldrh	r3, [r4, #48]	; 0x30
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2118:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    211c:	493d      	ldr	r1, [pc, #244]	; (2214 <ull_conn_llcp+0xb4c>)
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    211e:	443b      	add	r3, r7
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2120:	f36f 0201 	bfc	r2, #0, #2
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2124:	3306      	adds	r3, #6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2126:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    212a:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    212c:	220c      	movs	r2, #12
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    212e:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2132:	7172      	strb	r2, [r6, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2134:	7932      	ldrb	r2, [r6, #4]
    2136:	f042 0203 	orr.w	r2, r2, #3
    213a:	7132      	strb	r2, [r6, #4]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    213c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    2140:	fba1 1202 	umull	r1, r2, r1, r2
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2144:	2100      	movs	r1, #0
    2146:	71f1      	strb	r1, [r6, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    2148:	0a92      	lsrs	r2, r2, #10
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    214a:	6821      	ldr	r1, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    214c:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2150:	f8a6 2009 	strh.w	r2, [r6, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2154:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    2158:	f8a6 200b 	strh.w	r2, [r6, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    215c:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    2160:	f8a6 200d 	strh.w	r2, [r6, #13]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2164:	2900      	cmp	r1, #0
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2166:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    216a:	7237      	strb	r7, [r6, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    216c:	f8a6 200f 	strh.w	r2, [r6, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    2170:	f8a6 3011 	strh.w	r3, [r6, #17]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    2174:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2178:	da0a      	bge.n	2190 <ull_conn_llcp+0xac8>
				(conn->evt.ticks_xtal_to_start &
    217a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
			uint32_t ticks_prepare_to_start =
    217e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
			conn->llcp.conn_upd.ticks_anchor -=
    2182:	4291      	cmp	r1, r2
    2184:	bf2c      	ite	cs
    2186:	186d      	addcs	r5, r5, r1
    2188:	18ad      	addcc	r5, r5, r2
    218a:	1aeb      	subs	r3, r5, r3
    218c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    2190:	4b21      	ldr	r3, [pc, #132]	; (2218 <ull_conn_llcp+0xb50>)
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    2192:	f106 0109 	add.w	r1, r6, #9
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2196:	2201      	movs	r2, #1
		mfy_sched_offset->param = (void *)conn;
    2198:	e9c3 4002 	strd	r4, r0, [r3, #8]
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    219c:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    21a0:	4610      	mov	r0, r2
    21a2:	2102      	movs	r1, #2
    21a4:	f00d fa34 	bl	f610 <mayfly_enqueue>
		LL_ASSERT(!retval);
    21a8:	2800      	cmp	r0, #0
    21aa:	f040 844d 	bne.w	2a48 <ull_conn_llcp+0x1380>
	    conn->tx_head &&
    21ae:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	if (
    21b2:	2b00      	cmp	r3, #0
    21b4:	f000 8229 	beq.w	260a <ull_conn_llcp+0xf42>
	    !conn->llcp_enc.pause_tx &&
    21b8:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    21bc:	0790      	lsls	r0, r2, #30
    21be:	f100 8224 	bmi.w	260a <ull_conn_llcp+0xf42>
	    !conn->llcp_phy.pause_tx &&
    21c2:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    21c6:	07d1      	lsls	r1, r2, #31
    21c8:	f100 821f 	bmi.w	260a <ull_conn_llcp+0xf42>
		if (conn->tx_head == conn->tx_data) {
    21cc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    21d0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    21d2:	bf04      	itt	eq
    21d4:	681a      	ldreq	r2, [r3, #0]
    21d6:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    21da:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    21de:	2a00      	cmp	r2, #0
    21e0:	f000 8643 	beq.w	2e6a <ull_conn_llcp+0x17a2>
	tx->next = conn->tx_ctrl_last->next;
    21e4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    21e8:	681a      	ldr	r2, [r3, #0]
    21ea:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    21ec:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    21ee:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    21f0:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
	if (!tx->next) {
    21f4:	2b00      	cmp	r3, #0
    21f6:	f47f aa7e 	bne.w	16f6 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    21fa:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
    21fe:	f7ff ba7a 	b.w	16f6 <ull_conn_llcp+0x2e>
    2202:	bf00      	nop
    2204:	20002a78 	.word	0x20002a78
    2208:	000277f0 	.word	0x000277f0
    220c:	00027358 	.word	0x00027358
    2210:	000272c0 	.word	0x000272c0
    2214:	d1b71759 	.word	0xd1b71759
    2218:	20000558 	.word	0x20000558
		rx = ll_pdu_rx_alloc_peek(2);
    221c:	2002      	movs	r0, #2
    221e:	f011 fc65 	bl	13aec <ll_pdu_rx_alloc_peek>
		if (!rx) {
    2222:	4680      	mov	r8, r0
    2224:	2800      	cmp	r0, #0
    2226:	f43f aa66 	beq.w	16f6 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    222a:	488d      	ldr	r0, [pc, #564]	; (2460 <ull_conn_llcp+0xd98>)
    222c:	f00d f91c 	bl	f468 <mem_acquire>
		if (!tx) {
    2230:	4605      	mov	r5, r0
    2232:	2800      	cmp	r0, #0
    2234:	f43f aa5f 	beq.w	16f6 <ull_conn_llcp+0x2e>
		conn->llcp.phy_upd_ind.initiate = 0U;
    2238:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    223c:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    2240:	f3c3 1742 	ubfx	r7, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    2244:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
    2248:	f017 0707 	ands.w	r7, r7, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    224c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
		if (!((conn->llcp.phy_upd_ind.tx |
    2250:	b2db      	uxtb	r3, r3
    2252:	f040 849a 	bne.w	2b8a <ull_conn_llcp+0x14c2>
			conn->llcp_ack = conn->llcp_req;
    2256:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			conn->llcp.phy_upd_ind.instant = 0U;
    225a:	f8a4 70f2 	strh.w	r7, [r4, #242]	; 0xf2
			if (conn->llcp.phy_upd_ind.cmd) {
    225e:	0798      	lsls	r0, r3, #30
			conn->llcp_ack = conn->llcp_req;
    2260:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
			if (conn->llcp.phy_upd_ind.cmd) {
    2264:	f100 8548 	bmi.w	2cf8 <ull_conn_llcp+0x1630>
    2268:	463b      	mov	r3, r7
    226a:	463a      	mov	r2, r7
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    226c:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_tx->len =
    226e:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    2270:	722f      	strb	r7, [r5, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2272:	816a      	strh	r2, [r5, #10]
		pdu_ctrl_tx->len =
    2274:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
    2276:	2218      	movs	r2, #24
	    conn->tx_head &&
    2278:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
		pdu_ctrl_tx->llctrl.opcode =
    227c:	71ea      	strb	r2, [r5, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    227e:	792a      	ldrb	r2, [r5, #4]
    2280:	f042 0203 	orr.w	r2, r2, #3
    2284:	712a      	strb	r2, [r5, #4]
	if (
    2286:	2b00      	cmp	r3, #0
    2288:	f000 8271 	beq.w	276e <ull_conn_llcp+0x10a6>
	    !conn->llcp_enc.pause_tx &&
    228c:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    2290:	0791      	lsls	r1, r2, #30
    2292:	f100 826c 	bmi.w	276e <ull_conn_llcp+0x10a6>
	    !conn->llcp_phy.pause_tx &&
    2296:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    229a:	07d2      	lsls	r2, r2, #31
    229c:	f100 8267 	bmi.w	276e <ull_conn_llcp+0x10a6>
		if (conn->tx_head == conn->tx_data) {
    22a0:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    22a4:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    22a6:	bf04      	itt	eq
    22a8:	681a      	ldreq	r2, [r3, #0]
    22aa:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    22ae:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    22b2:	2a00      	cmp	r2, #0
    22b4:	f000 85e9 	beq.w	2e8a <ull_conn_llcp+0x17c2>
	tx->next = conn->tx_ctrl_last->next;
    22b8:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    22bc:	681a      	ldr	r2, [r3, #0]
    22be:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    22c0:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    22c2:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    22c4:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
	if (!tx->next) {
    22c8:	2b00      	cmp	r3, #0
    22ca:	f47f aa14 	bne.w	16f6 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    22ce:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    22d2:	f7ff ba10 	b.w	16f6 <ull_conn_llcp+0x2e>
		conn_upd_curr = conn;
    22d6:	600c      	str	r4, [r1, #0]
    22d8:	f7ff ba9b 	b.w	1812 <ull_conn_llcp+0x14a>
		if (!conn->tx_ctrl) {
    22dc:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    22e0:	2a00      	cmp	r2, #0
    22e2:	f47f acfd 	bne.w	1ce0 <ull_conn_llcp+0x618>
			tx->next = conn->tx_head;
    22e6:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    22e8:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    22ec:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    22f0:	e4fe      	b.n	1cf0 <ull_conn_llcp+0x628>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    22f2:	fb09 3111 	mls	r1, r9, r1, r3
    22f6:	485b      	ldr	r0, [pc, #364]	; (2464 <ull_conn_llcp+0xd9c>)
    22f8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    22fc:	b289      	uxth	r1, r1
    22fe:	fb03 f101 	mul.w	r1, r3, r1
    2302:	fba1 0100 	umull	r0, r1, r1, r0
    2306:	a354      	add	r3, pc, #336	; (adr r3, 2458 <ull_conn_llcp+0xd90>)
    2308:	e9d3 2300 	ldrd	r2, r3, [r3]
    230c:	f7fe fa1c 	bl	748 <__aeabi_uldivmod>
    2310:	1a2d      	subs	r5, r5, r0
    2312:	f7ff bb08 	b.w	1926 <ull_conn_llcp+0x25e>
		LL_ASSERT(rx && rx->hdr.link);
    2316:	4a54      	ldr	r2, [pc, #336]	; (2468 <ull_conn_llcp+0xda0>)
    2318:	4954      	ldr	r1, [pc, #336]	; (246c <ull_conn_llcp+0xda4>)
    231a:	4855      	ldr	r0, [pc, #340]	; (2470 <ull_conn_llcp+0xda8>)
    231c:	f640 03af 	movw	r3, #2223	; 0x8af
    2320:	f01e fb5d 	bl	209de <printk>
    2324:	4040      	eors	r0, r0
    2326:	f380 8811 	msr	BASEPRI, r0
    232a:	f04f 0003 	mov.w	r0, #3
    232e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2330:	f8d9 0000 	ldr.w	r0, [r9]
    2334:	f7ff baa9 	b.w	188a <ull_conn_llcp+0x1c2>
		} else if (conn->llcp_conn_param.ack !=
    2338:	f894 7175 	ldrb.w	r7, [r4, #373]	; 0x175
    233c:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
    2340:	428f      	cmp	r7, r1
    2342:	f000 822f 	beq.w	27a4 <ull_conn_llcp+0x10dc>
	conn_upd = conn_upd_curr;
    2346:	494b      	ldr	r1, [pc, #300]	; (2474 <ull_conn_llcp+0xdac>)
    2348:	680f      	ldr	r7, [r1, #0]
	if (conn_upd && (conn_upd != conn)) {
    234a:	2f00      	cmp	r7, #0
    234c:	f000 84fa 	beq.w	2d44 <ull_conn_llcp+0x167c>
    2350:	42bc      	cmp	r4, r7
    2352:	f47f a9d0 	bne.w	16f6 <ull_conn_llcp+0x2e>
	switch (conn->llcp_conn_param.state) {
    2356:	f894 7176 	ldrb.w	r7, [r4, #374]	; 0x176
    235a:	f007 0707 	and.w	r7, r7, #7
    235e:	2f05      	cmp	r7, #5
    2360:	f200 87bd 	bhi.w	32de <ull_conn_llcp+0x1c16>
    2364:	f20f 0e04 	addw	lr, pc, #4
    2368:	f85e f027 	ldr.w	pc, [lr, r7, lsl #2]
    236c:	00002479 	.word	0x00002479
    2370:	000023d7 	.word	0x000023d7
    2374:	00002385 	.word	0x00002385
    2378:	000016ed 	.word	0x000016ed
    237c:	000016ed 	.word	0x000016ed
    2380:	000016ed 	.word	0x000016ed
	if (conn->llcp_enc.pause_tx) {
    2384:	0793      	lsls	r3, r2, #30
    2386:	f53f a9b6 	bmi.w	16f6 <ull_conn_llcp+0x2e>
	rx = ll_pdu_rx_alloc();
    238a:	f011 fbcd 	bl	13b28 <ll_pdu_rx_alloc>
	if (!rx) {
    238e:	4601      	mov	r1, r0
    2390:	2800      	cmp	r0, #0
    2392:	f43f ada9 	beq.w	1ee8 <ull_conn_llcp+0x820>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2396:	7f03      	ldrb	r3, [r0, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2398:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    239c:	2003      	movs	r0, #3
    239e:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    23a2:	f043 0303 	orr.w	r3, r3, #3
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    23a6:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    23a8:	2018      	movs	r0, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    23aa:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    23ae:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    23b0:	710f      	strb	r7, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    23b2:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    23b4:	7748      	strb	r0, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    23b6:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    23ba:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    23bc:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    23c0:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    23c2:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
    23c6:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    23c8:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
    23cc:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    23ce:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    23d0:	80ca      	strh	r2, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    23d2:	77cb      	strb	r3, [r1, #31]
    23d4:	e583      	b.n	1ede <ull_conn_llcp+0x816>
	if (conn->llcp_conn_param.status) {
    23d6:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
    23da:	2b00      	cmp	r3, #0
    23dc:	f040 85e6 	bne.w	2fac <ull_conn_llcp+0x18e4>
	if (!conn->lll.role) {
    23e0:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
    23e4:	2a00      	cmp	r2, #0
    23e6:	f2c0 8629 	blt.w	303c <ull_conn_llcp+0x1974>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    23ea:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
		conn->llcp_cu.win_offset_us = 0U;
    23ee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    23f2:	2205      	movs	r2, #5
    23f4:	f362 0102 	bfi	r1, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    23f8:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    23fc:	f884 1176 	strb.w	r1, [r4, #374]	; 0x176
		conn->llcp_cu.win_size = 1U;
    2400:	2001      	movs	r0, #1
    2402:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
		if (conn->llcp_conn_param.preferred_periodicity) {
    2406:	2a00      	cmp	r2, #0
    2408:	f000 8734 	beq.w	3274 <ull_conn_llcp+0x1bac>
				((conn->llcp_conn_param.interval_min /
    240c:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    2410:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    2414:	4403      	add	r3, r0
			conn->llcp_cu.interval =
    2416:	fb13 f302 	smulbb	r3, r3, r2
    241a:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    241c:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2420:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    2424:	f8b4 017c 	ldrh.w	r0, [r4, #380]	; 0x17c
    2428:	f8a4 010e 	strh.w	r0, [r4, #270]	; 0x10e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    242c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2430:	0092      	lsls	r2, r2, #2
    2432:	f021 0107 	bic.w	r1, r1, #7
    2436:	f042 0202 	orr.w	r2, r2, #2
    243a:	430a      	orrs	r2, r1
		conn->llcp_cu.ack--;
    243c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    2440:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    2444:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
    2448:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    244c:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
		conn->llcp_cu.ack--;
    2450:	f884 c109 	strb.w	ip, [r4, #265]	; 0x109
		return;
    2454:	f7ff b94f 	b.w	16f6 <ull_conn_llcp+0x2e>
    2458:	1afd498d 	.word	0x1afd498d
    245c:	00000007 	.word	0x00000007
    2460:	20002a78 	.word	0x20002a78
    2464:	3b9aca00 	.word	0x3b9aca00
    2468:	000277f0 	.word	0x000277f0
    246c:	000278d0 	.word	0x000278d0
    2470:	000272c0 	.word	0x000272c0
    2474:	200029fc 	.word	0x200029fc
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2478:	48d3      	ldr	r0, [pc, #844]	; (27c8 <ull_conn_llcp+0x1100>)
    247a:	910b      	str	r1, [sp, #44]	; 0x2c
			event_counter = lll->event_counter +
    247c:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    247e:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2482:	f00c fff1 	bl	f468 <mem_acquire>
	if (!tx) {
    2486:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2488:	4602      	mov	r2, r0
    248a:	2800      	cmp	r0, #0
    248c:	f43f ad2c 	beq.w	1ee8 <ull_conn_llcp+0x820>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2490:	7913      	ldrb	r3, [r2, #4]
			event_counter = lll->event_counter +
    2492:	eb07 0008 	add.w	r0, r7, r8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    2496:	f894 7176 	ldrb.w	r7, [r4, #374]	; 0x176
    249a:	f04f 0c04 	mov.w	ip, #4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    249e:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    24a2:	f36c 0702 	bfi	r7, ip, #0, #3
    24a6:	f884 7176 	strb.w	r7, [r4, #374]	; 0x176
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24aa:	7113      	strb	r3, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    24ac:	2318      	movs	r3, #24
    24ae:	7153      	strb	r3, [r2, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    24b0:	f8b4 7178 	ldrh.w	r7, [r4, #376]	; 0x178
    24b4:	8117      	strh	r7, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    24b6:	f8b4 717a 	ldrh.w	r7, [r4, #378]	; 0x17a
    24ba:	8157      	strh	r7, [r2, #10]
	p->preferred_periodicity = 0U;
    24bc:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    24be:	f8b4 717c 	ldrh.w	r7, [r4, #380]	; 0x17c
    24c2:	8197      	strh	r7, [r2, #12]
					lll->latency_prepare + lazy;
    24c4:	4430      	add	r0, r6
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    24c6:	f8b4 717e 	ldrh.w	r7, [r4, #382]	; 0x17e
	p->preferred_periodicity = 0U;
    24ca:	7413      	strb	r3, [r2, #16]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    24cc:	f8a2 0011 	strh.w	r0, [r2, #17]
	p->offset0 = sys_cpu_to_le16(0x0000);
    24d0:	74d3      	strb	r3, [r2, #19]
	    conn->tx_head &&
    24d2:	f8d4 01b4 	ldr.w	r0, [r4, #436]	; 0x1b4
	p->offset0 = sys_cpu_to_le16(0x0000);
    24d6:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    24d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24dc:	7553      	strb	r3, [r2, #21]
    24de:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    24e0:	75d3      	strb	r3, [r2, #23]
    24e2:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    24e4:	7653      	strb	r3, [r2, #25]
    24e6:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    24e8:	76d3      	strb	r3, [r2, #27]
    24ea:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    24ec:	7753      	strb	r3, [r2, #29]
    24ee:	7793      	strb	r3, [r2, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    24f0:	230f      	movs	r3, #15
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    24f2:	81d7      	strh	r7, [r2, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    24f4:	71d3      	strb	r3, [r2, #7]
	if (
    24f6:	2800      	cmp	r0, #0
    24f8:	f000 8526 	beq.w	2f48 <ull_conn_llcp+0x1880>
	    !conn->llcp_enc.pause_tx &&
    24fc:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
	    conn->tx_head &&
    2500:	079f      	lsls	r7, r3, #30
    2502:	f100 8521 	bmi.w	2f48 <ull_conn_llcp+0x1880>
	    !conn->llcp_phy.pause_tx &&
    2506:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
    250a:	07db      	lsls	r3, r3, #31
    250c:	f100 851c 	bmi.w	2f48 <ull_conn_llcp+0x1880>
		if (conn->tx_head == conn->tx_data) {
    2510:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
    2514:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    2516:	bf04      	itt	eq
    2518:	6803      	ldreq	r3, [r0, #0]
    251a:	f8c4 31c0 	streq.w	r3, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    251e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2522:	2b00      	cmp	r3, #0
    2524:	f000 86b5 	beq.w	3292 <ull_conn_llcp+0x1bca>
	tx->next = conn->tx_ctrl_last->next;
    2528:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    252c:	6818      	ldr	r0, [r3, #0]
    252e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    2530:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    2532:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	if (!tx->next) {
    2536:	6813      	ldr	r3, [r2, #0]
    2538:	2b00      	cmp	r3, #0
    253a:	f000 85ff 	beq.w	313c <ull_conn_llcp+0x1a74>
	conn->procedure_expire = conn->procedure_reload;
    253e:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    2542:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2546:	6823      	ldr	r3, [r4, #0]
	conn_upd_curr = conn;
    2548:	600c      	str	r4, [r1, #0]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    254a:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    254c:	f8c4 5194 	str.w	r5, [r4, #404]	; 0x194
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2550:	da0a      	bge.n	2568 <ull_conn_llcp+0xea0>
			uint32_t ticks_prepare_to_start =
    2552:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    2556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    255a:	4287      	cmp	r7, r0
    255c:	bf2c      	ite	cs
    255e:	19e9      	addcs	r1, r5, r7
    2560:	1829      	addcc	r1, r5, r0
    2562:	1acb      	subs	r3, r1, r3
    2564:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
    2568:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
    256a:	4b98      	ldr	r3, [pc, #608]	; (27cc <ull_conn_llcp+0x1104>)
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
    256c:	f8c4 2190 	str.w	r2, [r4, #400]	; 0x190
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2570:	2201      	movs	r2, #1
    2572:	2102      	movs	r1, #2
    2574:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
    2576:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2578:	f00d f84a 	bl	f610 <mayfly_enqueue>
		LL_ASSERT(!retval);
    257c:	2800      	cmp	r0, #0
    257e:	f43f acb3 	beq.w	1ee8 <ull_conn_llcp+0x820>
    2582:	4a93      	ldr	r2, [pc, #588]	; (27d0 <ull_conn_llcp+0x1108>)
    2584:	4993      	ldr	r1, [pc, #588]	; (27d4 <ull_conn_llcp+0x110c>)
    2586:	f640 3366 	movw	r3, #2918	; 0xb66
		LL_ASSERT(0);
    258a:	4893      	ldr	r0, [pc, #588]	; (27d8 <ull_conn_llcp+0x1110>)
    258c:	f01e fa27 	bl	209de <printk>
    2590:	4040      	eors	r0, r0
    2592:	f380 8811 	msr	BASEPRI, r0
    2596:	f04f 0003 	mov.w	r0, #3
    259a:	df02      	svc	2
		break;
    259c:	e4a4      	b.n	1ee8 <ull_conn_llcp+0x820>
		if ((conn->llcp_cu.interval != lll->interval) ||
    259e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    25a0:	f8b4 c110 	ldrh.w	ip, [r4, #272]	; 0x110
		if ((conn->llcp_cu.interval != lll->interval) ||
    25a4:	428a      	cmp	r2, r1
    25a6:	f47f a97d 	bne.w	18a4 <ull_conn_llcp+0x1dc>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    25aa:	f240 42e2 	movw	r2, #1250	; 0x4e2
    25ae:	fb02 fe03 	mul.w	lr, r2, r3
    25b2:	f242 7210 	movw	r2, #10000	; 0x2710
    25b6:	fb02 e20c 	mla	r2, r2, ip, lr
    25ba:	3a01      	subs	r2, #1
    25bc:	fbb2 f2fe 	udiv	r2, r2, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    25c0:	f8b4 e0ca 	ldrh.w	lr, [r4, #202]	; 0xca
    25c4:	b292      	uxth	r2, r2
    25c6:	4596      	cmp	lr, r2
    25c8:	f47f a96c 	bne.w	18a4 <ull_conn_llcp+0x1dc>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    25cc:	2303      	movs	r3, #3
    25ce:	f889 3004 	strb.w	r3, [r9, #4]
    25d2:	f7ff b976 	b.w	18c2 <ull_conn_llcp+0x1fa>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    25d6:	2201      	movs	r2, #1
    25d8:	4610      	mov	r0, r2
    25da:	2102      	movs	r1, #2
    25dc:	f00c ffe6 	bl	f5ac <mayfly_enable>
				return -ECANCELED;
    25e0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    25e4:	f7ff b88e 	b.w	1704 <ull_conn_llcp+0x3c>
    25e8:	f44f 78a4 	mov.w	r8, #328	; 0x148
    25ec:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    25f0:	f7ff baca 	b.w	1b88 <ull_conn_llcp+0x4c0>
		if (!conn->tx_ctrl) {
    25f4:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    25f8:	2a00      	cmp	r2, #0
    25fa:	f47f acf3 	bne.w	1fe4 <ull_conn_llcp+0x91c>
			tx->next = conn->tx_head;
    25fe:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2600:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2604:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    2608:	e4f4      	b.n	1ff4 <ull_conn_llcp+0x92c>
		if (!conn->tx_ctrl) {
    260a:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    260e:	2a00      	cmp	r2, #0
    2610:	f47f ade8 	bne.w	21e4 <ull_conn_llcp+0xb1c>
			tx->next = conn->tx_head;
    2614:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2616:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    261a:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
    261e:	e5e9      	b.n	21f4 <ull_conn_llcp+0xb2c>
				lll->slave.window_widening_periodic_us *
    2620:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us -=
    2622:	6d23      	ldr	r3, [r4, #80]	; 0x50
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2624:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 27dc <ull_conn_llcp+0x1114>
			lll->slave.window_widening_prepare_us -=
    2628:	fb02 331b 	mls	r3, r2, fp, r3
    262c:	6523      	str	r3, [r4, #80]	; 0x50
				(((lll_conn_ppm_local_get() +
    262e:	f019 faeb 	bl	1bc08 <lll_conn_ppm_local_get>
    2632:	4606      	mov	r6, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    2634:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    2638:	f3c0 0082 	ubfx	r0, r0, #2, #3
    263c:	f019 fae6 	bl	1bc0c <lll_conn_ppm_get>
				(((lll_conn_ppm_local_get() +
    2640:	1833      	adds	r3, r6, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    2642:	fb07 f303 	mul.w	r3, r7, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2646:	4e66      	ldr	r6, [pc, #408]	; (27e0 <ull_conn_llcp+0x1118>)
				conn->llcp_cu.win_size * 1250U;
    2648:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    264c:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    2650:	f203 233f 	addw	r3, r3, #575	; 0x23f
    2654:	fba6 3603 	umull	r3, r6, r6, r3
    2658:	0cb6      	lsrs	r6, r6, #18
				conn->llcp_cu.win_size * 1250U;
    265a:	fb08 f202 	mul.w	r2, r8, r2
			lll->slave.window_widening_prepare_us +=
    265e:	6d23      	ldr	r3, [r4, #80]	; 0x50
			lll->slave.window_size_prepare_us =
    2660:	65a2      	str	r2, [r4, #88]	; 0x58
				lll->slave.window_widening_periodic_us *
    2662:	fb06 f10a 	mul.w	r1, r6, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2666:	087a      	lsrs	r2, r7, #1
			lll->slave.window_widening_prepare_us +=
    2668:	440b      	add	r3, r1
				(conn_interval_us >> 1) - EVENT_IFS_US;
    266a:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    266c:	4293      	cmp	r3, r2
    266e:	bf28      	it	cs
    2670:	4613      	movcs	r3, r2
    2672:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0U;
    2676:	2300      	movs	r3, #0
			lll->slave.window_widening_periodic_us =
    2678:	64a6      	str	r6, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    267a:	fba1 0109 	umull	r0, r1, r1, r9
			conn->slave.ticks_to_offset = 0U;
    267e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2682:	a34f      	add	r3, pc, #316	; (adr r3, 27c0 <ull_conn_llcp+0x10f8>)
    2684:	e9d3 2300 	ldrd	r2, r3, [r3]
    2688:	f7fe f85e 	bl	748 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    268c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2690:	1a2d      	subs	r5, r5, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2692:	4854      	ldr	r0, [pc, #336]	; (27e4 <ull_conn_llcp+0x111c>)
    2694:	fba0 3003 	umull	r3, r0, r0, r3
    2698:	0a80      	lsrs	r0, r0, #10
    269a:	fb08 f000 	mul.w	r0, r8, r0
    269e:	fba0 0109 	umull	r0, r1, r0, r9
    26a2:	a347      	add	r3, pc, #284	; (adr r3, 27c0 <ull_conn_llcp+0x10f8>)
    26a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    26a8:	f7fe f84e 	bl	748 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    26ac:	1bbe      	subs	r6, r7, r6
		lll->interval = conn->llcp_cu.interval;
    26ae:	f8b4 910c 	ldrh.w	r9, [r4, #268]	; 0x10c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    26b2:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    26b6:	f7ff b955 	b.w	1964 <ull_conn_llcp+0x29c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    26ba:	4843      	ldr	r0, [pc, #268]	; (27c8 <ull_conn_llcp+0x1100>)
    26bc:	f00c fed4 	bl	f468 <mem_acquire>
	if (tx) {
    26c0:	2800      	cmp	r0, #0
    26c2:	f43f ac11 	beq.w	1ee8 <ull_conn_llcp+0x820>
		conn->llcp_feature.ack--;
    26c6:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
    26ca:	3b01      	subs	r3, #1
    26cc:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
		conn->llcp_feature.features_conn = LL_FEAT;
    26d0:	4b45      	ldr	r3, [pc, #276]	; (27e8 <ull_conn_llcp+0x1120>)
    26d2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    26d6:	2309      	movs	r3, #9
    26d8:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    26da:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
__ssp_bos_icheck3(memset, void *, int)
    26de:	6087      	str	r7, [r0, #8]
    26e0:	60c7      	str	r7, [r0, #12]
    26e2:	2b00      	cmp	r3, #0
		sys_put_le24(conn->llcp_feature.features_conn,
    26e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	dst[0] = val;
    26e8:	7203      	strb	r3, [r0, #8]
	dst[1] = val >> 8;
    26ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
    26ee:	7242      	strb	r2, [r0, #9]
	dst[2] = val >> 16;
    26f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    26f4:	7902      	ldrb	r2, [r0, #4]
    26f6:	7283      	strb	r3, [r0, #10]
    26f8:	f042 0203 	orr.w	r2, r2, #3
	    conn->tx_head &&
    26fc:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2700:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    2702:	bfac      	ite	ge
    2704:	2208      	movge	r2, #8
    2706:	220e      	movlt	r2, #14
    2708:	71c2      	strb	r2, [r0, #7]
	if (
    270a:	2b00      	cmp	r3, #0
    270c:	f000 8122 	beq.w	2954 <ull_conn_llcp+0x128c>
	    !conn->llcp_enc.pause_tx &&
    2710:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    2714:	0791      	lsls	r1, r2, #30
    2716:	f100 811d 	bmi.w	2954 <ull_conn_llcp+0x128c>
	    !conn->llcp_phy.pause_tx &&
    271a:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    271e:	07d2      	lsls	r2, r2, #31
    2720:	f100 8118 	bmi.w	2954 <ull_conn_llcp+0x128c>
		if (conn->tx_head == conn->tx_data) {
    2724:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    2728:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    272a:	bf04      	itt	eq
    272c:	681a      	ldreq	r2, [r3, #0]
    272e:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2732:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2736:	2a00      	cmp	r2, #0
    2738:	f000 8422 	beq.w	2f80 <ull_conn_llcp+0x18b8>
	tx->next = conn->tx_ctrl_last->next;
    273c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2740:	681a      	ldr	r2, [r3, #0]
    2742:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2744:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2746:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    2748:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
    274c:	2b00      	cmp	r3, #0
    274e:	f000 82c2 	beq.w	2cd6 <ull_conn_llcp+0x160e>
		conn->procedure_expire = conn->procedure_reload;
    2752:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    2756:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    275a:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
    275e:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
	break;
    2762:	f7fe bfc3 	b.w	16ec <ull_conn_llcp+0x24>
		conn->tx_data_last = tx;
    2766:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    276a:	f7ff bac4 	b.w	1cf6 <ull_conn_llcp+0x62e>
		if (!conn->tx_ctrl) {
    276e:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2772:	2a00      	cmp	r2, #0
    2774:	f47f ada0 	bne.w	22b8 <ull_conn_llcp+0xbf0>
			tx->next = conn->tx_head;
    2778:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    277a:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    277e:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
    2782:	e5a1      	b.n	22c8 <ull_conn_llcp+0xc00>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2784:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2788:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    278c:	f3c5 0182 	ubfx	r1, r5, #2, #3
    2790:	f361 0202 	bfi	r2, r1, #0, #3
    2794:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2798:	4642      	mov	r2, r8
    279a:	f012 f9bb 	bl	14b14 <calc_eff_time>
    279e:	4606      	mov	r6, r0
    27a0:	f7ff b9f8 	b.w	1b94 <ull_conn_llcp+0x4cc>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    27a4:	f894 119d 	ldrb.w	r1, [r4, #413]	; 0x19d
    27a8:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
    27ac:	4291      	cmp	r1, r2
    27ae:	f000 815a 	beq.w	2a66 <ull_conn_llcp+0x139e>
			event_len_prep(conn);
    27b2:	4620      	mov	r0, r4
    27b4:	f012 fc9a 	bl	150ec <event_len_prep>
    27b8:	f7ff bb96 	b.w	1ee8 <ull_conn_llcp+0x820>
    27bc:	f3af 8000 	nop.w
    27c0:	1afd498d 	.word	0x1afd498d
    27c4:	00000007 	.word	0x00000007
    27c8:	20002a78 	.word	0x20002a78
    27cc:	20000568 	.word	0x20000568
    27d0:	000277f0 	.word	0x000277f0
    27d4:	000275ac 	.word	0x000275ac
    27d8:	000272c0 	.word	0x000272c0
    27dc:	3b9aca00 	.word	0x3b9aca00
    27e0:	431bde83 	.word	0x431bde83
    27e4:	d1b71759 	.word	0xd1b71759
    27e8:	000149ff 	.word	0x000149ff
		LL_ASSERT(rx && rx->hdr.link);
    27ec:	4ad1      	ldr	r2, [pc, #836]	; (2b34 <ull_conn_llcp+0x146c>)
    27ee:	49d2      	ldr	r1, [pc, #840]	; (2b38 <ull_conn_llcp+0x1470>)
    27f0:	48d2      	ldr	r0, [pc, #840]	; (2b3c <ull_conn_llcp+0x1474>)
    27f2:	f640 6328 	movw	r3, #3624	; 0xe28
    27f6:	f01e f8f2 	bl	209de <printk>
    27fa:	4040      	eors	r0, r0
    27fc:	f380 8811 	msr	BASEPRI, r0
    2800:	f04f 0003 	mov.w	r0, #3
    2804:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2806:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2808:	f894 b0f0 	ldrb.w	fp, [r4, #240]	; 0xf0
    280c:	f7ff b9e5 	b.w	1bda <ull_conn_llcp+0x512>
		LL_ASSERT(rx && rx->hdr.link);
    2810:	4ac8      	ldr	r2, [pc, #800]	; (2b34 <ull_conn_llcp+0x146c>)
    2812:	49c9      	ldr	r1, [pc, #804]	; (2b38 <ull_conn_llcp+0x1470>)
    2814:	48c9      	ldr	r0, [pc, #804]	; (2b3c <ull_conn_llcp+0x1474>)
    2816:	f640 6354 	movw	r3, #3668	; 0xe54
    281a:	f01e f8e0 	bl	209de <printk>
    281e:	4040      	eors	r0, r0
    2820:	f380 8811 	msr	BASEPRI, r0
    2824:	f04f 0003 	mov.w	r0, #3
    2828:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    282a:	6828      	ldr	r0, [r5, #0]
    282c:	f7ff b9fa 	b.w	1c24 <ull_conn_llcp+0x55c>
		switch (conn->llcp_cu.state) {
    2830:	48c3      	ldr	r0, [pc, #780]	; (2b40 <ull_conn_llcp+0x1478>)
    2832:	e470      	b.n	2116 <ull_conn_llcp+0xa4e>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    2834:	f104 0783 	add.w	r7, r4, #131	; 0x83
    2838:	463b      	mov	r3, r7
    283a:	462a      	mov	r2, r5
    283c:	f104 01f2 	add.w	r1, r4, #242	; 0xf2
    2840:	f204 1061 	addw	r0, r4, #353	; 0x161
    2844:	f01a f866 	bl	1c914 <ecb_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2848:	f8d4 208b 	ldr.w	r2, [r4, #139]	; 0x8b
		lll->ccm_rx.direction = 0;
    284c:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    2850:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    2854:	f8d4 2083 	ldr.w	r2, [r4, #131]	; 0x83
    2858:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    285c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    2860:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
    2864:	f365 0300 	bfi	r3, r5, #0, #1
    2868:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    286c:	f8c4 20c1 	str.w	r2, [r4, #193]	; 0xc1
    2870:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
		lll->ccm_tx.direction = 1;
    2874:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
		lll->enc_rx = 1;
    2878:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    287c:	f8d4 1087 	ldr.w	r1, [r4, #135]	; 0x87
    2880:	f8d4 008f 	ldr.w	r0, [r4, #143]	; 0x8f
    2884:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
		lll->ccm_tx.direction = 1;
    2888:	f042 0201 	orr.w	r2, r2, #1
		lll->enc_rx = 1;
    288c:	f043 0308 	orr.w	r3, r3, #8
    2890:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
		lll->ccm_rx.counter = 0;
    2894:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    2898:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    289c:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    28a0:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
    28a4:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
    28a8:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
    28ac:	f884 5099 	strb.w	r5, [r4, #153]	; 0x99
    28b0:	f884 509a 	strb.w	r5, [r4, #154]	; 0x9a
		lll->ccm_tx.counter = 0;
    28b4:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
    28b8:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
		lll->ccm_tx.direction = 1;
    28bc:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		lll->enc_rx = 1;
    28c0:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
static int start_enc_rsp_send(struct ll_conn *conn,
			      struct pdu_data *pdu_ctrl_tx)
{
	struct node_tx *tx = NULL;

	if (!pdu_ctrl_tx) {
    28c4:	f1b8 0f00 	cmp.w	r8, #0
    28c8:	f000 826f 	beq.w	2daa <ull_conn_llcp+0x16e2>

		pdu_ctrl_tx = (void *)tx->pdu;
	}

	/* enable transmit encryption */
	conn->lll.enc_tx = 1;
    28cc:	b2da      	uxtb	r2, r3
    28ce:	f042 0210 	orr.w	r2, r2, #16

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28d2:	7933      	ldrb	r3, [r6, #4]
	conn->lll.enc_tx = 1;
    28d4:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    28d8:	2101      	movs	r1, #1
    28da:	7171      	strb	r1, [r6, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28dc:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    28e0:	2206      	movs	r2, #6
		if (!conn->tx_ctrl) {
    28e2:	f8d4 c1b8 	ldr.w	ip, [r4, #440]	; 0x1b8
	    conn->tx_head &&
    28e6:	f8d4 01b4 	ldr.w	r0, [r4, #436]	; 0x1b4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28ea:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    28ec:	71f2      	strb	r2, [r6, #7]
	if (
    28ee:	2800      	cmp	r0, #0
    28f0:	f000 809a 	beq.w	2a28 <ull_conn_llcp+0x1360>
	    !conn->llcp_enc.pause_tx &&
    28f4:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
	    conn->tx_head &&
    28f8:	079f      	lsls	r7, r3, #30
    28fa:	f100 8095 	bmi.w	2a28 <ull_conn_llcp+0x1360>
	    !conn->llcp_phy.pause_tx &&
    28fe:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
    2902:	07dd      	lsls	r5, r3, #31
    2904:	f100 8090 	bmi.w	2a28 <ull_conn_llcp+0x1360>
		if (conn->tx_head == conn->tx_data) {
    2908:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
    290c:	4283      	cmp	r3, r0
			conn->tx_data = conn->tx_data->next;
    290e:	bf04      	itt	eq
    2910:	6803      	ldreq	r3, [r0, #0]
    2912:	f8c4 31c0 	streq.w	r3, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2916:	f1bc 0f00 	cmp.w	ip, #0
    291a:	f000 8340 	beq.w	2f9e <ull_conn_llcp+0x18d6>
	tx->next = conn->tx_ctrl_last->next;
    291e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2922:	681a      	ldr	r2, [r3, #0]
    2924:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2926:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2928:	6830      	ldr	r0, [r6, #0]
	conn->tx_ctrl_last = tx;
    292a:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
	if (!tx->next) {
    292e:	2800      	cmp	r0, #0
    2930:	f47f abbc 	bne.w	20ac <ull_conn_llcp+0x9e4>
		conn->tx_data_last = tx;
    2934:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
    2938:	f7ff bbb8 	b.w	20ac <ull_conn_llcp+0x9e4>
		if (!conn->tx_ctrl) {
    293c:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2940:	2a00      	cmp	r2, #0
    2942:	f47f aa25 	bne.w	1d90 <ull_conn_llcp+0x6c8>
			tx->next = conn->tx_head;
    2946:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    2948:	e9c4 776d 	strd	r7, r7, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    294c:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
    2950:	f7ff ba26 	b.w	1da0 <ull_conn_llcp+0x6d8>
		if (!conn->tx_ctrl) {
    2954:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2958:	2a00      	cmp	r2, #0
    295a:	f47f aeef 	bne.w	273c <ull_conn_llcp+0x1074>
			tx->next = conn->tx_head;
    295e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2960:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2964:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    2968:	e6f0      	b.n	274c <ull_conn_llcp+0x1084>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    296a:	f104 0783 	add.w	r7, r4, #131	; 0x83
    296e:	463b      	mov	r3, r7
    2970:	462a      	mov	r2, r5
    2972:	f104 01f2 	add.w	r1, r4, #242	; 0xf2
    2976:	f204 1061 	addw	r0, r4, #353	; 0x161
    297a:	f019 ffcb 	bl	1c914 <ecb_encrypt>
    297e:	f8d4 208b 	ldr.w	r2, [r4, #139]	; 0x8b
    2982:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    2986:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
			lll->ccm_rx.direction = 1U;
    298a:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    298e:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
    2992:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    2996:	f8d4 1087 	ldr.w	r1, [r4, #135]	; 0x87
    299a:	f8c4 20c1 	str.w	r2, [r4, #193]	; 0xc1
    299e:	f8d4 0083 	ldr.w	r0, [r4, #131]	; 0x83
			lll->enc_rx = 1U;
    29a2:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
    29a6:	f8d4 708f 	ldr.w	r7, [r4, #143]	; 0x8f
    29aa:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
    29ae:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
			lll->ccm_tx.direction = 0U;
    29b2:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    29b6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
			lll->ccm_rx.direction = 1U;
    29ba:	f043 0301 	orr.w	r3, r3, #1
    29be:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
			lll->enc_rx = 1U;
    29c2:	f042 0208 	orr.w	r2, r2, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    29c6:	7933      	ldrb	r3, [r6, #4]
			lll->enc_rx = 1U;
    29c8:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
			lll->ccm_tx.direction = 0U;
    29cc:	f365 0100 	bfi	r1, r5, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    29d0:	2201      	movs	r2, #1
			lll->ccm_tx.counter = 0U;
    29d2:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
    29d6:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    29da:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    29de:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    29e2:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
    29e6:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
    29ea:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
    29ee:	f884 5099 	strb.w	r5, [r4, #153]	; 0x99
    29f2:	f884 509a 	strb.w	r5, [r4, #154]	; 0x9a
			lll->ccm_tx.direction = 0U;
    29f6:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    29fa:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    29fe:	7172      	strb	r2, [r6, #5]
			pdu_ctrl_tx->llctrl.opcode =
    2a00:	2205      	movs	r2, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2a02:	7133      	strb	r3, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    2a04:	71f2      	strb	r2, [r6, #7]
	    conn->tx_head &&
    2a06:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	if (
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	f47f ab2d 	bne.w	206a <ull_conn_llcp+0x9a2>
		if (!conn->tx_ctrl) {
    2a10:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2a14:	2a00      	cmp	r2, #0
    2a16:	f47f ab3e 	bne.w	2096 <ull_conn_llcp+0x9ce>
			tx->next = conn->tx_head;
    2a1a:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2a1c:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2a20:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
    2a24:	f7ff bb3e 	b.w	20a4 <ull_conn_llcp+0x9dc>
		if (!conn->tx_ctrl) {
    2a28:	f1bc 0f00 	cmp.w	ip, #0
    2a2c:	f000 81ac 	beq.w	2d88 <ull_conn_llcp+0x16c0>
    2a30:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	tx->next = conn->tx_ctrl_last->next;
    2a34:	6813      	ldr	r3, [r2, #0]
    2a36:	6033      	str	r3, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2a38:	6016      	str	r6, [r2, #0]
	if (!tx->next) {
    2a3a:	6830      	ldr	r0, [r6, #0]
	conn->tx_ctrl_last = tx;
    2a3c:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
}
    2a40:	e775      	b.n	292e <ull_conn_llcp+0x1266>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    2a42:	4840      	ldr	r0, [pc, #256]	; (2b44 <ull_conn_llcp+0x147c>)
    2a44:	f7ff bb67 	b.w	2116 <ull_conn_llcp+0xa4e>
		LL_ASSERT(!retval);
    2a48:	4a3a      	ldr	r2, [pc, #232]	; (2b34 <ull_conn_llcp+0x146c>)
    2a4a:	493f      	ldr	r1, [pc, #252]	; (2b48 <ull_conn_llcp+0x1480>)
    2a4c:	483b      	ldr	r0, [pc, #236]	; (2b3c <ull_conn_llcp+0x1474>)
    2a4e:	f640 0339 	movw	r3, #2105	; 0x839
    2a52:	f01d ffc4 	bl	209de <printk>
    2a56:	4040      	eors	r0, r0
    2a58:	f380 8811 	msr	BASEPRI, r0
    2a5c:	f04f 0003 	mov.w	r0, #3
    2a60:	df02      	svc	2
    2a62:	f7ff bba4 	b.w	21ae <ull_conn_llcp+0xae6>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2a66:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    2a6a:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
    2a6e:	4291      	cmp	r1, r2
    2a70:	f43e ae41 	beq.w	16f6 <ull_conn_llcp+0x2e>
	switch (conn->llcp_phy.state) {
    2a74:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
    2a78:	f001 0003 	and.w	r0, r1, #3
    2a7c:	2803      	cmp	r0, #3
    2a7e:	f000 8375 	beq.w	316c <ull_conn_llcp+0x1aa4>
    2a82:	2800      	cmp	r0, #0
    2a84:	f47e ae37 	bne.w	16f6 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2a88:	4830      	ldr	r0, [pc, #192]	; (2b4c <ull_conn_llcp+0x1484>)
    2a8a:	f00c fced 	bl	f468 <mem_acquire>
		if (!tx) {
    2a8e:	4601      	mov	r1, r0
    2a90:	2800      	cmp	r0, #0
    2a92:	f43f aa29 	beq.w	1ee8 <ull_conn_llcp+0x820>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2a96:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
    2a9a:	2201      	movs	r2, #1
    2a9c:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2aa0:	f894 21b0 	ldrb.w	r2, [r4, #432]	; 0x1b0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2aa4:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2aa8:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2aac:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2ab0:	f894 01af 	ldrb.w	r0, [r4, #431]	; 0x1af
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2ab4:	f3c3 1742 	ubfx	r7, r3, #5, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2ab8:	f3c0 0040 	ubfx	r0, r0, #1, #1
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2abc:	f367 1206 	bfi	r2, r7, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2ac0:	f360 02c3 	bfi	r2, r0, #3, #1
    2ac4:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2ac8:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    2acc:	2303      	movs	r3, #3
		pr->tx_phys = conn->llcp_phy.tx;
    2ace:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2ad0:	724f      	strb	r7, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2ad2:	2216      	movs	r2, #22
		pdu_ctrl_tx->len =
    2ad4:	714b      	strb	r3, [r1, #5]
	    conn->tx_head &&
    2ad6:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2ada:	71ca      	strb	r2, [r1, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2adc:	790a      	ldrb	r2, [r1, #4]
    2ade:	f042 0203 	orr.w	r2, r2, #3
    2ae2:	710a      	strb	r2, [r1, #4]
	if (
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	f000 832d 	beq.w	3144 <ull_conn_llcp+0x1a7c>
	    !conn->llcp_enc.pause_tx &&
    2aea:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    2aee:	0797      	lsls	r7, r2, #30
    2af0:	f100 8328 	bmi.w	3144 <ull_conn_llcp+0x1a7c>
	    !conn->llcp_phy.pause_tx &&
    2af4:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    2af8:	07d0      	lsls	r0, r2, #31
    2afa:	f100 8323 	bmi.w	3144 <ull_conn_llcp+0x1a7c>
		if (conn->tx_head == conn->tx_data) {
    2afe:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    2b02:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2b04:	bf04      	itt	eq
    2b06:	681a      	ldreq	r2, [r3, #0]
    2b08:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2b0c:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2b10:	2a00      	cmp	r2, #0
    2b12:	f000 83cb 	beq.w	32ac <ull_conn_llcp+0x1be4>
	tx->next = conn->tx_ctrl_last->next;
    2b16:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2b1a:	681a      	ldr	r2, [r3, #0]
    2b1c:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
    2b1e:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
    2b20:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
	if (!tx->next) {
    2b24:	680b      	ldr	r3, [r1, #0]
    2b26:	2b00      	cmp	r3, #0
    2b28:	f47f ae13 	bne.w	2752 <ull_conn_llcp+0x108a>
		conn->tx_data_last = tx;
    2b2c:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
    2b30:	e60f      	b.n	2752 <ull_conn_llcp+0x108a>
    2b32:	bf00      	nop
    2b34:	000277f0 	.word	0x000277f0
    2b38:	000278d0 	.word	0x000278d0
    2b3c:	000272c0 	.word	0x000272c0
    2b40:	00003e79 	.word	0x00003e79
    2b44:	00018655 	.word	0x00018655
    2b48:	000275ac 	.word	0x000275ac
    2b4c:	20002a78 	.word	0x20002a78
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2b50:	4592      	cmp	sl, r2
    2b52:	f47f a853 	bne.w	1bfc <ull_conn_llcp+0x534>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2b56:	2303      	movs	r3, #3
    2b58:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2b5a:	4629      	mov	r1, r5
    2b5c:	f010 ffb6 	bl	13acc <ll_rx_put>
				rx = conn->llcp_rx;
    2b60:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
				LL_ASSERT(rx && rx->hdr.link);
    2b64:	2d00      	cmp	r5, #0
    2b66:	f000 82cd 	beq.w	3104 <ull_conn_llcp+0x1a3c>
    2b6a:	6828      	ldr	r0, [r5, #0]
    2b6c:	2800      	cmp	r0, #0
    2b6e:	f000 82c9 	beq.w	3104 <ull_conn_llcp+0x1a3c>
				conn->llcp_rx = rx->hdr.link->mem;
    2b72:	6842      	ldr	r2, [r0, #4]
    2b74:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
				rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2b78:	2303      	movs	r3, #3
    2b7a:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    2b7c:	4629      	mov	r1, r5
    2b7e:	f010 ffa5 	bl	13acc <ll_rx_put>
			ll_rx_sched();
    2b82:	f010 ffad 	bl	13ae0 <ll_rx_sched>
			return;
    2b86:	f7fe bdb6 	b.w	16f6 <ull_conn_llcp+0x2e>
			conn->llcp.phy_upd_ind.instant = event_counter +
    2b8a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2b8c:	441e      	add	r6, r3
							 lll->latency +
    2b8e:	1db3      	adds	r3, r6, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    2b90:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			(void)ll_pdu_rx_alloc();
    2b94:	f010 ffc8 	bl	13b28 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2b98:	f8d8 3000 	ldr.w	r3, [r8]
    2b9c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    2ba0:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2ba2:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
			rx = ll_pdu_rx_alloc();
    2ba6:	f010 ffbf 	bl	13b28 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2baa:	6803      	ldr	r3, [r0, #0]
    2bac:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    2bb0:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    2bb2:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2bb6:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
			conn->llcp_rx = rx;
    2bba:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    2bbe:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    2bc2:	095b      	lsrs	r3, r3, #5
    2bc4:	f7ff bb52 	b.w	226c <ull_conn_llcp+0xba4>
		LL_ASSERT(0);
    2bc8:	4ab8      	ldr	r2, [pc, #736]	; (2eac <ull_conn_llcp+0x17e4>)
    2bca:	49b9      	ldr	r1, [pc, #740]	; (2eb0 <ull_conn_llcp+0x17e8>)
    2bcc:	f640 3317 	movw	r3, #2839	; 0xb17
    2bd0:	e4db      	b.n	258a <ull_conn_llcp+0xec2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2bd2:	48b8      	ldr	r0, [pc, #736]	; (2eb4 <ull_conn_llcp+0x17ec>)
    2bd4:	f00c fc48 	bl	f468 <mem_acquire>
		if (tx) {
    2bd8:	2800      	cmp	r0, #0
    2bda:	f43f a985 	beq.w	1ee8 <ull_conn_llcp+0x820>
			conn->llcp_version.ack--;
    2bde:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
    2be2:	3b01      	subs	r3, #1
    2be4:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
			conn->llcp_version.tx = 1U;
    2be8:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
    2bec:	f043 0301 	orr.w	r3, r3, #1
    2bf0:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2bf4:	7903      	ldrb	r3, [r0, #4]
    2bf6:	f043 0303 	orr.w	r3, r3, #3
    2bfa:	7103      	strb	r3, [r0, #4]
			pdu->len =
    2bfc:	2306      	movs	r3, #6
    2bfe:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    2c00:	230c      	movs	r3, #12
    2c02:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    2c04:	230b      	movs	r3, #11
    2c06:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2c08:	f06f 030e 	mvn.w	r3, #14
    2c0c:	7243      	strb	r3, [r0, #9]
    2c0e:	2305      	movs	r3, #5
    2c10:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c16:	72c3      	strb	r3, [r0, #11]
    2c18:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    2c1a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	if (
    2c1e:	2b00      	cmp	r3, #0
    2c20:	f000 80b8 	beq.w	2d94 <ull_conn_llcp+0x16cc>
	    !conn->llcp_enc.pause_tx &&
    2c24:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    2c28:	0791      	lsls	r1, r2, #30
    2c2a:	f100 80b3 	bmi.w	2d94 <ull_conn_llcp+0x16cc>
	    !conn->llcp_phy.pause_tx &&
    2c2e:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    2c32:	07d2      	lsls	r2, r2, #31
    2c34:	f100 80ae 	bmi.w	2d94 <ull_conn_llcp+0x16cc>
		if (conn->tx_head == conn->tx_data) {
    2c38:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    2c3c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2c3e:	bf04      	itt	eq
    2c40:	681a      	ldreq	r2, [r3, #0]
    2c42:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2c46:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2c4a:	2a00      	cmp	r2, #0
    2c4c:	f000 830c 	beq.w	3268 <ull_conn_llcp+0x1ba0>
	tx->next = conn->tx_ctrl_last->next;
    2c50:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2c54:	681a      	ldr	r2, [r3, #0]
    2c56:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2c58:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2c5a:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
    2c5e:	6803      	ldr	r3, [r0, #0]
    2c60:	e574      	b.n	274c <ull_conn_llcp+0x1084>
	if (!pdu_ctrl_tx) {
    2c62:	f1b8 0f00 	cmp.w	r8, #0
    2c66:	f000 8127 	beq.w	2eb8 <ull_conn_llcp+0x17f0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c6a:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
    2c6c:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    2c70:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    2c72:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    2c76:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c78:	f042 0303 	orr.w	r3, r2, #3
    2c7c:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
    2c80:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    2c84:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    2c86:	2206      	movs	r2, #6
    2c88:	71c2      	strb	r2, [r0, #7]
	if (
    2c8a:	b339      	cbz	r1, 2cdc <ull_conn_llcp+0x1614>
	    !conn->llcp_enc.pause_tx &&
    2c8c:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
	    conn->tx_head &&
    2c90:	079f      	lsls	r7, r3, #30
    2c92:	d423      	bmi.n	2cdc <ull_conn_llcp+0x1614>
	    !conn->llcp_phy.pause_tx &&
    2c94:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
    2c98:	07d8      	lsls	r0, r3, #31
    2c9a:	d41f      	bmi.n	2cdc <ull_conn_llcp+0x1614>
		if (conn->tx_head == conn->tx_data) {
    2c9c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
    2ca0:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
    2ca2:	bf04      	itt	eq
    2ca4:	680b      	ldreq	r3, [r1, #0]
    2ca6:	f8c4 31c0 	streq.w	r3, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2caa:	2d00      	cmp	r5, #0
    2cac:	f000 8240 	beq.w	3130 <ull_conn_llcp+0x1a68>
	tx->next = conn->tx_ctrl_last->next;
    2cb0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2cb4:	681a      	ldr	r2, [r3, #0]
    2cb6:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2cb8:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    2cba:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
	if (!tx->next) {
    2cbe:	6833      	ldr	r3, [r6, #0]
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	f000 80c7 	beq.w	2e54 <ull_conn_llcp+0x178c>
		conn->llcp_enc.pause_rx = 0U;
    2cc6:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
    2cca:	f023 0303 	bic.w	r3, r3, #3
    2cce:	f884 3156 	strb.w	r3, [r4, #342]	; 0x156
    2cd2:	f7ff b9eb 	b.w	20ac <ull_conn_llcp+0x9e4>
		conn->tx_data_last = tx;
    2cd6:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
			conn->procedure_expire = conn->procedure_reload;
    2cda:	e53a      	b.n	2752 <ull_conn_llcp+0x108a>
		if (!conn->tx_ctrl) {
    2cdc:	2d00      	cmp	r5, #0
    2cde:	d1e7      	bne.n	2cb0 <ull_conn_llcp+0x15e8>
			tx->next = conn->tx_head;
    2ce0:	6031      	str	r1, [r6, #0]
				conn->tx_ctrl = tx;
    2ce2:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2ce6:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
    2cea:	e7e8      	b.n	2cbe <ull_conn_llcp+0x15f6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2cec:	230d      	movs	r3, #13
    2cee:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2cf0:	7235      	strb	r5, [r6, #8]
    2cf2:	2702      	movs	r7, #2
    2cf4:	f7ff b9b0 	b.w	2058 <ull_conn_llcp+0x990>
				(void)ll_pdu_rx_alloc();
    2cf8:	f010 ff16 	bl	13b28 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    2cfc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2cfe:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2d02:	2310      	movs	r3, #16
				upd->status = 0U;
    2d04:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2d08:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    2d0c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
				ll_rx_put(rx->hdr.link, rx);
    2d10:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    2d14:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2d18:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    2d1c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    2d20:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2d24:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    2d28:	4641      	mov	r1, r8
    2d2a:	f010 fecf 	bl	13acc <ll_rx_put>
				ll_rx_sched();
    2d2e:	f010 fed7 	bl	13ae0 <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    2d32:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2d36:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    2d3a:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    2d3e:	095b      	lsrs	r3, r3, #5
    2d40:	f7ff ba94 	b.w	226c <ull_conn_llcp+0xba4>
	switch (conn->llcp_conn_param.state) {
    2d44:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
    2d48:	f003 0307 	and.w	r3, r3, #7
    2d4c:	2b05      	cmp	r3, #5
    2d4e:	f200 82c6 	bhi.w	32de <ull_conn_llcp+0x1c16>
    2d52:	a001      	add	r0, pc, #4	; (adr r0, 2d58 <ull_conn_llcp+0x1690>)
    2d54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    2d58:	00002479 	.word	0x00002479
    2d5c:	000023d7 	.word	0x000023d7
    2d60:	00002385 	.word	0x00002385
    2d64:	000016f7 	.word	0x000016f7
    2d68:	000016f7 	.word	0x000016f7
    2d6c:	000016f7 	.word	0x000016f7
		conn->tx_data_last = tx;
    2d70:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
    2d74:	f7ff b817 	b.w	1da6 <ull_conn_llcp+0x6de>
			tx->next = conn->tx_head->next;
    2d78:	681a      	ldr	r2, [r3, #0]
    2d7a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2d7c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2d7e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2d80:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
    2d84:	f7fe bfb4 	b.w	1cf0 <ull_conn_llcp+0x628>
			tx->next = conn->tx_head;
    2d88:	6030      	str	r0, [r6, #0]
				conn->tx_ctrl = tx;
    2d8a:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2d8e:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
    2d92:	e5cc      	b.n	292e <ull_conn_llcp+0x1266>
		if (!conn->tx_ctrl) {
    2d94:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2d98:	2a00      	cmp	r2, #0
    2d9a:	f47f af59 	bne.w	2c50 <ull_conn_llcp+0x1588>
			tx->next = conn->tx_head;
    2d9e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2da0:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2da4:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    2da8:	e759      	b.n	2c5e <ull_conn_llcp+0x1596>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2daa:	4842      	ldr	r0, [pc, #264]	; (2eb4 <ull_conn_llcp+0x17ec>)
    2dac:	f00c fb5c 	bl	f468 <mem_acquire>
		if (!tx) {
    2db0:	4603      	mov	r3, r0
    2db2:	2800      	cmp	r0, #0
    2db4:	f000 8269 	beq.w	328a <ull_conn_llcp+0x1bc2>
	conn->lll.enc_tx = 1;
    2db8:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    2dbc:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    2dbe:	f042 0210 	orr.w	r2, r2, #16
    2dc2:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2dc6:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    2dc8:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    2dca:	2106      	movs	r1, #6
    2dcc:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
    2dce:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2dd2:	f042 0203 	orr.w	r2, r2, #3
    2dd6:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
    2dd8:	4608      	mov	r0, r1
	if (
    2dda:	b1f9      	cbz	r1, 2e1c <ull_conn_llcp+0x1754>
	    !conn->llcp_enc.pause_tx &&
    2ddc:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    2de0:	0795      	lsls	r5, r2, #30
    2de2:	d41b      	bmi.n	2e1c <ull_conn_llcp+0x1754>
	    !conn->llcp_phy.pause_tx &&
    2de4:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    2de8:	07d2      	lsls	r2, r2, #31
    2dea:	d417      	bmi.n	2e1c <ull_conn_llcp+0x1754>
		if (conn->tx_head == conn->tx_data) {
    2dec:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2df0:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
		if (conn->tx_head == conn->tx_data) {
    2df4:	4291      	cmp	r1, r2
			conn->tx_data = conn->tx_data->next;
    2df6:	bf04      	itt	eq
    2df8:	680a      	ldreq	r2, [r1, #0]
    2dfa:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2dfe:	2d00      	cmp	r5, #0
    2e00:	f000 818f 	beq.w	3122 <ull_conn_llcp+0x1a5a>
	tx->next = conn->tx_ctrl_last->next;
    2e04:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2e08:	6810      	ldr	r0, [r2, #0]
    2e0a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last->next = tx;
    2e0c:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
    2e0e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	if (!tx->next) {
    2e12:	681a      	ldr	r2, [r3, #0]
    2e14:	b1ca      	cbz	r2, 2e4a <ull_conn_llcp+0x1782>
	    conn->tx_head &&
    2e16:	4608      	mov	r0, r1
		if (!conn->tx_ctrl) {
    2e18:	46ac      	mov	ip, r5
    2e1a:	e56b      	b.n	28f4 <ull_conn_llcp+0x122c>
		if (!conn->tx_ctrl) {
    2e1c:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
    2e20:	46ac      	mov	ip, r5
    2e22:	b1d5      	cbz	r5, 2e5a <ull_conn_llcp+0x1792>
	tx->next = conn->tx_ctrl_last->next;
    2e24:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2e28:	6817      	ldr	r7, [r2, #0]
    2e2a:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last->next = tx;
    2e2c:	6013      	str	r3, [r2, #0]
	if (!tx->next) {
    2e2e:	681f      	ldr	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    2e30:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
    2e34:	461a      	mov	r2, r3
	if (!tx->next) {
    2e36:	b147      	cbz	r7, 2e4a <ull_conn_llcp+0x1782>
	if (
    2e38:	2900      	cmp	r1, #0
    2e3a:	f43f adfb 	beq.w	2a34 <ull_conn_llcp+0x136c>
	    !conn->llcp_enc.pause_tx &&
    2e3e:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
	    conn->tx_head &&
    2e42:	079b      	lsls	r3, r3, #30
    2e44:	f57f ad5b 	bpl.w	28fe <ull_conn_llcp+0x1236>
    2e48:	e5f4      	b.n	2a34 <ull_conn_llcp+0x136c>
		conn->tx_data_last = tx;
    2e4a:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
	    conn->tx_head &&
    2e4e:	4608      	mov	r0, r1
		if (!conn->tx_ctrl) {
    2e50:	46ac      	mov	ip, r5
    2e52:	e54c      	b.n	28ee <ull_conn_llcp+0x1226>
		conn->tx_data_last = tx;
    2e54:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
    2e58:	e735      	b.n	2cc6 <ull_conn_llcp+0x15fe>
			tx->next = conn->tx_head;
    2e5a:	6019      	str	r1, [r3, #0]
			conn->tx_head = tx;
    2e5c:	461d      	mov	r5, r3
				conn->tx_ctrl = tx;
    2e5e:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2e62:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
    2e66:	4619      	mov	r1, r3
    2e68:	e7d3      	b.n	2e12 <ull_conn_llcp+0x174a>
			tx->next = conn->tx_head->next;
    2e6a:	681a      	ldr	r2, [r3, #0]
    2e6c:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2e6e:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2e70:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2e72:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
    2e76:	f7ff b9bd 	b.w	21f4 <ull_conn_llcp+0xb2c>
			tx->next = conn->tx_head->next;
    2e7a:	681a      	ldr	r2, [r3, #0]
    2e7c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2e7e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2e80:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2e82:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
    2e86:	f7ff b8b5 	b.w	1ff4 <ull_conn_llcp+0x92c>
			tx->next = conn->tx_head->next;
    2e8a:	681a      	ldr	r2, [r3, #0]
    2e8c:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2e8e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    2e90:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2e92:	e9c4 556e 	strd	r5, r5, [r4, #440]	; 0x1b8
    2e96:	f7ff ba17 	b.w	22c8 <ull_conn_llcp+0xc00>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2e9a:	2303      	movs	r3, #3
			ll_rx_put(rx->hdr.link, rx);
    2e9c:	4629      	mov	r1, r5
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2e9e:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2ea0:	f010 fe14 	bl	13acc <ll_rx_put>
			ll_rx_sched();
    2ea4:	f010 fe1c 	bl	13ae0 <ll_rx_sched>
			return;
    2ea8:	f7fe bc25 	b.w	16f6 <ull_conn_llcp+0x2e>
    2eac:	000277f0 	.word	0x000277f0
    2eb0:	00027358 	.word	0x00027358
    2eb4:	20002a78 	.word	0x20002a78
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2eb8:	48a8      	ldr	r0, [pc, #672]	; (315c <ull_conn_llcp+0x1a94>)
    2eba:	f00c fad5 	bl	f468 <mem_acquire>
		if (!tx) {
    2ebe:	2800      	cmp	r0, #0
    2ec0:	f000 8207 	beq.w	32d2 <ull_conn_llcp+0x1c0a>
	conn->lll.enc_tx = 1;
    2ec4:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    2ec8:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    2eca:	f042 0210 	orr.w	r2, r2, #16
    2ece:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ed2:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    2ed4:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    2ed6:	2106      	movs	r1, #6
    2ed8:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
    2eda:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2ede:	f042 0203 	orr.w	r2, r2, #3
    2ee2:	7102      	strb	r2, [r0, #4]
	if (
    2ee4:	b309      	cbz	r1, 2f2a <ull_conn_llcp+0x1862>
	    !conn->llcp_enc.pause_tx &&
    2ee6:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
    2eea:	0792      	lsls	r2, r2, #30
    2eec:	d41d      	bmi.n	2f2a <ull_conn_llcp+0x1862>
	    !conn->llcp_phy.pause_tx &&
    2eee:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
    2ef2:	07d3      	lsls	r3, r2, #31
    2ef4:	d419      	bmi.n	2f2a <ull_conn_llcp+0x1862>
		if (conn->tx_head == conn->tx_data) {
    2ef6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2efa:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
		if (conn->tx_head == conn->tx_data) {
    2efe:	4291      	cmp	r1, r2
			conn->tx_data = conn->tx_data->next;
    2f00:	bf04      	itt	eq
    2f02:	6812      	ldreq	r2, [r2, #0]
    2f04:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    2f08:	2d00      	cmp	r5, #0
    2f0a:	f000 81b7 	beq.w	327c <ull_conn_llcp+0x1bb4>
	tx->next = conn->tx_ctrl_last->next;
    2f0e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2f12:	6813      	ldr	r3, [r2, #0]
    2f14:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2f16:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    2f18:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
    2f1c:	6802      	ldr	r2, [r0, #0]
    2f1e:	2a00      	cmp	r2, #0
    2f20:	f47f aeb4 	bne.w	2c8c <ull_conn_llcp+0x15c4>
		conn->tx_data_last = tx;
    2f24:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    2f28:	e6af      	b.n	2c8a <ull_conn_llcp+0x15c2>
		if (!conn->tx_ctrl) {
    2f2a:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
    2f2e:	b1fd      	cbz	r5, 2f70 <ull_conn_llcp+0x18a8>
	tx->next = conn->tx_ctrl_last->next;
    2f30:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2f34:	6813      	ldr	r3, [r2, #0]
    2f36:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2f38:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    2f3a:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    2f3c:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
    2f40:	2a00      	cmp	r2, #0
    2f42:	f47f aea2 	bne.w	2c8a <ull_conn_llcp+0x15c2>
    2f46:	e7ed      	b.n	2f24 <ull_conn_llcp+0x185c>
		if (!conn->tx_ctrl) {
    2f48:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	f47f aaeb 	bne.w	2528 <ull_conn_llcp+0xe60>
			tx->next = conn->tx_head;
    2f52:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    2f54:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2f58:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
    2f5c:	f7ff baeb 	b.w	2536 <ull_conn_llcp+0xe6e>
			tx->next = conn->tx_head->next;
    2f60:	681a      	ldr	r2, [r3, #0]
    2f62:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    2f64:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    2f66:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    2f68:	e9c4 776e 	strd	r7, r7, [r4, #440]	; 0x1b8
    2f6c:	f7fe bf18 	b.w	1da0 <ull_conn_llcp+0x6d8>
			tx->next = conn->tx_head;
    2f70:	6001      	str	r1, [r0, #0]
			conn->tx_head = tx;
    2f72:	4605      	mov	r5, r0
				conn->tx_ctrl = tx;
    2f74:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    2f78:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    2f7c:	4601      	mov	r1, r0
    2f7e:	e7cd      	b.n	2f1c <ull_conn_llcp+0x1854>
			tx->next = conn->tx_head->next;
    2f80:	681a      	ldr	r2, [r3, #0]
    2f82:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2f84:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2f86:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2f88:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
    2f8c:	f7ff bbde 	b.w	274c <ull_conn_llcp+0x1084>
			tx->next = conn->tx_head->next;
    2f90:	681a      	ldr	r2, [r3, #0]
    2f92:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2f94:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    2f96:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
    2f9a:	f7ff b883 	b.w	20a4 <ull_conn_llcp+0x9dc>
			tx->next = conn->tx_head->next;
    2f9e:	6803      	ldr	r3, [r0, #0]
    2fa0:	6033      	str	r3, [r6, #0]
			conn->tx_head->next = tx;
    2fa2:	6006      	str	r6, [r0, #0]
	if (!tx->next) {
    2fa4:	6830      	ldr	r0, [r6, #0]
				conn->tx_ctrl_last = tx;
    2fa6:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
    2faa:	e4c0      	b.n	292e <ull_conn_llcp+0x1266>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2fac:	486b      	ldr	r0, [pc, #428]	; (315c <ull_conn_llcp+0x1a94>)
    2fae:	910b      	str	r1, [sp, #44]	; 0x2c
    2fb0:	f00c fa5a 	bl	f468 <mem_acquire>
		if (!tx) {
    2fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2fb6:	4602      	mov	r2, r0
    2fb8:	2800      	cmp	r0, #0
    2fba:	f43e af95 	beq.w	1ee8 <ull_conn_llcp+0x820>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2fbe:	7903      	ldrb	r3, [r0, #4]
    2fc0:	f043 0303 	orr.w	r3, r3, #3
    2fc4:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2fc6:	2311      	movs	r3, #17
    2fc8:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2fca:	2303      	movs	r3, #3
    2fcc:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2fce:	230f      	movs	r3, #15
    2fd0:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    2fd2:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
    2fd6:	7243      	strb	r3, [r0, #9]
	    conn->tx_head &&
    2fd8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	if (
    2fdc:	2b00      	cmp	r3, #0
    2fde:	f000 8107 	beq.w	31f0 <ull_conn_llcp+0x1b28>
	    !conn->llcp_enc.pause_tx &&
    2fe2:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
	    conn->tx_head &&
    2fe6:	0787      	lsls	r7, r0, #30
    2fe8:	f100 8102 	bmi.w	31f0 <ull_conn_llcp+0x1b28>
	    !conn->llcp_phy.pause_tx &&
    2fec:	f894 01af 	ldrb.w	r0, [r4, #431]	; 0x1af
    2ff0:	07c0      	lsls	r0, r0, #31
    2ff2:	f100 80fd 	bmi.w	31f0 <ull_conn_llcp+0x1b28>
		if (conn->tx_head == conn->tx_data) {
    2ff6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
    2ffa:	4283      	cmp	r3, r0
			conn->tx_data = conn->tx_data->next;
    2ffc:	bf04      	itt	eq
    2ffe:	6818      	ldreq	r0, [r3, #0]
    3000:	f8c4 01c0 	streq.w	r0, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    3004:	f8d4 01b8 	ldr.w	r0, [r4, #440]	; 0x1b8
    3008:	2800      	cmp	r0, #0
    300a:	f000 8149 	beq.w	32a0 <ull_conn_llcp+0x1bd8>
	tx->next = conn->tx_ctrl_last->next;
    300e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    3012:	6818      	ldr	r0, [r3, #0]
    3014:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    3016:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    3018:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	if (!tx->next) {
    301c:	6813      	ldr	r3, [r2, #0]
    301e:	2b00      	cmp	r3, #0
    3020:	f000 815a 	beq.w	32d8 <ull_conn_llcp+0x1c10>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3024:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
    3028:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
	conn_upd_curr = NULL;
    302c:	2300      	movs	r3, #0
    302e:	600b      	str	r3, [r1, #0]
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    3030:	f894 00ec 	ldrb.w	r0, [r4, #236]	; 0xec
    3034:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
}
    3038:	f7fe bb58 	b.w	16ec <ull_conn_llcp+0x24>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    303c:	4847      	ldr	r0, [pc, #284]	; (315c <ull_conn_llcp+0x1a94>)
    303e:	910b      	str	r1, [sp, #44]	; 0x2c
    3040:	f00c fa12 	bl	f468 <mem_acquire>
	if (!tx) {
    3044:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3046:	4603      	mov	r3, r0
    3048:	2800      	cmp	r0, #0
    304a:	f43e af4d 	beq.w	1ee8 <ull_conn_llcp+0x820>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    304e:	7902      	ldrb	r2, [r0, #4]
    3050:	f042 0203 	orr.w	r2, r2, #3
    3054:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    3056:	2218      	movs	r2, #24
    3058:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    305a:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
    305e:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    3060:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
    3064:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    3066:	f8b4 217c 	ldrh.w	r2, [r4, #380]	; 0x17c
    306a:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    306c:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    3070:	81c2      	strh	r2, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    3072:	2210      	movs	r2, #16
    3074:	71c2      	strb	r2, [r0, #7]
	rsp->preferred_periodicity =
    3076:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
    307a:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    307c:	f8b4 0182 	ldrh.w	r0, [r4, #386]	; 0x182
	    conn->tx_head &&
    3080:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
	rsp->reference_conn_event_count =
    3084:	f8a3 0011 	strh.w	r0, [r3, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    3088:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
    308c:	f8a3 0013 	strh.w	r0, [r3, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    3090:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
    3094:	f8a3 0015 	strh.w	r0, [r3, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    3098:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    309c:	f8a3 0017 	strh.w	r0, [r3, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    30a0:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
    30a4:	f8a3 0019 	strh.w	r0, [r3, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    30a8:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    30ac:	f8a3 001b 	strh.w	r0, [r3, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    30b0:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    30b4:	f8a3 001d 	strh.w	r0, [r3, #29]
	if (
    30b8:	2a00      	cmp	r2, #0
    30ba:	f000 80a4 	beq.w	3206 <ull_conn_llcp+0x1b3e>
	    !conn->llcp_enc.pause_tx &&
    30be:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
	    conn->tx_head &&
    30c2:	0787      	lsls	r7, r0, #30
    30c4:	f100 809f 	bmi.w	3206 <ull_conn_llcp+0x1b3e>
	    !conn->llcp_phy.pause_tx &&
    30c8:	f894 01af 	ldrb.w	r0, [r4, #431]	; 0x1af
    30cc:	07c0      	lsls	r0, r0, #31
    30ce:	f100 809a 	bmi.w	3206 <ull_conn_llcp+0x1b3e>
		if (conn->tx_head == conn->tx_data) {
    30d2:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
    30d6:	4282      	cmp	r2, r0
			conn->tx_data = conn->tx_data->next;
    30d8:	bf04      	itt	eq
    30da:	6810      	ldreq	r0, [r2, #0]
    30dc:	f8c4 01c0 	streq.w	r0, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
    30e0:	f8d4 01b8 	ldr.w	r0, [r4, #440]	; 0x1b8
    30e4:	2800      	cmp	r0, #0
    30e6:	f000 80ee 	beq.w	32c6 <ull_conn_llcp+0x1bfe>
	tx->next = conn->tx_ctrl_last->next;
    30ea:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    30ee:	6810      	ldr	r0, [r2, #0]
    30f0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last->next = tx;
    30f2:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
    30f4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	if (!tx->next) {
    30f8:	681a      	ldr	r2, [r3, #0]
    30fa:	2a00      	cmp	r2, #0
    30fc:	d192      	bne.n	3024 <ull_conn_llcp+0x195c>
		conn->tx_data_last = tx;
    30fe:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    3102:	e78f      	b.n	3024 <ull_conn_llcp+0x195c>
				LL_ASSERT(rx && rx->hdr.link);
    3104:	4a16      	ldr	r2, [pc, #88]	; (3160 <ull_conn_llcp+0x1a98>)
    3106:	4917      	ldr	r1, [pc, #92]	; (3164 <ull_conn_llcp+0x1a9c>)
    3108:	4817      	ldr	r0, [pc, #92]	; (3168 <ull_conn_llcp+0x1aa0>)
    310a:	f640 6337 	movw	r3, #3639	; 0xe37
    310e:	f01d fc66 	bl	209de <printk>
    3112:	4040      	eors	r0, r0
    3114:	f380 8811 	msr	BASEPRI, r0
    3118:	f04f 0003 	mov.w	r0, #3
    311c:	df02      	svc	2
    311e:	6828      	ldr	r0, [r5, #0]
    3120:	e527      	b.n	2b72 <ull_conn_llcp+0x14aa>
			tx->next = conn->tx_head->next;
    3122:	680a      	ldr	r2, [r1, #0]
    3124:	601a      	str	r2, [r3, #0]
			conn->tx_head->next = tx;
    3126:	461d      	mov	r5, r3
    3128:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl_last = tx;
    312a:	e9c4 336e 	strd	r3, r3, [r4, #440]	; 0x1b8
    312e:	e670      	b.n	2e12 <ull_conn_llcp+0x174a>
			tx->next = conn->tx_head->next;
    3130:	680b      	ldr	r3, [r1, #0]
    3132:	6033      	str	r3, [r6, #0]
			conn->tx_head->next = tx;
    3134:	600e      	str	r6, [r1, #0]
				conn->tx_ctrl_last = tx;
    3136:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
    313a:	e5c0      	b.n	2cbe <ull_conn_llcp+0x15f6>
		conn->tx_data_last = tx;
    313c:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
    3140:	f7ff b9fd 	b.w	253e <ull_conn_llcp+0xe76>
		if (!conn->tx_ctrl) {
    3144:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    3148:	2a00      	cmp	r2, #0
    314a:	f47f ace4 	bne.w	2b16 <ull_conn_llcp+0x144e>
			tx->next = conn->tx_head;
    314e:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
    3150:	e9c4 116d 	strd	r1, r1, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    3154:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
    3158:	e4e4      	b.n	2b24 <ull_conn_llcp+0x145c>
    315a:	bf00      	nop
    315c:	20002a78 	.word	0x20002a78
    3160:	000277f0 	.word	0x000277f0
    3164:	000278d0 	.word	0x000278d0
    3168:	000272c0 	.word	0x000272c0
		conn->llcp_phy.ack = conn->llcp_phy.req;
    316c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
		if (conn->llcp_phy.tx & BIT(1)) {
    3170:	f3c1 0282 	ubfx	r2, r1, #2, #3
    3174:	0709      	lsls	r1, r1, #28
    3176:	d559      	bpl.n	322c <ull_conn_llcp+0x1b64>
			conn->llcp_phy.tx = BIT(1);
    3178:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
    317c:	2102      	movs	r1, #2
    317e:	f361 0284 	bfi	r2, r1, #2, #3
    3182:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
		if (conn->llcp_phy.rx & BIT(1)) {
    3186:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
    318a:	0650      	lsls	r0, r2, #25
    318c:	ea4f 1152 	mov.w	r1, r2, lsr #5
    3190:	d544      	bpl.n	321c <ull_conn_llcp+0x1b54>
			conn->llcp_phy.rx = BIT(1);
    3192:	2102      	movs	r1, #2
    3194:	f361 1247 	bfi	r2, r1, #5, #3
    3198:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
		conn->llcp_ack -= 2U;
    319c:	3b02      	subs	r3, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    319e:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
    31a2:	f894 7068 	ldrb.w	r7, [r4, #104]	; 0x68
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    31a6:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
		conn->llcp_ack -= 2U;
    31aa:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    31ae:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    31b2:	f3c2 0182 	ubfx	r1, r2, #2, #3
    31b6:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    31ba:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    31be:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    31c2:	428f      	cmp	r7, r1
    31c4:	bf08      	it	eq
    31c6:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    31c8:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    31ca:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    31ce:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    31d2:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    31d6:	bf08      	it	eq
    31d8:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    31da:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    31de:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    31e2:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
    31e4:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
		conn->llcp_type = LLCP_PHY_UPD;
    31e8:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    31ec:	f7fe ba9a 	b.w	1724 <ull_conn_llcp+0x5c>
		if (!conn->tx_ctrl) {
    31f0:	f8d4 01b8 	ldr.w	r0, [r4, #440]	; 0x1b8
    31f4:	2800      	cmp	r0, #0
    31f6:	f47f af0a 	bne.w	300e <ull_conn_llcp+0x1946>
			tx->next = conn->tx_head;
    31fa:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    31fc:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    3200:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
    3204:	e70a      	b.n	301c <ull_conn_llcp+0x1954>
		if (!conn->tx_ctrl) {
    3206:	f8d4 01b8 	ldr.w	r0, [r4, #440]	; 0x1b8
    320a:	2800      	cmp	r0, #0
    320c:	f47f af6d 	bne.w	30ea <ull_conn_llcp+0x1a22>
			tx->next = conn->tx_head;
    3210:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
    3212:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
    3216:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
    321a:	e76d      	b.n	30f8 <ull_conn_llcp+0x1a30>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    321c:	07cf      	lsls	r7, r1, #31
    321e:	d50f      	bpl.n	3240 <ull_conn_llcp+0x1b78>
			conn->llcp_phy.rx = BIT(0);
    3220:	2101      	movs	r1, #1
    3222:	f361 1247 	bfi	r2, r1, #5, #3
    3226:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
    322a:	e7b7      	b.n	319c <ull_conn_llcp+0x1ad4>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    322c:	07d7      	lsls	r7, r2, #31
    322e:	d510      	bpl.n	3252 <ull_conn_llcp+0x1b8a>
			conn->llcp_phy.tx = BIT(0);
    3230:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
    3234:	2101      	movs	r1, #1
    3236:	f361 0284 	bfi	r2, r1, #2, #3
    323a:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
    323e:	e7a2      	b.n	3186 <ull_conn_llcp+0x1abe>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    3240:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    3244:	bf18      	it	ne
    3246:	2104      	movne	r1, #4
			conn->llcp_phy.rx = 0U;
    3248:	f361 1247 	bfi	r2, r1, #5, #3
    324c:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
    3250:	e7a4      	b.n	319c <ull_conn_llcp+0x1ad4>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    3252:	f012 0204 	ands.w	r2, r2, #4
    3256:	d02f      	beq.n	32b8 <ull_conn_llcp+0x1bf0>
			conn->llcp_phy.tx = BIT(2);
    3258:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
    325c:	2104      	movs	r1, #4
    325e:	f361 0284 	bfi	r2, r1, #2, #3
    3262:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
    3266:	e78e      	b.n	3186 <ull_conn_llcp+0x1abe>
			tx->next = conn->tx_head->next;
    3268:	681a      	ldr	r2, [r3, #0]
    326a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    326c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    326e:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
    3272:	e4f4      	b.n	2c5e <ull_conn_llcp+0x1596>
				conn->llcp_conn_param.interval_max;
    3274:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    3278:	f7ff b8d0 	b.w	241c <ull_conn_llcp+0xd54>
			tx->next = conn->tx_head->next;
    327c:	680a      	ldr	r2, [r1, #0]
    327e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    3280:	4605      	mov	r5, r0
    3282:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl_last = tx;
    3284:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
    3288:	e648      	b.n	2f1c <ull_conn_llcp+0x1854>
		if (!conn->tx_ctrl) {
    328a:	e9d4 0c6d 	ldrd	r0, ip, [r4, #436]	; 0x1b4
    328e:	f7ff bb2e 	b.w	28ee <ull_conn_llcp+0x1226>
			tx->next = conn->tx_head->next;
    3292:	6803      	ldr	r3, [r0, #0]
    3294:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
    3296:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    3298:	e9c4 226e 	strd	r2, r2, [r4, #440]	; 0x1b8
    329c:	f7ff b94b 	b.w	2536 <ull_conn_llcp+0xe6e>
			tx->next = conn->tx_head->next;
    32a0:	6818      	ldr	r0, [r3, #0]
    32a2:	6010      	str	r0, [r2, #0]
			conn->tx_head->next = tx;
    32a4:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
    32a6:	e9c4 226e 	strd	r2, r2, [r4, #440]	; 0x1b8
    32aa:	e6b7      	b.n	301c <ull_conn_llcp+0x1954>
			tx->next = conn->tx_head->next;
    32ac:	681a      	ldr	r2, [r3, #0]
    32ae:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
    32b0:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
    32b2:	e9c4 116e 	strd	r1, r1, [r4, #440]	; 0x1b8
    32b6:	e435      	b.n	2b24 <ull_conn_llcp+0x145c>
			conn->llcp_phy.tx = 0U;
    32b8:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
    32bc:	f362 0184 	bfi	r1, r2, #2, #3
    32c0:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
    32c4:	e75f      	b.n	3186 <ull_conn_llcp+0x1abe>
			tx->next = conn->tx_head->next;
    32c6:	6810      	ldr	r0, [r2, #0]
    32c8:	6018      	str	r0, [r3, #0]
			conn->tx_head->next = tx;
    32ca:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
    32cc:	e9c4 336e 	strd	r3, r3, [r4, #440]	; 0x1b8
    32d0:	e712      	b.n	30f8 <ull_conn_llcp+0x1a30>
    32d2:	e9d4 156d 	ldrd	r1, r5, [r4, #436]	; 0x1b4
    32d6:	e4d8      	b.n	2c8a <ull_conn_llcp+0x15c2>
		conn->tx_data_last = tx;
    32d8:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    32dc:	e6a2      	b.n	3024 <ull_conn_llcp+0x195c>
		LL_ASSERT(0);
    32de:	4a03      	ldr	r2, [pc, #12]	; (32ec <ull_conn_llcp+0x1c24>)
    32e0:	4903      	ldr	r1, [pc, #12]	; (32f0 <ull_conn_llcp+0x1c28>)
    32e2:	f640 4324 	movw	r3, #3108	; 0xc24
    32e6:	f7ff b950 	b.w	258a <ull_conn_llcp+0xec2>
    32ea:	bf00      	nop
    32ec:	000277f0 	.word	0x000277f0
    32f0:	00027358 	.word	0x00027358
    32f4:	00000000 	.word	0x00000000

000032f8 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param);
static void ticker_op_cb(uint32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    32f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32fc:	461d      	mov	r5, r3
	uint16_t win_offset;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    32fe:	6813      	ldr	r3, [r2, #0]
{
    3300:	b093      	sub	sp, #76	; 0x4c
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    3302:	681b      	ldr	r3, [r3, #0]
    3304:	930b      	str	r3, [sp, #44]	; 0x2c
{
    3306:	460c      	mov	r4, r1
	conn = lll->hdr.parent;
    3308:	462b      	mov	r3, r5
    330a:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
    330c:	f853 9b0c 	ldr.w	r9, [r3], #12
{
    3310:	4692      	mov	sl, r2
    3312:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    3316:	81a9      	strh	r1, [r5, #12]
    3318:	709a      	strb	r2, [r3, #2]
    331a:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
    331e:	60ab      	str	r3, [r5, #8]
    3320:	f8d4 303a 	ldr.w	r3, [r4, #58]	; 0x3a
    3324:	61eb      	str	r3, [r5, #28]
    3326:	4607      	mov	r7, r0

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    3328:	f105 001c 	add.w	r0, r5, #28
    332c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    3330:	7103      	strb	r3, [r0, #4]
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    3332:	2105      	movs	r1, #5
    3334:	f00c fa64 	bl	f800 <util_ones_count_get>
    3338:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    333c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    3340:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    3344:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    3346:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    334a:	d90a      	bls.n	3362 <ull_slave_setup+0x6a>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    334c:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    3350:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    3354:	3b05      	subs	r3, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    3356:	f3c2 0104 	ubfx	r1, r2, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    335a:	2b0b      	cmp	r3, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    335c:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    3360:	d902      	bls.n	3368 <ull_slave_setup+0x70>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    3362:	b013      	add	sp, #76	; 0x4c
    3364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    3368:	f8da 3000 	ldr.w	r3, [sl]
    336c:	2100      	movs	r1, #0
    336e:	6099      	str	r1, [r3, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    3370:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
	lll->interval = interval;
    3372:	826e      	strh	r6, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    3374:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
    3378:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    337c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3380:	82ab      	strh	r3, [r5, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    3382:	f899 30e0 	ldrb.w	r3, [r9, #224]	; 0xe0
    3386:	0952      	lsrs	r2, r2, #5
    3388:	f362 0384 	bfi	r3, r2, #2, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    338c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    338e:	f889 30e0 	strb.w	r3, [r9, #224]	; 0xe0
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    3392:	920c      	str	r2, [sp, #48]	; 0x30
		(((lll_conn_ppm_local_get() +
    3394:	f018 fc38 	bl	1bc08 <lll_conn_ppm_local_get>
    3398:	4680      	mov	r8, r0
		   lll_conn_ppm_get(conn->slave.sca)) *
    339a:	f899 00e0 	ldrb.w	r0, [r9, #224]	; 0xe0
    339e:	f3c0 0082 	ubfx	r0, r0, #2, #3
    33a2:	f018 fc33 	bl	1bc0c <lll_conn_ppm_get>
	conn_interval_us = interval * 1250U;
    33a6:	f240 4be2 	movw	fp, #1250	; 0x4e2
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    33aa:	b2b6      	uxth	r6, r6
	conn_interval_us = interval * 1250U;
    33ac:	fb0b f606 	mul.w	r6, fp, r6
		(((lll_conn_ppm_local_get() +
    33b0:	4440      	add	r0, r8
		   lll_conn_ppm_get(conn->slave.sca)) *
    33b2:	fb06 f000 	mul.w	r0, r6, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    33b6:	4bbe      	ldr	r3, [pc, #760]	; (36b0 <ull_slave_setup+0x3b8>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    33b8:	4abe      	ldr	r2, [pc, #760]	; (36b4 <ull_slave_setup+0x3bc>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    33ba:	8aa9      	ldrh	r1, [r5, #20]
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    33bc:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    33c0:	f200 203f 	addw	r0, r0, #575	; 0x23f
    33c4:	fba3 3000 	umull	r3, r0, r3, r0
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    33c8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    33cc:	fb0b f303 	mul.w	r3, fp, r3
    33d0:	642b      	str	r3, [r5, #64]	; 0x40
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    33d2:	0873      	lsrs	r3, r6, #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    33d4:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    33d6:	3b96      	subs	r3, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    33d8:	62e8      	str	r0, [r5, #44]	; 0x2c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    33da:	632b      	str	r3, [r5, #48]	; 0x30
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    33dc:	f8b4 b038 	ldrh.w	fp, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    33e0:	4bb5      	ldr	r3, [pc, #724]	; (36b8 <ull_slave_setup+0x3c0>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    33e2:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    33e6:	4432      	add	r2, r6
    33e8:	fbb2 f2f6 	udiv	r2, r2, r6
    33ec:	f8a9 20ce 	strh.w	r2, [r9, #206]	; 0xce
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    33f0:	fa1f f28b 	uxth.w	r2, fp
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    33f4:	fb00 6202 	mla	r2, r0, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    33f8:	4433      	add	r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    33fa:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    33fc:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    33fe:	fbb2 f2f6 	udiv	r2, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    3402:	fbb3 f3f6 	udiv	r3, r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    3406:	f8a9 20ca 	strh.w	r2, [r9, #202]	; 0xca
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    340a:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    340c:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    340e:	f8a9 20d6 	strh.w	r2, [r9, #214]	; 0xd6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    3412:	dd02      	ble.n	341a <ull_slave_setup+0x122>
			     (conn->apto_reload - (lll->latency + 6)) :
    3414:	1a52      	subs	r2, r2, r1
    3416:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    3418:	b292      	uxth	r2, r2
    341a:	f8a9 20d2 	strh.w	r2, [r9, #210]	; 0xd2
    341e:	68ab      	ldr	r3, [r5, #8]
    3420:	f8c9 30e4 	str.w	r3, [r9, #228]	; 0xe4
	cc->status = 0U;
    3424:	f44f 7380 	mov.w	r3, #256	; 0x100
	peer_addr_type = pdu_adv->tx_addr;
    3428:	f894 801c 	ldrb.w	r8, [r4, #28]
	cc->status = 0U;
    342c:	83a3      	strh	r3, [r4, #28]
    342e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    3430:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    3434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3436:	f8d4 001e 	ldr.w	r0, [r4, #30]
    343a:	9010      	str	r0, [sp, #64]	; 0x40
    343c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    3440:	f89a 3012 	ldrb.w	r3, [sl, #18]
    3444:	930d      	str	r3, [sp, #52]	; 0x34
	peer_addr_type = pdu_adv->tx_addr;
    3446:	f3c8 1380 	ubfx	r3, r8, #6, #1
    344a:	930e      	str	r3, [sp, #56]	; 0x38
	chan_sel = pdu_adv->chan_sel;
    344c:	f3c8 1340 	ubfx	r3, r8, #5, #1
    3450:	930f      	str	r3, [sp, #60]	; 0x3c
    3452:	4698      	mov	r8, r3
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    3454:	f016 f9c8 	bl	197e8 <ull_filter_lll_lrpa_used>
    3458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    345a:	f104 011e 	add.w	r1, r4, #30
    345e:	2800      	cmp	r0, #0
    3460:	f040 80e9 	bne.w	3636 <ull_slave_setup+0x33e>
	if (rl_idx != FILTER_IDX_NONE) {
    3464:	2bff      	cmp	r3, #255	; 0xff
__ssp_bos_icheck3(memset, void *, int)
    3466:	f8c4 002b 	str.w	r0, [r4, #43]	; 0x2b
    346a:	f8a4 002f 	strh.w	r0, [r4, #47]	; 0x2f
    346e:	f000 80eb 	beq.w	3648 <ull_slave_setup+0x350>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3472:	4618      	mov	r0, r3
    3474:	f104 021f 	add.w	r2, r4, #31
    3478:	f015 fb98 	bl	18bac <ll_rl_id_addr_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    347c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    3480:	f8a4 3029 	strh.w	r3, [r4, #41]	; 0x29
		cc->peer_addr_type += 2;
    3484:	7fa3      	ldrb	r3, [r4, #30]
    3486:	9810      	ldr	r0, [sp, #64]	; 0x40
    3488:	f8c4 0025 	str.w	r0, [r4, #37]	; 0x25
    348c:	3302      	adds	r3, #2
    348e:	77a3      	strb	r3, [r4, #30]
	cc->sca = conn->slave.sca;
    3490:	f899 30e0 	ldrb.w	r3, [r9, #224]	; 0xe0
	cc->interval = lll->interval;
    3494:	8a6a      	ldrh	r2, [r5, #18]
    3496:	8662      	strh	r2, [r4, #50]	; 0x32
	cc->sca = conn->slave.sca;
    3498:	f3c3 0382 	ubfx	r3, r3, #2, #3
	cc->latency = lll->latency;
    349c:	8aaa      	ldrh	r2, [r5, #20]
    349e:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->slave.sca;
    34a0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
    34a4:	f8a4 b036 	strh.w	fp, [r4, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    34a8:	4648      	mov	r0, r9
    34aa:	f011 ff2b 	bl	15304 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    34ae:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    34b0:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    34b2:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    34b4:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
    34b8:	4638      	mov	r0, r7
    34ba:	f010 fb07 	bl	13acc <ll_rx_put>
		rx->handle = lll->handle;
    34be:	8a2b      	ldrh	r3, [r5, #16]
    34c0:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    34c2:	230f      	movs	r3, #15
		link = rx->link;
    34c4:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    34c6:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    34c8:	f1b8 0f00 	cmp.w	r8, #0
    34cc:	f000 80cc 	beq.w	3668 <ull_slave_setup+0x370>
			lll->data_chan_sel = 1;
    34d0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    34d4:	896a      	ldrh	r2, [r5, #10]
    34d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    34da:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    34de:	892b      	ldrh	r3, [r5, #8]
			lll->data_chan_id = aa_ms ^ aa_ls;
    34e0:	4053      	eors	r3, r2
    34e2:	846b      	strh	r3, [r5, #34]	; 0x22
			cs->csa = 0x01;
    34e4:	2301      	movs	r3, #1
    34e6:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    34e8:	4621      	mov	r1, r4
    34ea:	f010 faef 	bl	13acc <ll_rx_put>
	ll_rx_sched();
    34ee:	f010 faf7 	bl	13ae0 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    34f2:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    34f6:	2101      	movs	r1, #1
    34f8:	f000 0007 	and.w	r0, r0, #7
    34fc:	f017 fa9c 	bl	1aa38 <lll_radio_rx_ready_delay_get>
    3500:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3502:	486e      	ldr	r0, [pc, #440]	; (36bc <ull_slave_setup+0x3c4>)
	conn->evt.ticks_active_to_start = 0U;
    3504:	2700      	movs	r7, #0
	conn->evt.ticks_xtal_to_start =
    3506:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3508:	f20b 4152 	addw	r1, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    350c:	f8c9 3000 	str.w	r3, [r9]
	conn->evt.ticks_preempt_to_start =
    3510:	e9c9 7701 	strd	r7, r7, [r9, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3514:	a364      	add	r3, pc, #400	; (adr r3, 36a8 <ull_slave_setup+0x3b0>)
    3516:	e9d3 2300 	ldrd	r2, r3, [r3]
    351a:	fba1 0100 	umull	r0, r1, r1, r0
    351e:	f7fd f913 	bl	748 <__aeabi_uldivmod>
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    3522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3524:	1c59      	adds	r1, r3, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    3526:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    3528:	1af6      	subs	r6, r6, r3
    352a:	f8da 300c 	ldr.w	r3, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    352e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3532:	f5a3 74ae 	sub.w	r4, r3, #348	; 0x15c
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    3536:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= EVENT_JITTER_US;
    353a:	fb03 4401 	mla	r4, r3, r1, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    353e:	463a      	mov	r2, r7
    3540:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    3542:	f8c9 000c 	str.w	r0, [r9, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3546:	2001      	movs	r0, #1
    3548:	f00c f830 	bl	f5ac <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    354c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    354e:	4628      	mov	r0, r5
    3550:	f011 f802 	bl	14558 <ull_adv_handle_get>
    3554:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    3556:	4b5a      	ldr	r3, [pc, #360]	; (36c0 <ull_slave_setup+0x3c8>)
    3558:	9500      	str	r5, [sp, #0]
    355a:	b2d2      	uxtb	r2, r2
    355c:	4638      	mov	r0, r7
    355e:	2101      	movs	r1, #1
    3560:	f00d fb6c 	bl	10c3c <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    3564:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    3566:	eba4 040b 	sub.w	r4, r4, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    356a:	f000 8089 	beq.w	3680 <ull_slave_setup+0x388>
	if (adv->lll.is_hdcd) {
    356e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    3574:	07db      	lsls	r3, r3, #31
    3576:	d47b      	bmi.n	3670 <ull_slave_setup+0x378>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3578:	4648      	mov	r0, r9
    357a:	f011 fec3 	bl	15304 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    357e:	4b4f      	ldr	r3, [pc, #316]	; (36bc <ull_slave_setup+0x3c4>)
    3580:	fba6 8603 	umull	r8, r6, r6, r3
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3584:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3586:	a348      	add	r3, pc, #288	; (adr r3, 36a8 <ull_slave_setup+0x3b0>)
    3588:	e9d3 2300 	ldrd	r2, r3, [r3]
    358c:	4640      	mov	r0, r8
    358e:	4631      	mov	r1, r6
    3590:	f7fd f8da 	bl	748 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3594:	f8da 3008 	ldr.w	r3, [sl, #8]
    3598:	f8cd 9018 	str.w	r9, [sp, #24]
    359c:	f1a3 0a31 	sub.w	sl, r3, #49	; 0x31
    35a0:	4b48      	ldr	r3, [pc, #288]	; (36c4 <ull_slave_setup+0x3cc>)
    35a2:	9307      	str	r3, [sp, #28]
    35a4:	4b48      	ldr	r3, [pc, #288]	; (36c8 <ull_slave_setup+0x3d0>)
    35a6:	9305      	str	r3, [sp, #20]
    35a8:	f240 133d 	movw	r3, #317	; 0x13d
    35ac:	9308      	str	r3, [sp, #32]
    35ae:	f8d9 300c 	ldr.w	r3, [r9, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    35b2:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    35b6:	4845      	ldr	r0, [pc, #276]	; (36cc <ull_slave_setup+0x3d4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    35b8:	f04f 0b00 	mov.w	fp, #0
    35bc:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    35c0:	fba7 0100 	umull	r0, r1, r7, r0
    35c4:	2307      	movs	r3, #7
    35c6:	ebb8 0000 	subs.w	r0, r8, r0
    35ca:	fb03 1107 	mla	r1, r3, r7, r1
    35ce:	eb66 0101 	sbc.w	r1, r6, r1
    35d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    35d6:	2300      	movs	r3, #0
    35d8:	f7fd f8b6 	bl	748 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    35dc:	4b37      	ldr	r3, [pc, #220]	; (36bc <ull_slave_setup+0x3c4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    35de:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    35e2:	fba4 0103 	umull	r0, r1, r4, r3
    35e6:	a330      	add	r3, pc, #192	; (adr r3, 36a8 <ull_slave_setup+0x3b0>)
    35e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    35ec:	f7fd f8ac 	bl	748 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    35f0:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    35f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35f6:	b2ed      	uxtb	r5, r5
    35f8:	9000      	str	r0, [sp, #0]
    35fa:	4653      	mov	r3, sl
    35fc:	462a      	mov	r2, r5
    35fe:	2101      	movs	r1, #1
    3600:	4658      	mov	r0, fp
    3602:	f00d faad 	bl	10b60 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3606:	f030 0302 	bics.w	r3, r0, #2
    360a:	d00c      	beq.n	3626 <ull_slave_setup+0x32e>
    360c:	4a30      	ldr	r2, [pc, #192]	; (36d0 <ull_slave_setup+0x3d8>)
    360e:	4931      	ldr	r1, [pc, #196]	; (36d4 <ull_slave_setup+0x3dc>)
    3610:	4831      	ldr	r0, [pc, #196]	; (36d8 <ull_slave_setup+0x3e0>)
    3612:	f44f 739f 	mov.w	r3, #318	; 0x13e
    3616:	f01d f9e2 	bl	209de <printk>
    361a:	4040      	eors	r0, r0
    361c:	f380 8811 	msr	BASEPRI, r0
    3620:	f04f 0003 	mov.w	r0, #3
    3624:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3626:	2201      	movs	r2, #1
    3628:	2102      	movs	r1, #2
    362a:	4610      	mov	r0, r2
}
    362c:	b013      	add	sp, #76	; 0x4c
    362e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3632:	f00b bfbb 	b.w	f5ac <mayfly_enable>
    3636:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3638:	f8c4 202b 	str.w	r2, [r4, #43]	; 0x2b
	if (rl_idx != FILTER_IDX_NONE) {
    363c:	2bff      	cmp	r3, #255	; 0xff
    363e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    3640:	f8a4 202f 	strh.w	r2, [r4, #47]	; 0x2f
    3644:	f47f af15 	bne.w	3472 <ull_slave_setup+0x17a>
__ssp_bos_icheck3(memset, void *, int)
    3648:	2200      	movs	r2, #0
    364a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
		cc->peer_addr_type = peer_addr_type;
    364e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3652:	9810      	ldr	r0, [sp, #64]	; 0x40
    3654:	f8c4 2025 	str.w	r2, [r4, #37]	; 0x25
    3658:	f8a4 2029 	strh.w	r2, [r4, #41]	; 0x29
    365c:	77a3      	strb	r3, [r4, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    365e:	f8a4 1023 	strh.w	r1, [r4, #35]	; 0x23
    3662:	f8c4 001f 	str.w	r0, [r4, #31]
    3666:	e713      	b.n	3490 <ull_slave_setup+0x198>
			cs->csa = 0x00;
    3668:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    366c:	7723      	strb	r3, [r4, #28]
    366e:	e73b      	b.n	34e8 <ull_slave_setup+0x1f0>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3670:	2300      	movs	r3, #0
    3672:	2201      	movs	r2, #1
    3674:	9300      	str	r3, [sp, #0]
    3676:	4618      	mov	r0, r3
    3678:	4611      	mov	r1, r2
    367a:	f00d fadf 	bl	10c3c <ticker_stop>
    367e:	e77b      	b.n	3578 <ull_slave_setup+0x280>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    3680:	f010 fac6 	bl	13c10 <ull_disable_mark_get>
    3684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3686:	4283      	cmp	r3, r0
    3688:	f43f af71 	beq.w	356e <ull_slave_setup+0x276>
    368c:	4a10      	ldr	r2, [pc, #64]	; (36d0 <ull_slave_setup+0x3d8>)
    368e:	4913      	ldr	r1, [pc, #76]	; (36dc <ull_slave_setup+0x3e4>)
    3690:	4811      	ldr	r0, [pc, #68]	; (36d8 <ull_slave_setup+0x3e0>)
    3692:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
    3696:	f01d f9a2 	bl	209de <printk>
    369a:	4040      	eors	r0, r0
    369c:	f380 8811 	msr	BASEPRI, r0
    36a0:	f04f 0003 	mov.w	r0, #3
    36a4:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    36a6:	e762      	b.n	356e <ull_slave_setup+0x276>
    36a8:	1afd498d 	.word	0x1afd498d
    36ac:	00000007 	.word	0x00000007
    36b0:	431bde83 	.word	0x431bde83
    36b4:	026259ff 	.word	0x026259ff
    36b8:	01c9c37f 	.word	0x01c9c37f
    36bc:	3b9aca00 	.word	0x3b9aca00
    36c0:	00017dfd 	.word	0x00017dfd
    36c4:	00017dcd 	.word	0x00017dcd
    36c8:	00017e39 	.word	0x00017e39
    36cc:	1afd498d 	.word	0x1afd498d
    36d0:	00027a28 	.word	0x00027a28
    36d4:	000278e4 	.word	0x000278e4
    36d8:	000272c0 	.word	0x000272c0
    36dc:	00027a6c 	.word	0x00027a6c

000036e0 <ull_slave_done>:
{
    36e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	preamble_to_addr_us =
    36e4:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    36e8:	6a86      	ldr	r6, [r0, #40]	; 0x28
				       window_widening_event_us +
    36ea:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    36ec:	3430      	adds	r4, #48	; 0x30
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    36ee:	42a6      	cmp	r6, r4
{
    36f0:	4688      	mov	r8, r1
    36f2:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    36f4:	d818      	bhi.n	3728 <ull_slave_done+0x48>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    36f6:	4d1c      	ldr	r5, [pc, #112]	; (3768 <ull_slave_done+0x88>)
    36f8:	fba3 0105 	umull	r0, r1, r3, r5
    36fc:	a318      	add	r3, pc, #96	; (adr r3, 3760 <ull_slave_done+0x80>)
    36fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    3702:	f7fd f821 	bl	748 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    3706:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    3708:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    370c:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    3710:	a313      	add	r3, pc, #76	; (adr r3, 3760 <ull_slave_done+0x80>)
    3712:	e9d3 2300 	ldrd	r2, r3, [r3]
    3716:	fba4 0105 	umull	r0, r1, r4, r5
    371a:	f7fd f815 	bl	748 <__aeabi_uldivmod>
    371e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    3722:	6038      	str	r0, [r7, #0]
}
    3724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    3728:	4c0f      	ldr	r4, [pc, #60]	; (3768 <ull_slave_done+0x88>)
    372a:	a30d      	add	r3, pc, #52	; (adr r3, 3760 <ull_slave_done+0x80>)
    372c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3730:	fba6 0104 	umull	r0, r1, r6, r4
    3734:	f7fd f808 	bl	748 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    3738:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    373c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    3740:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    3744:	a306      	add	r3, pc, #24	; (adr r3, 3760 <ull_slave_done+0x80>)
    3746:	e9d3 2300 	ldrd	r2, r3, [r3]
    374a:	fba1 0104 	umull	r0, r1, r1, r4
    374e:	f7fc fffb 	bl	748 <__aeabi_uldivmod>
    3752:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    3756:	6038      	str	r0, [r7, #0]
}
    3758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    375c:	f3af 8000 	nop.w
    3760:	1afd498d 	.word	0x1afd498d
    3764:	00000007 	.word	0x00000007
    3768:	3b9aca00 	.word	0x3b9aca00
    376c:	00000000 	.word	0x00000000

00003770 <ull_master_setup>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

void ull_master_setup(memq_link_t *link, struct node_rx_hdr *rx,
		      struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    3770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3774:	4617      	mov	r7, r2
    3776:	461d      	mov	r5, r3
	uint32_t ready_delay_us;
	uint8_t peer_addr_type;
	uint32_t ticker_status;
	uint8_t chan_sel;

	((struct lll_scan *)ftr->param)->conn = NULL;
    3778:	6812      	ldr	r2, [r2, #0]
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;

	pdu_tx = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_tx->rx_addr;
    377a:	f891 801c 	ldrb.w	r8, [r1, #28]
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
    377e:	f8d2 9000 	ldr.w	r9, [r2]
	conn = lll->hdr.parent;
    3782:	682e      	ldr	r6, [r5, #0]
	((struct lll_scan *)ftr->param)->conn = NULL;
    3784:	2300      	movs	r3, #0
    3786:	6093      	str	r3, [r2, #8]

	/* This is the chan sel bit from the received adv pdu */
	chan_sel = pdu_tx->chan_sel;

	cc = (void *)pdu_tx;
	cc->status = 0U;
    3788:	838b      	strh	r3, [r1, #28]
	cc->role = 0U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;

	if (ftr->lrpa_used) {
    378a:	7c7b      	ldrb	r3, [r7, #17]
    378c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
{
    378e:	b08d      	sub	sp, #52	; 0x34
    3790:	4683      	mov	fp, r0
    3792:	6a48      	ldr	r0, [r1, #36]	; 0x24
    3794:	900a      	str	r0, [sp, #40]	; 0x28
	if (ftr->lrpa_used) {
    3796:	f013 0301 	ands.w	r3, r3, #1
	uint8_t rl_idx = ftr->rl_idx;
    379a:	7cb8      	ldrb	r0, [r7, #18]
    379c:	bf1c      	itt	ne
    379e:	f8d1 301e 	ldrne.w	r3, [r1, #30]
    37a2:	f8c1 302b 	strne.w	r3, [r1, #43]	; 0x2b
	chan_sel = pdu_tx->chan_sel;
    37a6:	f3c8 1a40 	ubfx	sl, r8, #5, #1
    37aa:	bf14      	ite	ne
    37ac:	8c4b      	ldrhne	r3, [r1, #34]	; 0x22
__ssp_bos_icheck3(memset, void *, int)
    37ae:	f8c1 302b 	streq.w	r3, [r1, #43]	; 0x2b
		       BDADDR_SIZE);
	} else {
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
	}

	if (rl_idx != FILTER_IDX_NONE) {
    37b2:	28ff      	cmp	r0, #255	; 0xff
    37b4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
{
    37b8:	460c      	mov	r4, r1
	peer_addr_type = pdu_tx->rx_addr;
    37ba:	f3c8 12c0 	ubfx	r2, r8, #7, #1
    37be:	f8a1 302f 	strh.w	r3, [r1, #47]	; 0x2f
	chan_sel = pdu_tx->chan_sel;
    37c2:	46d0      	mov	r8, sl
	if (rl_idx != FILTER_IDX_NONE) {
    37c4:	f040 80d5 	bne.w	3972 <ull_master_setup+0x202>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    37c8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    37cc:	f8a4 0023 	strh.w	r0, [r4, #35]	; 0x23
__ssp_bos_icheck3(memset, void *, int)
    37d0:	2100      	movs	r1, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    37d2:	980a      	ldr	r0, [sp, #40]	; 0x28
__ssp_bos_icheck3(memset, void *, int)
    37d4:	f8c4 1025 	str.w	r1, [r4, #37]	; 0x25
    37d8:	f8a4 1029 	strh.w	r1, [r4, #41]	; 0x29
	} else {
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
    37dc:	77a2      	strb	r2, [r4, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    37de:	f8c4 001f 	str.w	r0, [r4, #31]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
	}

	cc->interval = lll->interval;
    37e2:	8a6b      	ldrh	r3, [r5, #18]
    37e4:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    37e6:	8aab      	ldrh	r3, [r5, #20]
    37e8:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    37ea:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
    37ee:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_conn_sca_local_get();
    37f0:	f018 fa08 	bl	1bc04 <lll_conn_sca_local_get>
    37f4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

	lll->handle = ll_conn_handle_get(conn);
    37f8:	4630      	mov	r0, r6
    37fa:	f011 fd83 	bl	15304 <ll_conn_handle_get>
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    37fe:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    3800:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    3802:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    3804:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    3806:	4658      	mov	r0, fp
    3808:	f010 f960 	bl	13acc <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    380c:	8a28      	ldrh	r0, [r5, #16]
		link = rx->link;
    380e:	f8d4 b000 	ldr.w	fp, [r4]
		rx->handle = lll->handle;
    3812:	80e0      	strh	r0, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3814:	230f      	movs	r3, #15
    3816:	7123      	strb	r3, [r4, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    3818:	f1b8 0f00 	cmp.w	r8, #0
    381c:	f000 80a6 	beq.w	396c <ull_master_setup+0x1fc>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
				      lll->access_addr[0];
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
				      lll->access_addr[2];

			lll->data_chan_sel = 1;
    3820:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    3824:	896a      	ldrh	r2, [r5, #10]
    3826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    382a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    382e:	892b      	ldrh	r3, [r5, #8]
			lll->data_chan_id = aa_ms ^ aa_ls;
    3830:	4053      	eors	r3, r2
    3832:	846b      	strh	r3, [r5, #34]	; 0x22

			cs->csa = 0x01;
    3834:	2301      	movs	r3, #1
    3836:	7723      	strb	r3, [r4, #28]
			cs->csa = 0x00;
		}
	}
	
#if defined(CONFIG_BT_AFH)
	ull_afh_conn_init(lll->handle);
    3838:	f016 f9b8 	bl	19bac <ull_afh_conn_init>
#endif

	ll_rx_put(link, rx);
    383c:	4621      	mov	r1, r4
    383e:	4658      	mov	r0, fp
    3840:	f010 f944 	bl	13acc <ll_rx_put>
	ll_rx_sched();
    3844:	f010 f94c 	bl	13ae0 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
						      lll->phy_flags);
    3848:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    384c:	f8df a150 	ldr.w	sl, [pc, #336]	; 39a0 <ull_master_setup+0x230>
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    3850:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    3854:	f000 0007 	and.w	r0, r0, #7
    3858:	f017 f8ec 	bl	1aa34 <lll_radio_tx_ready_delay_get>
	conn->evt.ticks_active_to_start = 0U;
    385c:	2400      	movs	r4, #0
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    385e:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    3860:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3862:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    3866:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    3868:	e9c6 4401 	strd	r4, r4, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    386c:	a34a      	add	r3, pc, #296	; (adr r3, 3998 <ull_master_setup+0x228>)
    386e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3872:	fba0 010a 	umull	r0, r1, r0, sl
    3876:	f7fc ff67 	bl	748 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us = lll->interval * 1250;
    387a:	f8b5 8012 	ldrh.w	r8, [r5, #18]
	conn_offset_us = ftr->radio_end_us;
    387e:	68fd      	ldr	r5, [r7, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3880:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us = lll->interval * 1250;
    3884:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn->evt.ticks_slot =
    3888:	60f0      	str	r0, [r6, #12]

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    388a:	4622      	mov	r2, r4
    388c:	2102      	movs	r1, #2
    388e:	2001      	movs	r0, #1
	conn_interval_us = lll->interval * 1250;
    3890:	fb03 f808 	mul.w	r8, r3, r8
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3894:	f00b fe8a 	bl	f5ac <mayfly_enable>
#endif

	/* Stop Scanner */
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    3898:	4648      	mov	r0, r9
    389a:	f011 f895 	bl	149c8 <ull_scan_handle_get>
    389e:	1d02      	adds	r2, r0, #4
    38a0:	b2d2      	uxtb	r2, r2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    38a2:	4b40      	ldr	r3, [pc, #256]	; (39a4 <ull_master_setup+0x234>)
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_scan, ticker_op_stop_scan_cb,
				    (void *)(uint32_t)ticker_id_scan);
    38a4:	9200      	str	r2, [sp, #0]
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    38a6:	2101      	movs	r1, #1
    38a8:	4620      	mov	r0, r4
    38aa:	f00d f9c7 	bl	10c3c <ticker_stop>

	/* Scanner stop can expire while here in this ISR.
	 * Deferred attempt to stop can fail as it would have
	 * expired, hence ignore failure.
	 */
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    38ae:	4623      	mov	r3, r4
    38b0:	2203      	movs	r2, #3
    38b2:	2101      	movs	r1, #1
    38b4:	9400      	str	r4, [sp, #0]
    38b6:	4620      	mov	r0, r4
    38b8:	f00d f9c0 	bl	10c3c <ticker_stop>
		    TICKER_ID_SCAN_STOP, NULL, NULL);

	/* Start master */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    38bc:	4630      	mov	r0, r6
    38be:	f011 fd21 	bl	15304 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    38c2:	68bb      	ldr	r3, [r7, #8]
    38c4:	9606      	str	r6, [sp, #24]
    38c6:	f1a3 0931 	sub.w	r9, r3, #49	; 0x31
    38ca:	4b37      	ldr	r3, [pc, #220]	; (39a8 <ull_master_setup+0x238>)
    38cc:	9307      	str	r3, [sp, #28]
    38ce:	4b37      	ldr	r3, [pc, #220]	; (39ac <ull_master_setup+0x23c>)
    38d0:	9305      	str	r3, [sp, #20]
    38d2:	f240 23ce 	movw	r3, #718	; 0x2ce
    38d6:	9308      	str	r3, [sp, #32]
    38d8:	68f3      	ldr	r3, [r6, #12]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    38da:	fb88 860a 	smull	r8, r6, r8, sl
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    38de:	e9cd 4303 	strd	r4, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    38e2:	1d47      	adds	r7, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    38e4:	a32c      	add	r3, pc, #176	; (adr r3, 3998 <ull_master_setup+0x228>)
    38e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    38ea:	4640      	mov	r0, r8
    38ec:	4631      	mov	r1, r6
    38ee:	f7fc ff2b 	bl	748 <__aeabi_uldivmod>
    38f2:	4610      	mov	r0, r2
    38f4:	4619      	mov	r1, r3
    38f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    38fa:	2300      	movs	r3, #0
    38fc:	f7fc ff24 	bl	748 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3900:	a325      	add	r3, pc, #148	; (adr r3, 3998 <ull_master_setup+0x228>)
    3902:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3906:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3908:	4631      	mov	r1, r6
    390a:	4640      	mov	r0, r8
    390c:	f7fc ff1c 	bl	748 <__aeabi_uldivmod>
	conn_offset_us -= EVENT_OVERHEAD_START_US;
    3910:	f5a5 7587 	sub.w	r5, r5, #270	; 0x10e
	conn_offset_us -= ready_delay_us;
    3914:	eba5 050b 	sub.w	r5, r5, fp
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3918:	a31f      	add	r3, pc, #124	; (adr r3, 3998 <ull_master_setup+0x228>)
    391a:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    391e:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3920:	fba5 010a 	umull	r0, r1, r5, sl
    3924:	f7fc ff10 	bl	748 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3928:	b2ff      	uxtb	r7, r7
    392a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    392e:	9000      	str	r0, [sp, #0]
    3930:	464b      	mov	r3, r9
    3932:	463a      	mov	r2, r7
    3934:	2101      	movs	r1, #1
    3936:	4620      	mov	r0, r4
    3938:	f00d f912 	bl	10b60 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_master_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    393c:	f030 0302 	bics.w	r3, r0, #2
    3940:	d00c      	beq.n	395c <ull_master_setup+0x1ec>
    3942:	4a1b      	ldr	r2, [pc, #108]	; (39b0 <ull_master_setup+0x240>)
    3944:	491b      	ldr	r1, [pc, #108]	; (39b4 <ull_master_setup+0x244>)
    3946:	481c      	ldr	r0, [pc, #112]	; (39b8 <ull_master_setup+0x248>)
    3948:	f240 23cf 	movw	r3, #719	; 0x2cf
    394c:	f01d f847 	bl	209de <printk>
    3950:	4040      	eors	r0, r0
    3952:	f380 8811 	msr	BASEPRI, r0
    3956:	f04f 0003 	mov.w	r0, #3
    395a:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    395c:	2201      	movs	r2, #1
    395e:	2102      	movs	r1, #2
    3960:	4610      	mov	r0, r2
#endif
}
    3962:	b00d      	add	sp, #52	; 0x34
    3964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3968:	f00b be20 	b.w	f5ac <mayfly_enable>
			cs->csa = 0x00;
    396c:	f884 a01c 	strb.w	sl, [r4, #28]
    3970:	e762      	b.n	3838 <ull_master_setup+0xc8>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3972:	f101 021f 	add.w	r2, r1, #31
    3976:	311e      	adds	r1, #30
    3978:	f015 f918 	bl	18bac <ll_rl_id_addr_get>
    397c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3980:	f8a4 3029 	strh.w	r3, [r4, #41]	; 0x29
		cc->peer_addr_type += 2;
    3984:	7fa3      	ldrb	r3, [r4, #30]
    3986:	980a      	ldr	r0, [sp, #40]	; 0x28
    3988:	f8c4 0025 	str.w	r0, [r4, #37]	; 0x25
    398c:	3302      	adds	r3, #2
    398e:	77a3      	strb	r3, [r4, #30]
    3990:	e727      	b.n	37e2 <ull_master_setup+0x72>
    3992:	bf00      	nop
    3994:	f3af 8000 	nop.w
    3998:	1afd498d 	.word	0x1afd498d
    399c:	00000007 	.word	0x00000007
    39a0:	3b9aca00 	.word	0x3b9aca00
    39a4:	00017f81 	.word	0x00017f81
    39a8:	00017f85 	.word	0x00017f85
    39ac:	00017fb5 	.word	0x00017fb5
    39b0:	00027ab0 	.word	0x00027ab0
    39b4:	000278e4 	.word	0x000278e4
    39b8:	000272c0 	.word	0x000272c0
    39bc:	00000000 	.word	0x00000000

000039c0 <win_offset_calc.constprop.0>:
	}
#undef OFFSET_S_MAX
#undef OFFSET_M_MAX
}

static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
    39c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39c4:	b091      	sub	sp, #68	; 0x44
    39c6:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    39ca:	9306      	str	r3, [sp, #24]
	}
#endif

	ticks_slot_abs += conn_curr->evt.ticks_slot;

	if (conn_curr->lll.role) {
    39cc:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	ticks_slot_abs += conn_curr->evt.ticks_slot;
    39d0:	68c2      	ldr	r2, [r0, #12]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
    39d2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    39d4:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
    39d8:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
    39da:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->evt.ticks_slot;
    39dc:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
    39de:	da02      	bge.n	39e6 <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
    39e0:	4613      	mov	r3, r2
    39e2:	3314      	adds	r3, #20
    39e4:	930b      	str	r3, [sp, #44]	; 0x2c
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    39e6:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    39e8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    39ec:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
						 TICKER_USER_ID_ULL_LOW);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    39f0:	f8df b29c 	ldr.w	fp, [pc, #668]	; 3c90 <win_offset_calc.constprop.0+0x2d0>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    39f4:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
    39f8:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    39fa:	f8cd 8014 	str.w	r8, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
    39fe:	46b1      	mov	r9, r6
	ticks_slot_abs_prev = 0U;
    3a00:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    3a02:	4635      	mov	r5, r6
    3a04:	e046      	b.n	3a94 <win_offset_calc.constprop.0+0xd4>

		if (ticker_id == 0xff) {
    3a06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    3a0a:	2bff      	cmp	r3, #255	; 0xff
    3a0c:	d066      	beq.n	3adc <win_offset_calc.constprop.0+0x11c>
			break;
		}

		/* ticks_anchor shall not change during this loop */
		if ((ticker_id_prev != 0xff) &&
    3a0e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    3a12:	d011      	beq.n	3a38 <win_offset_calc.constprop.0+0x78>
    3a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3a16:	454a      	cmp	r2, r9
    3a18:	d00e      	beq.n	3a38 <win_offset_calc.constprop.0+0x78>
		    (ticks_anchor != ticks_anchor_prev)) {
			LL_ASSERT(0);
    3a1a:	499e      	ldr	r1, [pc, #632]	; (3c94 <win_offset_calc.constprop.0+0x2d4>)
    3a1c:	489e      	ldr	r0, [pc, #632]	; (3c98 <win_offset_calc.constprop.0+0x2d8>)
    3a1e:	f44f 73bb 	mov.w	r3, #374	; 0x176
    3a22:	465a      	mov	r2, fp
    3a24:	f01c ffdb 	bl	209de <printk>
    3a28:	4040      	eors	r0, r0
    3a2a:	f380 8811 	msr	BASEPRI, r0
    3a2e:	f04f 0003 	mov.w	r0, #3
    3a32:	df02      	svc	2

		/* consider advertiser time as available. Any other time used by
		 * tickers declared outside the controller is also available.
		 */
#if defined(CONFIG_BT_BROADCASTER)
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
    3a34:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    3a38:	1e9a      	subs	r2, r3, #2
    3a3a:	2a03      	cmp	r2, #3
    3a3c:	d827      	bhi.n	3a8e <win_offset_calc.constprop.0+0xce>
#endif /* !CONFIG_BT_BROADCASTER */
		{
			continue;
		}

		if (ticker_id < TICKER_ID_CONN_BASE) {
    3a3e:	2b05      	cmp	r3, #5
    3a40:	f040 8099 	bne.w	3b76 <win_offset_calc.constprop.0+0x1b6>
		}

		/* TODO: handle scanner; for now we exit with as much we
		 * where able to fill (offsets).
		 */
		if (ticker_id_other != 0xff) {
    3a44:	9b05      	ldr	r3, [sp, #20]
    3a46:	2bff      	cmp	r3, #255	; 0xff
    3a48:	f040 8091 	bne.w	3b6e <win_offset_calc.constprop.0+0x1ae>
			break;
		}

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    3a4c:	2000      	movs	r0, #0
    3a4e:	f011 fc61 	bl	15314 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
    3a52:	9b07      	ldr	r3, [sp, #28]
    3a54:	4283      	cmp	r3, r0
    3a56:	d01a      	beq.n	3a8e <win_offset_calc.constprop.0+0xce>
    3a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	f040 80a4 	bne.w	3ba8 <win_offset_calc.constprop.0+0x1e8>
    3a60:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
    3a64:	2b00      	cmp	r3, #0
    3a66:	db12      	blt.n	3a8e <win_offset_calc.constprop.0+0xce>

				ticks_slot_abs_curr = ticks_prepare_to_start;
			}
#endif

			ticks_slot_abs_curr += conn->evt.ticks_slot +
    3a68:	68c3      	ldr	r3, [r0, #12]
				ticks_to_expire + ticks_prepare_reduced;
    3a6a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
    3a6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    3a72:	3328      	adds	r3, #40	; 0x28
    3a74:	9308      	str	r3, [sp, #32]
				ticks_slot_margin =
					HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
				ticks_slot_abs_curr += ticks_slot_margin;
			}

			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    3a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a78:	681b      	ldr	r3, [r3, #0]
    3a7a:	4543      	cmp	r3, r8
    3a7c:	f0c0 80a4 	bcc.w	3bc8 <win_offset_calc.constprop.0+0x208>
			}

			ticks_anchor_prev = ticks_anchor;
			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3a80:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
    3a82:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3a86:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
    3a88:	4645      	mov	r5, r8
    3a8a:	f89d 8033 	ldrb.w	r8, [sp, #51]	; 0x33
		}
	} while (offset_index < *offset_max);
    3a8e:	783b      	ldrb	r3, [r7, #0]
    3a90:	42a3      	cmp	r3, r4
    3a92:	d974      	bls.n	3b7e <win_offset_calc.constprop.0+0x1be>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3a94:	ab0f      	add	r3, sp, #60	; 0x3c
    3a96:	9302      	str	r3, [sp, #8]
    3a98:	4b80      	ldr	r3, [pc, #512]	; (3c9c <win_offset_calc.constprop.0+0x2dc>)
    3a9a:	9301      	str	r3, [sp, #4]
    3a9c:	ab0d      	add	r3, sp, #52	; 0x34
    3a9e:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
    3aa0:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3aa2:	ab0e      	add	r3, sp, #56	; 0x38
    3aa4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    3aa8:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    3aaa:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3aac:	f00d f908 	bl	10cc0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3ab0:	2802      	cmp	r0, #2
    3ab2:	d06e      	beq.n	3b92 <win_offset_calc.constprop.0+0x1d2>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d0a5      	beq.n	3a06 <win_offset_calc.constprop.0+0x46>
    3aba:	4979      	ldr	r1, [pc, #484]	; (3ca0 <win_offset_calc.constprop.0+0x2e0>)
    3abc:	4876      	ldr	r0, [pc, #472]	; (3c98 <win_offset_calc.constprop.0+0x2d8>)
    3abe:	f240 136d 	movw	r3, #365	; 0x16d
    3ac2:	465a      	mov	r2, fp
    3ac4:	f01c ff8b 	bl	209de <printk>
    3ac8:	4040      	eors	r0, r0
    3aca:	f380 8811 	msr	BASEPRI, r0
    3ace:	f04f 0003 	mov.w	r0, #3
    3ad2:	df02      	svc	2
		if (ticker_id == 0xff) {
    3ad4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    3ad8:	2bff      	cmp	r3, #255	; 0xff
    3ada:	d198      	bne.n	3a0e <win_offset_calc.constprop.0+0x4e>

	if (ticker_id == 0xff) {
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    3adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ade:	681b      	ldr	r3, [r3, #0]
    3ae0:	429d      	cmp	r5, r3
    3ae2:	bf38      	it	cc
    3ae4:	461d      	movcc	r5, r3
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
    3ae6:	783b      	ldrb	r3, [r7, #0]
    3ae8:	42a3      	cmp	r3, r4
    3aea:	d93e      	bls.n	3b6a <win_offset_calc.constprop.0+0x1aa>
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3aec:	9b04      	ldr	r3, [sp, #16]
    3aee:	4e6d      	ldr	r6, [pc, #436]	; (3ca4 <win_offset_calc.constprop.0+0x2e4>)
    3af0:	442b      	add	r3, r5
    3af2:	fba3 0106 	umull	r0, r1, r3, r6
    3af6:	f04f 0b07 	mov.w	fp, #7
    3afa:	fb0b 1103 	mla	r1, fp, r3, r1
    3afe:	a362      	add	r3, pc, #392	; (adr r3, 3c88 <win_offset_calc.constprop.0+0x2c8>)
    3b00:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b04:	f7fc fe20 	bl	748 <__aeabi_uldivmod>
							ticks_slot_abs_prev) /
    3b08:	4b67      	ldr	r3, [pc, #412]	; (3ca8 <win_offset_calc.constprop.0+0x2e8>)
				 1250;
			if (offset >= conn_interval) {
    3b0a:	9a06      	ldr	r2, [sp, #24]
							ticks_slot_abs_prev) /
    3b0c:	fba3 3000 	umull	r3, r0, r3, r0
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3b10:	f3c0 238f 	ubfx	r3, r0, #10, #16
			if (offset >= conn_interval) {
    3b14:	429a      	cmp	r2, r3
							ticks_slot_abs_prev) /
    3b16:	ea4f 2090 	mov.w	r0, r0, lsr #10
			if (offset >= conn_interval) {
    3b1a:	f240 80a9 	bls.w	3c70 <win_offset_calc.constprop.0+0x2b0>
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3b1e:	f20f 1968 	addw	r9, pc, #360	; 0x168
    3b22:	e9d9 8900 	ldrd	r8, r9, [r9]
    3b26:	e012      	b.n	3b4e <win_offset_calc.constprop.0+0x18e>
    3b28:	fba3 0106 	umull	r0, r1, r3, r6
    3b2c:	fb0b 1103 	mla	r1, fp, r3, r1
    3b30:	4642      	mov	r2, r8
    3b32:	464b      	mov	r3, r9
    3b34:	f7fc fe08 	bl	748 <__aeabi_uldivmod>
							ticks_slot_abs_prev) /
    3b38:	4b5b      	ldr	r3, [pc, #364]	; (3ca8 <win_offset_calc.constprop.0+0x2e8>)
			if (offset >= conn_interval) {
    3b3a:	9a06      	ldr	r2, [sp, #24]
							ticks_slot_abs_prev) /
    3b3c:	fba3 3000 	umull	r3, r0, r3, r0
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3b40:	f3c0 238f 	ubfx	r3, r0, #10, #16
			if (offset >= conn_interval) {
    3b44:	429a      	cmp	r2, r3
							ticks_slot_abs_prev) /
    3b46:	ea4f 2090 	mov.w	r0, r0, lsr #10
			if (offset >= conn_interval) {
    3b4a:	f240 8091 	bls.w	3c70 <win_offset_calc.constprop.0+0x2b0>
				ticks_to_expire_prev = 0U;

				break;
			}

			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
    3b4e:	eb0a 0244 	add.w	r2, sl, r4, lsl #1
	dst[0] = val;
    3b52:	f80a 0014 	strb.w	r0, [sl, r4, lsl #1]
	dst[1] = val >> 8;
    3b56:	0a1b      	lsrs	r3, r3, #8
    3b58:	7053      	strb	r3, [r2, #1]
		while (offset_index < *offset_max) {
    3b5a:	783a      	ldrb	r2, [r7, #0]
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3b5c:	9b04      	ldr	r3, [sp, #16]
							    offset_index)));
			offset_index++;
    3b5e:	3401      	adds	r4, #1
    3b60:	b2e4      	uxtb	r4, r4

			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    3b62:	3528      	adds	r5, #40	; 0x28
		while (offset_index < *offset_max) {
    3b64:	42a2      	cmp	r2, r4
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3b66:	442b      	add	r3, r5
		while (offset_index < *offset_max) {
    3b68:	d8de      	bhi.n	3b28 <win_offset_calc.constprop.0+0x168>
		}

		*ticks_to_offset_next = ticks_to_expire_prev;
    3b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b6c:	601d      	str	r5, [r3, #0]
	}

	*offset_max = offset_index;
    3b6e:	703c      	strb	r4, [r7, #0]
}
    3b70:	b011      	add	sp, #68	; 0x44
    3b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b76:	9305      	str	r3, [sp, #20]
	} while (offset_index < *offset_max);
    3b78:	783b      	ldrb	r3, [r7, #0]
    3b7a:	42a3      	cmp	r3, r4
    3b7c:	d88a      	bhi.n	3a94 <win_offset_calc.constprop.0+0xd4>
	if (ticker_id == 0xff) {
    3b7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    3b82:	2bff      	cmp	r3, #255	; 0xff
    3b84:	d1f3      	bne.n	3b6e <win_offset_calc.constprop.0+0x1ae>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    3b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b88:	681b      	ldr	r3, [r3, #0]
    3b8a:	429d      	cmp	r5, r3
    3b8c:	bf38      	it	cc
    3b8e:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
    3b90:	e7eb      	b.n	3b6a <win_offset_calc.constprop.0+0x1aa>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3b94:	2b02      	cmp	r3, #2
    3b96:	d18d      	bne.n	3ab4 <win_offset_calc.constprop.0+0xf4>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3b98:	2102      	movs	r1, #2
    3b9a:	2000      	movs	r0, #0
    3b9c:	f00d f8d6 	bl	10d4c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3ba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3ba2:	2b02      	cmp	r3, #2
    3ba4:	d0f8      	beq.n	3b98 <win_offset_calc.constprop.0+0x1d8>
    3ba6:	e785      	b.n	3ab4 <win_offset_calc.constprop.0+0xf4>
			if (conn->lll.role) {
    3ba8:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    3bac:	68c3      	ldr	r3, [r0, #12]
				ticks_to_expire + ticks_prepare_reduced;
    3bae:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			if (conn->lll.role) {
    3bb2:	2a00      	cmp	r2, #0
    3bb4:	da53      	bge.n	3c5e <win_offset_calc.constprop.0+0x29e>
				ticks_slot_abs_curr += ticks_slot_margin;
    3bb6:	333c      	adds	r3, #60	; 0x3c
    3bb8:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    3bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3bbc:	681b      	ldr	r3, [r3, #0]
    3bbe:	4543      	cmp	r3, r8
				ticks_slot_margin =
    3bc0:	f04f 0914 	mov.w	r9, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    3bc4:	f4bf af5c 	bcs.w	3a80 <win_offset_calc.constprop.0+0xc0>
				if (ticks_to_expire_prev <
    3bc8:	429d      	cmp	r5, r3
    3bca:	bf38      	it	cc
    3bcc:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
    3bce:	783b      	ldrb	r3, [r7, #0]
    3bd0:	42a3      	cmp	r3, r4
    3bd2:	d935      	bls.n	3c40 <win_offset_calc.constprop.0+0x280>
					(ticks_slot_abs_prev + ticks_slot_abs +
    3bd4:	9b04      	ldr	r3, [sp, #16]
    3bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3bd8:	4413      	add	r3, r2
    3bda:	4499      	add	r9, r3
    3bdc:	4633      	mov	r3, r6
    3bde:	464e      	mov	r6, r9
    3be0:	4699      	mov	r9, r3
    3be2:	e023      	b.n	3c2c <win_offset_calc.constprop.0+0x26c>
					offset = HAL_TICKER_TICKS_TO_US(
    3be4:	4b2f      	ldr	r3, [pc, #188]	; (3ca4 <win_offset_calc.constprop.0+0x2e4>)
    3be6:	2107      	movs	r1, #7
    3be8:	fba2 0303 	umull	r0, r3, r2, r3
    3bec:	fb01 3102 	mla	r1, r1, r2, r3
    3bf0:	a325      	add	r3, pc, #148	; (adr r3, 3c88 <win_offset_calc.constprop.0+0x2c8>)
    3bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3bf6:	f7fc fda7 	bl	748 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    3bfa:	4b2b      	ldr	r3, [pc, #172]	; (3ca8 <win_offset_calc.constprop.0+0x2e8>)
    3bfc:	fba3 3000 	umull	r3, r0, r3, r0
					if (offset >= conn_interval) {
    3c00:	9b06      	ldr	r3, [sp, #24]
					offset = HAL_TICKER_TICKS_TO_US(
    3c02:	f3c0 298f 	ubfx	r9, r0, #10, #16
					if (offset >= conn_interval) {
    3c06:	4599      	cmp	r9, r3
					ticks_to_expire_prev +=
    3c08:	f105 0528 	add.w	r5, r5, #40	; 0x28
					sys_put_le16(offset,
    3c0c:	eb0a 0244 	add.w	r2, sl, r4, lsl #1
					offset_index++;
    3c10:	f104 0101 	add.w	r1, r4, #1
						ticks_slot_abs_prev) / 1250;
    3c14:	ea4f 2090 	mov.w	r0, r0, lsr #10
					if (offset >= conn_interval) {
    3c18:	d22e      	bcs.n	3c78 <win_offset_calc.constprop.0+0x2b8>
	dst[0] = val;
    3c1a:	f80a 0014 	strb.w	r0, [sl, r4, lsl #1]
					offset_index++;
    3c1e:	b2cc      	uxtb	r4, r1
	dst[1] = val >> 8;
    3c20:	ea4f 2119 	mov.w	r1, r9, lsr #8
    3c24:	7051      	strb	r1, [r2, #1]
				while ((offset_index < *offset_max) &&
    3c26:	783a      	ldrb	r2, [r7, #0]
    3c28:	42a2      	cmp	r2, r4
    3c2a:	d91d      	bls.n	3c68 <win_offset_calc.constprop.0+0x2a8>
				       (ticker_ticks_diff_get(
    3c2c:	4629      	mov	r1, r5
    3c2e:	4640      	mov	r0, r8
    3c30:	f00d f8a6 	bl	10d80 <ticker_ticks_diff_get>
					offset = HAL_TICKER_TICKS_TO_US(
    3c34:	9b04      	ldr	r3, [sp, #16]
				while ((offset_index < *offset_max) &&
    3c36:	42b0      	cmp	r0, r6
					offset = HAL_TICKER_TICKS_TO_US(
    3c38:	eb03 0205 	add.w	r2, r3, r5
				while ((offset_index < *offset_max) &&
    3c3c:	d2d2      	bcs.n	3be4 <win_offset_calc.constprop.0+0x224>
    3c3e:	464e      	mov	r6, r9
				*ticks_to_offset_next = ticks_to_expire_prev;
    3c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c42:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
    3c44:	9b06      	ldr	r3, [sp, #24]
    3c46:	42b3      	cmp	r3, r6
    3c48:	f63f af1a 	bhi.w	3a80 <win_offset_calc.constprop.0+0xc0>
	if (ticker_id == 0xff) {
    3c4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    3c50:	2bff      	cmp	r3, #255	; 0xff
    3c52:	f43f af43 	beq.w	3adc <win_offset_calc.constprop.0+0x11c>
	*offset_max = offset_index;
    3c56:	703c      	strb	r4, [r7, #0]
}
    3c58:	b011      	add	sp, #68	; 0x44
    3c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    3c5e:	3328      	adds	r3, #40	; 0x28
    3c60:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
    3c62:	f04f 0900 	mov.w	r9, #0
    3c66:	e706      	b.n	3a76 <win_offset_calc.constprop.0+0xb6>
				*ticks_to_offset_next = ticks_to_expire_prev;
    3c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c6a:	464e      	mov	r6, r9
    3c6c:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
    3c6e:	e707      	b.n	3a80 <win_offset_calc.constprop.0+0xc0>
		*ticks_to_offset_next = ticks_to_expire_prev;
    3c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
    3c72:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
    3c74:	601d      	str	r5, [r3, #0]
    3c76:	e77a      	b.n	3b6e <win_offset_calc.constprop.0+0x1ae>
				*ticks_to_offset_next = ticks_to_expire_prev;
    3c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c7a:	2200      	movs	r2, #0
    3c7c:	601a      	str	r2, [r3, #0]
						ticks_to_expire_prev = 0U;
    3c7e:	4615      	mov	r5, r2
    3c80:	e7e4      	b.n	3c4c <win_offset_calc.constprop.0+0x28c>
    3c82:	bf00      	nop
    3c84:	f3af 8000 	nop.w
    3c88:	3b9aca00 	.word	0x3b9aca00
    3c8c:	00000000 	.word	0x00000000
    3c90:	00027b08 	.word	0x00027b08
    3c94:	00027358 	.word	0x00027358
    3c98:	000272c0 	.word	0x000272c0
    3c9c:	00018639 	.word	0x00018639
    3ca0:	00027b4c 	.word	0x00027b4c
    3ca4:	1afd498d 	.word	0x1afd498d
    3ca8:	d1b71759 	.word	0xd1b71759
    3cac:	00000000 	.word	0x00000000

00003cb0 <ull_sched_after_mstr_slot_get>:
{
    3cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cb4:	b08f      	sub	sp, #60	; 0x3c
    3cb6:	461e      	mov	r6, r3
    3cb8:	9309      	str	r3, [sp, #36]	; 0x24
    3cba:	4615      	mov	r5, r2
	ticker_id = ticker_id_prev = 0xff;
    3cbc:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3cbe:	1d0a      	adds	r2, r1, #4
    3cc0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 3dc8 <ull_sched_after_mstr_slot_get+0x118>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3cc4:	f8df b104 	ldr.w	fp, [pc, #260]	; 3dcc <ull_sched_after_mstr_slot_get+0x11c>
    3cc8:	f8df a104 	ldr.w	sl, [pc, #260]	; 3dd0 <ull_sched_after_mstr_slot_get+0x120>
    3ccc:	f8df 9104 	ldr.w	r9, [pc, #260]	; 3dd4 <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3cd0:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3cd2:	2100      	movs	r1, #0
    3cd4:	6031      	str	r1, [r6, #0]
{
    3cd6:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    3cd8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    3cdc:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3cde:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    3ce0:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3ce2:	9106      	str	r1, [sp, #24]
    3ce4:	af0d      	add	r7, sp, #52	; 0x34
    3ce6:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    3ce8:	2302      	movs	r3, #2
    3cea:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3cec:	e9cd 8701 	strd	r8, r7, [sp, #4]
    3cf0:	9600      	str	r6, [sp, #0]
    3cf2:	462b      	mov	r3, r5
    3cf4:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3cf8:	4621      	mov	r1, r4
    3cfa:	2000      	movs	r0, #0
    3cfc:	f00c ffe0 	bl	10cc0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3d00:	2802      	cmp	r0, #2
    3d02:	d02f      	beq.n	3d64 <ull_sched_after_mstr_slot_get+0xb4>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d06:	2b00      	cmp	r3, #0
    3d08:	d132      	bne.n	3d70 <ull_sched_after_mstr_slot_get+0xc0>
		if (ticker_id == 0xff) {
    3d0a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3d0e:	2bff      	cmp	r3, #255	; 0xff
    3d10:	d03e      	beq.n	3d90 <ull_sched_after_mstr_slot_get+0xe0>
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    3d12:	2b05      	cmp	r3, #5
    3d14:	d1e8      	bne.n	3ce8 <ull_sched_after_mstr_slot_get+0x38>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    3d16:	2000      	movs	r0, #0
    3d18:	f011 fafc 	bl	15314 <ll_conn_get>
		if (conn && !conn->lll.role) {
    3d1c:	2800      	cmp	r0, #0
    3d1e:	d0e3      	beq.n	3ce8 <ull_sched_after_mstr_slot_get+0x38>
    3d20:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
    3d24:	2b00      	cmp	r3, #0
    3d26:	dbdf      	blt.n	3ce8 <ull_sched_after_mstr_slot_get+0x38>
			if ((ticker_id_prev != 0xff) &&
    3d28:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr +=
    3d2a:	68c2      	ldr	r2, [r0, #12]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    3d2e:	29ff      	cmp	r1, #255	; 0xff
			ticks_slot_abs_curr +=
    3d30:	f102 0204 	add.w	r2, r2, #4
			if ((ticker_id_prev != 0xff) &&
    3d34:	d00c      	beq.n	3d50 <ull_sched_after_mstr_slot_get+0xa0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    3d36:	9906      	ldr	r1, [sp, #24]
    3d38:	9207      	str	r2, [sp, #28]
    3d3a:	4618      	mov	r0, r3
    3d3c:	9304      	str	r3, [sp, #16]
    3d3e:	f00d f81f 	bl	10d80 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3d42:	9b05      	ldr	r3, [sp, #20]
    3d44:	9a08      	ldr	r2, [sp, #32]
    3d46:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    3d48:	4288      	cmp	r0, r1
    3d4a:	9b04      	ldr	r3, [sp, #16]
    3d4c:	9a07      	ldr	r2, [sp, #28]
    3d4e:	d822      	bhi.n	3d96 <ull_sched_after_mstr_slot_get+0xe6>
			ticks_to_expire_prev = ticks_to_expire_normal;
    3d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    3d54:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3d58:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    3d5a:	e7c5      	b.n	3ce8 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3d5c:	4621      	mov	r1, r4
    3d5e:	2000      	movs	r0, #0
    3d60:	f00c fff4 	bl	10d4c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d66:	2b02      	cmp	r3, #2
    3d68:	d0f8      	beq.n	3d5c <ull_sched_after_mstr_slot_get+0xac>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d0cc      	beq.n	3d0a <ull_sched_after_mstr_slot_get+0x5a>
    3d70:	2352      	movs	r3, #82	; 0x52
    3d72:	465a      	mov	r2, fp
    3d74:	4651      	mov	r1, sl
    3d76:	4648      	mov	r0, r9
    3d78:	f01c fe31 	bl	209de <printk>
    3d7c:	4040      	eors	r0, r0
    3d7e:	f380 8811 	msr	BASEPRI, r0
    3d82:	f04f 0003 	mov.w	r0, #3
    3d86:	df02      	svc	2
		if (ticker_id == 0xff) {
    3d88:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3d8c:	2bff      	cmp	r3, #255	; 0xff
    3d8e:	d1c0      	bne.n	3d12 <ull_sched_after_mstr_slot_get+0x62>
	if (ticker_id_prev != 0xff) {
    3d90:	9b04      	ldr	r3, [sp, #16]
    3d92:	2bff      	cmp	r3, #255	; 0xff
    3d94:	d010      	beq.n	3db8 <ull_sched_after_mstr_slot_get+0x108>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3d96:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    3d9a:	480f      	ldr	r0, [pc, #60]	; (3dd8 <ull_sched_after_mstr_slot_get+0x128>)
    3d9c:	4413      	add	r3, r2
    3d9e:	fba3 0100 	umull	r0, r1, r3, r0
    3da2:	2207      	movs	r2, #7
    3da4:	fb02 1103 	mla	r1, r2, r3, r1
    3da8:	a305      	add	r3, pc, #20	; (adr r3, 3dc0 <ull_sched_after_mstr_slot_get+0x110>)
    3daa:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dae:	f7fc fccb 	bl	748 <__aeabi_uldivmod>
    3db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    3db4:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3db6:	6018      	str	r0, [r3, #0]
}
    3db8:	b00f      	add	sp, #60	; 0x3c
    3dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dbe:	bf00      	nop
    3dc0:	3b9aca00 	.word	0x3b9aca00
    3dc4:	00000000 	.word	0x00000000
    3dc8:	00018639 	.word	0x00018639
    3dcc:	00027b08 	.word	0x00027b08
    3dd0:	00027b4c 	.word	0x00027b4c
    3dd4:	000272c0 	.word	0x000272c0
    3dd8:	1afd498d 	.word	0x1afd498d
    3ddc:	00000000 	.word	0x00000000

00003de0 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    3de0:	b570      	push	{r4, r5, r6, lr}
    3de2:	b082      	sub	sp, #8
    3de4:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    3de6:	9201      	str	r2, [sp, #4]
{
    3de8:	4615      	mov	r5, r2
    3dea:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3dec:	aa01      	add	r2, sp, #4
    3dee:	2002      	movs	r0, #2
    3df0:	f7ff ff5e 	bl	3cb0 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    3df4:	6823      	ldr	r3, [r4, #0]
    3df6:	b30b      	cbz	r3, 3e3c <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3df8:	9801      	ldr	r0, [sp, #4]
    3dfa:	1b43      	subs	r3, r0, r5
    3dfc:	021b      	lsls	r3, r3, #8
    3dfe:	d41f      	bmi.n	3e40 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3e00:	4629      	mov	r1, r5
    3e02:	f00c ffbd 	bl	10d80 <ticker_ticks_diff_get>
    3e06:	4a1a      	ldr	r2, [pc, #104]	; (3e70 <after_mstr_offset_get+0x90>)
    3e08:	4603      	mov	r3, r0
    3e0a:	2107      	movs	r1, #7
    3e0c:	fba0 0202 	umull	r0, r2, r0, r2
    3e10:	fb01 2103 	mla	r1, r1, r3, r2
    3e14:	a314      	add	r3, pc, #80	; (adr r3, 3e68 <after_mstr_offset_get+0x88>)
    3e16:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e1a:	f7fc fc95 	bl	748 <__aeabi_uldivmod>
    3e1e:	6822      	ldr	r2, [r4, #0]
    3e20:	4402      	add	r2, r0
    3e22:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    3e24:	2a00      	cmp	r2, #0
    3e26:	db09      	blt.n	3e3c <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * 1250;
    3e28:	f240 40e2 	movw	r0, #1250	; 0x4e2
    3e2c:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    3e30:	4290      	cmp	r0, r2
    3e32:	d203      	bcs.n	3e3c <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    3e34:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    3e36:	4282      	cmp	r2, r0
    3e38:	d8fc      	bhi.n	3e34 <after_mstr_offset_get+0x54>
    3e3a:	6022      	str	r2, [r4, #0]
		}
	}
}
    3e3c:	b002      	add	sp, #8
    3e3e:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    3e40:	4601      	mov	r1, r0
    3e42:	4628      	mov	r0, r5
    3e44:	f00c ff9c 	bl	10d80 <ticker_ticks_diff_get>
    3e48:	4a09      	ldr	r2, [pc, #36]	; (3e70 <after_mstr_offset_get+0x90>)
    3e4a:	4603      	mov	r3, r0
    3e4c:	2107      	movs	r1, #7
    3e4e:	fba0 0202 	umull	r0, r2, r0, r2
    3e52:	fb01 2103 	mla	r1, r1, r3, r2
    3e56:	a304      	add	r3, pc, #16	; (adr r3, 3e68 <after_mstr_offset_get+0x88>)
    3e58:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e5c:	f7fc fc74 	bl	748 <__aeabi_uldivmod>
    3e60:	6822      	ldr	r2, [r4, #0]
    3e62:	1a12      	subs	r2, r2, r0
    3e64:	6022      	str	r2, [r4, #0]
    3e66:	e7dd      	b.n	3e24 <after_mstr_offset_get+0x44>
    3e68:	3b9aca00 	.word	0x3b9aca00
    3e6c:	00000000 	.word	0x00000000
    3e70:	1afd498d 	.word	0x1afd498d
    3e74:	00000000 	.word	0x00000000

00003e78 <ull_sched_mfy_win_offset_select>:
{
    3e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e7c:	f8b0 1184 	ldrh.w	r1, [r0, #388]	; 0x184
{
    3e80:	b088      	sub	sp, #32
    3e82:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e84:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3e88:	4841      	ldr	r0, [pc, #260]	; (3f90 <ull_sched_mfy_win_offset_select+0x118>)
    3e8a:	fb03 f101 	mul.w	r1, r3, r1
	uint8_t offset_m_max = OFFSET_M_MAX;
    3e8e:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3e90:	2600      	movs	r6, #0
    3e92:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    3e94:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3e98:	fb81 0100 	smull	r0, r1, r1, r0
    3e9c:	a33a      	add	r3, pc, #232	; (adr r3, 3f88 <ull_sched_mfy_win_offset_select+0x110>)
    3e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3ea2:	e9c5 6601 	strd	r6, r6, [r5, #4]
    3ea6:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3ea8:	f7fc fc4e 	bl	748 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    3eac:	f10d 030f 	add.w	r3, sp, #15
    3eb0:	9501      	str	r5, [sp, #4]
    3eb2:	9300      	str	r3, [sp, #0]
    3eb4:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3eb8:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    3eba:	aa04      	add	r2, sp, #16
    3ebc:	4620      	mov	r0, r4
    3ebe:	2101      	movs	r1, #1
    3ec0:	f7ff fd7e 	bl	39c0 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    3ec4:	f89d 800f 	ldrb.w	r8, [sp, #15]
    3ec8:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    3ecc:	fa5f fc8c 	uxtb.w	ip, ip
    3ed0:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    3ed4:	4630      	mov	r0, r6
    3ed6:	f504 77c2 	add.w	r7, r4, #388	; 0x184
    3eda:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    3ede:	f504 76c8 	add.w	r6, r4, #400	; 0x190
			if (win_offset_s != 0xffff) {
    3ee2:	f64f 7eff 	movw	lr, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
    3ee6:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    3ee8:	f1b8 0f00 	cmp.w	r8, #0
    3eec:	d00a      	beq.n	3f04 <ull_sched_mfy_win_offset_select+0x8c>
    3eee:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    3ef0:	4572      	cmp	r2, lr
    3ef2:	d004      	beq.n	3efe <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    3ef4:	8819      	ldrh	r1, [r3, #0]
    3ef6:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    3ef8:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    3efc:	d016      	beq.n	3f2c <ull_sched_mfy_win_offset_select+0xb4>
		while (offset_index_m < offset_m_max) {
    3efe:	3302      	adds	r3, #2
    3f00:	459c      	cmp	ip, r3
    3f02:	d1f5      	bne.n	3ef0 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    3f04:	3702      	adds	r7, #2
    3f06:	42be      	cmp	r6, r7
    3f08:	d1ed      	bne.n	3ee6 <ull_sched_mfy_win_offset_select+0x6e>
	} else if (!has_offset_s) {
    3f0a:	b9e8      	cbnz	r0, 3f48 <ull_sched_mfy_win_offset_select+0xd0>
		conn->llcp_cu.win_offset_us = win_offset_m[0] * 1250;
    3f0c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3f10:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
		conn->llcp_cu.win_offset_us = win_offset_m[0] * 1250;
    3f14:	f240 42e2 	movw	r2, #1250	; 0x4e2
    3f18:	fb03 f202 	mul.w	r2, r3, r2
	dst[1] = val >> 8;
    3f1c:	0a18      	lsrs	r0, r3, #8
    3f1e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
	dst[0] = val;
    3f22:	700b      	strb	r3, [r1, #0]
	dst[1] = val >> 8;
    3f24:	7048      	strb	r0, [r1, #1]
}
    3f26:	b008      	add	sp, #32
    3f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3f2c:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
		conn->llcp_cu.win_offset_us = win_offset_s * 1250;
    3f30:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3f34:	fb02 f303 	mul.w	r3, r2, r3
    3f38:	0a10      	lsrs	r0, r2, #8
    3f3a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	dst[0] = val;
    3f3e:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    3f40:	7048      	strb	r0, [r1, #1]
}
    3f42:	b008      	add	sp, #32
    3f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp_ack = conn->llcp_req;
    3f48:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3f4c:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
		conn->llcp_ack = conn->llcp_req;
    3f50:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3f54:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
		ull_conn_upd_curr_reset();
    3f58:	f013 ff32 	bl	17dc0 <ull_conn_upd_curr_reset>
			((uint8_t *)conn->llcp.conn_upd.pdu_win_offset -
    3f5c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3f60:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    3f64:	2403      	movs	r4, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3f66:	4322      	orrs	r2, r4
		pdu_ctrl_tx->llctrl.opcode =
    3f68:	2011      	movs	r0, #17
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3f6a:	210f      	movs	r1, #15
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3f6c:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3f70:	2220      	movs	r2, #32
		pdu_ctrl_tx->len =
    3f72:	f803 4c04 	strb.w	r4, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    3f76:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3f7a:	f803 1c01 	strb.w	r1, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3f7e:	701a      	strb	r2, [r3, #0]
}
    3f80:	b008      	add	sp, #32
    3f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f86:	bf00      	nop
    3f88:	1afd498d 	.word	0x1afd498d
    3f8c:	00000007 	.word	0x00000007
    3f90:	3b9aca00 	.word	0x3b9aca00
    3f94:	00000000 	.word	0x00000000

00003f98 <isr_rx>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void isr_rx(void *param)
{
    3f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f9c:	b083      	sub	sp, #12
    3f9e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Read radio status and events */
	trx_done = radio_is_done();
    3fa0:	f018 ff7c 	bl	1ce9c <radio_is_done>
	if (trx_done) {
    3fa4:	b2c0      	uxtb	r0, r0
    3fa6:	b950      	cbnz	r0, 3fbe <isr_rx+0x26>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	lll_isr_status_reset();
    3fa8:	f016 fd5a 	bl	1aa60 <lll_isr_status_reset>
			return;
		}
	}

isr_rx_do_close:
	radio_isr_set(isr_done, lll);
    3fac:	488a      	ldr	r0, [pc, #552]	; (41d8 <isr_rx+0x240>)
    3fae:	4621      	mov	r1, r4
    3fb0:	f018 fe32 	bl	1cc18 <radio_isr_set>
	radio_disable();
}
    3fb4:	b003      	add	sp, #12
    3fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    3fba:	f018 bf45 	b.w	1ce48 <radio_disable>
		crc_ok = radio_crc_is_valid();
    3fbe:	f018 ff8d 	bl	1cedc <radio_crc_is_valid>
    3fc2:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    3fc6:	f019 f813 	bl	1cff0 <radio_filter_has_match>
    3fca:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    3fcc:	f019 f81a 	bl	1d004 <radio_filter_match_get>
    3fd0:	4607      	mov	r7, r0
		irkmatch_ok = radio_ar_has_match();
    3fd2:	f019 fa25 	bl	1d420 <radio_ar_has_match>
    3fd6:	b2c5      	uxtb	r5, r0
		irkmatch_id = radio_ar_match_get();
    3fd8:	f019 fa10 	bl	1d3fc <radio_ar_match_get>
    3fdc:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    3fde:	f018 ffcb 	bl	1cf78 <radio_rssi_is_ready>
    3fe2:	4681      	mov	r9, r0
	lll_isr_status_reset();
    3fe4:	f016 fd3c 	bl	1aa60 <lll_isr_status_reset>
	rl_idx = devmatch_ok ?
    3fe8:	2e00      	cmp	r6, #0
    3fea:	f040 80ab 	bne.w	4144 <isr_rx+0x1ac>
    3fee:	2d00      	cmp	r5, #0
    3ff0:	f040 80ba 	bne.w	4168 <isr_rx+0x1d0>
    3ff4:	27ff      	movs	r7, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    3ff6:	f1b8 0f00 	cmp.w	r8, #0
    3ffa:	d0d7      	beq.n	3fac <isr_rx+0x14>

static inline bool isr_rx_scan_check(struct lll_scan *lll, uint8_t irkmatch_ok,
				     uint8_t devmatch_ok, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
    3ffc:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
    3ffe:	0719      	lsls	r1, r3, #28
    4000:	f100 80a8 	bmi.w	4154 <isr_rx+0x1bc>
	return (((lll->filter_policy & 0x01) == 0) &&
    4004:	2e00      	cmp	r6, #0
    4006:	f040 81ad 	bne.w	4364 <isr_rx+0x3cc>
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;
	bool dir_report = false;

	node_rx = ull_pdu_rx_alloc_peek(1);
    400a:	2001      	movs	r0, #1
    400c:	f00f fe60 	bl	13cd0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    4010:	4680      	mov	r8, r0
    4012:	2800      	cmp	r0, #0
    4014:	f000 820d 	beq.w	4432 <isr_rx+0x49a>
	pdu_adv_rx = (void *)node_rx->pdu;

	if (0) {
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	} else if ((lll->conn) &&
    4018:	68a3      	ldr	r3, [r4, #8]
		rssi_ready = radio_rssi_is_ready();
    401a:	fa5f f689 	uxtb.w	r6, r9
	} else if ((lll->conn) &&
    401e:	2b00      	cmp	r3, #0
    4020:	f000 80af 	beq.w	4182 <isr_rx+0x1ea>
}

static inline bool isr_scan_init_check(struct lll_scan *lll,
				       struct pdu_adv *pdu, uint8_t rl_idx)
{
	return ((((lll->filter_policy & 0x01) != 0U) ||
    4024:	7da3      	ldrb	r3, [r4, #22]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    4026:	071a      	lsls	r2, r3, #28
    4028:	f140 80a4 	bpl.w	4174 <isr_rx+0x1dc>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    402c:	f898 001c 	ldrb.w	r0, [r8, #28]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    4030:	f010 030f 	ands.w	r3, r0, #15
    4034:	f040 81cd 	bne.w	43d2 <isr_rx+0x43a>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    4038:	f898 301d 	ldrb.w	r3, [r8, #29]
    403c:	2b25      	cmp	r3, #37	; 0x25
    403e:	f200 816a 	bhi.w	4316 <isr_rx+0x37e>
			rx = ull_pdu_rx_alloc_peek(4);
    4042:	2004      	movs	r0, #4
    4044:	f00f fe44 	bl	13cd0 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    4048:	2800      	cmp	r0, #0
    404a:	d0af      	beq.n	3fac <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    404c:	f019 f8ec 	bl	1d228 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    4050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		pdu_end_us = radio_tmr_end_get();
    4052:	4681      	mov	r9, r0
		if (!lll->ticks_window) {
    4054:	b943      	cbnz	r3, 4068 <isr_rx+0xd0>
			scan_interval_us = lll->interval * 625U;
    4056:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    4058:	f240 2271 	movw	r2, #625	; 0x271
    405c:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    4060:	fbb0 f2f3 	udiv	r2, r0, r3
    4064:	fb03 0912 	mls	r9, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    4068:	6823      	ldr	r3, [r4, #0]
    406a:	68da      	ldr	r2, [r3, #12]
    406c:	4b5b      	ldr	r3, [pc, #364]	; (41dc <isr_rx+0x244>)
    406e:	2107      	movs	r1, #7
    4070:	fba2 0303 	umull	r0, r3, r2, r3
    4074:	fb01 3102 	mla	r1, r1, r2, r3
    4078:	a355      	add	r3, pc, #340	; (adr r3, 41d0 <isr_rx+0x238>)
    407a:	e9d3 2300 	ldrd	r2, r3, [r3]
    407e:	f7fc fb63 	bl	748 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    4082:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    4086:	454b      	cmp	r3, r9
    4088:	d390      	bcc.n	3fac <isr_rx+0x14>
		radio_switch_complete_and_disable();
    408a:	f018 ff4f 	bl	1cf2c <radio_switch_complete_and_disable>
		lll_conn = lll->conn;
    408e:	f8d4 b008 	ldr.w	fp, [r4, #8]
		pdu_tx = (void *)radio_pkt_scratch_get();
    4092:	f018 ff31 	bl	1cef8 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    4096:	f898 301c 	ldrb.w	r3, [r8, #28]
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    409a:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    409c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    40a0:	01db      	lsls	r3, r3, #7
    40a2:	f002 0250 	and.w	r2, r2, #80	; 0x50
    40a6:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    40aa:	4313      	orrs	r3, r2
    40ac:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    40ae:	2322      	movs	r3, #34	; 0x22
    40b0:	7043      	strb	r3, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
    40b2:	4681      	mov	r9, r0
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    40b4:	4638      	mov	r0, r7
    40b6:	f015 fba5 	bl	19804 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    40ba:	7de3      	ldrb	r3, [r4, #23]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    40bc:	9000      	str	r0, [sp, #0]
		if (lll->rpa_gen && lrpa) {
    40be:	07da      	lsls	r2, r3, #31
    40c0:	f140 822a 	bpl.w	4518 <isr_rx+0x580>
    40c4:	2800      	cmp	r0, #0
    40c6:	f000 8227 	beq.w	4518 <isr_rx+0x580>
			pdu_tx->tx_addr = 1;
    40ca:	f899 2000 	ldrb.w	r2, [r9]
    40ce:	464b      	mov	r3, r9
    40d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    40d4:	f803 2b02 	strb.w	r2, [r3], #2
    40d8:	6802      	ldr	r2, [r0, #0]
    40da:	f8c9 2002 	str.w	r2, [r9, #2]
    40de:	8882      	ldrh	r2, [r0, #4]
    40e0:	809a      	strh	r2, [r3, #4]
    40e2:	f8d8 301e 	ldr.w	r3, [r8, #30]
    40e6:	f8c9 3008 	str.w	r3, [r9, #8]
    40ea:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
    40ee:	f8a9 300c 	strh.w	r3, [r9, #12]
    40f2:	f8db 3008 	ldr.w	r3, [fp, #8]
    40f6:	f8c9 300e 	str.w	r3, [r9, #14]
    40fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    40fe:	f89b 200e 	ldrb.w	r2, [fp, #14]
    4102:	f889 2014 	strb.w	r2, [r9, #20]
    4106:	f8a9 3012 	strh.w	r3, [r9, #18]
		pdu_tx->connect_ind.win_size = 1;
    410a:	2301      	movs	r3, #1
		conn_interval_us = (uint32_t)lll_conn->interval * 1250U;
    410c:	f8bb 1012 	ldrh.w	r1, [fp, #18]
		pdu_tx->connect_ind.win_size = 1;
    4110:	f889 3015 	strb.w	r3, [r9, #21]
		conn_interval_us = (uint32_t)lll_conn->interval * 1250U;
    4114:	9101      	str	r1, [sp, #4]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    4116:	f019 f887 	bl	1d228 <radio_tmr_end_get>
		    lll->conn_win_offset_us == 0U) {
    411a:	f8d4 a010 	ldr.w	sl, [r4, #16]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    411e:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
		if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
    4122:	f1ba 0f00 	cmp.w	sl, #0
    4126:	f000 821d 	beq.w	4564 <isr_rx+0x5cc>
		conn_interval_us = (uint32_t)lll_conn->interval * 1250U;
    412a:	9901      	ldr	r1, [sp, #4]
    412c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    4130:	fb02 f101 	mul.w	r1, r2, r1
    4134:	460a      	mov	r2, r1
			while ((conn_space_us & ((uint32_t)1 << 31)) ||
    4136:	f1ba 0f00 	cmp.w	sl, #0
    413a:	db01      	blt.n	4140 <isr_rx+0x1a8>
    413c:	4553      	cmp	r3, sl
    413e:	d94f      	bls.n	41e0 <isr_rx+0x248>
				conn_space_us += conn_interval_us;
    4140:	4492      	add	sl, r2
    4142:	e7f8      	b.n	4136 <isr_rx+0x19e>
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
    4144:	7da0      	ldrb	r0, [r4, #22]
    4146:	b2f9      	uxtb	r1, r7
    4148:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    414c:	f015 fb7e 	bl	1984c <ull_filter_lll_rl_idx>
    4150:	4607      	mov	r7, r0
    4152:	e750      	b.n	3ff6 <isr_rx+0x5e>
		(((lll->filter_policy & 0x01) != 0) &&
    4154:	2e00      	cmp	r6, #0
    4156:	f47f af58 	bne.w	400a <isr_rx+0x72>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
    415a:	4638      	mov	r0, r7
    415c:	f015 fc32 	bl	199c4 <ull_filter_lll_irk_whitelisted>
    4160:	2800      	cmp	r0, #0
    4162:	f47f af52 	bne.w	400a <isr_rx+0x72>
    4166:	e721      	b.n	3fac <isr_rx+0x14>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    4168:	fa5f f08a 	uxtb.w	r0, sl
    416c:	f015 fbd8 	bl	19920 <ull_filter_lll_rl_irk_idx>
    4170:	4607      	mov	r7, r0
    4172:	e740      	b.n	3ff6 <isr_rx+0x5e>
static inline bool isr_scan_init_adva_check(struct lll_scan *lll,
					    struct pdu_adv *pdu, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* Only applies to initiator with no whitelist */
	if (rl_idx != FILTER_IDX_NONE) {
    4174:	2fff      	cmp	r7, #255	; 0xff
    4176:	f000 81e1 	beq.w	453c <isr_rx+0x5a4>
	return ((((lll->filter_policy & 0x01) != 0U) ||
    417a:	7e23      	ldrb	r3, [r4, #24]
    417c:	42bb      	cmp	r3, r7
    417e:	f43f af55 	beq.w	402c <isr_rx+0x94>
    4182:	f898 001c 	ldrb.w	r0, [r8, #28]
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4186:	f010 030f 	ands.w	r3, r0, #15
    418a:	f040 80f7 	bne.w	437c <isr_rx+0x3e4>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    418e:	f898 301d 	ldrb.w	r3, [r8, #29]
    4192:	2b25      	cmp	r3, #37	; 0x25
    4194:	f63f af0a 	bhi.w	3fac <isr_rx+0x14>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    4198:	f994 2016 	ldrsb.w	r2, [r4, #22]
    419c:	2a00      	cmp	r2, #0
    419e:	f2c0 8156 	blt.w	444e <isr_rx+0x4b6>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    41a2:	2b25      	cmp	r3, #37	; 0x25
	bool dir_report = false;
    41a4:	bf98      	it	ls
    41a6:	f04f 0900 	movls.w	r9, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    41aa:	f200 80b4 	bhi.w	4316 <isr_rx+0x37e>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    41ae:	2b00      	cmp	r3, #0
    41b0:	f43f aefc 	beq.w	3fac <isr_rx+0x14>
		 (pdu_adv_rx->len != 0) &&
    41b4:	68a3      	ldr	r3, [r4, #8]
    41b6:	2b00      	cmp	r3, #0
    41b8:	f47f aef8 	bne.w	3fac <isr_rx+0x14>
		err = isr_rx_scan_report(lll, rssi_ready,
    41bc:	2d00      	cmp	r5, #0
    41be:	464a      	mov	r2, r9
    41c0:	bf14      	ite	ne
    41c2:	4639      	movne	r1, r7
    41c4:	21ff      	moveq	r1, #255	; 0xff
    41c6:	4630      	mov	r0, r6
    41c8:	f017 fc30 	bl	1ba2c <isr_rx_scan_report.constprop.0>
		if (err) {
    41cc:	e6ee      	b.n	3fac <isr_rx+0x14>
    41ce:	bf00      	nop
    41d0:	3b9aca00 	.word	0x3b9aca00
    41d4:	00000000 	.word	0x00000000
    41d8:	0001b7a5 	.word	0x0001b7a5
    41dc:	1afd498d 	.word	0x1afd498d
				sys_cpu_to_le16((conn_space_us -
    41e0:	4ac7      	ldr	r2, [pc, #796]	; (4500 <isr_rx+0x568>)
    41e2:	ebaa 0303 	sub.w	r3, sl, r3
    41e6:	fba2 2303 	umull	r2, r3, r2, r3
    41ea:	0a9b      	lsrs	r3, r3, #10
			pdu_tx->connect_ind.win_offset =
    41ec:	f8a9 3016 	strh.w	r3, [r9, #22]
			pdu_tx->connect_ind.win_size++;
    41f0:	f899 3015 	ldrb.w	r3, [r9, #21]
    41f4:	3301      	adds	r3, #1
    41f6:	f889 3015 	strb.w	r3, [r9, #21]
		pdu_tx->connect_ind.interval =
    41fa:	f8bb 3012 	ldrh.w	r3, [fp, #18]
    41fe:	f8a9 3018 	strh.w	r3, [r9, #24]
		pdu_tx->connect_ind.latency =
    4202:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    4206:	f8a9 301a 	strh.w	r3, [r9, #26]
		pdu_tx->connect_ind.timeout =
    420a:	8aa3      	ldrh	r3, [r4, #20]
    420c:	f8a9 301c 	strh.w	r3, [r9, #28]
    4210:	f8db 301c 	ldr.w	r3, [fp, #28]
    4214:	f8c9 301e 	str.w	r3, [r9, #30]
    4218:	f89b 3020 	ldrb.w	r3, [fp, #32]
    421c:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
		pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
    4220:	f89b 2022 	ldrb.w	r2, [fp, #34]	; 0x22
    4224:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    4228:	f362 0304 	bfi	r3, r2, #0, #5
    422c:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		pdu_tx->connect_ind.sca = lll_conn_sca_local_get();
    4230:	f017 fce8 	bl	1bc04 <lll_conn_sca_local_get>
    4234:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    4238:	f360 1347 	bfi	r3, r0, #5, #3
    423c:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		radio_pkt_tx_set(pdu_tx);
    4240:	4648      	mov	r0, r9
    4242:	f018 fdd3 	bl	1cdec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    4246:	f018 fe1f 	bl	1ce88 <radio_is_ready>
    424a:	2800      	cmp	r0, #0
    424c:	f040 8190 	bne.w	4570 <isr_rx+0x5d8>
		radio_isr_set(isr_cleanup, lll);
    4250:	48ac      	ldr	r0, [pc, #688]	; (4504 <isr_rx+0x56c>)
    4252:	4621      	mov	r1, r4
    4254:	f018 fce0 	bl	1cc18 <radio_isr_set>
		if (rssi_ready) {
    4258:	2e00      	cmp	r6, #0
    425a:	f040 81a5 	bne.w	45a8 <isr_rx+0x610>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
    425e:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
    4260:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
    4264:	07db      	lsls	r3, r3, #31
    4266:	7122      	strb	r2, [r4, #4]
    4268:	f100 8190 	bmi.w	458c <isr_rx+0x5f4>
		rx = ull_pdu_rx_alloc();
    426c:	f00f fd4e 	bl	13d0c <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4270:	230a      	movs	r3, #10
    4272:	7103      	strb	r3, [r0, #4]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    4274:	f898 e01c 	ldrb.w	lr, [r8, #28]
		rx->hdr.handle = 0xffff;
    4278:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
    427c:	4606      	mov	r6, r0
		rx->hdr.handle = 0xffff;
    427e:	80c3      	strh	r3, [r0, #6]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    4280:	f3ce 1e40 	ubfx	lr, lr, #5, #1
    4284:	301c      	adds	r0, #28
    4286:	f109 0820 	add.w	r8, r9, #32
    428a:	f8d9 1000 	ldr.w	r1, [r9]
    428e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    4292:	f8d9 3008 	ldr.w	r3, [r9, #8]
    4296:	f8d9 c00c 	ldr.w	ip, [r9, #12]
    429a:	f8c0 c00c 	str.w	ip, [r0, #12]
    429e:	f109 0910 	add.w	r9, r9, #16
    42a2:	45c1      	cmp	r9, r8
    42a4:	6001      	str	r1, [r0, #0]
    42a6:	6042      	str	r2, [r0, #4]
    42a8:	6083      	str	r3, [r0, #8]
    42aa:	f100 0010 	add.w	r0, r0, #16
    42ae:	d1ec      	bne.n	428a <isr_rx+0x2f2>
    42b0:	f8d9 3000 	ldr.w	r3, [r9]
    42b4:	6003      	str	r3, [r0, #0]
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    42b6:	7f33      	ldrb	r3, [r6, #28]
		ftr->param = lll;
    42b8:	60b4      	str	r4, [r6, #8]
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    42ba:	f36e 1345 	bfi	r3, lr, #5, #1
    42be:	7733      	strb	r3, [r6, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    42c0:	f018 ff5e 	bl	1d180 <radio_tmr_start_get>
				    radio_tx_chain_delay_get(0, 0);
    42c4:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    42c6:	6130      	str	r0, [r6, #16]
				    radio_tx_chain_delay_get(0, 0);
    42c8:	4608      	mov	r0, r1
    42ca:	f018 fd9f 	bl	1ce0c <radio_tx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    42ce:	2d00      	cmp	r5, #0
    42d0:	bf08      	it	eq
    42d2:	27ff      	moveq	r7, #255	; 0xff
    42d4:	76b7      	strb	r7, [r6, #26]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    42d6:	7de2      	ldrb	r2, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    42d8:	ebaa 0000 	sub.w	r0, sl, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    42dc:	f012 0201 	ands.w	r2, r2, #1
		ftr->radio_end_us = conn_space_us -
    42e0:	6170      	str	r0, [r6, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    42e2:	d003      	beq.n	42ec <isr_rx+0x354>
    42e4:	9b00      	ldr	r3, [sp, #0]
    42e6:	1e1a      	subs	r2, r3, #0
    42e8:	bf18      	it	ne
    42ea:	2201      	movne	r2, #1
    42ec:	7e73      	ldrb	r3, [r6, #25]
    42ee:	f362 0300 	bfi	r3, r2, #0, #1
    42f2:	7673      	strb	r3, [r6, #25]
			ftr->extra = ull_pdu_rx_alloc();
    42f4:	f00f fd0a 	bl	13d0c <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
    42f8:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
    42fa:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
    42fc:	6830      	ldr	r0, [r6, #0]
    42fe:	f00f fd1b 	bl	13d38 <ull_rx_put>
}
    4302:	b003      	add	sp, #12
    4304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
    4308:	f00f bd26 	b.w	13d58 <ull_rx_sched>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    430c:	f898 301d 	ldrb.w	r3, [r8, #29]
    4310:	2b25      	cmp	r3, #37	; 0x25
    4312:	f67f af41 	bls.w	4198 <isr_rx+0x200>
					&dir_report))) ||
    4316:	f000 000f 	and.w	r0, r0, #15
    431a:	2804      	cmp	r0, #4
    431c:	f47f ae46 	bne.w	3fac <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    4320:	f898 301d 	ldrb.w	r3, [r8, #29]
    4324:	2b25      	cmp	r3, #37	; 0x25
    4326:	f63f ae41 	bhi.w	3fac <isr_rx+0x14>
		   (lll->state != 0U) &&
    432a:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    432c:	07da      	lsls	r2, r3, #31
    432e:	f57f ae3d 	bpl.w	3fac <isr_rx+0x14>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    4332:	f018 fde1 	bl	1cef8 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
    4336:	f898 301c 	ldrb.w	r3, [r8, #28]
    433a:	7802      	ldrb	r2, [r0, #0]
    433c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4340:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4344:	f47f ae32 	bne.w	3fac <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    4348:	3008      	adds	r0, #8
    434a:	2206      	movs	r2, #6
    434c:	f108 011e 	add.w	r1, r8, #30
    4350:	f021 ff91 	bl	26276 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    4354:	2800      	cmp	r0, #0
    4356:	f47f ae29 	bne.w	3fac <isr_rx+0x14>
		 (pdu_adv_rx->len != 0) &&
    435a:	f898 301d 	ldrb.w	r3, [r8, #29]
	bool dir_report = false;
    435e:	f04f 0900 	mov.w	r9, #0
    4362:	e724      	b.n	41ae <isr_rx+0x216>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
    4364:	4639      	mov	r1, r7
    4366:	4628      	mov	r0, r5
    4368:	f015 fb68 	bl	19a3c <ull_filter_lll_rl_idx_allowed>
    436c:	2800      	cmp	r0, #0
    436e:	f47f ae4c 	bne.w	400a <isr_rx+0x72>
		(((lll->filter_policy & 0x01) != 0) &&
    4372:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
    4374:	071b      	lsls	r3, r3, #28
    4376:	f57f ae19 	bpl.w	3fac <isr_rx+0x14>
    437a:	e646      	b.n	400a <isr_rx+0x72>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    437c:	2b06      	cmp	r3, #6
    437e:	d0c5      	beq.n	430c <isr_rx+0x374>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4380:	2b02      	cmp	r3, #2
    4382:	f000 80ba 	beq.w	44fa <isr_rx+0x562>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4386:	2b01      	cmp	r3, #1
    4388:	d1c5      	bne.n	4316 <isr_rx+0x37e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    438a:	f898 301d 	ldrb.w	r3, [r8, #29]
    438e:	2b0c      	cmp	r3, #12
    4390:	f47f ae0c 	bne.w	3fac <isr_rx+0x14>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    4394:	f108 0a24 	add.w	sl, r8, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    4398:	09c0      	lsrs	r0, r0, #7
    439a:	463a      	mov	r2, r7
    439c:	4651      	mov	r1, sl
    439e:	f015 fbbf 	bl	19b20 <ull_filter_lll_rl_addr_resolve>
    43a2:	4681      	mov	r9, r0
    43a4:	2800      	cmp	r0, #0
    43a6:	d1d8      	bne.n	435a <isr_rx+0x3c2>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    43a8:	7da3      	ldrb	r3, [r4, #22]
    43aa:	f898 001c 	ldrb.w	r0, [r8, #28]
			BDADDR_SIZE))) ||
    43ae:	f3c3 1280 	ubfx	r2, r3, #6, #1
    43b2:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    43b6:	f000 80fc 	beq.w	45b2 <isr_rx+0x61a>
	if (((lll->filter_policy & 0x02) != 0U) &&
    43ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    43be:	0798      	lsls	r0, r3, #30
    43c0:	d504      	bpl.n	43cc <isr_rx+0x434>
    43c2:	f998 301c 	ldrsb.w	r3, [r8, #28]
    43c6:	2b00      	cmp	r3, #0
    43c8:	f2c0 8103 	blt.w	45d2 <isr_rx+0x63a>
    43cc:	f898 001c 	ldrb.w	r0, [r8, #28]
    43d0:	e7a1      	b.n	4316 <isr_rx+0x37e>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    43d2:	2b01      	cmp	r3, #1
    43d4:	d1d2      	bne.n	437c <isr_rx+0x3e4>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    43d6:	f898 301d 	ldrb.w	r3, [r8, #29]
    43da:	2b0c      	cmp	r3, #12
    43dc:	f47f ade6 	bne.w	3fac <isr_rx+0x14>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    43e0:	f108 0924 	add.w	r9, r8, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    43e4:	09c0      	lsrs	r0, r0, #7
    43e6:	463a      	mov	r2, r7
    43e8:	4649      	mov	r1, r9
    43ea:	f015 fb99 	bl	19b20 <ull_filter_lll_rl_addr_resolve>
    43ee:	2800      	cmp	r0, #0
    43f0:	f47f ae27 	bne.w	4042 <isr_rx+0xaa>
	} else if (init && lll->rpa_gen &&
    43f4:	7de3      	ldrb	r3, [r4, #23]
    43f6:	07db      	lsls	r3, r3, #31
    43f8:	f100 80e4 	bmi.w	45c4 <isr_rx+0x62c>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    43fc:	7da3      	ldrb	r3, [r4, #22]
    43fe:	f898 001c 	ldrb.w	r0, [r8, #28]
			BDADDR_SIZE))) ||
    4402:	f3c3 1280 	ubfx	r2, r3, #6, #1
    4406:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    440a:	f000 80ff 	beq.w	460c <isr_rx+0x674>
	if (((lll->filter_policy & 0x02) != 0U) &&
    440e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    4412:	0798      	lsls	r0, r3, #30
    4414:	f57f aeb5 	bpl.w	4182 <isr_rx+0x1ea>
    4418:	f998 301c 	ldrsb.w	r3, [r8, #28]
    441c:	2b00      	cmp	r3, #0
    441e:	f6bf aeb0 	bge.w	4182 <isr_rx+0x1ea>
	    (pdu->rx_addr != 0) &&
    4422:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    4426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    442a:	2b40      	cmp	r3, #64	; 0x40
    442c:	f47f aea9 	bne.w	4182 <isr_rx+0x1ea>
    4430:	e607      	b.n	4042 <isr_rx+0xaa>
	LL_ASSERT(node_rx);
    4432:	4a35      	ldr	r2, [pc, #212]	; (4508 <isr_rx+0x570>)
    4434:	4935      	ldr	r1, [pc, #212]	; (450c <isr_rx+0x574>)
    4436:	4836      	ldr	r0, [pc, #216]	; (4510 <isr_rx+0x578>)
    4438:	f240 2397 	movw	r3, #663	; 0x297
    443c:	f01c facf 	bl	209de <printk>
    4440:	4040      	eors	r0, r0
    4442:	f380 8811 	msr	BASEPRI, r0
    4446:	f04f 0003 	mov.w	r0, #3
    444a:	df02      	svc	2
    444c:	e5e4      	b.n	4018 <isr_rx+0x80>
		   lll->type &&
    444e:	68a2      	ldr	r2, [r4, #8]
    4450:	2a00      	cmp	r2, #0
    4452:	f47f aea6 	bne.w	41a2 <isr_rx+0x20a>
		radio_tmr_tifs_set(EVENT_IFS_US);
    4456:	2096      	movs	r0, #150	; 0x96
    4458:	f018 fdea 	bl	1d030 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    445c:	2000      	movs	r0, #0
    445e:	f018 fd4f 	bl	1cf00 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
    4462:	2d00      	cmp	r5, #0
    4464:	bf14      	ite	ne
    4466:	4639      	movne	r1, r7
    4468:	21ff      	moveq	r1, #255	; 0xff
    446a:	2200      	movs	r2, #0
    446c:	4630      	mov	r0, r6
    446e:	f017 fadd 	bl	1ba2c <isr_rx_scan_report.constprop.0>
		if (err) {
    4472:	2800      	cmp	r0, #0
    4474:	f47f ad9a 	bne.w	3fac <isr_rx+0x14>
		pdu_tx = (void *)radio_pkt_scratch_get();
    4478:	f018 fd3e 	bl	1cef8 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    447c:	f898 301c 	ldrb.w	r3, [r8, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    4480:	4605      	mov	r5, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    4482:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4486:	782a      	ldrb	r2, [r5, #0]
    4488:	01db      	lsls	r3, r3, #7
    448a:	f002 0270 	and.w	r2, r2, #112	; 0x70
    448e:	f043 0303 	orr.w	r3, r3, #3
    4492:	4313      	orrs	r3, r2
    4494:	702b      	strb	r3, [r5, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4496:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4498:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    449a:	706b      	strb	r3, [r5, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    449c:	f015 f9b2 	bl	19804 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    44a0:	7de2      	ldrb	r2, [r4, #23]
    44a2:	07d6      	lsls	r6, r2, #31
    44a4:	f140 80a1 	bpl.w	45ea <isr_rx+0x652>
    44a8:	2800      	cmp	r0, #0
    44aa:	f000 809e 	beq.w	45ea <isr_rx+0x652>
			pdu_tx->tx_addr = 1;
    44ae:	7829      	ldrb	r1, [r5, #0]
    44b0:	462a      	mov	r2, r5
    44b2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    44b6:	f802 1b02 	strb.w	r1, [r2], #2
    44ba:	6801      	ldr	r1, [r0, #0]
    44bc:	f8c5 1002 	str.w	r1, [r5, #2]
    44c0:	8883      	ldrh	r3, [r0, #4]
    44c2:	8093      	strh	r3, [r2, #4]
    44c4:	f8d8 301e 	ldr.w	r3, [r8, #30]
    44c8:	60ab      	str	r3, [r5, #8]
    44ca:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
    44ce:	81ab      	strh	r3, [r5, #12]
		radio_pkt_tx_set(pdu_tx);
    44d0:	4628      	mov	r0, r5
    44d2:	f018 fc8b 	bl	1cdec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    44d6:	f018 fcd7 	bl	1ce88 <radio_is_ready>
    44da:	2800      	cmp	r0, #0
    44dc:	f040 80a4 	bne.w	4628 <isr_rx+0x690>
		radio_tmr_end_capture();
    44e0:	f018 fe9a 	bl	1d218 <radio_tmr_end_capture>
		lll->state = 1U;
    44e4:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    44e6:	480b      	ldr	r0, [pc, #44]	; (4514 <isr_rx+0x57c>)
		lll->state = 1U;
    44e8:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
    44ec:	4621      	mov	r1, r4
		lll->state = 1U;
    44ee:	75a3      	strb	r3, [r4, #22]
}
    44f0:	b003      	add	sp, #12
    44f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
    44f6:	f018 bb8f 	b.w	1cc18 <radio_isr_set>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    44fa:	f898 301d 	ldrb.w	r3, [r8, #29]
    44fe:	e650      	b.n	41a2 <isr_rx+0x20a>
    4500:	d1b71759 	.word	0xd1b71759
    4504:	0001b9f5 	.word	0x0001b9f5
    4508:	00027f98 	.word	0x00027f98
    450c:	00027fe4 	.word	0x00027fe4
    4510:	000272c0 	.word	0x000272c0
    4514:	0001b7c1 	.word	0x0001b7c1
			pdu_tx->tx_addr = lll->init_addr_type;
    4518:	7da3      	ldrb	r3, [r4, #22]
    451a:	f899 2000 	ldrb.w	r2, [r9]
    451e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4522:	f363 1286 	bfi	r2, r3, #6, #1
    4526:	464b      	mov	r3, r9
    4528:	f803 2b02 	strb.w	r2, [r3], #2
    452c:	f8d4 2019 	ldr.w	r2, [r4, #25]
    4530:	f8c9 2002 	str.w	r2, [r9, #2]
    4534:	f8b4 201d 	ldrh.w	r2, [r4, #29]
    4538:	809a      	strh	r2, [r3, #4]
    453a:	e5d2      	b.n	40e2 <isr_rx+0x14a>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    453c:	f898 001c 	ldrb.w	r0, [r8, #28]
    4540:	f3c3 1340 	ubfx	r3, r3, #5, #1
    4544:	f3c0 1280 	ubfx	r2, r0, #6, #1
    4548:	4293      	cmp	r3, r2
    454a:	f47f ae1c 	bne.w	4186 <isr_rx+0x1ee>
		!memcmp(lll->adv_addr, &pdu->adv_ind.addr[0], BDADDR_SIZE));
    454e:	2206      	movs	r2, #6
    4550:	f108 011e 	add.w	r1, r8, #30
    4554:	f104 001f 	add.w	r0, r4, #31
    4558:	f021 fe8d 	bl	26276 <memcmp>
	return ((((lll->filter_policy & 0x01) != 0U) ||
    455c:	2800      	cmp	r0, #0
    455e:	f43f ad65 	beq.w	402c <isr_rx+0x94>
    4562:	e60e      	b.n	4182 <isr_rx+0x1ea>
			pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
    4564:	f889 a016 	strb.w	sl, [r9, #22]
    4568:	f889 a017 	strb.w	sl, [r9, #23]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    456c:	469a      	mov	sl, r3
    456e:	e644      	b.n	41fa <isr_rx+0x262>
		LL_ASSERT(!radio_is_ready());
    4570:	4a34      	ldr	r2, [pc, #208]	; (4644 <isr_rx+0x6ac>)
    4572:	4935      	ldr	r1, [pc, #212]	; (4648 <isr_rx+0x6b0>)
    4574:	4835      	ldr	r0, [pc, #212]	; (464c <isr_rx+0x6b4>)
    4576:	f44f 7344 	mov.w	r3, #784	; 0x310
    457a:	f01c fa30 	bl	209de <printk>
    457e:	4040      	eors	r0, r0
    4580:	f380 8811 	msr	BASEPRI, r0
    4584:	f04f 0003 	mov.w	r0, #3
    4588:	df02      	svc	2
    458a:	e661      	b.n	4250 <isr_rx+0x2b8>
		LL_ASSERT(!ret);
    458c:	4a2d      	ldr	r2, [pc, #180]	; (4644 <isr_rx+0x6ac>)
    458e:	4930      	ldr	r1, [pc, #192]	; (4650 <isr_rx+0x6b8>)
    4590:	482e      	ldr	r0, [pc, #184]	; (464c <isr_rx+0x6b4>)
    4592:	f240 3336 	movw	r3, #822	; 0x336
    4596:	f01c fa22 	bl	209de <printk>
    459a:	4040      	eors	r0, r0
    459c:	f380 8811 	msr	BASEPRI, r0
    45a0:	f04f 0003 	mov.w	r0, #3
    45a4:	df02      	svc	2
    45a6:	e661      	b.n	426c <isr_rx+0x2d4>
			lll_conn->rssi_latest =  radio_rssi_get();
    45a8:	f018 fcd8 	bl	1cf5c <radio_rssi_get>
    45ac:	f88b 00a9 	strb.w	r0, [fp, #169]	; 0xa9
    45b0:	e655      	b.n	425e <isr_rx+0x2c6>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    45b2:	4651      	mov	r1, sl
    45b4:	2206      	movs	r2, #6
    45b6:	f104 0019 	add.w	r0, r4, #25
    45ba:	f021 fe5c 	bl	26276 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    45be:	b380      	cbz	r0, 4622 <isr_rx+0x68a>
    45c0:	7da3      	ldrb	r3, [r4, #22]
    45c2:	e6fa      	b.n	43ba <isr_rx+0x422>
		   ull_filter_lll_lrpa_get(rl_idx)) {
    45c4:	4638      	mov	r0, r7
    45c6:	f015 f91d 	bl	19804 <ull_filter_lll_lrpa_get>
	} else if (init && lll->rpa_gen &&
    45ca:	2800      	cmp	r0, #0
    45cc:	f47f add9 	bne.w	4182 <isr_rx+0x1ea>
    45d0:	e714      	b.n	43fc <isr_rx+0x464>
	    (pdu->rx_addr != 0) &&
    45d2:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    45d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    45da:	2b40      	cmp	r3, #64	; 0x40
    45dc:	f47f aef6 	bne.w	43cc <isr_rx+0x434>
		 (pdu_adv_rx->len != 0) &&
    45e0:	f898 301d 	ldrb.w	r3, [r8, #29]
		return true;
    45e4:	f04f 0901 	mov.w	r9, #1
    45e8:	e5e1      	b.n	41ae <isr_rx+0x216>
			pdu_tx->tx_addr = lll->init_addr_type;
    45ea:	7da3      	ldrb	r3, [r4, #22]
    45ec:	782a      	ldrb	r2, [r5, #0]
    45ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
    45f2:	f363 1286 	bfi	r2, r3, #6, #1
    45f6:	462b      	mov	r3, r5
    45f8:	f803 2b02 	strb.w	r2, [r3], #2
    45fc:	f8d4 2019 	ldr.w	r2, [r4, #25]
    4600:	f8c5 2002 	str.w	r2, [r5, #2]
    4604:	f8b4 201d 	ldrh.w	r2, [r4, #29]
    4608:	809a      	strh	r2, [r3, #4]
    460a:	e75b      	b.n	44c4 <isr_rx+0x52c>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    460c:	4649      	mov	r1, r9
    460e:	2206      	movs	r2, #6
    4610:	f104 0019 	add.w	r0, r4, #25
    4614:	f021 fe2f 	bl	26276 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    4618:	2800      	cmp	r0, #0
    461a:	f43f ad12 	beq.w	4042 <isr_rx+0xaa>
    461e:	7da3      	ldrb	r3, [r4, #22]
    4620:	e6f5      	b.n	440e <isr_rx+0x476>
		 (pdu_adv_rx->len != 0) &&
    4622:	f898 301d 	ldrb.w	r3, [r8, #29]
    4626:	e5c2      	b.n	41ae <isr_rx+0x216>
		LL_ASSERT(!radio_is_ready());
    4628:	4a06      	ldr	r2, [pc, #24]	; (4644 <isr_rx+0x6ac>)
    462a:	4907      	ldr	r1, [pc, #28]	; (4648 <isr_rx+0x6b0>)
    462c:	4807      	ldr	r0, [pc, #28]	; (464c <isr_rx+0x6b4>)
    462e:	f240 3391 	movw	r3, #913	; 0x391
    4632:	f01c f9d4 	bl	209de <printk>
    4636:	4040      	eors	r0, r0
    4638:	f380 8811 	msr	BASEPRI, r0
    463c:	f04f 0003 	mov.w	r0, #3
    4640:	df02      	svc	2
    4642:	e74d      	b.n	44e0 <isr_rx+0x548>
    4644:	00027f98 	.word	0x00027f98
    4648:	00027f60 	.word	0x00027f60
    464c:	000272c0 	.word	0x000272c0
    4650:	00027594 	.word	0x00027594

00004654 <ctrl_notify_func>:

/* Central functions */
static uint8_t ctrl_notify_func(struct bt_conn *conn,
			   struct bt_gatt_subscribe_params *params,
			   const void *data, uint16_t length)
{
    4654:	b538      	push	{r3, r4, r5, lr}
    4656:	460d      	mov	r5, r1
	if (!data) {
    4658:	4614      	mov	r4, r2
    465a:	b92a      	cbnz	r2, 4668 <ctrl_notify_func+0x14>
		printk("[UNSUBSCRIBED]\n");
    465c:	4803      	ldr	r0, [pc, #12]	; (466c <ctrl_notify_func+0x18>)
    465e:	f01c f9be 	bl	209de <printk>
		params->value_handle = 0U;
    4662:	812c      	strh	r4, [r5, #8]
		return BT_GATT_ITER_STOP;
    4664:	4620      	mov	r0, r4
	}
	//printk("[NOTIFICATION] data %p length %u\n", data, length);
	return BT_GATT_ITER_CONTINUE;
}
    4666:	bd38      	pop	{r3, r4, r5, pc}
	return BT_GATT_ITER_CONTINUE;
    4668:	2001      	movs	r0, #1
    466a:	e7fc      	b.n	4666 <ctrl_notify_func+0x12>
    466c:	000283ec 	.word	0x000283ec

00004670 <peripheral_disconnected>:
		printk("Connected\n");
	}
}

static void peripheral_disconnected(struct bt_conn *conn, uint8_t reason)
{
    4670:	b510      	push	{r4, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);

	if (default_conn) {
    4672:	4c05      	ldr	r4, [pc, #20]	; (4688 <peripheral_disconnected+0x18>)
	printk("Disconnected (reason 0x%02x)\n", reason);
    4674:	4805      	ldr	r0, [pc, #20]	; (468c <peripheral_disconnected+0x1c>)
    4676:	f01c f9b2 	bl	209de <printk>
	if (default_conn) {
    467a:	6820      	ldr	r0, [r4, #0]
    467c:	b118      	cbz	r0, 4686 <peripheral_disconnected+0x16>
		bt_conn_unref(default_conn);
    467e:	f01e fe97 	bl	233b0 <bt_conn_unref>
		default_conn = NULL;
    4682:	2300      	movs	r3, #0
    4684:	6023      	str	r3, [r4, #0]
	}
}
    4686:	bd10      	pop	{r4, pc}
    4688:	200019e0 	.word	0x200019e0
    468c:	000283fc 	.word	0x000283fc

00004690 <ctrl_start_scan>:
{
    4690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_le_scan_param scan_param = {
    4692:	2214      	movs	r2, #20
    4694:	2100      	movs	r1, #0
    4696:	a801      	add	r0, sp, #4
    4698:	f021 fe0b 	bl	262b2 <memset>
    469c:	2301      	movs	r3, #1
	err = bt_le_scan_start(&scan_param, ctrl_device_found);
    469e:	490a      	ldr	r1, [pc, #40]	; (46c8 <ctrl_start_scan+0x38>)
	struct bt_le_scan_param scan_param = {
    46a0:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_le_scan_start(&scan_param, ctrl_device_found);
    46a4:	a801      	add	r0, sp, #4
	struct bt_le_scan_param scan_param = {
    46a6:	4b09      	ldr	r3, [pc, #36]	; (46cc <ctrl_start_scan+0x3c>)
    46a8:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, ctrl_device_found);
    46aa:	f005 fb7b 	bl	9da4 <bt_le_scan_start>
	if (err) {
    46ae:	4601      	mov	r1, r0
    46b0:	b128      	cbz	r0, 46be <ctrl_start_scan+0x2e>
		printk("Scanning failed to start (err %d)\n", err);
    46b2:	4807      	ldr	r0, [pc, #28]	; (46d0 <ctrl_start_scan+0x40>)
    46b4:	f01c f993 	bl	209de <printk>
}
    46b8:	b007      	add	sp, #28
    46ba:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Scanning successfully started\n");
    46be:	4805      	ldr	r0, [pc, #20]	; (46d4 <ctrl_start_scan+0x44>)
    46c0:	f01c f98d 	bl	209de <printk>
    46c4:	e7f8      	b.n	46b8 <ctrl_start_scan+0x28>
    46c6:	bf00      	nop
    46c8:	00004a21 	.word	0x00004a21
    46cc:	00300060 	.word	0x00300060
    46d0:	0002841a 	.word	0x0002841a
    46d4:	0002843d 	.word	0x0002843d

000046d8 <peripheral_connected>:
{
    46d8:	b508      	push	{r3, lr}
	if (err) {
    46da:	b121      	cbz	r1, 46e6 <peripheral_connected+0xe>
}
    46dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err 0x%02x)\n", err);
    46e0:	4805      	ldr	r0, [pc, #20]	; (46f8 <peripheral_connected+0x20>)
    46e2:	f01c b97c 	b.w	209de <printk>
		default_conn = bt_conn_ref(conn);
    46e6:	f01e fe5c 	bl	233a2 <bt_conn_ref>
    46ea:	4b04      	ldr	r3, [pc, #16]	; (46fc <peripheral_connected+0x24>)
    46ec:	6018      	str	r0, [r3, #0]
}
    46ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connected\n");
    46f2:	4803      	ldr	r0, [pc, #12]	; (4700 <peripheral_connected+0x28>)
    46f4:	f01c b973 	b.w	209de <printk>
    46f8:	0002845c 	.word	0x0002845c
    46fc:	200019e0 	.word	0x200019e0
    4700:	0002847c 	.word	0x0002847c

00004704 <ctrl_discover_func>:
{
    4704:	b5f0      	push	{r4, r5, r6, r7, lr}
    4706:	4606      	mov	r6, r0
    4708:	b085      	sub	sp, #20
    470a:	4614      	mov	r4, r2
	if (!attr) {
    470c:	460d      	mov	r5, r1
    470e:	b951      	cbnz	r1, 4726 <ctrl_discover_func+0x22>
		printk("Discover complete\n");
    4710:	4833      	ldr	r0, [pc, #204]	; (47e0 <ctrl_discover_func+0xdc>)
    4712:	f01c f964 	bl	209de <printk>
__ssp_bos_icheck3(memset, void *, int)
    4716:	2214      	movs	r2, #20
    4718:	4629      	mov	r1, r5
    471a:	4620      	mov	r0, r4
    471c:	f021 fdc9 	bl	262b2 <memset>
}
    4720:	2000      	movs	r0, #0
    4722:	b005      	add	sp, #20
    4724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_HRS)) {
    4726:	4c2f      	ldr	r4, [pc, #188]	; (47e4 <ctrl_discover_func+0xe0>)
	printk("[ATTRIBUTE] handle %u\n", attr->handle);
    4728:	8a09      	ldrh	r1, [r1, #16]
    472a:	482f      	ldr	r0, [pc, #188]	; (47e8 <ctrl_discover_func+0xe4>)
    472c:	f01c f957 	bl	209de <printk>
	if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_HRS)) {
    4730:	2700      	movs	r7, #0
    4732:	f641 030d 	movw	r3, #6157	; 0x180d
    4736:	6820      	ldr	r0, [r4, #0]
    4738:	f8ad 3006 	strh.w	r3, [sp, #6]
    473c:	a901      	add	r1, sp, #4
    473e:	f88d 7004 	strb.w	r7, [sp, #4]
    4742:	f01e fa47 	bl	22bd4 <bt_uuid_cmp>
    4746:	f642 2337 	movw	r3, #10807	; 0x2a37
    474a:	b9b8      	cbnz	r0, 477c <ctrl_discover_func+0x78>
		memcpy(&uuid, BT_UUID_HRS_MEASUREMENT, sizeof(uuid));
    474c:	f8ad 300e 	strh.w	r3, [sp, #14]
    4750:	f88d 000c 	strb.w	r0, [sp, #12]
    4754:	4b25      	ldr	r3, [pc, #148]	; (47ec <ctrl_discover_func+0xe8>)
    4756:	9a03      	ldr	r2, [sp, #12]
    4758:	601a      	str	r2, [r3, #0]
		discover_params.uuid = &uuid.uuid;
    475a:	6023      	str	r3, [r4, #0]
		discover_params.start_handle = attr->handle + 1;
    475c:	8a2b      	ldrh	r3, [r5, #16]
    475e:	3301      	adds	r3, #1
    4760:	8123      	strh	r3, [r4, #8]
		discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
    4762:	2303      	movs	r3, #3
    4764:	7423      	strb	r3, [r4, #16]
		err = bt_gatt_discover(conn, &discover_params);
    4766:	4621      	mov	r1, r4
    4768:	4630      	mov	r0, r6
    476a:	f008 fbe5 	bl	cf38 <bt_gatt_discover>
		if (err) {
    476e:	4601      	mov	r1, r0
    4770:	2800      	cmp	r0, #0
    4772:	d0d5      	beq.n	4720 <ctrl_discover_func+0x1c>
			printk("Discover failed (err %d)\n", err);
    4774:	481e      	ldr	r0, [pc, #120]	; (47f0 <ctrl_discover_func+0xec>)
			printk("Subscribe failed (err %d)\n", err);
    4776:	f01c f932 	bl	209de <printk>
    477a:	e7d1      	b.n	4720 <ctrl_discover_func+0x1c>
	} else if (!bt_uuid_cmp(discover_params.uuid,
    477c:	6820      	ldr	r0, [r4, #0]
				BT_UUID_HRS_MEASUREMENT)) {
    477e:	f88d 7008 	strb.w	r7, [sp, #8]
	} else if (!bt_uuid_cmp(discover_params.uuid,
    4782:	a902      	add	r1, sp, #8
				BT_UUID_HRS_MEASUREMENT)) {
    4784:	f8ad 300a 	strh.w	r3, [sp, #10]
	} else if (!bt_uuid_cmp(discover_params.uuid,
    4788:	f01e fa24 	bl	22bd4 <bt_uuid_cmp>
    478c:	4f19      	ldr	r7, [pc, #100]	; (47f4 <ctrl_discover_func+0xf0>)
    478e:	8a2b      	ldrh	r3, [r5, #16]
    4790:	b990      	cbnz	r0, 47b8 <ctrl_discover_func+0xb4>
		memcpy(&uuid, BT_UUID_GATT_CCC, sizeof(uuid));
    4792:	f642 1202 	movw	r2, #10498	; 0x2902
    4796:	f88d 000c 	strb.w	r0, [sp, #12]
    479a:	f8ad 200e 	strh.w	r2, [sp, #14]
    479e:	4a13      	ldr	r2, [pc, #76]	; (47ec <ctrl_discover_func+0xe8>)
    47a0:	9903      	ldr	r1, [sp, #12]
    47a2:	6011      	str	r1, [r2, #0]
		discover_params.start_handle = attr->handle + 2;
    47a4:	3302      	adds	r3, #2
    47a6:	8123      	strh	r3, [r4, #8]
		subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
    47a8:	4628      	mov	r0, r5
		discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
    47aa:	2304      	movs	r3, #4
		discover_params.uuid = &uuid.uuid;
    47ac:	6022      	str	r2, [r4, #0]
		discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
    47ae:	7423      	strb	r3, [r4, #16]
		subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
    47b0:	f008 f958 	bl	ca64 <bt_gatt_attr_value_handle>
    47b4:	8138      	strh	r0, [r7, #8]
    47b6:	e7d6      	b.n	4766 <ctrl_discover_func+0x62>
		subscribe_params.notify = ctrl_notify_func;
    47b8:	4a0f      	ldr	r2, [pc, #60]	; (47f8 <ctrl_discover_func+0xf4>)
    47ba:	603a      	str	r2, [r7, #0]
		err = bt_gatt_subscribe(conn, &subscribe_params);
    47bc:	4639      	mov	r1, r7
		subscribe_params.value = BT_GATT_CCC_NOTIFY;
    47be:	2201      	movs	r2, #1
		err = bt_gatt_subscribe(conn, &subscribe_params);
    47c0:	4630      	mov	r0, r6
		subscribe_params.value = BT_GATT_CCC_NOTIFY;
    47c2:	81ba      	strh	r2, [r7, #12]
		subscribe_params.ccc_handle = attr->handle;
    47c4:	817b      	strh	r3, [r7, #10]
		err = bt_gatt_subscribe(conn, &subscribe_params);
    47c6:	f01f fe22 	bl	2440e <bt_gatt_subscribe>
		if (err && err != -EALREADY) {
    47ca:	4601      	mov	r1, r0
    47cc:	b120      	cbz	r0, 47d8 <ctrl_discover_func+0xd4>
    47ce:	f110 0f78 	cmn.w	r0, #120	; 0x78
    47d2:	d001      	beq.n	47d8 <ctrl_discover_func+0xd4>
			printk("Subscribe failed (err %d)\n", err);
    47d4:	4809      	ldr	r0, [pc, #36]	; (47fc <ctrl_discover_func+0xf8>)
    47d6:	e7ce      	b.n	4776 <ctrl_discover_func+0x72>
			printk("[SUBSCRIBED]\n");
    47d8:	4809      	ldr	r0, [pc, #36]	; (4800 <ctrl_discover_func+0xfc>)
    47da:	f01c f900 	bl	209de <printk>
		return BT_GATT_ITER_STOP;
    47de:	e79f      	b.n	4720 <ctrl_discover_func+0x1c>
    47e0:	00028487 	.word	0x00028487
    47e4:	200019e4 	.word	0x200019e4
    47e8:	0002849a 	.word	0x0002849a
    47ec:	20003614 	.word	0x20003614
    47f0:	000284b1 	.word	0x000284b1
    47f4:	200019f8 	.word	0x200019f8
    47f8:	00004655 	.word	0x00004655
    47fc:	000284cb 	.word	0x000284cb
    4800:	000284e6 	.word	0x000284e6

00004804 <ctrl_eir_found>:
{
    4804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (data->type) {
    4808:	7803      	ldrb	r3, [r0, #0]
    480a:	3b02      	subs	r3, #2
    480c:	2b01      	cmp	r3, #1
{
    480e:	b088      	sub	sp, #32
    4810:	4605      	mov	r5, r0
    4812:	460f      	mov	r7, r1
	switch (data->type) {
    4814:	d903      	bls.n	481e <ctrl_eir_found+0x1a>
			return true;
    4816:	2001      	movs	r0, #1
}
    4818:	b008      	add	sp, #32
    481a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (data->data_len % sizeof(uint16_t) != 0U) {
    481e:	7844      	ldrb	r4, [r0, #1]
    4820:	f014 0401 	ands.w	r4, r4, #1
    4824:	d037      	beq.n	4896 <ctrl_eir_found+0x92>
			printk("AD malformed\n");
    4826:	481f      	ldr	r0, [pc, #124]	; (48a4 <ctrl_eir_found+0xa0>)
    4828:	f01c f8d9 	bl	209de <printk>
    482c:	e7f3      	b.n	4816 <ctrl_eir_found+0x12>
			memcpy(&u16, &data->data[i], sizeof(u16));
    482e:	686b      	ldr	r3, [r5, #4]
			if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    4830:	ae04      	add	r6, sp, #16
    4832:	5b1b      	ldrh	r3, [r3, r4]
			uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
    4834:	f8ad 3006 	strh.w	r3, [sp, #6]
			if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    4838:	4631      	mov	r1, r6
    483a:	a801      	add	r0, sp, #4
			uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
    483c:	f88d 8004 	strb.w	r8, [sp, #4]
			if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    4840:	f88d 8010 	strb.w	r8, [sp, #16]
    4844:	f8ad 9012 	strh.w	r9, [sp, #18]
    4848:	f01e f9c4 	bl	22bd4 <bt_uuid_cmp>
    484c:	b930      	cbnz	r0, 485c <ctrl_eir_found+0x58>
			err = bt_le_scan_stop();
    484e:	f005 fb07 	bl	9e60 <bt_le_scan_stop>
			if (err) {
    4852:	4601      	mov	r1, r0
    4854:	b138      	cbz	r0, 4866 <ctrl_eir_found+0x62>
				printk("Stop LE scan failed (err %d)\n", err);
    4856:	4650      	mov	r0, sl
    4858:	f01c f8c1 	bl	209de <printk>
		for (i = 0; i < data->data_len; i += sizeof(uint16_t)) {
    485c:	3402      	adds	r4, #2
    485e:	786b      	ldrb	r3, [r5, #1]
    4860:	429c      	cmp	r4, r3
    4862:	dbe4      	blt.n	482e <ctrl_eir_found+0x2a>
    4864:	e7d7      	b.n	4816 <ctrl_eir_found+0x12>
			param =  BT_LE_CONN_PARAM(BLE_PERIOD, BLE_PERIOD, 0, SUPERVISION_TIMEOUT);
    4866:	4b10      	ldr	r3, [pc, #64]	; (48a8 <ctrl_eir_found+0xa4>)
    4868:	6818      	ldr	r0, [r3, #0]
    486a:	6859      	ldr	r1, [r3, #4]
    486c:	aa02      	add	r2, sp, #8
			err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    486e:	3308      	adds	r3, #8
			param =  BT_LE_CONN_PARAM(BLE_PERIOD, BLE_PERIOD, 0, SUPERVISION_TIMEOUT);
    4870:	c203      	stmia	r2!, {r0, r1}
			err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    4872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4874:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    4878:	4631      	mov	r1, r6
    487a:	4b0c      	ldr	r3, [pc, #48]	; (48ac <ctrl_eir_found+0xa8>)
    487c:	aa02      	add	r2, sp, #8
    487e:	4638      	mov	r0, r7
    4880:	f006 f86e 	bl	a960 <bt_conn_le_create>
			if (err) {
    4884:	4601      	mov	r1, r0
    4886:	b120      	cbz	r0, 4892 <ctrl_eir_found+0x8e>
				printk("Create conn failed (err %d)\n", err);
    4888:	4809      	ldr	r0, [pc, #36]	; (48b0 <ctrl_eir_found+0xac>)
    488a:	f01c f8a8 	bl	209de <printk>
				ctrl_start_scan();
    488e:	f7ff feff 	bl	4690 <ctrl_start_scan>
			return false;
    4892:	2000      	movs	r0, #0
    4894:	e7c0      	b.n	4818 <ctrl_eir_found+0x14>
				printk("Stop LE scan failed (err %d)\n", err);
    4896:	f8df a01c 	ldr.w	sl, [pc, #28]	; 48b4 <ctrl_eir_found+0xb0>
			uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
    489a:	46a0      	mov	r8, r4
			if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
    489c:	f641 090d 	movw	r9, #6157	; 0x180d
    48a0:	e7dd      	b.n	485e <ctrl_eir_found+0x5a>
    48a2:	bf00      	nop
    48a4:	000284f4 	.word	0x000284f4
    48a8:	000269b0 	.word	0x000269b0
    48ac:	200019e0 	.word	0x200019e0
    48b0:	00028520 	.word	0x00028520
    48b4:	00028502 	.word	0x00028502

000048b8 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    48b8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    48ba:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    48bc:	b08a      	sub	sp, #40	; 0x28
    48be:	4604      	mov	r4, r0
    48c0:	460e      	mov	r6, r1
    48c2:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    48c4:	2b03      	cmp	r3, #3
    48c6:	d820      	bhi.n	490a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    48c8:	e8df f003 	tbb	[pc, r3]
    48cc:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    48d0:	4911      	ldr	r1, [pc, #68]	; (4918 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    48d2:	4628      	mov	r0, r5
    48d4:	f021 fd89 	bl	263ea <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    48d8:	7863      	ldrb	r3, [r4, #1]
    48da:	9304      	str	r3, [sp, #16]
    48dc:	78a3      	ldrb	r3, [r4, #2]
    48de:	9303      	str	r3, [sp, #12]
    48e0:	78e3      	ldrb	r3, [r4, #3]
    48e2:	9302      	str	r3, [sp, #8]
    48e4:	7923      	ldrb	r3, [r4, #4]
    48e6:	9301      	str	r3, [sp, #4]
    48e8:	7963      	ldrb	r3, [r4, #5]
    48ea:	9300      	str	r3, [sp, #0]
    48ec:	4a0b      	ldr	r2, [pc, #44]	; (491c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    48ee:	79a3      	ldrb	r3, [r4, #6]
    48f0:	9505      	str	r5, [sp, #20]
    48f2:	211e      	movs	r1, #30
    48f4:	4630      	mov	r0, r6
    48f6:	f01c f87f 	bl	209f8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    48fa:	b00a      	add	sp, #40	; 0x28
    48fc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    48fe:	4908      	ldr	r1, [pc, #32]	; (4920 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    4900:	e7e7      	b.n	48d2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    4902:	4908      	ldr	r1, [pc, #32]	; (4924 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    4904:	e7e5      	b.n	48d2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    4906:	4908      	ldr	r1, [pc, #32]	; (4928 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    4908:	e7e3      	b.n	48d2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    490a:	4a08      	ldr	r2, [pc, #32]	; (492c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    490c:	210a      	movs	r1, #10
    490e:	4628      	mov	r0, r5
    4910:	f01c f872 	bl	209f8 <snprintk>
		break;
    4914:	e7e0      	b.n	48d8 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    4916:	bf00      	nop
    4918:	0002853d 	.word	0x0002853d
    491c:	0002855f 	.word	0x0002855f
    4920:	00028544 	.word	0x00028544
    4924:	0002854b 	.word	0x0002854b
    4928:	00028555 	.word	0x00028555
    492c:	0002a2d9 	.word	0x0002a2d9

00004930 <peripheral_auth_cancel>:
	}
	printk("Advertising successfully started\n");
}

static void peripheral_auth_cancel(struct bt_conn *conn)
{
    4930:	b500      	push	{lr}
    4932:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4934:	f01e fd51 	bl	233da <bt_conn_get_dst>
    4938:	4669      	mov	r1, sp
    493a:	f7ff ffbd 	bl	48b8 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
    493e:	4803      	ldr	r0, [pc, #12]	; (494c <peripheral_auth_cancel+0x1c>)
    4940:	4669      	mov	r1, sp
    4942:	f01c f84c 	bl	209de <printk>
}
    4946:	b009      	add	sp, #36	; 0x24
    4948:	f85d fb04 	ldr.w	pc, [sp], #4
    494c:	00028582 	.word	0x00028582

00004950 <ctrl_disconnected>:
{
    4950:	b530      	push	{r4, r5, lr}
    4952:	b089      	sub	sp, #36	; 0x24
    4954:	460d      	mov	r5, r1
    4956:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4958:	f01e fd3f 	bl	233da <bt_conn_get_dst>
    495c:	4669      	mov	r1, sp
    495e:	f7ff ffab 	bl	48b8 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    4962:	462a      	mov	r2, r5
	if (default_conn != conn) {
    4964:	4d07      	ldr	r5, [pc, #28]	; (4984 <ctrl_disconnected+0x34>)
	printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    4966:	4808      	ldr	r0, [pc, #32]	; (4988 <ctrl_disconnected+0x38>)
    4968:	4669      	mov	r1, sp
    496a:	f01c f838 	bl	209de <printk>
	if (default_conn != conn) {
    496e:	6828      	ldr	r0, [r5, #0]
    4970:	42a0      	cmp	r0, r4
    4972:	d105      	bne.n	4980 <ctrl_disconnected+0x30>
	bt_conn_unref(default_conn);
    4974:	f01e fd1c 	bl	233b0 <bt_conn_unref>
	default_conn = NULL;
    4978:	2300      	movs	r3, #0
    497a:	602b      	str	r3, [r5, #0]
	ctrl_start_scan();
    497c:	f7ff fe88 	bl	4690 <ctrl_start_scan>
}
    4980:	b009      	add	sp, #36	; 0x24
    4982:	bd30      	pop	{r4, r5, pc}
    4984:	200019e0 	.word	0x200019e0
    4988:	00028599 	.word	0x00028599

0000498c <ctrl_connected>:
{
    498c:	b570      	push	{r4, r5, r6, lr}
    498e:	b08a      	sub	sp, #40	; 0x28
    4990:	460c      	mov	r4, r1
    4992:	4605      	mov	r5, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4994:	f01e fd21 	bl	233da <bt_conn_get_dst>
    4998:	a902      	add	r1, sp, #8
    499a:	f7ff ff8d 	bl	48b8 <bt_addr_le_to_str.constprop.0.isra.0>
	if (conn_err) {
    499e:	4e19      	ldr	r6, [pc, #100]	; (4a04 <ctrl_connected+0x78>)
    49a0:	b16c      	cbz	r4, 49be <ctrl_connected+0x32>
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
    49a2:	4819      	ldr	r0, [pc, #100]	; (4a08 <ctrl_connected+0x7c>)
    49a4:	4622      	mov	r2, r4
    49a6:	a902      	add	r1, sp, #8
    49a8:	f01c f819 	bl	209de <printk>
		bt_conn_unref(default_conn);
    49ac:	6830      	ldr	r0, [r6, #0]
    49ae:	f01e fcff 	bl	233b0 <bt_conn_unref>
		default_conn = NULL;
    49b2:	2300      	movs	r3, #0
    49b4:	6033      	str	r3, [r6, #0]
		ctrl_start_scan();
    49b6:	f7ff fe6b 	bl	4690 <ctrl_start_scan>
}
    49ba:	b00a      	add	sp, #40	; 0x28
    49bc:	bd70      	pop	{r4, r5, r6, pc}
	printk("Connected: %s\n", addr);
    49be:	4813      	ldr	r0, [pc, #76]	; (4a0c <ctrl_connected+0x80>)
    49c0:	a902      	add	r1, sp, #8
    49c2:	f01c f80c 	bl	209de <printk>
	if (conn == default_conn) {
    49c6:	6830      	ldr	r0, [r6, #0]
    49c8:	42a8      	cmp	r0, r5
    49ca:	d1f6      	bne.n	49ba <ctrl_connected+0x2e>
		memcpy(&uuid, BT_UUID_HRS, sizeof(uuid));
    49cc:	f641 030d 	movw	r3, #6157	; 0x180d
		discover_params.uuid = &uuid.uuid;
    49d0:	490f      	ldr	r1, [pc, #60]	; (4a10 <ctrl_connected+0x84>)
		memcpy(&uuid, BT_UUID_HRS, sizeof(uuid));
    49d2:	f8ad 3006 	strh.w	r3, [sp, #6]
    49d6:	f88d 4004 	strb.w	r4, [sp, #4]
    49da:	4b0e      	ldr	r3, [pc, #56]	; (4a14 <ctrl_connected+0x88>)
    49dc:	9a01      	ldr	r2, [sp, #4]
		discover_params.uuid = &uuid.uuid;
    49de:	600b      	str	r3, [r1, #0]
    49e0:	601a      	str	r2, [r3, #0]
		discover_params.func = ctrl_discover_func;
    49e2:	4b0d      	ldr	r3, [pc, #52]	; (4a18 <ctrl_connected+0x8c>)
    49e4:	604b      	str	r3, [r1, #4]
		discover_params.start_handle = 0x0001;
    49e6:	2301      	movs	r3, #1
    49e8:	810b      	strh	r3, [r1, #8]
		discover_params.end_handle = 0xffff;
    49ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    49ee:	81cb      	strh	r3, [r1, #14]
		discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    49f0:	740c      	strb	r4, [r1, #16]
		err = bt_gatt_discover(default_conn, &discover_params);
    49f2:	f008 faa1 	bl	cf38 <bt_gatt_discover>
		if (err) {
    49f6:	4601      	mov	r1, r0
    49f8:	2800      	cmp	r0, #0
    49fa:	d0de      	beq.n	49ba <ctrl_connected+0x2e>
			printk("Discover failed(err %d)\n", err);
    49fc:	4807      	ldr	r0, [pc, #28]	; (4a1c <ctrl_connected+0x90>)
    49fe:	f01b ffee 	bl	209de <printk>
			return;
    4a02:	e7da      	b.n	49ba <ctrl_connected+0x2e>
    4a04:	200019e0 	.word	0x200019e0
    4a08:	000285bb 	.word	0x000285bb
    4a0c:	000285d9 	.word	0x000285d9
    4a10:	200019e4 	.word	0x200019e4
    4a14:	20003614 	.word	0x20003614
    4a18:	00004705 	.word	0x00004705
    4a1c:	000285e8 	.word	0x000285e8

00004a20 <ctrl_device_found>:
{
    4a20:	b570      	push	{r4, r5, r6, lr}
    4a22:	b088      	sub	sp, #32
    4a24:	4616      	mov	r6, r2
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    4a26:	4669      	mov	r1, sp
{
    4a28:	4605      	mov	r5, r0
    4a2a:	461c      	mov	r4, r3
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    4a2c:	f7ff ff44 	bl	48b8 <bt_addr_le_to_str.constprop.0.isra.0>
	if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    4a30:	2e01      	cmp	r6, #1
    4a32:	d804      	bhi.n	4a3e <ctrl_device_found+0x1e>
		bt_data_parse(ad, ctrl_eir_found, (void *)addr);
    4a34:	4903      	ldr	r1, [pc, #12]	; (4a44 <ctrl_device_found+0x24>)
    4a36:	462a      	mov	r2, r5
    4a38:	4620      	mov	r0, r4
    4a3a:	f004 fb25 	bl	9088 <bt_data_parse>
}
    4a3e:	b008      	add	sp, #32
    4a40:	bd70      	pop	{r4, r5, r6, pc}
    4a42:	bf00      	nop
    4a44:	00004805 	.word	0x00004805

00004a48 <get_device>:
	.cancel = peripheral_auth_cancel,
};


int8_t get_device(uint8_t address[])
{
    4a48:	b510      	push	{r4, lr}
	uint8_t i = 0;
	for (i=0; i<NUMBER_DEVICES;++i) {
		if (memcmp(address, devices[i].addr_id, 8*sizeof(uint8_t))==0) {
    4a4a:	4909      	ldr	r1, [pc, #36]	; (4a70 <get_device+0x28>)
    4a4c:	2208      	movs	r2, #8
{
    4a4e:	4604      	mov	r4, r0
		if (memcmp(address, devices[i].addr_id, 8*sizeof(uint8_t))==0) {
    4a50:	f021 fc11 	bl	26276 <memcmp>
    4a54:	b130      	cbz	r0, 4a64 <get_device+0x1c>
    4a56:	4907      	ldr	r1, [pc, #28]	; (4a74 <get_device+0x2c>)
    4a58:	2208      	movs	r2, #8
    4a5a:	4620      	mov	r0, r4
    4a5c:	f021 fc0b 	bl	26276 <memcmp>
    4a60:	b910      	cbnz	r0, 4a68 <get_device+0x20>
	for (i=0; i<NUMBER_DEVICES;++i) {
    4a62:	2001      	movs	r0, #1
			return i;
    4a64:	b240      	sxtb	r0, r0
		}
	}
	return -1;
}
    4a66:	bd10      	pop	{r4, pc}
	return -1;
    4a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4a6c:	e7fb      	b.n	4a66 <get_device+0x1e>
    4a6e:	bf00      	nop
    4a70:	20000e47 	.word	0x20000e47
    4a74:	20000e50 	.word	0x20000e50

00004a78 <main>:
#endif /* LOG_STORAGE */



void main(void)
{
    4a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a7a:	b08d      	sub	sp, #52	; 0x34
	return z_impl_k_sleep(timeout);
    4a7c:	2100      	movs	r1, #0
    4a7e:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    4a82:	f01a fd0d 	bl	1f4a0 <z_impl_k_sleep>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    4a86:	4c42      	ldr	r4, [pc, #264]	; (4b90 <main+0x118>)
    4a88:	2108      	movs	r1, #8
    4a8a:	4620      	mov	r0, r4
    4a8c:	f01c fea3 	bl	217d6 <z_impl_hwinfo_get_device_id>
	int err;
	k_sleep(K_SECONDS(5));
	// read device ID
	hwinfo_get_device_id(hw_addr_id,8);
	printk("This device address: ");
    4a90:	4840      	ldr	r0, [pc, #256]	; (4b94 <main+0x11c>)
    4a92:	f01b ffa4 	bl	209de <printk>
	printk("0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x\n", hw_addr_id[0],
    4a96:	79e3      	ldrb	r3, [r4, #7]
    4a98:	9304      	str	r3, [sp, #16]
    4a9a:	79a3      	ldrb	r3, [r4, #6]
    4a9c:	9303      	str	r3, [sp, #12]
    4a9e:	7963      	ldrb	r3, [r4, #5]
    4aa0:	9302      	str	r3, [sp, #8]
    4aa2:	7923      	ldrb	r3, [r4, #4]
    4aa4:	9301      	str	r3, [sp, #4]
    4aa6:	78e3      	ldrb	r3, [r4, #3]
    4aa8:	9300      	str	r3, [sp, #0]
    4aaa:	78a3      	ldrb	r3, [r4, #2]
    4aac:	7862      	ldrb	r2, [r4, #1]
    4aae:	7821      	ldrb	r1, [r4, #0]
    4ab0:	4839      	ldr	r0, [pc, #228]	; (4b98 <main+0x120>)
    4ab2:	f01b ff94 	bl	209de <printk>
																	hw_addr_id[4],
																	hw_addr_id[5],
																	hw_addr_id[6],
																	hw_addr_id[7]
																	);
	uint8_t device_id = get_device(hw_addr_id);
    4ab6:	4620      	mov	r0, r4
    4ab8:	f7ff ffc6 	bl	4a48 <get_device>
    4abc:	b2c4      	uxtb	r4, r0
	if (device_id<0) {
		printk("Device unknown\n");
		return;
	}
	err = bt_enable(NULL);
    4abe:	2000      	movs	r0, #0
    4ac0:	f004 fe10 	bl	96e4 <bt_enable>
	if (err) {
    4ac4:	4606      	mov	r6, r0
    4ac6:	b130      	cbz	r0, 4ad6 <main+0x5e>
		printk("Bluetooth init failed (err %d)\n", err);
    4ac8:	4601      	mov	r1, r0
    4aca:	4834      	ldr	r0, [pc, #208]	; (4b9c <main+0x124>)
		printk("This device address has no defined role, going into passive mode...\n");
			while (1) {
			k_sleep(K_SECONDS(1));
		}
	}
}
    4acc:	b00d      	add	sp, #52	; 0x34
    4ace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    4ad2:	f01b bf84 	b.w	209de <printk>
	if (devices[device_id].role==CENTRAL) 
    4ad6:	4832      	ldr	r0, [pc, #200]	; (4ba0 <main+0x128>)
    4ad8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    4adc:	4404      	add	r4, r0
    4ade:	f994 7008 	ldrsb.w	r7, [r4, #8]
    4ae2:	2f01      	cmp	r7, #1
    4ae4:	d10c      	bne.n	4b00 <main+0x88>
		printk("Starting as CENTRAL\n");
    4ae6:	482f      	ldr	r0, [pc, #188]	; (4ba4 <main+0x12c>)
    4ae8:	f01b ff79 	bl	209de <printk>
		bt_conn_cb_register(&ctrl_conn_callbacks);
    4aec:	482e      	ldr	r0, [pc, #184]	; (4ba8 <main+0x130>)
    4aee:	f005 fc05 	bl	a2fc <bt_conn_cb_register>
		ctrl_start_scan();
    4af2:	f7ff fdcd 	bl	4690 <ctrl_start_scan>
    4af6:	2100      	movs	r1, #0
    4af8:	2021      	movs	r0, #33	; 0x21
    4afa:	f01a fcd1 	bl	1f4a0 <z_impl_k_sleep>
		while(1) {
    4afe:	e7fa      	b.n	4af6 <main+0x7e>
	else if (devices[device_id].role==PERIPHERAL) 
    4b00:	2f02      	cmp	r7, #2
    4b02:	d13b      	bne.n	4b7c <main+0x104>
		printk("Starting as PERIPHERAL\n");
    4b04:	4829      	ldr	r0, [pc, #164]	; (4bac <main+0x134>)
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, advertisement, ARRAY_SIZE(advertisement), NULL, 0);
    4b06:	4d2a      	ldr	r5, [pc, #168]	; (4bb0 <main+0x138>)
		printk("Starting as PERIPHERAL\n");
    4b08:	f01b ff69 	bl	209de <printk>
	printk("Bluetooth initialized\n");
    4b0c:	4829      	ldr	r0, [pc, #164]	; (4bb4 <main+0x13c>)
    4b0e:	f01b ff66 	bl	209de <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, advertisement, ARRAY_SIZE(advertisement), NULL, 0);
    4b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4b14:	ac07      	add	r4, sp, #28
    4b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4b18:	682b      	ldr	r3, [r5, #0]
    4b1a:	6023      	str	r3, [r4, #0]
    4b1c:	4926      	ldr	r1, [pc, #152]	; (4bb8 <main+0x140>)
    4b1e:	9600      	str	r6, [sp, #0]
    4b20:	4633      	mov	r3, r6
    4b22:	463a      	mov	r2, r7
    4b24:	a807      	add	r0, sp, #28
    4b26:	f01e fa97 	bl	23058 <bt_le_adv_start>
	if (err) {
    4b2a:	4601      	mov	r1, r0
    4b2c:	b310      	cbz	r0, 4b74 <main+0xfc>
		printk("Advertising failed to start (err %d)\n", err);
    4b2e:	4823      	ldr	r0, [pc, #140]	; (4bbc <main+0x144>)
    4b30:	f01b ff55 	bl	209de <printk>
		bt_conn_cb_register(&prph_conn_callbacks);
    4b34:	4822      	ldr	r0, [pc, #136]	; (4bc0 <main+0x148>)
	heartrate++;
    4b36:	4c23      	ldr	r4, [pc, #140]	; (4bc4 <main+0x14c>)
		bt_conn_cb_register(&prph_conn_callbacks);
    4b38:	f005 fbe0 	bl	a2fc <bt_conn_cb_register>
		bt_conn_auth_cb_register(&prph_auth_cb_display);
    4b3c:	4822      	ldr	r0, [pc, #136]	; (4bc8 <main+0x150>)
    4b3e:	f006 f92b 	bl	ad98 <bt_conn_auth_cb_register>
    4b42:	2100      	movs	r1, #0
    4b44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4b48:	f01a fcaa 	bl	1f4a0 <z_impl_k_sleep>
	heartrate++;
    4b4c:	7823      	ldrb	r3, [r4, #0]
    4b4e:	3301      	adds	r3, #1
    4b50:	b2db      	uxtb	r3, r3
	if (heartrate == 160U) {
    4b52:	2ba0      	cmp	r3, #160	; 0xa0
		heartrate = 90U;
    4b54:	bf08      	it	eq
    4b56:	235a      	moveq	r3, #90	; 0x5a
    4b58:	7023      	strb	r3, [r4, #0]
	bt_hrs_notify(heartrate);
    4b5a:	7820      	ldrb	r0, [r4, #0]
    4b5c:	f001 f944 	bl	5de8 <bt_hrs_notify>
	uint8_t battery_level = bt_bas_get_battery_level();
    4b60:	f001 f8e4 	bl	5d2c <bt_bas_get_battery_level>
	battery_level--;
    4b64:	3801      	subs	r0, #1
		battery_level = 100U;
    4b66:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	bt_bas_set_battery_level(battery_level);
    4b6a:	bf08      	it	eq
    4b6c:	2064      	moveq	r0, #100	; 0x64
    4b6e:	f001 f8e3 	bl	5d38 <bt_bas_set_battery_level>
		while (1) {
    4b72:	e7e6      	b.n	4b42 <main+0xca>
	printk("Advertising successfully started\n");
    4b74:	4815      	ldr	r0, [pc, #84]	; (4bcc <main+0x154>)
    4b76:	f01b ff32 	bl	209de <printk>
    4b7a:	e7db      	b.n	4b34 <main+0xbc>
		printk("This device address has no defined role, going into passive mode...\n");
    4b7c:	4814      	ldr	r0, [pc, #80]	; (4bd0 <main+0x158>)
    4b7e:	f01b ff2e 	bl	209de <printk>
    4b82:	2100      	movs	r1, #0
    4b84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4b88:	f01a fc8a 	bl	1f4a0 <z_impl_k_sleep>
			while (1) {
    4b8c:	e7f9      	b.n	4b82 <main+0x10a>
    4b8e:	bf00      	nop
    4b90:	2000363e 	.word	0x2000363e
    4b94:	00028601 	.word	0x00028601
    4b98:	00028617 	.word	0x00028617
    4b9c:	00028650 	.word	0x00028650
    4ba0:	20000e47 	.word	0x20000e47
    4ba4:	00028670 	.word	0x00028670
    4ba8:	20000138 	.word	0x20000138
    4bac:	00028685 	.word	0x00028685
    4bb0:	000269c8 	.word	0x000269c8
    4bb4:	0002869d 	.word	0x0002869d
    4bb8:	00026a98 	.word	0x00026a98
    4bbc:	000286b4 	.word	0x000286b4
    4bc0:	20000178 	.word	0x20000178
    4bc4:	20000e59 	.word	0x20000e59
    4bc8:	20000154 	.word	0x20000154
    4bcc:	000286da 	.word	0x000286da
    4bd0:	000286fc 	.word	0x000286fc

00004bd4 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    4bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bd8:	b087      	sub	sp, #28
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    4bda:	f8df b088 	ldr.w	fp, [pc, #136]	; 4c64 <print_digits+0x90>
{
    4bde:	9c10      	ldr	r4, [sp, #64]	; 0x40
    4be0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    4be4:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    4be8:	4606      	mov	r6, r0
    4bea:	460f      	mov	r7, r1
    4bec:	4610      	mov	r0, r2
    4bee:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    4bf0:	2514      	movs	r5, #20
		buf[i] = "0123456789abcdef"[num % base];
    4bf2:	ea4f 7ae4 	mov.w	sl, r4, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    4bf6:	ea50 0301 	orrs.w	r3, r0, r1
    4bfa:	d11c      	bne.n	4c36 <print_digits+0x62>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    4bfc:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    4bfe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    4c00:	bf14      	ite	ne
    4c02:	3501      	addne	r5, #1
		buf[i] = '0';
    4c04:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    4c06:	442c      	add	r4, r5
		buf[i] = '0';
    4c08:	bf08      	it	eq
    4c0a:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    4c0e:	2c15      	cmp	r4, #21
    4c10:	d020      	beq.n	4c54 <print_digits+0x80>
    4c12:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
    4c14:	2c00      	cmp	r4, #0
    4c16:	dd02      	ble.n	4c1e <print_digits+0x4a>
    4c18:	f1b9 0f00 	cmp.w	r9, #0
    4c1c:	d115      	bne.n	4c4a <print_digits+0x76>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    4c1e:	f81d 0005 	ldrb.w	r0, [sp, r5]
    4c22:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    4c24:	3501      	adds	r5, #1
		out(buf[i], ctx);
    4c26:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    4c28:	2d15      	cmp	r5, #21
    4c2a:	d1f8      	bne.n	4c1e <print_digits+0x4a>
	}
	for (/**/; pad > 0; pad--) {
    4c2c:	2c00      	cmp	r4, #0
    4c2e:	dc13      	bgt.n	4c58 <print_digits+0x84>
		out(pad_char, ctx);
	}
}
    4c30:	b007      	add	sp, #28
    4c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    4c36:	4622      	mov	r2, r4
    4c38:	4653      	mov	r3, sl
    4c3a:	f7fb fd85 	bl	748 <__aeabi_uldivmod>
    4c3e:	f81b 3002 	ldrb.w	r3, [fp, r2]
    4c42:	f80d 3005 	strb.w	r3, [sp, r5]
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    4c46:	3d01      	subs	r5, #1
    4c48:	e7d5      	b.n	4bf6 <print_digits+0x22>
		out(pad_char, ctx);
    4c4a:	4639      	mov	r1, r7
    4c4c:	4640      	mov	r0, r8
    4c4e:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    4c50:	3c01      	subs	r4, #1
    4c52:	e7df      	b.n	4c14 <print_digits+0x40>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    4c54:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
    4c56:	e7e2      	b.n	4c1e <print_digits+0x4a>
		out(pad_char, ctx);
    4c58:	4639      	mov	r1, r7
    4c5a:	4640      	mov	r0, r8
    4c5c:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    4c5e:	3c01      	subs	r4, #1
    4c60:	e7e4      	b.n	4c2c <print_digits+0x58>
    4c62:	bf00      	nop
    4c64:	00028741 	.word	0x00028741

00004c68 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4c68:	680b      	ldr	r3, [r1, #0]
    4c6a:	3301      	adds	r3, #1
    4c6c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    4c6e:	4b01      	ldr	r3, [pc, #4]	; (4c74 <char_out+0xc>)
    4c70:	681b      	ldr	r3, [r3, #0]
    4c72:	4718      	bx	r3
    4c74:	20000194 	.word	0x20000194

00004c78 <__printk_hook_install>:
	_char_out = fn;
    4c78:	4b01      	ldr	r3, [pc, #4]	; (4c80 <__printk_hook_install+0x8>)
    4c7a:	6018      	str	r0, [r3, #0]
}
    4c7c:	4770      	bx	lr
    4c7e:	bf00      	nop
    4c80:	20000194 	.word	0x20000194

00004c84 <z_vprintk>:
{
    4c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    4c88:	2600      	movs	r6, #0
{
    4c8a:	b087      	sub	sp, #28
    4c8c:	4605      	mov	r5, r0
    4c8e:	468a      	mov	sl, r1
    4c90:	461c      	mov	r4, r3
	while (*fmt) {
    4c92:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
	int min_width = -1;
    4c96:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    4c9a:	4637      	mov	r7, r6
			might_format = 0;
    4c9c:	f04f 0b00 	mov.w	fp, #0
					break;
    4ca0:	e007      	b.n	4cb2 <z_vprintk+0x2e>
		if (!might_format) {
    4ca2:	f1bb 0f00 	cmp.w	fp, #0
    4ca6:	d10b      	bne.n	4cc0 <z_vprintk+0x3c>
			if (*fmt != '%') {
    4ca8:	2825      	cmp	r0, #37	; 0x25
    4caa:	f000 80fd 	beq.w	4ea8 <z_vprintk+0x224>
				out((int)*fmt, ctx);
    4cae:	4651      	mov	r1, sl
    4cb0:	47a8      	blx	r5
	while (*fmt) {
    4cb2:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    4cb6:	2800      	cmp	r0, #0
    4cb8:	d1f3      	bne.n	4ca2 <z_vprintk+0x1e>
}
    4cba:	b007      	add	sp, #28
    4cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    4cc0:	287a      	cmp	r0, #122	; 0x7a
    4cc2:	d80a      	bhi.n	4cda <z_vprintk+0x56>
    4cc4:	2862      	cmp	r0, #98	; 0x62
    4cc6:	d810      	bhi.n	4cea <z_vprintk+0x66>
    4cc8:	2830      	cmp	r0, #48	; 0x30
    4cca:	d051      	beq.n	4d70 <z_vprintk+0xec>
    4ccc:	d844      	bhi.n	4d58 <z_vprintk+0xd4>
    4cce:	2825      	cmp	r0, #37	; 0x25
    4cd0:	f000 80e8 	beq.w	4ea4 <z_vprintk+0x220>
    4cd4:	282d      	cmp	r0, #45	; 0x2d
    4cd6:	f000 80ee 	beq.w	4eb6 <z_vprintk+0x232>
					out((int)'%', ctx);
    4cda:	4651      	mov	r1, sl
    4cdc:	2025      	movs	r0, #37	; 0x25
    4cde:	47a8      	blx	r5
					out((int)*fmt, ctx);
    4ce0:	f899 0000 	ldrb.w	r0, [r9]
    4ce4:	4651      	mov	r1, sl
    4ce6:	47a8      	blx	r5
    4ce8:	e7d8      	b.n	4c9c <z_vprintk+0x18>
			switch (*fmt) {
    4cea:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    4cee:	2b17      	cmp	r3, #23
    4cf0:	d8f3      	bhi.n	4cda <z_vprintk+0x56>
    4cf2:	a201      	add	r2, pc, #4	; (adr r2, 4cf8 <z_vprintk+0x74>)
    4cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4cf8:	00004e9d 	.word	0x00004e9d
    4cfc:	00004db9 	.word	0x00004db9
    4d00:	00004cdb 	.word	0x00004cdb
    4d04:	00004cdb 	.word	0x00004cdb
    4d08:	00004cdb 	.word	0x00004cdb
    4d0c:	00004d9b 	.word	0x00004d9b
    4d10:	00004db9 	.word	0x00004db9
    4d14:	00004cdb 	.word	0x00004cdb
    4d18:	00004cdb 	.word	0x00004cdb
    4d1c:	00004d9b 	.word	0x00004d9b
    4d20:	00004cdb 	.word	0x00004cdb
    4d24:	00004cdb 	.word	0x00004cdb
    4d28:	00004cdb 	.word	0x00004cdb
    4d2c:	00004e21 	.word	0x00004e21
    4d30:	00004cdb 	.word	0x00004cdb
    4d34:	00004cdb 	.word	0x00004cdb
    4d38:	00004e65 	.word	0x00004e65
    4d3c:	00004cdb 	.word	0x00004cdb
    4d40:	00004db9 	.word	0x00004db9
    4d44:	00004cdb 	.word	0x00004cdb
    4d48:	00004cdb 	.word	0x00004cdb
    4d4c:	00004d61 	.word	0x00004d61
    4d50:	00004cdb 	.word	0x00004cdb
    4d54:	00004d9b 	.word	0x00004d9b
    4d58:	2839      	cmp	r0, #57	; 0x39
    4d5a:	d915      	bls.n	4d88 <z_vprintk+0x104>
    4d5c:	2858      	cmp	r0, #88	; 0x58
    4d5e:	d1bc      	bne.n	4cda <z_vprintk+0x56>
				if (*fmt == 'p') {
    4d60:	f899 3000 	ldrb.w	r3, [r9]
    4d64:	2b70      	cmp	r3, #112	; 0x70
    4d66:	d165      	bne.n	4e34 <z_vprintk+0x1b0>
					x = va_arg(ap, unsigned int);
    4d68:	f854 2b04 	ldr.w	r2, [r4], #4
    4d6c:	2300      	movs	r3, #0
    4d6e:	e06c      	b.n	4e4a <z_vprintk+0x1c6>
				if (min_width < 0 && padding == PAD_NONE) {
    4d70:	f1b8 0f00 	cmp.w	r8, #0
    4d74:	da0b      	bge.n	4d8e <z_vprintk+0x10a>
    4d76:	2f00      	cmp	r7, #0
    4d78:	f000 809f 	beq.w	4eba <z_vprintk+0x236>
					min_width = *fmt - '0';
    4d7c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    4d80:	2f00      	cmp	r7, #0
    4d82:	bf08      	it	eq
    4d84:	2702      	moveq	r7, #2
    4d86:	e794      	b.n	4cb2 <z_vprintk+0x2e>
				if (min_width < 0) {
    4d88:	f1b8 0f00 	cmp.w	r8, #0
    4d8c:	dbf6      	blt.n	4d7c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    4d8e:	230a      	movs	r3, #10
    4d90:	fb03 0808 	mla	r8, r3, r8, r0
    4d94:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    4d98:	e7f2      	b.n	4d80 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    4d9a:	2868      	cmp	r0, #104	; 0x68
    4d9c:	d103      	bne.n	4da6 <z_vprintk+0x122>
    4d9e:	2e68      	cmp	r6, #104	; 0x68
    4da0:	d106      	bne.n	4db0 <z_vprintk+0x12c>
					length_mod = 'H';
    4da2:	2648      	movs	r6, #72	; 0x48
    4da4:	e785      	b.n	4cb2 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    4da6:	286c      	cmp	r0, #108	; 0x6c
    4da8:	d102      	bne.n	4db0 <z_vprintk+0x12c>
    4daa:	2e6c      	cmp	r6, #108	; 0x6c
    4dac:	f000 8087 	beq.w	4ebe <z_vprintk+0x23a>
				} else if (length_mod == 0) {
    4db0:	2e00      	cmp	r6, #0
    4db2:	d192      	bne.n	4cda <z_vprintk+0x56>
    4db4:	4606      	mov	r6, r0
    4db6:	e77c      	b.n	4cb2 <z_vprintk+0x2e>
				if (length_mod == 'z') {
    4db8:	2e7a      	cmp	r6, #122	; 0x7a
    4dba:	d104      	bne.n	4dc6 <z_vprintk+0x142>
					d = va_arg(ap, int);
    4dbc:	f854 2b04 	ldr.w	r2, [r4], #4
    4dc0:	ea4f 7be2 	mov.w	fp, r2, asr #31
    4dc4:	e00b      	b.n	4dde <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
    4dc6:	2e6c      	cmp	r6, #108	; 0x6c
    4dc8:	d0f8      	beq.n	4dbc <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    4dca:	2e4c      	cmp	r6, #76	; 0x4c
    4dcc:	d1f6      	bne.n	4dbc <z_vprintk+0x138>
					long long lld = va_arg(ap, long long);
    4dce:	1de3      	adds	r3, r4, #7
    4dd0:	f023 0307 	bic.w	r3, r3, #7
    4dd4:	461c      	mov	r4, r3
					d = (printk_val_t) lld;
    4dd6:	f8d3 b004 	ldr.w	fp, [r3, #4]
    4dda:	f854 2b08 	ldr.w	r2, [r4], #8
				if (*fmt != 'u' && negative(d)) {
    4dde:	2875      	cmp	r0, #117	; 0x75
    4de0:	d00c      	beq.n	4dfc <z_vprintk+0x178>
    4de2:	f1bb 0f00 	cmp.w	fp, #0
    4de6:	da09      	bge.n	4dfc <z_vprintk+0x178>
					out((int)'-', ctx);
    4de8:	4651      	mov	r1, sl
    4dea:	202d      	movs	r0, #45	; 0x2d
    4dec:	9205      	str	r2, [sp, #20]
    4dee:	47a8      	blx	r5
					d = -d;
    4df0:	9a05      	ldr	r2, [sp, #20]
    4df2:	4252      	negs	r2, r2
    4df4:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
					min_width--;
    4df8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    4dfc:	1efb      	subs	r3, r7, #3
    4dfe:	bf18      	it	ne
    4e00:	2301      	movne	r3, #1
    4e02:	2f01      	cmp	r7, #1
    4e04:	bf0c      	ite	eq
    4e06:	2030      	moveq	r0, #48	; 0x30
    4e08:	2020      	movne	r0, #32
    4e0a:	e9cd 0802 	strd	r0, r8, [sp, #8]
    4e0e:	9301      	str	r3, [sp, #4]
    4e10:	230a      	movs	r3, #10
    4e12:	9300      	str	r3, [sp, #0]
    4e14:	465b      	mov	r3, fp
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    4e16:	4651      	mov	r1, sl
    4e18:	4628      	mov	r0, r5
    4e1a:	f7ff fedb 	bl	4bd4 <print_digits>
    4e1e:	e73d      	b.n	4c9c <z_vprintk+0x18>
				out('0', ctx);
    4e20:	4651      	mov	r1, sl
    4e22:	2030      	movs	r0, #48	; 0x30
    4e24:	47a8      	blx	r5
				out('x', ctx);
    4e26:	4651      	mov	r1, sl
    4e28:	2078      	movs	r0, #120	; 0x78
    4e2a:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
    4e2c:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    4e30:	2701      	movs	r7, #1
    4e32:	e795      	b.n	4d60 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    4e34:	2e6c      	cmp	r6, #108	; 0x6c
    4e36:	d097      	beq.n	4d68 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    4e38:	2e4c      	cmp	r6, #76	; 0x4c
    4e3a:	d195      	bne.n	4d68 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    4e3c:	1de3      	adds	r3, r4, #7
    4e3e:	f023 0307 	bic.w	r3, r3, #7
    4e42:	461c      	mov	r4, r3
    4e44:	685b      	ldr	r3, [r3, #4]
    4e46:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    4e4a:	1ef8      	subs	r0, r7, #3
    4e4c:	bf18      	it	ne
    4e4e:	2001      	movne	r0, #1
    4e50:	2f01      	cmp	r7, #1
    4e52:	bf0c      	ite	eq
    4e54:	2130      	moveq	r1, #48	; 0x30
    4e56:	2120      	movne	r1, #32
    4e58:	e9cd 1802 	strd	r1, r8, [sp, #8]
    4e5c:	2110      	movs	r1, #16
    4e5e:	9001      	str	r0, [sp, #4]
    4e60:	9100      	str	r1, [sp, #0]
    4e62:	e7d8      	b.n	4e16 <z_vprintk+0x192>
				char *s = va_arg(ap, char *);
    4e64:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
    4e68:	469b      	mov	fp, r3
    4e6a:	465a      	mov	r2, fp
    4e6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
    4e70:	b978      	cbnz	r0, 4e92 <z_vprintk+0x20e>
				if (padding == PAD_SPACE_AFTER) {
    4e72:	2f03      	cmp	r7, #3
    4e74:	d125      	bne.n	4ec2 <z_vprintk+0x23e>
					int remaining = min_width - (s - start);
    4e76:	eba2 0b03 	sub.w	fp, r2, r3
    4e7a:	eba8 0b0b 	sub.w	fp, r8, fp
					while (remaining-- > 0) {
    4e7e:	f1bb 0f00 	cmp.w	fp, #0
    4e82:	f77f af0b 	ble.w	4c9c <z_vprintk+0x18>
						out(' ', ctx);
    4e86:	4651      	mov	r1, sl
    4e88:	2020      	movs	r0, #32
    4e8a:	47a8      	blx	r5
    4e8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    4e90:	e7f5      	b.n	4e7e <z_vprintk+0x1fa>
					out((int)(*s++), ctx);
    4e92:	4651      	mov	r1, sl
    4e94:	9305      	str	r3, [sp, #20]
    4e96:	47a8      	blx	r5
    4e98:	9b05      	ldr	r3, [sp, #20]
    4e9a:	e7e6      	b.n	4e6a <z_vprintk+0x1e6>
				out(c, ctx);
    4e9c:	f854 0b04 	ldr.w	r0, [r4], #4
    4ea0:	4651      	mov	r1, sl
    4ea2:	e720      	b.n	4ce6 <z_vprintk+0x62>
				out((int)'%', ctx);
    4ea4:	4651      	mov	r1, sl
    4ea6:	e71e      	b.n	4ce6 <z_vprintk+0x62>
				length_mod = 0;
    4ea8:	465e      	mov	r6, fp
				padding = PAD_NONE;
    4eaa:	465f      	mov	r7, fp
				min_width = -1;
    4eac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
    4eb0:	f04f 0b01 	mov.w	fp, #1
    4eb4:	e6fd      	b.n	4cb2 <z_vprintk+0x2e>
			switch (*fmt) {
    4eb6:	2703      	movs	r7, #3
    4eb8:	e6fb      	b.n	4cb2 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
    4eba:	2701      	movs	r7, #1
    4ebc:	e6f9      	b.n	4cb2 <z_vprintk+0x2e>
					length_mod = 'L';
    4ebe:	264c      	movs	r6, #76	; 0x4c
    4ec0:	e6f7      	b.n	4cb2 <z_vprintk+0x2e>
			might_format = 0;
    4ec2:	4683      	mov	fp, r0
    4ec4:	e6f5      	b.n	4cb2 <z_vprintk+0x2e>
    4ec6:	bf00      	nop

00004ec8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4ec8:	b507      	push	{r0, r1, r2, lr}
    4eca:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    4ecc:	2100      	movs	r1, #0
{
    4ece:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    4ed0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    4ed2:	4803      	ldr	r0, [pc, #12]	; (4ee0 <vprintk+0x18>)
    4ed4:	a901      	add	r1, sp, #4
    4ed6:	f7ff fed5 	bl	4c84 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    4eda:	b003      	add	sp, #12
    4edc:	f85d fb04 	ldr.w	pc, [sp], #4
    4ee0:	00004c69 	.word	0x00004c69

00004ee4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4ee4:	b530      	push	{r4, r5, lr}
    4ee6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4ee8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4eec:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4eee:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    4ef0:	4805      	ldr	r0, [pc, #20]	; (4f08 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4ef2:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    4ef4:	a901      	add	r1, sp, #4
    4ef6:	f7ff fec5 	bl	4c84 <z_vprintk>

	if (ctx.count < ctx.max) {
    4efa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4efe:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4f00:	bfb8      	it	lt
    4f02:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4f04:	b005      	add	sp, #20
    4f06:	bd30      	pop	{r4, r5, pc}
    4f08:	000209b9 	.word	0x000209b9

00004f0c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4f10:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4f14:	f019 0808 	ands.w	r8, r9, #8
{
    4f18:	4604      	mov	r4, r0
    4f1a:	4693      	mov	fp, r2
	if (processing) {
    4f1c:	d00d      	beq.n	4f3a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4f1e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4f20:	bf0c      	ite	eq
    4f22:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4f26:	f049 0920 	orrne.w	r9, r9, #32
    4f2a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4f2e:	f38b 8811 	msr	BASEPRI, fp
    4f32:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4f36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4f3a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4f3e:	2902      	cmp	r1, #2
    4f40:	d107      	bne.n	4f52 <process_event+0x46>
			evt = process_recheck(mgr);
    4f42:	4620      	mov	r0, r4
    4f44:	f01b fd65 	bl	20a12 <process_recheck>
		if (evt == EVT_NOP) {
    4f48:	2800      	cmp	r0, #0
    4f4a:	d0f0      	beq.n	4f2e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4f4c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f4e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    4f50:	d14e      	bne.n	4ff0 <process_event+0xe4>
			res = mgr->last_res;
    4f52:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4f54:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4f56:	2f00      	cmp	r7, #0
    4f58:	da15      	bge.n	4f86 <process_event+0x7a>
		*clients = mgr->clients;
    4f5a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f5c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4f60:	e9c4 8800 	strd	r8, r8, [r4]
    4f64:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4f68:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4f6a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4f6c:	8b21      	ldrh	r1, [r4, #24]
    4f6e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4f72:	45ca      	cmp	sl, r9
    4f74:	d002      	beq.n	4f7c <process_event+0x70>
		if (do_monitors
    4f76:	68a3      	ldr	r3, [r4, #8]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d15a      	bne.n	5032 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    4f7c:	b90d      	cbnz	r5, 4f82 <process_event+0x76>
		    || (transit != NULL)) {
    4f7e:	2e00      	cmp	r6, #0
    4f80:	d071      	beq.n	5066 <process_event+0x15a>
    4f82:	2300      	movs	r3, #0
    4f84:	e056      	b.n	5034 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4f86:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4f8a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4f8c:	2a01      	cmp	r2, #1
    4f8e:	d81e      	bhi.n	4fce <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f90:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4f94:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4f96:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f98:	b289      	uxth	r1, r1
    4f9a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4f9e:	d10a      	bne.n	4fb6 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4fa0:	b13d      	cbz	r5, 4fb2 <process_event+0xa6>
    4fa2:	8b63      	ldrh	r3, [r4, #26]
    4fa4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    4fa6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    4fa8:	3301      	adds	r3, #1
    4faa:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4fac:	2a00      	cmp	r2, #0
    4fae:	d1fa      	bne.n	4fa6 <process_event+0x9a>
    4fb0:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4fb2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4fb6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4fb8:	4620      	mov	r0, r4
    4fba:	f01b fd2a 	bl	20a12 <process_recheck>
    4fbe:	4606      	mov	r6, r0
    4fc0:	2800      	cmp	r0, #0
    4fc2:	d0d3      	beq.n	4f6c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4fc4:	8b23      	ldrh	r3, [r4, #24]
    4fc6:	f043 0320 	orr.w	r3, r3, #32
    4fca:	8323      	strh	r3, [r4, #24]
    4fcc:	e7cd      	b.n	4f6a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4fce:	2b04      	cmp	r3, #4
    4fd0:	d10c      	bne.n	4fec <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4fd2:	f021 0107 	bic.w	r1, r1, #7
    4fd6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4fd8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4fda:	4620      	mov	r0, r4
    4fdc:	f01b fd19 	bl	20a12 <process_recheck>
    4fe0:	4605      	mov	r5, r0
    4fe2:	2800      	cmp	r0, #0
    4fe4:	d0c1      	beq.n	4f6a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4fe6:	f041 0120 	orr.w	r1, r1, #32
    4fea:	8321      	strh	r1, [r4, #24]
    4fec:	2500      	movs	r5, #0
    4fee:	e7bc      	b.n	4f6a <process_event+0x5e>
		} else if (evt == EVT_START) {
    4ff0:	2803      	cmp	r0, #3
    4ff2:	d109      	bne.n	5008 <process_event+0xfc>
			transit = mgr->transitions->start;
    4ff4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ff6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4ffa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ffc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    5000:	8323      	strh	r3, [r4, #24]
}
    5002:	2500      	movs	r5, #0
		res = 0;
    5004:	462f      	mov	r7, r5
    5006:	e7b1      	b.n	4f6c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    5008:	2804      	cmp	r0, #4
    500a:	d106      	bne.n	501a <process_event+0x10e>
			transit = mgr->transitions->stop;
    500c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    500e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    5012:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5014:	f043 0304 	orr.w	r3, r3, #4
    5018:	e7f2      	b.n	5000 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    501a:	2805      	cmp	r0, #5
    501c:	d106      	bne.n	502c <process_event+0x120>
			transit = mgr->transitions->reset;
    501e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5020:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    5024:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5026:	f043 0305 	orr.w	r3, r3, #5
    502a:	e7e9      	b.n	5000 <process_event+0xf4>
    502c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    502e:	462e      	mov	r6, r5
    5030:	e7e8      	b.n	5004 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    5032:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    5034:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    5038:	8321      	strh	r1, [r4, #24]
    503a:	f38b 8811 	msr	BASEPRI, fp
    503e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    5042:	b9fb      	cbnz	r3, 5084 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    5044:	bb85      	cbnz	r5, 50a8 <process_event+0x19c>
			if (transit != NULL) {
    5046:	b116      	cbz	r6, 504e <process_event+0x142>
				transit(mgr, transition_complete);
    5048:	491f      	ldr	r1, [pc, #124]	; (50c8 <process_event+0x1bc>)
    504a:	4620      	mov	r0, r4
    504c:	47b0      	blx	r6
	__asm__ volatile(
    504e:	f04f 0320 	mov.w	r3, #32
    5052:	f3ef 8b11 	mrs	fp, BASEPRI
    5056:	f383 8811 	msr	BASEPRI, r3
    505a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    505e:	8b23      	ldrh	r3, [r4, #24]
    5060:	f023 0308 	bic.w	r3, r3, #8
    5064:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    5066:	8b23      	ldrh	r3, [r4, #24]
    5068:	06da      	lsls	r2, r3, #27
    506a:	d525      	bpl.n	50b8 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    506c:	f023 0310 	bic.w	r3, r3, #16
    5070:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    5072:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    5074:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    5078:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    507c:	2900      	cmp	r1, #0
    507e:	f47f af5e 	bne.w	4f3e <process_event+0x32>
out:
    5082:	e754      	b.n	4f2e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    5084:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5086:	2900      	cmp	r1, #0
    5088:	d0dc      	beq.n	5044 <process_event+0x138>
	return node->next;
    508a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    508e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    5092:	463b      	mov	r3, r7
    5094:	4652      	mov	r2, sl
    5096:	4620      	mov	r0, r4
    5098:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    509a:	f1b9 0f00 	cmp.w	r9, #0
    509e:	d0d1      	beq.n	5044 <process_event+0x138>
    50a0:	4649      	mov	r1, r9
    50a2:	f8d9 9000 	ldr.w	r9, [r9]
    50a6:	e7f2      	b.n	508e <process_event+0x182>
    50a8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    50aa:	463b      	mov	r3, r7
    50ac:	4652      	mov	r2, sl
    50ae:	4620      	mov	r0, r4
    50b0:	682d      	ldr	r5, [r5, #0]
    50b2:	f01b fcca 	bl	20a4a <notify_one>
    50b6:	e7c5      	b.n	5044 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    50b8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    50bc:	bf1e      	ittt	ne
    50be:	f023 0320 	bicne.w	r3, r3, #32
    50c2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    50c4:	2102      	movne	r1, #2
    50c6:	e7d5      	b.n	5074 <process_event+0x168>
    50c8:	00020a77 	.word	0x00020a77

000050cc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    50cc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    50ce:	4910      	ldr	r1, [pc, #64]	; (5110 <enable_logger+0x44>)
    50d0:	4810      	ldr	r0, [pc, #64]	; (5114 <enable_logger+0x48>)
{
    50d2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    50d4:	2200      	movs	r2, #0
    50d6:	f020 ff68 	bl	25faa <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    50da:	4d0f      	ldr	r5, [pc, #60]	; (5118 <enable_logger+0x4c>)
    50dc:	490f      	ldr	r1, [pc, #60]	; (511c <enable_logger+0x50>)
    50de:	2200      	movs	r2, #0
    50e0:	2300      	movs	r3, #0
    50e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    50e6:	2400      	movs	r4, #0
    50e8:	230e      	movs	r3, #14
    50ea:	e9cd 3403 	strd	r3, r4, [sp, #12]
    50ee:	e9cd 4401 	strd	r4, r4, [sp, #4]
    50f2:	4b0b      	ldr	r3, [pc, #44]	; (5120 <enable_logger+0x54>)
    50f4:	9400      	str	r4, [sp, #0]
    50f6:	f44f 7240 	mov.w	r2, #768	; 0x300
    50fa:	4628      	mov	r0, r5
    50fc:	f01a fa86 	bl	1f60c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5100:	4908      	ldr	r1, [pc, #32]	; (5124 <enable_logger+0x58>)
    5102:	4628      	mov	r0, r5
    5104:	f020 fe58 	bl	25db8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5108:	4620      	mov	r0, r4
    510a:	b009      	add	sp, #36	; 0x24
    510c:	bd30      	pop	{r4, r5, pc}
    510e:	bf00      	nop
    5110:	00005129 	.word	0x00005129
    5114:	200010e8 	.word	0x200010e8
    5118:	20001120 	.word	0x20001120
    511c:	20003d90 	.word	0x20003d90
    5120:	000054e9 	.word	0x000054e9
    5124:	00028752 	.word	0x00028752

00005128 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5128:	4801      	ldr	r0, [pc, #4]	; (5130 <log_process_thread_timer_expiry_fn+0x8>)
    512a:	f01a b9d9 	b.w	1f4e0 <z_impl_k_sem_give>
    512e:	bf00      	nop
    5130:	20000f80 	.word	0x20000f80

00005134 <z_log_get_s_mask>:
{
    5134:	b5f0      	push	{r4, r5, r6, r7, lr}
    5136:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    5138:	4e0f      	ldr	r6, [pc, #60]	; (5178 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0;
    513a:	2000      	movs	r0, #0
	uint32_t arg = 0;
    513c:	4603      	mov	r3, r0
	bool arm = false;
    513e:	4602      	mov	r2, r0
				mask |= BIT(arg);
    5140:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    5142:	f815 4b01 	ldrb.w	r4, [r5], #1
    5146:	b10c      	cbz	r4, 514c <z_log_get_s_mask+0x18>
    5148:	428b      	cmp	r3, r1
    514a:	d300      	bcc.n	514e <z_log_get_s_mask+0x1a>
}
    514c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    514e:	2c25      	cmp	r4, #37	; 0x25
    5150:	d102      	bne.n	5158 <z_log_get_s_mask+0x24>
			arm = !arm;
    5152:	f082 0201 	eor.w	r2, r2, #1
    5156:	e7f4      	b.n	5142 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    5158:	2a00      	cmp	r2, #0
    515a:	d0f2      	beq.n	5142 <z_log_get_s_mask+0xe>
    515c:	f814 c006 	ldrb.w	ip, [r4, r6]
    5160:	f01c 0f03 	tst.w	ip, #3
    5164:	d0ed      	beq.n	5142 <z_log_get_s_mask+0xe>
			if (curr == 's') {
    5166:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    5168:	bf04      	itt	eq
    516a:	fa07 f203 	lsleq.w	r2, r7, r3
    516e:	4310      	orreq	r0, r2
			arg++;
    5170:	3301      	adds	r3, #1
			arm = false;
    5172:	2200      	movs	r2, #0
    5174:	e7e5      	b.n	5142 <z_log_get_s_mask+0xe>
    5176:	bf00      	nop
    5178:	0002a5a3 	.word	0x0002a5a3

0000517c <log_core_init>:
{
    517c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    517e:	f000 fa77 	bl	5670 <log_msg_pool_init>
		log_list_init(&list);
    5182:	4809      	ldr	r0, [pc, #36]	; (51a8 <log_core_init+0x2c>)
    5184:	f01b ff61 	bl	2104a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    5188:	2304      	movs	r3, #4
    518a:	2228      	movs	r2, #40	; 0x28
    518c:	4907      	ldr	r1, [pc, #28]	; (51ac <log_core_init+0x30>)
    518e:	4808      	ldr	r0, [pc, #32]	; (51b0 <log_core_init+0x34>)
    5190:	f020 fbfe 	bl	25990 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    5194:	4b07      	ldr	r3, [pc, #28]	; (51b4 <log_core_init+0x38>)
    5196:	4a08      	ldr	r2, [pc, #32]	; (51b8 <log_core_init+0x3c>)
    5198:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    519a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    519e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    51a2:	f000 bcb1 	b.w	5b08 <log_output_timestamp_freq_set>
    51a6:	bf00      	nop
    51a8:	20001a1c 	.word	0x20001a1c
    51ac:	200060e0 	.word	0x200060e0
    51b0:	20001a24 	.word	0x20001a24
    51b4:	20000198 	.word	0x20000198
    51b8:	00021089 	.word	0x00021089

000051bc <dropped_notify>:
{
    51bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51be:	4b0f      	ldr	r3, [pc, #60]	; (51fc <dropped_notify+0x40>)
    51c0:	f3bf 8f5b 	dmb	ish
    51c4:	2500      	movs	r5, #0
    51c6:	e853 7f00 	ldrex	r7, [r3]
    51ca:	e843 5200 	strex	r2, r5, [r3]
    51ce:	2a00      	cmp	r2, #0
    51d0:	d1f9      	bne.n	51c6 <dropped_notify+0xa>
    51d2:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    51d6:	4c0a      	ldr	r4, [pc, #40]	; (5200 <dropped_notify+0x44>)
    51d8:	4e0a      	ldr	r6, [pc, #40]	; (5204 <dropped_notify+0x48>)
    51da:	1b36      	subs	r6, r6, r4
    51dc:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    51de:	42b5      	cmp	r5, r6
    51e0:	db00      	blt.n	51e4 <dropped_notify+0x28>
}
    51e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    51e4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    51e6:	795b      	ldrb	r3, [r3, #5]
    51e8:	b12b      	cbz	r3, 51f6 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    51ea:	6823      	ldr	r3, [r4, #0]
    51ec:	68db      	ldr	r3, [r3, #12]
    51ee:	b113      	cbz	r3, 51f6 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    51f0:	4639      	mov	r1, r7
    51f2:	4620      	mov	r0, r4
    51f4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    51f6:	3501      	adds	r5, #1
    51f8:	3410      	adds	r4, #16
    51fa:	e7f0      	b.n	51de <dropped_notify+0x22>
    51fc:	20001a14 	.word	0x20001a14
    5200:	00026990 	.word	0x00026990
    5204:	000269b0 	.word	0x000269b0

00005208 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5208:	4b06      	ldr	r3, [pc, #24]	; (5224 <log_dropped+0x1c>)
    520a:	f3bf 8f5b 	dmb	ish
    520e:	e853 2f00 	ldrex	r2, [r3]
    5212:	3201      	adds	r2, #1
    5214:	e843 2100 	strex	r1, r2, [r3]
    5218:	2900      	cmp	r1, #0
    521a:	d1f8      	bne.n	520e <log_dropped+0x6>
    521c:	f3bf 8f5b 	dmb	ish
}
    5220:	4770      	bx	lr
    5222:	bf00      	nop
    5224:	20001a14 	.word	0x20001a14

00005228 <log_source_name_get>:
    5228:	4a04      	ldr	r2, [pc, #16]	; (523c <log_source_name_get+0x14>)
    522a:	4b05      	ldr	r3, [pc, #20]	; (5240 <log_source_name_get+0x18>)
    522c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    522e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    5232:	bf34      	ite	cc
    5234:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    5238:	2000      	movcs	r0, #0
}
    523a:	4770      	bx	lr
    523c:	00026828 	.word	0x00026828
    5240:	00026990 	.word	0x00026990

00005244 <log_backend_enable>:
	id += backend - log_backend_get(0);
    5244:	4a09      	ldr	r2, [pc, #36]	; (526c <log_backend_enable+0x28>)
	backend->cb->id = id;
    5246:	6843      	ldr	r3, [r0, #4]
    5248:	1a80      	subs	r0, r0, r2
{
    524a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    524c:	1100      	asrs	r0, r0, #4
	if (!backend_attached) {
    524e:	4c08      	ldr	r4, [pc, #32]	; (5270 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    5250:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    5252:	3001      	adds	r0, #1
	backend->cb->active = true;
    5254:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    5256:	7118      	strb	r0, [r3, #4]
    5258:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
    525a:	7823      	ldrb	r3, [r4, #0]
    525c:	b913      	cbnz	r3, 5264 <log_backend_enable+0x20>
    525e:	4805      	ldr	r0, [pc, #20]	; (5274 <log_backend_enable+0x30>)
    5260:	f01a f93e 	bl	1f4e0 <z_impl_k_sem_give>
	backend_attached = true;
    5264:	2301      	movs	r3, #1
    5266:	7023      	strb	r3, [r4, #0]
}
    5268:	bd10      	pop	{r4, pc}
    526a:	bf00      	nop
    526c:	00026990 	.word	0x00026990
    5270:	20003646 	.word	0x20003646
    5274:	20000f80 	.word	0x20000f80

00005278 <log_init>:
{
    5278:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    527a:	4b15      	ldr	r3, [pc, #84]	; (52d0 <log_init+0x58>)
    527c:	4c15      	ldr	r4, [pc, #84]	; (52d4 <log_init+0x5c>)
    527e:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    5280:	2b90      	cmp	r3, #144	; 0x90
    5282:	d906      	bls.n	5292 <log_init+0x1a>
    5284:	4b14      	ldr	r3, [pc, #80]	; (52d8 <log_init+0x60>)
    5286:	4a15      	ldr	r2, [pc, #84]	; (52dc <log_init+0x64>)
    5288:	4815      	ldr	r0, [pc, #84]	; (52e0 <log_init+0x68>)
    528a:	f240 210b 	movw	r1, #523	; 0x20b
    528e:	f01a fce3 	bl	1fc58 <__assert_func>
    5292:	4a14      	ldr	r2, [pc, #80]	; (52e4 <log_init+0x6c>)
    5294:	f3bf 8f5b 	dmb	ish
    5298:	e852 6f00 	ldrex	r6, [r2]
    529c:	1c71      	adds	r1, r6, #1
    529e:	e842 1000 	strex	r0, r1, [r2]
    52a2:	2800      	cmp	r0, #0
    52a4:	d1f8      	bne.n	5298 <log_init+0x20>
    52a6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    52aa:	b916      	cbnz	r6, 52b2 <log_init+0x3a>
    52ac:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    52ae:	42ae      	cmp	r6, r5
    52b0:	db00      	blt.n	52b4 <log_init+0x3c>
}
    52b2:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    52b4:	7b23      	ldrb	r3, [r4, #12]
    52b6:	b143      	cbz	r3, 52ca <log_init+0x52>
			if (backend->api->init != NULL) {
    52b8:	6823      	ldr	r3, [r4, #0]
    52ba:	695b      	ldr	r3, [r3, #20]
    52bc:	b103      	cbz	r3, 52c0 <log_init+0x48>
				backend->api->init();
    52be:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    52c0:	2204      	movs	r2, #4
    52c2:	2100      	movs	r1, #0
    52c4:	4620      	mov	r0, r4
    52c6:	f7ff ffbd 	bl	5244 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    52ca:	3601      	adds	r6, #1
    52cc:	3410      	adds	r4, #16
    52ce:	e7ee      	b.n	52ae <log_init+0x36>
    52d0:	000269b0 	.word	0x000269b0
    52d4:	00026990 	.word	0x00026990
    52d8:	00028787 	.word	0x00028787
    52dc:	00028817 	.word	0x00028817
    52e0:	0002875a 	.word	0x0002875a
    52e4:	20001a18 	.word	0x20001a18

000052e8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    52e8:	4b17      	ldr	r3, [pc, #92]	; (5348 <log_strdup+0x60>)
    52ea:	4298      	cmp	r0, r3
{
    52ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    52ee:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    52f0:	d302      	bcc.n	52f8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    52f2:	4b16      	ldr	r3, [pc, #88]	; (534c <log_strdup+0x64>)
    52f4:	4298      	cmp	r0, r3
    52f6:	d321      	bcc.n	533c <log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    52f8:	4815      	ldr	r0, [pc, #84]	; (5350 <log_strdup+0x68>)
    52fa:	2200      	movs	r2, #0
    52fc:	2300      	movs	r3, #0
    52fe:	a901      	add	r1, sp, #4
    5300:	f019 fc5c 	bl	1ebbc <k_mem_slab_alloc>
	if (err != 0) {
    5304:	4605      	mov	r5, r0
    5306:	b9e0      	cbnz	r0, 5342 <log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5308:	2201      	movs	r2, #1
    530a:	9b01      	ldr	r3, [sp, #4]
    530c:	f3bf 8f5b 	dmb	ish
    5310:	e853 1f00 	ldrex	r1, [r3]
    5314:	e843 2000 	strex	r0, r2, [r3]
    5318:	2800      	cmp	r0, #0
    531a:	d1f9      	bne.n	5310 <log_strdup+0x28>
    531c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    5320:	9e01      	ldr	r6, [sp, #4]
    5322:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    5324:	221f      	movs	r2, #31
    5326:	4618      	mov	r0, r3
    5328:	4621      	mov	r1, r4
    532a:	f021 f866 	bl	263fa <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    532e:	227e      	movs	r2, #126	; 0x7e
    5330:	4603      	mov	r3, r0
    5332:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    5336:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    533a:	461c      	mov	r4, r3
}
    533c:	4620      	mov	r0, r4
    533e:	b002      	add	sp, #8
    5340:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    5342:	4b04      	ldr	r3, [pc, #16]	; (5354 <log_strdup+0x6c>)
    5344:	e7f9      	b.n	533a <log_strdup+0x52>
    5346:	bf00      	nop
    5348:	000265cc 	.word	0x000265cc
    534c:	0002a6c8 	.word	0x0002a6c8
    5350:	20001a24 	.word	0x20001a24
    5354:	000287ba 	.word	0x000287ba

00005358 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    5358:	b148      	cbz	r0, 536e <log_is_strdup+0x16>
    535a:	4b05      	ldr	r3, [pc, #20]	; (5370 <log_is_strdup+0x18>)
    535c:	4298      	cmp	r0, r3
    535e:	d305      	bcc.n	536c <log_is_strdup+0x14>
    5360:	33a0      	adds	r3, #160	; 0xa0
    5362:	4298      	cmp	r0, r3
    5364:	bf2c      	ite	cs
    5366:	2000      	movcs	r0, #0
    5368:	2001      	movcc	r0, #1
    536a:	4770      	bx	lr
    536c:	2000      	movs	r0, #0
}
    536e:	4770      	bx	lr
    5370:	200060e0 	.word	0x200060e0

00005374 <z_impl_log_process>:
{
    5374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    5378:	4b4d      	ldr	r3, [pc, #308]	; (54b0 <z_impl_log_process+0x13c>)
    537a:	781b      	ldrb	r3, [r3, #0]
{
    537c:	b085      	sub	sp, #20
    537e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    5380:	b903      	cbnz	r3, 5384 <z_impl_log_process+0x10>
    5382:	b360      	cbz	r0, 53de <z_impl_log_process+0x6a>
    5384:	f04f 0320 	mov.w	r3, #32
    5388:	f3ef 8611 	mrs	r6, BASEPRI
    538c:	f383 8811 	msr	BASEPRI, r3
    5390:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    5394:	4847      	ldr	r0, [pc, #284]	; (54b4 <z_impl_log_process+0x140>)
    5396:	f01b fe68 	bl	2106a <log_list_head_get>
    539a:	4605      	mov	r5, r0
	__asm__ volatile(
    539c:	f386 8811 	msr	BASEPRI, r6
    53a0:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    53a4:	b178      	cbz	r0, 53c6 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    53a6:	f3bf 8f5b 	dmb	ish
    53aa:	4b43      	ldr	r3, [pc, #268]	; (54b8 <z_impl_log_process+0x144>)
    53ac:	e853 2f00 	ldrex	r2, [r3]
    53b0:	3a01      	subs	r2, #1
    53b2:	e843 2100 	strex	r1, r2, [r3]
    53b6:	2900      	cmp	r1, #0
    53b8:	d1f8      	bne.n	53ac <z_impl_log_process+0x38>
    53ba:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    53be:	b194      	cbz	r4, 53e6 <z_impl_log_process+0x72>
	log_msg_put(msg);
    53c0:	4628      	mov	r0, r5
    53c2:	f01b ff48 	bl	21256 <log_msg_put>
	if (!bypass && dropped_cnt) {
    53c6:	b924      	cbnz	r4, 53d2 <z_impl_log_process+0x5e>
    53c8:	4b3c      	ldr	r3, [pc, #240]	; (54bc <z_impl_log_process+0x148>)
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	b10b      	cbz	r3, 53d2 <z_impl_log_process+0x5e>
		dropped_notify();
    53ce:	f7ff fef5 	bl	51bc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    53d2:	4838      	ldr	r0, [pc, #224]	; (54b4 <z_impl_log_process+0x140>)
    53d4:	f01b fe47 	bl	21066 <log_list_head_peek>
    53d8:	1e04      	subs	r4, r0, #0
    53da:	bf18      	it	ne
    53dc:	2401      	movne	r4, #1
}
    53de:	4620      	mov	r0, r4
    53e0:	b005      	add	sp, #20
    53e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    53e6:	4b36      	ldr	r3, [pc, #216]	; (54c0 <z_impl_log_process+0x14c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    53e8:	781b      	ldrb	r3, [r3, #0]
    53ea:	b9e3      	cbnz	r3, 5426 <z_impl_log_process+0xb2>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    53ec:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    53ee:	07db      	lsls	r3, r3, #31
    53f0:	d419      	bmi.n	5426 <z_impl_log_process+0xb2>
	msg_str = log_msg_str_get(msg);
    53f2:	f01b ff43 	bl	2127c <log_msg_str_get>
    53f6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    53f8:	4628      	mov	r0, r5
    53fa:	f01b ff0a 	bl	21212 <log_msg_nargs_get>
    53fe:	4601      	mov	r1, r0
    5400:	4638      	mov	r0, r7
    5402:	f7ff fe97 	bl	5134 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5406:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 54c4 <z_impl_log_process+0x150>
    540a:	4b2f      	ldr	r3, [pc, #188]	; (54c8 <z_impl_log_process+0x154>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    540c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 54cc <z_impl_log_process+0x158>
    5410:	eba3 0308 	sub.w	r3, r3, r8
    5414:	08db      	lsrs	r3, r3, #3
    5416:	9303      	str	r3, [sp, #12]
    5418:	4b2d      	ldr	r3, [pc, #180]	; (54d0 <z_impl_log_process+0x15c>)
    541a:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    541e:	4606      	mov	r6, r0
    5420:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    5424:	b936      	cbnz	r6, 5434 <z_impl_log_process+0xc0>
    5426:	4e2b      	ldr	r6, [pc, #172]	; (54d4 <z_impl_log_process+0x160>)
    5428:	4f2b      	ldr	r7, [pc, #172]	; (54d8 <z_impl_log_process+0x164>)
    542a:	1bbf      	subs	r7, r7, r6
    542c:	113f      	asrs	r7, r7, #4
    542e:	f04f 0800 	mov.w	r8, #0
    5432:	e03a      	b.n	54aa <z_impl_log_process+0x136>
		idx = 31 - __builtin_clz(mask);
    5434:	fab6 f186 	clz	r1, r6
    5438:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    543c:	4649      	mov	r1, r9
    543e:	4628      	mov	r0, r5
    5440:	f01b feea 	bl	21218 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    5444:	4b25      	ldr	r3, [pc, #148]	; (54dc <z_impl_log_process+0x168>)
    5446:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    5448:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    544a:	d302      	bcc.n	5452 <z_impl_log_process+0xde>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    544c:	4a24      	ldr	r2, [pc, #144]	; (54e0 <z_impl_log_process+0x16c>)
    544e:	4290      	cmp	r0, r2
    5450:	d31a      	bcc.n	5488 <z_impl_log_process+0x114>
    5452:	4608      	mov	r0, r1
    5454:	f7ff ff80 	bl	5358 <log_is_strdup>
    5458:	4602      	mov	r2, r0
    545a:	b9a8      	cbnz	r0, 5488 <z_impl_log_process+0x114>
    545c:	4b21      	ldr	r3, [pc, #132]	; (54e4 <z_impl_log_process+0x170>)
    545e:	4299      	cmp	r1, r3
    5460:	d012      	beq.n	5488 <z_impl_log_process+0x114>
	return msg->hdr.ids.source_id;
    5462:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    5464:	9903      	ldr	r1, [sp, #12]
    5466:	f3c3 1389 	ubfx	r3, r3, #6, #10
    546a:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    546c:	bf38      	it	cc
    546e:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5472:	ea4f 138a 	mov.w	r3, sl, lsl #6
    5476:	f043 0301 	orr.w	r3, r3, #1
    547a:	f8ad 3000 	strh.w	r3, [sp]
    547e:	4649      	mov	r1, r9
    5480:	463b      	mov	r3, r7
    5482:	4658      	mov	r0, fp
    5484:	f01b fe3e 	bl	21104 <log_3>
		mask &= ~BIT(idx);
    5488:	2301      	movs	r3, #1
    548a:	fa03 f109 	lsl.w	r1, r3, r9
    548e:	ea26 0601 	bic.w	r6, r6, r1
    5492:	e7c7      	b.n	5424 <z_impl_log_process+0xb0>
	return backend->cb->active;
    5494:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    5496:	795b      	ldrb	r3, [r3, #5]
    5498:	b123      	cbz	r3, 54a4 <z_impl_log_process+0x130>
	backend->api->put(backend, msg);
    549a:	6833      	ldr	r3, [r6, #0]
    549c:	4629      	mov	r1, r5
    549e:	681b      	ldr	r3, [r3, #0]
    54a0:	4630      	mov	r0, r6
    54a2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    54a4:	f108 0801 	add.w	r8, r8, #1
    54a8:	3610      	adds	r6, #16
    54aa:	45b8      	cmp	r8, r7
    54ac:	dbf2      	blt.n	5494 <z_impl_log_process+0x120>
    54ae:	e787      	b.n	53c0 <z_impl_log_process+0x4c>
    54b0:	20003646 	.word	0x20003646
    54b4:	20001a1c 	.word	0x20001a1c
    54b8:	20001a10 	.word	0x20001a10
    54bc:	20001a14 	.word	0x20001a14
    54c0:	20003647 	.word	0x20003647
    54c4:	00026828 	.word	0x00026828
    54c8:	00026990 	.word	0x00026990
    54cc:	000287d4 	.word	0x000287d4
    54d0:	00026958 	.word	0x00026958
    54d4:	00026990 	.word	0x00026990
    54d8:	000269b0 	.word	0x000269b0
    54dc:	000265cc 	.word	0x000265cc
    54e0:	0002a6c8 	.word	0x0002a6c8
    54e4:	000287ba 	.word	0x000287ba

000054e8 <log_process_thread_func>:
{
    54e8:	b510      	push	{r4, lr}
	log_init();
    54ea:	f7ff fec5 	bl	5278 <log_init>
	return z_impl_k_current_get();
    54ee:	f019 fff1 	bl	1f4d4 <z_impl_k_current_get>
	proc_tid = process_tid;
    54f2:	4b0c      	ldr	r3, [pc, #48]	; (5524 <log_process_thread_func+0x3c>)
    54f4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    54f6:	b130      	cbz	r0, 5506 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    54f8:	4b0b      	ldr	r3, [pc, #44]	; (5528 <log_process_thread_func+0x40>)
	    process_tid &&
    54fa:	681b      	ldr	r3, [r3, #0]
    54fc:	2b09      	cmp	r3, #9
    54fe:	dd02      	ble.n	5506 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5500:	480a      	ldr	r0, [pc, #40]	; (552c <log_process_thread_func+0x44>)
    5502:	f019 ffed 	bl	1f4e0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    5506:	4c09      	ldr	r4, [pc, #36]	; (552c <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    5508:	2000      	movs	r0, #0
    550a:	f7ff ff33 	bl	5374 <z_impl_log_process>
		if (log_process(false) == false) {
    550e:	2800      	cmp	r0, #0
    5510:	d1fa      	bne.n	5508 <log_process_thread_func+0x20>
    5512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    551a:	4620      	mov	r0, r4
    551c:	f01a f806 	bl	1f52c <z_impl_k_sem_take>
    5520:	e7f2      	b.n	5508 <log_process_thread_func+0x20>
    5522:	bf00      	nop
    5524:	20001a40 	.word	0x20001a40
    5528:	20001a10 	.word	0x20001a10
    552c:	20000f80 	.word	0x20000f80

00005530 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    5530:	4b29      	ldr	r3, [pc, #164]	; (55d8 <msg_finalize+0xa8>)
{
    5532:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    5534:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    5536:	8141      	strh	r1, [r0, #10]
{
    5538:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    553a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    553c:	4d27      	ldr	r5, [pc, #156]	; (55dc <msg_finalize+0xac>)
    553e:	60e0      	str	r0, [r4, #12]
    5540:	f3bf 8f5b 	dmb	ish
    5544:	e855 3f00 	ldrex	r3, [r5]
    5548:	3301      	adds	r3, #1
    554a:	e845 3200 	strex	r2, r3, [r5]
    554e:	2a00      	cmp	r2, #0
    5550:	d1f8      	bne.n	5544 <msg_finalize+0x14>
    5552:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    5556:	f04f 0320 	mov.w	r3, #32
    555a:	f3ef 8611 	mrs	r6, BASEPRI
    555e:	f383 8811 	msr	BASEPRI, r3
    5562:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    5566:	481e      	ldr	r0, [pc, #120]	; (55e0 <msg_finalize+0xb0>)
    5568:	4621      	mov	r1, r4
    556a:	f01b fd72 	bl	21052 <log_list_add_tail>
	__asm__ volatile(
    556e:	f386 8811 	msr	BASEPRI, r6
    5572:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    5576:	4b1b      	ldr	r3, [pc, #108]	; (55e4 <msg_finalize+0xb4>)
    5578:	781b      	ldrb	r3, [r3, #0]
    557a:	b183      	cbz	r3, 559e <msg_finalize+0x6e>
	__asm__ volatile(
    557c:	f04f 0320 	mov.w	r3, #32
    5580:	f3ef 8411 	mrs	r4, BASEPRI
    5584:	f383 8811 	msr	BASEPRI, r3
    5588:	f3bf 8f6f 	isb	sy
    558c:	2000      	movs	r0, #0
    558e:	f7ff fef1 	bl	5374 <z_impl_log_process>
	__asm__ volatile(
    5592:	f384 8811 	msr	BASEPRI, r4
    5596:	f3bf 8f6f 	isb	sy
}
    559a:	b002      	add	sp, #8
    559c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    559e:	4a12      	ldr	r2, [pc, #72]	; (55e8 <msg_finalize+0xb8>)
    55a0:	682b      	ldr	r3, [r5, #0]
    55a2:	6812      	ldr	r2, [r2, #0]
    55a4:	2a00      	cmp	r2, #0
    55a6:	d0f8      	beq.n	559a <msg_finalize+0x6a>
    55a8:	2b01      	cmp	r3, #1
    55aa:	d10a      	bne.n	55c2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    55ac:	2200      	movs	r2, #0
    55ae:	2300      	movs	r3, #0
    55b0:	e9cd 2300 	strd	r2, r3, [sp]
    55b4:	480d      	ldr	r0, [pc, #52]	; (55ec <msg_finalize+0xbc>)
    55b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    55ba:	2300      	movs	r3, #0
    55bc:	f01a fa68 	bl	1fa90 <z_impl_k_timer_start>
    55c0:	e7eb      	b.n	559a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    55c2:	2b0a      	cmp	r3, #10
    55c4:	d1e9      	bne.n	559a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    55c6:	4809      	ldr	r0, [pc, #36]	; (55ec <msg_finalize+0xbc>)
    55c8:	f020 fcfb 	bl	25fc2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    55cc:	4808      	ldr	r0, [pc, #32]	; (55f0 <msg_finalize+0xc0>)
}
    55ce:	b002      	add	sp, #8
    55d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55d4:	f019 bf84 	b.w	1f4e0 <z_impl_k_sem_give>
    55d8:	20000198 	.word	0x20000198
    55dc:	20001a10 	.word	0x20001a10
    55e0:	20001a1c 	.word	0x20001a1c
    55e4:	20003647 	.word	0x20003647
    55e8:	20001a40 	.word	0x20001a40
    55ec:	200010e8 	.word	0x200010e8
    55f0:	20000f80 	.word	0x20000f80

000055f4 <z_impl_log_panic>:
{
    55f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    55f6:	4f0e      	ldr	r7, [pc, #56]	; (5630 <z_impl_log_panic+0x3c>)
    55f8:	783d      	ldrb	r5, [r7, #0]
    55fa:	b975      	cbnz	r5, 561a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    55fc:	4c0d      	ldr	r4, [pc, #52]	; (5634 <z_impl_log_panic+0x40>)
    55fe:	4e0e      	ldr	r6, [pc, #56]	; (5638 <z_impl_log_panic+0x44>)
	log_init();
    5600:	f7ff fe3a 	bl	5278 <log_init>
    5604:	1b36      	subs	r6, r6, r4
    5606:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5608:	42b5      	cmp	r5, r6
    560a:	db07      	blt.n	561c <z_impl_log_panic+0x28>
    560c:	2000      	movs	r0, #0
    560e:	f7ff feb1 	bl	5374 <z_impl_log_process>
		while (log_process(false) == true) {
    5612:	2800      	cmp	r0, #0
    5614:	d1fa      	bne.n	560c <z_impl_log_panic+0x18>
	panic_mode = true;
    5616:	2301      	movs	r3, #1
    5618:	703b      	strb	r3, [r7, #0]
}
    561a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    561c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    561e:	795b      	ldrb	r3, [r3, #5]
    5620:	b11b      	cbz	r3, 562a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5622:	6823      	ldr	r3, [r4, #0]
    5624:	4620      	mov	r0, r4
    5626:	691b      	ldr	r3, [r3, #16]
    5628:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    562a:	3501      	adds	r5, #1
    562c:	3410      	adds	r4, #16
    562e:	e7eb      	b.n	5608 <z_impl_log_panic+0x14>
    5630:	20003647 	.word	0x20003647
    5634:	00026990 	.word	0x00026990
    5638:	000269b0 	.word	0x000269b0

0000563c <log_free>:
{
    563c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    563e:	3804      	subs	r0, #4
    5640:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5642:	f3bf 8f5b 	dmb	ish
    5646:	e850 3f00 	ldrex	r3, [r0]
    564a:	1e5a      	subs	r2, r3, #1
    564c:	e840 2100 	strex	r1, r2, [r0]
    5650:	2900      	cmp	r1, #0
    5652:	d1f8      	bne.n	5646 <log_free+0xa>
    5654:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    5658:	2b01      	cmp	r3, #1
    565a:	d103      	bne.n	5664 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    565c:	4803      	ldr	r0, [pc, #12]	; (566c <log_free+0x30>)
    565e:	a901      	add	r1, sp, #4
    5660:	f019 fadc 	bl	1ec1c <k_mem_slab_free>
}
    5664:	b003      	add	sp, #12
    5666:	f85d fb04 	ldr.w	pc, [sp], #4
    566a:	bf00      	nop
    566c:	20001a24 	.word	0x20001a24

00005670 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5670:	2320      	movs	r3, #32
    5672:	4902      	ldr	r1, [pc, #8]	; (567c <log_msg_pool_init+0xc>)
    5674:	4802      	ldr	r0, [pc, #8]	; (5680 <log_msg_pool_init+0x10>)
    5676:	461a      	mov	r2, r3
    5678:	f020 b98a 	b.w	25990 <k_mem_slab_init>
    567c:	20006180 	.word	0x20006180
    5680:	20001a44 	.word	0x20001a44

00005684 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    5684:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    5686:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5688:	4d09      	ldr	r5, [pc, #36]	; (56b0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    568a:	9301      	str	r3, [sp, #4]
    568c:	2001      	movs	r0, #1
    568e:	f7ff fe71 	bl	5374 <z_impl_log_process>
    5692:	4604      	mov	r4, r0
			log_dropped();
    5694:	f7ff fdb8 	bl	5208 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5698:	2200      	movs	r2, #0
    569a:	2300      	movs	r3, #0
    569c:	a901      	add	r1, sp, #4
    569e:	4628      	mov	r0, r5
    56a0:	f019 fa8c 	bl	1ebbc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    56a4:	b108      	cbz	r0, 56aa <log_msg_no_space_handle+0x26>
    56a6:	2c00      	cmp	r4, #0
    56a8:	d1f0      	bne.n	568c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    56aa:	9801      	ldr	r0, [sp, #4]
    56ac:	b003      	add	sp, #12
    56ae:	bd30      	pop	{r4, r5, pc}
    56b0:	20001a44 	.word	0x20001a44

000056b4 <log_msg_chunk_alloc>:
{
    56b4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    56b6:	2300      	movs	r3, #0
    56b8:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    56ba:	4807      	ldr	r0, [pc, #28]	; (56d8 <log_msg_chunk_alloc+0x24>)
    56bc:	2200      	movs	r2, #0
    56be:	2300      	movs	r3, #0
    56c0:	a901      	add	r1, sp, #4
    56c2:	f019 fa7b 	bl	1ebbc <k_mem_slab_alloc>
	if (err != 0) {
    56c6:	b110      	cbz	r0, 56ce <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    56c8:	f7ff ffdc 	bl	5684 <log_msg_no_space_handle>
    56cc:	9001      	str	r0, [sp, #4]
}
    56ce:	9801      	ldr	r0, [sp, #4]
    56d0:	b003      	add	sp, #12
    56d2:	f85d fb04 	ldr.w	pc, [sp], #4
    56d6:	bf00      	nop
    56d8:	20001a44 	.word	0x20001a44

000056dc <msg_free>:
{
    56dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    56de:	7a03      	ldrb	r3, [r0, #8]
    56e0:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    56e2:	07dc      	lsls	r4, r3, #31
{
    56e4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    56e6:	d41e      	bmi.n	5726 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    56e8:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    56ea:	092d      	lsrs	r5, r5, #4
    56ec:	d01b      	beq.n	5726 <msg_free+0x4a>
		uint32_t smask = 0;
    56ee:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    56f0:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    56f2:	9801      	ldr	r0, [sp, #4]
    56f4:	4631      	mov	r1, r6
    56f6:	f01b fd8f 	bl	21218 <log_msg_arg_get>
    56fa:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    56fc:	f7ff fe2c 	bl	5358 <log_is_strdup>
    5700:	b170      	cbz	r0, 5720 <msg_free+0x44>
				if (smask == 0) {
    5702:	b934      	cbnz	r4, 5712 <msg_free+0x36>
					smask = z_log_get_s_mask(
    5704:	9b01      	ldr	r3, [sp, #4]
    5706:	4629      	mov	r1, r5
    5708:	6918      	ldr	r0, [r3, #16]
    570a:	f7ff fd13 	bl	5134 <z_log_get_s_mask>
					if (smask == 0) {
    570e:	4604      	mov	r4, r0
    5710:	b148      	cbz	r0, 5726 <msg_free+0x4a>
				if (smask & BIT(i)) {
    5712:	fa24 f306 	lsr.w	r3, r4, r6
    5716:	07d9      	lsls	r1, r3, #31
    5718:	d502      	bpl.n	5720 <msg_free+0x44>
					log_free(buf);
    571a:	4638      	mov	r0, r7
    571c:	f7ff ff8e 	bl	563c <log_free>
		for (i = 0; i < nargs; i++) {
    5720:	3601      	adds	r6, #1
    5722:	42ae      	cmp	r6, r5
    5724:	d3e5      	bcc.n	56f2 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    5726:	9b01      	ldr	r3, [sp, #4]
    5728:	7a1a      	ldrb	r2, [r3, #8]
    572a:	0792      	lsls	r2, r2, #30
    572c:	d504      	bpl.n	5738 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    572e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5730:	4c08      	ldr	r4, [pc, #32]	; (5754 <msg_free+0x78>)
    5732:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5734:	9b03      	ldr	r3, [sp, #12]
    5736:	b92b      	cbnz	r3, 5744 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5738:	4806      	ldr	r0, [pc, #24]	; (5754 <msg_free+0x78>)
    573a:	a901      	add	r1, sp, #4
    573c:	f019 fa6e 	bl	1ec1c <k_mem_slab_free>
}
    5740:	b005      	add	sp, #20
    5742:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5744:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5746:	a903      	add	r1, sp, #12
    5748:	4620      	mov	r0, r4
    574a:	f019 fa67 	bl	1ec1c <k_mem_slab_free>
		cont = next;
    574e:	9503      	str	r5, [sp, #12]
    5750:	e7f0      	b.n	5734 <msg_free+0x58>
    5752:	bf00      	nop
    5754:	20001a44 	.word	0x20001a44

00005758 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    5758:	b40e      	push	{r1, r2, r3}
    575a:	b503      	push	{r0, r1, lr}
    575c:	ab03      	add	r3, sp, #12
    575e:	4601      	mov	r1, r0
    5760:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    5764:	4804      	ldr	r0, [pc, #16]	; (5778 <print_formatted+0x20>)
	va_start(args, fmt);
    5766:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    5768:	f7ff fa8c 	bl	4c84 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    576c:	2000      	movs	r0, #0
    576e:	b002      	add	sp, #8
    5770:	f85d eb04 	ldr.w	lr, [sp], #4
    5774:	b003      	add	sp, #12
    5776:	4770      	bx	lr
    5778:	00021631 	.word	0x00021631

0000577c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5780:	461d      	mov	r5, r3
    5782:	9b08      	ldr	r3, [sp, #32]
    5784:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5786:	06da      	lsls	r2, r3, #27
{
    5788:	4604      	mov	r4, r0
    578a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    578c:	d405      	bmi.n	579a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    578e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5790:	bf4c      	ite	mi
    5792:	492b      	ldrmi	r1, [pc, #172]	; (5840 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    5794:	492b      	ldrpl	r1, [pc, #172]	; (5844 <hexdump_line_print+0xc8>)
    5796:	f7ff ffdf 	bl	5758 <print_formatted>
	newline_print(log_output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(log_output, " ");
    579a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5848 <hexdump_line_print+0xcc>
{
    579e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    57a2:	45a8      	cmp	r8, r5
    57a4:	db2d      	blt.n	5802 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    57a6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 584c <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    57aa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5850 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    57ae:	f8df a098 	ldr.w	sl, [pc, #152]	; 5848 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    57b2:	2500      	movs	r5, #0
		if (i < length) {
    57b4:	42bd      	cmp	r5, r7
    57b6:	d232      	bcs.n	581e <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
    57b8:	5d72      	ldrb	r2, [r6, r5]
    57ba:	4649      	mov	r1, r9
    57bc:	4620      	mov	r0, r4
    57be:	f7ff ffcb 	bl	5758 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    57c2:	3501      	adds	r5, #1
    57c4:	2d10      	cmp	r5, #16
    57c6:	d123      	bne.n	5810 <hexdump_line_print+0x94>
		}
	}

	print_formatted(log_output, "|");
    57c8:	4922      	ldr	r1, [pc, #136]	; (5854 <hexdump_line_print+0xd8>)
			char c = (char)data[i];

			print_formatted(log_output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    57ca:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5848 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
    57ce:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5858 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
    57d2:	f8df a088 	ldr.w	sl, [pc, #136]	; 585c <hexdump_line_print+0xe0>
	print_formatted(log_output, "|");
    57d6:	4620      	mov	r0, r4
    57d8:	f7ff ffbe 	bl	5758 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    57dc:	2500      	movs	r5, #0
		if (i < length) {
    57de:	42af      	cmp	r7, r5
    57e0:	d929      	bls.n	5836 <hexdump_line_print+0xba>
			char c = (char)data[i];
    57e2:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    57e4:	f812 3009 	ldrb.w	r3, [r2, r9]
    57e8:	f013 0f97 	tst.w	r3, #151	; 0x97
    57ec:	bf08      	it	eq
    57ee:	222e      	moveq	r2, #46	; 0x2e
    57f0:	4651      	mov	r1, sl
    57f2:	4620      	mov	r0, r4
    57f4:	f7ff ffb0 	bl	5758 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    57f8:	3501      	adds	r5, #1
    57fa:	2d10      	cmp	r5, #16
    57fc:	d114      	bne.n	5828 <hexdump_line_print+0xac>
		}
	}
}
    57fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    5802:	4649      	mov	r1, r9
    5804:	4620      	mov	r0, r4
    5806:	f7ff ffa7 	bl	5758 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    580a:	f108 0801 	add.w	r8, r8, #1
    580e:	e7c8      	b.n	57a2 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5810:	076a      	lsls	r2, r5, #29
    5812:	d1cf      	bne.n	57b4 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    5814:	4651      	mov	r1, sl
    5816:	4620      	mov	r0, r4
    5818:	f7ff ff9e 	bl	5758 <print_formatted>
    581c:	e7ca      	b.n	57b4 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    581e:	4641      	mov	r1, r8
    5820:	4620      	mov	r0, r4
    5822:	f7ff ff99 	bl	5758 <print_formatted>
    5826:	e7cc      	b.n	57c2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5828:	076b      	lsls	r3, r5, #29
    582a:	d1d8      	bne.n	57de <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    582c:	4641      	mov	r1, r8
    582e:	4620      	mov	r0, r4
    5830:	f7ff ff92 	bl	5758 <print_formatted>
    5834:	e7d3      	b.n	57de <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    5836:	4641      	mov	r1, r8
    5838:	4620      	mov	r0, r4
    583a:	f7ff ff8d 	bl	5758 <print_formatted>
    583e:	e7db      	b.n	57f8 <hexdump_line_print+0x7c>
    5840:	00028821 	.word	0x00028821
    5844:	00028820 	.word	0x00028820
    5848:	0002882b 	.word	0x0002882b
    584c:	00028829 	.word	0x00028829
    5850:	00028823 	.word	0x00028823
    5854:	0002882d 	.word	0x0002882d
    5858:	0002a5a3 	.word	0x0002a5a3
    585c:	0002882f 	.word	0x0002882f

00005860 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    5860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5864:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5866:	f011 0402 	ands.w	r4, r1, #2
{
    586a:	4690      	mov	r8, r2
    586c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5870:	4606      	mov	r6, r0
    5872:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5874:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5878:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    587c:	d006      	beq.n	588c <prefix_print+0x2c>
	if (!format) {
    587e:	f011 0f44 	tst.w	r1, #68	; 0x44
    5882:	d136      	bne.n	58f2 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    5884:	4932      	ldr	r1, [pc, #200]	; (5950 <prefix_print+0xf0>)
    5886:	f7ff ff67 	bl	5758 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    588a:	4604      	mov	r4, r0
	if (color) {
    588c:	f1b9 0f00 	cmp.w	r9, #0
    5890:	d00a      	beq.n	58a8 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    5892:	4b30      	ldr	r3, [pc, #192]	; (5954 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    5894:	4930      	ldr	r1, [pc, #192]	; (5958 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    5896:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    589a:	4b30      	ldr	r3, [pc, #192]	; (595c <prefix_print+0xfc>)
    589c:	4630      	mov	r0, r6
    589e:	2a00      	cmp	r2, #0
    58a0:	bf08      	it	eq
    58a2:	461a      	moveq	r2, r3
    58a4:	f7ff ff58 	bl	5758 <print_formatted>
	if (level_on) {
    58a8:	b13d      	cbz	r5, 58ba <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    58aa:	4b2d      	ldr	r3, [pc, #180]	; (5960 <prefix_print+0x100>)
    58ac:	492d      	ldr	r1, [pc, #180]	; (5964 <prefix_print+0x104>)
    58ae:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    58b2:	4630      	mov	r0, r6
    58b4:	f7ff ff50 	bl	5758 <print_formatted>
    58b8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    58ba:	f1b8 0f00 	cmp.w	r8, #0
    58be:	d044      	beq.n	594a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    58c0:	2301      	movs	r3, #1
    58c2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    58c6:	4b28      	ldr	r3, [pc, #160]	; (5968 <prefix_print+0x108>)
    58c8:	f017 0f10 	tst.w	r7, #16
    58cc:	4f27      	ldr	r7, [pc, #156]	; (596c <prefix_print+0x10c>)
    58ce:	bf18      	it	ne
    58d0:	461f      	movne	r7, r3
    58d2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    58d6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    58da:	f7ff fca5 	bl	5228 <log_source_name_get>
    58de:	4639      	mov	r1, r7
    58e0:	4602      	mov	r2, r0
    58e2:	4630      	mov	r0, r6
    58e4:	f7ff ff38 	bl	5758 <print_formatted>
    58e8:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    58ea:	4420      	add	r0, r4
    58ec:	b005      	add	sp, #20
    58ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    58f2:	4b1f      	ldr	r3, [pc, #124]	; (5970 <prefix_print+0x110>)
    58f4:	6819      	ldr	r1, [r3, #0]
    58f6:	b331      	cbz	r1, 5946 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    58f8:	4b1e      	ldr	r3, [pc, #120]	; (5974 <prefix_print+0x114>)
    58fa:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    58fe:	681b      	ldr	r3, [r3, #0]
    5900:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    5904:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    5908:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    590c:	fbb4 f2fc 	udiv	r2, r4, ip
    5910:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    5914:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5918:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    591c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5920:	fbb4 faf1 	udiv	sl, r4, r1
    5924:	fb01 441a 	mls	r4, r1, sl, r4
    5928:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    592c:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5930:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    5934:	e9cd a101 	strd	sl, r1, [sp, #4]
    5938:	fb0e c113 	mls	r1, lr, r3, ip
    593c:	9100      	str	r1, [sp, #0]
    593e:	490e      	ldr	r1, [pc, #56]	; (5978 <prefix_print+0x118>)
    5940:	f7ff ff0a 	bl	5758 <print_formatted>
    5944:	e7a1      	b.n	588a <prefix_print+0x2a>
		length = 0;
    5946:	4608      	mov	r0, r1
    5948:	e79f      	b.n	588a <prefix_print+0x2a>
	total += print_formatted(log_output,
    594a:	4f08      	ldr	r7, [pc, #32]	; (596c <prefix_print+0x10c>)
    594c:	e7c1      	b.n	58d2 <prefix_print+0x72>
    594e:	bf00      	nop
    5950:	00028840 	.word	0x00028840
    5954:	00026aa8 	.word	0x00026aa8
    5958:	00029635 	.word	0x00029635
    595c:	00028832 	.word	0x00028832
    5960:	00026abc 	.word	0x00026abc
    5964:	00028865 	.word	0x00028865
    5968:	0002883c 	.word	0x0002883c
    596c:	00028837 	.word	0x00028837
    5970:	20001a60 	.word	0x20001a60
    5974:	20001a64 	.word	0x20001a64
    5978:	00028849 	.word	0x00028849

0000597c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    597c:	b538      	push	{r3, r4, r5, lr}
    597e:	460c      	mov	r4, r1
	if (color) {
    5980:	07e1      	lsls	r1, r4, #31
{
    5982:	4605      	mov	r5, r0
	if (color) {
    5984:	d503      	bpl.n	598e <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    5986:	4a08      	ldr	r2, [pc, #32]	; (59a8 <postfix_print+0x2c>)
    5988:	4908      	ldr	r1, [pc, #32]	; (59ac <postfix_print+0x30>)
    598a:	f7ff fee5 	bl	5758 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    598e:	06e2      	lsls	r2, r4, #27
    5990:	d408      	bmi.n	59a4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5992:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5994:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5996:	bf4c      	ite	mi
    5998:	4905      	ldrmi	r1, [pc, #20]	; (59b0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    599a:	4906      	ldrpl	r1, [pc, #24]	; (59b4 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    599c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    59a0:	f7ff beda 	b.w	5758 <print_formatted>
}
    59a4:	bd38      	pop	{r3, r4, r5, pc}
    59a6:	bf00      	nop
    59a8:	00028832 	.word	0x00028832
    59ac:	00029635 	.word	0x00029635
    59b0:	00028821 	.word	0x00028821
    59b4:	00028820 	.word	0x00028820

000059b8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    59b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    59bc:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    59be:	f013 0807 	ands.w	r8, r3, #7
{
    59c2:	b08a      	sub	sp, #40	; 0x28
    59c4:	4605      	mov	r5, r0
    59c6:	460e      	mov	r6, r1
    59c8:	4617      	mov	r7, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    59ca:	d022      	beq.n	5a12 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    59cc:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    59ce:	8949      	ldrh	r1, [r1, #10]
    59d0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    59d4:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    59d8:	43d2      	mvns	r2, r2
    59da:	e9cd 8300 	strd	r8, r3, [sp]
    59de:	9102      	str	r1, [sp, #8]
    59e0:	68f3      	ldr	r3, [r6, #12]
    59e2:	f002 0201 	and.w	r2, r2, #1
    59e6:	4639      	mov	r1, r7
    59e8:	f7ff ff3a 	bl	5860 <prefix_print>
    59ec:	4681      	mov	r9, r0
    59ee:	7a34      	ldrb	r4, [r6, #8]
    59f0:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    59f2:	f014 0401 	ands.w	r4, r4, #1
    59f6:	d00e      	beq.n	5a16 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    59f8:	4629      	mov	r1, r5
    59fa:	4630      	mov	r0, r6
    59fc:	f01b fcae 	bl	2135c <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    5a00:	f1b8 0f00 	cmp.w	r8, #0
    5a04:	d02b      	beq.n	5a5e <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    5a06:	4642      	mov	r2, r8
    5a08:	4639      	mov	r1, r7
    5a0a:	4628      	mov	r0, r5
    5a0c:	f7ff ffb6 	bl	597c <postfix_print>
    5a10:	e025      	b.n	5a5e <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5a12:	46c1      	mov	r9, r8
    5a14:	e7eb      	b.n	59ee <log_output_msg_process+0x36>
	} else if (raw_string) {
    5a16:	f1b8 0f00 	cmp.w	r8, #0
    5a1a:	d126      	bne.n	5a6a <log_output_msg_process+0xb2>
	size_t offset = 0;
    5a1c:	4627      	mov	r7, r4
		length = log_output->size;
    5a1e:	68eb      	ldr	r3, [r5, #12]
    5a20:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    5a22:	aa06      	add	r2, sp, #24
    5a24:	463b      	mov	r3, r7
    5a26:	68a9      	ldr	r1, [r5, #8]
    5a28:	4630      	mov	r0, r6
    5a2a:	f01b fc83 	bl	21334 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    5a2e:	9a06      	ldr	r2, [sp, #24]
    5a30:	686b      	ldr	r3, [r5, #4]
    5a32:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    5a34:	b13a      	cbz	r2, 5a46 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    5a36:	68ab      	ldr	r3, [r5, #8]
    5a38:	4413      	add	r3, r2
    5a3a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    5a3e:	f1a4 030a 	sub.w	r3, r4, #10
    5a42:	425c      	negs	r4, r3
    5a44:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    5a46:	4628      	mov	r0, r5
    5a48:	f01b fde5 	bl	21616 <log_output_flush>
		offset += length;
    5a4c:	9b06      	ldr	r3, [sp, #24]
    5a4e:	441f      	add	r7, r3
	} while (length > 0);
    5a50:	2b00      	cmp	r3, #0
    5a52:	d1e4      	bne.n	5a1e <log_output_msg_process+0x66>
	if (eol) {
    5a54:	b11c      	cbz	r4, 5a5e <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    5a56:	4914      	ldr	r1, [pc, #80]	; (5aa8 <log_output_msg_process+0xf0>)
    5a58:	4628      	mov	r0, r5
    5a5a:	f7ff fe7d 	bl	5758 <print_formatted>
	}

	log_output_flush(log_output);
    5a5e:	4628      	mov	r0, r5
}
    5a60:	b00a      	add	sp, #40	; 0x28
    5a62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
    5a66:	f01b bdd6 	b.w	21616 <log_output_flush>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    5a6a:	4630      	mov	r0, r6
    5a6c:	f01b fc06 	bl	2127c <log_msg_str_get>
    5a70:	490e      	ldr	r1, [pc, #56]	; (5aac <log_output_msg_process+0xf4>)
    5a72:	4602      	mov	r2, r0
    5a74:	4628      	mov	r0, r5
    5a76:	f7ff fe6f 	bl	5758 <print_formatted>
		length = sizeof(buf);
    5a7a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5a7e:	aa05      	add	r2, sp, #20
    5a80:	4623      	mov	r3, r4
    5a82:	a906      	add	r1, sp, #24
    5a84:	4630      	mov	r0, r6
		length = sizeof(buf);
    5a86:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5a8a:	f01b fc53 	bl	21334 <log_msg_hexdump_data_get>
		if (length) {
    5a8e:	9a05      	ldr	r2, [sp, #20]
    5a90:	2a00      	cmp	r2, #0
    5a92:	d0b8      	beq.n	5a06 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    5a94:	464b      	mov	r3, r9
    5a96:	9700      	str	r7, [sp, #0]
    5a98:	a906      	add	r1, sp, #24
    5a9a:	4628      	mov	r0, r5
    5a9c:	f7ff fe6e 	bl	577c <hexdump_line_print>
			offset += length;
    5aa0:	9b05      	ldr	r3, [sp, #20]
    5aa2:	441c      	add	r4, r3
		length = sizeof(buf);
    5aa4:	e7eb      	b.n	5a7e <log_output_msg_process+0xc6>
    5aa6:	bf00      	nop
    5aa8:	0002886b 	.word	0x0002886b
    5aac:	00029635 	.word	0x00029635

00005ab0 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    5ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ab2:	f242 730f 	movw	r3, #9999	; 0x270f
    5ab6:	428b      	cmp	r3, r1
    5ab8:	bf28      	it	cs
    5aba:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    5abc:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5abe:	4a0f      	ldr	r2, [pc, #60]	; (5afc <log_output_dropped_process+0x4c>)
{
    5ac0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ac2:	2105      	movs	r1, #5
    5ac4:	4668      	mov	r0, sp
    5ac6:	f01a ff97 	bl	209f8 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5aca:	6863      	ldr	r3, [r4, #4]
    5acc:	490c      	ldr	r1, [pc, #48]	; (5b00 <log_output_dropped_process+0x50>)
    5ace:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ad0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5ad2:	220b      	movs	r2, #11
    5ad4:	4628      	mov	r0, r5
    5ad6:	f01b fc34 	bl	21342 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    5ada:	6863      	ldr	r3, [r4, #4]
    5adc:	4632      	mov	r2, r6
    5ade:	4669      	mov	r1, sp
    5ae0:	4628      	mov	r0, r5
    5ae2:	685b      	ldr	r3, [r3, #4]
    5ae4:	f01b fc2d 	bl	21342 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5ae8:	6863      	ldr	r3, [r4, #4]
    5aea:	4906      	ldr	r1, [pc, #24]	; (5b04 <log_output_dropped_process+0x54>)
    5aec:	685b      	ldr	r3, [r3, #4]
    5aee:	221b      	movs	r2, #27
    5af0:	4628      	mov	r0, r5
    5af2:	f01b fc26 	bl	21342 <buffer_write>
		     log_output->control_block->ctx);
}
    5af6:	b002      	add	sp, #8
    5af8:	bd70      	pop	{r4, r5, r6, pc}
    5afa:	bf00      	nop
    5afc:	00029fc8 	.word	0x00029fc8
    5b00:	000288a9 	.word	0x000288a9
    5b04:	0002888d 	.word	0x0002888d

00005b08 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5b08:	4a08      	ldr	r2, [pc, #32]	; (5b2c <log_output_timestamp_freq_set+0x24>)
{
    5b0a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5b0c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5b0e:	4c08      	ldr	r4, [pc, #32]	; (5b30 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    5b10:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5b12:	2100      	movs	r1, #0
    5b14:	42a0      	cmp	r0, r4
    5b16:	d804      	bhi.n	5b22 <log_output_timestamp_freq_set+0x1a>
    5b18:	b101      	cbz	r1, 5b1c <log_output_timestamp_freq_set+0x14>
    5b1a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5b1c:	4b05      	ldr	r3, [pc, #20]	; (5b34 <log_output_timestamp_freq_set+0x2c>)
    5b1e:	6018      	str	r0, [r3, #0]
}
    5b20:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5b22:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5b24:	005b      	lsls	r3, r3, #1
    5b26:	2101      	movs	r1, #1
    5b28:	e7f4      	b.n	5b14 <log_output_timestamp_freq_set+0xc>
    5b2a:	bf00      	nop
    5b2c:	20001a64 	.word	0x20001a64
    5b30:	000f4240 	.word	0x000f4240
    5b34:	20001a60 	.word	0x20001a60

00005b38 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    5b3a:	4f07      	ldr	r7, [pc, #28]	; (5b58 <char_out+0x20>)
{
    5b3c:	460d      	mov	r5, r1
    5b3e:	4604      	mov	r4, r0
    5b40:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    5b42:	42b4      	cmp	r4, r6
    5b44:	d101      	bne.n	5b4a <char_out+0x12>
	}

	return length;
}
    5b46:	4628      	mov	r0, r5
    5b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    5b4a:	6838      	ldr	r0, [r7, #0]
    5b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5b50:	6883      	ldr	r3, [r0, #8]
    5b52:	685b      	ldr	r3, [r3, #4]
    5b54:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5b56:	e7f4      	b.n	5b42 <char_out+0xa>
    5b58:	20001a7c 	.word	0x20001a7c

00005b5c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    5b5c:	4801      	ldr	r0, [pc, #4]	; (5b64 <panic+0x8>)
    5b5e:	f01b bd5a 	b.w	21616 <log_output_flush>
    5b62:	bf00      	nop
    5b64:	00026ae8 	.word	0x00026ae8

00005b68 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    5b68:	4801      	ldr	r0, [pc, #4]	; (5b70 <dropped+0x8>)
    5b6a:	f7ff bfa1 	b.w	5ab0 <log_output_dropped_process>
    5b6e:	bf00      	nop
    5b70:	00026ae8 	.word	0x00026ae8

00005b74 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    5b74:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    5b76:	4806      	ldr	r0, [pc, #24]	; (5b90 <log_backend_uart_init+0x1c>)
    5b78:	f018 fe66 	bl	1e848 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5b7c:	4b05      	ldr	r3, [pc, #20]	; (5b94 <log_backend_uart_init+0x20>)
    5b7e:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
    5b80:	b928      	cbnz	r0, 5b8e <log_backend_uart_init+0x1a>
    5b82:	4b05      	ldr	r3, [pc, #20]	; (5b98 <log_backend_uart_init+0x24>)
    5b84:	4a05      	ldr	r2, [pc, #20]	; (5b9c <log_backend_uart_init+0x28>)
    5b86:	4806      	ldr	r0, [pc, #24]	; (5ba0 <log_backend_uart_init+0x2c>)
    5b88:	212d      	movs	r1, #45	; 0x2d
    5b8a:	f01a f865 	bl	1fc58 <__assert_func>
}
    5b8e:	bd08      	pop	{r3, pc}
    5b90:	000288b5 	.word	0x000288b5
    5b94:	20001a7c 	.word	0x20001a7c
    5b98:	000288bc 	.word	0x000288bc
    5b9c:	00028913 	.word	0x00028913
    5ba0:	000288cd 	.word	0x000288cd

00005ba4 <put>:
{
    5ba4:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5ba6:	4608      	mov	r0, r1
    5ba8:	460c      	mov	r4, r1
    5baa:	f01b fb25 	bl	211f8 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5bae:	4805      	ldr	r0, [pc, #20]	; (5bc4 <put+0x20>)
    5bb0:	4621      	mov	r1, r4
    5bb2:	220f      	movs	r2, #15
    5bb4:	f7ff ff00 	bl	59b8 <log_output_msg_process>
	log_msg_put(msg);
    5bb8:	4620      	mov	r0, r4
}
    5bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5bbe:	f01b bb4a 	b.w	21256 <log_msg_put>
    5bc2:	bf00      	nop
    5bc4:	00026ae8 	.word	0x00026ae8

00005bc8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5bc8:	4b01      	ldr	r3, [pc, #4]	; (5bd0 <log_backend_rtt_init+0x8>)
    5bca:	2201      	movs	r2, #1
    5bcc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5bce:	4770      	bx	lr
    5bd0:	20003659 	.word	0x20003659

00005bd4 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    5bd4:	4b02      	ldr	r3, [pc, #8]	; (5be0 <panic+0xc>)
	log_output_flush(log_output);
    5bd6:	4803      	ldr	r0, [pc, #12]	; (5be4 <panic+0x10>)
    5bd8:	2201      	movs	r2, #1
    5bda:	701a      	strb	r2, [r3, #0]
    5bdc:	f01b bd1b 	b.w	21616 <log_output_flush>
    5be0:	2000365a 	.word	0x2000365a
    5be4:	00026b10 	.word	0x00026b10

00005be8 <dropped>:
	log_output_dropped_process(log_output, cnt);
    5be8:	4801      	ldr	r0, [pc, #4]	; (5bf0 <dropped+0x8>)
    5bea:	f7ff bf61 	b.w	5ab0 <log_output_dropped_process>
    5bee:	bf00      	nop
    5bf0:	00026b10 	.word	0x00026b10

00005bf4 <put>:
{
    5bf4:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5bf6:	4608      	mov	r0, r1
    5bf8:	460c      	mov	r4, r1
    5bfa:	f01b fafd 	bl	211f8 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5bfe:	4805      	ldr	r0, [pc, #20]	; (5c14 <put+0x20>)
    5c00:	4621      	mov	r1, r4
    5c02:	220f      	movs	r2, #15
    5c04:	f7ff fed8 	bl	59b8 <log_output_msg_process>
	log_msg_put(msg);
    5c08:	4620      	mov	r0, r4
}
    5c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c0e:	f01b bb22 	b.w	21256 <log_msg_put>
    5c12:	bf00      	nop
    5c14:	00026b10 	.word	0x00026b10

00005c18 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5c18:	4b05      	ldr	r3, [pc, #20]	; (5c30 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    5c1a:	781b      	ldrb	r3, [r3, #0]
    5c1c:	b11b      	cbz	r3, 5c26 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    5c1e:	f241 3088 	movw	r0, #5000	; 0x1388
    5c22:	f020 b8c7 	b.w	25db4 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    5c26:	20a4      	movs	r0, #164	; 0xa4
    5c28:	2100      	movs	r1, #0
    5c2a:	f019 bc39 	b.w	1f4a0 <z_impl_k_sleep>
    5c2e:	bf00      	nop
    5c30:	2000365a 	.word	0x2000365a

00005c34 <data_out_block_mode>:
{
    5c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5c38:	f8df 8088 	ldr.w	r8, [pc, #136]	; 5cc4 <data_out_block_mode+0x90>
	return z_impl_k_mutex_lock(mutex, timeout);
    5c3c:	f8df a088 	ldr.w	sl, [pc, #136]	; 5cc8 <data_out_block_mode+0x94>
{
    5c40:	4607      	mov	r7, r0
    5c42:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    5c44:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    5c46:	f898 3000 	ldrb.w	r3, [r8]
    5c4a:	b933      	cbnz	r3, 5c5a <data_out_block_mode+0x26>
    5c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c54:	4650      	mov	r0, sl
    5c56:	f019 f80b 	bl	1ec70 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5c5a:	4632      	mov	r2, r6
    5c5c:	4639      	mov	r1, r7
    5c5e:	2000      	movs	r0, #0
    5c60:	f000 fb78 	bl	6354 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    5c64:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5c68:	4681      	mov	r9, r0
		if (!is_sync_mode()) {
    5c6a:	b913      	cbnz	r3, 5c72 <data_out_block_mode+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    5c6c:	4650      	mov	r0, sl
    5c6e:	f019 f871 	bl	1ed54 <z_impl_k_mutex_unlock>
		if (ret) {
    5c72:	4d16      	ldr	r5, [pc, #88]	; (5ccc <data_out_block_mode+0x98>)
    5c74:	f1b9 0f00 	cmp.w	r9, #0
    5c78:	d018      	beq.n	5cac <data_out_block_mode+0x78>
	host_present = true;
    5c7a:	2301      	movs	r3, #1
    5c7c:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    5c7e:	f898 3000 	ldrb.w	r3, [r8]
    5c82:	b933      	cbnz	r3, 5c92 <data_out_block_mode+0x5e>
}
    5c84:	4630      	mov	r0, r6
    5c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (retry_cnt == 0) {
    5c8a:	b95c      	cbnz	r4, 5ca4 <data_out_block_mode+0x70>
		host_present = false;
    5c8c:	702c      	strb	r4, [r5, #0]
    5c8e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5c92:	2000      	movs	r0, #0
    5c94:	f000 fbaa 	bl	63ec <SEGGER_RTT_HasDataUp>
    5c98:	2800      	cmp	r0, #0
    5c9a:	d0f3      	beq.n	5c84 <data_out_block_mode+0x50>
    5c9c:	782b      	ldrb	r3, [r5, #0]
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	d1f3      	bne.n	5c8a <data_out_block_mode+0x56>
    5ca2:	e7ef      	b.n	5c84 <data_out_block_mode+0x50>
			on_failed_write(retry_cnt--);
    5ca4:	3c01      	subs	r4, #1
    5ca6:	f7ff ffb7 	bl	5c18 <on_failed_write.part.0>
    5caa:	e7f2      	b.n	5c92 <data_out_block_mode+0x5e>
		} else if (host_present) {
    5cac:	782b      	ldrb	r3, [r5, #0]
    5cae:	b113      	cbz	r3, 5cb6 <data_out_block_mode+0x82>
	if (retry_cnt == 0) {
    5cb0:	3c01      	subs	r4, #1
    5cb2:	d104      	bne.n	5cbe <data_out_block_mode+0x8a>
		host_present = false;
    5cb4:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    5cb6:	782b      	ldrb	r3, [r5, #0]
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d1c4      	bne.n	5c46 <data_out_block_mode+0x12>
    5cbc:	e7e2      	b.n	5c84 <data_out_block_mode+0x50>
    5cbe:	f7ff ffab 	bl	5c18 <on_failed_write.part.0>
    5cc2:	e7f8      	b.n	5cb6 <data_out_block_mode+0x82>
    5cc4:	2000365a 	.word	0x2000365a
    5cc8:	20000f3c 	.word	0x20000f3c
    5ccc:	20003659 	.word	0x20003659

00005cd0 <blvl_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5cd0:	4b07      	ldr	r3, [pc, #28]	; (5cf0 <blvl_ccc_cfg_changed+0x20>)
    5cd2:	4a08      	ldr	r2, [pc, #32]	; (5cf4 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    5cd4:	4808      	ldr	r0, [pc, #32]	; (5cf8 <blvl_ccc_cfg_changed+0x28>)
    5cd6:	1ad2      	subs	r2, r2, r3
    5cd8:	08d2      	lsrs	r2, r2, #3
    5cda:	4b08      	ldr	r3, [pc, #32]	; (5cfc <blvl_ccc_cfg_changed+0x2c>)
    5cdc:	0192      	lsls	r2, r2, #6
    5cde:	2901      	cmp	r1, #1
    5ce0:	bf14      	ite	ne
    5ce2:	4601      	movne	r1, r0
    5ce4:	4619      	moveq	r1, r3
    5ce6:	f042 0203 	orr.w	r2, r2, #3
    5cea:	4805      	ldr	r0, [pc, #20]	; (5d00 <blvl_ccc_cfg_changed+0x30>)
    5cec:	f01b b9dd 	b.w	210aa <log_1>
    5cf0:	00026828 	.word	0x00026828
    5cf4:	00026828 	.word	0x00026828
    5cf8:	00028963 	.word	0x00028963
    5cfc:	0002895b 	.word	0x0002895b
    5d00:	0002896c 	.word	0x0002896c

00005d04 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
    5d04:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
    5d06:	4c08      	ldr	r4, [pc, #32]	; (5d28 <read_blvl+0x24>)
{
    5d08:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
    5d0a:	7824      	ldrb	r4, [r4, #0]
    5d0c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    5d10:	2401      	movs	r4, #1
    5d12:	9402      	str	r4, [sp, #8]
    5d14:	f10d 0417 	add.w	r4, sp, #23
    5d18:	9401      	str	r4, [sp, #4]
    5d1a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    5d1e:	9400      	str	r4, [sp, #0]
    5d20:	f01e fa91 	bl	24246 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    5d24:	b006      	add	sp, #24
    5d26:	bd10      	pop	{r4, pc}
    5d28:	20000e5a 	.word	0x20000e5a

00005d2c <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
    5d2c:	4b01      	ldr	r3, [pc, #4]	; (5d34 <bt_bas_get_battery_level+0x8>)
    5d2e:	7818      	ldrb	r0, [r3, #0]
    5d30:	4770      	bx	lr
    5d32:	bf00      	nop
    5d34:	20000e5a 	.word	0x20000e5a

00005d38 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
    5d38:	b500      	push	{lr}
    5d3a:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
    5d3c:	2864      	cmp	r0, #100	; 0x64
{
    5d3e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
    5d42:	d819      	bhi.n	5d78 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
    5d44:	4b0e      	ldr	r3, [pc, #56]	; (5d80 <bt_bas_set_battery_level+0x48>)
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    5d46:	2218      	movs	r2, #24
    5d48:	7018      	strb	r0, [r3, #0]
    5d4a:	2100      	movs	r1, #0
    5d4c:	a802      	add	r0, sp, #8
    5d4e:	f020 fab0 	bl	262b2 <memset>

	params.attr = attr;
    5d52:	4b0c      	ldr	r3, [pc, #48]	; (5d84 <bt_bas_set_battery_level+0x4c>)
    5d54:	9303      	str	r3, [sp, #12]
	params.data = data;
    5d56:	f10d 0307 	add.w	r3, sp, #7
    5d5a:	9304      	str	r3, [sp, #16]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    5d5c:	a902      	add	r1, sp, #8
	params.len = len;
    5d5e:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    5d60:	2000      	movs	r0, #0
	params.len = len;
    5d62:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    5d66:	f006 ff33 	bl	cbd0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
    5d6a:	f110 0f80 	cmn.w	r0, #128	; 0x80
    5d6e:	bf08      	it	eq
    5d70:	2000      	moveq	r0, #0
}
    5d72:	b009      	add	sp, #36	; 0x24
    5d74:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    5d78:	f06f 0015 	mvn.w	r0, #21
    5d7c:	e7f9      	b.n	5d72 <bt_bas_set_battery_level+0x3a>
    5d7e:	bf00      	nop
    5d80:	20000e5a 	.word	0x20000e5a
    5d84:	00026b98 	.word	0x00026b98

00005d88 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    5d88:	4b02      	ldr	r3, [pc, #8]	; (5d94 <hrs_init+0xc>)
    5d8a:	2201      	movs	r2, #1
    5d8c:	701a      	strb	r2, [r3, #0]

	return 0;
}
    5d8e:	2000      	movs	r0, #0
    5d90:	4770      	bx	lr
    5d92:	bf00      	nop
    5d94:	2000365d 	.word	0x2000365d

00005d98 <read_blsc>:
{
    5d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    5d9a:	2401      	movs	r4, #1
    5d9c:	9402      	str	r4, [sp, #8]
    5d9e:	4c04      	ldr	r4, [pc, #16]	; (5db0 <read_blsc+0x18>)
    5da0:	9401      	str	r4, [sp, #4]
    5da2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    5da6:	9400      	str	r4, [sp, #0]
    5da8:	f01e fa4d 	bl	24246 <bt_gatt_attr_read>
}
    5dac:	b004      	add	sp, #16
    5dae:	bd10      	pop	{r4, pc}
    5db0:	2000365d 	.word	0x2000365d

00005db4 <hrmc_ccc_cfg_changed>:
    5db4:	4b07      	ldr	r3, [pc, #28]	; (5dd4 <hrmc_ccc_cfg_changed+0x20>)
    5db6:	4a08      	ldr	r2, [pc, #32]	; (5dd8 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    5db8:	4808      	ldr	r0, [pc, #32]	; (5ddc <hrmc_ccc_cfg_changed+0x28>)
    5dba:	1ad2      	subs	r2, r2, r3
    5dbc:	08d2      	lsrs	r2, r2, #3
    5dbe:	4b08      	ldr	r3, [pc, #32]	; (5de0 <hrmc_ccc_cfg_changed+0x2c>)
    5dc0:	0192      	lsls	r2, r2, #6
    5dc2:	2901      	cmp	r1, #1
    5dc4:	bf14      	ite	ne
    5dc6:	4601      	movne	r1, r0
    5dc8:	4619      	moveq	r1, r3
    5dca:	f042 0203 	orr.w	r2, r2, #3
    5dce:	4805      	ldr	r0, [pc, #20]	; (5de4 <hrmc_ccc_cfg_changed+0x30>)
    5dd0:	f01b b96b 	b.w	210aa <log_1>
    5dd4:	00026828 	.word	0x00026828
    5dd8:	00026950 	.word	0x00026950
    5ddc:	00028963 	.word	0x00028963
    5de0:	0002895b 	.word	0x0002895b
    5de4:	00028985 	.word	0x00028985

00005de8 <bt_hrs_notify>:

int bt_hrs_notify(uint16_t heartrate)
{
    5de8:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    5dea:	4c0d      	ldr	r4, [pc, #52]	; (5e20 <bt_hrs_notify+0x38>)
{
    5dec:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    5dee:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    5df0:	7060      	strb	r0, [r4, #1]
	memset(&params, 0, sizeof(params));
    5df2:	2218      	movs	r2, #24
    5df4:	2100      	movs	r1, #0
    5df6:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    5df8:	7023      	strb	r3, [r4, #0]
    5dfa:	f020 fa5a 	bl	262b2 <memset>
	params.attr = attr;
    5dfe:	4b09      	ldr	r3, [pc, #36]	; (5e24 <bt_hrs_notify+0x3c>)
	return bt_gatt_notify_cb(conn, &params);
    5e00:	4669      	mov	r1, sp
	params.data = data;
    5e02:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    5e06:	2000      	movs	r0, #0
	params.len = len;
    5e08:	2302      	movs	r3, #2
    5e0a:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    5e0e:	f006 fedf 	bl	cbd0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    5e12:	f110 0f80 	cmn.w	r0, #128	; 0x80
}
    5e16:	bf08      	it	eq
    5e18:	2000      	moveq	r0, #0
    5e1a:	b006      	add	sp, #24
    5e1c:	bd10      	pop	{r4, pc}
    5e1e:	bf00      	nop
    5e20:	2000365b 	.word	0x2000365b
    5e24:	00026be8 	.word	0x00026be8

00005e28 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5e28:	b510      	push	{r4, lr}
    5e2a:	4807      	ldr	r0, [pc, #28]	; (5e48 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    5e2c:	4c07      	ldr	r4, [pc, #28]	; (5e4c <uart_console_init+0x24>)
    5e2e:	f018 fd0b 	bl	1e848 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5e32:	4b07      	ldr	r3, [pc, #28]	; (5e50 <uart_console_init+0x28>)
    5e34:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    5e36:	4620      	mov	r0, r4
    5e38:	f001 f8b4 	bl	6fa4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    5e3c:	4620      	mov	r0, r4
    5e3e:	f7fe ff1b 	bl	4c78 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    5e42:	2000      	movs	r0, #0
    5e44:	bd10      	pop	{r4, pc}
    5e46:	bf00      	nop
    5e48:	000288b5 	.word	0x000288b5
    5e4c:	00005e55 	.word	0x00005e55
    5e50:	20001a94 	.word	0x20001a94

00005e54 <console_out>:
	if ('\n' == c) {
    5e54:	280a      	cmp	r0, #10
{
    5e56:	b538      	push	{r3, r4, r5, lr}
    5e58:	4d07      	ldr	r5, [pc, #28]	; (5e78 <console_out+0x24>)
    5e5a:	4604      	mov	r4, r0
	if ('\n' == c) {
    5e5c:	d104      	bne.n	5e68 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    5e5e:	6828      	ldr	r0, [r5, #0]
    5e60:	6883      	ldr	r3, [r0, #8]
    5e62:	210d      	movs	r1, #13
    5e64:	685b      	ldr	r3, [r3, #4]
    5e66:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    5e68:	6828      	ldr	r0, [r5, #0]
    5e6a:	6883      	ldr	r3, [r0, #8]
    5e6c:	b2e1      	uxtb	r1, r4
    5e6e:	685b      	ldr	r3, [r3, #4]
    5e70:	4798      	blx	r3
}
    5e72:	4620      	mov	r0, r4
    5e74:	bd38      	pop	{r3, r4, r5, pc}
    5e76:	bf00      	nop
    5e78:	20001a94 	.word	0x20001a94

00005e7c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5e7c:	4b08      	ldr	r3, [pc, #32]	; (5ea0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5e7e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5e80:	1ac3      	subs	r3, r0, r3
{
    5e82:	460d      	mov	r5, r1
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    5e84:	4907      	ldr	r1, [pc, #28]	; (5ea4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    5e86:	109b      	asrs	r3, r3, #2
{
    5e88:	4604      	mov	r4, r0
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    5e8a:	4359      	muls	r1, r3
    5e8c:	4806      	ldr	r0, [pc, #24]	; (5ea8 <onoff_stop+0x2c>)
    5e8e:	2240      	movs	r2, #64	; 0x40
    5e90:	f01b fc21 	bl	216d6 <stop>
	notify(mgr, res);
    5e94:	462b      	mov	r3, r5
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    5e96:	4601      	mov	r1, r0
	notify(mgr, res);
    5e98:	4620      	mov	r0, r4
}
    5e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5e9e:	4718      	bx	r3
    5ea0:	20001aa8 	.word	0x20001aa8
    5ea4:	b6db6db7 	.word	0xb6db6db7
    5ea8:	20000e60 	.word	0x20000e60

00005eac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5eac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct clock_control_async_data data = {
    5eae:	2300      	movs	r3, #0
    5eb0:	9301      	str	r3, [sp, #4]
	size_t offset = (size_t)(mgr - data->mgr);
    5eb2:	4c0a      	ldr	r4, [pc, #40]	; (5edc <onoff_start+0x30>)
	struct clock_control_async_data data = {
    5eb4:	4b0a      	ldr	r3, [pc, #40]	; (5ee0 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    5eb6:	1b04      	subs	r4, r0, r4
	struct clock_control_async_data data = {
    5eb8:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
    5ebc:	460d      	mov	r5, r1
		.cb = onoff_started_callback,
		.user_data = notify
	};
	int err;

	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
    5ebe:	4909      	ldr	r1, [pc, #36]	; (5ee4 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    5ec0:	10a4      	asrs	r4, r4, #2
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
    5ec2:	4361      	muls	r1, r4
{
    5ec4:	4606      	mov	r6, r0
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
    5ec6:	2340      	movs	r3, #64	; 0x40
    5ec8:	4807      	ldr	r0, [pc, #28]	; (5ee8 <onoff_start+0x3c>)
    5eca:	aa01      	add	r2, sp, #4
    5ecc:	f01b fc30 	bl	21730 <async_start>
			  &data, CTX_ONOFF);
	if (err < 0) {
    5ed0:	1e01      	subs	r1, r0, #0
    5ed2:	da01      	bge.n	5ed8 <onoff_start+0x2c>
		notify(mgr, err);
    5ed4:	4630      	mov	r0, r6
    5ed6:	47a8      	blx	r5
	}
}
    5ed8:	b004      	add	sp, #16
    5eda:	bd70      	pop	{r4, r5, r6, pc}
    5edc:	20001aa8 	.word	0x20001aa8
    5ee0:	00021799 	.word	0x00021799
    5ee4:	b6db6db7 	.word	0xb6db6db7
    5ee8:	20000e60 	.word	0x20000e60

00005eec <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5eec:	2200      	movs	r2, #0
{
    5eee:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ef0:	2101      	movs	r1, #1
{
    5ef2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ef4:	4610      	mov	r0, r2
    5ef6:	f000 fc2b 	bl	6750 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    5efa:	2000      	movs	r0, #0
    5efc:	f000 fbf6 	bl	66ec <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5f00:	480f      	ldr	r0, [pc, #60]	; (5f40 <clk_init+0x54>)
    5f02:	f018 fbed 	bl	1e6e0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5f06:	4b0f      	ldr	r3, [pc, #60]	; (5f44 <clk_init+0x58>)
    5f08:	4298      	cmp	r0, r3
    5f0a:	d115      	bne.n	5f38 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5f0c:	f01f fc8a 	bl	25824 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    5f10:	68e6      	ldr	r6, [r4, #12]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5f12:	490d      	ldr	r1, [pc, #52]	; (5f48 <clk_init+0x5c>)
    5f14:	4630      	mov	r0, r6
    5f16:	f01a fdcb 	bl	20ab0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5f1a:	2800      	cmp	r0, #0
    5f1c:	db0b      	blt.n	5f36 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    5f1e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5f20:	4909      	ldr	r1, [pc, #36]	; (5f48 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5f22:	2501      	movs	r5, #1
    5f24:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5f26:	f104 001c 	add.w	r0, r4, #28
    5f2a:	f01a fdc1 	bl	20ab0 <onoff_manager_init>
		if (err < 0) {
    5f2e:	2800      	cmp	r0, #0
    5f30:	db01      	blt.n	5f36 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5f32:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5f34:	2000      	movs	r0, #0
}
    5f36:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5f38:	f06f 0004 	mvn.w	r0, #4
    5f3c:	e7fb      	b.n	5f36 <clk_init+0x4a>
    5f3e:	bf00      	nop
    5f40:	00005f81 	.word	0x00005f81
    5f44:	0bad0000 	.word	0x0bad0000
    5f48:	00026ca0 	.word	0x00026ca0

00005f4c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5f4c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5f4e:	230c      	movs	r3, #12
    5f50:	4809      	ldr	r0, [pc, #36]	; (5f78 <clkstarted_handle.constprop.0+0x2c>)
    5f52:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    5f54:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    5f56:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5f58:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    5f5c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5f5e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    5f60:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5f62:	4418      	add	r0, r3
    5f64:	f01b fba4 	bl	216b0 <set_on_state>
	if (callback) {
    5f68:	b12d      	cbz	r5, 5f76 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5f6a:	4632      	mov	r2, r6
    5f6c:	462b      	mov	r3, r5
    5f6e:	4803      	ldr	r0, [pc, #12]	; (5f7c <clkstarted_handle.constprop.0+0x30>)
}
    5f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5f74:	4718      	bx	r3
}
    5f76:	bd70      	pop	{r4, r5, r6, pc}
    5f78:	20001aa8 	.word	0x20001aa8
    5f7c:	20000e60 	.word	0x20000e60

00005f80 <clock_event_handler>:
	switch (event) {
    5f80:	b110      	cbz	r0, 5f88 <clock_event_handler+0x8>
    5f82:	2801      	cmp	r0, #1
    5f84:	d004      	beq.n	5f90 <clock_event_handler+0x10>
    5f86:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5f88:	4b03      	ldr	r3, [pc, #12]	; (5f98 <clock_event_handler+0x18>)
    5f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5f8c:	075b      	lsls	r3, r3, #29
    5f8e:	d101      	bne.n	5f94 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5f90:	f7ff bfdc 	b.w	5f4c <clkstarted_handle.constprop.0>
}
    5f94:	4770      	bx	lr
    5f96:	bf00      	nop
    5f98:	20001aa8 	.word	0x20001aa8

00005f9c <generic_hfclk_start>:
{
    5f9c:	b508      	push	{r3, lr}
	__asm__ volatile(
    5f9e:	f04f 0320 	mov.w	r3, #32
    5fa2:	f3ef 8111 	mrs	r1, BASEPRI
    5fa6:	f383 8811 	msr	BASEPRI, r3
    5faa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5fae:	4a12      	ldr	r2, [pc, #72]	; (5ff8 <generic_hfclk_start+0x5c>)
    5fb0:	6813      	ldr	r3, [r2, #0]
    5fb2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5fb6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5fba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5fbc:	d00c      	beq.n	5fd8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5fc2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5fc6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5fca:	f013 0301 	ands.w	r3, r3, #1
    5fce:	d003      	beq.n	5fd8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    5fd0:	480a      	ldr	r0, [pc, #40]	; (5ffc <generic_hfclk_start+0x60>)
    5fd2:	f01b fb6d 	bl	216b0 <set_on_state>
			already_started = true;
    5fd6:	2301      	movs	r3, #1
	__asm__ volatile(
    5fd8:	f381 8811 	msr	BASEPRI, r1
    5fdc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5fe0:	b123      	cbz	r3, 5fec <generic_hfclk_start+0x50>
}
    5fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    5fe6:	2000      	movs	r0, #0
    5fe8:	f7ff bfb0 	b.w	5f4c <clkstarted_handle.constprop.0>
}
    5fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5ff0:	2001      	movs	r0, #1
    5ff2:	f01f bc24 	b.w	2583e <nrfx_clock_start>
    5ff6:	bf00      	nop
    5ff8:	20001af8 	.word	0x20001af8
    5ffc:	20001ae8 	.word	0x20001ae8

00006000 <api_blocking_start>:
{
    6000:	b510      	push	{r4, lr}
    6002:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6004:	2300      	movs	r3, #0
    6006:	2201      	movs	r2, #1
    6008:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    600c:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    600e:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
    6010:	4b0a      	ldr	r3, [pc, #40]	; (603c <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6012:	e9cd 2208 	strd	r2, r2, [sp, #32]
    6016:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    6018:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    601a:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    601e:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    6022:	f01b fbb6 	bl	21792 <api_start>
	if (err < 0) {
    6026:	2800      	cmp	r0, #0
    6028:	db05      	blt.n	6036 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
    602a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    602e:	2300      	movs	r3, #0
    6030:	4620      	mov	r0, r4
    6032:	f019 fa7b 	bl	1f52c <z_impl_k_sem_take>
}
    6036:	b00a      	add	sp, #40	; 0x28
    6038:	bd10      	pop	{r4, pc}
    603a:	bf00      	nop
    603c:	000217ab 	.word	0x000217ab

00006040 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6040:	4b09      	ldr	r3, [pc, #36]	; (6068 <generic_hfclk_stop+0x28>)
    6042:	f3bf 8f5b 	dmb	ish
    6046:	e853 2f00 	ldrex	r2, [r3]
    604a:	f022 0102 	bic.w	r1, r2, #2
    604e:	e843 1000 	strex	r0, r1, [r3]
    6052:	2800      	cmp	r0, #0
    6054:	d1f7      	bne.n	6046 <generic_hfclk_stop+0x6>
    6056:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    605a:	07d3      	lsls	r3, r2, #31
    605c:	d402      	bmi.n	6064 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    605e:	2001      	movs	r0, #1
    6060:	f018 bb4e 	b.w	1e700 <nrfx_clock_stop>
}
    6064:	4770      	bx	lr
    6066:	bf00      	nop
    6068:	20001af8 	.word	0x20001af8

0000606c <z_nrf_clock_control_get_onoff>:
}
    606c:	4a02      	ldr	r2, [pc, #8]	; (6078 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    606e:	b2c3      	uxtb	r3, r0
}
    6070:	201c      	movs	r0, #28
    6072:	fb03 2000 	mla	r0, r3, r0, r2
    6076:	4770      	bx	lr
    6078:	20001aa8 	.word	0x20001aa8

0000607c <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    607c:	4b09      	ldr	r3, [pc, #36]	; (60a4 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    607e:	f3bf 8f5b 	dmb	ish
    6082:	e853 2f00 	ldrex	r2, [r3]
    6086:	f042 0101 	orr.w	r1, r2, #1
    608a:	e843 1000 	strex	r0, r1, [r3]
    608e:	2800      	cmp	r0, #0
    6090:	d1f7      	bne.n	6082 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    6092:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    6096:	0793      	lsls	r3, r2, #30
    6098:	d402      	bmi.n	60a0 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    609a:	2001      	movs	r0, #1
    609c:	f01f bbcf 	b.w	2583e <nrfx_clock_start>
}
    60a0:	4770      	bx	lr
    60a2:	bf00      	nop
    60a4:	20001af8 	.word	0x20001af8

000060a8 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    60a8:	4b09      	ldr	r3, [pc, #36]	; (60d0 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    60aa:	f3bf 8f5b 	dmb	ish
    60ae:	e853 2f00 	ldrex	r2, [r3]
    60b2:	f022 0101 	bic.w	r1, r2, #1
    60b6:	e843 1000 	strex	r0, r1, [r3]
    60ba:	2800      	cmp	r0, #0
    60bc:	d1f7      	bne.n	60ae <z_nrf_clock_bt_ctlr_hf_release+0x6>
    60be:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    60c2:	0793      	lsls	r3, r2, #30
    60c4:	d402      	bmi.n	60cc <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    60c6:	2001      	movs	r0, #1
    60c8:	f018 bb1a 	b.w	1e700 <nrfx_clock_stop>
}
    60cc:	4770      	bx	lr
    60ce:	bf00      	nop
    60d0:	20001af8 	.word	0x20001af8

000060d4 <z_nrf_clock_control_lf_on>:
{
    60d4:	b510      	push	{r4, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    60d6:	4910      	ldr	r1, [pc, #64]	; (6118 <z_nrf_clock_control_lf_on+0x44>)
    60d8:	f3bf 8f5b 	dmb	ish
    60dc:	4604      	mov	r4, r0
    60de:	2201      	movs	r2, #1
    60e0:	e851 3f00 	ldrex	r3, [r1]
    60e4:	e841 2000 	strex	r0, r2, [r1]
    60e8:	2800      	cmp	r0, #0
    60ea:	d1f9      	bne.n	60e0 <z_nrf_clock_control_lf_on+0xc>
    60ec:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    60f0:	b933      	cbnz	r3, 6100 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    60f2:	490a      	ldr	r1, [pc, #40]	; (611c <z_nrf_clock_control_lf_on+0x48>)
		err = onoff_request(mgr, &cli);
    60f4:	480a      	ldr	r0, [pc, #40]	; (6120 <z_nrf_clock_control_lf_on+0x4c>)
    60f6:	604b      	str	r3, [r1, #4]
    60f8:	60cb      	str	r3, [r1, #12]
    60fa:	608a      	str	r2, [r1, #8]
    60fc:	f01a fceb 	bl	20ad6 <onoff_request>
	switch (start_mode) {
    6100:	2c01      	cmp	r4, #1
    6102:	d006      	beq.n	6112 <z_nrf_clock_control_lf_on+0x3e>
    6104:	2c02      	cmp	r4, #2
    6106:	d106      	bne.n	6116 <z_nrf_clock_control_lf_on+0x42>
		lfclk_spinwait(CLOCK_CONTROL_NRF_K32SRC);
    6108:	2001      	movs	r0, #1
}
    610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lfclk_spinwait(NRF_CLOCK_LFCLK_RC);
    610e:	f01b bb55 	b.w	217bc <lfclk_spinwait>
    6112:	2000      	movs	r0, #0
    6114:	e7f9      	b.n	610a <z_nrf_clock_control_lf_on+0x36>
}
    6116:	bd10      	pop	{r4, pc}
    6118:	20001afc 	.word	0x20001afc
    611c:	20001a98 	.word	0x20001a98
    6120:	20001ac4 	.word	0x20001ac4

00006124 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    6124:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    6126:	4b08      	ldr	r3, [pc, #32]	; (6148 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6128:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    612c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6130:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    6134:	4290      	cmp	r0, r2
    6136:	d100      	bne.n	613a <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    6138:	4770      	bx	lr
    613a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    613e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6140:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6144:	e7f2      	b.n	612c <handle_next_cycle_case+0x8>
    6146:	bf00      	nop
    6148:	40011000 	.word	0x40011000

0000614c <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    614c:	4b08      	ldr	r3, [pc, #32]	; (6170 <rtc_nrf_isr+0x24>)
    614e:	2200      	movs	r2, #0
    6150:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6154:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    6158:	4a06      	ldr	r2, [pc, #24]	; (6174 <rtc_nrf_isr+0x28>)
    return p_reg->CC[ch];
    615a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    615e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    6160:	1ac0      	subs	r0, r0, r3
    6162:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    6166:	4403      	add	r3, r0
    6168:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    616a:	f019 bbf5 	b.w	1f958 <z_clock_announce>
    616e:	bf00      	nop
    6170:	40011000 	.word	0x40011000
    6174:	20001b00 	.word	0x20001b00

00006178 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    6178:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    617a:	4c10      	ldr	r4, [pc, #64]	; (61bc <z_clock_driver_init+0x44>)
    617c:	2500      	movs	r5, #0
    617e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6182:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6186:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    618a:	4b0d      	ldr	r3, [pc, #52]	; (61c0 <z_clock_driver_init+0x48>)
    618c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6190:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    6194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6198:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    619c:	462a      	mov	r2, r5
    619e:	2101      	movs	r1, #1
    61a0:	2011      	movs	r0, #17
    61a2:	f000 fad5 	bl	6750 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    61a6:	2011      	movs	r0, #17
    61a8:	f000 faa0 	bl	66ec <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    61ac:	2301      	movs	r3, #1
    61ae:	60a3      	str	r3, [r4, #8]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(NRF_LFCLK_START_MODE_NOWAIT);
    61b0:	4628      	mov	r0, r5
    61b2:	6023      	str	r3, [r4, #0]
    61b4:	f7ff ff8e 	bl	60d4 <z_nrf_clock_control_lf_on>

	return 0;
}
    61b8:	4628      	mov	r0, r5
    61ba:	bd38      	pop	{r3, r4, r5, pc}
    61bc:	40011000 	.word	0x40011000
    61c0:	e000e100 	.word	0xe000e100

000061c4 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    61c4:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    61c6:	4a2d      	ldr	r2, [pc, #180]	; (627c <z_clock_set_timeout+0xb8>)
     return p_reg->COUNTER;
    61c8:	4c2d      	ldr	r4, [pc, #180]	; (6280 <z_clock_set_timeout+0xbc>)
    61ca:	6815      	ldr	r5, [r2, #0]
    61cc:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    61d0:	4e2c      	ldr	r6, [pc, #176]	; (6284 <z_clock_set_timeout+0xc0>)
	return (a - b) & COUNTER_MAX;
    61d2:	1b49      	subs	r1, r1, r5
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    61d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    61d8:	bf14      	ite	ne
    61da:	4603      	movne	r3, r0
    61dc:	4633      	moveq	r3, r6
	return (a - b) & COUNTER_MAX;
    61de:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    61e2:	0209      	lsls	r1, r1, #8
    61e4:	d439      	bmi.n	625a <z_clock_set_timeout+0x96>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    61e6:	3b01      	subs	r3, #1
    61e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    61ec:	42b3      	cmp	r3, r6
    61ee:	bfa8      	it	ge
    61f0:	4633      	movge	r3, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    61f2:	3201      	adds	r2, #1
    p_reg->INTENCLR = mask;
    61f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    61f8:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
    61fc:	4413      	add	r3, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    61fe:	42b3      	cmp	r3, r6
    6200:	bf94      	ite	ls
    6202:	18ed      	addls	r5, r5, r3
    6204:	19ad      	addhi	r5, r5, r6
     return p_reg->COUNTER;
    6206:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    620a:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    620e:	2600      	movs	r6, #0
	return (a - b) & COUNTER_MAX;
    6210:	1a9b      	subs	r3, r3, r2
    6212:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    6216:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    621a:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
	if (counter_sub(prev_val, now) == 1) {
    621e:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    6220:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6224:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6228:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    622c:	d106      	bne.n	623c <z_clock_set_timeout+0x78>
	z_impl_k_busy_wait(usec_to_wait);
    622e:	200f      	movs	r0, #15
    6230:	f01f fdc0 	bl	25db4 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6234:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    6238:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    623c:	4b12      	ldr	r3, [pc, #72]	; (6288 <z_clock_set_timeout+0xc4>)
    623e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6242:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    6246:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    624a:	1a2b      	subs	r3, r5, r0
    624c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    6250:	2b01      	cmp	r3, #1
    6252:	d104      	bne.n	625e <z_clock_set_timeout+0x9a>
		handle_next_cycle_case(t);
    6254:	f7ff ff66 	bl	6124 <handle_next_cycle_case>
    6258:	e00b      	b.n	6272 <z_clock_set_timeout+0xae>
		ticks = 0;
    625a:	2300      	movs	r3, #0
    625c:	e7c9      	b.n	61f2 <z_clock_set_timeout+0x2e>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    625e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6262:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    6266:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    626a:	1a2d      	subs	r5, r5, r0
    626c:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    626e:	022b      	lsls	r3, r5, #8
    6270:	d4f0      	bmi.n	6254 <z_clock_set_timeout+0x90>
    p_reg->INTENSET = mask;
    6272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6276:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    627a:	bd70      	pop	{r4, r5, r6, pc}
    627c:	20001b00 	.word	0x20001b00
    6280:	40011000 	.word	0x40011000
    6284:	007fffff 	.word	0x007fffff
    6288:	e000e100 	.word	0xe000e100

0000628c <z_clock_elapsed>:
	__asm__ volatile(
    628c:	f04f 0220 	mov.w	r2, #32
    6290:	f3ef 8311 	mrs	r3, BASEPRI
    6294:	f382 8811 	msr	BASEPRI, r2
    6298:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    629c:	4a06      	ldr	r2, [pc, #24]	; (62b8 <z_clock_elapsed+0x2c>)
    629e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    62a2:	4a06      	ldr	r2, [pc, #24]	; (62bc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    62a4:	6812      	ldr	r2, [r2, #0]
    62a6:	1a80      	subs	r0, r0, r2
    62a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    62ac:	f383 8811 	msr	BASEPRI, r3
    62b0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    62b4:	4770      	bx	lr
    62b6:	bf00      	nop
    62b8:	40011000 	.word	0x40011000
    62bc:	20001b00 	.word	0x20001b00

000062c0 <z_timer_cycle_get_32>:
	__asm__ volatile(
    62c0:	f04f 0320 	mov.w	r3, #32
    62c4:	f3ef 8211 	mrs	r2, BASEPRI
    62c8:	f383 8811 	msr	BASEPRI, r3
    62cc:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    62d0:	4906      	ldr	r1, [pc, #24]	; (62ec <z_timer_cycle_get_32+0x2c>)
    62d2:	4b07      	ldr	r3, [pc, #28]	; (62f0 <z_timer_cycle_get_32+0x30>)
    62d4:	6808      	ldr	r0, [r1, #0]
    62d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    62da:	f382 8811 	msr	BASEPRI, r2
    62de:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    62e2:	1a1b      	subs	r3, r3, r0
    62e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    62e8:	4418      	add	r0, r3
    62ea:	4770      	bx	lr
    62ec:	20001b00 	.word	0x20001b00
    62f0:	40011000 	.word	0x40011000

000062f4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    62f4:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    62f6:	4c11      	ldr	r4, [pc, #68]	; (633c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    62f8:	4a11      	ldr	r2, [pc, #68]	; (6340 <_DoInit+0x4c>)
    62fa:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    62fc:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    62fe:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6302:	4b10      	ldr	r3, [pc, #64]	; (6344 <_DoInit+0x50>)
    6304:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6306:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6308:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    630c:	4a0e      	ldr	r2, [pc, #56]	; (6348 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    630e:	490f      	ldr	r1, [pc, #60]	; (634c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6310:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    6312:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    6314:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    6316:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    6318:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    631a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    631c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    631e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    6320:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6322:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6324:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    6326:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    6328:	f020 f85f 	bl	263ea <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    632c:	4908      	ldr	r1, [pc, #32]	; (6350 <_DoInit+0x5c>)
    632e:	4620      	mov	r0, r4
    6330:	f020 f85b 	bl	263ea <strcpy>
  p->acID[6] = ' ';
    6334:	2320      	movs	r3, #32
    6336:	71a3      	strb	r3, [r4, #6]
}
    6338:	bd10      	pop	{r4, pc}
    633a:	bf00      	nop
    633c:	20001b04 	.word	0x20001b04
    6340:	000289ce 	.word	0x000289ce
    6344:	2000366e 	.word	0x2000366e
    6348:	2000365e 	.word	0x2000365e
    634c:	000289d7 	.word	0x000289d7
    6350:	000289db 	.word	0x000289db

00006354 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    6358:	4f23      	ldr	r7, [pc, #140]	; (63e8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    635a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    635e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    6360:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6364:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6366:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6368:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    636a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    636c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    636e:	d834      	bhi.n	63da <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6370:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6374:	ebaa 0905 	sub.w	r9, sl, r5
    6378:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    637c:	4294      	cmp	r4, r2
    637e:	d811      	bhi.n	63a4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    6380:	f04f 0918 	mov.w	r9, #24
    6384:	fb06 9309 	mla	r3, r6, r9, r9
    6388:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    638a:	4622      	mov	r2, r4
    638c:	6858      	ldr	r0, [r3, #4]
    638e:	4641      	mov	r1, r8
    6390:	4428      	add	r0, r5
    6392:	f01f ff80 	bl	26296 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    6396:	fb09 7606 	mla	r6, r9, r6, r7
    639a:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    639c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    639e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    63a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    63a4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    63a6:	429c      	cmp	r4, r3
    63a8:	d81b      	bhi.n	63e2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    63aa:	fb00 bb0b 	mla	fp, r0, fp, fp
    63ae:	44bb      	add	fp, r7
    63b0:	464a      	mov	r2, r9
    63b2:	f8db 0004 	ldr.w	r0, [fp, #4]
    63b6:	442c      	add	r4, r5
    63b8:	4428      	add	r0, r5
    63ba:	f01f ff6c 	bl	26296 <memcpy>
      if (NumBytes) {
    63be:	ebb4 040a 	subs.w	r4, r4, sl
    63c2:	d006      	beq.n	63d2 <SEGGER_RTT_WriteSkipNoLock+0x7e>
    63c4:	f8db 0004 	ldr.w	r0, [fp, #4]
    63c8:	4622      	mov	r2, r4
    63ca:	eb08 0109 	add.w	r1, r8, r9
    63ce:	f01f ff62 	bl	26296 <memcpy>
      pRing->WrOff = NumBytes;
    63d2:	2018      	movs	r0, #24
    63d4:	fb00 7606 	mla	r6, r0, r6, r7
    63d8:	e7e0      	b.n	639c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    63da:	3b01      	subs	r3, #1
    63dc:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    63de:	42a3      	cmp	r3, r4
    63e0:	d2ce      	bcs.n	6380 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    63e2:	2000      	movs	r0, #0
    63e4:	e7dc      	b.n	63a0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    63e6:	bf00      	nop
    63e8:	20001b04 	.word	0x20001b04

000063ec <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    63ec:	4b03      	ldr	r3, [pc, #12]	; (63fc <SEGGER_RTT_HasDataUp+0x10>)
    63ee:	2218      	movs	r2, #24
    63f0:	fb02 3300 	mla	r3, r2, r0, r3
    63f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    63f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    63f8:	1a80      	subs	r0, r0, r2
    63fa:	4770      	bx	lr
    63fc:	20001b04 	.word	0x20001b04

00006400 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    6400:	4b01      	ldr	r3, [pc, #4]	; (6408 <uECC_get_rng+0x8>)
    6402:	6818      	ldr	r0, [r3, #0]
    6404:	4770      	bx	lr
    6406:	bf00      	nop
    6408:	20000214 	.word	0x20000214

0000640c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    640c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    640e:	2208      	movs	r2, #8
{
    6410:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6412:	f01b fbd9 	bl	21bc8 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    6416:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    6418:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    641a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    641c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    641e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6420:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    6422:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    6424:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    6426:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6428:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    642a:	4613      	mov	r3, r2
    642c:	466a      	mov	r2, sp
{
    642e:	460c      	mov	r4, r1
    6430:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    6432:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6434:	4611      	mov	r1, r2
    6436:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    6438:	e9cd 7701 	strd	r7, r7, [sp, #4]
    643c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    643e:	f01b fad0 	bl	219e2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6442:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6444:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6446:	4630      	mov	r0, r6
    6448:	f01b facb 	bl	219e2 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    644c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    644e:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    6450:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6452:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    6454:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6456:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    6458:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    645a:	4405      	add	r5, r0
	tmp[7] = 0;
    645c:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6460:	4610      	mov	r0, r2
    6462:	4611      	mov	r1, r2
    6464:	f01b fabd 	bl	219e2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6468:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    646a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    646c:	4630      	mov	r0, r6
    646e:	f01b fab8 	bl	219e2 <uECC_vli_add>
    6472:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    6474:	6a20      	ldr	r0, [r4, #32]
    6476:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    6478:	6a60      	ldr	r0, [r4, #36]	; 0x24
    647a:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    647c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    647e:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    6480:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6482:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    6484:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    6486:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6488:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    648a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    648e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6490:	f01b faa7 	bl	219e2 <uECC_vli_add>
    6494:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    6496:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6498:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    649a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    649c:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    64a0:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    64a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    64a4:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    64a6:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    64aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    64ac:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    64b0:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    64b2:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    64b6:	6a20      	ldr	r0, [r4, #32]
    64b8:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    64ba:	4630      	mov	r0, r6
    64bc:	f01b fa91 	bl	219e2 <uECC_vli_add>
    64c0:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    64c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    64c4:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    64c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    64c8:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    64ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    64cc:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    64ce:	6a20      	ldr	r0, [r4, #32]
    64d0:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    64d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    64d4:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    64d6:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    64d8:	e9cd 7704 	strd	r7, r7, [sp, #16]
    64dc:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    64de:	f01b fba9 	bl	21c34 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    64e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    64e4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    64e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    64e8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    64ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    64ec:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    64ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    64f0:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    64f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64f4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    64f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    64f8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    64fa:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    64fc:	2308      	movs	r3, #8
    64fe:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    6500:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6504:	f01b fb96 	bl	21c34 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    6508:	6b63      	ldr	r3, [r4, #52]	; 0x34
    650a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    650c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    650e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    6510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6512:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    6514:	6a23      	ldr	r3, [r4, #32]
    6516:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    6518:	6a63      	ldr	r3, [r4, #36]	; 0x24
    651a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    651c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    651e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    6522:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6524:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6526:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6528:	2308      	movs	r3, #8
    652a:	4630      	mov	r0, r6
    652c:	f01b fb82 	bl	21c34 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    6530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6532:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    6534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    6536:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    653a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    653c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    653e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6540:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    6542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    6544:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    6548:	6b63      	ldr	r3, [r4, #52]	; 0x34
    654a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    654c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    654e:	2308      	movs	r3, #8
    6550:	4630      	mov	r0, r6
    6552:	f01b fb6f 	bl	21c34 <uECC_vli_sub>

	if (carry < 0) {
    6556:	1a2d      	subs	r5, r5, r0
    6558:	d410      	bmi.n	657c <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    655a:	4c0d      	ldr	r4, [pc, #52]	; (6590 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    655c:	b935      	cbnz	r5, 656c <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    655e:	2208      	movs	r2, #8
    6560:	4631      	mov	r1, r6
    6562:	4620      	mov	r0, r4
    6564:	f01b fb3c 	bl	21be0 <uECC_vli_cmp_unsafe>
		while (carry || 
    6568:	2801      	cmp	r0, #1
    656a:	d00f      	beq.n	658c <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    656c:	2308      	movs	r3, #8
    656e:	4622      	mov	r2, r4
    6570:	4631      	mov	r1, r6
    6572:	4630      	mov	r0, r6
    6574:	f01b fb5e 	bl	21c34 <uECC_vli_sub>
    6578:	1a2d      	subs	r5, r5, r0
    657a:	e7ef      	b.n	655c <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    657c:	4a04      	ldr	r2, [pc, #16]	; (6590 <vli_mmod_fast_secp256r1+0x184>)
    657e:	2308      	movs	r3, #8
    6580:	4631      	mov	r1, r6
    6582:	4630      	mov	r0, r6
    6584:	f01b fa2d 	bl	219e2 <uECC_vli_add>
		while (carry < 0);
    6588:	182d      	adds	r5, r5, r0
    658a:	d4f8      	bmi.n	657e <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    658c:	b009      	add	sp, #36	; 0x24
    658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6590:	00026cb0 	.word	0x00026cb0

00006594 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    6594:	4904      	ldr	r1, [pc, #16]	; (65a8 <sub_bytes+0x14>)
    6596:	1e43      	subs	r3, r0, #1
    6598:	300f      	adds	r0, #15
    659a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    659e:	5c8a      	ldrb	r2, [r1, r2]
    65a0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    65a2:	4283      	cmp	r3, r0
    65a4:	d1f9      	bne.n	659a <sub_bytes+0x6>
	}
}
    65a6:	4770      	bx	lr
    65a8:	000289e2 	.word	0x000289e2

000065ac <tc_aes128_set_encrypt_key>:
{
    65ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    65ae:	4e26      	ldr	r6, [pc, #152]	; (6648 <tc_aes128_set_encrypt_key+0x9c>)
{
    65b0:	4607      	mov	r7, r0
    65b2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    65b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    65b6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    65b8:	ad01      	add	r5, sp, #4
    65ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    65bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    65be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    65c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    65c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    65c8:	4638      	mov	r0, r7
    65ca:	2f00      	cmp	r7, #0
    65cc:	d038      	beq.n	6640 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    65ce:	2c00      	cmp	r4, #0
    65d0:	d038      	beq.n	6644 <tc_aes128_set_encrypt_key+0x98>
    65d2:	1f38      	subs	r0, r7, #4
    65d4:	4621      	mov	r1, r4
    65d6:	4602      	mov	r2, r0
    65d8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    65da:	784b      	ldrb	r3, [r1, #1]
    65dc:	780d      	ldrb	r5, [r1, #0]
    65de:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    65e0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    65e4:	78cd      	ldrb	r5, [r1, #3]
    65e6:	432b      	orrs	r3, r5
    65e8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    65ea:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    65ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    65f0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    65f2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    65f6:	d1f0      	bne.n	65da <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    65f8:	4c14      	ldr	r4, [pc, #80]	; (664c <tc_aes128_set_encrypt_key+0xa0>)
    65fa:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    65fc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    65fe:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    6600:	d116      	bne.n	6630 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6602:	f3c3 4207 	ubfx	r2, r3, #16, #8
    6606:	5ca5      	ldrb	r5, [r4, r2]
    6608:	0e1a      	lsrs	r2, r3, #24
    660a:	5ca2      	ldrb	r2, [r4, r2]
    660c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    6610:	f3c3 2507 	ubfx	r5, r3, #8, #8
    6614:	b2db      	uxtb	r3, r3
    6616:	5d65      	ldrb	r5, [r4, r5]
    6618:	5ce3      	ldrb	r3, [r4, r3]
    661a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    661e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    6622:	f021 0303 	bic.w	r3, r1, #3
    6626:	3330      	adds	r3, #48	; 0x30
    6628:	446b      	add	r3, sp
    662a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    662e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    6630:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    6634:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    6636:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    6638:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    663a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    663c:	d1de      	bne.n	65fc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    663e:	2001      	movs	r0, #1
}
    6640:	b00d      	add	sp, #52	; 0x34
    6642:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    6644:	4620      	mov	r0, r4
    6646:	e7fb      	b.n	6640 <tc_aes128_set_encrypt_key+0x94>
    6648:	000269dc 	.word	0x000269dc
    664c:	000289e2 	.word	0x000289e2

00006650 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6650:	4a09      	ldr	r2, [pc, #36]	; (6678 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6652:	490a      	ldr	r1, [pc, #40]	; (667c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    6654:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6656:	6809      	ldr	r1, [r1, #0]
    6658:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    665a:	4909      	ldr	r1, [pc, #36]	; (6680 <arch_swap+0x30>)
	_current->arch.basepri = key;
    665c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    665e:	684b      	ldr	r3, [r1, #4]
    6660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6664:	604b      	str	r3, [r1, #4]
    6666:	2300      	movs	r3, #0
    6668:	f383 8811 	msr	BASEPRI, r3
    666c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6670:	6893      	ldr	r3, [r2, #8]
}
    6672:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    6674:	4770      	bx	lr
    6676:	bf00      	nop
    6678:	200035c8 	.word	0x200035c8
    667c:	00028370 	.word	0x00028370
    6680:	e000ed00 	.word	0xe000ed00

00006684 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6684:	490f      	ldr	r1, [pc, #60]	; (66c4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6686:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6688:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    668c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    668e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6692:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6696:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6698:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    669c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    66a0:	4f09      	ldr	r7, [pc, #36]	; (66c8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    66a2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    66a6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    66a8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    66aa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    66ac:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    66ae:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    66b0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    66b2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    66b6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    66ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    66be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    66c2:	4770      	bx	lr
    ldr r1, =_kernel
    66c4:	200035c8 	.word	0x200035c8
    ldr v4, =_SCS_ICSR
    66c8:	e000ed04 	.word	0xe000ed04

000066cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    66cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    66d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    66d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    66d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    66da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    66dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    66e0:	2902      	cmp	r1, #2
    beq _oops
    66e2:	d0ff      	beq.n	66e4 <_oops>

000066e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    66e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    66e6:	f01c f9ce 	bl	22a86 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    66ea:	bd01      	pop	{r0, pc}

000066ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    66ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    66ee:	2b00      	cmp	r3, #0
    66f0:	db08      	blt.n	6704 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66f2:	2201      	movs	r2, #1
    66f4:	f000 001f 	and.w	r0, r0, #31
    66f8:	fa02 f000 	lsl.w	r0, r2, r0
    66fc:	095b      	lsrs	r3, r3, #5
    66fe:	4a02      	ldr	r2, [pc, #8]	; (6708 <arch_irq_enable+0x1c>)
    6700:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6704:	4770      	bx	lr
    6706:	bf00      	nop
    6708:	e000e100 	.word	0xe000e100

0000670c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    670c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    670e:	2b00      	cmp	r3, #0
    6710:	db0d      	blt.n	672e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6712:	2201      	movs	r2, #1
    6714:	095b      	lsrs	r3, r3, #5
    6716:	f000 001f 	and.w	r0, r0, #31
    671a:	fa02 f000 	lsl.w	r0, r2, r0
    671e:	3320      	adds	r3, #32
    6720:	4a03      	ldr	r2, [pc, #12]	; (6730 <arch_irq_disable+0x24>)
    6722:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6726:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    672a:	f3bf 8f6f 	isb	sy
}
    672e:	4770      	bx	lr
    6730:	e000e100 	.word	0xe000e100

00006734 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6734:	4b05      	ldr	r3, [pc, #20]	; (674c <arch_irq_is_enabled+0x18>)
    6736:	0942      	lsrs	r2, r0, #5
    6738:	f000 001f 	and.w	r0, r0, #31
    673c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6740:	2301      	movs	r3, #1
    6742:	fa03 f000 	lsl.w	r0, r3, r0
}
    6746:	4010      	ands	r0, r2
    6748:	4770      	bx	lr
    674a:	bf00      	nop
    674c:	e000e100 	.word	0xe000e100

00006750 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6750:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    6752:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6754:	bfa8      	it	ge
    6756:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    675a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    675e:	bfb8      	it	lt
    6760:	4b06      	ldrlt	r3, [pc, #24]	; (677c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6762:	ea4f 1141 	mov.w	r1, r1, lsl #5
    6766:	bfac      	ite	ge
    6768:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    676c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6770:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6772:	bfb4      	ite	lt
    6774:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6776:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    677a:	4770      	bx	lr
    677c:	e000ed14 	.word	0xe000ed14

00006780 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    6780:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    6782:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    6784:	4b04      	ldr	r3, [pc, #16]	; (6798 <_arch_isr_direct_pm+0x18>)
    6786:	6a18      	ldr	r0, [r3, #32]
    6788:	b118      	cbz	r0, 6792 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    678a:	2200      	movs	r2, #0
    678c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    678e:	f01f f87a 	bl	25886 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    6792:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    6794:	bd08      	pop	{r3, pc}
    6796:	bf00      	nop
    6798:	200035c8 	.word	0x200035c8

0000679c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    679c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    67a0:	9b00      	ldr	r3, [sp, #0]
    67a2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    67a6:	490a      	ldr	r1, [pc, #40]	; (67d0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    67a8:	9b01      	ldr	r3, [sp, #4]
    67aa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    67ae:	9b02      	ldr	r3, [sp, #8]
    67b0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    67b4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    67b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    67bc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    67c0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    67c4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    67c6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    67c8:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    67ca:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    67cc:	4770      	bx	lr
    67ce:	bf00      	nop
    67d0:	00020b91 	.word	0x00020b91

000067d4 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    67d4:	b508      	push	{r3, lr}
    67d6:	4606      	mov	r6, r0
    67d8:	460d      	mov	r5, r1
    67da:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    67dc:	f000 fb14 	bl	6e08 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    67e0:	4b07      	ldr	r3, [pc, #28]	; (6800 <arch_switch_to_main_thread+0x2c>)
    67e2:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    67e4:	4620      	mov	r0, r4
    67e6:	f385 8809 	msr	PSP, r5
    67ea:	2100      	movs	r1, #0
    67ec:	b663      	cpsie	if
    67ee:	f381 8811 	msr	BASEPRI, r1
    67f2:	f3bf 8f6f 	isb	sy
    67f6:	2200      	movs	r2, #0
    67f8:	2300      	movs	r3, #0
    67fa:	f01a f9c9 	bl	20b90 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    67fe:	bf00      	nop
    6800:	200035c8 	.word	0x200035c8

00006804 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6804:	4901      	ldr	r1, [pc, #4]	; (680c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    6806:	2210      	movs	r2, #16
	str	r2, [r1]
    6808:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    680a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    680c:	e000ed10 	.word	0xe000ed10

00006810 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6810:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6812:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6814:	f380 8811 	msr	BASEPRI, r0
	isb
    6818:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    681c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6820:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6822:	b662      	cpsie	i
	isb
    6824:	f3bf 8f6f 	isb	sy

	bx	lr
    6828:	4770      	bx	lr
    682a:	bf00      	nop

0000682c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    682c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    682e:	4606      	mov	r6, r0

	if (esf != NULL) {
    6830:	460c      	mov	r4, r1
    6832:	b301      	cbz	r1, 6876 <z_arm_fatal_error+0x4a>
    6834:	4b13      	ldr	r3, [pc, #76]	; (6884 <z_arm_fatal_error+0x58>)
    6836:	4d14      	ldr	r5, [pc, #80]	; (6888 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6838:	4814      	ldr	r0, [pc, #80]	; (688c <z_arm_fatal_error+0x60>)
    683a:	1aed      	subs	r5, r5, r3
    683c:	08ed      	lsrs	r5, r5, #3
    683e:	01ad      	lsls	r5, r5, #6
    6840:	f045 0501 	orr.w	r5, r5, #1
    6844:	f8ad 5000 	strh.w	r5, [sp]
    6848:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    684c:	6809      	ldr	r1, [r1, #0]
    684e:	f01a fc59 	bl	21104 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6852:	f8ad 5000 	strh.w	r5, [sp]
    6856:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    685a:	68e1      	ldr	r1, [r4, #12]
    685c:	480c      	ldr	r0, [pc, #48]	; (6890 <z_arm_fatal_error+0x64>)
    685e:	f01a fc51 	bl	21104 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6862:	69e1      	ldr	r1, [r4, #28]
    6864:	480b      	ldr	r0, [pc, #44]	; (6894 <z_arm_fatal_error+0x68>)
    6866:	462a      	mov	r2, r5
    6868:	f01a fc1f 	bl	210aa <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    686c:	69a1      	ldr	r1, [r4, #24]
    686e:	480a      	ldr	r0, [pc, #40]	; (6898 <z_arm_fatal_error+0x6c>)
    6870:	462a      	mov	r2, r5
    6872:	f01a fc1a 	bl	210aa <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6876:	4621      	mov	r1, r4
    6878:	4630      	mov	r0, r6
}
    687a:	b002      	add	sp, #8
    687c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    6880:	f018 b820 	b.w	1e8c4 <z_fatal_error>
    6884:	00026828 	.word	0x00026828
    6888:	00026970 	.word	0x00026970
    688c:	00028ae2 	.word	0x00028ae2
    6890:	00028b11 	.word	0x00028b11
    6894:	00028b40 	.word	0x00028b40
    6898:	00028b4f 	.word	0x00028b4f

0000689c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    689c:	bf30      	wfi
    b z_SysNmiOnReset
    689e:	f7ff bffd 	b.w	689c <z_SysNmiOnReset>
    68a2:	bf00      	nop

000068a4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    68a4:	4a0e      	ldr	r2, [pc, #56]	; (68e0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    68a6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    68a8:	4b0e      	ldr	r3, [pc, #56]	; (68e4 <z_arm_prep_c+0x40>)
    68aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    68ae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    68b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68b4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    68b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    68bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    68c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    68c4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    68c8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    68cc:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    68d0:	f018 f874 	bl	1e9bc <z_bss_zero>
	z_data_copy();
    68d4:	f018 f87c 	bl	1e9d0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    68d8:	f000 fa5e 	bl	6d98 <z_arm_interrupt_init>
	z_cstart();
    68dc:	f018 f8b6 	bl	1ea4c <z_cstart>
    68e0:	00000000 	.word	0x00000000
    68e4:	e000ed00 	.word	0xe000ed00

000068e8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    68e8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    68ea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    68ec:	4a0b      	ldr	r2, [pc, #44]	; (691c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    68ee:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    68f0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    68f2:	bf1e      	ittt	ne
	movne	r1, #0
    68f4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    68f6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    68f8:	f01e ffc5 	blne	25886 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    68fc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    68fe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6902:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6906:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    690a:	4905      	ldr	r1, [pc, #20]	; (6920 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    690c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    690e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6910:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6912:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6916:	4903      	ldr	r1, [pc, #12]	; (6924 <_isr_wrapper+0x3c>)
	bx r1
    6918:	4708      	bx	r1
    691a:	0000      	.short	0x0000
	ldr r2, =_kernel
    691c:	200035c8 	.word	0x200035c8
	ldr r1, =_sw_isr_table
    6920:	0002665c 	.word	0x0002665c
	ldr r1, =z_arm_int_exit
    6924:	00006d7d 	.word	0x00006d7d

00006928 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    6928:	f01c f8d5 	bl	22ad6 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    692c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    692e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6932:	4808      	ldr	r0, [pc, #32]	; (6954 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6934:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6938:	1840      	adds	r0, r0, r1
    msr PSP, r0
    693a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    693e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6942:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6944:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6946:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    694a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    694e:	f7ff ffa9 	bl	68a4 <z_arm_prep_c>
    6952:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    6954:	200054e0 	.word	0x200054e0

00006958 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6958:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    695c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6960:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6962:	4672      	mov	r2, lr
	bl z_arm_fault
    6964:	f000 f932 	bl	6bcc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6968:	bd01      	pop	{r0, pc}
    696a:	bf00      	nop

0000696c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    696c:	b570      	push	{r4, r5, r6, lr}
    696e:	4b23      	ldr	r3, [pc, #140]	; (69fc <usage_fault.constprop.0+0x90>)
    6970:	4c23      	ldr	r4, [pc, #140]	; (6a00 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6972:	4d24      	ldr	r5, [pc, #144]	; (6a04 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6974:	4824      	ldr	r0, [pc, #144]	; (6a08 <usage_fault.constprop.0+0x9c>)
    6976:	1ae4      	subs	r4, r4, r3
    6978:	08e4      	lsrs	r4, r4, #3
    697a:	01a4      	lsls	r4, r4, #6
    697c:	f044 0601 	orr.w	r6, r4, #1
    6980:	4631      	mov	r1, r6
    6982:	f01a fb85 	bl	21090 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6986:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6988:	019b      	lsls	r3, r3, #6
    698a:	d503      	bpl.n	6994 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    698c:	481f      	ldr	r0, [pc, #124]	; (6a0c <usage_fault.constprop.0+0xa0>)
    698e:	4631      	mov	r1, r6
    6990:	f01a fb7e 	bl	21090 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6994:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6996:	01dd      	lsls	r5, r3, #7
    6998:	d504      	bpl.n	69a4 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    699a:	481d      	ldr	r0, [pc, #116]	; (6a10 <usage_fault.constprop.0+0xa4>)
    699c:	f044 0101 	orr.w	r1, r4, #1
    69a0:	f01a fb76 	bl	21090 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    69a4:	4d17      	ldr	r5, [pc, #92]	; (6a04 <usage_fault.constprop.0+0x98>)
    69a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69a8:	0318      	lsls	r0, r3, #12
    69aa:	d504      	bpl.n	69b6 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    69ac:	4819      	ldr	r0, [pc, #100]	; (6a14 <usage_fault.constprop.0+0xa8>)
    69ae:	f044 0101 	orr.w	r1, r4, #1
    69b2:	f01a fb6d 	bl	21090 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    69b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69b8:	0359      	lsls	r1, r3, #13
    69ba:	d504      	bpl.n	69c6 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    69bc:	4816      	ldr	r0, [pc, #88]	; (6a18 <usage_fault.constprop.0+0xac>)
    69be:	f044 0101 	orr.w	r1, r4, #1
    69c2:	f01a fb65 	bl	21090 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    69c6:	4d0f      	ldr	r5, [pc, #60]	; (6a04 <usage_fault.constprop.0+0x98>)
    69c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69ca:	039a      	lsls	r2, r3, #14
    69cc:	d504      	bpl.n	69d8 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    69ce:	4813      	ldr	r0, [pc, #76]	; (6a1c <usage_fault.constprop.0+0xb0>)
    69d0:	f044 0101 	orr.w	r1, r4, #1
    69d4:	f01a fb5c 	bl	21090 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    69d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69da:	03db      	lsls	r3, r3, #15
    69dc:	d504      	bpl.n	69e8 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    69de:	4810      	ldr	r0, [pc, #64]	; (6a20 <usage_fault.constprop.0+0xb4>)
    69e0:	f044 0101 	orr.w	r1, r4, #1
    69e4:	f01a fb54 	bl	21090 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    69e8:	4a06      	ldr	r2, [pc, #24]	; (6a04 <usage_fault.constprop.0+0x98>)
    69ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    69ec:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    69f0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    69f4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    69f6:	2000      	movs	r0, #0
    69f8:	bd70      	pop	{r4, r5, r6, pc}
    69fa:	bf00      	nop
    69fc:	00026828 	.word	0x00026828
    6a00:	00026970 	.word	0x00026970
    6a04:	e000ed00 	.word	0xe000ed00
    6a08:	00028b7d 	.word	0x00028b7d
    6a0c:	00028b95 	.word	0x00028b95
    6a10:	00028ba8 	.word	0x00028ba8
    6a14:	00028bc2 	.word	0x00028bc2
    6a18:	00028be0 	.word	0x00028be0
    6a1c:	00028c05 	.word	0x00028c05
    6a20:	00028c1f 	.word	0x00028c1f

00006a24 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a28:	4b2a      	ldr	r3, [pc, #168]	; (6ad4 <bus_fault.constprop.0+0xb0>)
    6a2a:	4c2b      	ldr	r4, [pc, #172]	; (6ad8 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6a2c:	4d2b      	ldr	r5, [pc, #172]	; (6adc <bus_fault.constprop.0+0xb8>)
    6a2e:	1ae4      	subs	r4, r4, r3
    6a30:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    6a32:	01a4      	lsls	r4, r4, #6
    6a34:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6a38:	4607      	mov	r7, r0
    6a3a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6a3c:	4828      	ldr	r0, [pc, #160]	; (6ae0 <bus_fault.constprop.0+0xbc>)
    6a3e:	4641      	mov	r1, r8
    6a40:	f01a fb26 	bl	21090 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6a44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a46:	04d9      	lsls	r1, r3, #19
    6a48:	d503      	bpl.n	6a52 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    6a4a:	4826      	ldr	r0, [pc, #152]	; (6ae4 <bus_fault.constprop.0+0xc0>)
    6a4c:	4641      	mov	r1, r8
    6a4e:	f01a fb1f 	bl	21090 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6a52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a54:	051a      	lsls	r2, r3, #20
    6a56:	d504      	bpl.n	6a62 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    6a58:	4823      	ldr	r0, [pc, #140]	; (6ae8 <bus_fault.constprop.0+0xc4>)
    6a5a:	f044 0101 	orr.w	r1, r4, #1
    6a5e:	f01a fb17 	bl	21090 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6a62:	4d1e      	ldr	r5, [pc, #120]	; (6adc <bus_fault.constprop.0+0xb8>)
    6a64:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a66:	059b      	lsls	r3, r3, #22
    6a68:	d512      	bpl.n	6a90 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    6a6a:	f044 0801 	orr.w	r8, r4, #1
    6a6e:	481f      	ldr	r0, [pc, #124]	; (6aec <bus_fault.constprop.0+0xc8>)
    6a70:	4641      	mov	r1, r8
    6a72:	f01a fb0d 	bl	21090 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    6a76:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6a78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a7a:	0418      	lsls	r0, r3, #16
    6a7c:	d508      	bpl.n	6a90 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6a7e:	481c      	ldr	r0, [pc, #112]	; (6af0 <bus_fault.constprop.0+0xcc>)
    6a80:	4642      	mov	r2, r8
    6a82:	f01a fb12 	bl	210aa <log_1>
			if (from_hard_fault) {
    6a86:	b11f      	cbz	r7, 6a90 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6a88:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6a8e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6a90:	4d12      	ldr	r5, [pc, #72]	; (6adc <bus_fault.constprop.0+0xb8>)
    6a92:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a94:	0559      	lsls	r1, r3, #21
    6a96:	d504      	bpl.n	6aa2 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    6a98:	4816      	ldr	r0, [pc, #88]	; (6af4 <bus_fault.constprop.0+0xd0>)
    6a9a:	f044 0101 	orr.w	r1, r4, #1
    6a9e:	f01a faf7 	bl	21090 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6aa2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6aa4:	05da      	lsls	r2, r3, #23
    6aa6:	d50d      	bpl.n	6ac4 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    6aa8:	4813      	ldr	r0, [pc, #76]	; (6af8 <bus_fault.constprop.0+0xd4>)
    6aaa:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6aae:	f01a faef 	bl	21090 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6ab2:	4a0a      	ldr	r2, [pc, #40]	; (6adc <bus_fault.constprop.0+0xb8>)
    6ab4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6ab6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6ab8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6abc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6abe:	7030      	strb	r0, [r6, #0]
}
    6ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6ac4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6ac6:	049b      	lsls	r3, r3, #18
    6ac8:	d5f3      	bpl.n	6ab2 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6aca:	480c      	ldr	r0, [pc, #48]	; (6afc <bus_fault.constprop.0+0xd8>)
    6acc:	f044 0101 	orr.w	r1, r4, #1
    6ad0:	e7ed      	b.n	6aae <bus_fault.constprop.0+0x8a>
    6ad2:	bf00      	nop
    6ad4:	00026828 	.word	0x00026828
    6ad8:	00026970 	.word	0x00026970
    6adc:	e000ed00 	.word	0xe000ed00
    6ae0:	00028c4a 	.word	0x00028c4a
    6ae4:	00028c60 	.word	0x00028c60
    6ae8:	00028c71 	.word	0x00028c71
    6aec:	00028c84 	.word	0x00028c84
    6af0:	00028c9d 	.word	0x00028c9d
    6af4:	00028cb2 	.word	0x00028cb2
    6af8:	00028ccd 	.word	0x00028ccd
    6afc:	00028ce5 	.word	0x00028ce5

00006b00 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b04:	4b27      	ldr	r3, [pc, #156]	; (6ba4 <mem_manage_fault.constprop.0+0xa4>)
    6b06:	4c28      	ldr	r4, [pc, #160]	; (6ba8 <mem_manage_fault.constprop.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6b08:	4d28      	ldr	r5, [pc, #160]	; (6bac <mem_manage_fault.constprop.0+0xac>)
    6b0a:	1ae4      	subs	r4, r4, r3
    6b0c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    6b0e:	01a4      	lsls	r4, r4, #6
    6b10:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6b14:	4607      	mov	r7, r0
    6b16:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6b18:	4825      	ldr	r0, [pc, #148]	; (6bb0 <mem_manage_fault.constprop.0+0xb0>)
    6b1a:	4641      	mov	r1, r8
    6b1c:	f01a fab8 	bl	21090 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6b20:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b22:	06d9      	lsls	r1, r3, #27
    6b24:	d503      	bpl.n	6b2e <mem_manage_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6b26:	4823      	ldr	r0, [pc, #140]	; (6bb4 <mem_manage_fault.constprop.0+0xb4>)
    6b28:	4641      	mov	r1, r8
    6b2a:	f01a fab1 	bl	21090 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6b2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b30:	071a      	lsls	r2, r3, #28
    6b32:	d504      	bpl.n	6b3e <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    6b34:	4820      	ldr	r0, [pc, #128]	; (6bb8 <mem_manage_fault.constprop.0+0xb8>)
    6b36:	f044 0101 	orr.w	r1, r4, #1
    6b3a:	f01a faa9 	bl	21090 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6b3e:	4d1b      	ldr	r5, [pc, #108]	; (6bac <mem_manage_fault.constprop.0+0xac>)
    6b40:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b42:	079b      	lsls	r3, r3, #30
    6b44:	d512      	bpl.n	6b6c <mem_manage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    6b46:	f044 0801 	orr.w	r8, r4, #1
    6b4a:	481c      	ldr	r0, [pc, #112]	; (6bbc <mem_manage_fault.constprop.0+0xbc>)
    6b4c:	4641      	mov	r1, r8
    6b4e:	f01a fa9f 	bl	21090 <log_0>
		mmfar = SCB->MMFAR;
    6b52:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6b54:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b56:	0618      	lsls	r0, r3, #24
    6b58:	d508      	bpl.n	6b6c <mem_manage_fault.constprop.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6b5a:	4819      	ldr	r0, [pc, #100]	; (6bc0 <mem_manage_fault.constprop.0+0xc0>)
    6b5c:	4642      	mov	r2, r8
    6b5e:	f01a faa4 	bl	210aa <log_1>
			if (from_hard_fault) {
    6b62:	b11f      	cbz	r7, 6b6c <mem_manage_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6b64:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6b6a:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6b6c:	4d0f      	ldr	r5, [pc, #60]	; (6bac <mem_manage_fault.constprop.0+0xac>)
    6b6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b70:	07da      	lsls	r2, r3, #31
    6b72:	d504      	bpl.n	6b7e <mem_manage_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    6b74:	4813      	ldr	r0, [pc, #76]	; (6bc4 <mem_manage_fault.constprop.0+0xc4>)
    6b76:	f044 0101 	orr.w	r1, r4, #1
    6b7a:	f01a fa89 	bl	21090 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6b7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b80:	069b      	lsls	r3, r3, #26
    6b82:	d504      	bpl.n	6b8e <mem_manage_fault.constprop.0+0x8e>
		PR_FAULT_INFO(
    6b84:	4810      	ldr	r0, [pc, #64]	; (6bc8 <mem_manage_fault.constprop.0+0xc8>)
    6b86:	f044 0101 	orr.w	r1, r4, #1
    6b8a:	f01a fa81 	bl	21090 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    6b8e:	4b07      	ldr	r3, [pc, #28]	; (6bac <mem_manage_fault.constprop.0+0xac>)
    6b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6b94:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6b96:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    6b9a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6b9c:	7030      	strb	r0, [r6, #0]
}
    6b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ba2:	bf00      	nop
    6ba4:	00026828 	.word	0x00026828
    6ba8:	00026970 	.word	0x00026970
    6bac:	e000ed00 	.word	0xe000ed00
    6bb0:	00028d14 	.word	0x00028d14
    6bb4:	00028d2a 	.word	0x00028d2a
    6bb8:	00028c71 	.word	0x00028c71
    6bbc:	00028d5d 	.word	0x00028d5d
    6bc0:	00028d75 	.word	0x00028d75
    6bc4:	00028d8b 	.word	0x00028d8b
    6bc8:	00028ce5 	.word	0x00028ce5

00006bcc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6bd0:	460d      	mov	r5, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6bd2:	495b      	ldr	r1, [pc, #364]	; (6d40 <z_arm_fault+0x174>)
    6bd4:	684f      	ldr	r7, [r1, #4]
{
    6bd6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6bd8:	f3c7 0408 	ubfx	r4, r7, #0, #9
    6bdc:	2600      	movs	r6, #0
    6bde:	f386 8811 	msr	BASEPRI, r6
    6be2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6be6:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    6bea:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    6bee:	d10d      	bne.n	6c0c <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6bf0:	f002 010c 	and.w	r1, r2, #12
    6bf4:	2908      	cmp	r1, #8
    6bf6:	d10b      	bne.n	6c10 <z_arm_fault+0x44>
    6bf8:	4952      	ldr	r1, [pc, #328]	; (6d44 <z_arm_fault+0x178>)
    6bfa:	4b53      	ldr	r3, [pc, #332]	; (6d48 <z_arm_fault+0x17c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6bfc:	4853      	ldr	r0, [pc, #332]	; (6d4c <z_arm_fault+0x180>)
    6bfe:	1ac9      	subs	r1, r1, r3
    6c00:	08c9      	lsrs	r1, r1, #3
    6c02:	0189      	lsls	r1, r1, #6
    6c04:	f041 0101 	orr.w	r1, r1, #1
    6c08:	f01a fa42 	bl	21090 <log_0>
		return NULL;
    6c0c:	4635      	mov	r5, r6
    6c0e:	e003      	b.n	6c18 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6c10:	0712      	lsls	r2, r2, #28
    6c12:	d401      	bmi.n	6c18 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    6c14:	4605      	mov	r5, r0
			*nested_exc = true;
    6c16:	2601      	movs	r6, #1
	*recoverable = false;
    6c18:	2300      	movs	r3, #0
    6c1a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6c1e:	1ee3      	subs	r3, r4, #3
    6c20:	2b09      	cmp	r3, #9
    6c22:	d874      	bhi.n	6d0e <z_arm_fault+0x142>
    6c24:	e8df f003 	tbb	[pc, r3]
    6c28:	3f666205 	.word	0x3f666205
    6c2c:	73737373 	.word	0x73737373
    6c30:	6a73      	.short	0x6a73
    6c32:	4b45      	ldr	r3, [pc, #276]	; (6d48 <z_arm_fault+0x17c>)
    6c34:	4f43      	ldr	r7, [pc, #268]	; (6d44 <z_arm_fault+0x178>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6c36:	f8df 8108 	ldr.w	r8, [pc, #264]	; 6d40 <z_arm_fault+0x174>
	PR_FAULT_INFO("***** HARD FAULT *****");
    6c3a:	4845      	ldr	r0, [pc, #276]	; (6d50 <z_arm_fault+0x184>)
    6c3c:	1aff      	subs	r7, r7, r3
    6c3e:	08ff      	lsrs	r7, r7, #3
    6c40:	01bf      	lsls	r7, r7, #6
    6c42:	f047 0701 	orr.w	r7, r7, #1
    6c46:	4639      	mov	r1, r7
    6c48:	f01a fa22 	bl	21090 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6c4c:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    6c50:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6c54:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    6c58:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6c5c:	d005      	beq.n	6c6a <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    6c5e:	483d      	ldr	r0, [pc, #244]	; (6d54 <z_arm_fault+0x188>)
    6c60:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    6c62:	f01a fa15 	bl	21090 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6c66:	2400      	movs	r4, #0
}
    6c68:	e020      	b.n	6cac <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6c6a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    6c6e:	005b      	lsls	r3, r3, #1
    6c70:	d51c      	bpl.n	6cac <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    6c72:	4839      	ldr	r0, [pc, #228]	; (6d58 <z_arm_fault+0x18c>)
    6c74:	4639      	mov	r1, r7
    6c76:	f01a fa0b 	bl	21090 <log_0>
		if (SCB_MMFSR != 0) {
    6c7a:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    6c7e:	b12b      	cbz	r3, 6c8c <z_arm_fault+0xc0>
			reason = mem_manage_fault(esf, 1, recoverable);
    6c80:	f10d 0107 	add.w	r1, sp, #7
    6c84:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6c86:	f7ff ff3b 	bl	6b00 <mem_manage_fault.constprop.0>
    6c8a:	e00e      	b.n	6caa <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    6c8c:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    6c90:	b12b      	cbz	r3, 6c9e <z_arm_fault+0xd2>
			reason = bus_fault(esf, 1, recoverable);
    6c92:	f10d 0107 	add.w	r1, sp, #7
    6c96:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6c98:	f7ff fec4 	bl	6a24 <bus_fault.constprop.0>
    6c9c:	e005      	b.n	6caa <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    6c9e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    6ca2:	b29b      	uxth	r3, r3
    6ca4:	b113      	cbz	r3, 6cac <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    6ca6:	f7ff fe61 	bl	696c <usage_fault.constprop.0>
    6caa:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb0:	b9cb      	cbnz	r3, 6ce6 <z_arm_fault+0x11a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6cb2:	462b      	mov	r3, r5
    6cb4:	f103 0720 	add.w	r7, r3, #32
    6cb8:	ad02      	add	r5, sp, #8
    6cba:	6818      	ldr	r0, [r3, #0]
    6cbc:	6859      	ldr	r1, [r3, #4]
    6cbe:	462a      	mov	r2, r5
    6cc0:	c203      	stmia	r2!, {r0, r1}
    6cc2:	3308      	adds	r3, #8
    6cc4:	42bb      	cmp	r3, r7
    6cc6:	4615      	mov	r5, r2
    6cc8:	d1f7      	bne.n	6cba <z_arm_fault+0xee>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6ccc:	b39e      	cbz	r6, 6d36 <z_arm_fault+0x16a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6cd2:	b922      	cbnz	r2, 6cde <z_arm_fault+0x112>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6cd4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6cd8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6cdc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6cde:	a902      	add	r1, sp, #8
    6ce0:	4620      	mov	r0, r4
    6ce2:	f7ff fda3 	bl	682c <z_arm_fatal_error>
}
    6ce6:	b00b      	add	sp, #44	; 0x2c
    6ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6cec:	f10d 0107 	add.w	r1, sp, #7
    6cf0:	2000      	movs	r0, #0
    6cf2:	e7c8      	b.n	6c86 <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    6cf4:	f10d 0107 	add.w	r1, sp, #7
    6cf8:	2000      	movs	r0, #0
    6cfa:	e7cd      	b.n	6c98 <z_arm_fault+0xcc>
    6cfc:	4911      	ldr	r1, [pc, #68]	; (6d44 <z_arm_fault+0x178>)
    6cfe:	4b12      	ldr	r3, [pc, #72]	; (6d48 <z_arm_fault+0x17c>)
	PR_FAULT_INFO(
    6d00:	4816      	ldr	r0, [pc, #88]	; (6d5c <z_arm_fault+0x190>)
    6d02:	1ac9      	subs	r1, r1, r3
    6d04:	08c9      	lsrs	r1, r1, #3
    6d06:	0189      	lsls	r1, r1, #6
    6d08:	f041 0101 	orr.w	r1, r1, #1
    6d0c:	e7a9      	b.n	6c62 <z_arm_fault+0x96>
    6d0e:	4a0e      	ldr	r2, [pc, #56]	; (6d48 <z_arm_fault+0x17c>)
    6d10:	4b0c      	ldr	r3, [pc, #48]	; (6d44 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
    6d12:	4813      	ldr	r0, [pc, #76]	; (6d60 <z_arm_fault+0x194>)
    6d14:	4913      	ldr	r1, [pc, #76]	; (6d64 <z_arm_fault+0x198>)
    6d16:	1a9b      	subs	r3, r3, r2
    6d18:	08db      	lsrs	r3, r3, #3
    6d1a:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    6d1e:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6d22:	bf18      	it	ne
    6d24:	4601      	movne	r1, r0
    6d26:	f043 0301 	orr.w	r3, r3, #1
    6d2a:	480f      	ldr	r0, [pc, #60]	; (6d68 <z_arm_fault+0x19c>)
    6d2c:	f1a4 0210 	sub.w	r2, r4, #16
    6d30:	f01a f9cf 	bl	210d2 <log_2>
    6d34:	e797      	b.n	6c66 <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6d36:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6d3a:	f023 0301 	bic.w	r3, r3, #1
    6d3e:	e7cd      	b.n	6cdc <z_arm_fault+0x110>
    6d40:	e000ed00 	.word	0xe000ed00
    6d44:	00026970 	.word	0x00026970
    6d48:	00026828 	.word	0x00026828
    6d4c:	00028daa 	.word	0x00028daa
    6d50:	00028dd5 	.word	0x00028dd5
    6d54:	00028dec 	.word	0x00028dec
    6d58:	00028e0d 	.word	0x00028e0d
    6d5c:	00028e2c 	.word	0x00028e2c
    6d60:	00028e77 	.word	0x00028e77
    6d64:	00028e62 	.word	0x00028e62
    6d68:	00028e90 	.word	0x00028e90

00006d6c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6d6c:	4a02      	ldr	r2, [pc, #8]	; (6d78 <z_arm_fault_init+0xc>)
    6d6e:	6953      	ldr	r3, [r2, #20]
    6d70:	f043 0310 	orr.w	r3, r3, #16
    6d74:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6d76:	4770      	bx	lr
    6d78:	e000ed00 	.word	0xe000ed00

00006d7c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6d7c:	4b04      	ldr	r3, [pc, #16]	; (6d90 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6d7e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6d80:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    6d82:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6d84:	d003      	beq.n	6d8e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6d86:	4903      	ldr	r1, [pc, #12]	; (6d94 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6d8c:	600a      	str	r2, [r1, #0]

00006d8e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6d8e:	4770      	bx	lr
	ldr r3, =_kernel
    6d90:	200035c8 	.word	0x200035c8
	ldr r1, =_SCS_ICSR
    6d94:	e000ed04 	.word	0xe000ed04

00006d98 <z_arm_interrupt_init>:
    6d98:	4804      	ldr	r0, [pc, #16]	; (6dac <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6d9a:	2300      	movs	r3, #0
    6d9c:	2120      	movs	r1, #32
    6d9e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6da0:	3301      	adds	r3, #1
    6da2:	2b30      	cmp	r3, #48	; 0x30
    6da4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6da8:	d1f9      	bne.n	6d9e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6daa:	4770      	bx	lr
    6dac:	e000e100 	.word	0xe000e100

00006db0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    6db0:	b510      	push	{r4, lr}
    6db2:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    6db4:	f018 f9f8 	bl	1f1a8 <z_thread_single_abort>

	if (_current == thread) {
    6db8:	4b11      	ldr	r3, [pc, #68]	; (6e00 <z_impl_k_thread_abort+0x50>)
    6dba:	689b      	ldr	r3, [r3, #8]
    6dbc:	42a3      	cmp	r3, r4
    6dbe:	d107      	bne.n	6dd0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6dc0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6dc4:	b183      	cbz	r3, 6de8 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6dc6:	4a0f      	ldr	r2, [pc, #60]	; (6e04 <z_impl_k_thread_abort+0x54>)
    6dc8:	6853      	ldr	r3, [r2, #4]
    6dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6dce:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
    6dd0:	f04f 0320 	mov.w	r3, #32
    6dd4:	f3ef 8011 	mrs	r0, BASEPRI
    6dd8:	f383 8811 	msr	BASEPRI, r3
    6ddc:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    6de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    6de4:	f01e bee7 	b.w	25bb6 <z_reschedule_irqlock>
    6de8:	f04f 0320 	mov.w	r3, #32
    6dec:	f3ef 8011 	mrs	r0, BASEPRI
    6df0:	f383 8811 	msr	BASEPRI, r3
    6df4:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    6df8:	f7ff fc2a 	bl	6650 <arch_swap>
	return ret;
    6dfc:	e7e8      	b.n	6dd0 <z_impl_k_thread_abort+0x20>
    6dfe:	bf00      	nop
    6e00:	200035c8 	.word	0x200035c8
    6e04:	e000ed00 	.word	0xe000ed00

00006e08 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    6e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    6e0a:	4b08      	ldr	r3, [pc, #32]	; (6e2c <z_arm_configure_static_mpu_regions+0x24>)
    6e0c:	9301      	str	r3, [sp, #4]
    6e0e:	4b08      	ldr	r3, [pc, #32]	; (6e30 <z_arm_configure_static_mpu_regions+0x28>)
    6e10:	9302      	str	r3, [sp, #8]
    6e12:	4b08      	ldr	r3, [pc, #32]	; (6e34 <z_arm_configure_static_mpu_regions+0x2c>)
    6e14:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    6e16:	ab01      	add	r3, sp, #4
    6e18:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6e1a:	4a07      	ldr	r2, [pc, #28]	; (6e38 <z_arm_configure_static_mpu_regions+0x30>)
    6e1c:	4b07      	ldr	r3, [pc, #28]	; (6e3c <z_arm_configure_static_mpu_regions+0x34>)
    6e1e:	2101      	movs	r1, #1
    6e20:	4668      	mov	r0, sp
    6e22:	f000 f8b5 	bl	6f90 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    6e26:	b005      	add	sp, #20
    6e28:	f85d fb04 	ldr.w	pc, [sp], #4
    6e2c:	20000000 	.word	0x20000000
    6e30:	00000000 	.word	0x00000000
    6e34:	060b0000 	.word	0x060b0000
    6e38:	20000000 	.word	0x20000000
    6e3c:	20040000 	.word	0x20040000

00006e40 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    6e40:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 6ef0 <mpu_configure_regions+0xb0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e46:	4606      	mov	r6, r0
    6e48:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    6e4a:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    6e4c:	2100      	movs	r1, #0
    6e4e:	42b9      	cmp	r1, r7
    6e50:	da1b      	bge.n	6e8a <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    6e52:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    6e56:	f8de 4004 	ldr.w	r4, [lr, #4]
    6e5a:	2c00      	cmp	r4, #0
    6e5c:	d046      	beq.n	6eec <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6e5e:	b1ab      	cbz	r3, 6e8c <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    6e60:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6e62:	422c      	tst	r4, r5
    6e64:	d105      	bne.n	6e72 <mpu_configure_regions+0x32>
		&&
    6e66:	2c1f      	cmp	r4, #31
    6e68:	d903      	bls.n	6e72 <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    6e6a:	f8de 2000 	ldr.w	r2, [lr]
		&&
    6e6e:	4215      	tst	r5, r2
    6e70:	d00c      	beq.n	6e8c <mpu_configure_regions+0x4c>
    6e72:	4a20      	ldr	r2, [pc, #128]	; (6ef4 <mpu_configure_regions+0xb4>)
    6e74:	4b20      	ldr	r3, [pc, #128]	; (6ef8 <mpu_configure_regions+0xb8>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    6e76:	4821      	ldr	r0, [pc, #132]	; (6efc <mpu_configure_regions+0xbc>)
    6e78:	1ad2      	subs	r2, r2, r3
    6e7a:	08d2      	lsrs	r2, r2, #3
    6e7c:	0192      	lsls	r2, r2, #6
    6e7e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6e82:	f01a f912 	bl	210aa <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    6e86:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6e8c:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    6e8e:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    6e90:	f8de 2000 	ldr.w	r2, [lr]
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6e94:	f8de 0008 	ldr.w	r0, [lr, #8]
	if (size <= 32U) {
    6e98:	d916      	bls.n	6ec8 <mpu_configure_regions+0x88>
	if (size > (1UL << 31)) {
    6e9a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6e9e:	d815      	bhi.n	6ecc <mpu_configure_regions+0x8c>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6ea0:	3c01      	subs	r4, #1
    6ea2:	fab4 f484 	clz	r4, r4
    6ea6:	f1c4 041f 	rsb	r4, r4, #31
    6eaa:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    6eac:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6eae:	ea44 0400 	orr.w	r4, r4, r0
    6eb2:	d90d      	bls.n	6ed0 <mpu_configure_regions+0x90>
    6eb4:	4a0f      	ldr	r2, [pc, #60]	; (6ef4 <mpu_configure_regions+0xb4>)
    6eb6:	4b10      	ldr	r3, [pc, #64]	; (6ef8 <mpu_configure_regions+0xb8>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6eb8:	4811      	ldr	r0, [pc, #68]	; (6f00 <mpu_configure_regions+0xc0>)
    6eba:	1ad2      	subs	r2, r2, r3
    6ebc:	08d2      	lsrs	r2, r2, #3
    6ebe:	0192      	lsls	r2, r2, #6
    6ec0:	f042 0201 	orr.w	r2, r2, #1
    6ec4:	4629      	mov	r1, r5
    6ec6:	e7dc      	b.n	6e82 <mpu_configure_regions+0x42>
		return REGION_32B;
    6ec8:	2408      	movs	r4, #8
    6eca:	e7ef      	b.n	6eac <mpu_configure_regions+0x6c>
		return REGION_4G;
    6ecc:	243e      	movs	r4, #62	; 0x3e
    6ece:	e7ed      	b.n	6eac <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6ed0:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6ed4:	432a      	orrs	r2, r5
    6ed6:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6eda:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    6ede:	f8cc 5098 	str.w	r5, [ip, #152]	; 0x98
		reg_index++;
    6ee2:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6ee4:	f8cc 209c 	str.w	r2, [ip, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6ee8:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    6eec:	3101      	adds	r1, #1
    6eee:	e7ae      	b.n	6e4e <mpu_configure_regions+0xe>
    6ef0:	e000ed00 	.word	0xe000ed00
    6ef4:	00026960 	.word	0x00026960
    6ef8:	00026828 	.word	0x00026828
    6efc:	00028ea7 	.word	0x00028ea7
    6f00:	00028eca 	.word	0x00028eca

00006f04 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6f04:	4b04      	ldr	r3, [pc, #16]	; (6f18 <arm_core_mpu_enable+0x14>)
    6f06:	2205      	movs	r2, #5
    6f08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6f0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6f10:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6f14:	4770      	bx	lr
    6f16:	bf00      	nop
    6f18:	e000ed00 	.word	0xe000ed00

00006f1c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6f1c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6f20:	4b02      	ldr	r3, [pc, #8]	; (6f2c <arm_core_mpu_disable+0x10>)
    6f22:	2200      	movs	r2, #0
    6f24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6f28:	4770      	bx	lr
    6f2a:	bf00      	nop
    6f2c:	e000ed00 	.word	0xe000ed00

00006f30 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6f30:	4914      	ldr	r1, [pc, #80]	; (6f84 <arm_mpu_init+0x54>)
    6f32:	6808      	ldr	r0, [r1, #0]
    6f34:	2808      	cmp	r0, #8
{
    6f36:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6f38:	d821      	bhi.n	6f7e <arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6f3a:	f7ff ffef 	bl	6f1c <arm_core_mpu_disable>
	MPU->RNR = index;
    6f3e:	4c12      	ldr	r4, [pc, #72]	; (6f88 <arm_mpu_init+0x58>)
    6f40:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6f42:	2200      	movs	r2, #0
    6f44:	4290      	cmp	r0, r2
    6f46:	f101 010c 	add.w	r1, r1, #12
    6f4a:	d105      	bne.n	6f58 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6f4c:	4b0f      	ldr	r3, [pc, #60]	; (6f8c <arm_mpu_init+0x5c>)
    6f4e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6f50:	f7ff ffd8 	bl	6f04 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    6f54:	2000      	movs	r0, #0
}
    6f56:	bd10      	pop	{r4, pc}
    6f58:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6f5c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6f60:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6f64:	4313      	orrs	r3, r2
    6f66:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6f6a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6f72:	f043 0301 	orr.w	r3, r3, #1
    6f76:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6f7a:	3201      	adds	r2, #1
    6f7c:	e7e2      	b.n	6f44 <arm_mpu_init+0x14>
		return -1;
    6f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6f82:	e7e8      	b.n	6f56 <arm_mpu_init+0x26>
    6f84:	00026d5c 	.word	0x00026d5c
    6f88:	e000ed00 	.word	0xe000ed00
    6f8c:	20003a6e 	.word	0x20003a6e

00006f90 <arm_core_mpu_configure_static_mpu_regions>:
{
    6f90:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6f92:	4c03      	ldr	r4, [pc, #12]	; (6fa0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6f94:	2301      	movs	r3, #1
    6f96:	7822      	ldrb	r2, [r4, #0]
    6f98:	f7ff ff52 	bl	6e40 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6f9c:	7020      	strb	r0, [r4, #0]
}
    6f9e:	bd10      	pop	{r4, pc}
    6fa0:	20003a6e 	.word	0x20003a6e

00006fa4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6fa4:	4b01      	ldr	r3, [pc, #4]	; (6fac <__stdout_hook_install+0x8>)
    6fa6:	6018      	str	r0, [r3, #0]
}
    6fa8:	4770      	bx	lr
    6faa:	bf00      	nop
    6fac:	2000021c 	.word	0x2000021c

00006fb0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    6fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    6fb2:	4f08      	ldr	r7, [pc, #32]	; (6fd4 <z_impl_zephyr_read_stdin+0x24>)
{
    6fb4:	4606      	mov	r6, r0
    6fb6:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    6fb8:	2400      	movs	r4, #0
    6fba:	42ac      	cmp	r4, r5
    6fbc:	da08      	bge.n	6fd0 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    6fbe:	683b      	ldr	r3, [r7, #0]
    6fc0:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    6fc2:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    6fc4:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    6fc6:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    6fca:	d001      	beq.n	6fd0 <z_impl_zephyr_read_stdin+0x20>
    6fcc:	280d      	cmp	r0, #13
    6fce:	d1f4      	bne.n	6fba <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    6fd0:	4620      	mov	r0, r4
    6fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fd4:	20000218 	.word	0x20000218

00006fd8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fda:	4f0a      	ldr	r7, [pc, #40]	; (7004 <z_impl_zephyr_write_stdout+0x2c>)
    6fdc:	460d      	mov	r5, r1
    6fde:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    6fe0:	f1c0 0401 	rsb	r4, r0, #1
    6fe4:	19a3      	adds	r3, r4, r6
    6fe6:	429d      	cmp	r5, r3
    6fe8:	dc01      	bgt.n	6fee <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    6fea:	4628      	mov	r0, r5
    6fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    6fee:	7873      	ldrb	r3, [r6, #1]
    6ff0:	2b0a      	cmp	r3, #10
    6ff2:	d102      	bne.n	6ffa <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    6ff4:	683b      	ldr	r3, [r7, #0]
    6ff6:	200d      	movs	r0, #13
    6ff8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    6ffa:	683b      	ldr	r3, [r7, #0]
    6ffc:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    7000:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    7002:	e7ef      	b.n	6fe4 <z_impl_zephyr_write_stdout+0xc>
    7004:	2000021c 	.word	0x2000021c

00007008 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    7008:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    700a:	4802      	ldr	r0, [pc, #8]	; (7014 <_exit+0xc>)
    700c:	2105      	movs	r1, #5
    700e:	f7ff ffe3 	bl	6fd8 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    7012:	e7fe      	b.n	7012 <_exit+0xa>
    7014:	00028ef0 	.word	0x00028ef0

00007018 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
    7018:	b510      	push	{r4, lr}
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
    701a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    701e:	4604      	mov	r4, r0
	sys_sem_take(&heap_sem, K_FOREVER);
    7020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7024:	480a      	ldr	r0, [pc, #40]	; (7050 <_sbrk+0x38>)
    7026:	f019 fda4 	bl	20b72 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
    702a:	480a      	ldr	r0, [pc, #40]	; (7054 <_sbrk+0x3c>)
    702c:	6802      	ldr	r2, [r0, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    702e:	18a3      	adds	r3, r4, r2
    7030:	4c09      	ldr	r4, [pc, #36]	; (7058 <_sbrk+0x40>)
    7032:	f1c4 5100 	rsb	r1, r4, #536870912	; 0x20000000
    7036:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    703a:	428b      	cmp	r3, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    703c:	bf3a      	itte	cc
    703e:	18a4      	addcc	r4, r4, r2
		heap_sz += count;
    7040:	6003      	strcc	r3, [r0, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    7042:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
    7046:	4802      	ldr	r0, [pc, #8]	; (7050 <_sbrk+0x38>)
    7048:	f019 fd8e 	bl	20b68 <sys_sem_give>

	return ret;
}
    704c:	4620      	mov	r0, r4
    704e:	bd10      	pop	{r4, pc}
    7050:	20000f68 	.word	0x20000f68
    7054:	20001bac 	.word	0x20001bac
    7058:	200069f3 	.word	0x200069f3

0000705c <nordicsemi_nrf52_init>:
    705c:	f04f 0320 	mov.w	r3, #32
    7060:	f3ef 8211 	mrs	r2, BASEPRI
    7064:	f383 8811 	msr	BASEPRI, r3
    7068:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    706c:	4906      	ldr	r1, [pc, #24]	; (7088 <nordicsemi_nrf52_init+0x2c>)
    706e:	2301      	movs	r3, #1
    7070:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7074:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7078:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    707c:	f382 8811 	msr	BASEPRI, r2
    7080:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7084:	2000      	movs	r0, #0
    7086:	4770      	bx	lr
    7088:	4001e000 	.word	0x4001e000

0000708c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    708c:	b120      	cbz	r0, 7098 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    708e:	4b03      	ldr	r3, [pc, #12]	; (709c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7090:	0180      	lsls	r0, r0, #6
    7092:	f043 0301 	orr.w	r3, r3, #1
    7096:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7098:	4770      	bx	lr
    709a:	bf00      	nop
    709c:	00026a90 	.word	0x00026a90

000070a0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    70a0:	4b0e      	ldr	r3, [pc, #56]	; (70dc <bt_hex_real+0x3c>)
    70a2:	2940      	cmp	r1, #64	; 0x40
{
    70a4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    70a6:	bf28      	it	cs
    70a8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    70aa:	4c0d      	ldr	r4, [pc, #52]	; (70e0 <bt_hex_real+0x40>)
    70ac:	1846      	adds	r6, r0, r1
    70ae:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    70b0:	42b0      	cmp	r0, r6
    70b2:	f103 0302 	add.w	r3, r3, #2
    70b6:	d104      	bne.n	70c2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    70b8:	2300      	movs	r3, #0
    70ba:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    70be:	4807      	ldr	r0, [pc, #28]	; (70dc <bt_hex_real+0x3c>)
    70c0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    70c2:	7802      	ldrb	r2, [r0, #0]
    70c4:	0912      	lsrs	r2, r2, #4
    70c6:	5ca2      	ldrb	r2, [r4, r2]
    70c8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    70cc:	f810 2b01 	ldrb.w	r2, [r0], #1
    70d0:	f002 020f 	and.w	r2, r2, #15
    70d4:	5ca2      	ldrb	r2, [r4, r2]
    70d6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    70da:	e7e9      	b.n	70b0 <bt_hex_real+0x10>
    70dc:	20003a8d 	.word	0x20003a8d
    70e0:	00028f09 	.word	0x00028f09

000070e4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    70e4:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    70e6:	7803      	ldrb	r3, [r0, #0]
    70e8:	b08b      	sub	sp, #44	; 0x2c
    70ea:	4604      	mov	r4, r0
    70ec:	ad07      	add	r5, sp, #28
    70ee:	2b03      	cmp	r3, #3
    70f0:	d821      	bhi.n	7136 <bt_addr_le_str_real+0x52>
    70f2:	e8df f003 	tbb	[pc, r3]
    70f6:	1a02      	.short	0x1a02
    70f8:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    70fa:	4912      	ldr	r1, [pc, #72]	; (7144 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    70fc:	4628      	mov	r0, r5
    70fe:	f01f f974 	bl	263ea <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7102:	7863      	ldrb	r3, [r4, #1]
    7104:	9304      	str	r3, [sp, #16]
    7106:	78a3      	ldrb	r3, [r4, #2]
    7108:	9303      	str	r3, [sp, #12]
    710a:	78e3      	ldrb	r3, [r4, #3]
    710c:	9302      	str	r3, [sp, #8]
    710e:	7923      	ldrb	r3, [r4, #4]
    7110:	9301      	str	r3, [sp, #4]
    7112:	7963      	ldrb	r3, [r4, #5]
    7114:	9300      	str	r3, [sp, #0]
    7116:	4a0c      	ldr	r2, [pc, #48]	; (7148 <bt_addr_le_str_real+0x64>)
    7118:	79a3      	ldrb	r3, [r4, #6]
    711a:	9505      	str	r5, [sp, #20]
    711c:	211e      	movs	r1, #30
    711e:	480b      	ldr	r0, [pc, #44]	; (714c <bt_addr_le_str_real+0x68>)
    7120:	f019 fc6a 	bl	209f8 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    7124:	4809      	ldr	r0, [pc, #36]	; (714c <bt_addr_le_str_real+0x68>)
    7126:	b00b      	add	sp, #44	; 0x2c
    7128:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    712a:	4909      	ldr	r1, [pc, #36]	; (7150 <bt_addr_le_str_real+0x6c>)
    712c:	e7e6      	b.n	70fc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    712e:	4909      	ldr	r1, [pc, #36]	; (7154 <bt_addr_le_str_real+0x70>)
    7130:	e7e4      	b.n	70fc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    7132:	4909      	ldr	r1, [pc, #36]	; (7158 <bt_addr_le_str_real+0x74>)
    7134:	e7e2      	b.n	70fc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    7136:	4a09      	ldr	r2, [pc, #36]	; (715c <bt_addr_le_str_real+0x78>)
    7138:	210a      	movs	r1, #10
    713a:	4628      	mov	r0, r5
    713c:	f019 fc5c 	bl	209f8 <snprintk>
		break;
    7140:	e7df      	b.n	7102 <bt_addr_le_str_real+0x1e>
    7142:	bf00      	nop
    7144:	0002853d 	.word	0x0002853d
    7148:	0002855f 	.word	0x0002855f
    714c:	20003a6f 	.word	0x20003a6f
    7150:	00028544 	.word	0x00028544
    7154:	0002854b 	.word	0x0002854b
    7158:	00028555 	.word	0x00028555
    715c:	0002a2d9 	.word	0x0002a2d9

00007160 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    7160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7164:	4b64      	ldr	r3, [pc, #400]	; (72f8 <ecc_thread+0x198>)
    7166:	4d65      	ldr	r5, [pc, #404]	; (72fc <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7168:	f8df 8194 	ldr.w	r8, [pc, #404]	; 7300 <ecc_thread+0x1a0>
	return z_impl_k_sem_take(sem, timeout);
    716c:	f8df 9194 	ldr.w	r9, [pc, #404]	; 7304 <ecc_thread+0x1a4>
    7170:	1aed      	subs	r5, r5, r3
    7172:	08ed      	lsrs	r5, r5, #3
    7174:	4647      	mov	r7, r8
    7176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    717a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    717e:	4648      	mov	r0, r9
    7180:	f018 f9d4 	bl	1f52c <z_impl_k_sem_take>
    7184:	f3bf 8f5b 	dmb	ish
    7188:	f8d8 4000 	ldr.w	r4, [r8]
    718c:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7190:	f014 0401 	ands.w	r4, r4, #1
    7194:	d05a      	beq.n	724c <ecc_thread+0xec>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    7196:	f8df a170 	ldr.w	sl, [pc, #368]	; 7308 <ecc_thread+0x1a8>
    719a:	4c5c      	ldr	r4, [pc, #368]	; (730c <ecc_thread+0x1ac>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    719c:	4e5c      	ldr	r6, [pc, #368]	; (7310 <ecc_thread+0x1b0>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    719e:	485d      	ldr	r0, [pc, #372]	; (7314 <ecc_thread+0x1b4>)
    71a0:	4652      	mov	r2, sl
    71a2:	4621      	mov	r1, r4
    71a4:	f01a fb76 	bl	21894 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    71a8:	bbe8      	cbnz	r0, 7226 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    71aa:	01a9      	lsls	r1, r5, #6
    71ac:	485a      	ldr	r0, [pc, #360]	; (7318 <ecc_thread+0x1b8>)
    71ae:	f041 0101 	orr.w	r1, r1, #1
    71b2:	f019 ff6d 	bl	21090 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    71b6:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    71ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71c2:	2001      	movs	r0, #1
    71c4:	f002 fe62 	bl	9e8c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    71c8:	f100 0608 	add.w	r6, r0, #8
    71cc:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    71ce:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    71d0:	4630      	mov	r0, r6
    71d2:	f01e f95a 	bl	2548a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    71d6:	233e      	movs	r3, #62	; 0x3e
    71d8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    71da:	2342      	movs	r3, #66	; 0x42
    71dc:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    71de:	2101      	movs	r1, #1
    71e0:	4630      	mov	r0, r6
    71e2:	f01e f952 	bl	2548a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    71e6:	2308      	movs	r3, #8
    71e8:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    71ea:	2141      	movs	r1, #65	; 0x41
    71ec:	4630      	mov	r0, r6
    71ee:	f01e f94c 	bl	2548a <net_buf_simple_add>
    71f2:	4606      	mov	r6, r0
	evt->status = status;
    71f4:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    71f8:	f1ba 0f00 	cmp.w	sl, #0
    71fc:	d01d      	beq.n	723a <ecc_thread+0xda>
__ssp_bos_icheck3(memset, void *, int)
    71fe:	2240      	movs	r2, #64	; 0x40
    7200:	2100      	movs	r1, #0
    7202:	f01f f856 	bl	262b2 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7206:	f3bf 8f5b 	dmb	ish
    720a:	e857 3f00 	ldrex	r3, [r7]
    720e:	f023 0301 	bic.w	r3, r3, #1
    7212:	e847 3200 	strex	r2, r3, [r7]
    7216:	2a00      	cmp	r2, #0
    7218:	d1f7      	bne.n	720a <ecc_thread+0xaa>
    721a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    721e:	4620      	mov	r0, r4
	bt_recv(buf);
    7220:	f001 ffe8 	bl	91f4 <bt_recv>
	while (true) {
    7224:	e7a7      	b.n	7176 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    7226:	2220      	movs	r2, #32
    7228:	4631      	mov	r1, r6
    722a:	4620      	mov	r0, r4
    722c:	f01f f823 	bl	26276 <memcmp>
    7230:	2800      	cmp	r0, #0
    7232:	d0b4      	beq.n	719e <ecc_thread+0x3e>
	return 0;
    7234:	f04f 0a00 	mov.w	sl, #0
    7238:	e7bf      	b.n	71ba <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    723a:	4936      	ldr	r1, [pc, #216]	; (7314 <ecc_thread+0x1b4>)
    723c:	f01b fcb9 	bl	22bb2 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    7240:	3120      	adds	r1, #32
    7242:	f106 0021 	add.w	r0, r6, #33	; 0x21
    7246:	f01b fcb4 	bl	22bb2 <sys_memcpy_swap.constprop.0>
    724a:	e7dc      	b.n	7206 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    724c:	f3bf 8f5b 	dmb	ish
    7250:	f8d8 3000 	ldr.w	r3, [r8]
    7254:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    7258:	079b      	lsls	r3, r3, #30
    725a:	d58c      	bpl.n	7176 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    725c:	492a      	ldr	r1, [pc, #168]	; (7308 <ecc_thread+0x1a8>)
    725e:	482d      	ldr	r0, [pc, #180]	; (7314 <ecc_thread+0x1b4>)
    7260:	f01b f9d8 	bl	22614 <uECC_valid_public_key>
	if (ret < 0) {
    7264:	1e01      	subs	r1, r0, #0
    7266:	da38      	bge.n	72da <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    7268:	01aa      	lsls	r2, r5, #6
    726a:	482c      	ldr	r0, [pc, #176]	; (731c <ecc_thread+0x1bc>)
    726c:	f042 0201 	orr.w	r2, r2, #1
    7270:	f019 ff1b 	bl	210aa <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    727c:	2001      	movs	r0, #1
    727e:	f002 fe05 	bl	9e8c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7282:	f100 0a08 	add.w	sl, r0, #8
    7286:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7288:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    728a:	4650      	mov	r0, sl
    728c:	f01e f8fd 	bl	2548a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7290:	233e      	movs	r3, #62	; 0x3e
    7292:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7294:	2322      	movs	r3, #34	; 0x22
    7296:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    7298:	2101      	movs	r1, #1
    729a:	4650      	mov	r0, sl
    729c:	f01e f8f5 	bl	2548a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    72a0:	2309      	movs	r3, #9
    72a2:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    72a4:	2121      	movs	r1, #33	; 0x21
    72a6:	4650      	mov	r0, sl
    72a8:	f01e f8ef 	bl	2548a <net_buf_simple_add>
    72ac:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    72ae:	3001      	adds	r0, #1
    72b0:	b9e4      	cbnz	r4, 72ec <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    72b2:	221f      	movs	r2, #31
    72b4:	701a      	strb	r2, [r3, #0]
    72b6:	21ff      	movs	r1, #255	; 0xff
    72b8:	2220      	movs	r2, #32
    72ba:	f01e fffa 	bl	262b2 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    72be:	f3bf 8f5b 	dmb	ish
    72c2:	e857 3f00 	ldrex	r3, [r7]
    72c6:	f023 0302 	bic.w	r3, r3, #2
    72ca:	e847 3200 	strex	r2, r3, [r7]
    72ce:	2a00      	cmp	r2, #0
    72d0:	d1f7      	bne.n	72c2 <ecc_thread+0x162>
    72d2:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    72d6:	4630      	mov	r0, r6
    72d8:	e7a2      	b.n	7220 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    72da:	4a0e      	ldr	r2, [pc, #56]	; (7314 <ecc_thread+0x1b4>)
    72dc:	4b0a      	ldr	r3, [pc, #40]	; (7308 <ecc_thread+0x1a8>)
    72de:	f1a2 0120 	sub.w	r1, r2, #32
    72e2:	4610      	mov	r0, r2
    72e4:	f01a fb23 	bl	2192e <uECC_shared_secret>
    72e8:	4604      	mov	r4, r0
    72ea:	e7c3      	b.n	7274 <ecc_thread+0x114>
		evt->status = 0U;
    72ec:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    72ee:	4909      	ldr	r1, [pc, #36]	; (7314 <ecc_thread+0x1b4>)
		evt->status = 0U;
    72f0:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    72f2:	f01b fc5e 	bl	22bb2 <sys_memcpy_swap.constprop.0>
    72f6:	e7e2      	b.n	72be <ecc_thread+0x15e>
    72f8:	00026828 	.word	0x00026828
    72fc:	00026920 	.word	0x00026920
    7300:	20001bb0 	.word	0x20001bb0
    7304:	20000f50 	.word	0x20000f50
    7308:	00026d7c 	.word	0x00026d7c
    730c:	20003b0e 	.word	0x20003b0e
    7310:	00026e2c 	.word	0x00026e2c
    7314:	20003b2e 	.word	0x20003b2e
    7318:	00028f21 	.word	0x00028f21
    731c:	00028f4a 	.word	0x00028f4a

00007320 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    7320:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    7322:	7d05      	ldrb	r5, [r0, #20]
    7324:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    7326:	b9ad      	cbnz	r5, 7354 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    7328:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    732a:	881a      	ldrh	r2, [r3, #0]
    732c:	f242 0125 	movw	r1, #8229	; 0x2025
    7330:	428a      	cmp	r2, r1
    7332:	d017      	beq.n	7364 <bt_hci_ecc_send+0x44>
    7334:	f242 0126 	movw	r1, #8230	; 0x2026
    7338:	428a      	cmp	r2, r1
    733a:	d03c      	beq.n	73b6 <bt_hci_ecc_send+0x96>
    733c:	f242 0101 	movw	r1, #8193	; 0x2001
    7340:	428a      	cmp	r2, r1
    7342:	d107      	bne.n	7354 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    7344:	78da      	ldrb	r2, [r3, #3]
    7346:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    734a:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    734c:	791a      	ldrb	r2, [r3, #4]
    734e:	f022 0201 	bic.w	r2, r2, #1
    7352:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    7354:	4b31      	ldr	r3, [pc, #196]	; (741c <bt_hci_ecc_send+0xfc>)
    7356:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    735a:	4620      	mov	r0, r4
    735c:	691b      	ldr	r3, [r3, #16]
}
    735e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    7362:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    7364:	2103      	movs	r1, #3
    7366:	3008      	adds	r0, #8
    7368:	f01e f8b8 	bl	254dc <net_buf_simple_pull>
	net_buf_unref(buf);
    736c:	4620      	mov	r0, r4
    736e:	f016 fb55 	bl	1da1c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7372:	f3bf 8f5b 	dmb	ish
    7376:	4b2a      	ldr	r3, [pc, #168]	; (7420 <bt_hci_ecc_send+0x100>)
    7378:	681a      	ldr	r2, [r3, #0]
    737a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    737e:	0790      	lsls	r0, r2, #30
    7380:	d507      	bpl.n	7392 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7382:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7384:	4629      	mov	r1, r5
    7386:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    738a:	f01b fbee 	bl	22b6a <send_cmd_status>
}
    738e:	2000      	movs	r0, #0
    7390:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7392:	f3bf 8f5b 	dmb	ish
    7396:	e853 2f00 	ldrex	r2, [r3]
    739a:	f042 0101 	orr.w	r1, r2, #1
    739e:	e843 1000 	strex	r0, r1, [r3]
    73a2:	2800      	cmp	r0, #0
    73a4:	d1f7      	bne.n	7396 <bt_hci_ecc_send+0x76>
    73a6:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    73aa:	07d1      	lsls	r1, r2, #31
    73ac:	d4e9      	bmi.n	7382 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    73ae:	481d      	ldr	r0, [pc, #116]	; (7424 <bt_hci_ecc_send+0x104>)
    73b0:	f018 f896 	bl	1f4e0 <z_impl_k_sem_give>
}
    73b4:	e7e6      	b.n	7384 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    73b6:	2103      	movs	r1, #3
    73b8:	3008      	adds	r0, #8
    73ba:	f01e f88f 	bl	254dc <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    73be:	f3bf 8f5b 	dmb	ish
    73c2:	4b17      	ldr	r3, [pc, #92]	; (7420 <bt_hci_ecc_send+0x100>)
    73c4:	681a      	ldr	r2, [r3, #0]
    73c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    73ca:	07d2      	lsls	r2, r2, #31
    73cc:	d507      	bpl.n	73de <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    73ce:	250c      	movs	r5, #12
	net_buf_unref(buf);
    73d0:	4620      	mov	r0, r4
    73d2:	f016 fb23 	bl	1da1c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    73d6:	4629      	mov	r1, r5
    73d8:	f242 0026 	movw	r0, #8230	; 0x2026
    73dc:	e7d5      	b.n	738a <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    73de:	89a2      	ldrh	r2, [r4, #12]
    73e0:	2a3f      	cmp	r2, #63	; 0x3f
    73e2:	d919      	bls.n	7418 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    73e4:	f3bf 8f5b 	dmb	ish
    73e8:	e853 2f00 	ldrex	r2, [r3]
    73ec:	f042 0102 	orr.w	r1, r2, #2
    73f0:	e843 1000 	strex	r0, r1, [r3]
    73f4:	2800      	cmp	r0, #0
    73f6:	d1f7      	bne.n	73e8 <bt_hci_ecc_send+0xc8>
    73f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    73fc:	0793      	lsls	r3, r2, #30
    73fe:	d4e6      	bmi.n	73ce <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    7400:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    7402:	4809      	ldr	r0, [pc, #36]	; (7428 <bt_hci_ecc_send+0x108>)
    7404:	f01b fbd5 	bl	22bb2 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    7408:	4808      	ldr	r0, [pc, #32]	; (742c <bt_hci_ecc_send+0x10c>)
    740a:	3120      	adds	r1, #32
    740c:	f01b fbd1 	bl	22bb2 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    7410:	4804      	ldr	r0, [pc, #16]	; (7424 <bt_hci_ecc_send+0x104>)
    7412:	f018 f865 	bl	1f4e0 <z_impl_k_sem_give>
}
    7416:	e7db      	b.n	73d0 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    7418:	2512      	movs	r5, #18
    741a:	e7d9      	b.n	73d0 <bt_hci_ecc_send+0xb0>
    741c:	20000000 	.word	0x20000000
    7420:	20001bb0 	.word	0x20001bb0
    7424:	20000f50 	.word	0x20000f50
    7428:	20003b2e 	.word	0x20003b2e
    742c:	20003b4e 	.word	0x20003b4e

00007430 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    7430:	b510      	push	{r4, lr}
    7432:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7434:	4c0c      	ldr	r4, [pc, #48]	; (7468 <bt_hci_ecc_init+0x38>)
    7436:	490d      	ldr	r1, [pc, #52]	; (746c <bt_hci_ecc_init+0x3c>)
    7438:	2200      	movs	r2, #0
    743a:	2300      	movs	r3, #0
    743c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7440:	2300      	movs	r3, #0
    7442:	220a      	movs	r2, #10
    7444:	e9cd 2303 	strd	r2, r3, [sp, #12]
    7448:	e9cd 3301 	strd	r3, r3, [sp, #4]
    744c:	9300      	str	r3, [sp, #0]
    744e:	f44f 628a 	mov.w	r2, #1104	; 0x450
    7452:	4b07      	ldr	r3, [pc, #28]	; (7470 <bt_hci_ecc_init+0x40>)
    7454:	4620      	mov	r0, r4
    7456:	f018 f8d9 	bl	1f60c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    745a:	4906      	ldr	r1, [pc, #24]	; (7474 <bt_hci_ecc_init+0x44>)
    745c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    745e:	b008      	add	sp, #32
    7460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7464:	f01e bca8 	b.w	25db8 <z_impl_k_thread_name_set>
    7468:	200011a0 	.word	0x200011a0
    746c:	20004090 	.word	0x20004090
    7470:	00007161 	.word	0x00007161
    7474:	00028f6b 	.word	0x00028f6b

00007478 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
    7478:	7803      	ldrb	r3, [r0, #0]
    747a:	2b01      	cmp	r3, #1
{
    747c:	b530      	push	{r4, r5, lr}
	switch (src->type) {
    747e:	d013      	beq.n	74a8 <uuid_to_uuid128+0x30>
    7480:	2b02      	cmp	r3, #2
    7482:	d027      	beq.n	74d4 <uuid_to_uuid128+0x5c>
    7484:	b97b      	cbnz	r3, 74a6 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    7486:	4b19      	ldr	r3, [pc, #100]	; (74ec <uuid_to_uuid128+0x74>)
    7488:	460a      	mov	r2, r1
    748a:	f103 0410 	add.w	r4, r3, #16
    748e:	f853 5b04 	ldr.w	r5, [r3], #4
    7492:	f842 5b04 	str.w	r5, [r2], #4
    7496:	42a3      	cmp	r3, r4
    7498:	d1f9      	bne.n	748e <uuid_to_uuid128+0x16>
    749a:	781b      	ldrb	r3, [r3, #0]
    749c:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    749e:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
    74a0:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
    74a2:	0a1b      	lsrs	r3, r3, #8
    74a4:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    74a6:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
    74a8:	4b10      	ldr	r3, [pc, #64]	; (74ec <uuid_to_uuid128+0x74>)
    74aa:	460a      	mov	r2, r1
    74ac:	f103 0410 	add.w	r4, r3, #16
    74b0:	f853 5b04 	ldr.w	r5, [r3], #4
    74b4:	f842 5b04 	str.w	r5, [r2], #4
    74b8:	42a3      	cmp	r3, r4
    74ba:	d1f9      	bne.n	74b0 <uuid_to_uuid128+0x38>
    74bc:	781b      	ldrb	r3, [r3, #0]
    74be:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    74c0:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
    74c2:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
    74c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    74c8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    74ca:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
    74cc:	0a1b      	lsrs	r3, r3, #8
    74ce:	738a      	strb	r2, [r1, #14]
    74d0:	740b      	strb	r3, [r1, #16]
}
    74d2:	e7e8      	b.n	74a6 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    74d4:	f100 0310 	add.w	r3, r0, #16
    74d8:	f850 2b04 	ldr.w	r2, [r0], #4
    74dc:	f841 2b04 	str.w	r2, [r1], #4
    74e0:	4298      	cmp	r0, r3
    74e2:	d1f9      	bne.n	74d8 <uuid_to_uuid128+0x60>
    74e4:	7803      	ldrb	r3, [r0, #0]
    74e6:	700b      	strb	r3, [r1, #0]
    74e8:	e7dd      	b.n	74a6 <uuid_to_uuid128+0x2e>
    74ea:	bf00      	nop
    74ec:	00028f7d 	.word	0x00028f7d

000074f0 <bt_adv_foreach>:
{
    74f0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    74f2:	4801      	ldr	r0, [pc, #4]	; (74f8 <bt_adv_foreach+0x8>)
    74f4:	4718      	bx	r3
    74f6:	bf00      	nop
    74f8:	20000018 	.word	0x20000018

000074fc <le_dhkey_complete>:
{
    74fc:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    74fe:	4c06      	ldr	r4, [pc, #24]	; (7518 <le_dhkey_complete+0x1c>)
    7500:	6823      	ldr	r3, [r4, #0]
    7502:	b133      	cbz	r3, 7512 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    7504:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    7506:	7802      	ldrb	r2, [r0, #0]
    7508:	b922      	cbnz	r2, 7514 <le_dhkey_complete+0x18>
    750a:	3001      	adds	r0, #1
    750c:	4798      	blx	r3
		dh_key_cb = NULL;
    750e:	2300      	movs	r3, #0
    7510:	6023      	str	r3, [r4, #0]
}
    7512:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    7514:	2000      	movs	r0, #0
    7516:	e7f9      	b.n	750c <le_dhkey_complete+0x10>
    7518:	20001bcc 	.word	0x20001bcc

0000751c <ver_str>:
{
    751c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    751e:	4d0b      	ldr	r5, [pc, #44]	; (754c <ver_str+0x30>)
{
    7520:	4606      	mov	r6, r0
	const char * const str[] = {
    7522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    7524:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    7526:	466c      	mov	r4, sp
    7528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    752a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    752c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    752e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    7536:	2e0b      	cmp	r6, #11
		return str[ver];
    7538:	bf9b      	ittet	ls
    753a:	ab0c      	addls	r3, sp, #48	; 0x30
    753c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    7540:	4803      	ldrhi	r0, [pc, #12]	; (7550 <ver_str+0x34>)
		return str[ver];
    7542:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    7546:	b00c      	add	sp, #48	; 0x30
    7548:	bd70      	pop	{r4, r5, r6, pc}
    754a:	bf00      	nop
    754c:	00026a08 	.word	0x00026a08
    7550:	00029079 	.word	0x00029079

00007554 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    7554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    7556:	4f0a      	ldr	r7, [pc, #40]	; (7580 <id_find+0x2c>)
{
    7558:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    755a:	2500      	movs	r5, #0
    755c:	79fb      	ldrb	r3, [r7, #7]
    755e:	b2ec      	uxtb	r4, r5
    7560:	42a3      	cmp	r3, r4
    7562:	d802      	bhi.n	756a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7564:	f06f 0401 	mvn.w	r4, #1
    7568:	e008      	b.n	757c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    756a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    756e:	4439      	add	r1, r7
    7570:	4630      	mov	r0, r6
    7572:	f01b fb9c 	bl	22cae <bt_addr_le_cmp>
    7576:	3501      	adds	r5, #1
    7578:	2800      	cmp	r0, #0
    757a:	d1ef      	bne.n	755c <id_find+0x8>
}
    757c:	4620      	mov	r0, r4
    757e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7580:	20000000 	.word	0x20000000

00007584 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7584:	6843      	ldr	r3, [r0, #4]
{
    7586:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7588:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    758a:	0558      	lsls	r0, r3, #21
    758c:	d408      	bmi.n	75a0 <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    758e:	6922      	ldr	r2, [r4, #16]
    7590:	b10a      	cbz	r2, 7596 <valid_adv_param+0x12>
    7592:	07d9      	lsls	r1, r3, #31
    7594:	d504      	bpl.n	75a0 <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
    7596:	4d16      	ldr	r5, [pc, #88]	; (75f0 <valid_adv_param+0x6c>)
    7598:	7820      	ldrb	r0, [r4, #0]
    759a:	79eb      	ldrb	r3, [r5, #7]
    759c:	4283      	cmp	r3, r0
    759e:	d802      	bhi.n	75a6 <valid_adv_param+0x22>
			return false;
    75a0:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
    75a2:	b003      	add	sp, #12
    75a4:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    75a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    75aa:	2300      	movs	r3, #0
    75ac:	4669      	mov	r1, sp
    75ae:	4428      	add	r0, r5
    75b0:	9300      	str	r3, [sp, #0]
    75b2:	f8cd 3003 	str.w	r3, [sp, #3]
    75b6:	f01b fb7a 	bl	22cae <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    75ba:	2800      	cmp	r0, #0
    75bc:	d0f0      	beq.n	75a0 <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    75be:	6863      	ldr	r3, [r4, #4]
    75c0:	07da      	lsls	r2, r3, #31
    75c2:	d406      	bmi.n	75d2 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    75c4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    75c8:	2a08      	cmp	r2, #8
    75ca:	d802      	bhi.n	75d2 <valid_adv_param+0x4e>
    75cc:	68a2      	ldr	r2, [r4, #8]
    75ce:	2a9f      	cmp	r2, #159	; 0x9f
    75d0:	d9e6      	bls.n	75a0 <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    75d2:	06db      	lsls	r3, r3, #27
    75d4:	d401      	bmi.n	75da <valid_adv_param+0x56>
    75d6:	6923      	ldr	r3, [r4, #16]
    75d8:	b943      	cbnz	r3, 75ec <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
    75da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    75de:	429a      	cmp	r2, r3
    75e0:	d8de      	bhi.n	75a0 <valid_adv_param+0x1c>
    75e2:	2a1f      	cmp	r2, #31
    75e4:	d9dc      	bls.n	75a0 <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
    75e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    75ea:	d8d9      	bhi.n	75a0 <valid_adv_param+0x1c>
	return true;
    75ec:	2001      	movs	r0, #1
    75ee:	e7d8      	b.n	75a2 <valid_adv_param+0x1e>
    75f0:	20000000 	.word	0x20000000

000075f4 <hci_data_buf_overflow>:
    75f4:	4905      	ldr	r1, [pc, #20]	; (760c <hci_data_buf_overflow+0x18>)
    75f6:	4a06      	ldr	r2, [pc, #24]	; (7610 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    75f8:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    75fa:	4806      	ldr	r0, [pc, #24]	; (7614 <hci_data_buf_overflow+0x20>)
    75fc:	1a52      	subs	r2, r2, r1
    75fe:	08d2      	lsrs	r2, r2, #3
    7600:	0192      	lsls	r2, r2, #6
    7602:	7819      	ldrb	r1, [r3, #0]
    7604:	f042 0202 	orr.w	r2, r2, #2
    7608:	f019 bd4f 	b.w	210aa <log_1>
    760c:	00026828 	.word	0x00026828
    7610:	00026918 	.word	0x00026918
    7614:	00029081 	.word	0x00029081

00007618 <le_pkey_complete>:
{
    7618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    761a:	6885      	ldr	r5, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    761c:	4811      	ldr	r0, [pc, #68]	; (7664 <le_pkey_complete+0x4c>)
    761e:	f06f 0110 	mvn.w	r1, #16
    7622:	f01b fb47 	bl	22cb4 <atomic_and>
	if (!evt->status) {
    7626:	782b      	ldrb	r3, [r5, #0]
    7628:	b96b      	cbnz	r3, 7646 <le_pkey_complete+0x2e>
		memcpy(pub_key, evt->key, 64);
    762a:	4a0f      	ldr	r2, [pc, #60]	; (7668 <le_pkey_complete+0x50>)
    762c:	1c6b      	adds	r3, r5, #1
    762e:	f105 0141 	add.w	r1, r5, #65	; 0x41
    7632:	f853 0b04 	ldr.w	r0, [r3], #4
    7636:	f842 0b04 	str.w	r0, [r2], #4
    763a:	428b      	cmp	r3, r1
    763c:	d1f9      	bne.n	7632 <le_pkey_complete+0x1a>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    763e:	4809      	ldr	r0, [pc, #36]	; (7664 <le_pkey_complete+0x4c>)
    7640:	2108      	movs	r1, #8
    7642:	f01b fb46 	bl	22cd2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7646:	4e09      	ldr	r6, [pc, #36]	; (766c <le_pkey_complete+0x54>)
		cb->func(evt->status ? NULL : pub_key);
    7648:	4f07      	ldr	r7, [pc, #28]	; (7668 <le_pkey_complete+0x50>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    764a:	6834      	ldr	r4, [r6, #0]
    764c:	b90c      	cbnz	r4, 7652 <le_pkey_complete+0x3a>
	pub_key_cb = NULL;
    764e:	6034      	str	r4, [r6, #0]
}
    7650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    7652:	782a      	ldrb	r2, [r5, #0]
    7654:	6823      	ldr	r3, [r4, #0]
    7656:	2a00      	cmp	r2, #0
    7658:	bf0c      	ite	eq
    765a:	4638      	moveq	r0, r7
    765c:	2000      	movne	r0, #0
    765e:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7660:	6864      	ldr	r4, [r4, #4]
    7662:	e7f3      	b.n	764c <le_pkey_complete+0x34>
    7664:	20000098 	.word	0x20000098
    7668:	20003b6e 	.word	0x20003b6e
    766c:	20001bd0 	.word	0x20001bd0

00007670 <hci_hardware_error>:
{
    7670:	b508      	push	{r3, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7672:	2101      	movs	r1, #1
    7674:	3008      	adds	r0, #8
    7676:	f01d ff39 	bl	254ec <net_buf_simple_pull_mem>
    767a:	4b06      	ldr	r3, [pc, #24]	; (7694 <hci_hardware_error+0x24>)
    767c:	4a06      	ldr	r2, [pc, #24]	; (7698 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    767e:	7801      	ldrb	r1, [r0, #0]
    7680:	4806      	ldr	r0, [pc, #24]	; (769c <hci_hardware_error+0x2c>)
    7682:	1ad2      	subs	r2, r2, r3
    7684:	08d2      	lsrs	r2, r2, #3
    7686:	0192      	lsls	r2, r2, #6
}
    7688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    768c:	f042 0201 	orr.w	r2, r2, #1
    7690:	f019 bd0b 	b.w	210aa <log_1>
    7694:	00026828 	.word	0x00026828
    7698:	00026918 	.word	0x00026918
    769c:	000290a9 	.word	0x000290a9

000076a0 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    76a0:	6883      	ldr	r3, [r0, #8]
{
    76a2:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    76a4:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    76a6:	4620      	mov	r0, r4
    76a8:	f002 ffb6 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    76ac:	b960      	cbnz	r0, 76c8 <le_data_len_change+0x28>
    76ae:	4a08      	ldr	r2, [pc, #32]	; (76d0 <le_data_len_change+0x30>)
    76b0:	4b08      	ldr	r3, [pc, #32]	; (76d4 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    76b2:	4809      	ldr	r0, [pc, #36]	; (76d8 <le_data_len_change+0x38>)
    76b4:	1ad2      	subs	r2, r2, r3
    76b6:	08d2      	lsrs	r2, r2, #3
    76b8:	0192      	lsls	r2, r2, #6
    76ba:	4621      	mov	r1, r4
    76bc:	f042 0201 	orr.w	r2, r2, #1
}
    76c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    76c4:	f019 bcf1 	b.w	210aa <log_1>
}
    76c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    76cc:	f01b be70 	b.w	233b0 <bt_conn_unref>
    76d0:	00026918 	.word	0x00026918
    76d4:	00026828 	.word	0x00026828
    76d8:	000290cb 	.word	0x000290cb

000076dc <hci_disconn_complete_prio>:
{
    76dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    76de:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    76e0:	781a      	ldrb	r2, [r3, #0]
    76e2:	b9da      	cbnz	r2, 771c <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    76e4:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    76e8:	4628      	mov	r0, r5
    76ea:	f002 ff95 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    76ee:	4604      	mov	r4, r0
    76f0:	b960      	cbnz	r0, 770c <hci_disconn_complete_prio+0x30>
    76f2:	4b0b      	ldr	r3, [pc, #44]	; (7720 <hci_disconn_complete_prio+0x44>)
    76f4:	4a0b      	ldr	r2, [pc, #44]	; (7724 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    76f6:	480c      	ldr	r0, [pc, #48]	; (7728 <hci_disconn_complete_prio+0x4c>)
    76f8:	1ad2      	subs	r2, r2, r3
    76fa:	08d2      	lsrs	r2, r2, #3
    76fc:	0192      	lsls	r2, r2, #6
    76fe:	4629      	mov	r1, r5
    7700:	f042 0201 	orr.w	r2, r2, #1
}
    7704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7708:	f019 bccf 	b.w	210aa <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    770c:	2101      	movs	r1, #1
    770e:	f003 f823 	bl	a758 <bt_conn_set_state>
	bt_conn_unref(conn);
    7712:	4620      	mov	r0, r4
}
    7714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7718:	f01b be4a 	b.w	233b0 <bt_conn_unref>
}
    771c:	bd38      	pop	{r3, r4, r5, pc}
    771e:	bf00      	nop
    7720:	00026828 	.word	0x00026828
    7724:	00026918 	.word	0x00026918
    7728:	000290ef 	.word	0x000290ef

0000772c <hci_vendor_event>:
{
    772c:	b510      	push	{r4, lr}
    772e:	4a0a      	ldr	r2, [pc, #40]	; (7758 <hci_vendor_event+0x2c>)
    7730:	4c0a      	ldr	r4, [pc, #40]	; (775c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    7732:	8981      	ldrh	r1, [r0, #12]
    7734:	6880      	ldr	r0, [r0, #8]
    7736:	1aa4      	subs	r4, r4, r2
    7738:	f7ff fcb2 	bl	70a0 <bt_hex_real>
    773c:	f7fd fdd4 	bl	52e8 <log_strdup>
    7740:	08e4      	lsrs	r4, r4, #3
    7742:	01a4      	lsls	r4, r4, #6
    7744:	f044 0402 	orr.w	r4, r4, #2
    7748:	4601      	mov	r1, r0
    774a:	4622      	mov	r2, r4
    774c:	4804      	ldr	r0, [pc, #16]	; (7760 <hci_vendor_event+0x34>)
}
    774e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    7752:	f019 bcaa 	b.w	210aa <log_1>
    7756:	bf00      	nop
    7758:	00026828 	.word	0x00026828
    775c:	00026918 	.word	0x00026918
    7760:	00029115 	.word	0x00029115

00007764 <le_conn_update_complete>:
{
    7764:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    7766:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7768:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    776c:	4630      	mov	r0, r6
    776e:	f002 ff53 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    7772:	4604      	mov	r4, r0
    7774:	b968      	cbnz	r0, 7792 <le_conn_update_complete+0x2e>
    7776:	4b25      	ldr	r3, [pc, #148]	; (780c <le_conn_update_complete+0xa8>)
    7778:	4a25      	ldr	r2, [pc, #148]	; (7810 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    777a:	4826      	ldr	r0, [pc, #152]	; (7814 <le_conn_update_complete+0xb0>)
    777c:	1ad2      	subs	r2, r2, r3
    777e:	08d2      	lsrs	r2, r2, #3
    7780:	0192      	lsls	r2, r2, #6
    7782:	f042 0201 	orr.w	r2, r2, #1
    7786:	4631      	mov	r1, r6
}
    7788:	b002      	add	sp, #8
    778a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    778e:	f019 bc8c 	b.w	210aa <log_1>
	if (!evt->status) {
    7792:	782b      	ldrb	r3, [r5, #0]
    7794:	b9cb      	cbnz	r3, 77ca <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    7796:	792a      	ldrb	r2, [r5, #4]
    7798:	78eb      	ldrb	r3, [r5, #3]
    779a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    779e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    77a2:	79aa      	ldrb	r2, [r5, #6]
    77a4:	796b      	ldrb	r3, [r5, #5]
    77a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77aa:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    77ae:	79eb      	ldrb	r3, [r5, #7]
    77b0:	7a2a      	ldrb	r2, [r5, #8]
    77b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77b6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    77ba:	f002 fd21 	bl	a200 <notify_le_param_updated>
	bt_conn_unref(conn);
    77be:	4620      	mov	r0, r4
}
    77c0:	b002      	add	sp, #8
    77c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    77c6:	f01b bdf3 	b.w	233b0 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    77ca:	2b1a      	cmp	r3, #26
    77cc:	d1f7      	bne.n	77be <le_conn_update_complete+0x5a>
    77ce:	78c3      	ldrb	r3, [r0, #3]
    77d0:	2b01      	cmp	r3, #1
    77d2:	d1f4      	bne.n	77be <le_conn_update_complete+0x5a>
		   !atomic_test_and_set_bit(conn->flags,
    77d4:	210a      	movs	r1, #10
    77d6:	3004      	adds	r0, #4
    77d8:	f01b fa9b 	bl	22d12 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    77dc:	2800      	cmp	r0, #0
    77de:	d1ee      	bne.n	77be <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    77e0:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    77e4:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    77e8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    77ec:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    77f0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    77f4:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    77f8:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    77fa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    77fe:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    7802:	4620      	mov	r0, r4
    7804:	f003 fcd0 	bl	b1a8 <bt_l2cap_update_conn_param>
    7808:	e7d9      	b.n	77be <le_conn_update_complete+0x5a>
    780a:	bf00      	nop
    780c:	00026828 	.word	0x00026828
    7810:	00026918 	.word	0x00026918
    7814:	000290cb 	.word	0x000290cb

00007818 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    7818:	b5f0      	push	{r4, r5, r6, r7, lr}
    781a:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    781c:	7803      	ldrb	r3, [r0, #0]
    781e:	f88d 3004 	strb.w	r3, [sp, #4]
{
    7822:	4605      	mov	r5, r0
	struct adv_id_check_data check_data = {
    7824:	2300      	movs	r3, #0
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    7826:	4824      	ldr	r0, [pc, #144]	; (78b8 <le_adv_start_add_conn+0xa0>)
	struct adv_id_check_data check_data = {
    7828:	f88d 3005 	strb.w	r3, [sp, #5]
{
    782c:	460f      	mov	r7, r1
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    782e:	a901      	add	r1, sp, #4
    7830:	f7ff fe5e 	bl	74f0 <bt_adv_foreach>
	if (check_data.adv_enabled) {
    7834:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7838:	bba3      	cbnz	r3, 78a4 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    783a:	462e      	mov	r6, r5
    783c:	4a1f      	ldr	r2, [pc, #124]	; (78bc <le_adv_start_add_conn+0xa4>)
    783e:	f816 1b0b 	ldrb.w	r1, [r6], #11
    7842:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7846:	4630      	mov	r0, r6
    7848:	a902      	add	r1, sp, #8
    784a:	9302      	str	r3, [sp, #8]
    784c:	f8cd 300b 	str.w	r3, [sp, #11]
    7850:	f01b fa2d 	bl	22cae <bt_addr_le_cmp>
    7854:	782a      	ldrb	r2, [r5, #0]
    7856:	4604      	mov	r4, r0
    7858:	b9b0      	cbnz	r0, 7888 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    785a:	4b19      	ldr	r3, [pc, #100]	; (78c0 <le_adv_start_add_conn+0xa8>)
    785c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    785e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    7860:	9004      	str	r0, [sp, #16]
    7862:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    7866:	f8ad 1014 	strh.w	r1, [sp, #20]
    786a:	4610      	mov	r0, r2
    786c:	a904      	add	r1, sp, #16
    786e:	f88d 3016 	strb.w	r3, [sp, #22]
    7872:	f002 fea7 	bl	a5c4 <bt_conn_add_le>
		if (!conn) {
    7876:	4605      	mov	r5, r0
    7878:	b1d0      	cbz	r0, 78b0 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    787a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    787c:	f002 ff6c 	bl	a758 <bt_conn_set_state>
	*out_conn = conn;
    7880:	603d      	str	r5, [r7, #0]
	return 0;
}
    7882:	4620      	mov	r0, r4
    7884:	b007      	add	sp, #28
    7886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    7888:	4631      	mov	r1, r6
    788a:	4610      	mov	r0, r2
    788c:	f002 ff0e 	bl	a6ac <bt_conn_exists_le>
    7890:	4604      	mov	r4, r0
    7892:	b950      	cbnz	r0, 78aa <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    7894:	7828      	ldrb	r0, [r5, #0]
    7896:	4631      	mov	r1, r6
    7898:	f002 fe94 	bl	a5c4 <bt_conn_add_le>
	if (!conn) {
    789c:	4605      	mov	r5, r0
    789e:	b138      	cbz	r0, 78b0 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    78a0:	2105      	movs	r1, #5
    78a2:	e7eb      	b.n	787c <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    78a4:	f06f 0485 	mvn.w	r4, #133	; 0x85
    78a8:	e7eb      	b.n	7882 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    78aa:	f06f 0415 	mvn.w	r4, #21
    78ae:	e7e8      	b.n	7882 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    78b0:	f06f 040b 	mvn.w	r4, #11
    78b4:	e7e5      	b.n	7882 <le_adv_start_add_conn+0x6a>
    78b6:	bf00      	nop
    78b8:	00022d41 	.word	0x00022d41
    78bc:	20000000 	.word	0x20000000
    78c0:	00026a08 	.word	0x00026a08

000078c4 <set_data_add>:
{
    78c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78c8:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
    78cc:	4607      	mov	r7, r0
    78ce:	4689      	mov	r9, r1
    78d0:	4614      	mov	r4, r2
	uint8_t set_data_len = 0;
    78d2:	2500      	movs	r5, #0
				len = set_data_len_max - (set_data_len + 2);
    78d4:	1e8b      	subs	r3, r1, #2
		for (size_t j = 0; j < ad[i].len; j++) {
    78d6:	f8d4 8000 	ldr.w	r8, [r4]
    78da:	f04f 0b00 	mov.w	fp, #0
    78de:	6862      	ldr	r2, [r4, #4]
    78e0:	455a      	cmp	r2, fp
    78e2:	d806      	bhi.n	78f2 <set_data_add+0x2e>
	for (size_t i = 0; i < ad_len; i++) {
    78e4:	3408      	adds	r4, #8
    78e6:	45a2      	cmp	sl, r4
    78e8:	d1f5      	bne.n	78d6 <set_data_add+0x12>
	*data_len = set_data_len;
    78ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
    78ec:	2000      	movs	r0, #0
	*data_len = set_data_len;
    78ee:	701d      	strb	r5, [r3, #0]
	return 0;
    78f0:	e019      	b.n	7926 <set_data_add+0x62>
			size_t len = data[j].data_len;
    78f2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    78f6:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    78fa:	1ca8      	adds	r0, r5, #2
    78fc:	1881      	adds	r1, r0, r2
    78fe:	4549      	cmp	r1, r9
    7900:	d916      	bls.n	7930 <set_data_add+0x6c>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7902:	f1bc 0f09 	cmp.w	ip, #9
				len = set_data_len_max - (set_data_len + 2);
    7906:	eba3 0205 	sub.w	r2, r3, r5
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    790a:	d100      	bne.n	790e <set_data_add+0x4a>
    790c:	b972      	cbnz	r2, 792c <set_data_add+0x68>
    790e:	4b14      	ldr	r3, [pc, #80]	; (7960 <set_data_add+0x9c>)
    7910:	4914      	ldr	r1, [pc, #80]	; (7964 <set_data_add+0xa0>)
					BT_ERR("Too big advertising data");
    7912:	4815      	ldr	r0, [pc, #84]	; (7968 <set_data_add+0xa4>)
    7914:	1ac9      	subs	r1, r1, r3
    7916:	08c9      	lsrs	r1, r1, #3
    7918:	0189      	lsls	r1, r1, #6
    791a:	f041 0101 	orr.w	r1, r1, #1
    791e:	f019 fbb7 	bl	21090 <log_0>
					return -EINVAL;
    7922:	f06f 0015 	mvn.w	r0, #21
}
    7926:	b003      	add	sp, #12
    7928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    792c:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    7930:	b2d6      	uxtb	r6, r2
    7932:	1c71      	adds	r1, r6, #1
    7934:	5579      	strb	r1, [r7, r5]
    7936:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    7938:	b2c9      	uxtb	r1, r1
			set_data_len += len;
    793a:	3602      	adds	r6, #2
			set_data[set_data_len++] = type;
    793c:	f807 c001 	strb.w	ip, [r7, r1]
    7940:	fa57 f080 	uxtab	r0, r7, r0
    7944:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7948:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    794a:	4435      	add	r5, r6
    794c:	f01e fca3 	bl	26296 <memcpy>
    7950:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    7952:	9b01      	ldr	r3, [sp, #4]
    7954:	f10b 0b01 	add.w	fp, fp, #1
    7958:	f108 0808 	add.w	r8, r8, #8
    795c:	e7bf      	b.n	78de <set_data_add+0x1a>
    795e:	bf00      	nop
    7960:	00026828 	.word	0x00026828
    7964:	00026918 	.word	0x00026918
    7968:	00029139 	.word	0x00029139

0000796c <update_sec_level.part.0>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    796c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
static void update_sec_level(struct bt_conn *conn)
    7970:	b510      	push	{r4, lr}
    7972:	4604      	mov	r4, r0
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    7974:	b1fb      	cbz	r3, 79b6 <update_sec_level.part.0+0x4a>
    7976:	7b5a      	ldrb	r2, [r3, #13]
    7978:	07d1      	lsls	r1, r2, #31
    797a:	d51c      	bpl.n	79b6 <update_sec_level.part.0+0x4a>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    797c:	06d2      	lsls	r2, r2, #27
    797e:	d518      	bpl.n	79b2 <update_sec_level.part.0+0x46>
    7980:	7b1b      	ldrb	r3, [r3, #12]
    7982:	2b10      	cmp	r3, #16
    7984:	d115      	bne.n	79b2 <update_sec_level.part.0+0x46>
			conn->sec_level = BT_SECURITY_L4;
    7986:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    7988:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    798a:	7aa2      	ldrb	r2, [r4, #10]
    798c:	7a63      	ldrb	r3, [r4, #9]
    798e:	429a      	cmp	r2, r3
    7990:	d913      	bls.n	79ba <update_sec_level.part.0+0x4e>
    7992:	4b0a      	ldr	r3, [pc, #40]	; (79bc <update_sec_level.part.0+0x50>)
    7994:	490a      	ldr	r1, [pc, #40]	; (79c0 <update_sec_level.part.0+0x54>)
		BT_ERR("Failed to set required security level");
    7996:	480b      	ldr	r0, [pc, #44]	; (79c4 <update_sec_level.part.0+0x58>)
    7998:	1ac9      	subs	r1, r1, r3
    799a:	08c9      	lsrs	r1, r1, #3
    799c:	0189      	lsls	r1, r1, #6
    799e:	f041 0101 	orr.w	r1, r1, #1
    79a2:	f019 fb75 	bl	21090 <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    79a6:	4620      	mov	r0, r4
    79a8:	2105      	movs	r1, #5
}
    79aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    79ae:	f003 b8e3 	b.w	ab78 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    79b2:	2303      	movs	r3, #3
    79b4:	e7e8      	b.n	7988 <update_sec_level.part.0+0x1c>
		conn->sec_level = BT_SECURITY_L2;
    79b6:	2302      	movs	r3, #2
    79b8:	e7e6      	b.n	7988 <update_sec_level.part.0+0x1c>
}
    79ba:	bd10      	pop	{r4, pc}
    79bc:	00026828 	.word	0x00026828
    79c0:	00026918 	.word	0x00026918
    79c4:	00029152 	.word	0x00029152

000079c8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    79c8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    79ca:	4c0d      	ldr	r4, [pc, #52]	; (7a00 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    79cc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    79ce:	2205      	movs	r2, #5
    79d0:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    79d4:	f002 fe44 	bl	a660 <bt_conn_lookup_state_le>
		if (!conn) {
    79d8:	b978      	cbnz	r0, 79fa <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    79da:	4b0a      	ldr	r3, [pc, #40]	; (7a04 <find_pending_connect.part.0+0x3c>)
    79dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
    79de:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    79e0:	9000      	str	r0, [sp, #0]
    79e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    79e6:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    79ea:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
    79ee:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    79f2:	2204      	movs	r2, #4
    79f4:	4669      	mov	r1, sp
    79f6:	f002 fe33 	bl	a660 <bt_conn_lookup_state_le>
}
    79fa:	b002      	add	sp, #8
    79fc:	bd10      	pop	{r4, pc}
    79fe:	bf00      	nop
    7a00:	20000000 	.word	0x20000000
    7a04:	00026a08 	.word	0x00026a08

00007a08 <handle_event>:
{
    7a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7a0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7a0e:	4605      	mov	r5, r0
    7a10:	4608      	mov	r0, r1
		if (handler->event != event) {
    7a12:	7811      	ldrb	r1, [r2, #0]
    7a14:	42a9      	cmp	r1, r5
    7a16:	d01a      	beq.n	7a4e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    7a18:	3208      	adds	r2, #8
    7a1a:	4293      	cmp	r3, r2
    7a1c:	d1f9      	bne.n	7a12 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    7a1e:	8986      	ldrh	r6, [r0, #12]
    7a20:	4b16      	ldr	r3, [pc, #88]	; (7a7c <handle_event+0x74>)
    7a22:	4c17      	ldr	r4, [pc, #92]	; (7a80 <handle_event+0x78>)
    7a24:	6880      	ldr	r0, [r0, #8]
    7a26:	4631      	mov	r1, r6
    7a28:	1ae4      	subs	r4, r4, r3
    7a2a:	f7ff fb39 	bl	70a0 <bt_hex_real>
    7a2e:	f7fd fc5b 	bl	52e8 <log_strdup>
    7a32:	08e4      	lsrs	r4, r4, #3
    7a34:	01a4      	lsls	r4, r4, #6
    7a36:	f044 0402 	orr.w	r4, r4, #2
    7a3a:	4603      	mov	r3, r0
    7a3c:	f8ad 4000 	strh.w	r4, [sp]
    7a40:	4810      	ldr	r0, [pc, #64]	; (7a84 <handle_event+0x7c>)
    7a42:	4632      	mov	r2, r6
    7a44:	4629      	mov	r1, r5
    7a46:	f019 fb5d 	bl	21104 <log_3>
}
    7a4a:	b002      	add	sp, #8
    7a4c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    7a4e:	8981      	ldrh	r1, [r0, #12]
    7a50:	7853      	ldrb	r3, [r2, #1]
    7a52:	428b      	cmp	r3, r1
    7a54:	d90d      	bls.n	7a72 <handle_event+0x6a>
    7a56:	4a09      	ldr	r2, [pc, #36]	; (7a7c <handle_event+0x74>)
    7a58:	4b09      	ldr	r3, [pc, #36]	; (7a80 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7a5a:	480b      	ldr	r0, [pc, #44]	; (7a88 <handle_event+0x80>)
    7a5c:	1a9b      	subs	r3, r3, r2
    7a5e:	08db      	lsrs	r3, r3, #3
    7a60:	019b      	lsls	r3, r3, #6
    7a62:	f043 0301 	orr.w	r3, r3, #1
    7a66:	462a      	mov	r2, r5
}
    7a68:	b002      	add	sp, #8
    7a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7a6e:	f019 bb30 	b.w	210d2 <log_2>
		handler->handler(buf);
    7a72:	6853      	ldr	r3, [r2, #4]
}
    7a74:	b002      	add	sp, #8
    7a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    7a7a:	4718      	bx	r3
    7a7c:	00026828 	.word	0x00026828
    7a80:	00026918 	.word	0x00026918
    7a84:	0002919a 	.word	0x0002919a
    7a88:	00029178 	.word	0x00029178

00007a8c <hci_le_meta_event>:
{
    7a8c:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7a8e:	2101      	movs	r1, #1
{
    7a90:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7a92:	3008      	adds	r0, #8
    7a94:	f01d fd2a 	bl	254ec <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7a98:	4621      	mov	r1, r4
    7a9a:	4a03      	ldr	r2, [pc, #12]	; (7aa8 <hci_le_meta_event+0x1c>)
    7a9c:	7800      	ldrb	r0, [r0, #0]
}
    7a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7aa2:	230b      	movs	r3, #11
    7aa4:	f7ff bfb0 	b.w	7a08 <handle_event>
    7aa8:	00026e4c 	.word	0x00026e4c

00007aac <hci_cmd_done>:
{
    7aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ab0:	4607      	mov	r7, r0
    7ab2:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7ab4:	7990      	ldrb	r0, [r2, #6]
    7ab6:	4e35      	ldr	r6, [pc, #212]	; (7b8c <hci_cmd_done+0xe0>)
{
    7ab8:	4688      	mov	r8, r1
    7aba:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7abc:	f015 fef0 	bl	1d8a0 <net_buf_pool_get>
    7ac0:	4286      	cmp	r6, r0
    7ac2:	d016      	beq.n	7af2 <hci_cmd_done+0x46>
    7ac4:	4b32      	ldr	r3, [pc, #200]	; (7b90 <hci_cmd_done+0xe4>)
    7ac6:	4d33      	ldr	r5, [pc, #204]	; (7b94 <hci_cmd_done+0xe8>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7ac8:	79a0      	ldrb	r0, [r4, #6]
    7aca:	9700      	str	r7, [sp, #0]
    7acc:	1aed      	subs	r5, r5, r3
    7ace:	08ed      	lsrs	r5, r5, #3
    7ad0:	9001      	str	r0, [sp, #4]
    7ad2:	f015 fee5 	bl	1d8a0 <net_buf_pool_get>
    7ad6:	01ad      	lsls	r5, r5, #6
    7ad8:	f045 0502 	orr.w	r5, r5, #2
    7adc:	e9cd 0602 	strd	r0, r6, [sp, #8]
    7ae0:	462b      	mov	r3, r5
    7ae2:	482d      	ldr	r0, [pc, #180]	; (7b98 <hci_cmd_done+0xec>)
    7ae4:	2204      	movs	r2, #4
    7ae6:	4669      	mov	r1, sp
    7ae8:	f019 fb28 	bl	2113c <log_n>
}
    7aec:	b005      	add	sp, #20
    7aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    7af2:	4620      	mov	r0, r4
    7af4:	f015 fedc 	bl	1d8b0 <net_buf_id>
    7af8:	4d28      	ldr	r5, [pc, #160]	; (7b9c <hci_cmd_done+0xf0>)
    7afa:	f04f 090c 	mov.w	r9, #12
    7afe:	fb09 5000 	mla	r0, r9, r0, r5
    7b02:	8843      	ldrh	r3, [r0, #2]
    7b04:	42bb      	cmp	r3, r7
    7b06:	d011      	beq.n	7b2c <hci_cmd_done+0x80>
    7b08:	4b21      	ldr	r3, [pc, #132]	; (7b90 <hci_cmd_done+0xe4>)
    7b0a:	4e22      	ldr	r6, [pc, #136]	; (7b94 <hci_cmd_done+0xe8>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7b0c:	4620      	mov	r0, r4
    7b0e:	1af6      	subs	r6, r6, r3
    7b10:	f015 fece 	bl	1d8b0 <net_buf_id>
    7b14:	08f6      	lsrs	r6, r6, #3
    7b16:	fb09 5000 	mla	r0, r9, r0, r5
    7b1a:	01b6      	lsls	r6, r6, #6
    7b1c:	f046 0602 	orr.w	r6, r6, #2
    7b20:	8842      	ldrh	r2, [r0, #2]
    7b22:	481f      	ldr	r0, [pc, #124]	; (7ba0 <hci_cmd_done+0xf4>)
    7b24:	4633      	mov	r3, r6
    7b26:	4639      	mov	r1, r7
    7b28:	f019 fad3 	bl	210d2 <log_2>
	if (cmd(buf)->state && !status) {
    7b2c:	4620      	mov	r0, r4
    7b2e:	f015 febf 	bl	1d8b0 <net_buf_id>
    7b32:	260c      	movs	r6, #12
    7b34:	fb06 5000 	mla	r0, r6, r0, r5
    7b38:	6843      	ldr	r3, [r0, #4]
    7b3a:	b16b      	cbz	r3, 7b58 <hci_cmd_done+0xac>
    7b3c:	f1b8 0f00 	cmp.w	r8, #0
    7b40:	d10a      	bne.n	7b58 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    7b42:	4620      	mov	r0, r4
    7b44:	f015 feb4 	bl	1d8b0 <net_buf_id>
    7b48:	fb06 5000 	mla	r0, r6, r0, r5
    7b4c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    7b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
    7b52:	7a1a      	ldrb	r2, [r3, #8]
    7b54:	f01b f8cc 	bl	22cf0 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    7b58:	4620      	mov	r0, r4
    7b5a:	f015 fea9 	bl	1d8b0 <net_buf_id>
    7b5e:	260c      	movs	r6, #12
    7b60:	fb06 5000 	mla	r0, r6, r0, r5
    7b64:	6883      	ldr	r3, [r0, #8]
    7b66:	2b00      	cmp	r3, #0
    7b68:	d0c0      	beq.n	7aec <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    7b6a:	4620      	mov	r0, r4
    7b6c:	f015 fea0 	bl	1d8b0 <net_buf_id>
    7b70:	4370      	muls	r0, r6
    7b72:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    7b76:	4620      	mov	r0, r4
    7b78:	f015 fe9a 	bl	1d8b0 <net_buf_id>
    7b7c:	fb06 5500 	mla	r5, r6, r0, r5
    7b80:	68a8      	ldr	r0, [r5, #8]
}
    7b82:	b005      	add	sp, #20
    7b84:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
    7b88:	f017 bcaa 	b.w	1f4e0 <z_impl_k_sem_give>
    7b8c:	20001070 	.word	0x20001070
    7b90:	00026828 	.word	0x00026828
    7b94:	00026918 	.word	0x00026918
    7b98:	000291bc 	.word	0x000291bc
    7b9c:	20001bb4 	.word	0x20001bb4
    7ba0:	000291f1 	.word	0x000291f1

00007ba4 <hci_cmd_status>:
{
    7ba4:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7ba6:	2104      	movs	r1, #4
{
    7ba8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7baa:	3008      	adds	r0, #8
    7bac:	f01d fc9e 	bl	254ec <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7bb0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7bb2:	7801      	ldrb	r1, [r0, #0]
    7bb4:	8840      	ldrh	r0, [r0, #2]
    7bb6:	4622      	mov	r2, r4
    7bb8:	f7ff ff78 	bl	7aac <hci_cmd_done>
	if (ncmd) {
    7bbc:	b125      	cbz	r5, 7bc8 <hci_cmd_status+0x24>
    7bbe:	4803      	ldr	r0, [pc, #12]	; (7bcc <hci_cmd_status+0x28>)
}
    7bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7bc4:	f017 bc8c 	b.w	1f4e0 <z_impl_k_sem_give>
    7bc8:	bd38      	pop	{r3, r4, r5, pc}
    7bca:	bf00      	nop
    7bcc:	200000f0 	.word	0x200000f0

00007bd0 <hci_cmd_complete>:
{
    7bd0:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7bd2:	2103      	movs	r1, #3
{
    7bd4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7bd6:	3008      	adds	r0, #8
    7bd8:	f01d fc88 	bl	254ec <net_buf_simple_pull_mem>
	status = buf->data[0];
    7bdc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7bde:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7be0:	7819      	ldrb	r1, [r3, #0]
    7be2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7be6:	4622      	mov	r2, r4
    7be8:	f7ff ff60 	bl	7aac <hci_cmd_done>
	if (ncmd) {
    7bec:	b125      	cbz	r5, 7bf8 <hci_cmd_complete+0x28>
    7bee:	4803      	ldr	r0, [pc, #12]	; (7bfc <hci_cmd_complete+0x2c>)
}
    7bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7bf4:	f017 bc74 	b.w	1f4e0 <z_impl_k_sem_give>
    7bf8:	bd38      	pop	{r3, r4, r5, pc}
    7bfa:	bf00      	nop
    7bfc:	200000f0 	.word	0x200000f0

00007c00 <hci_tx_thread>:
{
    7c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c04:	4d51      	ldr	r5, [pc, #324]	; (7d4c <hci_tx_thread+0x14c>)
    7c06:	4b52      	ldr	r3, [pc, #328]	; (7d50 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7c08:	f8df 9148 	ldr.w	r9, [pc, #328]	; 7d54 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
    7c0c:	f8df a148 	ldr.w	sl, [pc, #328]	; 7d58 <hci_tx_thread+0x158>
    7c10:	1aed      	subs	r5, r5, r3
    7c12:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    7c14:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7c18:	4850      	ldr	r0, [pc, #320]	; (7d5c <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7c1a:	f36f 3310 	bfc	r3, #12, #5
    7c1e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7c22:	f002 fc9b 	bl	a55c <bt_conn_prepare_events>
    7c26:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7c28:	484a      	ldr	r0, [pc, #296]	; (7d54 <hci_tx_thread+0x154>)
    7c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c32:	4639      	mov	r1, r7
    7c34:	f017 ff76 	bl	1fb24 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7c38:	b160      	cbz	r0, 7c54 <hci_tx_thread+0x54>
    7c3a:	4949      	ldr	r1, [pc, #292]	; (7d60 <hci_tx_thread+0x160>)
    7c3c:	4849      	ldr	r0, [pc, #292]	; (7d64 <hci_tx_thread+0x164>)
    7c3e:	f241 4348 	movw	r3, #5192	; 0x1448
    7c42:	4652      	mov	r2, sl
    7c44:	f018 fecb 	bl	209de <printk>
    7c48:	4040      	eors	r0, r0
    7c4a:	f380 8811 	msr	BASEPRI, r0
    7c4e:	f04f 0003 	mov.w	r0, #3
    7c52:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7c54:	4e44      	ldr	r6, [pc, #272]	; (7d68 <hci_tx_thread+0x168>)
{
    7c56:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7d54 <hci_tx_thread+0x154>
    7c5a:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
    7c5e:	b917      	cbnz	r7, 7c66 <hci_tx_thread+0x66>
	z_impl_k_yield();
    7c60:	f017 fb9e 	bl	1f3a0 <z_impl_k_yield>
	while (1) {
    7c64:	e7d6      	b.n	7c14 <hci_tx_thread+0x14>
		switch (ev->state) {
    7c66:	f8d8 100c 	ldr.w	r1, [r8, #12]
    7c6a:	f3c1 3104 	ubfx	r1, r1, #12, #5
    7c6e:	2901      	cmp	r1, #1
    7c70:	d959      	bls.n	7d26 <hci_tx_thread+0x126>
    7c72:	2904      	cmp	r1, #4
    7c74:	d163      	bne.n	7d3e <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7c76:	f898 300c 	ldrb.w	r3, [r8, #12]
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d157      	bne.n	7d2e <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7c7e:	483b      	ldr	r0, [pc, #236]	; (7d6c <hci_tx_thread+0x16c>)
    7c80:	2200      	movs	r2, #0
    7c82:	2300      	movs	r3, #0
    7c84:	f01d fbaa 	bl	253dc <net_buf_get>
	BT_ASSERT(buf);
    7c88:	4604      	mov	r4, r0
    7c8a:	b960      	cbnz	r0, 7ca6 <hci_tx_thread+0xa6>
    7c8c:	4938      	ldr	r1, [pc, #224]	; (7d70 <hci_tx_thread+0x170>)
    7c8e:	4835      	ldr	r0, [pc, #212]	; (7d64 <hci_tx_thread+0x164>)
    7c90:	f241 33e5 	movw	r3, #5093	; 0x13e5
    7c94:	4652      	mov	r2, sl
    7c96:	f018 fea2 	bl	209de <printk>
    7c9a:	4040      	eors	r0, r0
    7c9c:	f380 8811 	msr	BASEPRI, r0
    7ca0:	f04f 0003 	mov.w	r0, #3
    7ca4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7cae:	4658      	mov	r0, fp
    7cb0:	f017 fc3c 	bl	1f52c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7cb4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    7cb8:	b163      	cbz	r3, 7cd4 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    7cba:	01a9      	lsls	r1, r5, #6
    7cbc:	482d      	ldr	r0, [pc, #180]	; (7d74 <hci_tx_thread+0x174>)
    7cbe:	f041 0101 	orr.w	r1, r1, #1
    7cc2:	f019 f9e5 	bl	21090 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    7cc6:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    7cca:	f015 fea7 	bl	1da1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7cce:	2300      	movs	r3, #0
    7cd0:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
    7cd4:	4620      	mov	r0, r4
    7cd6:	f01d fbb2 	bl	2543e <net_buf_ref>
    7cda:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
		return bt_hci_ecc_send(buf);
    7cde:	4620      	mov	r0, r4
    7ce0:	f7ff fb1e 	bl	7320 <bt_hci_ecc_send>
	if (err) {
    7ce4:	4601      	mov	r1, r0
    7ce6:	b1f0      	cbz	r0, 7d26 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    7ce8:	01aa      	lsls	r2, r5, #6
    7cea:	4823      	ldr	r0, [pc, #140]	; (7d78 <hci_tx_thread+0x178>)
    7cec:	f042 0201 	orr.w	r2, r2, #1
    7cf0:	f019 f9db 	bl	210aa <log_1>
	z_impl_k_sem_give(sem);
    7cf4:	4821      	ldr	r0, [pc, #132]	; (7d7c <hci_tx_thread+0x17c>)
    7cf6:	f017 fbf3 	bl	1f4e0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    7cfa:	4620      	mov	r0, r4
    7cfc:	f015 fdd8 	bl	1d8b0 <net_buf_id>
    7d00:	4b1f      	ldr	r3, [pc, #124]	; (7d80 <hci_tx_thread+0x180>)
    7d02:	220c      	movs	r2, #12
    7d04:	fb02 3000 	mla	r0, r2, r0, r3
    7d08:	211f      	movs	r1, #31
    7d0a:	8840      	ldrh	r0, [r0, #2]
    7d0c:	4622      	mov	r2, r4
    7d0e:	f7ff fecd 	bl	7aac <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7d12:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    7d16:	f015 fe81 	bl	1da1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7d1a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    7d1c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    7d1e:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
    7d22:	f015 fe7b 	bl	1da1c <net_buf_unref>
	for (; count; ev++, count--) {
    7d26:	f108 0814 	add.w	r8, r8, #20
    7d2a:	3f01      	subs	r7, #1
    7d2c:	e797      	b.n	7c5e <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7d2e:	2b01      	cmp	r3, #1
    7d30:	d1f9      	bne.n	7d26 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    7d32:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    7d36:	3834      	subs	r0, #52	; 0x34
    7d38:	f002 ffce 	bl	acd8 <bt_conn_process_tx>
    7d3c:	e7f3      	b.n	7d26 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7d3e:	01aa      	lsls	r2, r5, #6
    7d40:	4810      	ldr	r0, [pc, #64]	; (7d84 <hci_tx_thread+0x184>)
    7d42:	f042 0202 	orr.w	r2, r2, #2
    7d46:	f019 f9b0 	bl	210aa <log_1>
    7d4a:	e7ec      	b.n	7d26 <hci_tx_thread+0x126>
    7d4c:	00026918 	.word	0x00026918
    7d50:	00026828 	.word	0x00026828
    7d54:	20000220 	.word	0x20000220
    7d58:	00029224 	.word	0x00029224
    7d5c:	20000234 	.word	0x20000234
    7d60:	00029258 	.word	0x00029258
    7d64:	00029261 	.word	0x00029261
    7d68:	20000000 	.word	0x20000000
    7d6c:	2000010c 	.word	0x2000010c
    7d70:	0002a41f 	.word	0x0002a41f
    7d74:	0002927e 	.word	0x0002927e
    7d78:	00029299 	.word	0x00029299
    7d7c:	200000f0 	.word	0x200000f0
    7d80:	20001bb4 	.word	0x20001bb4
    7d84:	000292bb 	.word	0x000292bb

00007d88 <hci_num_completed_packets>:
{
    7d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d8c:	4b46      	ldr	r3, [pc, #280]	; (7ea8 <hci_num_completed_packets+0x120>)
    7d8e:	4d47      	ldr	r5, [pc, #284]	; (7eac <hci_num_completed_packets+0x124>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    7d90:	f8d0 8008 	ldr.w	r8, [r0, #8]
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
		k_queue_append(&work_q->queue, work);
    7d94:	f8df a118 	ldr.w	sl, [pc, #280]	; 7eb0 <hci_num_completed_packets+0x128>
    7d98:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    7d9a:	2600      	movs	r6, #0
    7d9c:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    7d9e:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    7da0:	f898 3000 	ldrb.w	r3, [r8]
    7da4:	429e      	cmp	r6, r3
    7da6:	db02      	blt.n	7dae <hci_num_completed_packets+0x26>
}
    7da8:	b003      	add	sp, #12
    7daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    7dae:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    7db2:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    7db6:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	__asm__ volatile(
    7dba:	f04f 0320 	mov.w	r3, #32
    7dbe:	f3ef 8b11 	mrs	fp, BASEPRI
    7dc2:	f383 8811 	msr	BASEPRI, r3
    7dc6:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    7dca:	4608      	mov	r0, r1
    7dcc:	9101      	str	r1, [sp, #4]
    7dce:	f002 fc23 	bl	a618 <bt_conn_lookup_handle>
		if (!conn) {
    7dd2:	9901      	ldr	r1, [sp, #4]
    7dd4:	4604      	mov	r4, r0
    7dd6:	b958      	cbnz	r0, 7df0 <hci_num_completed_packets+0x68>
	__asm__ volatile(
    7dd8:	f38b 8811 	msr	BASEPRI, fp
    7ddc:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    7de0:	01aa      	lsls	r2, r5, #6
    7de2:	4834      	ldr	r0, [pc, #208]	; (7eb4 <hci_num_completed_packets+0x12c>)
    7de4:	f042 0201 	orr.w	r2, r2, #1
    7de8:	f019 f95f 	bl	210aa <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    7dec:	3601      	adds	r6, #1
    7dee:	e7d7      	b.n	7da0 <hci_num_completed_packets+0x18>
    7df0:	f38b 8811 	msr	BASEPRI, fp
    7df4:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7df8:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    7dfc:	b357      	cbz	r7, 7e54 <hci_num_completed_packets+0xcc>
	__asm__ volatile(
    7dfe:	f04f 0320 	mov.w	r3, #32
    7e02:	f3ef 8211 	mrs	r2, BASEPRI
    7e06:	f383 8811 	msr	BASEPRI, r3
    7e0a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    7e0e:	69e3      	ldr	r3, [r4, #28]
    7e10:	b16b      	cbz	r3, 7e2e <hci_num_completed_packets+0xa6>
				conn->pending_no_cb--;
    7e12:	3b01      	subs	r3, #1
    7e14:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7e16:	f382 8811 	msr	BASEPRI, r2
    7e1a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    7e1e:	4620      	mov	r0, r4
    7e20:	f002 f9ea 	bl	a1f8 <bt_conn_get_pkts>
    7e24:	3f01      	subs	r7, #1
    7e26:	f017 fb5b 	bl	1f4e0 <z_impl_k_sem_give>
    7e2a:	b2bf      	uxth	r7, r7
    7e2c:	e7e6      	b.n	7dfc <hci_num_completed_packets+0x74>
	return list->head;
    7e2e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    7e30:	b12b      	cbz	r3, 7e3e <hci_num_completed_packets+0xb6>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7e32:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    7e34:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    7e36:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7e38:	428b      	cmp	r3, r1
	list->tail = node;
    7e3a:	bf08      	it	eq
    7e3c:	61a0      	streq	r0, [r4, #24]
    7e3e:	f382 8811 	msr	BASEPRI, r2
    7e42:	f3bf 8f6f 	isb	sy
			if (!node) {
    7e46:	b94b      	cbnz	r3, 7e5c <hci_num_completed_packets+0xd4>
				BT_ERR("packets count mismatch");
    7e48:	01a9      	lsls	r1, r5, #6
    7e4a:	481b      	ldr	r0, [pc, #108]	; (7eb8 <hci_num_completed_packets+0x130>)
    7e4c:	f041 0101 	orr.w	r1, r1, #1
    7e50:	f019 f91e 	bl	21090 <log_0>
		bt_conn_unref(conn);
    7e54:	4620      	mov	r0, r4
    7e56:	f01b faab 	bl	233b0 <bt_conn_unref>
    7e5a:	e7c7      	b.n	7dec <hci_num_completed_packets+0x64>
	__asm__ volatile(
    7e5c:	f04f 0220 	mov.w	r2, #32
    7e60:	f3ef 8111 	mrs	r1, BASEPRI
    7e64:	f382 8811 	msr	BASEPRI, r2
    7e68:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    7e6c:	68da      	ldr	r2, [r3, #12]
    7e6e:	61e2      	str	r2, [r4, #28]
	return list->tail;
    7e70:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    7e72:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    7e76:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    7e7a:	b98a      	cbnz	r2, 7ea0 <hci_num_completed_packets+0x118>
	list->head = node;
    7e7c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    7e80:	f381 8811 	msr	BASEPRI, r1
    7e84:	f3bf 8f6f 	isb	sy
    7e88:	2100      	movs	r1, #0
    7e8a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    7e8e:	f01a ff40 	bl	22d12 <atomic_test_and_set_bit>
    7e92:	2800      	cmp	r0, #0
    7e94:	d1c3      	bne.n	7e1e <hci_num_completed_packets+0x96>
		k_queue_append(&work_q->queue, work);
    7e96:	4659      	mov	r1, fp
    7e98:	4650      	mov	r0, sl
    7e9a:	f01d fe14 	bl	25ac6 <k_queue_append>
    7e9e:	e7be      	b.n	7e1e <hci_num_completed_packets+0x96>
	parent->next = child;
    7ea0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7ea2:	6263      	str	r3, [r4, #36]	; 0x24
}
    7ea4:	e7ec      	b.n	7e80 <hci_num_completed_packets+0xf8>
    7ea6:	bf00      	nop
    7ea8:	00026828 	.word	0x00026828
    7eac:	00026918 	.word	0x00026918
    7eb0:	20001940 	.word	0x20001940
    7eb4:	000292dc 	.word	0x000292dc
    7eb8:	000292f8 	.word	0x000292f8

00007ebc <bt_hci_cmd_create>:
{
    7ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    7ec8:	4606      	mov	r6, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7eca:	4817      	ldr	r0, [pc, #92]	; (7f28 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    7ecc:	4d17      	ldr	r5, [pc, #92]	; (7f2c <bt_hci_cmd_create+0x70>)
{
    7ece:	460f      	mov	r7, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7ed0:	f01d fa7f 	bl	253d2 <net_buf_alloc_fixed>
    7ed4:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    7ed6:	f100 0a08 	add.w	sl, r0, #8
    7eda:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
    7edc:	f04f 0800 	mov.w	r8, #0
    7ee0:	4650      	mov	r0, sl
    7ee2:	f01d fa9b 	bl	2541c <net_buf_simple_reserve>
    7ee6:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    7eea:	4620      	mov	r0, r4
    7eec:	f015 fce0 	bl	1d8b0 <net_buf_id>
    7ef0:	f04f 090c 	mov.w	r9, #12
    7ef4:	fb09 5000 	mla	r0, r9, r0, r5
    7ef8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    7efa:	4620      	mov	r0, r4
    7efc:	f015 fcd8 	bl	1d8b0 <net_buf_id>
    7f00:	fb09 5000 	mla	r0, r9, r0, r5
    7f04:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    7f08:	4620      	mov	r0, r4
    7f0a:	f015 fcd1 	bl	1d8b0 <net_buf_id>
    7f0e:	fb09 5500 	mla	r5, r9, r0, r5
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f12:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    7f14:	f8c5 8004 	str.w	r8, [r5, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f18:	4650      	mov	r0, sl
    7f1a:	f01d fab6 	bl	2548a <net_buf_simple_add>
	hdr->param_len = param_len;
    7f1e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    7f20:	8006      	strh	r6, [r0, #0]
}
    7f22:	4620      	mov	r0, r4
    7f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f28:	20001070 	.word	0x20001070
    7f2c:	20001bb4 	.word	0x20001bb4

00007f30 <bt_hci_cmd_send>:
{
    7f30:	b538      	push	{r3, r4, r5, lr}
    7f32:	4605      	mov	r5, r0
	if (!buf) {
    7f34:	460c      	mov	r4, r1
    7f36:	b919      	cbnz	r1, 7f40 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    7f38:	f7ff ffc0 	bl	7ebc <bt_hci_cmd_create>
		if (!buf) {
    7f3c:	4604      	mov	r4, r0
    7f3e:	b1f0      	cbz	r0, 7f7e <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    7f40:	f640 4335 	movw	r3, #3125	; 0xc35
    7f44:	429d      	cmp	r5, r3
    7f46:	d114      	bne.n	7f72 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    7f48:	4620      	mov	r0, r4
    7f4a:	f7ff f9e9 	bl	7320 <bt_hci_ecc_send>
		if (err) {
    7f4e:	4605      	mov	r5, r0
    7f50:	b168      	cbz	r0, 7f6e <bt_hci_cmd_send+0x3e>
    7f52:	4b0c      	ldr	r3, [pc, #48]	; (7f84 <bt_hci_cmd_send+0x54>)
    7f54:	4a0c      	ldr	r2, [pc, #48]	; (7f88 <bt_hci_cmd_send+0x58>)
    7f56:	1ad2      	subs	r2, r2, r3
    7f58:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    7f5a:	0192      	lsls	r2, r2, #6
    7f5c:	4601      	mov	r1, r0
    7f5e:	f042 0201 	orr.w	r2, r2, #1
    7f62:	480a      	ldr	r0, [pc, #40]	; (7f8c <bt_hci_cmd_send+0x5c>)
    7f64:	f019 f8a1 	bl	210aa <log_1>
			net_buf_unref(buf);
    7f68:	4620      	mov	r0, r4
    7f6a:	f015 fd57 	bl	1da1c <net_buf_unref>
}
    7f6e:	4628      	mov	r0, r5
    7f70:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7f72:	4807      	ldr	r0, [pc, #28]	; (7f90 <bt_hci_cmd_send+0x60>)
    7f74:	4621      	mov	r1, r4
    7f76:	f01d fa55 	bl	25424 <net_buf_put>
	return 0;
    7f7a:	2500      	movs	r5, #0
    7f7c:	e7f7      	b.n	7f6e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    7f7e:	f06f 0568 	mvn.w	r5, #104	; 0x68
    7f82:	e7f4      	b.n	7f6e <bt_hci_cmd_send+0x3e>
    7f84:	00026828 	.word	0x00026828
    7f88:	00026918 	.word	0x00026918
    7f8c:	00029299 	.word	0x00029299
    7f90:	2000010c 	.word	0x2000010c

00007f94 <le_ltk_request>:
{
    7f94:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    7f96:	6886      	ldr	r6, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7f98:	8837      	ldrh	r7, [r6, #0]
    7f9a:	b2bd      	uxth	r5, r7
{
    7f9c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    7f9e:	4628      	mov	r0, r5
    7fa0:	f002 fb3a 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    7fa4:	4604      	mov	r4, r0
    7fa6:	b968      	cbnz	r0, 7fc4 <le_ltk_request+0x30>
    7fa8:	4b2b      	ldr	r3, [pc, #172]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
    7faa:	4a2c      	ldr	r2, [pc, #176]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7fac:	482c      	ldr	r0, [pc, #176]	; (8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>)
    7fae:	1ad2      	subs	r2, r2, r3
    7fb0:	08d2      	lsrs	r2, r2, #3
    7fb2:	0192      	lsls	r2, r2, #6
    7fb4:	f042 0201 	orr.w	r2, r2, #1
    7fb8:	4629      	mov	r1, r5
}
    7fba:	b007      	add	sp, #28
    7fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7fc0:	f019 b873 	b.w	210aa <log_1>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    7fc4:	ad02      	add	r5, sp, #8
    7fc6:	f8d6 2002 	ldr.w	r2, [r6, #2]
    7fca:	f8d6 3006 	ldr.w	r3, [r6, #6]
    7fce:	9501      	str	r5, [sp, #4]
    7fd0:	8971      	ldrh	r1, [r6, #10]
    7fd2:	9100      	str	r1, [sp, #0]
    7fd4:	f01d f889 	bl	250ea <bt_smp_request_ltk>
    7fd8:	b368      	cbz	r0, 8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    7fda:	2112      	movs	r1, #18
    7fdc:	f242 001a 	movw	r0, #8218	; 0x201a
    7fe0:	f7ff ff6c 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    7fe4:	4606      	mov	r6, r0
    7fe6:	b970      	cbnz	r0, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7fe8:	491c      	ldr	r1, [pc, #112]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
    7fea:	4b1b      	ldr	r3, [pc, #108]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
		BT_ERR("Out of command buffers");
    7fec:	481d      	ldr	r0, [pc, #116]	; (8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>)
    7fee:	1ac9      	subs	r1, r1, r3
    7ff0:	08c9      	lsrs	r1, r1, #3
    7ff2:	0189      	lsls	r1, r1, #6
    7ff4:	f041 0101 	orr.w	r1, r1, #1
    7ff8:	f019 f84a 	bl	21090 <log_0>
	bt_conn_unref(conn);
    7ffc:	4620      	mov	r0, r4
    7ffe:	f01b f9d7 	bl	233b0 <bt_conn_unref>
}
    8002:	b007      	add	sp, #28
    8004:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cp = net_buf_add(buf, sizeof(*cp));
    8006:	2112      	movs	r1, #18
    8008:	3008      	adds	r0, #8
    800a:	f01d fa3e 	bl	2548a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    800e:	4603      	mov	r3, r0
    8010:	462a      	mov	r2, r5
    8012:	f823 7b02 	strh.w	r7, [r3], #2
    8016:	af06      	add	r7, sp, #24
    8018:	4615      	mov	r5, r2
    801a:	cd03      	ldmia	r5!, {r0, r1}
    801c:	42bd      	cmp	r5, r7
    801e:	6018      	str	r0, [r3, #0]
    8020:	6059      	str	r1, [r3, #4]
    8022:	462a      	mov	r2, r5
    8024:	f103 0308 	add.w	r3, r3, #8
    8028:	d1f6      	bne.n	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    802a:	4631      	mov	r1, r6
    802c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8030:	f7ff ff7e 	bl	7f30 <bt_hci_cmd_send>
    8034:	e7e2      	b.n	7ffc <le_ltk_request+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    8036:	2102      	movs	r1, #2
    8038:	f242 001b 	movw	r0, #8219	; 0x201b
    803c:	f7ff ff3e 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    8040:	4605      	mov	r5, r0
    8042:	2800      	cmp	r0, #0
    8044:	d0d0      	beq.n	7fe8 <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
    8046:	2102      	movs	r1, #2
    8048:	3008      	adds	r0, #8
    804a:	f01d fa1e 	bl	2548a <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    804e:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    8050:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8052:	f242 001b 	movw	r0, #8219	; 0x201b
    8056:	e7eb      	b.n	8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
    8058:	00026828 	.word	0x00026828
    805c:	00026918 	.word	0x00026918
    8060:	000290cb 	.word	0x000290cb
    8064:	0002930f 	.word	0x0002930f

00008068 <le_conn_param_neg_reply>:
{
    8068:	b570      	push	{r4, r5, r6, lr}
    806a:	4606      	mov	r6, r0
    806c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    806e:	f242 0021 	movw	r0, #8225	; 0x2021
    8072:	2103      	movs	r1, #3
    8074:	f7ff ff22 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    8078:	4604      	mov	r4, r0
    807a:	b958      	cbnz	r0, 8094 <le_conn_param_neg_reply+0x2c>
    807c:	490c      	ldr	r1, [pc, #48]	; (80b0 <le_conn_param_neg_reply+0x48>)
    807e:	4b0d      	ldr	r3, [pc, #52]	; (80b4 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    8080:	480d      	ldr	r0, [pc, #52]	; (80b8 <le_conn_param_neg_reply+0x50>)
    8082:	1ac9      	subs	r1, r1, r3
    8084:	08c9      	lsrs	r1, r1, #3
    8086:	0189      	lsls	r1, r1, #6
}
    8088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    808c:	f041 0101 	orr.w	r1, r1, #1
    8090:	f018 bffe 	b.w	21090 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    8094:	2103      	movs	r1, #3
    8096:	3008      	adds	r0, #8
    8098:	f01d f9f7 	bl	2548a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    809c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    809e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    80a0:	4621      	mov	r1, r4
    80a2:	f242 0021 	movw	r0, #8225	; 0x2021
}
    80a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    80aa:	f7ff bf41 	b.w	7f30 <bt_hci_cmd_send>
    80ae:	bf00      	nop
    80b0:	00026918 	.word	0x00026918
    80b4:	00026828 	.word	0x00026828
    80b8:	00029326 	.word	0x00029326

000080bc <le_conn_param_req>:
{
    80bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    80be:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    80c0:	78d9      	ldrb	r1, [r3, #3]
    80c2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    80c4:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    80c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    80ca:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    80ce:	7959      	ldrb	r1, [r3, #5]
    80d0:	791a      	ldrb	r2, [r3, #4]
    80d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    80d6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    80da:	799a      	ldrb	r2, [r3, #6]
    80dc:	79d9      	ldrb	r1, [r3, #7]
    80de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    80e2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    80e6:	7a1a      	ldrb	r2, [r3, #8]
    80e8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    80ea:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    80ec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    80f0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    80f2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    80f6:	f002 fa8f 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    80fa:	4606      	mov	r6, r0
    80fc:	b980      	cbnz	r0, 8120 <le_conn_param_req+0x64>
    80fe:	4b20      	ldr	r3, [pc, #128]	; (8180 <le_conn_param_req+0xc4>)
    8100:	4a20      	ldr	r2, [pc, #128]	; (8184 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8102:	4821      	ldr	r0, [pc, #132]	; (8188 <le_conn_param_req+0xcc>)
    8104:	1ad2      	subs	r2, r2, r3
    8106:	08d2      	lsrs	r2, r2, #3
    8108:	0192      	lsls	r2, r2, #6
    810a:	4621      	mov	r1, r4
    810c:	f042 0201 	orr.w	r2, r2, #1
    8110:	f018 ffcb 	bl	210aa <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    8114:	2102      	movs	r1, #2
    8116:	4620      	mov	r0, r4
    8118:	f7ff ffa6 	bl	8068 <le_conn_param_neg_reply>
}
    811c:	b003      	add	sp, #12
    811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    8120:	4669      	mov	r1, sp
    8122:	f002 f89b 	bl	a25c <le_param_req>
    8126:	b938      	cbnz	r0, 8138 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    8128:	211e      	movs	r1, #30
    812a:	4620      	mov	r0, r4
    812c:	f7ff ff9c 	bl	8068 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    8130:	4630      	mov	r0, r6
    8132:	f01b f93d 	bl	233b0 <bt_conn_unref>
    8136:	e7f1      	b.n	811c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    8138:	210e      	movs	r1, #14
    813a:	f242 0020 	movw	r0, #8224	; 0x2020
    813e:	f7ff febd 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    8142:	4605      	mov	r5, r0
    8144:	2800      	cmp	r0, #0
    8146:	d0f3      	beq.n	8130 <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    8148:	210e      	movs	r1, #14
    814a:	3008      	adds	r0, #8
    814c:	f01d f99d 	bl	2548a <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    8150:	220e      	movs	r2, #14
    8152:	4604      	mov	r4, r0
    8154:	2100      	movs	r1, #0
    8156:	f01e f8ac 	bl	262b2 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    815a:	f8bd 3000 	ldrh.w	r3, [sp]
    815e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8160:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8164:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8166:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    816a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    816c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8170:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8172:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8174:	4629      	mov	r1, r5
    8176:	f242 0020 	movw	r0, #8224	; 0x2020
    817a:	f7ff fed9 	bl	7f30 <bt_hci_cmd_send>
    817e:	e7d7      	b.n	8130 <le_conn_param_req+0x74>
    8180:	00026828 	.word	0x00026828
    8184:	00026918 	.word	0x00026918
    8188:	000290cb 	.word	0x000290cb

0000818c <bt_hci_cmd_send_sync>:
{
    818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8190:	4607      	mov	r7, r0
    8192:	b086      	sub	sp, #24
    8194:	4615      	mov	r5, r2
	if (!buf) {
    8196:	460c      	mov	r4, r1
    8198:	b921      	cbnz	r1, 81a4 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    819a:	f7ff fe8f 	bl	7ebc <bt_hci_cmd_create>
		if (!buf) {
    819e:	4604      	mov	r4, r0
    81a0:	2800      	cmp	r0, #0
    81a2:	d057      	beq.n	8254 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    81a4:	2201      	movs	r2, #1
    81a6:	2100      	movs	r1, #0
    81a8:	4668      	mov	r0, sp
    81aa:	f01d fded 	bl	25d88 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    81ae:	4620      	mov	r0, r4
    81b0:	f015 fb7e 	bl	1d8b0 <net_buf_id>
    81b4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 825c <bt_hci_cmd_send_sync+0xd0>
    81b8:	230c      	movs	r3, #12
    81ba:	fb03 8000 	mla	r0, r3, r0, r8
    81be:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    81c2:	4620      	mov	r0, r4
    81c4:	f01d f93b 	bl	2543e <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    81c8:	4825      	ldr	r0, [pc, #148]	; (8260 <bt_hci_cmd_send_sync+0xd4>)
    81ca:	4621      	mov	r1, r4
    81cc:	f01d f92a 	bl	25424 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    81d0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    81d4:	2300      	movs	r3, #0
    81d6:	4668      	mov	r0, sp
    81d8:	f017 f9a8 	bl	1f52c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    81dc:	4606      	mov	r6, r0
    81de:	b180      	cbz	r0, 8202 <bt_hci_cmd_send_sync+0x76>
    81e0:	4a20      	ldr	r2, [pc, #128]	; (8264 <bt_hci_cmd_send_sync+0xd8>)
    81e2:	4921      	ldr	r1, [pc, #132]	; (8268 <bt_hci_cmd_send_sync+0xdc>)
    81e4:	4821      	ldr	r0, [pc, #132]	; (826c <bt_hci_cmd_send_sync+0xe0>)
    81e6:	f240 1377 	movw	r3, #375	; 0x177
    81ea:	f018 fbf8 	bl	209de <printk>
    81ee:	4820      	ldr	r0, [pc, #128]	; (8270 <bt_hci_cmd_send_sync+0xe4>)
    81f0:	4631      	mov	r1, r6
    81f2:	f018 fbf4 	bl	209de <printk>
    81f6:	4040      	eors	r0, r0
    81f8:	f380 8811 	msr	BASEPRI, r0
    81fc:	f04f 0003 	mov.w	r0, #3
    8200:	df02      	svc	2
	status = cmd(buf)->status;
    8202:	4620      	mov	r0, r4
    8204:	f015 fb54 	bl	1d8b0 <net_buf_id>
    8208:	230c      	movs	r3, #12
    820a:	4358      	muls	r0, r3
    820c:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    8210:	b1be      	cbz	r6, 8242 <bt_hci_cmd_send_sync+0xb6>
    8212:	4a18      	ldr	r2, [pc, #96]	; (8274 <bt_hci_cmd_send_sync+0xe8>)
    8214:	4b18      	ldr	r3, [pc, #96]	; (8278 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    8216:	4819      	ldr	r0, [pc, #100]	; (827c <bt_hci_cmd_send_sync+0xf0>)
    8218:	1a9b      	subs	r3, r3, r2
    821a:	08db      	lsrs	r3, r3, #3
    821c:	019b      	lsls	r3, r3, #6
    821e:	f043 0302 	orr.w	r3, r3, #2
    8222:	4632      	mov	r2, r6
    8224:	4639      	mov	r1, r7
    8226:	f018 ff54 	bl	210d2 <log_2>
		net_buf_unref(buf);
    822a:	4620      	mov	r0, r4
    822c:	f015 fbf6 	bl	1da1c <net_buf_unref>
			return -EIO;
    8230:	2e09      	cmp	r6, #9
    8232:	bf0c      	ite	eq
    8234:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    8238:	f06f 0004 	mvnne.w	r0, #4
}
    823c:	b006      	add	sp, #24
    823e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    8242:	b115      	cbz	r5, 824a <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    8244:	602c      	str	r4, [r5, #0]
	return 0;
    8246:	4630      	mov	r0, r6
    8248:	e7f8      	b.n	823c <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    824a:	4620      	mov	r0, r4
    824c:	f015 fbe6 	bl	1da1c <net_buf_unref>
	return 0;
    8250:	4628      	mov	r0, r5
    8252:	e7f3      	b.n	823c <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    8254:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8258:	e7f0      	b.n	823c <bt_hci_cmd_send_sync+0xb0>
    825a:	bf00      	nop
    825c:	20001bb4 	.word	0x20001bb4
    8260:	2000010c 	.word	0x2000010c
    8264:	00029224 	.word	0x00029224
    8268:	00029258 	.word	0x00029258
    826c:	00029261 	.word	0x00029261
    8270:	00029340 	.word	0x00029340
    8274:	00026828 	.word	0x00026828
    8278:	00026918 	.word	0x00026918
    827c:	00029360 	.word	0x00029360

00008280 <hci_le_read_max_data_len>:
{
    8280:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8282:	4606      	mov	r6, r0
    8284:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    8286:	aa01      	add	r2, sp, #4
    8288:	2100      	movs	r1, #0
    828a:	f242 002f 	movw	r0, #8239	; 0x202f
    828e:	f7ff ff7d 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    8292:	4604      	mov	r4, r0
    8294:	b160      	cbz	r0, 82b0 <hci_le_read_max_data_len+0x30>
    8296:	490c      	ldr	r1, [pc, #48]	; (82c8 <hci_le_read_max_data_len+0x48>)
    8298:	4b0c      	ldr	r3, [pc, #48]	; (82cc <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    829a:	480d      	ldr	r0, [pc, #52]	; (82d0 <hci_le_read_max_data_len+0x50>)
    829c:	1ac9      	subs	r1, r1, r3
    829e:	08c9      	lsrs	r1, r1, #3
    82a0:	0189      	lsls	r1, r1, #6
    82a2:	f041 0101 	orr.w	r1, r1, #1
    82a6:	f018 fef3 	bl	21090 <log_0>
}
    82aa:	4620      	mov	r0, r4
    82ac:	b002      	add	sp, #8
    82ae:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    82b0:	9801      	ldr	r0, [sp, #4]
    82b2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    82b4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    82b8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    82ba:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    82be:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    82c0:	f015 fbac 	bl	1da1c <net_buf_unref>
	return 0;
    82c4:	e7f1      	b.n	82aa <hci_le_read_max_data_len+0x2a>
    82c6:	bf00      	nop
    82c8:	00026918 	.word	0x00026918
    82cc:	00026828 	.word	0x00026828
    82d0:	0002937c 	.word	0x0002937c

000082d4 <set_random_address>:
{
    82d4:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    82d6:	4e15      	ldr	r6, [pc, #84]	; (832c <set_random_address+0x58>)
    82d8:	2206      	movs	r2, #6
    82da:	f106 0131 	add.w	r1, r6, #49	; 0x31
    82de:	4605      	mov	r5, r0
    82e0:	f01d ffc9 	bl	26276 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    82e4:	4602      	mov	r2, r0
    82e6:	b1d8      	cbz	r0, 8320 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    82e8:	2106      	movs	r1, #6
    82ea:	f242 0005 	movw	r0, #8197	; 0x2005
    82ee:	f7ff fde5 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    82f2:	4604      	mov	r4, r0
    82f4:	b1b0      	cbz	r0, 8324 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    82f6:	2206      	movs	r2, #6
    82f8:	4629      	mov	r1, r5
    82fa:	3008      	adds	r0, #8
    82fc:	f01d f8cb 	bl	25496 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    8300:	2200      	movs	r2, #0
    8302:	4621      	mov	r1, r4
    8304:	f242 0005 	movw	r0, #8197	; 0x2005
    8308:	f7ff ff40 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    830c:	4602      	mov	r2, r0
    830e:	b938      	cbnz	r0, 8320 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    8310:	4629      	mov	r1, r5
    8312:	f106 0031 	add.w	r0, r6, #49	; 0x31
    8316:	f01a fd07 	bl	22d28 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    831a:	2301      	movs	r3, #1
    831c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    8320:	4610      	mov	r0, r2
    8322:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8324:	f06f 0268 	mvn.w	r2, #104	; 0x68
    8328:	e7fa      	b.n	8320 <set_random_address+0x4c>
    832a:	bf00      	nop
    832c:	20000000 	.word	0x20000000

00008330 <set_le_adv_enable_legacy>:
{
    8330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8332:	4606      	mov	r6, r0
    8334:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    8336:	f242 000a 	movw	r0, #8202	; 0x200a
    833a:	2101      	movs	r1, #1
    833c:	f7ff fdbe 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    8340:	4604      	mov	r4, r0
    8342:	b1e8      	cbz	r0, 8380 <set_le_adv_enable_legacy+0x50>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    8344:	3008      	adds	r0, #8
	if (enable) {
    8346:	b1cd      	cbz	r5, 837c <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    8348:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    834a:	f01d f8ad 	bl	254a8 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    834e:	3614      	adds	r6, #20
	state->bit = bit;
    8350:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    8352:	4620      	mov	r0, r4
	state->bit = bit;
    8354:	9302      	str	r3, [sp, #8]
	state->target = target;
    8356:	9601      	str	r6, [sp, #4]
	state->val = val;
    8358:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    835c:	f015 faa8 	bl	1d8b0 <net_buf_id>
    8360:	4b09      	ldr	r3, [pc, #36]	; (8388 <set_le_adv_enable_legacy+0x58>)
    8362:	220c      	movs	r2, #12
    8364:	fb02 3300 	mla	r3, r2, r0, r3
    8368:	aa01      	add	r2, sp, #4
    836a:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    836c:	4621      	mov	r1, r4
    836e:	2200      	movs	r2, #0
    8370:	f242 000a 	movw	r0, #8202	; 0x200a
    8374:	f7ff ff0a 	bl	818c <bt_hci_cmd_send_sync>
}
    8378:	b004      	add	sp, #16
    837a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    837c:	4629      	mov	r1, r5
    837e:	e7e4      	b.n	834a <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    8380:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8384:	e7f8      	b.n	8378 <set_le_adv_enable_legacy+0x48>
    8386:	bf00      	nop
    8388:	20001bb4 	.word	0x20001bb4

0000838c <set_le_scan_enable_legacy>:
{
    838c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    838e:	2102      	movs	r1, #2
{
    8390:	b085      	sub	sp, #20
    8392:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8394:	f242 000c 	movw	r0, #8204	; 0x200c
    8398:	f7ff fd90 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    839c:	4605      	mov	r5, r0
    839e:	b348      	cbz	r0, 83f4 <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    83a0:	2102      	movs	r1, #2
    83a2:	3008      	adds	r0, #8
    83a4:	f01d f871 	bl	2548a <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    83a8:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    83aa:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    83ac:	d11f      	bne.n	83ee <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    83ae:	4813      	ldr	r0, [pc, #76]	; (83fc <set_le_scan_enable_legacy+0x70>)
    83b0:	f01a fc70 	bl	22c94 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    83b4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    83b8:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    83ba:	701c      	strb	r4, [r3, #0]
	state->target = target;
    83bc:	4b0f      	ldr	r3, [pc, #60]	; (83fc <set_le_scan_enable_legacy+0x70>)
    83be:	9301      	str	r3, [sp, #4]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    83c0:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    83c4:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    83c6:	4628      	mov	r0, r5
	state->bit = bit;
    83c8:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    83ca:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    83ce:	f015 fa6f 	bl	1d8b0 <net_buf_id>
    83d2:	4b0b      	ldr	r3, [pc, #44]	; (8400 <set_le_scan_enable_legacy+0x74>)
    83d4:	220c      	movs	r2, #12
    83d6:	fb02 3300 	mla	r3, r2, r0, r3
    83da:	aa01      	add	r2, sp, #4
    83dc:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    83de:	4629      	mov	r1, r5
    83e0:	2200      	movs	r2, #0
    83e2:	f242 000c 	movw	r0, #8204	; 0x200c
    83e6:	f7ff fed1 	bl	818c <bt_hci_cmd_send_sync>
}
    83ea:	b005      	add	sp, #20
    83ec:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    83ee:	2200      	movs	r2, #0
    83f0:	7042      	strb	r2, [r0, #1]
    83f2:	e7e2      	b.n	83ba <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    83f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    83f8:	e7f7      	b.n	83ea <set_le_scan_enable_legacy+0x5e>
    83fa:	bf00      	nop
    83fc:	20000098 	.word	0x20000098
    8400:	20001bb4 	.word	0x20001bb4

00008404 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8404:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    8408:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    840a:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    840e:	460e      	mov	r6, r1
    8410:	4691      	mov	r9, r2
    8412:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8414:	d02c      	beq.n	8470 <le_adv_set_random_addr.isra.0+0x6c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8416:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 84f4 <le_adv_set_random_addr.isra.0+0xf0>
    841a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    841e:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    8422:	f818 3003 	ldrb.w	r3, [r8, r3]
    8426:	2b01      	cmp	r3, #1
    8428:	d009      	beq.n	843e <le_adv_set_random_addr.isra.0+0x3a>
			*own_addr_type = id_addr->type;
    842a:	ebaa 0505 	sub.w	r5, sl, r5
    842e:	f818 3005 	ldrb.w	r3, [r8, r5]
    8432:	703b      	strb	r3, [r7, #0]
		if (dir_adv) {
    8434:	f1b9 0f00 	cmp.w	r9, #0
    8438:	d10e      	bne.n	8458 <le_adv_set_random_addr.isra.0+0x54>
	return 0;
    843a:	2400      	movs	r4, #0
    843c:	e008      	b.n	8450 <le_adv_set_random_addr.isra.0+0x4c>
				err = set_adv_random_address(adv, &id_addr->a);
    843e:	2007      	movs	r0, #7
    8440:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    8444:	4440      	add	r0, r8
    8446:	f7ff ff45 	bl	82d4 <set_random_address>
				if (err) {
    844a:	4604      	mov	r4, r0
    844c:	2800      	cmp	r0, #0
    844e:	d0ec      	beq.n	842a <le_adv_set_random_addr.isra.0+0x26>
}
    8450:	4620      	mov	r0, r4
    8452:	b002      	add	sp, #8
    8454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    8458:	f898 50a0 	ldrb.w	r5, [r8, #160]	; 0xa0
    845c:	f015 0040 	ands.w	r0, r5, #64	; 0x40
    8460:	d046      	beq.n	84f0 <le_adv_set_random_addr.isra.0+0xec>
			    BT_FEAT_LE_PRIVACY(bt_dev.le.features) &&
    8462:	f016 0020 	ands.w	r0, r6, #32
    8466:	d043      	beq.n	84f0 <le_adv_set_random_addr.isra.0+0xec>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    8468:	f043 0302 	orr.w	r3, r3, #2
    846c:	703b      	strb	r3, [r7, #0]
    846e:	e7e4      	b.n	843a <le_adv_set_random_addr.isra.0+0x36>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    8470:	f011 0604 	ands.w	r6, r1, #4
    8474:	d014      	beq.n	84a0 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8476:	f8df 807c 	ldr.w	r8, [pc, #124]	; 84f4 <le_adv_set_random_addr.isra.0+0xf0>
    847a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    847e:	00ee      	lsls	r6, r5, #3
    8480:	f818 3003 	ldrb.w	r3, [r8, r3]
    8484:	2b01      	cmp	r3, #1
    8486:	d105      	bne.n	8494 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    8488:	2007      	movs	r0, #7
    848a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    848e:	4440      	add	r0, r8
    8490:	f7ff ff20 	bl	82d4 <set_random_address>
			*own_addr_type = id_addr->type;
    8494:	1b75      	subs	r5, r6, r5
	int err = 0;
    8496:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    8498:	f818 3005 	ldrb.w	r3, [r8, r5]
    849c:	703b      	strb	r3, [r7, #0]
    849e:	e7d7      	b.n	8450 <le_adv_set_random_addr.isra.0+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    84a0:	4815      	ldr	r0, [pc, #84]	; (84f8 <le_adv_set_random_addr.isra.0+0xf4>)
    84a2:	f01a fbf7 	bl	22c94 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    84a6:	0682      	lsls	r2, r0, #26
    84a8:	d417      	bmi.n	84da <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    84aa:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    84ac:	2106      	movs	r1, #6
    84ae:	4668      	mov	r0, sp
    84b0:	f00a faee 	bl	12a90 <bt_rand>
	if (err) {
    84b4:	4604      	mov	r4, r0
    84b6:	b948      	cbnz	r0, 84cc <le_adv_set_random_addr.isra.0+0xc8>
	nrpa.val[5] &= 0x3f;
    84b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    84bc:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    84be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    84c2:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    84c6:	f7ff ff05 	bl	82d4 <set_random_address>
    84ca:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    84cc:	2001      	movs	r0, #1
    84ce:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    84d0:	2d00      	cmp	r5, #0
    84d2:	d0bd      	beq.n	8450 <le_adv_set_random_addr.isra.0+0x4c>
				set_le_scan_enable(true);
    84d4:	f01a fca9 	bl	22e2a <set_le_scan_enable.isra.0>
		if (err) {
    84d8:	e7ba      	b.n	8450 <le_adv_set_random_addr.isra.0+0x4c>
    84da:	4807      	ldr	r0, [pc, #28]	; (84f8 <le_adv_set_random_addr.isra.0+0xf4>)
    84dc:	f01a fbda 	bl	22c94 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    84e0:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    84e2:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    84e6:	d5e0      	bpl.n	84aa <le_adv_set_random_addr.isra.0+0xa6>
				set_le_scan_enable(false);
    84e8:	4630      	mov	r0, r6
    84ea:	f01a fc9e 	bl	22e2a <set_le_scan_enable.isra.0>
    84ee:	e7dd      	b.n	84ac <le_adv_set_random_addr.isra.0+0xa8>
	return 0;
    84f0:	4604      	mov	r4, r0
    84f2:	e7ad      	b.n	8450 <le_adv_set_random_addr.isra.0+0x4c>
    84f4:	20000000 	.word	0x20000000
    84f8:	20000098 	.word	0x20000098

000084fc <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    84fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8500:	b086      	sub	sp, #24
    8502:	4604      	mov	r4, r0
    8504:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    8508:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    850c:	460f      	mov	r7, r1
    850e:	4615      	mov	r5, r2
	struct bt_ad d[2] = {};
    8510:	2100      	movs	r1, #0
    8512:	2210      	movs	r2, #16
    8514:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    8516:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    8518:	f01d fecb 	bl	262b2 <memset>
	if (use_name) {
    851c:	f1b8 0f00 	cmp.w	r8, #0
    8520:	d00e      	beq.n	8540 <le_adv_update.constprop.0+0x44>
		if ((ad && ad_has_name(ad, ad_len)) ||
    8522:	bbac      	cbnz	r4, 8590 <le_adv_update.constprop.0+0x94>
    8524:	2d00      	cmp	r5, #0
    8526:	d13e      	bne.n	85a6 <le_adv_update.constprop.0+0xaa>
		data = (struct bt_data)BT_DATA(
    8528:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 85dc <le_adv_update.constprop.0+0xe0>
    852c:	4650      	mov	r0, sl
    852e:	f7f8 fa97 	bl	a60 <strlen>
    8532:	2309      	movs	r3, #9
    8534:	f88d 3000 	strb.w	r3, [sp]
    8538:	f88d 0001 	strb.w	r0, [sp, #1]
    853c:	f8cd a004 	str.w	sl, [sp, #4]
		d[0].len = ad_len;
    8540:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    8544:	f1b8 0f00 	cmp.w	r8, #0
    8548:	d02f      	beq.n	85aa <le_adv_update.constprop.0+0xae>
    854a:	f1b9 0f00 	cmp.w	r9, #0
    854e:	d12c      	bne.n	85aa <le_adv_update.constprop.0+0xae>
			d[1].len = 1;
    8550:	2301      	movs	r3, #1
			d[1].data = &data;
    8552:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    8556:	9305      	str	r3, [sp, #20]
			d_len = 2;
    8558:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    855a:	a902      	add	r1, sp, #8
    855c:	f242 0008 	movw	r0, #8200	; 0x2008
    8560:	f01a fc65 	bl	22e2e <hci_set_ad>
		if (err) {
    8564:	4604      	mov	r4, r0
    8566:	b930      	cbnz	r0, 8576 <le_adv_update.constprop.0+0x7a>
	if (scannable) {
    8568:	f1b9 0f00 	cmp.w	r9, #0
    856c:	d11f      	bne.n	85ae <le_adv_update.constprop.0+0xb2>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    856e:	481c      	ldr	r0, [pc, #112]	; (85e0 <le_adv_update.constprop.0+0xe4>)
    8570:	2104      	movs	r1, #4
    8572:	f01a fbae 	bl	22cd2 <atomic_or>
}
    8576:	4620      	mov	r0, r4
    8578:	b006      	add	sp, #24
    857a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    857e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    8582:	3a08      	subs	r2, #8
    8584:	2a01      	cmp	r2, #1
    8586:	d925      	bls.n	85d4 <le_adv_update.constprop.0+0xd8>
	for (i = 0; i < ad_len; i++) {
    8588:	3301      	adds	r3, #1
    858a:	429f      	cmp	r7, r3
    858c:	d1f7      	bne.n	857e <le_adv_update.constprop.0+0x82>
    858e:	e7c9      	b.n	8524 <le_adv_update.constprop.0+0x28>
    8590:	2300      	movs	r3, #0
    8592:	e7fa      	b.n	858a <le_adv_update.constprop.0+0x8e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    8594:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    8598:	3a08      	subs	r2, #8
    859a:	2a01      	cmp	r2, #1
    859c:	d91a      	bls.n	85d4 <le_adv_update.constprop.0+0xd8>
	for (i = 0; i < ad_len; i++) {
    859e:	3301      	adds	r3, #1
    85a0:	429e      	cmp	r6, r3
    85a2:	d1f7      	bne.n	8594 <le_adv_update.constprop.0+0x98>
    85a4:	e7c0      	b.n	8528 <le_adv_update.constprop.0+0x2c>
    85a6:	2300      	movs	r3, #0
    85a8:	e7fa      	b.n	85a0 <le_adv_update.constprop.0+0xa4>
		d_len = 1;
    85aa:	2201      	movs	r2, #1
    85ac:	e7d5      	b.n	855a <le_adv_update.constprop.0+0x5e>
		d[0].len = sd_len;
    85ae:	e9cd 5602 	strd	r5, r6, [sp, #8]
		if (use_name) {
    85b2:	2201      	movs	r2, #1
    85b4:	f1b8 0f00 	cmp.w	r8, #0
    85b8:	d003      	beq.n	85c2 <le_adv_update.constprop.0+0xc6>
			d[1].len = 1;
    85ba:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    85bc:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    85c0:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    85c2:	a902      	add	r1, sp, #8
    85c4:	f242 0009 	movw	r0, #8201	; 0x2009
    85c8:	f01a fc31 	bl	22e2e <hci_set_ad>
		if (err) {
    85cc:	2800      	cmp	r0, #0
    85ce:	d0ce      	beq.n	856e <le_adv_update.constprop.0+0x72>
    85d0:	4604      	mov	r4, r0
    85d2:	e7d0      	b.n	8576 <le_adv_update.constprop.0+0x7a>
			return -EINVAL;
    85d4:	f06f 0415 	mvn.w	r4, #21
    85d8:	e7cd      	b.n	8576 <le_adv_update.constprop.0+0x7a>
    85da:	bf00      	nop
    85dc:	0002939c 	.word	0x0002939c
    85e0:	2000002c 	.word	0x2000002c

000085e4 <start_le_scan_legacy>:
{
    85e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    85e6:	4605      	mov	r5, r0
	set_param.scan_type = scan_type;
    85e8:	f88d 0000 	strb.w	r0, [sp]
		*own_addr_type = bt_dev.id_addr[0].type;
    85ec:	481e      	ldr	r0, [pc, #120]	; (8668 <start_le_scan_legacy+0x84>)
	set_param.window = sys_cpu_to_le16(window);
    85ee:	f8ad 2003 	strh.w	r2, [sp, #3]
    85f2:	2300      	movs	r3, #0
    85f4:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    85f8:	f810 3b2c 	ldrb.w	r3, [r0], #44
	set_param.interval = sys_cpu_to_le16(interval);
    85fc:	f8ad 1001 	strh.w	r1, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    8600:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8604:	f01a fb46 	bl	22c94 <atomic_get>
		    adv && !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8608:	0642      	lsls	r2, r0, #25
    860a:	d406      	bmi.n	861a <start_le_scan_legacy+0x36>
			err = le_set_private_addr(BT_ID_DEFAULT);
    860c:	f01a fbbe 	bl	22d8c <le_set_private_addr.constprop.0>
			if (err) {
    8610:	4604      	mov	r4, r0
    8612:	bb10      	cbnz	r0, 865a <start_le_scan_legacy+0x76>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8614:	2301      	movs	r3, #1
    8616:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    861a:	2107      	movs	r1, #7
    861c:	f242 000b 	movw	r0, #8203	; 0x200b
    8620:	f7ff fc4c 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    8624:	4604      	mov	r4, r0
    8626:	b1d8      	cbz	r0, 8660 <start_le_scan_legacy+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8628:	2207      	movs	r2, #7
    862a:	4669      	mov	r1, sp
    862c:	3008      	adds	r0, #8
    862e:	f01c ff32 	bl	25496 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    8632:	4621      	mov	r1, r4
    8634:	2200      	movs	r2, #0
    8636:	f242 000b 	movw	r0, #8203	; 0x200b
    863a:	f7ff fda7 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    863e:	4604      	mov	r4, r0
    8640:	b958      	cbnz	r0, 865a <start_le_scan_legacy+0x76>
	return set_le_scan_enable_legacy(enable);
    8642:	2001      	movs	r0, #1
    8644:	f7ff fea2 	bl	838c <set_le_scan_enable_legacy>
	if (err) {
    8648:	4604      	mov	r4, r0
    864a:	b930      	cbnz	r0, 865a <start_le_scan_legacy+0x76>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    864c:	1e6b      	subs	r3, r5, #1
    864e:	425a      	negs	r2, r3
    8650:	4806      	ldr	r0, [pc, #24]	; (866c <start_le_scan_legacy+0x88>)
    8652:	415a      	adcs	r2, r3
    8654:	2107      	movs	r1, #7
    8656:	f01a fb4b 	bl	22cf0 <atomic_set_bit_to>
}
    865a:	4620      	mov	r0, r4
    865c:	b003      	add	sp, #12
    865e:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    8660:	f06f 0468 	mvn.w	r4, #104	; 0x68
    8664:	e7f9      	b.n	865a <start_le_scan_legacy+0x76>
    8666:	bf00      	nop
    8668:	20000000 	.word	0x20000000
    866c:	20000098 	.word	0x20000098

00008670 <bt_le_scan_random_addr_check>:
{
    8670:	b508      	push	{r3, lr}
	    !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8672:	2106      	movs	r1, #6
    8674:	4802      	ldr	r0, [pc, #8]	; (8680 <bt_le_scan_random_addr_check+0x10>)
    8676:	f01a fb13 	bl	22ca0 <atomic_test_bit>
}
    867a:	2001      	movs	r0, #1
    867c:	bd08      	pop	{r3, pc}
    867e:	bf00      	nop
    8680:	2000002c 	.word	0x2000002c

00008684 <bt_le_create_conn_legacy>:
{
    8684:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    8688:	4e30      	ldr	r6, [pc, #192]	; (874c <bt_le_create_conn_legacy+0xc8>)
    868a:	7833      	ldrb	r3, [r6, #0]
    868c:	2b01      	cmp	r3, #1
{
    868e:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    8690:	d00b      	beq.n	86aa <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    8692:	2119      	movs	r1, #25
    8694:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    8698:	f896 8000 	ldrb.w	r8, [r6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    869c:	f7ff fc0e 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    86a0:	4607      	mov	r7, r0
    86a2:	b950      	cbnz	r0, 86ba <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    86a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    86a8:	e004      	b.n	86b4 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    86aa:	1c70      	adds	r0, r6, #1
    86ac:	f7ff fe12 	bl	82d4 <set_random_address>
			if (err) {
    86b0:	2800      	cmp	r0, #0
    86b2:	d0ee      	beq.n	8692 <bt_le_create_conn_legacy+0xe>
}
    86b4:	b004      	add	sp, #16
    86b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	cp = net_buf_add(buf, sizeof(*cp));
    86ba:	2119      	movs	r1, #25
    86bc:	3008      	adds	r0, #8
    86be:	f01c fee4 	bl	2548a <net_buf_simple_add>
    86c2:	4604      	mov	r4, r0
    86c4:	2219      	movs	r2, #25
    86c6:	2100      	movs	r1, #0
    86c8:	f01d fdf3 	bl	262b2 <memset>
	cp->own_addr_type = own_addr_type;
    86cc:	f884 800c 	strb.w	r8, [r4, #12]
		if (!bt_dev.le.rl_size ||
    86d0:	f896 30e8 	ldrb.w	r3, [r6, #232]	; 0xe8
    86d4:	b3bb      	cbz	r3, 8746 <bt_le_create_conn_legacy+0xc2>
    86d6:	f896 20e9 	ldrb.w	r2, [r6, #233]	; 0xe9
    86da:	429a      	cmp	r2, r3
    86dc:	d833      	bhi.n	8746 <bt_le_create_conn_legacy+0xc2>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    86de:	f105 0188 	add.w	r1, r5, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    86e2:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    86e4:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    86e8:	f01a fb23 	bl	22d32 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    86ec:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    86f0:	89b3      	ldrh	r3, [r6, #12]
    86f2:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    86f4:	89f3      	ldrh	r3, [r6, #14]
    86f6:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    86f8:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    86fc:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    8700:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    8704:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    8708:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    870c:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    8710:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    8714:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    8718:	4b0d      	ldr	r3, [pc, #52]	; (8750 <bt_le_create_conn_legacy+0xcc>)
    871a:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    871c:	230b      	movs	r3, #11
    871e:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = &state;
    8720:	4638      	mov	r0, r7
	state->val = val;
    8722:	2301      	movs	r3, #1
    8724:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    8728:	f015 f8c2 	bl	1d8b0 <net_buf_id>
    872c:	4b09      	ldr	r3, [pc, #36]	; (8754 <bt_le_create_conn_legacy+0xd0>)
    872e:	220c      	movs	r2, #12
    8730:	fb02 3300 	mla	r3, r2, r0, r3
    8734:	aa01      	add	r2, sp, #4
    8736:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    8738:	4639      	mov	r1, r7
    873a:	4642      	mov	r2, r8
    873c:	f242 000d 	movw	r0, #8205	; 0x200d
    8740:	f7ff fd24 	bl	818c <bt_hci_cmd_send_sync>
    8744:	e7b6      	b.n	86b4 <bt_le_create_conn_legacy+0x30>
			peer_addr = &conn->le.resp_addr;
    8746:	f105 0196 	add.w	r1, r5, #150	; 0x96
    874a:	e7ca      	b.n	86e2 <bt_le_create_conn_legacy+0x5e>
    874c:	20000000 	.word	0x20000000
    8750:	20000098 	.word	0x20000098
    8754:	20001bb4 	.word	0x20001bb4

00008758 <bt_le_create_conn_cancel>:
{
    8758:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    875a:	2100      	movs	r1, #0
{
    875c:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    875e:	f242 000e 	movw	r0, #8206	; 0x200e
    8762:	f7ff fbab 	bl	7ebc <bt_hci_cmd_create>
	state->target = target;
    8766:	4b0c      	ldr	r3, [pc, #48]	; (8798 <bt_le_create_conn_cancel+0x40>)
    8768:	9301      	str	r3, [sp, #4]
	state->val = val;
    876a:	2500      	movs	r5, #0
	state->bit = bit;
    876c:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    876e:	4604      	mov	r4, r0
	state->bit = bit;
    8770:	9302      	str	r3, [sp, #8]
	state->val = val;
    8772:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    8776:	f015 f89b 	bl	1d8b0 <net_buf_id>
    877a:	4b08      	ldr	r3, [pc, #32]	; (879c <bt_le_create_conn_cancel+0x44>)
    877c:	220c      	movs	r2, #12
    877e:	fb02 3300 	mla	r3, r2, r0, r3
    8782:	aa01      	add	r2, sp, #4
    8784:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    8786:	4621      	mov	r1, r4
    8788:	462a      	mov	r2, r5
    878a:	f242 000e 	movw	r0, #8206	; 0x200e
    878e:	f7ff fcfd 	bl	818c <bt_hci_cmd_send_sync>
}
    8792:	b005      	add	sp, #20
    8794:	bd30      	pop	{r4, r5, pc}
    8796:	bf00      	nop
    8798:	20000098 	.word	0x20000098
    879c:	20001bb4 	.word	0x20001bb4

000087a0 <conn_auto_initiate>:
{
    87a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    87a2:	7b43      	ldrb	r3, [r0, #13]
    87a4:	2b07      	cmp	r3, #7
{
    87a6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    87a8:	d17a      	bne.n	88a0 <conn_auto_initiate+0x100>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    87aa:	1d05      	adds	r5, r0, #4
    87ac:	210d      	movs	r1, #13
    87ae:	4628      	mov	r0, r5
    87b0:	f01a fa76 	bl	22ca0 <atomic_test_bit>
    87b4:	b9d8      	cbnz	r0, 87ee <conn_auto_initiate+0x4e>
    87b6:	78e3      	ldrb	r3, [r4, #3]
    87b8:	b123      	cbz	r3, 87c4 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    87ba:	4b3a      	ldr	r3, [pc, #232]	; (88a4 <conn_auto_initiate+0x104>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    87bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    87c0:	071e      	lsls	r6, r3, #28
    87c2:	d514      	bpl.n	87ee <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    87c4:	2102      	movs	r1, #2
    87c6:	f242 0016 	movw	r0, #8214	; 0x2016
    87ca:	f7ff fb77 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    87ce:	4606      	mov	r6, r0
    87d0:	b168      	cbz	r0, 87ee <conn_auto_initiate+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    87d2:	2102      	movs	r1, #2
    87d4:	3008      	adds	r0, #8
    87d6:	f01c fe58 	bl	2548a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    87da:	8823      	ldrh	r3, [r4, #0]
    87dc:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    87de:	4631      	mov	r1, r6
    87e0:	f242 0016 	movw	r0, #8214	; 0x2016
}
    87e4:	b004      	add	sp, #16
    87e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    87ea:	f7ff bba1 	b.w	7f30 <bt_hci_cmd_send>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    87ee:	210c      	movs	r1, #12
    87f0:	4628      	mov	r0, r5
    87f2:	f01a fa55 	bl	22ca0 <atomic_test_bit>
    87f6:	4e2b      	ldr	r6, [pc, #172]	; (88a4 <conn_auto_initiate+0x104>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    87f8:	4601      	mov	r1, r0
    87fa:	b9e0      	cbnz	r0, 8836 <conn_auto_initiate+0x96>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    87fc:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    8800:	07d8      	lsls	r0, r3, #31
    8802:	d518      	bpl.n	8836 <conn_auto_initiate+0x96>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    8804:	2302      	movs	r3, #2
    8806:	9100      	str	r1, [sp, #0]
    8808:	461a      	mov	r2, r3
    880a:	4620      	mov	r0, r4
    880c:	f01a fbb4 	bl	22f78 <bt_le_set_phy>
		if (!err) {
    8810:	4601      	mov	r1, r0
    8812:	b930      	cbnz	r0, 8822 <conn_auto_initiate+0x82>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8814:	2180      	movs	r1, #128	; 0x80
    8816:	4628      	mov	r0, r5
}
    8818:	b004      	add	sp, #16
    881a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    881e:	f01a ba58 	b.w	22cd2 <atomic_or>
    8822:	4a21      	ldr	r2, [pc, #132]	; (88a8 <conn_auto_initiate+0x108>)
    8824:	4b21      	ldr	r3, [pc, #132]	; (88ac <conn_auto_initiate+0x10c>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    8826:	4822      	ldr	r0, [pc, #136]	; (88b0 <conn_auto_initiate+0x110>)
    8828:	1ad2      	subs	r2, r2, r3
    882a:	08d2      	lsrs	r2, r2, #3
    882c:	0192      	lsls	r2, r2, #6
    882e:	f042 0201 	orr.w	r2, r2, #1
    8832:	f018 fc3a 	bl	210aa <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    8836:	f896 30a0 	ldrb.w	r3, [r6, #160]	; 0xa0
    883a:	069a      	lsls	r2, r3, #26
    883c:	d51d      	bpl.n	887a <conn_auto_initiate+0xda>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    883e:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
    8842:	689b      	ldr	r3, [r3, #8]
    8844:	079b      	lsls	r3, r3, #30
    8846:	d518      	bpl.n	887a <conn_auto_initiate+0xda>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    8848:	f10d 010e 	add.w	r1, sp, #14
    884c:	a803      	add	r0, sp, #12
    884e:	f7ff fd17 	bl	8280 <hci_le_read_max_data_len>
			if (!err) {
    8852:	b990      	cbnz	r0, 887a <conn_auto_initiate+0xda>
				err = bt_le_set_data_len(conn,
    8854:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    8858:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    885c:	4620      	mov	r0, r4
    885e:	f01a fb6e 	bl	22f3e <bt_le_set_data_len>
				if (err) {
    8862:	4601      	mov	r1, r0
    8864:	b148      	cbz	r0, 887a <conn_auto_initiate+0xda>
    8866:	4a10      	ldr	r2, [pc, #64]	; (88a8 <conn_auto_initiate+0x108>)
    8868:	4b10      	ldr	r3, [pc, #64]	; (88ac <conn_auto_initiate+0x10c>)
					BT_ERR("Failed to set data len (%d)", err);
    886a:	4812      	ldr	r0, [pc, #72]	; (88b4 <conn_auto_initiate+0x114>)
    886c:	1ad2      	subs	r2, r2, r3
    886e:	08d2      	lsrs	r2, r2, #3
    8870:	0192      	lsls	r2, r2, #6
    8872:	f042 0201 	orr.w	r2, r2, #1
    8876:	f018 fc18 	bl	210aa <log_1>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    887a:	78e3      	ldrb	r3, [r4, #3]
    887c:	2b01      	cmp	r3, #1
    887e:	d10f      	bne.n	88a0 <conn_auto_initiate+0x100>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    8880:	2108      	movs	r1, #8
    8882:	4628      	mov	r0, r5
    8884:	f01a fa0c 	bl	22ca0 <atomic_test_bit>
    8888:	b950      	cbnz	r0, 88a0 <conn_auto_initiate+0x100>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    888a:	480b      	ldr	r0, [pc, #44]	; (88b8 <conn_auto_initiate+0x118>)
    888c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    8890:	2300      	movs	r3, #0
    8892:	f104 0158 	add.w	r1, r4, #88	; 0x58
}
    8896:	b004      	add	sp, #16
    8898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    889c:	f016 bf64 	b.w	1f768 <k_delayed_work_submit_to_queue>
    88a0:	b004      	add	sp, #16
    88a2:	bd70      	pop	{r4, r5, r6, pc}
    88a4:	20000000 	.word	0x20000000
    88a8:	00026918 	.word	0x00026918
    88ac:	00026828 	.word	0x00026828
    88b0:	000293ac 	.word	0x000293ac
    88b4:	000293c6 	.word	0x000293c6
    88b8:	20001940 	.word	0x20001940

000088bc <le_phy_update_complete>:
{
    88bc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    88be:	6883      	ldr	r3, [r0, #8]
    88c0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    88c4:	4628      	mov	r0, r5
    88c6:	f001 fea7 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    88ca:	4604      	mov	r4, r0
    88cc:	b960      	cbnz	r0, 88e8 <le_phy_update_complete+0x2c>
    88ce:	4b11      	ldr	r3, [pc, #68]	; (8914 <le_phy_update_complete+0x58>)
    88d0:	4a11      	ldr	r2, [pc, #68]	; (8918 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88d2:	4812      	ldr	r0, [pc, #72]	; (891c <le_phy_update_complete+0x60>)
    88d4:	1ad2      	subs	r2, r2, r3
    88d6:	08d2      	lsrs	r2, r2, #3
    88d8:	0192      	lsls	r2, r2, #6
    88da:	4629      	mov	r1, r5
    88dc:	f042 0201 	orr.w	r2, r2, #1
}
    88e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88e4:	f018 bbe1 	b.w	210aa <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    88e8:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    88ea:	f06f 0180 	mvn.w	r1, #128	; 0x80
    88ee:	4628      	mov	r0, r5
    88f0:	f01a f9e0 	bl	22cb4 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    88f4:	0603      	lsls	r3, r0, #24
    88f6:	d507      	bpl.n	8908 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    88f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    88fc:	4628      	mov	r0, r5
    88fe:	f01a f9e8 	bl	22cd2 <atomic_or>
		conn_auto_initiate(conn);
    8902:	4620      	mov	r0, r4
    8904:	f7ff ff4c 	bl	87a0 <conn_auto_initiate>
	bt_conn_unref(conn);
    8908:	4620      	mov	r0, r4
}
    890a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    890e:	f01a bd4f 	b.w	233b0 <bt_conn_unref>
    8912:	bf00      	nop
    8914:	00026828 	.word	0x00026828
    8918:	00026918 	.word	0x00026918
    891c:	000290cb 	.word	0x000290cb

00008920 <le_remote_feat_complete>:
{
    8920:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    8922:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8924:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8928:	4630      	mov	r0, r6
    892a:	f001 fe75 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    892e:	4604      	mov	r4, r0
    8930:	b960      	cbnz	r0, 894c <le_remote_feat_complete+0x2c>
    8932:	4a12      	ldr	r2, [pc, #72]	; (897c <le_remote_feat_complete+0x5c>)
    8934:	4b12      	ldr	r3, [pc, #72]	; (8980 <le_remote_feat_complete+0x60>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8936:	4813      	ldr	r0, [pc, #76]	; (8984 <le_remote_feat_complete+0x64>)
    8938:	1ad2      	subs	r2, r2, r3
    893a:	08d2      	lsrs	r2, r2, #3
    893c:	0192      	lsls	r2, r2, #6
    893e:	4631      	mov	r1, r6
    8940:	f042 0201 	orr.w	r2, r2, #1
}
    8944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8948:	f018 bbaf 	b.w	210aa <log_1>
	if (!evt->status) {
    894c:	782b      	ldrb	r3, [r5, #0]
    894e:	b93b      	cbnz	r3, 8960 <le_remote_feat_complete+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8950:	f8d5 3003 	ldr.w	r3, [r5, #3]
    8954:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    8958:	f8d5 3007 	ldr.w	r3, [r5, #7]
    895c:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    8960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    8964:	1d20      	adds	r0, r4, #4
    8966:	f01a f9b4 	bl	22cd2 <atomic_or>
	conn_auto_initiate(conn);
    896a:	4620      	mov	r0, r4
    896c:	f7ff ff18 	bl	87a0 <conn_auto_initiate>
	bt_conn_unref(conn);
    8970:	4620      	mov	r0, r4
}
    8972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8976:	f01a bd1b 	b.w	233b0 <bt_conn_unref>
    897a:	bf00      	nop
    897c:	00026918 	.word	0x00026918
    8980:	00026828 	.word	0x00026828
    8984:	000290cb 	.word	0x000290cb

00008988 <bt_security_err_get>:
	switch (hci_err) {
    8988:	2829      	cmp	r0, #41	; 0x29
    898a:	bf9a      	itte	ls
    898c:	4b01      	ldrls	r3, [pc, #4]	; (8994 <bt_security_err_get+0xc>)
    898e:	5c18      	ldrbls	r0, [r3, r0]
{
    8990:	2008      	movhi	r0, #8
}
    8992:	4770      	bx	lr
    8994:	000299a4 	.word	0x000299a4

00008998 <hci_encrypt_key_refresh_complete>:
{
    8998:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    899a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    899c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    89a0:	4630      	mov	r0, r6
    89a2:	f001 fe39 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    89a6:	4604      	mov	r4, r0
    89a8:	b960      	cbnz	r0, 89c4 <hci_encrypt_key_refresh_complete+0x2c>
    89aa:	4a15      	ldr	r2, [pc, #84]	; (8a00 <hci_encrypt_key_refresh_complete+0x68>)
    89ac:	4b15      	ldr	r3, [pc, #84]	; (8a04 <hci_encrypt_key_refresh_complete+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    89ae:	4816      	ldr	r0, [pc, #88]	; (8a08 <hci_encrypt_key_refresh_complete+0x70>)
    89b0:	1ad2      	subs	r2, r2, r3
    89b2:	08d2      	lsrs	r2, r2, #3
    89b4:	0192      	lsls	r2, r2, #6
    89b6:	4631      	mov	r1, r6
    89b8:	f042 0201 	orr.w	r2, r2, #1
}
    89bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    89c0:	f018 bb73 	b.w	210aa <log_1>
	if (evt->status) {
    89c4:	7829      	ldrb	r1, [r5, #0]
    89c6:	b159      	cbz	r1, 89e0 <hci_encrypt_key_refresh_complete+0x48>
		bt_conn_security_changed(conn, evt->status,
    89c8:	4608      	mov	r0, r1
    89ca:	f7ff ffdd 	bl	8988 <bt_security_err_get>
    89ce:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    89d0:	4620      	mov	r0, r4
    89d2:	f001 fc7d 	bl	a2d0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    89d6:	4620      	mov	r0, r4
}
    89d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    89dc:	f01a bce8 	b.w	233b0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    89e0:	7886      	ldrb	r6, [r0, #2]
    89e2:	2e01      	cmp	r6, #1
    89e4:	d104      	bne.n	89f0 <hci_encrypt_key_refresh_complete+0x58>
		bt_smp_update_keys(conn);
    89e6:	f006 fbd9 	bl	f19c <bt_smp_update_keys>
	if (!conn->encrypt) {
    89ea:	7ae3      	ldrb	r3, [r4, #11]
    89ec:	b91b      	cbnz	r3, 89f6 <hci_encrypt_key_refresh_complete+0x5e>
		conn->sec_level = BT_SECURITY_L1;
    89ee:	7266      	strb	r6, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    89f0:	7829      	ldrb	r1, [r5, #0]
    89f2:	2200      	movs	r2, #0
    89f4:	e7ec      	b.n	89d0 <hci_encrypt_key_refresh_complete+0x38>
    89f6:	4620      	mov	r0, r4
    89f8:	f7fe ffb8 	bl	796c <update_sec_level.part.0>
    89fc:	e7f8      	b.n	89f0 <hci_encrypt_key_refresh_complete+0x58>
    89fe:	bf00      	nop
    8a00:	00026918 	.word	0x00026918
    8a04:	00026828 	.word	0x00026828
    8a08:	000290ef 	.word	0x000290ef

00008a0c <hci_encrypt_change>:
{
    8a0c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    8a0e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8a10:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8a14:	4630      	mov	r0, r6
    8a16:	f001 fdff 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    8a1a:	4604      	mov	r4, r0
    8a1c:	b960      	cbnz	r0, 8a38 <hci_encrypt_change+0x2c>
    8a1e:	4a17      	ldr	r2, [pc, #92]	; (8a7c <hci_encrypt_change+0x70>)
    8a20:	4b17      	ldr	r3, [pc, #92]	; (8a80 <hci_encrypt_change+0x74>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8a22:	4818      	ldr	r0, [pc, #96]	; (8a84 <hci_encrypt_change+0x78>)
    8a24:	1ad2      	subs	r2, r2, r3
    8a26:	08d2      	lsrs	r2, r2, #3
    8a28:	0192      	lsls	r2, r2, #6
    8a2a:	4631      	mov	r1, r6
    8a2c:	f042 0201 	orr.w	r2, r2, #1
}
    8a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8a34:	f018 bb39 	b.w	210aa <log_1>
	if (evt->status) {
    8a38:	7829      	ldrb	r1, [r5, #0]
    8a3a:	b159      	cbz	r1, 8a54 <hci_encrypt_change+0x48>
		bt_conn_security_changed(conn, evt->status,
    8a3c:	4608      	mov	r0, r1
    8a3e:	f7ff ffa3 	bl	8988 <bt_security_err_get>
    8a42:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    8a44:	4620      	mov	r0, r4
    8a46:	f001 fc43 	bl	a2d0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8a4a:	4620      	mov	r0, r4
}
    8a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8a50:	f01a bcae 	b.w	233b0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    8a54:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    8a56:	78eb      	ldrb	r3, [r5, #3]
    8a58:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    8a5a:	2a01      	cmp	r2, #1
    8a5c:	d102      	bne.n	8a64 <hci_encrypt_change+0x58>
		if (conn->encrypt) {
    8a5e:	b923      	cbnz	r3, 8a6a <hci_encrypt_change+0x5e>
		conn->sec_level = BT_SECURITY_L1;
    8a60:	2301      	movs	r3, #1
    8a62:	7263      	strb	r3, [r4, #9]
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    8a64:	7829      	ldrb	r1, [r5, #0]
    8a66:	2200      	movs	r2, #0
    8a68:	e7ec      	b.n	8a44 <hci_encrypt_change+0x38>
			bt_smp_update_keys(conn);
    8a6a:	f006 fb97 	bl	f19c <bt_smp_update_keys>
	if (!conn->encrypt) {
    8a6e:	7ae3      	ldrb	r3, [r4, #11]
    8a70:	2b00      	cmp	r3, #0
    8a72:	d0f5      	beq.n	8a60 <hci_encrypt_change+0x54>
    8a74:	4620      	mov	r0, r4
    8a76:	f7fe ff79 	bl	796c <update_sec_level.part.0>
    8a7a:	e7f3      	b.n	8a64 <hci_encrypt_change+0x58>
    8a7c:	00026918 	.word	0x00026918
    8a80:	00026828 	.word	0x00026828
    8a84:	000290ef 	.word	0x000290ef

00008a88 <bt_id_add>:
{
    8a88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8a8c:	4c64      	ldr	r4, [pc, #400]	; (8c20 <bt_id_add+0x198>)
    8a8e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    8a92:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
    8a96:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8a98:	b10a      	cbz	r2, 8a9e <bt_id_add+0x16>
    8a9a:	429a      	cmp	r2, r3
    8a9c:	d209      	bcs.n	8ab2 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
    8a9e:	3301      	adds	r3, #1
    8aa0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    8aa4:	7a2b      	ldrb	r3, [r5, #8]
    8aa6:	f043 0304 	orr.w	r3, r3, #4
    8aaa:	722b      	strb	r3, [r5, #8]
}
    8aac:	b002      	add	sp, #8
    8aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    8ab2:	2100      	movs	r1, #0
    8ab4:	2206      	movs	r2, #6
    8ab6:	4608      	mov	r0, r1
    8ab8:	f001 fdd2 	bl	a660 <bt_conn_lookup_state_le>
	if (conn) {
    8abc:	4606      	mov	r6, r0
    8abe:	b178      	cbz	r0, 8ae0 <bt_id_add+0x58>
    8ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    8ac4:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8ac8:	f01a f903 	bl	22cd2 <atomic_or>
	keys->state |= flag;
    8acc:	7a2b      	ldrb	r3, [r5, #8]
		bt_conn_unref(conn);
    8ace:	4630      	mov	r0, r6
	keys->state |= flag;
    8ad0:	f043 0301 	orr.w	r3, r3, #1
    8ad4:	722b      	strb	r3, [r5, #8]
}
    8ad6:	b002      	add	sp, #8
    8ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    8adc:	f01a bc68 	b.w	233b0 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8ae0:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8ae4:	f01a f8d6 	bl	22c94 <atomic_get>
	bt_adv_foreach(adv_pause_enabled, NULL);
    8ae8:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8aea:	f3c0 1740 	ubfx	r7, r0, #5, #1
    8aee:	484d      	ldr	r0, [pc, #308]	; (8c24 <bt_id_add+0x19c>)
    8af0:	f7fe fcfe 	bl	74f0 <bt_adv_foreach>
	if (scan_enabled) {
    8af4:	b117      	cbz	r7, 8afc <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    8af6:	4630      	mov	r0, r6
    8af8:	f01a f997 	bl	22e2a <set_le_scan_enable.isra.0>
	if (bt_dev.le.rl_entries) {
    8afc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    8b00:	b173      	cbz	r3, 8b20 <bt_id_add+0x98>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    8b02:	2000      	movs	r0, #0
    8b04:	f01a f979 	bl	22dfa <addr_res_enable>
		if (err) {
    8b08:	b150      	cbz	r0, 8b20 <bt_id_add+0x98>
    8b0a:	4947      	ldr	r1, [pc, #284]	; (8c28 <bt_id_add+0x1a0>)
    8b0c:	4b47      	ldr	r3, [pc, #284]	; (8c2c <bt_id_add+0x1a4>)
			BT_WARN("Failed to disable address resolution");
    8b0e:	4848      	ldr	r0, [pc, #288]	; (8c30 <bt_id_add+0x1a8>)
    8b10:	1ac9      	subs	r1, r1, r3
    8b12:	08c9      	lsrs	r1, r1, #3
    8b14:	0189      	lsls	r1, r1, #6
    8b16:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    8b1a:	f018 fab9 	bl	21090 <log_0>
	if (err) {
    8b1e:	e023      	b.n	8b68 <bt_id_add+0xe0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    8b20:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    8b24:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    8b28:	429a      	cmp	r2, r3
    8b2a:	d12b      	bne.n	8b84 <bt_id_add+0xfc>
    8b2c:	4b3f      	ldr	r3, [pc, #252]	; (8c2c <bt_id_add+0x1a4>)
    8b2e:	4e3e      	ldr	r6, [pc, #248]	; (8c28 <bt_id_add+0x1a0>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    8b30:	4840      	ldr	r0, [pc, #256]	; (8c34 <bt_id_add+0x1ac>)
    8b32:	1af6      	subs	r6, r6, r3
    8b34:	08f6      	lsrs	r6, r6, #3
    8b36:	01b6      	lsls	r6, r6, #6
    8b38:	f046 0102 	orr.w	r1, r6, #2
    8b3c:	f018 faa8 	bl	21090 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    8b40:	2200      	movs	r2, #0
    8b42:	4611      	mov	r1, r2
    8b44:	f242 0029 	movw	r0, #8233	; 0x2029
    8b48:	f7ff fb20 	bl	818c <bt_hci_cmd_send_sync>
		if (err) {
    8b4c:	b118      	cbz	r0, 8b56 <bt_id_add+0xce>
			BT_ERR("Failed to clear resolution list");
    8b4e:	483a      	ldr	r0, [pc, #232]	; (8c38 <bt_id_add+0x1b0>)
    8b50:	f046 0101 	orr.w	r1, r6, #1
    8b54:	e7e1      	b.n	8b1a <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
    8b56:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    8b5a:	3301      	adds	r3, #1
    8b5c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    8b60:	7a2b      	ldrb	r3, [r5, #8]
    8b62:	f043 0304 	orr.w	r3, r3, #4
    8b66:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8b68:	2001      	movs	r0, #1
    8b6a:	f01a f946 	bl	22dfa <addr_res_enable>
	if (scan_enabled) {
    8b6e:	b117      	cbz	r7, 8b76 <bt_id_add+0xee>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8b70:	2001      	movs	r0, #1
    8b72:	f01a f95a 	bl	22e2a <set_le_scan_enable.isra.0>
	bt_adv_foreach(adv_unpause_enabled, NULL);
    8b76:	4831      	ldr	r0, [pc, #196]	; (8c3c <bt_id_add+0x1b4>)
    8b78:	2100      	movs	r1, #0
}
    8b7a:	b002      	add	sp, #8
    8b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    8b80:	f7fe bcb6 	b.w	74f0 <bt_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    8b84:	f105 0801 	add.w	r8, r5, #1
    8b88:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    8b8c:	4640      	mov	r0, r8
    8b8e:	f01a f97c 	bl	22e8a <hci_id_add.constprop.0>
	if (err) {
    8b92:	4606      	mov	r6, r0
    8b94:	b140      	cbz	r0, 8ba8 <bt_id_add+0x120>
    8b96:	4924      	ldr	r1, [pc, #144]	; (8c28 <bt_id_add+0x1a0>)
    8b98:	4b24      	ldr	r3, [pc, #144]	; (8c2c <bt_id_add+0x1a4>)
		BT_ERR("Failed to add IRK to controller");
    8b9a:	4829      	ldr	r0, [pc, #164]	; (8c40 <bt_id_add+0x1b8>)
    8b9c:	1ac9      	subs	r1, r1, r3
    8b9e:	08c9      	lsrs	r1, r1, #3
    8ba0:	0189      	lsls	r1, r1, #6
    8ba2:	f041 0101 	orr.w	r1, r1, #1
    8ba6:	e7b8      	b.n	8b1a <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
    8ba8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    8bac:	3301      	adds	r3, #1
    8bae:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
    8bb2:	7a2b      	ldrb	r3, [r5, #8]
    8bb4:	f043 0304 	orr.w	r3, r3, #4
    8bb8:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    8bba:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
    8bbe:	075b      	lsls	r3, r3, #29
    8bc0:	d408      	bmi.n	8bd4 <bt_id_add+0x14c>
    8bc2:	4919      	ldr	r1, [pc, #100]	; (8c28 <bt_id_add+0x1a0>)
    8bc4:	4b19      	ldr	r3, [pc, #100]	; (8c2c <bt_id_add+0x1a4>)
		BT_WARN("Set privacy mode command is not supported");
    8bc6:	481f      	ldr	r0, [pc, #124]	; (8c44 <bt_id_add+0x1bc>)
    8bc8:	1ac9      	subs	r1, r1, r3
    8bca:	08c9      	lsrs	r1, r1, #3
    8bcc:	0189      	lsls	r1, r1, #6
    8bce:	f041 0102 	orr.w	r1, r1, #2
    8bd2:	e7a2      	b.n	8b1a <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
    8bd4:	4641      	mov	r1, r8
    8bd6:	4668      	mov	r0, sp
    8bd8:	f01a f8ab 	bl	22d32 <bt_addr_le_copy>
	cp.mode = mode;
    8bdc:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8bde:	2108      	movs	r1, #8
    8be0:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    8be4:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8be8:	f7ff f968 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    8bec:	4604      	mov	r4, r0
    8bee:	b940      	cbnz	r0, 8c02 <bt_id_add+0x17a>
    8bf0:	490d      	ldr	r1, [pc, #52]	; (8c28 <bt_id_add+0x1a0>)
    8bf2:	4b0e      	ldr	r3, [pc, #56]	; (8c2c <bt_id_add+0x1a4>)
		BT_ERR("Failed to set privacy mode");
    8bf4:	4814      	ldr	r0, [pc, #80]	; (8c48 <bt_id_add+0x1c0>)
    8bf6:	1ac9      	subs	r1, r1, r3
    8bf8:	08c9      	lsrs	r1, r1, #3
    8bfa:	0189      	lsls	r1, r1, #6
    8bfc:	f041 0101 	orr.w	r1, r1, #1
    8c00:	e78b      	b.n	8b1a <bt_id_add+0x92>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    8c02:	2208      	movs	r2, #8
    8c04:	4669      	mov	r1, sp
    8c06:	4410      	add	r0, r2
    8c08:	f01c fc45 	bl	25496 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    8c0c:	4632      	mov	r2, r6
    8c0e:	4621      	mov	r1, r4
    8c10:	f242 004e 	movw	r0, #8270	; 0x204e
    8c14:	f7ff faba 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    8c18:	2800      	cmp	r0, #0
    8c1a:	d0a5      	beq.n	8b68 <bt_id_add+0xe0>
    8c1c:	e7e8      	b.n	8bf0 <bt_id_add+0x168>
    8c1e:	bf00      	nop
    8c20:	20000000 	.word	0x20000000
    8c24:	00022db1 	.word	0x00022db1
    8c28:	00026918 	.word	0x00026918
    8c2c:	00026828 	.word	0x00026828
    8c30:	000293e2 	.word	0x000293e2
    8c34:	00029407 	.word	0x00029407
    8c38:	00029438 	.word	0x00029438
    8c3c:	00022ddb 	.word	0x00022ddb
    8c40:	00029458 	.word	0x00029458
    8c44:	00029478 	.word	0x00029478
    8c48:	000294a2 	.word	0x000294a2

00008c4c <bt_id_del>:
{
    8c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    8c50:	4c4b      	ldr	r4, [pc, #300]	; (8d80 <bt_id_del+0x134>)
    8c52:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    8c56:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
    8c5a:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    8c5c:	b112      	cbz	r2, 8c64 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    8c5e:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    8c60:	4293      	cmp	r3, r2
    8c62:	dd08      	ble.n	8c76 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    8c64:	3b01      	subs	r3, #1
    8c66:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    8c6a:	7a2b      	ldrb	r3, [r5, #8]
    8c6c:	f023 0304 	bic.w	r3, r3, #4
    8c70:	722b      	strb	r3, [r5, #8]
}
    8c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    8c76:	2100      	movs	r1, #0
    8c78:	2206      	movs	r2, #6
    8c7a:	4608      	mov	r0, r1
    8c7c:	f001 fcf0 	bl	a660 <bt_conn_lookup_state_le>
	if (conn) {
    8c80:	4607      	mov	r7, r0
    8c82:	b170      	cbz	r0, 8ca2 <bt_id_del+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8c84:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    8c8c:	f01a f821 	bl	22cd2 <atomic_or>
	keys->state |= flag;
    8c90:	7a2b      	ldrb	r3, [r5, #8]
    8c92:	f043 0302 	orr.w	r3, r3, #2
    8c96:	722b      	strb	r3, [r5, #8]
		bt_conn_unref(conn);
    8c98:	4638      	mov	r0, r7
}
    8c9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    8c9e:	f01a bb87 	b.w	233b0 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8ca2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8ca6:	f019 fff5 	bl	22c94 <atomic_get>
	bt_adv_foreach(adv_pause_enabled, NULL);
    8caa:	4639      	mov	r1, r7
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8cac:	f3c0 1640 	ubfx	r6, r0, #5, #1
    8cb0:	4834      	ldr	r0, [pc, #208]	; (8d84 <bt_id_del+0x138>)
    8cb2:	f7fe fc1d 	bl	74f0 <bt_adv_foreach>
	if (scan_enabled) {
    8cb6:	b116      	cbz	r6, 8cbe <bt_id_del+0x72>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    8cb8:	4638      	mov	r0, r7
    8cba:	f01a f8b6 	bl	22e2a <set_le_scan_enable.isra.0>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    8cbe:	2000      	movs	r0, #0
    8cc0:	f01a f89b 	bl	22dfa <addr_res_enable>
	if (err) {
    8cc4:	4607      	mov	r7, r0
    8cc6:	b1d0      	cbz	r0, 8cfe <bt_id_del+0xb2>
    8cc8:	4a2f      	ldr	r2, [pc, #188]	; (8d88 <bt_id_del+0x13c>)
    8cca:	4b30      	ldr	r3, [pc, #192]	; (8d8c <bt_id_del+0x140>)
    8ccc:	1ad2      	subs	r2, r2, r3
    8cce:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    8cd0:	0192      	lsls	r2, r2, #6
    8cd2:	4601      	mov	r1, r0
    8cd4:	f042 0201 	orr.w	r2, r2, #1
    8cd8:	482d      	ldr	r0, [pc, #180]	; (8d90 <bt_id_del+0x144>)
    8cda:	f018 f9e6 	bl	210aa <log_1>
	if (bt_dev.le.rl_entries) {
    8cde:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    8ce2:	b113      	cbz	r3, 8cea <bt_id_del+0x9e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8ce4:	2001      	movs	r0, #1
    8ce6:	f01a f888 	bl	22dfa <addr_res_enable>
	if (scan_enabled) {
    8cea:	b116      	cbz	r6, 8cf2 <bt_id_del+0xa6>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8cec:	2001      	movs	r0, #1
    8cee:	f01a f89c 	bl	22e2a <set_le_scan_enable.isra.0>
}
    8cf2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    8cf6:	4827      	ldr	r0, [pc, #156]	; (8d94 <bt_id_del+0x148>)
    8cf8:	2100      	movs	r1, #0
    8cfa:	f7fe bbf9 	b.w	74f0 <bt_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8cfe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    8d02:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    8d06:	429a      	cmp	r2, r3
    8d08:	d20c      	bcs.n	8d24 <bt_id_del+0xd8>
		bt_dev.le.rl_entries--;
    8d0a:	3b01      	subs	r3, #1
    8d0c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    8d10:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8d12:	4921      	ldr	r1, [pc, #132]	; (8d98 <bt_id_del+0x14c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    8d14:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8d18:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    8d1a:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8d1c:	2002      	movs	r0, #2
    8d1e:	f006 fb11 	bl	f344 <bt_keys_foreach>
		goto done;
    8d22:	e7dc      	b.n	8cde <bt_id_del+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    8d24:	2107      	movs	r1, #7
    8d26:	f242 0028 	movw	r0, #8232	; 0x2028
    8d2a:	f7ff f8c7 	bl	7ebc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    8d2e:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
    8d32:	4680      	mov	r8, r0
    8d34:	b950      	cbnz	r0, 8d4c <bt_id_del+0x100>
    8d36:	4b15      	ldr	r3, [pc, #84]	; (8d8c <bt_id_del+0x140>)
    8d38:	4913      	ldr	r1, [pc, #76]	; (8d88 <bt_id_del+0x13c>)
		BT_ERR("Failed to remove IRK from controller");
    8d3a:	4818      	ldr	r0, [pc, #96]	; (8d9c <bt_id_del+0x150>)
    8d3c:	1ac9      	subs	r1, r1, r3
    8d3e:	08c9      	lsrs	r1, r1, #3
    8d40:	0189      	lsls	r1, r1, #6
    8d42:	f041 0101 	orr.w	r1, r1, #1
    8d46:	f018 f9a3 	bl	21090 <log_0>
		goto done;
    8d4a:	e7c8      	b.n	8cde <bt_id_del+0x92>
	cp = net_buf_add(buf, sizeof(*cp));
    8d4c:	2107      	movs	r1, #7
    8d4e:	3008      	adds	r0, #8
    8d50:	f01c fb9b 	bl	2548a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    8d54:	4649      	mov	r1, r9
    8d56:	f019 ffec 	bl	22d32 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    8d5a:	463a      	mov	r2, r7
    8d5c:	4641      	mov	r1, r8
    8d5e:	f242 0028 	movw	r0, #8232	; 0x2028
    8d62:	f7ff fa13 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    8d66:	2800      	cmp	r0, #0
    8d68:	d1e5      	bne.n	8d36 <bt_id_del+0xea>
	bt_dev.le.rl_entries--;
    8d6a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    8d6e:	3b01      	subs	r3, #1
    8d70:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
    8d74:	7a2b      	ldrb	r3, [r5, #8]
    8d76:	f023 0304 	bic.w	r3, r3, #4
    8d7a:	722b      	strb	r3, [r5, #8]
    8d7c:	e7af      	b.n	8cde <bt_id_del+0x92>
    8d7e:	bf00      	nop
    8d80:	20000000 	.word	0x20000000
    8d84:	00022db1 	.word	0x00022db1
    8d88:	00026918 	.word	0x00026918
    8d8c:	00026828 	.word	0x00026828
    8d90:	000294bd 	.word	0x000294bd
    8d94:	00022ddb 	.word	0x00022ddb
    8d98:	00022ee5 	.word	0x00022ee5
    8d9c:	000294ea 	.word	0x000294ea

00008da0 <bt_le_scan_update>:
{
    8da0:	b570      	push	{r4, r5, r6, lr}
    8da2:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8da4:	481c      	ldr	r0, [pc, #112]	; (8e18 <bt_le_scan_update+0x78>)
    8da6:	f019 ff75 	bl	22c94 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8daa:	0641      	lsls	r1, r0, #25
    8dac:	f3c0 1380 	ubfx	r3, r0, #6, #1
    8db0:	d501      	bpl.n	8db6 <bt_le_scan_update+0x16>
			return 0;
    8db2:	2000      	movs	r0, #0
    8db4:	e02c      	b.n	8e10 <bt_le_scan_update+0x70>
    8db6:	4818      	ldr	r0, [pc, #96]	; (8e18 <bt_le_scan_update+0x78>)
    8db8:	f019 ff6c 	bl	22c94 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    8dbc:	0682      	lsls	r2, r0, #26
    8dbe:	d422      	bmi.n	8e06 <bt_le_scan_update+0x66>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    8dc0:	2100      	movs	r1, #0
    8dc2:	2206      	movs	r2, #6
    8dc4:	4608      	mov	r0, r1
    8dc6:	f001 fc4b 	bl	a660 <bt_conn_lookup_state_le>
		if (conn) {
    8dca:	4604      	mov	r4, r0
    8dcc:	bb08      	cbnz	r0, 8e12 <bt_le_scan_update+0x72>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    8dce:	2202      	movs	r2, #2
    8dd0:	4601      	mov	r1, r0
    8dd2:	f001 fc45 	bl	a660 <bt_conn_lookup_state_le>
		if (conn) {
    8dd6:	4605      	mov	r5, r0
    8dd8:	2800      	cmp	r0, #0
    8dda:	d0ea      	beq.n	8db2 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
    8de0:	480d      	ldr	r0, [pc, #52]	; (8e18 <bt_le_scan_update+0x78>)
    8de2:	f019 ff76 	bl	22cd2 <atomic_or>
			bt_conn_unref(conn);
    8de6:	4628      	mov	r0, r5
    8de8:	f01a fae2 	bl	233b0 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    8dec:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    8dee:	4620      	mov	r0, r4
    8df0:	bf18      	it	ne
    8df2:	2230      	movne	r2, #48	; 0x30
}
    8df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    8df8:	bf0a      	itet	eq
    8dfa:	2212      	moveq	r2, #18
    8dfc:	2160      	movne	r1, #96	; 0x60
    8dfe:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    8e02:	f7ff bbef 	b.w	85e4 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    8e06:	4618      	mov	r0, r3
    8e08:	f7ff fac0 	bl	838c <set_le_scan_enable_legacy>
		if (err) {
    8e0c:	2800      	cmp	r0, #0
    8e0e:	d0d7      	beq.n	8dc0 <bt_le_scan_update+0x20>
}
    8e10:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    8e12:	f01a facd 	bl	233b0 <bt_conn_unref>
    8e16:	e7cc      	b.n	8db2 <bt_le_scan_update+0x12>
    8e18:	20000098 	.word	0x20000098

00008e1c <hci_disconn_complete>:
{
    8e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8e1e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8e20:	7835      	ldrb	r5, [r6, #0]
    8e22:	bb7d      	cbnz	r5, 8e84 <hci_disconn_complete+0x68>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8e24:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8e28:	4638      	mov	r0, r7
    8e2a:	f001 fbf5 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    8e2e:	4604      	mov	r4, r0
    8e30:	b960      	cbnz	r0, 8e4c <hci_disconn_complete+0x30>
    8e32:	4b15      	ldr	r3, [pc, #84]	; (8e88 <hci_disconn_complete+0x6c>)
    8e34:	4a15      	ldr	r2, [pc, #84]	; (8e8c <hci_disconn_complete+0x70>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8e36:	4816      	ldr	r0, [pc, #88]	; (8e90 <hci_disconn_complete+0x74>)
    8e38:	1ad2      	subs	r2, r2, r3
    8e3a:	08d2      	lsrs	r2, r2, #3
    8e3c:	0192      	lsls	r2, r2, #6
    8e3e:	4639      	mov	r1, r7
    8e40:	f042 0201 	orr.w	r2, r2, #1
}
    8e44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8e48:	f018 b92f 	b.w	210aa <log_1>
	conn->err = evt->reason;
    8e4c:	78f3      	ldrb	r3, [r6, #3]
    8e4e:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8e50:	4629      	mov	r1, r5
    8e52:	f001 fc81 	bl	a758 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    8e56:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    8e58:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    8e5a:	2b01      	cmp	r3, #1
    8e5c:	d004      	beq.n	8e68 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
    8e5e:	4620      	mov	r0, r4
}
    8e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8e64:	f01a baa4 	b.w	233b0 <bt_conn_unref>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    8e68:	4629      	mov	r1, r5
    8e6a:	1d20      	adds	r0, r4, #4
    8e6c:	f019 ff18 	bl	22ca0 <atomic_test_bit>
    8e70:	2800      	cmp	r0, #0
    8e72:	d0f4      	beq.n	8e5e <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8e74:	4620      	mov	r0, r4
    8e76:	2102      	movs	r1, #2
    8e78:	f001 fc6e 	bl	a758 <bt_conn_set_state>
		bt_le_scan_update(false);
    8e7c:	4628      	mov	r0, r5
    8e7e:	f7ff ff8f 	bl	8da0 <bt_le_scan_update>
    8e82:	e7ec      	b.n	8e5e <hci_disconn_complete+0x42>
}
    8e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e86:	bf00      	nop
    8e88:	00026828 	.word	0x00026828
    8e8c:	00026918 	.word	0x00026918
    8e90:	000290ef 	.word	0x000290ef

00008e94 <le_adv_report>:
{
    8e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t num_reports = net_buf_pull_u8(buf);
    8e98:	f100 0708 	add.w	r7, r0, #8
{
    8e9c:	b08d      	sub	sp, #52	; 0x34
    8e9e:	4604      	mov	r4, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
    8ea0:	4638      	mov	r0, r7
    8ea2:	f01c fb2b 	bl	254fc <net_buf_simple_pull_u8>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8ea6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 906c <le_adv_report+0x1d8>
	if (scan_dev_found_cb) {
    8eaa:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 9070 <le_adv_report+0x1dc>
	uint8_t num_reports = net_buf_pull_u8(buf);
    8eae:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    8eb0:	9b01      	ldr	r3, [sp, #4]
    8eb2:	b913      	cbnz	r3, 8eba <le_adv_report+0x26>
}
    8eb4:	b00d      	add	sp, #52	; 0x34
    8eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    8eba:	89a3      	ldrh	r3, [r4, #12]
    8ebc:	2b08      	cmp	r3, #8
    8ebe:	d80c      	bhi.n	8eda <le_adv_report+0x46>
    8ec0:	4b6c      	ldr	r3, [pc, #432]	; (9074 <le_adv_report+0x1e0>)
    8ec2:	496d      	ldr	r1, [pc, #436]	; (9078 <le_adv_report+0x1e4>)
			BT_ERR("Unexpected end of buffer");
    8ec4:	486d      	ldr	r0, [pc, #436]	; (907c <le_adv_report+0x1e8>)
    8ec6:	1ac9      	subs	r1, r1, r3
    8ec8:	08c9      	lsrs	r1, r1, #3
    8eca:	0189      	lsls	r1, r1, #6
    8ecc:	f041 0101 	orr.w	r1, r1, #1
}
    8ed0:	b00d      	add	sp, #52	; 0x34
    8ed2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    8ed6:	f018 b8db 	b.w	21090 <log_0>
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    8eda:	2109      	movs	r1, #9
    8edc:	4638      	mov	r0, r7
    8ede:	f01c fb05 	bl	254ec <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    8ee2:	7a03      	ldrb	r3, [r0, #8]
    8ee4:	9300      	str	r3, [sp, #0]
    8ee6:	18c3      	adds	r3, r0, r3
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    8ee8:	4606      	mov	r6, r0
		adv_info.rssi = evt->data[evt->length];
    8eea:	7a5b      	ldrb	r3, [r3, #9]
    8eec:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    8ef0:	2301      	movs	r3, #1
    8ef2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    8ef6:	237f      	movs	r3, #127	; 0x7f
    8ef8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.sid = BT_GAP_SID_INVALID;
    8efc:	23ff      	movs	r3, #255	; 0xff
    8efe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    8f02:	7803      	ldrb	r3, [r0, #0]
    8f04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	switch (evt_type) {
    8f08:	2b04      	cmp	r3, #4
    8f0a:	bf96      	itet	ls
    8f0c:	4a5c      	ldrls	r2, [pc, #368]	; (9080 <le_adv_report+0x1ec>)
		adv_info.adv_type = evt->evt_type;
    8f0e:	2300      	movhi	r3, #0
    8f10:	5cd3      	ldrbls	r3, [r2, r3]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    8f12:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    8f16:	f100 0901 	add.w	r9, r0, #1
    8f1a:	4640      	mov	r0, r8
    8f1c:	f019 feba 	bl	22c94 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8f20:	0645      	lsls	r5, r0, #25
    8f22:	d50d      	bpl.n	8f40 <le_adv_report+0xac>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    8f24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8f28:	0758      	lsls	r0, r3, #29
    8f2a:	d509      	bpl.n	8f40 <le_adv_report+0xac>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    8f2c:	7a31      	ldrb	r1, [r6, #8]
    8f2e:	4638      	mov	r0, r7
    8f30:	3101      	adds	r1, #1
    8f32:	f01c fad3 	bl	254dc <net_buf_simple_pull>
    8f36:	9b01      	ldr	r3, [sp, #4]
    8f38:	1e58      	subs	r0, r3, #1
    8f3a:	b2c3      	uxtb	r3, r0
    8f3c:	9301      	str	r3, [sp, #4]
    8f3e:	e7b7      	b.n	8eb0 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    8f40:	7873      	ldrb	r3, [r6, #1]
    8f42:	1e9a      	subs	r2, r3, #2
    8f44:	2a01      	cmp	r2, #1
    8f46:	d850      	bhi.n	8fea <le_adv_report+0x156>
		bt_addr_le_copy(&id_addr, addr);
    8f48:	4649      	mov	r1, r9
    8f4a:	a804      	add	r0, sp, #16
    8f4c:	f019 fef1 	bl	22d32 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8f50:	f89d 3010 	ldrb.w	r3, [sp, #16]
    8f54:	3b02      	subs	r3, #2
    8f56:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    8f5a:	ab04      	add	r3, sp, #16
    8f5c:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    8f5e:	f8da 3000 	ldr.w	r3, [sl]
    8f62:	b1a3      	cbz	r3, 8f8e <le_adv_report+0xfa>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    8f64:	4638      	mov	r0, r7
    8f66:	f01c fad9 	bl	2551c <net_buf_simple_headroom>
		buf->len = len;
    8f6a:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    8f6c:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    8f6e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    8f72:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8f74:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    8f76:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    8f7a:	f8da c000 	ldr.w	ip, [sl]
    8f7e:	a804      	add	r0, sp, #16
    8f80:	463b      	mov	r3, r7
    8f82:	47e0      	blx	ip
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    8f84:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8f86:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8f88:	fa10 f08b 	uxtah	r0, r0, fp
    8f8c:	60a0      	str	r0, [r4, #8]
	return list->head;
    8f8e:	4b3d      	ldr	r3, [pc, #244]	; (9084 <le_adv_report+0x1f0>)
    8f90:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    8f92:	2d00      	cmp	r5, #0
    8f94:	d13a      	bne.n	900c <le_adv_report+0x178>
    8f96:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    8f98:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8f9c:	f019 fe7a 	bl	22c94 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8fa0:	0641      	lsls	r1, r0, #25
    8fa2:	f3c0 1580 	ubfx	r5, r0, #6, #1
    8fa6:	d4c1      	bmi.n	8f2c <le_adv_report+0x98>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    8fa8:	07da      	lsls	r2, r3, #31
    8faa:	d5bf      	bpl.n	8f2c <le_adv_report+0x98>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    8fac:	2202      	movs	r2, #2
    8fae:	a904      	add	r1, sp, #16
    8fb0:	4628      	mov	r0, r5
    8fb2:	f001 fb55 	bl	a660 <bt_conn_lookup_state_le>
	if (!conn) {
    8fb6:	4683      	mov	fp, r0
    8fb8:	2800      	cmp	r0, #0
    8fba:	d0b7      	beq.n	8f2c <le_adv_report+0x98>
    8fbc:	4640      	mov	r0, r8
    8fbe:	f019 fe69 	bl	22c94 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8fc2:	0683      	lsls	r3, r0, #26
    8fc4:	d43f      	bmi.n	9046 <le_adv_report+0x1b2>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    8fc6:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    8fca:	4649      	mov	r1, r9
    8fcc:	f019 feb1 	bl	22d32 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    8fd0:	4658      	mov	r0, fp
    8fd2:	f7ff fb57 	bl	8684 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    8fd6:	2800      	cmp	r0, #0
    8fd8:	d13a      	bne.n	9050 <le_adv_report+0x1bc>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    8fda:	4658      	mov	r0, fp
    8fdc:	2106      	movs	r1, #6
    8fde:	f001 fbbb 	bl	a758 <bt_conn_set_state>
	bt_conn_unref(conn);
    8fe2:	4658      	mov	r0, fp
    8fe4:	f01a f9e4 	bl	233b0 <bt_conn_unref>
	return;
    8fe8:	e7a0      	b.n	8f2c <le_adv_report+0x98>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    8fea:	2bff      	cmp	r3, #255	; 0xff
    8fec:	d108      	bne.n	9000 <le_adv_report+0x16c>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    8fee:	2300      	movs	r3, #0
    8ff0:	9306      	str	r3, [sp, #24]
    8ff2:	a906      	add	r1, sp, #24
    8ff4:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    8ff8:	a804      	add	r0, sp, #16
    8ffa:	f019 fe9a 	bl	22d32 <bt_addr_le_copy>
    8ffe:	e7ac      	b.n	8f5a <le_adv_report+0xc6>
    9000:	4649      	mov	r1, r9
    9002:	2000      	movs	r0, #0
    9004:	f019 ff77 	bl	22ef6 <bt_lookup_id_addr>
    9008:	4601      	mov	r1, r0
    900a:	e7f5      	b.n	8ff8 <le_adv_report+0x164>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    900c:	3d08      	subs	r5, #8
    900e:	2d00      	cmp	r5, #0
    9010:	d0c1      	beq.n	8f96 <le_adv_report+0x102>
	state->offset = net_buf_simple_headroom(buf);
    9012:	4638      	mov	r0, r7
    9014:	f01c fa82 	bl	2551c <net_buf_simple_headroom>
	state->len = buf->len;
    9018:	89a3      	ldrh	r3, [r4, #12]
    901a:	9302      	str	r3, [sp, #8]
		buf->len = len;
    901c:	9b00      	ldr	r3, [sp, #0]
    901e:	81a3      	strh	r3, [r4, #12]
		listener->recv(info, &buf->b);
    9020:	462b      	mov	r3, r5
	state->offset = net_buf_simple_headroom(buf);
    9022:	4683      	mov	fp, r0
    9024:	f853 2b08 	ldr.w	r2, [r3], #8
    9028:	9303      	str	r3, [sp, #12]
    902a:	a808      	add	r0, sp, #32
    902c:	4639      	mov	r1, r7
    902e:	4790      	blx	r2
	buf->len = state->len;
    9030:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    9032:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    9034:	81a3      	strh	r3, [r4, #12]
Z_GENLIST_PEEK_NEXT(slist, snode)
    9036:	9b03      	ldr	r3, [sp, #12]
	buf->data = buf->__buf + state->offset;
    9038:	fa10 f08b 	uxtah	r0, r0, fp
    903c:	60a0      	str	r0, [r4, #8]
    903e:	2b00      	cmp	r3, #0
    9040:	d0a9      	beq.n	8f96 <le_adv_report+0x102>
	return node->next;
    9042:	68ad      	ldr	r5, [r5, #8]
    9044:	e7a5      	b.n	8f92 <le_adv_report+0xfe>
	return set_le_scan_enable_legacy(enable);
    9046:	4628      	mov	r0, r5
    9048:	f7ff f9a0 	bl	838c <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    904c:	2800      	cmp	r0, #0
    904e:	d0ba      	beq.n	8fc6 <le_adv_report+0x132>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    9050:	231f      	movs	r3, #31
    9052:	f88b 300c 	strb.w	r3, [fp, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9056:	2100      	movs	r1, #0
    9058:	4658      	mov	r0, fp
    905a:	f001 fb7d 	bl	a758 <bt_conn_set_state>
	bt_conn_unref(conn);
    905e:	4658      	mov	r0, fp
    9060:	f01a f9a6 	bl	233b0 <bt_conn_unref>
	bt_le_scan_update(false);
    9064:	2000      	movs	r0, #0
    9066:	f7ff fe9b 	bl	8da0 <bt_le_scan_update>
    906a:	e75f      	b.n	8f2c <le_adv_report+0x98>
    906c:	20000098 	.word	0x20000098
    9070:	20001be0 	.word	0x20001be0
    9074:	00026828 	.word	0x00026828
    9078:	00026918 	.word	0x00026918
    907c:	0002950f 	.word	0x0002950f
    9080:	0002999f 	.word	0x0002999f
    9084:	20001bd8 	.word	0x20001bd8

00009088 <bt_data_parse>:
{
    9088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    908a:	4604      	mov	r4, r0
    908c:	460e      	mov	r6, r1
    908e:	4617      	mov	r7, r2
	while (ad->len > 1) {
    9090:	88a3      	ldrh	r3, [r4, #4]
    9092:	2b01      	cmp	r3, #1
    9094:	d801      	bhi.n	909a <bt_data_parse+0x12>
}
    9096:	b003      	add	sp, #12
    9098:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    909a:	4620      	mov	r0, r4
    909c:	f01c fa2e 	bl	254fc <net_buf_simple_pull_u8>
		if (len == 0U) {
    90a0:	4605      	mov	r5, r0
    90a2:	2800      	cmp	r0, #0
    90a4:	d0f7      	beq.n	9096 <bt_data_parse+0xe>
		if (len > ad->len) {
    90a6:	88a2      	ldrh	r2, [r4, #4]
    90a8:	b283      	uxth	r3, r0
    90aa:	429a      	cmp	r2, r3
    90ac:	d20c      	bcs.n	90c8 <bt_data_parse+0x40>
    90ae:	4b10      	ldr	r3, [pc, #64]	; (90f0 <bt_data_parse+0x68>)
    90b0:	4910      	ldr	r1, [pc, #64]	; (90f4 <bt_data_parse+0x6c>)
			BT_WARN("Malformed data");
    90b2:	4811      	ldr	r0, [pc, #68]	; (90f8 <bt_data_parse+0x70>)
    90b4:	1ac9      	subs	r1, r1, r3
    90b6:	08c9      	lsrs	r1, r1, #3
    90b8:	0189      	lsls	r1, r1, #6
    90ba:	f041 0102 	orr.w	r1, r1, #2
}
    90be:	b003      	add	sp, #12
    90c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    90c4:	f017 bfe4 	b.w	21090 <log_0>
		data.type = net_buf_simple_pull_u8(ad);
    90c8:	4620      	mov	r0, r4
    90ca:	f01c fa17 	bl	254fc <net_buf_simple_pull_u8>
		data.data_len = len - 1;
    90ce:	3d01      	subs	r5, #1
		data.data = ad->data;
    90d0:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    90d2:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
    90d6:	4639      	mov	r1, r7
    90d8:	4668      	mov	r0, sp
		data.data_len = len - 1;
    90da:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    90de:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    90e0:	47b0      	blx	r6
    90e2:	2800      	cmp	r0, #0
    90e4:	d0d7      	beq.n	9096 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    90e6:	4629      	mov	r1, r5
    90e8:	4620      	mov	r0, r4
    90ea:	f01c f9f7 	bl	254dc <net_buf_simple_pull>
    90ee:	e7cf      	b.n	9090 <bt_data_parse+0x8>
    90f0:	00026828 	.word	0x00026828
    90f4:	00026918 	.word	0x00026918
    90f8:	00029528 	.word	0x00029528

000090fc <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    90fc:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    90fe:	4d13      	ldr	r5, [pc, #76]	; (914c <id_create.constprop.0+0x50>)
    9100:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    9104:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    9106:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9108:	460c      	mov	r4, r1
    910a:	b171      	cbz	r1, 912a <id_create.constprop.0+0x2e>
    910c:	2300      	movs	r3, #0
    910e:	4669      	mov	r1, sp
    9110:	4620      	mov	r0, r4
    9112:	9300      	str	r3, [sp, #0]
    9114:	f8cd 3003 	str.w	r3, [sp, #3]
    9118:	f019 fdc9 	bl	22cae <bt_addr_le_cmp>
    911c:	b128      	cbz	r0, 912a <id_create.constprop.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    911e:	4621      	mov	r1, r4
    9120:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9122:	f019 fe06 	bl	22d32 <bt_addr_le_copy>
}
    9126:	b005      	add	sp, #20
    9128:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    912a:	a802      	add	r0, sp, #8
    912c:	f019 ff7b 	bl	23026 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    9130:	a802      	add	r0, sp, #8
    9132:	f7fe fa0f 	bl	7554 <id_find>
    9136:	2800      	cmp	r0, #0
    9138:	daf7      	bge.n	912a <id_create.constprop.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    913a:	a902      	add	r1, sp, #8
    913c:	4628      	mov	r0, r5
    913e:	f019 fdf8 	bl	22d32 <bt_addr_le_copy>
		if (addr) {
    9142:	2c00      	cmp	r4, #0
    9144:	d0ef      	beq.n	9126 <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9146:	4629      	mov	r1, r5
    9148:	4620      	mov	r0, r4
    914a:	e7ea      	b.n	9122 <id_create.constprop.0+0x26>
    914c:	20000000 	.word	0x20000000

00009150 <hci_event_prio>:
{
    9150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9154:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    9156:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    915a:	4630      	mov	r0, r6
    915c:	f01c f9de 	bl	2551c <net_buf_simple_headroom>
	state->len = buf->len;
    9160:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9164:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    9168:	4605      	mov	r5, r0
    916a:	d80c      	bhi.n	9186 <hci_event_prio+0x36>
    916c:	4a1c      	ldr	r2, [pc, #112]	; (91e0 <hci_event_prio+0x90>)
    916e:	491d      	ldr	r1, [pc, #116]	; (91e4 <hci_event_prio+0x94>)
    9170:	481d      	ldr	r0, [pc, #116]	; (91e8 <hci_event_prio+0x98>)
    9172:	f641 03a5 	movw	r3, #6309	; 0x18a5
    9176:	f017 fc32 	bl	209de <printk>
    917a:	4040      	eors	r0, r0
    917c:	f380 8811 	msr	BASEPRI, r0
    9180:	f04f 0003 	mov.w	r0, #3
    9184:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9186:	4630      	mov	r0, r6
    9188:	2102      	movs	r1, #2
    918a:	f01c f9af 	bl	254ec <net_buf_simple_pull_mem>
    918e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9190:	7800      	ldrb	r0, [r0, #0]
    9192:	f019 fd6d 	bl	22c70 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9196:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9198:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    919a:	d40c      	bmi.n	91b6 <hci_event_prio+0x66>
    919c:	4a10      	ldr	r2, [pc, #64]	; (91e0 <hci_event_prio+0x90>)
    919e:	4913      	ldr	r1, [pc, #76]	; (91ec <hci_event_prio+0x9c>)
    91a0:	4811      	ldr	r0, [pc, #68]	; (91e8 <hci_event_prio+0x98>)
    91a2:	f641 03a9 	movw	r3, #6313	; 0x18a9
    91a6:	f017 fc1a 	bl	209de <printk>
    91aa:	4040      	eors	r0, r0
    91ac:	f380 8811 	msr	BASEPRI, r0
    91b0:	f04f 0003 	mov.w	r0, #3
    91b4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    91b6:	2305      	movs	r3, #5
    91b8:	4a0d      	ldr	r2, [pc, #52]	; (91f0 <hci_event_prio+0xa0>)
    91ba:	7838      	ldrb	r0, [r7, #0]
    91bc:	4621      	mov	r1, r4
    91be:	f7fe fc23 	bl	7a08 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    91c2:	07b3      	lsls	r3, r6, #30
    91c4:	d507      	bpl.n	91d6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    91c6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    91c8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    91cc:	fa10 f585 	uxtah	r5, r0, r5
    91d0:	60a5      	str	r5, [r4, #8]
}
    91d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    91d6:	4620      	mov	r0, r4
}
    91d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    91dc:	f014 bc1e 	b.w	1da1c <net_buf_unref>
    91e0:	00029224 	.word	0x00029224
    91e4:	00029537 	.word	0x00029537
    91e8:	00029261 	.word	0x00029261
    91ec:	00029550 	.word	0x00029550
    91f0:	00026f34 	.word	0x00026f34

000091f4 <bt_recv>:
{
    91f4:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    91f6:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    91f8:	2901      	cmp	r1, #1
{
    91fa:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    91fc:	d04b      	beq.n	9296 <bt_recv+0xa2>
    91fe:	2903      	cmp	r1, #3
    9200:	d178      	bne.n	92f4 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9202:	8983      	ldrh	r3, [r0, #12]
    9204:	2b03      	cmp	r3, #3
    9206:	d80c      	bhi.n	9222 <bt_recv+0x2e>
    9208:	4a42      	ldr	r2, [pc, #264]	; (9314 <bt_recv+0x120>)
    920a:	4943      	ldr	r1, [pc, #268]	; (9318 <bt_recv+0x124>)
    920c:	4843      	ldr	r0, [pc, #268]	; (931c <bt_recv+0x128>)
    920e:	f240 530b 	movw	r3, #1291	; 0x50b
    9212:	f017 fbe4 	bl	209de <printk>
    9216:	4040      	eors	r0, r0
    9218:	f380 8811 	msr	BASEPRI, r0
    921c:	f04f 0003 	mov.w	r0, #3
    9220:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9222:	2104      	movs	r1, #4
    9224:	f104 0008 	add.w	r0, r4, #8
    9228:	f01c f960 	bl	254ec <net_buf_simple_pull_mem>
	if (buf->len != len) {
    922c:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    922e:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9230:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9232:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    9234:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    9238:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    923a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    923c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    923e:	d00d      	beq.n	925c <bt_recv+0x68>
    9240:	4837      	ldr	r0, [pc, #220]	; (9320 <bt_recv+0x12c>)
    9242:	4b38      	ldr	r3, [pc, #224]	; (9324 <bt_recv+0x130>)
    9244:	1a1b      	subs	r3, r3, r0
    9246:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    9248:	019b      	lsls	r3, r3, #6
    924a:	4837      	ldr	r0, [pc, #220]	; (9328 <bt_recv+0x134>)
    924c:	f043 0301 	orr.w	r3, r3, #1
    9250:	f017 ff3f 	bl	210d2 <log_2>
	net_buf_unref(buf);
    9254:	4620      	mov	r0, r4
    9256:	f014 fbe1 	bl	1da1c <net_buf_unref>
    925a:	e01a      	b.n	9292 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    925c:	f001 f9dc 	bl	a618 <bt_conn_lookup_handle>
	if (!conn) {
    9260:	4605      	mov	r5, r0
    9262:	b958      	cbnz	r0, 927c <bt_recv+0x88>
    9264:	4b2e      	ldr	r3, [pc, #184]	; (9320 <bt_recv+0x12c>)
    9266:	4a2f      	ldr	r2, [pc, #188]	; (9324 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    9268:	8ae1      	ldrh	r1, [r4, #22]
    926a:	4830      	ldr	r0, [pc, #192]	; (932c <bt_recv+0x138>)
    926c:	1ad2      	subs	r2, r2, r3
    926e:	08d2      	lsrs	r2, r2, #3
    9270:	0192      	lsls	r2, r2, #6
    9272:	f042 0201 	orr.w	r2, r2, #1
    9276:	f017 ff18 	bl	210aa <log_1>
		net_buf_unref(buf);
    927a:	e7eb      	b.n	9254 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    927c:	f001 fda8 	bl	add0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9280:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    9282:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    9284:	4621      	mov	r1, r4
    9286:	4628      	mov	r0, r5
    9288:	f001 f862 	bl	a350 <bt_conn_recv>
	bt_conn_unref(conn);
    928c:	4628      	mov	r0, r5
    928e:	f01a f88f 	bl	233b0 <bt_conn_unref>
		return 0;
    9292:	2000      	movs	r0, #0
}
    9294:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9296:	8983      	ldrh	r3, [r0, #12]
    9298:	2b01      	cmp	r3, #1
    929a:	d80c      	bhi.n	92b6 <bt_recv+0xc2>
    929c:	4a1d      	ldr	r2, [pc, #116]	; (9314 <bt_recv+0x120>)
    929e:	491e      	ldr	r1, [pc, #120]	; (9318 <bt_recv+0x124>)
    92a0:	481e      	ldr	r0, [pc, #120]	; (931c <bt_recv+0x128>)
    92a2:	f241 33d2 	movw	r3, #5074	; 0x13d2
    92a6:	f017 fb9a 	bl	209de <printk>
    92aa:	4040      	eors	r0, r0
    92ac:	f380 8811 	msr	BASEPRI, r0
    92b0:	f04f 0003 	mov.w	r0, #3
    92b4:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    92b6:	2102      	movs	r1, #2
    92b8:	f104 0008 	add.w	r0, r4, #8
    92bc:	f01c f916 	bl	254ec <net_buf_simple_pull_mem>
    92c0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    92c2:	7800      	ldrb	r0, [r0, #0]
    92c4:	f019 fcd4 	bl	22c70 <bt_hci_evt_get_flags>
    92c8:	0783      	lsls	r3, r0, #30
    92ca:	d40c      	bmi.n	92e6 <bt_recv+0xf2>
    92cc:	4a11      	ldr	r2, [pc, #68]	; (9314 <bt_recv+0x120>)
    92ce:	4918      	ldr	r1, [pc, #96]	; (9330 <bt_recv+0x13c>)
    92d0:	4812      	ldr	r0, [pc, #72]	; (931c <bt_recv+0x128>)
    92d2:	f241 33d6 	movw	r3, #5078	; 0x13d6
    92d6:	f017 fb82 	bl	209de <printk>
    92da:	4040      	eors	r0, r0
    92dc:	f380 8811 	msr	BASEPRI, r0
    92e0:	f04f 0003 	mov.w	r0, #3
    92e4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    92e6:	4a13      	ldr	r2, [pc, #76]	; (9334 <bt_recv+0x140>)
    92e8:	7828      	ldrb	r0, [r5, #0]
    92ea:	2306      	movs	r3, #6
    92ec:	4621      	mov	r1, r4
    92ee:	f7fe fb8b 	bl	7a08 <handle_event>
    92f2:	e7af      	b.n	9254 <bt_recv+0x60>
    92f4:	4b0a      	ldr	r3, [pc, #40]	; (9320 <bt_recv+0x12c>)
    92f6:	4a0b      	ldr	r2, [pc, #44]	; (9324 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    92f8:	480f      	ldr	r0, [pc, #60]	; (9338 <bt_recv+0x144>)
    92fa:	1ad2      	subs	r2, r2, r3
    92fc:	08d2      	lsrs	r2, r2, #3
    92fe:	0192      	lsls	r2, r2, #6
    9300:	f042 0201 	orr.w	r2, r2, #1
    9304:	f017 fed1 	bl	210aa <log_1>
		net_buf_unref(buf);
    9308:	4620      	mov	r0, r4
    930a:	f014 fb87 	bl	1da1c <net_buf_unref>
		return -EINVAL;
    930e:	f06f 0015 	mvn.w	r0, #21
    9312:	e7bf      	b.n	9294 <bt_recv+0xa0>
    9314:	00029224 	.word	0x00029224
    9318:	00029537 	.word	0x00029537
    931c:	00029261 	.word	0x00029261
    9320:	00026828 	.word	0x00026828
    9324:	00026918 	.word	0x00026918
    9328:	00029569 	.word	0x00029569
    932c:	0002958d 	.word	0x0002958d
    9330:	000295af 	.word	0x000295af
    9334:	00026ef4 	.word	0x00026ef4
    9338:	000295dd 	.word	0x000295dd

0000933c <bt_recv_prio>:
{
    933c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    933e:	7d03      	ldrb	r3, [r0, #20]
    9340:	2b01      	cmp	r3, #1
{
    9342:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9344:	d00c      	beq.n	9360 <bt_recv_prio+0x24>
    9346:	4a09      	ldr	r2, [pc, #36]	; (936c <bt_recv_prio+0x30>)
    9348:	4909      	ldr	r1, [pc, #36]	; (9370 <bt_recv_prio+0x34>)
    934a:	480a      	ldr	r0, [pc, #40]	; (9374 <bt_recv_prio+0x38>)
    934c:	f641 03ec 	movw	r3, #6380	; 0x18ec
    9350:	f017 fb45 	bl	209de <printk>
    9354:	4040      	eors	r0, r0
    9356:	f380 8811 	msr	BASEPRI, r0
    935a:	f04f 0003 	mov.w	r0, #3
    935e:	df02      	svc	2
	hci_event_prio(buf);
    9360:	4620      	mov	r0, r4
    9362:	f7ff fef5 	bl	9150 <hci_event_prio>
}
    9366:	2000      	movs	r0, #0
    9368:	bd10      	pop	{r4, pc}
    936a:	bf00      	nop
    936c:	00029224 	.word	0x00029224
    9370:	000295f1 	.word	0x000295f1
    9374:	00029261 	.word	0x00029261

00009378 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9378:	4a08      	ldr	r2, [pc, #32]	; (939c <bt_hci_driver_register+0x24>)
{
    937a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    937c:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    9380:	b930      	cbnz	r0, 9390 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    9382:	68d9      	ldr	r1, [r3, #12]
    9384:	b139      	cbz	r1, 9396 <bt_hci_driver_register+0x1e>
    9386:	6919      	ldr	r1, [r3, #16]
    9388:	b129      	cbz	r1, 9396 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    938a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    938e:	4770      	bx	lr
		return -EALREADY;
    9390:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9394:	4770      	bx	lr
		return -EINVAL;
    9396:	f06f 0015 	mvn.w	r0, #21
}
    939a:	4770      	bx	lr
    939c:	20000000 	.word	0x20000000

000093a0 <bt_finalize_init>:
{
    93a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    93a4:	4d2d      	ldr	r5, [pc, #180]	; (945c <bt_finalize_init+0xbc>)
    93a6:	4c2e      	ldr	r4, [pc, #184]	; (9460 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    93a8:	4e2e      	ldr	r6, [pc, #184]	; (9464 <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
    93aa:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9468 <bt_finalize_init+0xc8>
{
    93ae:	b087      	sub	sp, #28
    93b0:	2102      	movs	r1, #2
    93b2:	f105 0098 	add.w	r0, r5, #152	; 0x98
    93b6:	f019 fc8c 	bl	22cd2 <atomic_or>
		bt_le_scan_update(false);
    93ba:	2000      	movs	r0, #0
    93bc:	f7ff fcf0 	bl	8da0 <bt_le_scan_update>
    93c0:	4b2a      	ldr	r3, [pc, #168]	; (946c <bt_finalize_init+0xcc>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    93c2:	492b      	ldr	r1, [pc, #172]	; (9470 <bt_finalize_init+0xd0>)
    93c4:	1ae4      	subs	r4, r4, r3
    93c6:	79eb      	ldrb	r3, [r5, #7]
    93c8:	4628      	mov	r0, r5
    93ca:	2b01      	cmp	r3, #1
    93cc:	bf88      	it	hi
    93ce:	460e      	movhi	r6, r1
    93d0:	f7fd fe88 	bl	70e4 <bt_addr_le_str_real>
    93d4:	f7fb ff88 	bl	52e8 <log_strdup>
    93d8:	08e4      	lsrs	r4, r4, #3
    93da:	01a4      	lsls	r4, r4, #6
    93dc:	f044 0803 	orr.w	r8, r4, #3
    93e0:	4602      	mov	r2, r0
    93e2:	4631      	mov	r1, r6
    93e4:	4823      	ldr	r0, [pc, #140]	; (9474 <bt_finalize_init+0xd4>)
    93e6:	4643      	mov	r3, r8
    93e8:	f017 fe73 	bl	210d2 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    93ec:	462f      	mov	r7, r5
    93ee:	2601      	movs	r6, #1
    93f0:	79eb      	ldrb	r3, [r5, #7]
    93f2:	429e      	cmp	r6, r3
    93f4:	f107 0707 	add.w	r7, r7, #7
    93f8:	db22      	blt.n	9440 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    93fa:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    93fe:	4630      	mov	r0, r6
    9400:	f7fe f88c 	bl	751c <ver_str>
    9404:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    9406:	9304      	str	r3, [sp, #16]
    9408:	f044 0403 	orr.w	r4, r4, #3
    940c:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
    940e:	9305      	str	r3, [sp, #20]
    9410:	e9cd 0602 	strd	r0, r6, [sp, #8]
    9414:	4623      	mov	r3, r4
    9416:	a902      	add	r1, sp, #8
    9418:	2204      	movs	r2, #4
    941a:	4817      	ldr	r0, [pc, #92]	; (9478 <bt_finalize_init+0xd8>)
    941c:	f017 fe8e 	bl	2113c <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    9420:	f895 6039 	ldrb.w	r6, [r5, #57]	; 0x39
    9424:	4630      	mov	r0, r6
    9426:	f7fe f879 	bl	751c <ver_str>
    942a:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
    942c:	f8ad 4000 	strh.w	r4, [sp]
    9430:	4601      	mov	r1, r0
    9432:	4632      	mov	r2, r6
    9434:	4811      	ldr	r0, [pc, #68]	; (947c <bt_finalize_init+0xdc>)
    9436:	f017 fe65 	bl	21104 <log_3>
}
    943a:	b007      	add	sp, #28
    943c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    9440:	4638      	mov	r0, r7
    9442:	f7fd fe4f 	bl	70e4 <bt_addr_le_str_real>
    9446:	f7fb ff4f 	bl	52e8 <log_strdup>
    944a:	4631      	mov	r1, r6
    944c:	4602      	mov	r2, r0
    944e:	4643      	mov	r3, r8
    9450:	4648      	mov	r0, r9
    9452:	f017 fe3e 	bl	210d2 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9456:	3601      	adds	r6, #1
    9458:	e7ca      	b.n	93f0 <bt_finalize_init+0x50>
    945a:	bf00      	nop
    945c:	20000000 	.word	0x20000000
    9460:	00026918 	.word	0x00026918
    9464:	00028822 	.word	0x00028822
    9468:	00029627 	.word	0x00029627
    946c:	00026828 	.word	0x00026828
    9470:	00029614 	.word	0x00029614
    9474:	00029618 	.word	0x00029618
    9478:	00029638 	.word	0x00029638
    947c:	00029676 	.word	0x00029676

00009480 <bt_get_name>:
}
    9480:	4800      	ldr	r0, [pc, #0]	; (9484 <bt_get_name+0x4>)
    9482:	4770      	bx	lr
    9484:	0002939c 	.word	0x0002939c

00009488 <bt_id_create>:
{
    9488:	b537      	push	{r0, r1, r2, r4, r5, lr}
    948a:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    948c:	4605      	mov	r5, r0
    948e:	b918      	cbnz	r0, 9498 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9490:	b344      	cbz	r4, 94e4 <bt_id_create+0x5c>
		return -EINVAL;
    9492:	f06f 0415 	mvn.w	r4, #21
    9496:	e022      	b.n	94de <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9498:	2300      	movs	r3, #0
    949a:	4669      	mov	r1, sp
    949c:	9300      	str	r3, [sp, #0]
    949e:	f8cd 3003 	str.w	r3, [sp, #3]
    94a2:	f019 fc04 	bl	22cae <bt_addr_le_cmp>
    94a6:	2800      	cmp	r0, #0
    94a8:	d0f2      	beq.n	9490 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    94aa:	782b      	ldrb	r3, [r5, #0]
    94ac:	2b01      	cmp	r3, #1
    94ae:	d104      	bne.n	94ba <bt_id_create+0x32>
    94b0:	79ab      	ldrb	r3, [r5, #6]
    94b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    94b6:	2bc0      	cmp	r3, #192	; 0xc0
    94b8:	d00a      	beq.n	94d0 <bt_id_create+0x48>
    94ba:	4b11      	ldr	r3, [pc, #68]	; (9500 <bt_id_create+0x78>)
    94bc:	4911      	ldr	r1, [pc, #68]	; (9504 <bt_id_create+0x7c>)
			BT_ERR("Only static random identity address supported");
    94be:	4812      	ldr	r0, [pc, #72]	; (9508 <bt_id_create+0x80>)
    94c0:	1ac9      	subs	r1, r1, r3
    94c2:	08c9      	lsrs	r1, r1, #3
    94c4:	0189      	lsls	r1, r1, #6
    94c6:	f041 0101 	orr.w	r1, r1, #1
    94ca:	f017 fde1 	bl	21090 <log_0>
			return -EINVAL;
    94ce:	e7e0      	b.n	9492 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    94d0:	4628      	mov	r0, r5
    94d2:	f7fe f83f 	bl	7554 <id_find>
    94d6:	2800      	cmp	r0, #0
    94d8:	dbda      	blt.n	9490 <bt_id_create+0x8>
			return -EALREADY;
    94da:	f06f 0477 	mvn.w	r4, #119	; 0x77
}
    94de:	4620      	mov	r0, r4
    94e0:	b003      	add	sp, #12
    94e2:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    94e4:	4b09      	ldr	r3, [pc, #36]	; (950c <bt_id_create+0x84>)
    94e6:	79dc      	ldrb	r4, [r3, #7]
    94e8:	2c01      	cmp	r4, #1
    94ea:	d006      	beq.n	94fa <bt_id_create+0x72>
	new_id = bt_dev.id_count++;
    94ec:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    94ee:	4629      	mov	r1, r5
    94f0:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    94f2:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    94f4:	f7ff fe02 	bl	90fc <id_create.constprop.0>
	return new_id;
    94f8:	e7f1      	b.n	94de <bt_id_create+0x56>
		return -ENOMEM;
    94fa:	f06f 040b 	mvn.w	r4, #11
    94fe:	e7ee      	b.n	94de <bt_id_create+0x56>
    9500:	00026828 	.word	0x00026828
    9504:	00026918 	.word	0x00026918
    9508:	0002969d 	.word	0x0002969d
    950c:	20000000 	.word	0x20000000

00009510 <bt_setup_public_id_addr>:
{
    9510:	b570      	push	{r4, r5, r6, lr}
    9512:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9514:	aa01      	add	r2, sp, #4
    9516:	2100      	movs	r1, #0
    9518:	f241 0009 	movw	r0, #4105	; 0x1009
    951c:	f7fe fe36 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    9520:	4e22      	ldr	r6, [pc, #136]	; (95ac <bt_setup_public_id_addr+0x9c>)
    9522:	4604      	mov	r4, r0
    9524:	b168      	cbz	r0, 9542 <bt_setup_public_id_addr+0x32>
    9526:	4922      	ldr	r1, [pc, #136]	; (95b0 <bt_setup_public_id_addr+0xa0>)
    9528:	4b22      	ldr	r3, [pc, #136]	; (95b4 <bt_setup_public_id_addr+0xa4>)
		BT_WARN("Failed to read public address");
    952a:	4823      	ldr	r0, [pc, #140]	; (95b8 <bt_setup_public_id_addr+0xa8>)
    952c:	1ac9      	subs	r1, r1, r3
    952e:	08c9      	lsrs	r1, r1, #3
    9530:	0189      	lsls	r1, r1, #6
    9532:	f041 0102 	orr.w	r1, r1, #2
    9536:	f017 fdab 	bl	21090 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    953a:	2300      	movs	r3, #0
    953c:	71f3      	strb	r3, [r6, #7]
}
    953e:	b006      	add	sp, #24
    9540:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    9542:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9544:	689d      	ldr	r5, [r3, #8]
    9546:	9004      	str	r0, [sp, #16]
    9548:	3501      	adds	r5, #1
    954a:	f8ad 0014 	strh.w	r0, [sp, #20]
    954e:	2206      	movs	r2, #6
    9550:	a904      	add	r1, sp, #16
    9552:	4628      	mov	r0, r5
    9554:	f01c fe8f 	bl	26276 <memcmp>
    9558:	b918      	cbnz	r0, 9562 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    955a:	9801      	ldr	r0, [sp, #4]
    955c:	f014 fa5e 	bl	1da1c <net_buf_unref>
    9560:	e7eb      	b.n	953a <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    9562:	23ff      	movs	r3, #255	; 0xff
    9564:	2206      	movs	r2, #6
    9566:	a902      	add	r1, sp, #8
    9568:	4628      	mov	r0, r5
    956a:	f88d 3008 	strb.w	r3, [sp, #8]
    956e:	f88d 3009 	strb.w	r3, [sp, #9]
    9572:	f88d 300a 	strb.w	r3, [sp, #10]
    9576:	f88d 300b 	strb.w	r3, [sp, #11]
    957a:	f88d 300c 	strb.w	r3, [sp, #12]
    957e:	f88d 300d 	strb.w	r3, [sp, #13]
    9582:	f01c fe78 	bl	26276 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9586:	2800      	cmp	r0, #0
    9588:	d0e7      	beq.n	955a <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    958a:	4629      	mov	r1, r5
    958c:	f10d 0011 	add.w	r0, sp, #17
    9590:	f019 fbca 	bl	22d28 <bt_addr_copy>
	net_buf_unref(rsp);
    9594:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    9596:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    959a:	f014 fa3f 	bl	1da1c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    959e:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    95a0:	a904      	add	r1, sp, #16
    95a2:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    95a4:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    95a6:	f7ff fda9 	bl	90fc <id_create.constprop.0>
    95aa:	e7c8      	b.n	953e <bt_setup_public_id_addr+0x2e>
    95ac:	20000000 	.word	0x20000000
    95b0:	00026918 	.word	0x00026918
    95b4:	00026828 	.word	0x00026828
    95b8:	000296cb 	.word	0x000296cb

000095bc <bt_read_static_addr>:
{
    95bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    95be:	4b27      	ldr	r3, [pc, #156]	; (965c <bt_read_static_addr+0xa0>)
    95c0:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    95c4:	f014 0401 	ands.w	r4, r4, #1
{
    95c8:	4605      	mov	r5, r0
    95ca:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    95cc:	d10a      	bne.n	95e4 <bt_read_static_addr+0x28>
    95ce:	4924      	ldr	r1, [pc, #144]	; (9660 <bt_read_static_addr+0xa4>)
    95d0:	4b24      	ldr	r3, [pc, #144]	; (9664 <bt_read_static_addr+0xa8>)
		BT_WARN("Read Static Addresses command not available");
    95d2:	4825      	ldr	r0, [pc, #148]	; (9668 <bt_read_static_addr+0xac>)
    95d4:	1ac9      	subs	r1, r1, r3
    95d6:	08c9      	lsrs	r1, r1, #3
    95d8:	0189      	lsls	r1, r1, #6
    95da:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    95de:	f017 fd57 	bl	21090 <log_0>
    95e2:	e012      	b.n	960a <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    95e4:	aa01      	add	r2, sp, #4
    95e6:	2100      	movs	r1, #0
    95e8:	f64f 4009 	movw	r0, #64521	; 0xfc09
    95ec:	f7fe fdce 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    95f0:	4603      	mov	r3, r0
    95f2:	b168      	cbz	r0, 9610 <bt_read_static_addr+0x54>
    95f4:	4b1b      	ldr	r3, [pc, #108]	; (9664 <bt_read_static_addr+0xa8>)
    95f6:	491a      	ldr	r1, [pc, #104]	; (9660 <bt_read_static_addr+0xa4>)
		BT_WARN("Failed to read static addresses");
    95f8:	481c      	ldr	r0, [pc, #112]	; (966c <bt_read_static_addr+0xb0>)
    95fa:	1ac9      	subs	r1, r1, r3
    95fc:	08c9      	lsrs	r1, r1, #3
    95fe:	0189      	lsls	r1, r1, #6
    9600:	f041 0102 	orr.w	r1, r1, #2
    9604:	f017 fd44 	bl	21090 <log_0>
		return 0;
    9608:	2400      	movs	r4, #0
}
    960a:	4620      	mov	r0, r4
    960c:	b003      	add	sp, #12
    960e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    9610:	9801      	ldr	r0, [sp, #4]
    9612:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    9614:	7854      	ldrb	r4, [r2, #1]
    9616:	f04f 0c16 	mov.w	ip, #22
    961a:	42b4      	cmp	r4, r6
    961c:	bf28      	it	cs
    961e:	4634      	movcs	r4, r6
    9620:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    9624:	42a3      	cmp	r3, r4
    9626:	db0c      	blt.n	9642 <bt_read_static_addr+0x86>
	net_buf_unref(rsp);
    9628:	f014 f9f8 	bl	1da1c <net_buf_unref>
	if (!cnt) {
    962c:	2c00      	cmp	r4, #0
    962e:	d1ec      	bne.n	960a <bt_read_static_addr+0x4e>
    9630:	490b      	ldr	r1, [pc, #44]	; (9660 <bt_read_static_addr+0xa4>)
    9632:	4b0c      	ldr	r3, [pc, #48]	; (9664 <bt_read_static_addr+0xa8>)
		BT_WARN("No static addresses stored in controller");
    9634:	480e      	ldr	r0, [pc, #56]	; (9670 <bt_read_static_addr+0xb4>)
    9636:	1ac9      	subs	r1, r1, r3
    9638:	08c9      	lsrs	r1, r1, #3
    963a:	0189      	lsls	r1, r1, #6
    963c:	f041 0102 	orr.w	r1, r1, #2
    9640:	e7cd      	b.n	95de <bt_read_static_addr+0x22>
    9642:	1c96      	adds	r6, r2, #2
    9644:	fb0c 5103 	mla	r1, ip, r3, r5
    9648:	f856 eb04 	ldr.w	lr, [r6], #4
    964c:	f841 eb04 	str.w	lr, [r1], #4
    9650:	42be      	cmp	r6, r7
    9652:	d1f9      	bne.n	9648 <bt_read_static_addr+0x8c>
    9654:	883e      	ldrh	r6, [r7, #0]
    9656:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    9658:	3301      	adds	r3, #1
    965a:	e7e3      	b.n	9624 <bt_read_static_addr+0x68>
    965c:	20000000 	.word	0x20000000
    9660:	00026918 	.word	0x00026918
    9664:	00026828 	.word	0x00026828
    9668:	000296e9 	.word	0x000296e9
    966c:	00029715 	.word	0x00029715
    9670:	00029735 	.word	0x00029735

00009674 <bt_setup_random_id_addr>:
{
    9674:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.id_count) {
    9676:	4d14      	ldr	r5, [pc, #80]	; (96c8 <bt_setup_random_id_addr+0x54>)
    9678:	79ec      	ldrb	r4, [r5, #7]
{
    967a:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    967c:	b9ec      	cbnz	r4, 96ba <bt_setup_random_id_addr+0x46>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    967e:	2101      	movs	r1, #1
    9680:	a802      	add	r0, sp, #8
    9682:	f7ff ff9b 	bl	95bc <bt_read_static_addr>
    9686:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    9688:	b1b8      	cbz	r0, 96ba <bt_setup_random_id_addr+0x46>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    968a:	2616      	movs	r6, #22
    968c:	b2e2      	uxtb	r2, r4
    968e:	ab02      	add	r3, sp, #8
    9690:	fb06 3102 	mla	r1, r6, r2, r3
    9694:	f10d 0001 	add.w	r0, sp, #1
    9698:	f019 fb46 	bl	22d28 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    969c:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    969e:	4610      	mov	r0, r2
    96a0:	4669      	mov	r1, sp
				addr.type = BT_ADDR_LE_RANDOM;
    96a2:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    96a6:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    96a8:	f7ff fd28 	bl	90fc <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    96ac:	79ea      	ldrb	r2, [r5, #7]
    96ae:	b2e3      	uxtb	r3, r4
    96b0:	429a      	cmp	r2, r3
    96b2:	d8eb      	bhi.n	968c <bt_setup_random_id_addr+0x18>
}
    96b4:	2000      	movs	r0, #0
    96b6:	b008      	add	sp, #32
    96b8:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    96ba:	2100      	movs	r1, #0
    96bc:	4608      	mov	r0, r1
}
    96be:	b008      	add	sp, #32
    96c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
    96c4:	f7ff bee0 	b.w	9488 <bt_id_create>
    96c8:	20000000 	.word	0x20000000

000096cc <init_work>:
{
    96cc:	b510      	push	{r4, lr}
	err = bt_init();
    96ce:	f7f7 f9cf 	bl	a70 <bt_init>
	if (ready_cb) {
    96d2:	4b03      	ldr	r3, [pc, #12]	; (96e0 <init_work+0x14>)
    96d4:	681b      	ldr	r3, [r3, #0]
    96d6:	b113      	cbz	r3, 96de <init_work+0x12>
}
    96d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    96dc:	4718      	bx	r3
}
    96de:	bd10      	pop	{r4, pc}
    96e0:	20001bd4 	.word	0x20001bd4

000096e4 <bt_enable>:
{
    96e4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    96e6:	4d2f      	ldr	r5, [pc, #188]	; (97a4 <bt_enable+0xc0>)
    96e8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    96ec:	b088      	sub	sp, #32
    96ee:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    96f0:	b973      	cbnz	r3, 9710 <bt_enable+0x2c>
    96f2:	4b2d      	ldr	r3, [pc, #180]	; (97a8 <bt_enable+0xc4>)
    96f4:	492d      	ldr	r1, [pc, #180]	; (97ac <bt_enable+0xc8>)
		BT_ERR("No HCI driver registered");
    96f6:	482e      	ldr	r0, [pc, #184]	; (97b0 <bt_enable+0xcc>)
    96f8:	1ac9      	subs	r1, r1, r3
    96fa:	08c9      	lsrs	r1, r1, #3
    96fc:	0189      	lsls	r1, r1, #6
    96fe:	f041 0101 	orr.w	r1, r1, #1
    9702:	f017 fcc5 	bl	21090 <log_0>
		return -ENODEV;
    9706:	f06f 0412 	mvn.w	r4, #18
}
    970a:	4620      	mov	r0, r4
    970c:	b008      	add	sp, #32
    970e:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9710:	2100      	movs	r1, #0
    9712:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9716:	f019 fafc 	bl	22d12 <atomic_test_and_set_bit>
    971a:	2800      	cmp	r0, #0
    971c:	d13e      	bne.n	979c <bt_enable+0xb8>
	ready_cb = cb;
    971e:	4b25      	ldr	r3, [pc, #148]	; (97b4 <bt_enable+0xd0>)
    9720:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9722:	2200      	movs	r2, #0
    9724:	2300      	movs	r3, #0
    9726:	e9cd 2306 	strd	r2, r3, [sp, #24]
    972a:	f06f 0308 	mvn.w	r3, #8
    972e:	e9cd 0302 	strd	r0, r3, [sp, #8]
    9732:	e9cd 0000 	strd	r0, r0, [sp]
    9736:	9004      	str	r0, [sp, #16]
    9738:	4b1f      	ldr	r3, [pc, #124]	; (97b8 <bt_enable+0xd4>)
    973a:	4920      	ldr	r1, [pc, #128]	; (97bc <bt_enable+0xd8>)
    973c:	4820      	ldr	r0, [pc, #128]	; (97c0 <bt_enable+0xdc>)
    973e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9742:	f015 ff63 	bl	1f60c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    9746:	491f      	ldr	r1, [pc, #124]	; (97c4 <bt_enable+0xe0>)
    9748:	481d      	ldr	r0, [pc, #116]	; (97c0 <bt_enable+0xdc>)
    974a:	f01c fb35 	bl	25db8 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    974e:	f7fd fe6f 	bl	7430 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    9752:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    9756:	68db      	ldr	r3, [r3, #12]
    9758:	4798      	blx	r3
	if (err) {
    975a:	4604      	mov	r4, r0
    975c:	b158      	cbz	r0, 9776 <bt_enable+0x92>
    975e:	4b12      	ldr	r3, [pc, #72]	; (97a8 <bt_enable+0xc4>)
    9760:	4a12      	ldr	r2, [pc, #72]	; (97ac <bt_enable+0xc8>)
    9762:	1ad2      	subs	r2, r2, r3
    9764:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    9766:	0192      	lsls	r2, r2, #6
    9768:	4601      	mov	r1, r0
    976a:	f042 0201 	orr.w	r2, r2, #1
    976e:	4816      	ldr	r0, [pc, #88]	; (97c8 <bt_enable+0xe4>)
    9770:	f017 fc9b 	bl	210aa <log_1>
		return err;
    9774:	e7c9      	b.n	970a <bt_enable+0x26>
	if (!cb) {
    9776:	b926      	cbnz	r6, 9782 <bt_enable+0x9e>
}
    9778:	b008      	add	sp, #32
    977a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    977e:	f7f7 b977 	b.w	a70 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9782:	4601      	mov	r1, r0
    9784:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9788:	f019 fac3 	bl	22d12 <atomic_test_and_set_bit>
    978c:	2800      	cmp	r0, #0
    978e:	d1bc      	bne.n	970a <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    9790:	480e      	ldr	r0, [pc, #56]	; (97cc <bt_enable+0xe8>)
    9792:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    9796:	f01c f996 	bl	25ac6 <k_queue_append>
    979a:	e7b6      	b.n	970a <bt_enable+0x26>
		return -EALREADY;
    979c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    97a0:	e7b3      	b.n	970a <bt_enable+0x26>
    97a2:	bf00      	nop
    97a4:	20000000 	.word	0x20000000
    97a8:	00026828 	.word	0x00026828
    97ac:	00026918 	.word	0x00026918
    97b0:	00029892 	.word	0x00029892
    97b4:	20001bd4 	.word	0x20001bd4
    97b8:	00007c01 	.word	0x00007c01
    97bc:	200044e0 	.word	0x200044e0
    97c0:	20001220 	.word	0x20001220
    97c4:	000298ab 	.word	0x000298ab
    97c8:	000298b1 	.word	0x000298b1
    97cc:	20001940 	.word	0x20001940

000097d0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    97d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    97d4:	6906      	ldr	r6, [r0, #16]
{
    97d6:	b08b      	sub	sp, #44	; 0x2c
    97d8:	4698      	mov	r8, r3
	struct bt_conn *conn = NULL;
    97da:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    97dc:	ebb6 0b03 	subs.w	fp, r6, r3
{
    97e0:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    97e2:	4882      	ldr	r0, [pc, #520]	; (99ec <bt_le_adv_start_legacy+0x21c>)
	struct bt_conn *conn = NULL;
    97e4:	9303      	str	r3, [sp, #12]
	bool dir_adv = (param->peer != NULL), scannable;
    97e6:	bf18      	it	ne
    97e8:	f04f 0b01 	movne.w	fp, #1
    97ec:	f019 fa52 	bl	22c94 <atomic_get>
	int err;
	struct bt_le_ext_adv *adv;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    97f0:	0787      	lsls	r7, r0, #30
{
    97f2:	4689      	mov	r9, r1
    97f4:	4692      	mov	sl, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    97f6:	f140 80eb 	bpl.w	99d0 <bt_le_adv_start_legacy+0x200>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    97fa:	4628      	mov	r0, r5
    97fc:	f7fd fec2 	bl	7584 <valid_adv_param>
    9800:	4607      	mov	r7, r0
    9802:	2800      	cmp	r0, #0
    9804:	f000 80e7 	beq.w	99d6 <bt_le_adv_start_legacy+0x206>
    9808:	4878      	ldr	r0, [pc, #480]	; (99ec <bt_le_adv_start_legacy+0x21c>)
    980a:	f019 fa43 	bl	22c94 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    980e:	0504      	lsls	r4, r0, #20
    9810:	d402      	bmi.n	9818 <bt_le_adv_start_legacy+0x48>
    9812:	4876      	ldr	r0, [pc, #472]	; (99ec <bt_le_adv_start_legacy+0x21c>)
    9814:	f019 fa3e 	bl	22c94 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    9818:	2300      	movs	r3, #0
    981a:	e9cd 3307 	strd	r3, r3, [sp, #28]
    981e:	4c74      	ldr	r4, [pc, #464]	; (99f0 <bt_le_adv_start_legacy+0x220>)
    9820:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9824:	68ab      	ldr	r3, [r5, #8]
    9826:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    982a:	68eb      	ldr	r3, [r5, #12]
    982c:	f8ad 301a 	strh.w	r3, [sp, #26]
    9830:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	set_param.channel_map  = 0x07;
    9834:	2307      	movs	r3, #7
    9836:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    983a:	f019 fa2b 	bl	22c94 <atomic_get>
	set_param.filter_policy = get_filter_policy(param->options);

	adv = adv_new_legacy();
	if (!adv || atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    983e:	0640      	lsls	r0, r0, #25
    9840:	f100 80cc 	bmi.w	99dc <bt_le_adv_start_legacy+0x20c>
		return -EALREADY;
	}

	if (adv->id != param->id) {
    9844:	7e22      	ldrb	r2, [r4, #24]
    9846:	782b      	ldrb	r3, [r5, #0]
    9848:	429a      	cmp	r2, r3
    984a:	d005      	beq.n	9858 <bt_le_adv_start_legacy+0x88>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    984c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9850:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9854:	f019 fa2e 	bl	22cb4 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    9858:	7828      	ldrb	r0, [r5, #0]
    985a:	7620      	strb	r0, [r4, #24]
	bt_dev.adv_conn_id = adv->id;
    985c:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    9860:	6869      	ldr	r1, [r5, #4]
    9862:	f10d 031d 	add.w	r3, sp, #29
    9866:	465a      	mov	r2, fp
    9868:	f7fe fdcc 	bl	8404 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    986c:	4604      	mov	r4, r0
    986e:	2800      	cmp	r0, #0
    9870:	d16d      	bne.n	994e <bt_le_adv_start_legacy+0x17e>
		return err;
	}

	if (dir_adv) {
    9872:	2e00      	cmp	r6, #0
    9874:	d049      	beq.n	990a <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    9876:	6929      	ldr	r1, [r5, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    9878:	485e      	ldr	r0, [pc, #376]	; (99f4 <bt_le_adv_start_legacy+0x224>)
    987a:	f019 fa5a 	bl	22d32 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    987e:	686c      	ldr	r4, [r5, #4]
    9880:	07e1      	lsls	r1, r4, #31
    9882:	d54a      	bpl.n	991a <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    9884:	2e00      	cmp	r6, #0
    9886:	d045      	beq.n	9914 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    9888:	f014 0f10 	tst.w	r4, #16
    988c:	bf14      	ite	ne
    988e:	2304      	movne	r3, #4
    9890:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    9892:	6929      	ldr	r1, [r5, #16]
    9894:	f88d 301c 	strb.w	r3, [sp, #28]
    9898:	f10d 001e 	add.w	r0, sp, #30
    989c:	f019 fa49 	bl	22d32 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    98a0:	210f      	movs	r1, #15
    98a2:	f242 0006 	movw	r0, #8198	; 0x2006
    98a6:	f7fe fb09 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    98aa:	4604      	mov	r4, r0
    98ac:	2800      	cmp	r0, #0
    98ae:	f000 8098 	beq.w	99e2 <bt_le_adv_start_legacy+0x212>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    98b2:	220f      	movs	r2, #15
    98b4:	a906      	add	r1, sp, #24
    98b6:	3008      	adds	r0, #8
    98b8:	f01b fded 	bl	25496 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    98bc:	2200      	movs	r2, #0
    98be:	4621      	mov	r1, r4
    98c0:	f242 0006 	movw	r0, #8198	; 0x2006
    98c4:	f7fe fc62 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    98c8:	2800      	cmp	r0, #0
    98ca:	f040 808d 	bne.w	99e8 <bt_le_adv_start_legacy+0x218>
		return err;
	}

	if (!dir_adv) {
    98ce:	b386      	cbz	r6, 9932 <bt_le_adv_start_legacy+0x162>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    98d0:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    98d2:	07da      	lsls	r2, r3, #31
    98d4:	d43f      	bmi.n	9956 <bt_le_adv_start_legacy+0x186>
	return set_le_adv_enable_legacy(adv, enable);
    98d6:	4848      	ldr	r0, [pc, #288]	; (99f8 <bt_le_adv_start_legacy+0x228>)
    98d8:	2101      	movs	r1, #1
    98da:	f7fe fd29 	bl	8330 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    98de:	4604      	mov	r4, r0
    98e0:	2800      	cmp	r0, #0
    98e2:	d06e      	beq.n	99c2 <bt_le_adv_start_legacy+0x1f2>
    98e4:	4b45      	ldr	r3, [pc, #276]	; (99fc <bt_le_adv_start_legacy+0x22c>)
    98e6:	4946      	ldr	r1, [pc, #280]	; (9a00 <bt_le_adv_start_legacy+0x230>)
		BT_ERR("Failed to start advertiser");
    98e8:	4846      	ldr	r0, [pc, #280]	; (9a04 <bt_le_adv_start_legacy+0x234>)
    98ea:	1ac9      	subs	r1, r1, r3
    98ec:	08c9      	lsrs	r1, r1, #3
    98ee:	0189      	lsls	r1, r1, #6
    98f0:	f041 0101 	orr.w	r1, r1, #1
    98f4:	f017 fbcc 	bl	21090 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    98f8:	9803      	ldr	r0, [sp, #12]
    98fa:	b340      	cbz	r0, 994e <bt_le_adv_start_legacy+0x17e>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    98fc:	2100      	movs	r1, #0
    98fe:	f000 ff2b 	bl	a758 <bt_conn_set_state>
			bt_conn_unref(conn);
    9902:	9803      	ldr	r0, [sp, #12]
    9904:	f019 fd54 	bl	233b0 <bt_conn_unref>
    9908:	e021      	b.n	994e <bt_le_adv_start_legacy+0x17e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    990a:	9604      	str	r6, [sp, #16]
    990c:	a904      	add	r1, sp, #16
    990e:	f8cd 6013 	str.w	r6, [sp, #19]
    9912:	e7b1      	b.n	9878 <bt_le_adv_start_legacy+0xa8>
			set_param.type = BT_HCI_ADV_IND;
    9914:	f88d 601c 	strb.w	r6, [sp, #28]
    9918:	e7c2      	b.n	98a0 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    991a:	f1b8 0f00 	cmp.w	r8, #0
    991e:	d106      	bne.n	992e <bt_le_adv_start_legacy+0x15e>
    9920:	f3c4 07c0 	ubfx	r7, r4, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    9924:	f1c7 0303 	rsb	r3, r7, #3
    9928:	f88d 301c 	strb.w	r3, [sp, #28]
    992c:	e7b8      	b.n	98a0 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    992e:	2701      	movs	r7, #1
    9930:	e7f8      	b.n	9924 <bt_le_adv_start_legacy+0x154>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    9932:	686b      	ldr	r3, [r5, #4]
    9934:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    9938:	e9cd 7300 	strd	r7, r3, [sp]
    993c:	4642      	mov	r2, r8
    993e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9940:	4651      	mov	r1, sl
    9942:	4648      	mov	r0, r9
    9944:	f7fe fdda 	bl	84fc <le_adv_update.constprop.0>
		if (err) {
    9948:	4604      	mov	r4, r0
    994a:	2800      	cmp	r0, #0
    994c:	d0c0      	beq.n	98d0 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    994e:	4620      	mov	r0, r4
    9950:	b00b      	add	sp, #44	; 0x2c
    9952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    9956:	4828      	ldr	r0, [pc, #160]	; (99f8 <bt_le_adv_start_legacy+0x228>)
    9958:	a903      	add	r1, sp, #12
    995a:	f7fd ff5d 	bl	7818 <le_adv_start_add_conn>
		if (err) {
    995e:	4604      	mov	r4, r0
    9960:	2800      	cmp	r0, #0
    9962:	d0b8      	beq.n	98d6 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
    9964:	f110 0f0c 	cmn.w	r0, #12
    9968:	d1f1      	bne.n	994e <bt_le_adv_start_legacy+0x17e>
    996a:	2e00      	cmp	r6, #0
    996c:	d1ef      	bne.n	994e <bt_le_adv_start_legacy+0x17e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    996e:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    9970:	079b      	lsls	r3, r3, #30
    9972:	d4ec      	bmi.n	994e <bt_le_adv_start_legacy+0x17e>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9974:	686c      	ldr	r4, [r5, #4]
    9976:	f084 0402 	eor.w	r4, r4, #2
    997a:	f3c4 0440 	ubfx	r4, r4, #1, #1
    997e:	f004 0201 	and.w	r2, r4, #1
    9982:	4821      	ldr	r0, [pc, #132]	; (9a08 <bt_le_adv_start_legacy+0x238>)
    9984:	210c      	movs	r1, #12
    9986:	f019 f9b3 	bl	22cf0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    998a:	686a      	ldr	r2, [r5, #4]
    998c:	481e      	ldr	r0, [pc, #120]	; (9a08 <bt_le_adv_start_legacy+0x238>)
    998e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    9992:	2107      	movs	r1, #7
    9994:	f019 f9ac 	bl	22cf0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    9998:	686a      	ldr	r2, [r5, #4]
    999a:	481b      	ldr	r0, [pc, #108]	; (9a08 <bt_le_adv_start_legacy+0x238>)
    999c:	f002 0201 	and.w	r2, r2, #1
    99a0:	2108      	movs	r1, #8
    99a2:	f019 f9a5 	bl	22cf0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    99a6:	4818      	ldr	r0, [pc, #96]	; (9a08 <bt_le_adv_start_legacy+0x238>)
    99a8:	463a      	mov	r2, r7
    99aa:	2109      	movs	r1, #9
    99ac:	f019 f9a0 	bl	22cf0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    99b0:	686a      	ldr	r2, [r5, #4]
    99b2:	4815      	ldr	r0, [pc, #84]	; (9a08 <bt_le_adv_start_legacy+0x238>)
    99b4:	f3c2 0280 	ubfx	r2, r2, #2, #1
    99b8:	210b      	movs	r1, #11
    99ba:	f019 f999 	bl	22cf0 <atomic_set_bit_to>
	return 0;
    99be:	2400      	movs	r4, #0
    99c0:	e7c5      	b.n	994e <bt_le_adv_start_legacy+0x17e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    99c2:	9803      	ldr	r0, [sp, #12]
    99c4:	b108      	cbz	r0, 99ca <bt_le_adv_start_legacy+0x1fa>
		bt_conn_unref(conn);
    99c6:	f019 fcf3 	bl	233b0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    99ca:	2e00      	cmp	r6, #0
    99cc:	d1d7      	bne.n	997e <bt_le_adv_start_legacy+0x1ae>
    99ce:	e7d1      	b.n	9974 <bt_le_adv_start_legacy+0x1a4>
		return -EAGAIN;
    99d0:	f06f 040a 	mvn.w	r4, #10
    99d4:	e7bb      	b.n	994e <bt_le_adv_start_legacy+0x17e>
		return -EINVAL;
    99d6:	f06f 0415 	mvn.w	r4, #21
    99da:	e7b8      	b.n	994e <bt_le_adv_start_legacy+0x17e>
		return -EALREADY;
    99dc:	f06f 0477 	mvn.w	r4, #119	; 0x77
    99e0:	e7b5      	b.n	994e <bt_le_adv_start_legacy+0x17e>
		return -ENOBUFS;
    99e2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    99e6:	e7b2      	b.n	994e <bt_le_adv_start_legacy+0x17e>
    99e8:	4604      	mov	r4, r0
    99ea:	e7b0      	b.n	994e <bt_le_adv_start_legacy+0x17e>
    99ec:	20000098 	.word	0x20000098
    99f0:	20000000 	.word	0x20000000
    99f4:	20000023 	.word	0x20000023
    99f8:	20000018 	.word	0x20000018
    99fc:	00026828 	.word	0x00026828
    9a00:	00026918 	.word	0x00026918
    9a04:	000298cd 	.word	0x000298cd
    9a08:	2000002c 	.word	0x2000002c

00009a0c <bt_le_adv_stop>:

	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
}

int bt_le_adv_stop(void)
{
    9a0c:	b530      	push	{r4, r5, lr}
    9a0e:	4c2a      	ldr	r4, [pc, #168]	; (9ab8 <bt_le_adv_stop+0xac>)
    9a10:	b085      	sub	sp, #20
    9a12:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9a16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9a1a:	f019 f94b 	bl	22cb4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9a1e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9a22:	f019 f937 	bl	22c94 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9a26:	0641      	lsls	r1, r0, #25
    9a28:	d403      	bmi.n	9a32 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    9a2a:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    9a2c:	4620      	mov	r0, r4
    9a2e:	b005      	add	sp, #20
    9a30:	bd30      	pop	{r4, r5, pc}
    9a32:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9a36:	f019 f92d 	bl	22c94 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9a3a:	05c2      	lsls	r2, r0, #23
    9a3c:	d522      	bpl.n	9a84 <bt_le_adv_stop+0x78>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9a3e:	2300      	movs	r3, #0
    9a40:	4669      	mov	r1, sp
    9a42:	f104 0023 	add.w	r0, r4, #35	; 0x23
    9a46:	9300      	str	r3, [sp, #0]
    9a48:	f8cd 3003 	str.w	r3, [sp, #3]
    9a4c:	f019 f92f 	bl	22cae <bt_addr_le_cmp>
    9a50:	7e25      	ldrb	r5, [r4, #24]
    9a52:	bb60      	cbnz	r0, 9aae <bt_le_adv_stop+0xa2>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    9a54:	4b19      	ldr	r3, [pc, #100]	; (9abc <bt_le_adv_stop+0xb0>)
    9a56:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    9a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
    9a5a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    9a5e:	f8ad 200c 	strh.w	r2, [sp, #12]
    9a62:	9002      	str	r0, [sp, #8]
    9a64:	f88d 300e 	strb.w	r3, [sp, #14]
    9a68:	2204      	movs	r2, #4
    9a6a:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9a6c:	4628      	mov	r0, r5
    9a6e:	f000 fdf7 	bl	a660 <bt_conn_lookup_state_le>
    9a72:	4604      	mov	r4, r0
	if (conn) {
    9a74:	b130      	cbz	r0, 9a84 <bt_le_adv_stop+0x78>
		conn->err = status;
    9a76:	2100      	movs	r1, #0
    9a78:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9a7a:	f000 fe6d 	bl	a758 <bt_conn_set_state>
		bt_conn_unref(conn);
    9a7e:	4620      	mov	r0, r4
    9a80:	f019 fc96 	bl	233b0 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    9a84:	480e      	ldr	r0, [pc, #56]	; (9ac0 <bt_le_adv_stop+0xb4>)
    9a86:	2100      	movs	r1, #0
    9a88:	f7fe fc52 	bl	8330 <set_le_adv_enable_legacy>
		if (err) {
    9a8c:	4604      	mov	r4, r0
    9a8e:	2800      	cmp	r0, #0
    9a90:	d1cc      	bne.n	9a2c <bt_le_adv_stop+0x20>
    9a92:	480c      	ldr	r0, [pc, #48]	; (9ac4 <bt_le_adv_stop+0xb8>)
    9a94:	f019 f8fe 	bl	22c94 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9a98:	0683      	lsls	r3, r0, #26
    9a9a:	d5c6      	bpl.n	9a2a <bt_le_adv_stop+0x1e>
			set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    9a9c:	4620      	mov	r0, r4
    9a9e:	f019 f9c4 	bl	22e2a <set_le_scan_enable.isra.0>
			le_set_private_addr(BT_ID_DEFAULT);
    9aa2:	f019 f973 	bl	22d8c <le_set_private_addr.constprop.0>
			set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    9aa6:	2001      	movs	r0, #1
    9aa8:	f019 f9bf 	bl	22e2a <set_le_scan_enable.isra.0>
    9aac:	e7be      	b.n	9a2c <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9aae:	2205      	movs	r2, #5
    9ab0:	f104 0123 	add.w	r1, r4, #35	; 0x23
    9ab4:	e7da      	b.n	9a6c <bt_le_adv_stop+0x60>
    9ab6:	bf00      	nop
    9ab8:	20000000 	.word	0x20000000
    9abc:	00026a08 	.word	0x00026a08
    9ac0:	20000018 	.word	0x20000018
    9ac4:	20000098 	.word	0x20000098

00009ac8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    9ac8:	b513      	push	{r0, r1, r4, lr}
    9aca:	4818      	ldr	r0, [pc, #96]	; (9b2c <bt_le_adv_resume+0x64>)
    9acc:	f019 f8e2 	bl	22c94 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    9ad0:	04c1      	lsls	r1, r0, #19
    9ad2:	d529      	bpl.n	9b28 <bt_le_adv_resume+0x60>
    9ad4:	4815      	ldr	r0, [pc, #84]	; (9b2c <bt_le_adv_resume+0x64>)
    9ad6:	f019 f8dd 	bl	22c94 <atomic_get>
    9ada:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9adc:	f3c0 1480 	ubfx	r4, r0, #6, #1
    9ae0:	d422      	bmi.n	9b28 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9ae2:	4812      	ldr	r0, [pc, #72]	; (9b2c <bt_le_adv_resume+0x64>)
    9ae4:	f019 f8d6 	bl	22c94 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    9ae8:	05c3      	lsls	r3, r0, #23
    9aea:	d51d      	bpl.n	9b28 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    9aec:	4810      	ldr	r0, [pc, #64]	; (9b30 <bt_le_adv_resume+0x68>)
    9aee:	a901      	add	r1, sp, #4
    9af0:	f7fd fe92 	bl	7818 <le_adv_start_add_conn>
	if (err) {
    9af4:	b9c0      	cbnz	r0, 9b28 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    9af6:	480e      	ldr	r0, [pc, #56]	; (9b30 <bt_le_adv_resume+0x68>)
    9af8:	2101      	movs	r1, #1
    9afa:	f7fe fc19 	bl	8330 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    9afe:	b150      	cbz	r0, 9b16 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9b00:	4621      	mov	r1, r4
    9b02:	9801      	ldr	r0, [sp, #4]
    9b04:	f000 fe28 	bl	a758 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9b08:	4808      	ldr	r0, [pc, #32]	; (9b2c <bt_le_adv_resume+0x64>)
    9b0a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9b0e:	f019 f8d1 	bl	22cb4 <atomic_and>
	return (old & mask) != 0;
    9b12:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    9b16:	9801      	ldr	r0, [sp, #4]
    9b18:	f019 fc4a 	bl	233b0 <bt_conn_unref>
	if (persist_paused) {
    9b1c:	b124      	cbz	r4, 9b28 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9b1e:	4803      	ldr	r0, [pc, #12]	; (9b2c <bt_le_adv_resume+0x64>)
    9b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9b24:	f019 f8d5 	bl	22cd2 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    9b28:	b002      	add	sp, #8
    9b2a:	bd10      	pop	{r4, pc}
    9b2c:	2000002c 	.word	0x2000002c
    9b30:	20000018 	.word	0x20000018

00009b34 <enh_conn_complete>:
{
    9b34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9b38:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    9b3c:	4605      	mov	r5, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9b3e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    9b42:	488e      	ldr	r0, [pc, #568]	; (9d7c <enh_conn_complete+0x248>)
    9b44:	f019 f8b6 	bl	22cb4 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9b48:	0442      	lsls	r2, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9b4a:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9b4e:	d504      	bpl.n	9b5a <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    9b50:	498b      	ldr	r1, [pc, #556]	; (9d80 <enh_conn_complete+0x24c>)
    9b52:	2200      	movs	r2, #0
    9b54:	2002      	movs	r0, #2
    9b56:	f005 fbf5 	bl	f344 <bt_keys_foreach>
	if (evt->status) {
    9b5a:	782c      	ldrb	r4, [r5, #0]
    9b5c:	2c00      	cmp	r4, #0
    9b5e:	d05a      	beq.n	9c16 <enh_conn_complete+0xe2>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9b60:	2c3c      	cmp	r4, #60	; 0x3c
    9b62:	d120      	bne.n	9ba6 <enh_conn_complete+0x72>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9b64:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9b68:	4886      	ldr	r0, [pc, #536]	; (9d84 <enh_conn_complete+0x250>)
    9b6a:	f019 f8a3 	bl	22cb4 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9b6e:	2000      	movs	r0, #0
    9b70:	f7fd ff2a 	bl	79c8 <find_pending_connect.part.0>
		if (!conn) {
    9b74:	4605      	mov	r5, r0
    9b76:	b960      	cbnz	r0, 9b92 <enh_conn_complete+0x5e>
    9b78:	4b83      	ldr	r3, [pc, #524]	; (9d88 <enh_conn_complete+0x254>)
    9b7a:	4984      	ldr	r1, [pc, #528]	; (9d8c <enh_conn_complete+0x258>)
			BT_ERR("No pending slave connection");
    9b7c:	4884      	ldr	r0, [pc, #528]	; (9d90 <enh_conn_complete+0x25c>)
    9b7e:	1ac9      	subs	r1, r1, r3
    9b80:	08c9      	lsrs	r1, r1, #3
    9b82:	0189      	lsls	r1, r1, #6
    9b84:	f041 0101 	orr.w	r1, r1, #1
}
    9b88:	b004      	add	sp, #16
    9b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    9b8e:	f017 ba7f 	b.w	21090 <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    9b92:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9b94:	2100      	movs	r1, #0
    9b96:	f000 fddf 	bl	a758 <bt_conn_set_state>
		bt_conn_unref(conn);
    9b9a:	4628      	mov	r0, r5
}
    9b9c:	b004      	add	sp, #16
    9b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    9ba2:	f019 bc05 	b.w	233b0 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9ba6:	2c02      	cmp	r4, #2
    9ba8:	d127      	bne.n	9bfa <enh_conn_complete+0xc6>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9baa:	2100      	movs	r1, #0
    9bac:	2206      	movs	r2, #6
    9bae:	4608      	mov	r0, r1
    9bb0:	f000 fd56 	bl	a660 <bt_conn_lookup_state_le>
	if (!conn) {
    9bb4:	4605      	mov	r5, r0
    9bb6:	b978      	cbnz	r0, 9bd8 <enh_conn_complete+0xa4>
    9bb8:	4974      	ldr	r1, [pc, #464]	; (9d8c <enh_conn_complete+0x258>)
    9bba:	4b73      	ldr	r3, [pc, #460]	; (9d88 <enh_conn_complete+0x254>)
		BT_ERR("No pending master connection");
    9bbc:	4875      	ldr	r0, [pc, #468]	; (9d94 <enh_conn_complete+0x260>)
    9bbe:	1ac9      	subs	r1, r1, r3
    9bc0:	08c9      	lsrs	r1, r1, #3
    9bc2:	0189      	lsls	r1, r1, #6
    9bc4:	f041 0101 	orr.w	r1, r1, #1
    9bc8:	f017 fa62 	bl	21090 <log_0>
			bt_le_scan_update(false);
    9bcc:	2000      	movs	r0, #0
    9bce:	f7ff f8e7 	bl	8da0 <bt_le_scan_update>
}
    9bd2:	b004      	add	sp, #16
    9bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    9bd8:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9bda:	2100      	movs	r1, #0
    9bdc:	f000 fdbc 	bl	a758 <bt_conn_set_state>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    9be0:	2100      	movs	r1, #0
    9be2:	1d28      	adds	r0, r5, #4
    9be4:	f019 f85c 	bl	22ca0 <atomic_test_bit>
    9be8:	b118      	cbz	r0, 9bf2 <enh_conn_complete+0xbe>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    9bea:	4621      	mov	r1, r4
    9bec:	4628      	mov	r0, r5
    9bee:	f000 fdb3 	bl	a758 <bt_conn_set_state>
	bt_conn_unref(conn);
    9bf2:	4628      	mov	r0, r5
    9bf4:	f019 fbdc 	bl	233b0 <bt_conn_unref>
    9bf8:	e7e8      	b.n	9bcc <enh_conn_complete+0x98>
    9bfa:	4b63      	ldr	r3, [pc, #396]	; (9d88 <enh_conn_complete+0x254>)
    9bfc:	4a63      	ldr	r2, [pc, #396]	; (9d8c <enh_conn_complete+0x258>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    9bfe:	4866      	ldr	r0, [pc, #408]	; (9d98 <enh_conn_complete+0x264>)
    9c00:	1ad2      	subs	r2, r2, r3
    9c02:	08d2      	lsrs	r2, r2, #3
    9c04:	0192      	lsls	r2, r2, #6
    9c06:	f042 0202 	orr.w	r2, r2, #2
    9c0a:	4621      	mov	r1, r4
}
    9c0c:	b004      	add	sp, #16
    9c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    9c12:	f017 ba4a 	b.w	210aa <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9c16:	792b      	ldrb	r3, [r5, #4]
    9c18:	3b02      	subs	r3, #2
    9c1a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    9c1c:	f105 0604 	add.w	r6, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9c20:	d83f      	bhi.n	9ca2 <enh_conn_complete+0x16e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    9c22:	4631      	mov	r1, r6
    9c24:	a802      	add	r0, sp, #8
    9c26:	f019 f884 	bl	22d32 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9c2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9c2e:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9c32:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9c34:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9c38:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9c3c:	f019 f874 	bl	22d28 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    9c40:	2301      	movs	r3, #1
    9c42:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
    9c46:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    9c48:	2800      	cmp	r0, #0
    9c4a:	d13d      	bne.n	9cc8 <enh_conn_complete+0x194>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9c4c:	2206      	movs	r2, #6
    9c4e:	a902      	add	r1, sp, #8
    9c50:	f000 fd06 	bl	a660 <bt_conn_lookup_state_le>
    9c54:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9c56:	78eb      	ldrb	r3, [r5, #3]
    9c58:	2b01      	cmp	r3, #1
    9c5a:	d104      	bne.n	9c66 <enh_conn_complete+0x132>
    9c5c:	4849      	ldr	r0, [pc, #292]	; (9d84 <enh_conn_complete+0x250>)
    9c5e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9c62:	f019 f827 	bl	22cb4 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9c66:	78eb      	ldrb	r3, [r5, #3]
    9c68:	b923      	cbnz	r3, 9c74 <enh_conn_complete+0x140>
    9c6a:	4844      	ldr	r0, [pc, #272]	; (9d7c <enh_conn_complete+0x248>)
    9c6c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    9c70:	f019 f820 	bl	22cb4 <atomic_and>
	if (!conn) {
    9c74:	bb84      	cbnz	r4, 9cd8 <enh_conn_complete+0x1a4>
    9c76:	4a44      	ldr	r2, [pc, #272]	; (9d88 <enh_conn_complete+0x254>)
    9c78:	4c44      	ldr	r4, [pc, #272]	; (9d8c <enh_conn_complete+0x258>)
		BT_ERR("No pending conn for peer %s",
    9c7a:	4630      	mov	r0, r6
    9c7c:	1aa4      	subs	r4, r4, r2
    9c7e:	f7fd fa31 	bl	70e4 <bt_addr_le_str_real>
    9c82:	f7fb fb31 	bl	52e8 <log_strdup>
    9c86:	08e4      	lsrs	r4, r4, #3
    9c88:	01a4      	lsls	r4, r4, #6
    9c8a:	f044 0401 	orr.w	r4, r4, #1
    9c8e:	4601      	mov	r1, r0
    9c90:	4622      	mov	r2, r4
    9c92:	4842      	ldr	r0, [pc, #264]	; (9d9c <enh_conn_complete+0x268>)
    9c94:	f017 fa09 	bl	210aa <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    9c98:	211f      	movs	r1, #31
    9c9a:	4638      	mov	r0, r7
    9c9c:	f019 f935 	bl	22f0a <bt_hci_disconnect>
		return;
    9ca0:	e797      	b.n	9bd2 <enh_conn_complete+0x9e>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    9ca2:	78eb      	ldrb	r3, [r5, #3]
    9ca4:	2b01      	cmp	r3, #1
    9ca6:	bf04      	itt	eq
    9ca8:	4b3d      	ldreq	r3, [pc, #244]	; (9da0 <enh_conn_complete+0x26c>)
    9caa:	f893 4037 	ldrbeq.w	r4, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    9cae:	4631      	mov	r1, r6
    9cb0:	4620      	mov	r0, r4
    9cb2:	f019 f920 	bl	22ef6 <bt_lookup_id_addr>
    9cb6:	4601      	mov	r1, r0
    9cb8:	a802      	add	r0, sp, #8
    9cba:	f019 f83a 	bl	22d32 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    9cbe:	4631      	mov	r1, r6
    9cc0:	4668      	mov	r0, sp
    9cc2:	f019 f836 	bl	22d32 <bt_addr_le_copy>
    9cc6:	e7be      	b.n	9c46 <enh_conn_complete+0x112>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9cc8:	2801      	cmp	r0, #1
    9cca:	d103      	bne.n	9cd4 <enh_conn_complete+0x1a0>
    9ccc:	a802      	add	r0, sp, #8
    9cce:	f7fd fe7b 	bl	79c8 <find_pending_connect.part.0>
    9cd2:	e7bf      	b.n	9c54 <enh_conn_complete+0x120>
	return NULL;
    9cd4:	2400      	movs	r4, #0
    9cd6:	e7be      	b.n	9c56 <enh_conn_complete+0x122>
	conn->handle = handle;
    9cd8:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9cda:	a902      	add	r1, sp, #8
	conn->handle = handle;
    9cdc:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9ce0:	f019 f827 	bl	22d32 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    9ce4:	7e2a      	ldrb	r2, [r5, #24]
    9ce6:	7deb      	ldrb	r3, [r5, #23]
    9ce8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9cec:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    9cf0:	7eaa      	ldrb	r2, [r5, #26]
    9cf2:	7e6b      	ldrb	r3, [r5, #25]
    9cf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9cf8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    9cfc:	7f2a      	ldrb	r2, [r5, #28]
    9cfe:	7eeb      	ldrb	r3, [r5, #27]
    9d00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9d04:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    9d08:	78eb      	ldrb	r3, [r5, #3]
    9d0a:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    9d0c:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9d0e:	2b01      	cmp	r3, #1
	conn->err = 0U;
    9d10:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9d12:	d113      	bne.n	9d3c <enh_conn_complete+0x208>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    9d14:	4669      	mov	r1, sp
    9d16:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    9d1a:	f019 f80a 	bl	22d32 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    9d1e:	7a21      	ldrb	r1, [r4, #8]
    9d20:	4a1f      	ldr	r2, [pc, #124]	; (9da0 <enh_conn_complete+0x26c>)
    9d22:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    9d26:	4411      	add	r1, r2
    9d28:	f104 0096 	add.w	r0, r4, #150	; 0x96
    9d2c:	f019 f801 	bl	22d32 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    9d30:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
    9d34:	065b      	lsls	r3, r3, #25
    9d36:	d501      	bpl.n	9d3c <enh_conn_complete+0x208>
			bt_le_adv_resume();
    9d38:	f7ff fec6 	bl	9ac8 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9d3c:	78e3      	ldrb	r3, [r4, #3]
    9d3e:	b96b      	cbnz	r3, 9d5c <enh_conn_complete+0x228>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    9d40:	4669      	mov	r1, sp
    9d42:	f104 0096 	add.w	r0, r4, #150	; 0x96
    9d46:	f018 fff4 	bl	22d32 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    9d4a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    9d4c:	4b14      	ldr	r3, [pc, #80]	; (9da0 <enh_conn_complete+0x26c>)
					&bt_dev.id_addr[conn->id]);
    9d4e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    9d52:	4419      	add	r1, r3
    9d54:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    9d58:	f018 ffeb 	bl	22d32 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    9d5c:	2107      	movs	r1, #7
    9d5e:	4620      	mov	r0, r4
    9d60:	f000 fcfa 	bl	a758 <bt_conn_set_state>
	conn_auto_initiate(conn);
    9d64:	4620      	mov	r0, r4
    9d66:	f7fe fd1b 	bl	87a0 <conn_auto_initiate>
	bt_conn_unref(conn);
    9d6a:	4620      	mov	r0, r4
    9d6c:	f019 fb20 	bl	233b0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9d70:	78e3      	ldrb	r3, [r4, #3]
    9d72:	2b00      	cmp	r3, #0
    9d74:	f47f af2d 	bne.w	9bd2 <enh_conn_complete+0x9e>
    9d78:	e728      	b.n	9bcc <enh_conn_complete+0x98>
    9d7a:	bf00      	nop
    9d7c:	20000098 	.word	0x20000098
    9d80:	00023007 	.word	0x00023007
    9d84:	2000002c 	.word	0x2000002c
    9d88:	00026828 	.word	0x00026828
    9d8c:	00026918 	.word	0x00026918
    9d90:	000298e8 	.word	0x000298e8
    9d94:	00029904 	.word	0x00029904
    9d98:	00029921 	.word	0x00029921
    9d9c:	0002993a 	.word	0x0002993a
    9da0:	20000000 	.word	0x20000000

00009da4 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    9da4:	b570      	push	{r4, r5, r6, lr}
    9da6:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9da8:	482b      	ldr	r0, [pc, #172]	; (9e58 <bt_le_scan_start+0xb4>)
    9daa:	f018 ff73 	bl	22c94 <atomic_get>
    9dae:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9db0:	0781      	lsls	r1, r0, #30
    9db2:	d54b      	bpl.n	9e4c <bt_le_scan_start+0xa8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    9db4:	782a      	ldrb	r2, [r5, #0]
    9db6:	2a01      	cmp	r2, #1
    9db8:	d903      	bls.n	9dc2 <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    9dba:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    9dbe:	4620      	mov	r0, r4
    9dc0:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    9dc2:	686b      	ldr	r3, [r5, #4]
    9dc4:	f033 030f 	bics.w	r3, r3, #15
    9dc8:	d1f7      	bne.n	9dba <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    9dca:	8928      	ldrh	r0, [r5, #8]
    9dcc:	1f03      	subs	r3, r0, #4
    9dce:	b29b      	uxth	r3, r3
    9dd0:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    9dd4:	42a3      	cmp	r3, r4
    9dd6:	d8f0      	bhi.n	9dba <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    9dd8:	8969      	ldrh	r1, [r5, #10]
    9dda:	1f0b      	subs	r3, r1, #4
    9ddc:	b29b      	uxth	r3, r3
    9dde:	42a3      	cmp	r3, r4
    9de0:	d8eb      	bhi.n	9dba <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    9de2:	4288      	cmp	r0, r1
    9de4:	d3e9      	bcc.n	9dba <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
    9de6:	b942      	cbnz	r2, 9dfa <bt_le_scan_start+0x56>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9de8:	481b      	ldr	r0, [pc, #108]	; (9e58 <bt_le_scan_start+0xb4>)
    9dea:	2106      	movs	r1, #6
    9dec:	f018 ff91 	bl	22d12 <atomic_test_and_set_bit>
    9df0:	4603      	mov	r3, r0
    9df2:	b138      	cbz	r0, 9e04 <bt_le_scan_start+0x60>
		return -EALREADY;
    9df4:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9df8:	e7e1      	b.n	9dbe <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
    9dfa:	f7fe fc39 	bl	8670 <bt_le_scan_random_addr_check>
    9dfe:	2800      	cmp	r0, #0
    9e00:	d1f2      	bne.n	9de8 <bt_le_scan_start+0x44>
    9e02:	e7da      	b.n	9dba <bt_le_scan_start+0x16>
    9e04:	4814      	ldr	r0, [pc, #80]	; (9e58 <bt_le_scan_start+0xb4>)
    9e06:	f018 ff45 	bl	22c94 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9e0a:	0682      	lsls	r2, r0, #26
    9e0c:	d50a      	bpl.n	9e24 <bt_le_scan_start+0x80>
	return set_le_scan_enable_legacy(enable);
    9e0e:	4618      	mov	r0, r3
    9e10:	f7fe fabc 	bl	838c <set_le_scan_enable_legacy>
		if (err) {
    9e14:	4604      	mov	r4, r0
    9e16:	b128      	cbz	r0, 9e24 <bt_le_scan_start+0x80>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9e18:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9e1c:	480e      	ldr	r0, [pc, #56]	; (9e58 <bt_le_scan_start+0xb4>)
    9e1e:	f018 ff49 	bl	22cb4 <atomic_and>
		return err;
    9e22:	e7cc      	b.n	9dbe <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    9e24:	686a      	ldr	r2, [r5, #4]
    9e26:	480c      	ldr	r0, [pc, #48]	; (9e58 <bt_le_scan_start+0xb4>)
    9e28:	f002 0201 	and.w	r2, r2, #1
    9e2c:	2108      	movs	r1, #8
    9e2e:	f018 ff5f 	bl	22cf0 <atomic_set_bit_to>
		if (param->timeout) {
    9e32:	89ab      	ldrh	r3, [r5, #12]
    9e34:	b96b      	cbnz	r3, 9e52 <bt_le_scan_start+0xae>
		err = start_le_scan_legacy(param->type, param->interval,
    9e36:	896a      	ldrh	r2, [r5, #10]
    9e38:	8929      	ldrh	r1, [r5, #8]
    9e3a:	7828      	ldrb	r0, [r5, #0]
    9e3c:	f7fe fbd2 	bl	85e4 <start_le_scan_legacy>
	if (err) {
    9e40:	4604      	mov	r4, r0
    9e42:	2800      	cmp	r0, #0
    9e44:	d1e8      	bne.n	9e18 <bt_le_scan_start+0x74>
	scan_dev_found_cb = cb;
    9e46:	4b05      	ldr	r3, [pc, #20]	; (9e5c <bt_le_scan_start+0xb8>)
    9e48:	601e      	str	r6, [r3, #0]
	return 0;
    9e4a:	e7b8      	b.n	9dbe <bt_le_scan_start+0x1a>
		return -EAGAIN;
    9e4c:	f06f 040a 	mvn.w	r4, #10
    9e50:	e7b5      	b.n	9dbe <bt_le_scan_start+0x1a>
			return -ENOTSUP;
    9e52:	f06f 0485 	mvn.w	r4, #133	; 0x85
    9e56:	e7b2      	b.n	9dbe <bt_le_scan_start+0x1a>
    9e58:	20000098 	.word	0x20000098
    9e5c:	20001be0 	.word	0x20001be0

00009e60 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    9e60:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9e62:	4808      	ldr	r0, [pc, #32]	; (9e84 <bt_le_scan_stop+0x24>)
    9e64:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9e68:	f018 ff24 	bl	22cb4 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9e6c:	0643      	lsls	r3, r0, #25
    9e6e:	d506      	bpl.n	9e7e <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    9e70:	4b05      	ldr	r3, [pc, #20]	; (9e88 <bt_le_scan_stop+0x28>)
    9e72:	2000      	movs	r0, #0
    9e74:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    9e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    9e7a:	f7fe bf91 	b.w	8da0 <bt_le_scan_update>
}
    9e7e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9e82:	bd08      	pop	{r3, pc}
    9e84:	20000098 	.word	0x20000098
    9e88:	20001be0 	.word	0x20001be0

00009e8c <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    9e8c:	b538      	push	{r3, r4, r5, lr}
    9e8e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    9e90:	4805      	ldr	r0, [pc, #20]	; (9ea8 <bt_buf_get_rx+0x1c>)
    9e92:	f01b fa9e 	bl	253d2 <net_buf_alloc_fixed>
#endif

	if (buf) {
    9e96:	4604      	mov	r4, r0
    9e98:	b120      	cbz	r0, 9ea4 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9e9a:	2100      	movs	r1, #0
    9e9c:	3008      	adds	r0, #8
    9e9e:	f01b fabd 	bl	2541c <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
    9ea2:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    9ea4:	4620      	mov	r0, r4
    9ea6:	bd38      	pop	{r3, r4, r5, pc}
    9ea8:	20001098 	.word	0x20001098

00009eac <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    9eac:	b570      	push	{r4, r5, r6, lr}
    9eae:	4602      	mov	r2, r0
    9eb0:	460b      	mov	r3, r1
	__asm__ volatile(
    9eb2:	f04f 0120 	mov.w	r1, #32
    9eb6:	f3ef 8511 	mrs	r5, BASEPRI
    9eba:	f381 8811 	msr	BASEPRI, r1
    9ebe:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    9ec2:	480c      	ldr	r0, [pc, #48]	; (9ef4 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    9ec4:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    9ec6:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
    9eca:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
    9ece:	f385 8811 	msr	BASEPRI, r5
    9ed2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    9ed6:	b924      	cbnz	r4, 9ee2 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    9ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9edc:	2001      	movs	r0, #1
    9ede:	f7ff bfd5 	b.w	9e8c <bt_buf_get_rx>
    9ee2:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9ee4:	f104 0008 	add.w	r0, r4, #8
    9ee8:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    9eea:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9eec:	f01b fa96 	bl	2541c <net_buf_simple_reserve>
}
    9ef0:	4620      	mov	r0, r4
    9ef2:	bd70      	pop	{r4, r5, r6, pc}
    9ef4:	20000000 	.word	0x20000000

00009ef8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
    9ef8:	b570      	push	{r4, r5, r6, lr}
    9efa:	4604      	mov	r4, r0
	switch (evt) {
    9efc:	2c0f      	cmp	r4, #15
{
    9efe:	460d      	mov	r5, r1
    9f00:	4610      	mov	r0, r2
    9f02:	4619      	mov	r1, r3
	switch (evt) {
    9f04:	d805      	bhi.n	9f12 <bt_buf_get_evt+0x1a>
    9f06:	2c0d      	cmp	r4, #13
    9f08:	d912      	bls.n	9f30 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    9f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    9f0e:	f7ff bfcd 	b.w	9eac <bt_buf_get_cmd_complete>
	switch (evt) {
    9f12:	2c13      	cmp	r4, #19
    9f14:	d10c      	bne.n	9f30 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    9f16:	480b      	ldr	r0, [pc, #44]	; (9f44 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    9f18:	f01b fa5b 	bl	253d2 <net_buf_alloc_fixed>
			if (buf) {
    9f1c:	4604      	mov	r4, r0
    9f1e:	b128      	cbz	r0, 9f2c <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    9f20:	2100      	movs	r1, #0
    9f22:	3008      	adds	r0, #8
    9f24:	f01b fa7a 	bl	2541c <net_buf_simple_reserve>
    9f28:	2301      	movs	r3, #1
    9f2a:	7523      	strb	r3, [r4, #20]
}
    9f2c:	4620      	mov	r0, r4
    9f2e:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    9f30:	4602      	mov	r2, r0
    9f32:	460b      	mov	r3, r1
		if (discardable) {
    9f34:	b10d      	cbz	r5, 9f3a <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    9f36:	4804      	ldr	r0, [pc, #16]	; (9f48 <bt_buf_get_evt+0x50>)
    9f38:	e7ee      	b.n	9f18 <bt_buf_get_evt+0x20>
}
    9f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9f3e:	2001      	movs	r0, #1
    9f40:	f7ff bfa4 	b.w	9e8c <bt_buf_get_rx>
    9f44:	200010c0 	.word	0x200010c0
    9f48:	20001020 	.word	0x20001020

00009f4c <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    9f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    9f4e:	4d21      	ldr	r5, [pc, #132]	; (9fd4 <bt_pub_key_gen+0x88>)
    9f50:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    9f54:	f003 0306 	and.w	r3, r3, #6
    9f58:	2b06      	cmp	r3, #6
    9f5a:	d00d      	beq.n	9f78 <bt_pub_key_gen+0x2c>
    9f5c:	4b1e      	ldr	r3, [pc, #120]	; (9fd8 <bt_pub_key_gen+0x8c>)
    9f5e:	491f      	ldr	r1, [pc, #124]	; (9fdc <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    9f60:	481f      	ldr	r0, [pc, #124]	; (9fe0 <bt_pub_key_gen+0x94>)
    9f62:	1ac9      	subs	r1, r1, r3
    9f64:	08c9      	lsrs	r1, r1, #3
    9f66:	0189      	lsls	r1, r1, #6
    9f68:	f041 0102 	orr.w	r1, r1, #2
    9f6c:	f017 f890 	bl	21090 <log_0>
		return -ENOTSUP;
    9f70:	f06f 0485 	mvn.w	r4, #133	; 0x85
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    9f74:	4620      	mov	r0, r4
    9f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    9f78:	4e1a      	ldr	r6, [pc, #104]	; (9fe4 <bt_pub_key_gen+0x98>)
    9f7a:	6833      	ldr	r3, [r6, #0]
    9f7c:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    9f7e:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9f80:	2104      	movs	r1, #4
    9f82:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9f86:	f018 fec4 	bl	22d12 <atomic_test_and_set_bit>
    9f8a:	4607      	mov	r7, r0
    9f8c:	bb00      	cbnz	r0, 9fd0 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f8e:	f06f 0108 	mvn.w	r1, #8
    9f92:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9f96:	f018 fe8d 	bl	22cb4 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    9f9a:	463a      	mov	r2, r7
    9f9c:	4639      	mov	r1, r7
    9f9e:	f242 0025 	movw	r0, #8229	; 0x2025
    9fa2:	f7fe f8f3 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    9fa6:	4604      	mov	r4, r0
    9fa8:	2800      	cmp	r0, #0
    9faa:	d0e3      	beq.n	9f74 <bt_pub_key_gen+0x28>
    9fac:	4b0a      	ldr	r3, [pc, #40]	; (9fd8 <bt_pub_key_gen+0x8c>)
    9fae:	490b      	ldr	r1, [pc, #44]	; (9fdc <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    9fb0:	480d      	ldr	r0, [pc, #52]	; (9fe8 <bt_pub_key_gen+0x9c>)
    9fb2:	1ac9      	subs	r1, r1, r3
    9fb4:	08c9      	lsrs	r1, r1, #3
    9fb6:	0189      	lsls	r1, r1, #6
    9fb8:	f041 0101 	orr.w	r1, r1, #1
    9fbc:	f017 f868 	bl	21090 <log_0>
    9fc0:	f06f 0110 	mvn.w	r1, #16
    9fc4:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9fc8:	f018 fe74 	bl	22cb4 <atomic_and>
		pub_key_cb = NULL;
    9fcc:	6037      	str	r7, [r6, #0]
		return err;
    9fce:	e7d1      	b.n	9f74 <bt_pub_key_gen+0x28>
		return 0;
    9fd0:	2400      	movs	r4, #0
    9fd2:	e7cf      	b.n	9f74 <bt_pub_key_gen+0x28>
    9fd4:	20000000 	.word	0x20000000
    9fd8:	00026828 	.word	0x00026828
    9fdc:	00026918 	.word	0x00026918
    9fe0:	00029956 	.word	0x00029956
    9fe4:	20001bd0 	.word	0x20001bd0
    9fe8:	00029975 	.word	0x00029975

00009fec <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    9fec:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9fee:	4804      	ldr	r0, [pc, #16]	; (a000 <bt_pub_key_get+0x14>)
    9ff0:	f018 fe50 	bl	22c94 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
    9ff4:	f010 0f08 	tst.w	r0, #8
	}

	return NULL;
}
    9ff8:	4802      	ldr	r0, [pc, #8]	; (a004 <bt_pub_key_get+0x18>)
    9ffa:	bf08      	it	eq
    9ffc:	2000      	moveq	r0, #0
    9ffe:	bd08      	pop	{r3, pc}
    a000:	20000098 	.word	0x20000098
    a004:	20003b6e 	.word	0x20003b6e

0000a008 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    a008:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a00a:	4e1c      	ldr	r6, [pc, #112]	; (a07c <bt_dh_key_gen+0x74>)
    a00c:	6833      	ldr	r3, [r6, #0]
{
    a00e:	4605      	mov	r5, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a010:	b113      	cbz	r3, a018 <bt_dh_key_gen+0x10>
		return -EBUSY;
    a012:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    a016:	bd70      	pop	{r4, r5, r6, pc}
    a018:	4819      	ldr	r0, [pc, #100]	; (a080 <bt_dh_key_gen+0x78>)
    a01a:	f018 fe3b 	bl	22c94 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a01e:	06c2      	lsls	r2, r0, #27
    a020:	d4f7      	bmi.n	a012 <bt_dh_key_gen+0xa>
    a022:	4817      	ldr	r0, [pc, #92]	; (a080 <bt_dh_key_gen+0x78>)
    a024:	f018 fe36 	bl	22c94 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a028:	0703      	lsls	r3, r0, #28
    a02a:	d523      	bpl.n	a074 <bt_dh_key_gen+0x6c>
	dh_key_cb = cb;
    a02c:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a02e:	f242 0026 	movw	r0, #8230	; 0x2026
    a032:	2140      	movs	r1, #64	; 0x40
    a034:	f7fd ff42 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
    a038:	4604      	mov	r4, r0
    a03a:	b918      	cbnz	r0, a044 <bt_dh_key_gen+0x3c>
		dh_key_cb = NULL;
    a03c:	6030      	str	r0, [r6, #0]
		return -ENOBUFS;
    a03e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    a042:	e7e8      	b.n	a016 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    a044:	2140      	movs	r1, #64	; 0x40
    a046:	3008      	adds	r0, #8
    a048:	f01b fa1f 	bl	2548a <net_buf_simple_add>
    a04c:	462b      	mov	r3, r5
    a04e:	f105 0240 	add.w	r2, r5, #64	; 0x40
    a052:	f853 1b04 	ldr.w	r1, [r3], #4
    a056:	f840 1b04 	str.w	r1, [r0], #4
    a05a:	4293      	cmp	r3, r2
    a05c:	d1f9      	bne.n	a052 <bt_dh_key_gen+0x4a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a05e:	2200      	movs	r2, #0
    a060:	4621      	mov	r1, r4
    a062:	f242 0026 	movw	r0, #8230	; 0x2026
    a066:	f7fe f891 	bl	818c <bt_hci_cmd_send_sync>
	if (err) {
    a06a:	2800      	cmp	r0, #0
    a06c:	d0d3      	beq.n	a016 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    a06e:	2300      	movs	r3, #0
    a070:	6033      	str	r3, [r6, #0]
		return err;
    a072:	e7d0      	b.n	a016 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    a074:	f06f 007c 	mvn.w	r0, #124	; 0x7c
    a078:	e7cd      	b.n	a016 <bt_dh_key_gen+0xe>
    a07a:	bf00      	nop
    a07c:	20001bcc 	.word	0x20001bcc
    a080:	20000098 	.word	0x20000098

0000a084 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a084:	2300      	movs	r3, #0
	tx->user_data = NULL;
    a086:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    a08a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    a08c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a08e:	4801      	ldr	r0, [pc, #4]	; (a094 <tx_free+0x10>)
    a090:	f01b bd19 	b.w	25ac6 <k_queue_append>
    a094:	20000fc8 	.word	0x20000fc8

0000a098 <notify_connected>:
{
    a098:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a09a:	4b09      	ldr	r3, [pc, #36]	; (a0c0 <notify_connected+0x28>)
    a09c:	681d      	ldr	r5, [r3, #0]
{
    a09e:	4604      	mov	r4, r0
			cb->connected(conn, conn->err);
    a0a0:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    a0a2:	b92d      	cbnz	r5, a0b0 <notify_connected+0x18>
	if (!conn->err) {
    a0a4:	b951      	cbnz	r1, a0bc <notify_connected+0x24>
		bt_gatt_connected(conn);
    a0a6:	4620      	mov	r0, r4
}
    a0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    a0ac:	f003 bb60 	b.w	d770 <bt_gatt_connected>
		if (cb->connected) {
    a0b0:	682b      	ldr	r3, [r5, #0]
    a0b2:	b10b      	cbz	r3, a0b8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    a0b4:	4620      	mov	r0, r4
    a0b6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a0b8:	69ad      	ldr	r5, [r5, #24]
    a0ba:	e7f1      	b.n	a0a0 <notify_connected+0x8>
}
    a0bc:	bd38      	pop	{r3, r4, r5, pc}
    a0be:	bf00      	nop
    a0c0:	20001be8 	.word	0x20001be8

0000a0c4 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    a0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a0c8:	694d      	ldr	r5, [r1, #20]
{
    a0ca:	4604      	mov	r4, r0
    a0cc:	460e      	mov	r6, r1
    a0ce:	4691      	mov	r9, r2
    a0d0:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    a0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a0d6:	4844      	ldr	r0, [pc, #272]	; (a1e8 <send_frag+0x124>)
    a0d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a0dc:	f015 fa26 	bl	1f52c <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a0e0:	7b63      	ldrb	r3, [r4, #13]
    a0e2:	2b07      	cmp	r3, #7
    a0e4:	d151      	bne.n	a18a <send_frag+0xc6>
	__asm__ volatile(
    a0e6:	f04f 0320 	mov.w	r3, #32
    a0ea:	f3ef 8211 	mrs	r2, BASEPRI
    a0ee:	f383 8811 	msr	BASEPRI, r3
    a0f2:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    a0f6:	69a3      	ldr	r3, [r4, #24]
    a0f8:	2d00      	cmp	r5, #0
    a0fa:	d058      	beq.n	a1ae <send_frag+0xea>
	parent->next = child;
    a0fc:	2100      	movs	r1, #0
    a0fe:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a100:	2b00      	cmp	r3, #0
    a102:	d151      	bne.n	a1a8 <send_frag+0xe4>
	list->head = node;
    a104:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a108:	f382 8811 	msr	BASEPRI, r2
    a10c:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
    a110:	2104      	movs	r1, #4
    a112:	f106 0008 	add.w	r0, r6, #8
    a116:	f01b f9d9 	bl	254cc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a11a:	8823      	ldrh	r3, [r4, #0]
    a11c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    a120:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a124:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a126:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a12a:	3b04      	subs	r3, #4
    a12c:	8043      	strh	r3, [r0, #2]
    a12e:	2302      	movs	r3, #2
    a130:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    a132:	4630      	mov	r0, r6
    a134:	f018 ff85 	bl	23042 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    a138:	4601      	mov	r1, r0
    a13a:	2800      	cmp	r0, #0
    a13c:	d051      	beq.n	a1e2 <send_frag+0x11e>
    a13e:	4b2b      	ldr	r3, [pc, #172]	; (a1ec <send_frag+0x128>)
    a140:	4a2b      	ldr	r2, [pc, #172]	; (a1f0 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    a142:	482c      	ldr	r0, [pc, #176]	; (a1f4 <send_frag+0x130>)
    a144:	1ad2      	subs	r2, r2, r3
    a146:	08d2      	lsrs	r2, r2, #3
    a148:	0192      	lsls	r2, r2, #6
    a14a:	f042 0201 	orr.w	r2, r2, #1
    a14e:	f016 ffac 	bl	210aa <log_1>
	__asm__ volatile(
    a152:	f04f 0320 	mov.w	r3, #32
    a156:	f3ef 8011 	mrs	r0, BASEPRI
    a15a:	f383 8811 	msr	BASEPRI, r3
    a15e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    a162:	2d00      	cmp	r5, #0
    a164:	d037      	beq.n	a1d6 <send_frag+0x112>
	return list->head;
    a166:	6963      	ldr	r3, [r4, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a168:	2200      	movs	r2, #0
    a16a:	b153      	cbz	r3, a182 <send_frag+0xbe>
    a16c:	429d      	cmp	r5, r3
    a16e:	d12f      	bne.n	a1d0 <send_frag+0x10c>
	return node->next;
    a170:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    a172:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    a174:	bb3a      	cbnz	r2, a1c6 <send_frag+0x102>
    a176:	428d      	cmp	r5, r1
	list->head = node;
    a178:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    a17a:	d100      	bne.n	a17e <send_frag+0xba>
	list->tail = node;
    a17c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    a17e:	2300      	movs	r3, #0
    a180:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    a182:	f380 8811 	msr	BASEPRI, r0
    a186:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a18a:	4817      	ldr	r0, [pc, #92]	; (a1e8 <send_frag+0x124>)
    a18c:	f015 f9a8 	bl	1f4e0 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    a190:	b115      	cbz	r5, a198 <send_frag+0xd4>
		tx_free(tx);
    a192:	4628      	mov	r0, r5
    a194:	f7ff ff76 	bl	a084 <tx_free>
	}

	if (always_consume) {
    a198:	b11f      	cbz	r7, a1a2 <send_frag+0xde>
		net_buf_unref(buf);
    a19a:	4630      	mov	r0, r6
    a19c:	f013 fc3e 	bl	1da1c <net_buf_unref>
	}
	return false;
    a1a0:	2700      	movs	r7, #0
}
    a1a2:	4638      	mov	r0, r7
    a1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a1a8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a1aa:	61a5      	str	r5, [r4, #24]
}
    a1ac:	e7ac      	b.n	a108 <send_frag+0x44>
		if (tail_tx) {
    a1ae:	b133      	cbz	r3, a1be <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    a1b0:	f103 080c 	add.w	r8, r3, #12
    a1b4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    a1b6:	3301      	adds	r3, #1
    a1b8:	f8c8 3000 	str.w	r3, [r8]
    a1bc:	e7a4      	b.n	a108 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    a1be:	69e3      	ldr	r3, [r4, #28]
    a1c0:	f104 081c 	add.w	r8, r4, #28
    a1c4:	e7f7      	b.n	a1b6 <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    a1c6:	428d      	cmp	r5, r1
	parent->next = child;
    a1c8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a1ca:	bf08      	it	eq
    a1cc:	61a2      	streq	r2, [r4, #24]
}
    a1ce:	e7d6      	b.n	a17e <send_frag+0xba>
	return node->next;
    a1d0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a1d2:	681b      	ldr	r3, [r3, #0]
    a1d4:	e7c9      	b.n	a16a <send_frag+0xa6>
			(*pending_no_cb)--;
    a1d6:	f8d8 3000 	ldr.w	r3, [r8]
    a1da:	3b01      	subs	r3, #1
    a1dc:	f8c8 3000 	str.w	r3, [r8]
    a1e0:	e7cf      	b.n	a182 <send_frag+0xbe>
	return true;
    a1e2:	2701      	movs	r7, #1
    a1e4:	e7dd      	b.n	a1a2 <send_frag+0xde>
    a1e6:	bf00      	nop
    a1e8:	200000d0 	.word	0x200000d0
    a1ec:	00026828 	.word	0x00026828
    a1f0:	00026840 	.word	0x00026840
    a1f4:	00029299 	.word	0x00029299

0000a1f8 <bt_conn_get_pkts>:
}
    a1f8:	4800      	ldr	r0, [pc, #0]	; (a1fc <bt_conn_get_pkts+0x4>)
    a1fa:	4770      	bx	lr
    a1fc:	200000d0 	.word	0x200000d0

0000a200 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a200:	1d03      	adds	r3, r0, #4
{
    a202:	b570      	push	{r4, r5, r6, lr}
    a204:	4604      	mov	r4, r0
    a206:	4618      	mov	r0, r3
    a208:	f018 ff97 	bl	2313a <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a20c:	0582      	lsls	r2, r0, #22
    a20e:	d512      	bpl.n	a236 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    a210:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a214:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    a218:	4291      	cmp	r1, r2
    a21a:	d80c      	bhi.n	a236 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    a21c:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    a220:	4291      	cmp	r1, r2
    a222:	d308      	bcc.n	a236 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
    a224:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    a228:	4291      	cmp	r1, r2
    a22a:	d104      	bne.n	a236 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a22c:	f46f 7100 	mvn.w	r1, #512	; 0x200
    a230:	4618      	mov	r0, r3
    a232:	f018 ff88 	bl	23146 <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
    a236:	4b08      	ldr	r3, [pc, #32]	; (a258 <notify_le_param_updated+0x58>)
    a238:	681d      	ldr	r5, [r3, #0]
    a23a:	b905      	cbnz	r5, a23e <notify_le_param_updated+0x3e>
}
    a23c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a23e:	68ee      	ldr	r6, [r5, #12]
    a240:	b13e      	cbz	r6, a252 <notify_le_param_updated+0x52>
			cb->le_param_updated(conn, conn->le.interval,
    a242:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    a246:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    a24a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    a24e:	4620      	mov	r0, r4
    a250:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a252:	69ad      	ldr	r5, [r5, #24]
    a254:	e7f1      	b.n	a23a <notify_le_param_updated+0x3a>
    a256:	bf00      	nop
    a258:	20001be8 	.word	0x20001be8

0000a25c <le_param_req>:
{
    a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a25e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    a260:	4608      	mov	r0, r1
{
    a262:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a264:	f018 feae 	bl	22fc4 <bt_le_conn_params_valid>
    a268:	4604      	mov	r4, r0
    a26a:	b910      	cbnz	r0, a272 <le_param_req+0x16>
		return false;
    a26c:	2400      	movs	r4, #0
}
    a26e:	4620      	mov	r0, r4
    a270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a272:	4b09      	ldr	r3, [pc, #36]	; (a298 <le_param_req+0x3c>)
    a274:	681e      	ldr	r6, [r3, #0]
    a276:	2e00      	cmp	r6, #0
    a278:	d0f9      	beq.n	a26e <le_param_req+0x12>
		if (!cb->le_param_req) {
    a27a:	68b3      	ldr	r3, [r6, #8]
    a27c:	b90b      	cbnz	r3, a282 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a27e:	69b6      	ldr	r6, [r6, #24]
    a280:	e7f9      	b.n	a276 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a282:	4629      	mov	r1, r5
    a284:	4638      	mov	r0, r7
    a286:	4798      	blx	r3
    a288:	2800      	cmp	r0, #0
    a28a:	d0ef      	beq.n	a26c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a28c:	4628      	mov	r0, r5
    a28e:	f018 fe99 	bl	22fc4 <bt_le_conn_params_valid>
    a292:	2800      	cmp	r0, #0
    a294:	d1f3      	bne.n	a27e <le_param_req+0x22>
    a296:	e7e9      	b.n	a26c <le_param_req+0x10>
    a298:	20001be8 	.word	0x20001be8

0000a29c <bt_conn_identity_resolved>:
{
    a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a29e:	78c3      	ldrb	r3, [r0, #3]
{
    a2a0:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a2a2:	b93b      	cbnz	r3, a2b4 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    a2a4:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    a2a8:	4b08      	ldr	r3, [pc, #32]	; (a2cc <bt_conn_identity_resolved+0x30>)
    a2aa:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a2ac:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    a2b0:	b91d      	cbnz	r5, a2ba <bt_conn_identity_resolved+0x1e>
}
    a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    a2b4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    a2b8:	e7f6      	b.n	a2a8 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    a2ba:	692b      	ldr	r3, [r5, #16]
    a2bc:	b11b      	cbz	r3, a2c6 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a2be:	463a      	mov	r2, r7
    a2c0:	4631      	mov	r1, r6
    a2c2:	4620      	mov	r0, r4
    a2c4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a2c6:	69ad      	ldr	r5, [r5, #24]
    a2c8:	e7f2      	b.n	a2b0 <bt_conn_identity_resolved+0x14>
    a2ca:	bf00      	nop
    a2cc:	20001be8 	.word	0x20001be8

0000a2d0 <bt_conn_security_changed>:
{
    a2d0:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    a2d2:	7a43      	ldrb	r3, [r0, #9]
    a2d4:	7283      	strb	r3, [r0, #10]
{
    a2d6:	4604      	mov	r4, r0
    a2d8:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    a2da:	f019 f8f6 	bl	234ca <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    a2de:	4b06      	ldr	r3, [pc, #24]	; (a2f8 <bt_conn_security_changed+0x28>)
    a2e0:	681d      	ldr	r5, [r3, #0]
    a2e2:	b905      	cbnz	r5, a2e6 <bt_conn_security_changed+0x16>
}
    a2e4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    a2e6:	696b      	ldr	r3, [r5, #20]
    a2e8:	b11b      	cbz	r3, a2f2 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    a2ea:	7a61      	ldrb	r1, [r4, #9]
    a2ec:	4632      	mov	r2, r6
    a2ee:	4620      	mov	r0, r4
    a2f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a2f2:	69ad      	ldr	r5, [r5, #24]
    a2f4:	e7f5      	b.n	a2e2 <bt_conn_security_changed+0x12>
    a2f6:	bf00      	nop
    a2f8:	20001be8 	.word	0x20001be8

0000a2fc <bt_conn_cb_register>:
	cb->_next = callback_list;
    a2fc:	4b02      	ldr	r3, [pc, #8]	; (a308 <bt_conn_cb_register+0xc>)
    a2fe:	681a      	ldr	r2, [r3, #0]
    a300:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    a302:	6018      	str	r0, [r3, #0]
}
    a304:	4770      	bx	lr
    a306:	bf00      	nop
    a308:	20001be8 	.word	0x20001be8

0000a30c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    a30c:	b570      	push	{r4, r5, r6, lr}
    a30e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    a310:	f100 0634 	add.w	r6, r0, #52	; 0x34
    a314:	2200      	movs	r2, #0
    a316:	2300      	movs	r3, #0
    a318:	4630      	mov	r0, r6
    a31a:	f01b f85f 	bl	253dc <net_buf_get>
    a31e:	4605      	mov	r5, r0
    a320:	b958      	cbnz	r0, a33a <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    a322:	4620      	mov	r0, r4
    a324:	f018 fff1 	bl	2330a <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a328:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a32c:	4807      	ldr	r0, [pc, #28]	; (a34c <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    a32e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a332:	2200      	movs	r2, #0
    a334:	2300      	movs	r3, #0
    a336:	f015 ba17 	b.w	1f768 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    a33a:	6968      	ldr	r0, [r5, #20]
    a33c:	b108      	cbz	r0, a342 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    a33e:	f7ff fea1 	bl	a084 <tx_free>
		net_buf_unref(buf);
    a342:	4628      	mov	r0, r5
    a344:	f013 fb6a 	bl	1da1c <net_buf_unref>
    a348:	e7e4      	b.n	a314 <conn_cleanup+0x8>
    a34a:	bf00      	nop
    a34c:	20001940 	.word	0x20001940

0000a350 <bt_conn_recv>:
{
    a350:	b570      	push	{r4, r5, r6, lr}
    a352:	4616      	mov	r6, r2
    a354:	4604      	mov	r4, r0
    a356:	460d      	mov	r5, r1
	tx_notify(conn);
    a358:	f018 ff26 	bl	231a8 <tx_notify>
	switch (flags) {
    a35c:	2e01      	cmp	r6, #1
    a35e:	d01b      	beq.n	a398 <bt_conn_recv+0x48>
    a360:	2e02      	cmp	r6, #2
    a362:	d16c      	bne.n	a43e <bt_conn_recv+0xee>
		len = sys_le16_to_cpu(hdr->len);
    a364:	68ab      	ldr	r3, [r5, #8]
    a366:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    a368:	89e3      	ldrh	r3, [r4, #14]
    a36a:	b163      	cbz	r3, a386 <bt_conn_recv+0x36>
    a36c:	4b3d      	ldr	r3, [pc, #244]	; (a464 <bt_conn_recv+0x114>)
    a36e:	493e      	ldr	r1, [pc, #248]	; (a468 <bt_conn_recv+0x118>)
			BT_ERR("Unexpected first L2CAP frame");
    a370:	483e      	ldr	r0, [pc, #248]	; (a46c <bt_conn_recv+0x11c>)
    a372:	1ac9      	subs	r1, r1, r3
    a374:	08c9      	lsrs	r1, r1, #3
    a376:	0189      	lsls	r1, r1, #6
    a378:	f041 0101 	orr.w	r1, r1, #1
    a37c:	f016 fe88 	bl	21090 <log_0>
			bt_conn_reset_rx_state(conn);
    a380:	4620      	mov	r0, r4
    a382:	f018 ffc2 	bl	2330a <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    a386:	89ab      	ldrh	r3, [r5, #12]
    a388:	1af3      	subs	r3, r6, r3
    a38a:	3304      	adds	r3, #4
    a38c:	b29b      	uxth	r3, r3
    a38e:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    a390:	2b00      	cmp	r3, #0
    a392:	d043      	beq.n	a41c <bt_conn_recv+0xcc>
			conn->rx = buf;
    a394:	6125      	str	r5, [r4, #16]
}
    a396:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    a398:	89e3      	ldrh	r3, [r4, #14]
    a39a:	b98b      	cbnz	r3, a3c0 <bt_conn_recv+0x70>
    a39c:	4932      	ldr	r1, [pc, #200]	; (a468 <bt_conn_recv+0x118>)
    a39e:	4b31      	ldr	r3, [pc, #196]	; (a464 <bt_conn_recv+0x114>)
			BT_ERR("Unexpected L2CAP continuation");
    a3a0:	4833      	ldr	r0, [pc, #204]	; (a470 <bt_conn_recv+0x120>)
    a3a2:	1ac9      	subs	r1, r1, r3
    a3a4:	08c9      	lsrs	r1, r1, #3
    a3a6:	0189      	lsls	r1, r1, #6
    a3a8:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("L2CAP data overflow");
    a3ac:	f016 fe70 	bl	21090 <log_0>
			bt_conn_reset_rx_state(conn);
    a3b0:	4620      	mov	r0, r4
    a3b2:	f018 ffaa 	bl	2330a <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    a3b6:	4628      	mov	r0, r5
}
    a3b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    a3bc:	f013 bb2e 	b.w	1da1c <net_buf_unref>
		if (buf->len > conn->rx_len) {
    a3c0:	89ae      	ldrh	r6, [r5, #12]
    a3c2:	42b3      	cmp	r3, r6
    a3c4:	d208      	bcs.n	a3d8 <bt_conn_recv+0x88>
    a3c6:	4928      	ldr	r1, [pc, #160]	; (a468 <bt_conn_recv+0x118>)
    a3c8:	4b26      	ldr	r3, [pc, #152]	; (a464 <bt_conn_recv+0x114>)
			BT_ERR("L2CAP data overflow");
    a3ca:	482a      	ldr	r0, [pc, #168]	; (a474 <bt_conn_recv+0x124>)
    a3cc:	1ac9      	subs	r1, r1, r3
    a3ce:	08c9      	lsrs	r1, r1, #3
    a3d0:	0189      	lsls	r1, r1, #6
    a3d2:	f041 0101 	orr.w	r1, r1, #1
    a3d6:	e7e9      	b.n	a3ac <bt_conn_recv+0x5c>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    a3d8:	6920      	ldr	r0, [r4, #16]
    a3da:	3008      	adds	r0, #8
    a3dc:	f01b f8a2 	bl	25524 <net_buf_simple_tailroom>
    a3e0:	4286      	cmp	r6, r0
    a3e2:	d908      	bls.n	a3f6 <bt_conn_recv+0xa6>
    a3e4:	4920      	ldr	r1, [pc, #128]	; (a468 <bt_conn_recv+0x118>)
    a3e6:	4b1f      	ldr	r3, [pc, #124]	; (a464 <bt_conn_recv+0x114>)
			BT_ERR("Not enough buffer space for L2CAP data");
    a3e8:	4823      	ldr	r0, [pc, #140]	; (a478 <bt_conn_recv+0x128>)
    a3ea:	1ac9      	subs	r1, r1, r3
    a3ec:	08c9      	lsrs	r1, r1, #3
    a3ee:	0189      	lsls	r1, r1, #6
    a3f0:	f041 0101 	orr.w	r1, r1, #1
    a3f4:	e7da      	b.n	a3ac <bt_conn_recv+0x5c>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    a3f6:	6920      	ldr	r0, [r4, #16]
    a3f8:	89aa      	ldrh	r2, [r5, #12]
    a3fa:	68a9      	ldr	r1, [r5, #8]
    a3fc:	3008      	adds	r0, #8
    a3fe:	f01b f84a 	bl	25496 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    a402:	89e3      	ldrh	r3, [r4, #14]
    a404:	89aa      	ldrh	r2, [r5, #12]
    a406:	1a9b      	subs	r3, r3, r2
    a408:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    a40a:	4628      	mov	r0, r5
    a40c:	f013 fb06 	bl	1da1c <net_buf_unref>
		if (conn->rx_len) {
    a410:	89e3      	ldrh	r3, [r4, #14]
    a412:	2b00      	cmp	r3, #0
    a414:	d1bf      	bne.n	a396 <bt_conn_recv+0x46>
		buf = conn->rx;
    a416:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    a418:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    a41a:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    a41c:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    a41e:	89aa      	ldrh	r2, [r5, #12]
    a420:	8819      	ldrh	r1, [r3, #0]
    a422:	1d0b      	adds	r3, r1, #4
    a424:	4293      	cmp	r3, r2
    a426:	d016      	beq.n	a456 <bt_conn_recv+0x106>
    a428:	480e      	ldr	r0, [pc, #56]	; (a464 <bt_conn_recv+0x114>)
    a42a:	4b0f      	ldr	r3, [pc, #60]	; (a468 <bt_conn_recv+0x118>)
    a42c:	1a1b      	subs	r3, r3, r0
    a42e:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    a430:	019b      	lsls	r3, r3, #6
    a432:	4812      	ldr	r0, [pc, #72]	; (a47c <bt_conn_recv+0x12c>)
    a434:	f043 0301 	orr.w	r3, r3, #1
    a438:	f016 fe4b 	bl	210d2 <log_2>
		net_buf_unref(buf);
    a43c:	e7bb      	b.n	a3b6 <bt_conn_recv+0x66>
    a43e:	4a09      	ldr	r2, [pc, #36]	; (a464 <bt_conn_recv+0x114>)
    a440:	4b09      	ldr	r3, [pc, #36]	; (a468 <bt_conn_recv+0x118>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a442:	480f      	ldr	r0, [pc, #60]	; (a480 <bt_conn_recv+0x130>)
    a444:	1a9b      	subs	r3, r3, r2
    a446:	08db      	lsrs	r3, r3, #3
    a448:	019b      	lsls	r3, r3, #6
    a44a:	f043 0201 	orr.w	r2, r3, #1
    a44e:	4631      	mov	r1, r6
    a450:	f016 fe2b 	bl	210aa <log_1>
		bt_conn_reset_rx_state(conn);
    a454:	e7ac      	b.n	a3b0 <bt_conn_recv+0x60>
	bt_l2cap_recv(conn, buf);
    a456:	4629      	mov	r1, r5
    a458:	4620      	mov	r0, r4
}
    a45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    a45e:	f000 be6b 	b.w	b138 <bt_l2cap_recv>
    a462:	bf00      	nop
    a464:	00026828 	.word	0x00026828
    a468:	00026840 	.word	0x00026840
    a46c:	000299ce 	.word	0x000299ce
    a470:	000299eb 	.word	0x000299eb
    a474:	00029a09 	.word	0x00029a09
    a478:	00029a1d 	.word	0x00029a1d
    a47c:	00029a62 	.word	0x00029a62
    a480:	00029a44 	.word	0x00029a44

0000a484 <bt_conn_send_cb>:
{
    a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a488:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    a48a:	7b43      	ldrb	r3, [r0, #13]
    a48c:	2b07      	cmp	r3, #7
{
    a48e:	4606      	mov	r6, r0
    a490:	460d      	mov	r5, r1
    a492:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    a494:	d00f      	beq.n	a4b6 <bt_conn_send_cb+0x32>
    a496:	4b2a      	ldr	r3, [pc, #168]	; (a540 <bt_conn_send_cb+0xbc>)
    a498:	492a      	ldr	r1, [pc, #168]	; (a544 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    a49a:	482b      	ldr	r0, [pc, #172]	; (a548 <bt_conn_send_cb+0xc4>)
    a49c:	1ac9      	subs	r1, r1, r3
    a49e:	08c9      	lsrs	r1, r1, #3
    a4a0:	0189      	lsls	r1, r1, #6
    a4a2:	f041 0101 	orr.w	r1, r1, #1
    a4a6:	f016 fdf3 	bl	21090 <log_0>
		net_buf_unref(buf);
    a4aa:	4628      	mov	r0, r5
    a4ac:	f013 fab6 	bl	1da1c <net_buf_unref>
			return -ENOTCONN;
    a4b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a4b4:	e020      	b.n	a4f8 <bt_conn_send_cb+0x74>
	if (cb) {
    a4b6:	2a00      	cmp	r2, #0
    a4b8:	d040      	beq.n	a53c <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    a4ba:	f015 f80b 	bl	1f4d4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    a4be:	4b23      	ldr	r3, [pc, #140]	; (a54c <bt_conn_send_cb+0xc8>)
    a4c0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    a4c2:	4823      	ldr	r0, [pc, #140]	; (a550 <bt_conn_send_cb+0xcc>)
    a4c4:	bf07      	ittee	eq
    a4c6:	2200      	moveq	r2, #0
    a4c8:	2300      	moveq	r3, #0
    a4ca:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    a4ce:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    a4d2:	f014 fc81 	bl	1edd8 <z_impl_k_queue_get>
    a4d6:	4604      	mov	r4, r0
		if (!tx) {
    a4d8:	b980      	cbnz	r0, a4fc <bt_conn_send_cb+0x78>
    a4da:	4b19      	ldr	r3, [pc, #100]	; (a540 <bt_conn_send_cb+0xbc>)
    a4dc:	4919      	ldr	r1, [pc, #100]	; (a544 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    a4de:	481d      	ldr	r0, [pc, #116]	; (a554 <bt_conn_send_cb+0xd0>)
    a4e0:	1ac9      	subs	r1, r1, r3
    a4e2:	08c9      	lsrs	r1, r1, #3
    a4e4:	0189      	lsls	r1, r1, #6
    a4e6:	f041 0101 	orr.w	r1, r1, #1
    a4ea:	f016 fdd1 	bl	21090 <log_0>
			net_buf_unref(buf);
    a4ee:	4628      	mov	r0, r5
    a4f0:	f013 fa94 	bl	1da1c <net_buf_unref>
			return -ENOBUFS;
    a4f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    a4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a4fc:	7b73      	ldrb	r3, [r6, #13]
    a4fe:	2b07      	cmp	r3, #7
    a500:	d010      	beq.n	a524 <bt_conn_send_cb+0xa0>
    a502:	4b0f      	ldr	r3, [pc, #60]	; (a540 <bt_conn_send_cb+0xbc>)
    a504:	490f      	ldr	r1, [pc, #60]	; (a544 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    a506:	4814      	ldr	r0, [pc, #80]	; (a558 <bt_conn_send_cb+0xd4>)
    a508:	1ac9      	subs	r1, r1, r3
    a50a:	08c9      	lsrs	r1, r1, #3
    a50c:	0189      	lsls	r1, r1, #6
    a50e:	f041 0102 	orr.w	r1, r1, #2
    a512:	f016 fdbd 	bl	21090 <log_0>
			net_buf_unref(buf);
    a516:	4628      	mov	r0, r5
    a518:	f013 fa80 	bl	1da1c <net_buf_unref>
			tx_free(tx);
    a51c:	4620      	mov	r0, r4
    a51e:	f7ff fdb1 	bl	a084 <tx_free>
    a522:	e7c5      	b.n	a4b0 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    a524:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a526:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    a52a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a52c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    a52e:	f106 0034 	add.w	r0, r6, #52	; 0x34
    a532:	4629      	mov	r1, r5
    a534:	f01a ff76 	bl	25424 <net_buf_put>
	return 0;
    a538:	2000      	movs	r0, #0
    a53a:	e7dd      	b.n	a4f8 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    a53c:	614a      	str	r2, [r1, #20]
    a53e:	e7f6      	b.n	a52e <bt_conn_send_cb+0xaa>
    a540:	00026828 	.word	0x00026828
    a544:	00026840 	.word	0x00026840
    a548:	00029a7e 	.word	0x00029a7e
    a54c:	20001958 	.word	0x20001958
    a550:	20000fc8 	.word	0x20000fc8
    a554:	00029a8d 	.word	0x00029a8d
    a558:	00029aab 	.word	0x00029aab

0000a55c <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    a55c:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    a55e:	4b16      	ldr	r3, [pc, #88]	; (a5b8 <bt_conn_prepare_events+0x5c>)
	if (!atomic_get(&conn->ref)) {
    a560:	4c16      	ldr	r4, [pc, #88]	; (a5bc <bt_conn_prepare_events+0x60>)
	conn_change.signaled = 0U;
    a562:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a564:	2101      	movs	r1, #1
{
    a566:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    a568:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a56a:	f01b fe4a 	bl	26202 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    a56e:	f104 0054 	add.w	r0, r4, #84	; 0x54
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    a572:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    a576:	f018 fde0 	bl	2313a <atomic_get>
    a57a:	b908      	cbnz	r0, a580 <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    a57c:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    a57e:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a580:	7b63      	ldrb	r3, [r4, #13]
    a582:	b953      	cbnz	r3, a59a <bt_conn_prepare_events+0x3e>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a584:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a588:	1d20      	adds	r0, r4, #4
    a58a:	f018 fddc 	bl	23146 <atomic_and>
    a58e:	0643      	lsls	r3, r0, #25
    a590:	d503      	bpl.n	a59a <bt_conn_prepare_events+0x3e>
		conn_cleanup(conn);
    a592:	4620      	mov	r0, r4
    a594:	f7ff feba 	bl	a30c <conn_cleanup>
    a598:	e7f0      	b.n	a57c <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    a59a:	7b63      	ldrb	r3, [r4, #13]
    a59c:	2b07      	cmp	r3, #7
    a59e:	d1ed      	bne.n	a57c <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    a5a0:	4b07      	ldr	r3, [pc, #28]	; (a5c0 <bt_conn_prepare_events+0x64>)
    a5a2:	4630      	mov	r0, r6
    a5a4:	2200      	movs	r2, #0
    a5a6:	2104      	movs	r1, #4
    a5a8:	f01b fe2b 	bl	26202 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    a5ac:	2301      	movs	r3, #1
    a5ae:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    a5b2:	2002      	movs	r0, #2
	return ev_count;
    a5b4:	e7e3      	b.n	a57e <bt_conn_prepare_events+0x22>
    a5b6:	bf00      	nop
    a5b8:	2000025c 	.word	0x2000025c
    a5bc:	200012a0 	.word	0x200012a0
    a5c0:	200012d4 	.word	0x200012d4

0000a5c4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    a5c4:	b570      	push	{r4, r5, r6, lr}
    a5c6:	4606      	mov	r6, r0
    a5c8:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    a5ca:	480f      	ldr	r0, [pc, #60]	; (a608 <bt_conn_add_le+0x44>)
    a5cc:	2101      	movs	r1, #1
    a5ce:	f018 fe11 	bl	231f4 <bt_conn_new>
	if (!conn) {
    a5d2:	4604      	mov	r4, r0
    a5d4:	b1a8      	cbz	r0, a602 <bt_conn_add_le+0x3e>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    a5d6:	490d      	ldr	r1, [pc, #52]	; (a60c <bt_conn_add_le+0x48>)
    a5d8:	3058      	adds	r0, #88	; 0x58
    a5da:	f01b fc58 	bl	25e8e <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a5de:	4a0c      	ldr	r2, [pc, #48]	; (a610 <bt_conn_add_le+0x4c>)

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    a5e0:	7226      	strb	r6, [r4, #8]
    a5e2:	2300      	movs	r3, #0
    a5e4:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    a5e8:	62a3      	str	r3, [r4, #40]	; 0x28
	bt_addr_le_copy(&conn->le.dst, peer);
    a5ea:	4629      	mov	r1, r5
    a5ec:	f104 0088 	add.w	r0, r4, #136	; 0x88
    a5f0:	f018 fdc7 	bl	23182 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    a5f4:	2301      	movs	r3, #1
    a5f6:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    a5f8:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    a5fa:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a5fc:	4b05      	ldr	r3, [pc, #20]	; (a614 <bt_conn_add_le+0x50>)
    a5fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    a602:	4620      	mov	r0, r4
    a604:	bd70      	pop	{r4, r5, r6, pc}
    a606:	bf00      	nop
    a608:	200012a0 	.word	0x200012a0
    a60c:	0000a6f9 	.word	0x0000a6f9
    a610:	000231ef 	.word	0x000231ef
    a614:	00280018 	.word	0x00280018

0000a618 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    a618:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    a61a:	2101      	movs	r1, #1
    a61c:	4801      	ldr	r0, [pc, #4]	; (a624 <bt_conn_lookup_handle+0xc>)
    a61e:	f018 be7f 	b.w	23320 <conn_lookup_handle>
    a622:	bf00      	nop
    a624:	200012a0 	.word	0x200012a0

0000a628 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    a628:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		if (!atomic_get(&acl_conns[i].ref)) {
    a62a:	4c0c      	ldr	r4, [pc, #48]	; (a65c <bt_conn_lookup_addr_le+0x34>)
{
    a62c:	4603      	mov	r3, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    a62e:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    a632:	460a      	mov	r2, r1
		if (!atomic_get(&acl_conns[i].ref)) {
    a634:	f018 fd81 	bl	2313a <atomic_get>
    a638:	b908      	cbnz	r0, a63e <bt_conn_lookup_addr_le+0x16>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
    a63a:	2000      	movs	r0, #0
}
    a63c:	bd10      	pop	{r4, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
    a63e:	78a1      	ldrb	r1, [r4, #2]
    a640:	2901      	cmp	r1, #1
    a642:	d1fa      	bne.n	a63a <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    a644:	4619      	mov	r1, r3
    a646:	4620      	mov	r0, r4
    a648:	f018 fe8b 	bl	23362 <bt_conn_is_peer_addr_le>
    a64c:	2800      	cmp	r0, #0
    a64e:	d0f4      	beq.n	a63a <bt_conn_lookup_addr_le+0x12>
#endif /* defined(CONFIG_BT_ISO) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
    a650:	f104 0054 	add.w	r0, r4, #84	; 0x54
    a654:	f018 fd9c 	bl	23190 <atomic_inc.isra.0>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    a658:	4620      	mov	r0, r4
			return bt_conn_ref(&acl_conns[i]);
    a65a:	e7ef      	b.n	a63c <bt_conn_lookup_addr_le+0x14>
    a65c:	200012a0 	.word	0x200012a0

0000a660 <bt_conn_lookup_state_le>:
{
    a660:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
    a662:	4c10      	ldr	r4, [pc, #64]	; (a6a4 <bt_conn_lookup_state_le+0x44>)
{
    a664:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    a666:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    a66a:	4616      	mov	r6, r2
		if (!atomic_get(&acl_conns[i].ref)) {
    a66c:	f018 fd65 	bl	2313a <atomic_get>
    a670:	b908      	cbnz	r0, a676 <bt_conn_lookup_state_le+0x16>
	return NULL;
    a672:	2000      	movs	r0, #0
}
    a674:	bd70      	pop	{r4, r5, r6, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
    a676:	78a3      	ldrb	r3, [r4, #2]
    a678:	2b01      	cmp	r3, #1
    a67a:	d1fa      	bne.n	a672 <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    a67c:	b951      	cbnz	r1, a694 <bt_conn_lookup_state_le+0x34>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
    a67e:	7b63      	ldrb	r3, [r4, #13]
    a680:	42b3      	cmp	r3, r6
    a682:	d1f6      	bne.n	a672 <bt_conn_lookup_state_le+0x12>
    a684:	7a23      	ldrb	r3, [r4, #8]
    a686:	42ab      	cmp	r3, r5
    a688:	d1f3      	bne.n	a672 <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    a68a:	4807      	ldr	r0, [pc, #28]	; (a6a8 <bt_conn_lookup_state_le+0x48>)
    a68c:	f018 fd80 	bl	23190 <atomic_inc.isra.0>
			return bt_conn_ref(&acl_conns[i]);
    a690:	3854      	subs	r0, #84	; 0x54
    a692:	e7ef      	b.n	a674 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    a694:	460a      	mov	r2, r1
    a696:	4620      	mov	r0, r4
    a698:	4629      	mov	r1, r5
    a69a:	f018 fe62 	bl	23362 <bt_conn_is_peer_addr_le>
    a69e:	2800      	cmp	r0, #0
    a6a0:	d1ed      	bne.n	a67e <bt_conn_lookup_state_le+0x1e>
    a6a2:	e7e6      	b.n	a672 <bt_conn_lookup_state_le+0x12>
    a6a4:	200012a0 	.word	0x200012a0
    a6a8:	200012f4 	.word	0x200012f4

0000a6ac <bt_conn_exists_le>:
{
    a6ac:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    a6ae:	f7ff ffbb 	bl	a628 <bt_conn_lookup_addr_le>
	if (conn) {
    a6b2:	4604      	mov	r4, r0
    a6b4:	b1a0      	cbz	r0, a6e0 <bt_conn_exists_le+0x34>
    a6b6:	4b0b      	ldr	r3, [pc, #44]	; (a6e4 <bt_conn_exists_le+0x38>)
    a6b8:	4a0b      	ldr	r2, [pc, #44]	; (a6e8 <bt_conn_exists_le+0x3c>)
    a6ba:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    a6bc:	7b43      	ldrb	r3, [r0, #13]
    a6be:	480b      	ldr	r0, [pc, #44]	; (a6ec <bt_conn_exists_le+0x40>)
    a6c0:	2b08      	cmp	r3, #8
    a6c2:	bf96      	itet	ls
    a6c4:	490a      	ldrls	r1, [pc, #40]	; (a6f0 <bt_conn_exists_le+0x44>)
    a6c6:	490b      	ldrhi	r1, [pc, #44]	; (a6f4 <bt_conn_exists_le+0x48>)
    a6c8:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    a6cc:	08d2      	lsrs	r2, r2, #3
    a6ce:	0192      	lsls	r2, r2, #6
    a6d0:	f042 0202 	orr.w	r2, r2, #2
    a6d4:	f016 fce9 	bl	210aa <log_1>
		bt_conn_unref(conn);
    a6d8:	4620      	mov	r0, r4
    a6da:	f018 fe69 	bl	233b0 <bt_conn_unref>
		return true;
    a6de:	2001      	movs	r0, #1
}
    a6e0:	bd10      	pop	{r4, pc}
    a6e2:	bf00      	nop
    a6e4:	00026828 	.word	0x00026828
    a6e8:	00026840 	.word	0x00026840
    a6ec:	00029adb 	.word	0x00029adb
    a6f0:	00026f6c 	.word	0x00026f6c
    a6f4:	00029ad1 	.word	0x00029ad1

0000a6f8 <conn_update_timeout>:
{
    a6f8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    a6fa:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    a6fe:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED) {
    a700:	b9a3      	cbnz	r3, a72c <conn_update_timeout+0x34>
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    a702:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
		bt_l2cap_disconnected(conn);
    a706:	4630      	mov	r0, r6
    a708:	f018 fec9 	bl	2349e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a70c:	4b11      	ldr	r3, [pc, #68]	; (a754 <conn_update_timeout+0x5c>)
    a70e:	681d      	ldr	r5, [r3, #0]
    a710:	b925      	cbnz	r5, a71c <conn_update_timeout+0x24>
		bt_conn_unref(conn);
    a712:	4630      	mov	r0, r6
}
    a714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    a718:	f018 be4a 	b.w	233b0 <bt_conn_unref>
		if (cb->disconnected) {
    a71c:	686b      	ldr	r3, [r5, #4]
    a71e:	b11b      	cbz	r3, a728 <conn_update_timeout+0x30>
			cb->disconnected(conn, conn->err);
    a720:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    a724:	4630      	mov	r0, r6
    a726:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a728:	69ad      	ldr	r5, [r5, #24]
    a72a:	e7f1      	b.n	a710 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    a72c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    a730:	2b01      	cmp	r3, #1
    a732:	d10d      	bne.n	a750 <conn_update_timeout+0x58>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a734:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    a738:	b91b      	cbnz	r3, a742 <conn_update_timeout+0x4a>
}
    a73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
    a73e:	f7fe b80b 	b.w	8758 <bt_le_create_conn_cancel>
}
    a742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a746:	f44f 7180 	mov.w	r1, #256	; 0x100
    a74a:	3854      	subs	r0, #84	; 0x54
    a74c:	f018 bd0a 	b.w	23164 <atomic_or>
    a750:	bd70      	pop	{r4, r5, r6, pc}
    a752:	bf00      	nop
    a754:	20001be8 	.word	0x20001be8

0000a758 <bt_conn_set_state>:
{
    a758:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    a75a:	7b46      	ldrb	r6, [r0, #13]
    a75c:	428e      	cmp	r6, r1
{
    a75e:	4604      	mov	r4, r0
    a760:	460d      	mov	r5, r1
	if (conn->state == state) {
    a762:	d112      	bne.n	a78a <bt_conn_set_state+0x32>
    a764:	4b73      	ldr	r3, [pc, #460]	; (a934 <bt_conn_set_state+0x1dc>)
    a766:	4a74      	ldr	r2, [pc, #464]	; (a938 <bt_conn_set_state+0x1e0>)
		BT_WARN("no transition %s", state2str(state));
    a768:	4874      	ldr	r0, [pc, #464]	; (a93c <bt_conn_set_state+0x1e4>)
    a76a:	2e08      	cmp	r6, #8
    a76c:	eba2 0203 	sub.w	r2, r2, r3
    a770:	bf96      	itet	ls
    a772:	4b73      	ldrls	r3, [pc, #460]	; (a940 <bt_conn_set_state+0x1e8>)
    a774:	4973      	ldrhi	r1, [pc, #460]	; (a944 <bt_conn_set_state+0x1ec>)
    a776:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    a77a:	08d2      	lsrs	r2, r2, #3
    a77c:	0192      	lsls	r2, r2, #6
    a77e:	f042 0202 	orr.w	r2, r2, #2
}
    a782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    a786:	f016 bc90 	b.w	210aa <log_1>
	conn->state = state;
    a78a:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    a78c:	b166      	cbz	r6, a7a8 <bt_conn_set_state+0x50>
    a78e:	2e06      	cmp	r6, #6
    a790:	d00e      	beq.n	a7b0 <bt_conn_set_state+0x58>
	switch (conn->state) {
    a792:	7b63      	ldrb	r3, [r4, #13]
    a794:	2b08      	cmp	r3, #8
    a796:	f200 80c1 	bhi.w	a91c <bt_conn_set_state+0x1c4>
    a79a:	e8df f003 	tbb	[pc, r3]
    a79e:	103f      	.short	0x103f
    a7a0:	c9c9c9c9 	.word	0xc9c9c9c9
    a7a4:	2884      	.short	0x2884
    a7a6:	c9          	.byte	0xc9
    a7a7:	00          	.byte	0x00
	atomic_val_t old = atomic_inc(&conn->ref);
    a7a8:	3054      	adds	r0, #84	; 0x54
    a7aa:	f018 fcf1 	bl	23190 <atomic_inc.isra.0>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	return conn;
    a7ae:	e7f0      	b.n	a792 <bt_conn_set_state+0x3a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a7b0:	7883      	ldrb	r3, [r0, #2]
    a7b2:	2b01      	cmp	r3, #1
    a7b4:	d1ed      	bne.n	a792 <bt_conn_set_state+0x3a>
			k_delayed_work_cancel(&conn->update_work);
    a7b6:	3058      	adds	r0, #88	; 0x58
    a7b8:	f01b fb71 	bl	25e9e <k_delayed_work_cancel>
    a7bc:	e7e9      	b.n	a792 <bt_conn_set_state+0x3a>
	z_impl_k_sem_give(sem);
    a7be:	4d62      	ldr	r5, [pc, #392]	; (a948 <bt_conn_set_state+0x1f0>)
		tx->pending_no_cb = 0U;
    a7c0:	2600      	movs	r6, #0
	__asm__ volatile(
    a7c2:	f04f 0320 	mov.w	r3, #32
    a7c6:	f3ef 8211 	mrs	r2, BASEPRI
    a7ca:	f383 8811 	msr	BASEPRI, r3
    a7ce:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    a7d2:	69e3      	ldr	r3, [r4, #28]
    a7d4:	2b00      	cmp	r3, #0
    a7d6:	f000 8082 	beq.w	a8de <bt_conn_set_state+0x186>
			conn->pending_no_cb--;
    a7da:	3b01      	subs	r3, #1
    a7dc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    a7de:	f382 8811 	msr	BASEPRI, r2
    a7e2:	f3bf 8f6f 	isb	sy
    a7e6:	4628      	mov	r0, r5
    a7e8:	f014 fe7a 	bl	1f4e0 <z_impl_k_sem_give>
}
    a7ec:	e7e9      	b.n	a7c2 <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a7ee:	78a3      	ldrb	r3, [r4, #2]
    a7f0:	2b04      	cmp	r3, #4
    a7f2:	f000 809d 	beq.w	a930 <bt_conn_set_state+0x1d8>
	z_impl_k_queue_init(queue);
    a7f6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a7fa:	f01b f958 	bl	25aae <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a7fe:	2100      	movs	r1, #0
    a800:	4852      	ldr	r0, [pc, #328]	; (a94c <bt_conn_set_state+0x1f4>)
    a802:	f015 f9ef 	bl	1fbe4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    a806:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    a808:	4620      	mov	r0, r4
	list->tail = NULL;
    a80a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    a80e:	f000 fb85 	bl	af1c <bt_l2cap_connected>
		notify_connected(conn);
    a812:	4620      	mov	r0, r4
}
    a814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    a818:	f7ff bc3e 	b.w	a098 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a81c:	78a3      	ldrb	r3, [r4, #2]
    a81e:	2b04      	cmp	r3, #4
    a820:	d104      	bne.n	a82c <bt_conn_set_state+0xd4>
			bt_conn_unref(conn);
    a822:	4620      	mov	r0, r4
}
    a824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    a828:	f018 bdc2 	b.w	233b0 <bt_conn_unref>
		switch (old_state) {
    a82c:	2e08      	cmp	r6, #8
    a82e:	d87f      	bhi.n	a930 <bt_conn_set_state+0x1d8>
    a830:	a301      	add	r3, pc, #4	; (adr r3, a838 <bt_conn_set_state+0xe0>)
    a832:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    a836:	bf00      	nop
    a838:	0000a893 	.word	0x0000a893
    a83c:	0000a85d 	.word	0x0000a85d
    a840:	0000a885 	.word	0x0000a885
    a844:	0000a823 	.word	0x0000a823
    a848:	0000a823 	.word	0x0000a823
    a84c:	0000a885 	.word	0x0000a885
    a850:	0000a885 	.word	0x0000a885
    a854:	0000a893 	.word	0x0000a893
    a858:	0000a893 	.word	0x0000a893
			tx_notify(conn);
    a85c:	4620      	mov	r0, r4
    a85e:	f018 fca3 	bl	231a8 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    a862:	78a3      	ldrb	r3, [r4, #2]
    a864:	2b01      	cmp	r3, #1
    a866:	d103      	bne.n	a870 <bt_conn_set_state+0x118>
				k_delayed_work_cancel(&conn->update_work);
    a868:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a86c:	f01b fb17 	bl	25e9e <k_delayed_work_cancel>
    a870:	2140      	movs	r1, #64	; 0x40
    a872:	1d20      	adds	r0, r4, #4
    a874:	f018 fc76 	bl	23164 <atomic_or>
    a878:	4834      	ldr	r0, [pc, #208]	; (a94c <bt_conn_set_state+0x1f4>)
}
    a87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a87e:	2100      	movs	r1, #0
    a880:	f015 b9b0 	b.w	1fbe4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    a884:	7b23      	ldrb	r3, [r4, #12]
    a886:	2b00      	cmp	r3, #0
    a888:	d0cb      	beq.n	a822 <bt_conn_set_state+0xca>
				notify_connected(conn);
    a88a:	4620      	mov	r0, r4
    a88c:	f7ff fc04 	bl	a098 <notify_connected>
    a890:	e7c7      	b.n	a822 <bt_conn_set_state+0xca>
    a892:	4a29      	ldr	r2, [pc, #164]	; (a938 <bt_conn_set_state+0x1e0>)
    a894:	4b27      	ldr	r3, [pc, #156]	; (a934 <bt_conn_set_state+0x1dc>)
			BT_WARN("Invalid (%u) old state", state);
    a896:	482e      	ldr	r0, [pc, #184]	; (a950 <bt_conn_set_state+0x1f8>)
    a898:	1ad2      	subs	r2, r2, r3
    a89a:	08d2      	lsrs	r2, r2, #3
    a89c:	0192      	lsls	r2, r2, #6
    a89e:	f042 0202 	orr.w	r2, r2, #2
    a8a2:	4629      	mov	r1, r5
    a8a4:	e76d      	b.n	a782 <bt_conn_set_state+0x2a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a8a6:	78a3      	ldrb	r3, [r4, #2]
    a8a8:	2b01      	cmp	r3, #1
    a8aa:	d141      	bne.n	a930 <bt_conn_set_state+0x1d8>
				K_MSEC(10 * bt_dev.create_param.timeout));
    a8ac:	4b29      	ldr	r3, [pc, #164]	; (a954 <bt_conn_set_state+0x1fc>)
    a8ae:	8a9d      	ldrh	r5, [r3, #20]
    a8b0:	230a      	movs	r3, #10
    a8b2:	435d      	muls	r5, r3
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    a8b4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a8b8:	f240 30e7 	movw	r0, #999	; 0x3e7
    a8bc:	2100      	movs	r1, #0
    a8be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a8c2:	2300      	movs	r3, #0
    a8c4:	fbc5 0106 	smlal	r0, r1, r5, r6
    a8c8:	f7f5 ff3e 	bl	748 <__aeabi_uldivmod>
    a8cc:	4602      	mov	r2, r0
    a8ce:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a8d0:	4821      	ldr	r0, [pc, #132]	; (a958 <bt_conn_set_state+0x200>)
    a8d2:	f104 0158 	add.w	r1, r4, #88	; 0x58
}
    a8d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a8da:	f014 bf45 	b.w	1f768 <k_delayed_work_submit_to_queue>
	return list->head;
    a8de:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a8e0:	b128      	cbz	r0, a8ee <bt_conn_set_state+0x196>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a8e2:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    a8e4:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    a8e6:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a8e8:	4288      	cmp	r0, r1
	list->tail = node;
    a8ea:	bf08      	it	eq
    a8ec:	61a3      	streq	r3, [r4, #24]
    a8ee:	f382 8811 	msr	BASEPRI, r2
    a8f2:	f3bf 8f6f 	isb	sy
		if (!node) {
    a8f6:	b1d8      	cbz	r0, a930 <bt_conn_set_state+0x1d8>
	__asm__ volatile(
    a8f8:	f04f 0220 	mov.w	r2, #32
    a8fc:	f3ef 8311 	mrs	r3, BASEPRI
    a900:	f382 8811 	msr	BASEPRI, r2
    a904:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    a908:	68c2      	ldr	r2, [r0, #12]
    a90a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    a90c:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    a90e:	f383 8811 	msr	BASEPRI, r3
    a912:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    a916:	f7ff fbb5 	bl	a084 <tx_free>
    a91a:	e764      	b.n	a7e6 <bt_conn_set_state+0x8e>
    a91c:	4a06      	ldr	r2, [pc, #24]	; (a938 <bt_conn_set_state+0x1e0>)
    a91e:	4b05      	ldr	r3, [pc, #20]	; (a934 <bt_conn_set_state+0x1dc>)
		BT_WARN("no valid (%u) state was set", state);
    a920:	480e      	ldr	r0, [pc, #56]	; (a95c <bt_conn_set_state+0x204>)
    a922:	1ad2      	subs	r2, r2, r3
    a924:	08d2      	lsrs	r2, r2, #3
    a926:	0192      	lsls	r2, r2, #6
    a928:	f042 0202 	orr.w	r2, r2, #2
    a92c:	4629      	mov	r1, r5
    a92e:	e728      	b.n	a782 <bt_conn_set_state+0x2a>
}
    a930:	bd70      	pop	{r4, r5, r6, pc}
    a932:	bf00      	nop
    a934:	00026828 	.word	0x00026828
    a938:	00026840 	.word	0x00026840
    a93c:	00029afe 	.word	0x00029afe
    a940:	00026f6c 	.word	0x00026f6c
    a944:	00029ad1 	.word	0x00029ad1
    a948:	200000d0 	.word	0x200000d0
    a94c:	2000025c 	.word	0x2000025c
    a950:	00029b0f 	.word	0x00029b0f
    a954:	20000000 	.word	0x20000000
    a958:	20001940 	.word	0x20001940
    a95c:	00029b26 	.word	0x00029b26

0000a960 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    a960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a964:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a966:	484f      	ldr	r0, [pc, #316]	; (aaa4 <bt_conn_le_create+0x144>)
    a968:	f018 fbe7 	bl	2313a <atomic_get>
    a96c:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a96e:	0781      	lsls	r1, r0, #30
{
    a970:	4615      	mov	r5, r2
    a972:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a974:	f140 808c 	bpl.w	aa90 <bt_conn_le_create+0x130>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
    a978:	4610      	mov	r0, r2
    a97a:	f018 fb23 	bl	22fc4 <bt_le_conn_params_valid>
    a97e:	b928      	cbnz	r0, a98c <bt_conn_le_create+0x2c>
		return -EINVAL;
    a980:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    a984:	4628      	mov	r0, r5
    a986:	b002      	add	sp, #8
    a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a98c:	4845      	ldr	r0, [pc, #276]	; (aaa4 <bt_conn_le_create+0x144>)
    a98e:	f018 fbd4 	bl	2313a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    a992:	0642      	lsls	r2, r0, #25
    a994:	d4f4      	bmi.n	a980 <bt_conn_le_create+0x20>
    a996:	4843      	ldr	r0, [pc, #268]	; (aaa4 <bt_conn_le_create+0x144>)
    a998:	f018 fbcf 	bl	2313a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    a99c:	0503      	lsls	r3, r0, #20
    a99e:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    a9a2:	d478      	bmi.n	aa96 <bt_conn_le_create+0x136>
	if (!bt_le_scan_random_addr_check()) {
    a9a4:	f7fd fe64 	bl	8670 <bt_le_scan_random_addr_check>
    a9a8:	2800      	cmp	r0, #0
    a9aa:	d0e9      	beq.n	a980 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    a9ac:	4621      	mov	r1, r4
    a9ae:	4640      	mov	r0, r8
    a9b0:	f7ff fe7c 	bl	a6ac <bt_conn_exists_le>
    a9b4:	2800      	cmp	r0, #0
    a9b6:	d1e3      	bne.n	a980 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    a9b8:	7823      	ldrb	r3, [r4, #0]
    a9ba:	3b02      	subs	r3, #2
    a9bc:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&dst, peer);
    a9be:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    a9c0:	d847      	bhi.n	aa52 <bt_conn_le_create+0xf2>
		bt_addr_le_copy(&dst, peer);
    a9c2:	4668      	mov	r0, sp
    a9c4:	f018 fbdd 	bl	23182 <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    a9c8:	f89d 3000 	ldrb.w	r3, [sp]
    a9cc:	3b02      	subs	r3, #2
    a9ce:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    a9d2:	4669      	mov	r1, sp
    a9d4:	2000      	movs	r0, #0
    a9d6:	f7ff fdf5 	bl	a5c4 <bt_conn_add_le>
	if (!conn) {
    a9da:	4604      	mov	r4, r0
    a9dc:	2800      	cmp	r0, #0
    a9de:	d05d      	beq.n	aa9c <bt_conn_le_create+0x13c>
	conn->le.interval_min = param->interval_min;
    a9e0:	882b      	ldrh	r3, [r5, #0]
    a9e2:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    a9e6:	886b      	ldrh	r3, [r5, #2]
    a9e8:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    a9ec:	88ab      	ldrh	r3, [r5, #4]
    a9ee:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    a9f2:	88eb      	ldrh	r3, [r5, #6]
    a9f4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    a9f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    a9fc:	4d2a      	ldr	r5, [pc, #168]	; (aaa8 <bt_conn_le_create+0x148>)
    a9fe:	f105 0c08 	add.w	ip, r5, #8
    aa02:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    aa06:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    aa08:	2b00      	cmp	r3, #0
    aa0a:	bf08      	it	eq
    aa0c:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    aa10:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    aa12:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
    aa14:	b903      	cbnz	r3, aa18 <bt_conn_le_create+0xb8>
    aa16:	89ab      	ldrh	r3, [r5, #12]
    aa18:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
    aa1a:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
    aa1c:	b903      	cbnz	r3, aa20 <bt_conn_le_create+0xc0>
    aa1e:	89eb      	ldrh	r3, [r5, #14]
    aa20:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    aa22:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    aa26:	b11b      	cbz	r3, aa30 <bt_conn_le_create+0xd0>
    aa28:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
    aa2c:	429a      	cmp	r2, r3
    aa2e:	d917      	bls.n	aa60 <bt_conn_le_create+0x100>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    aa30:	2102      	movs	r1, #2
    aa32:	4620      	mov	r0, r4
    aa34:	f7ff fe90 	bl	a758 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    aa38:	2001      	movs	r0, #1
    aa3a:	f7fe f9b1 	bl	8da0 <bt_le_scan_update>
		if (err) {
    aa3e:	4605      	mov	r5, r0
    aa40:	b320      	cbz	r0, aa8c <bt_conn_le_create+0x12c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aa42:	4620      	mov	r0, r4
    aa44:	2100      	movs	r1, #0
    aa46:	f7ff fe87 	bl	a758 <bt_conn_set_state>
			bt_conn_unref(conn);
    aa4a:	4620      	mov	r0, r4
    aa4c:	f018 fcb0 	bl	233b0 <bt_conn_unref>
			return err;
    aa50:	e798      	b.n	a984 <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    aa52:	f018 fa50 	bl	22ef6 <bt_lookup_id_addr>
    aa56:	4601      	mov	r1, r0
    aa58:	4668      	mov	r0, sp
    aa5a:	f018 fb92 	bl	23182 <bt_addr_le_copy>
    aa5e:	e7b8      	b.n	a9d2 <bt_conn_le_create+0x72>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    aa60:	2106      	movs	r1, #6
    aa62:	4620      	mov	r0, r4
    aa64:	f7ff fe78 	bl	a758 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    aa68:	4620      	mov	r0, r4
    aa6a:	f018 fa4c 	bl	22f06 <bt_le_create_conn>
	if (err) {
    aa6e:	4605      	mov	r5, r0
    aa70:	b160      	cbz	r0, aa8c <bt_conn_le_create+0x12c>
		conn->err = 0;
    aa72:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aa74:	4631      	mov	r1, r6
    aa76:	4620      	mov	r0, r4
		conn->err = 0;
    aa78:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aa7a:	f7ff fe6d 	bl	a758 <bt_conn_set_state>
		bt_conn_unref(conn);
    aa7e:	4620      	mov	r0, r4
    aa80:	f018 fc96 	bl	233b0 <bt_conn_unref>
		bt_le_scan_update(false);
    aa84:	4630      	mov	r0, r6
    aa86:	f7fe f98b 	bl	8da0 <bt_le_scan_update>
		return err;
    aa8a:	e77b      	b.n	a984 <bt_conn_le_create+0x24>
	*ret_conn = conn;
    aa8c:	603c      	str	r4, [r7, #0]
	return 0;
    aa8e:	e779      	b.n	a984 <bt_conn_le_create+0x24>
		return -EAGAIN;
    aa90:	f06f 050a 	mvn.w	r5, #10
    aa94:	e776      	b.n	a984 <bt_conn_le_create+0x24>
		return -EALREADY;
    aa96:	f06f 0577 	mvn.w	r5, #119	; 0x77
    aa9a:	e773      	b.n	a984 <bt_conn_le_create+0x24>
		return -ENOMEM;
    aa9c:	f06f 050b 	mvn.w	r5, #11
    aaa0:	e770      	b.n	a984 <bt_conn_le_create+0x24>
    aaa2:	bf00      	nop
    aaa4:	20000098 	.word	0x20000098
    aaa8:	20000000 	.word	0x20000000

0000aaac <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    aaac:	b570      	push	{r4, r5, r6, lr}
    aaae:	4606      	mov	r6, r0
    aab0:	4830      	ldr	r0, [pc, #192]	; (ab74 <bt_le_set_auto_conn+0xc8>)
    aab2:	f018 fb42 	bl	2313a <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aab6:	0780      	lsls	r0, r0, #30
{
    aab8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aaba:	d554      	bpl.n	ab66 <bt_le_set_auto_conn+0xba>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    aabc:	b929      	cbnz	r1, aaca <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
    aabe:	f7fd fdd7 	bl	8670 <bt_le_scan_random_addr_check>
    aac2:	b940      	cbnz	r0, aad6 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    aac4:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    aac8:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    aaca:	4608      	mov	r0, r1
    aacc:	f018 fa7a 	bl	22fc4 <bt_le_conn_params_valid>
    aad0:	2800      	cmp	r0, #0
    aad2:	d1f4      	bne.n	aabe <bt_le_set_auto_conn+0x12>
    aad4:	e7f6      	b.n	aac4 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    aad6:	4631      	mov	r1, r6
    aad8:	2000      	movs	r0, #0
    aada:	f7ff fda5 	bl	a628 <bt_conn_lookup_addr_le>
	if (!conn) {
    aade:	4604      	mov	r4, r0
    aae0:	b928      	cbnz	r0, aaee <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    aae2:	4631      	mov	r1, r6
    aae4:	f7ff fd6e 	bl	a5c4 <bt_conn_add_le>
		if (!conn) {
    aae8:	4604      	mov	r4, r0
    aaea:	2800      	cmp	r0, #0
    aaec:	d03e      	beq.n	ab6c <bt_le_set_auto_conn+0xc0>
		if (!atomic_test_and_set_bit(conn->flags,
    aaee:	1d20      	adds	r0, r4, #4
	if (param) {
    aaf0:	b345      	cbz	r5, ab44 <bt_le_set_auto_conn+0x98>
	conn->le.interval_min = param->interval_min;
    aaf2:	882b      	ldrh	r3, [r5, #0]
    aaf4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    aaf8:	886b      	ldrh	r3, [r5, #2]
    aafa:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    aafe:	88ab      	ldrh	r3, [r5, #4]
    ab00:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    ab04:	88eb      	ldrh	r3, [r5, #6]
    ab06:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ab0a:	2101      	movs	r1, #1
    ab0c:	f018 fb2a 	bl	23164 <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
    ab10:	07c1      	lsls	r1, r0, #31
    ab12:	d403      	bmi.n	ab1c <bt_le_set_auto_conn+0x70>
	atomic_val_t old = atomic_inc(&conn->ref);
    ab14:	f104 0054 	add.w	r0, r4, #84	; 0x54
    ab18:	f018 fb3a 	bl	23190 <atomic_inc.isra.0>
	if (conn->state == BT_CONN_DISCONNECTED &&
    ab1c:	7b63      	ldrb	r3, [r4, #13]
    ab1e:	b963      	cbnz	r3, ab3a <bt_le_set_auto_conn+0x8e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ab20:	4814      	ldr	r0, [pc, #80]	; (ab74 <bt_le_set_auto_conn+0xc8>)
    ab22:	f018 fb0a 	bl	2313a <atomic_get>
    ab26:	0783      	lsls	r3, r0, #30
    ab28:	d507      	bpl.n	ab3a <bt_le_set_auto_conn+0x8e>
		if (param) {
    ab2a:	b11d      	cbz	r5, ab34 <bt_le_set_auto_conn+0x88>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ab2c:	2102      	movs	r1, #2
    ab2e:	4620      	mov	r0, r4
    ab30:	f7ff fe12 	bl	a758 <bt_conn_set_state>
		bt_le_scan_update(false);
    ab34:	2000      	movs	r0, #0
    ab36:	f7fe f933 	bl	8da0 <bt_le_scan_update>
	bt_conn_unref(conn);
    ab3a:	4620      	mov	r0, r4
    ab3c:	f018 fc38 	bl	233b0 <bt_conn_unref>
	return 0;
    ab40:	2000      	movs	r0, #0
    ab42:	e7c1      	b.n	aac8 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ab44:	f06f 0101 	mvn.w	r1, #1
    ab48:	f018 fafd 	bl	23146 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
    ab4c:	07c2      	lsls	r2, r0, #31
    ab4e:	d5e5      	bpl.n	ab1c <bt_le_set_auto_conn+0x70>
			bt_conn_unref(conn);
    ab50:	4620      	mov	r0, r4
    ab52:	f018 fc2d 	bl	233b0 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    ab56:	7b63      	ldrb	r3, [r4, #13]
    ab58:	2b02      	cmp	r3, #2
    ab5a:	d1df      	bne.n	ab1c <bt_le_set_auto_conn+0x70>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ab5c:	4629      	mov	r1, r5
    ab5e:	4620      	mov	r0, r4
    ab60:	f7ff fdfa 	bl	a758 <bt_conn_set_state>
    ab64:	e7da      	b.n	ab1c <bt_le_set_auto_conn+0x70>
		return -EAGAIN;
    ab66:	f06f 000a 	mvn.w	r0, #10
    ab6a:	e7ad      	b.n	aac8 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    ab6c:	f06f 000b 	mvn.w	r0, #11
    ab70:	e7aa      	b.n	aac8 <bt_le_set_auto_conn+0x1c>
    ab72:	bf00      	nop
    ab74:	20000098 	.word	0x20000098

0000ab78 <bt_conn_disconnect>:
{
    ab78:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ab7a:	7883      	ldrb	r3, [r0, #2]
    ab7c:	2b01      	cmp	r3, #1
{
    ab7e:	4604      	mov	r4, r0
    ab80:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ab82:	d103      	bne.n	ab8c <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    ab84:	2100      	movs	r1, #0
    ab86:	3088      	adds	r0, #136	; 0x88
    ab88:	f7ff ff90 	bl	aaac <bt_le_set_auto_conn>
	switch (conn->state) {
    ab8c:	7b63      	ldrb	r3, [r4, #13]
    ab8e:	3b02      	subs	r3, #2
    ab90:	2b06      	cmp	r3, #6
    ab92:	d805      	bhi.n	aba0 <bt_conn_disconnect+0x28>
    ab94:	e8df f003 	tbb	[pc, r3]
    ab98:	12040408 	.word	0x12040408
    ab9c:	2d25      	.short	0x2d25
    ab9e:	10          	.byte	0x10
    ab9f:	00          	.byte	0x00
    aba0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
    aba4:	4628      	mov	r0, r5
    aba6:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aba8:	4620      	mov	r0, r4
		conn->err = reason;
    abaa:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    abac:	2100      	movs	r1, #0
    abae:	f7ff fdd3 	bl	a758 <bt_conn_set_state>
			bt_le_scan_update(false);
    abb2:	2000      	movs	r0, #0
    abb4:	f7fe f8f4 	bl	8da0 <bt_le_scan_update>
		return 0;
    abb8:	2500      	movs	r5, #0
    abba:	e7f3      	b.n	aba4 <bt_conn_disconnect+0x2c>
    abbc:	4913      	ldr	r1, [pc, #76]	; (ac0c <bt_conn_disconnect+0x94>)
    abbe:	4b14      	ldr	r3, [pc, #80]	; (ac10 <bt_conn_disconnect+0x98>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    abc0:	4814      	ldr	r0, [pc, #80]	; (ac14 <bt_conn_disconnect+0x9c>)
    abc2:	1a5b      	subs	r3, r3, r1
    abc4:	08db      	lsrs	r3, r3, #3
    abc6:	019b      	lsls	r3, r3, #6
    abc8:	f043 0102 	orr.w	r1, r3, #2
    abcc:	f016 fa60 	bl	21090 <log_0>
		conn->err = reason;
    abd0:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    abd2:	4620      	mov	r0, r4
    abd4:	2100      	movs	r1, #0
    abd6:	f7ff fdbf 	bl	a758 <bt_conn_set_state>
}
    abda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    abde:	f7fe bf15 	b.w	9a0c <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->update_work);
    abe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
    abe6:	f01b f95a 	bl	25e9e <k_delayed_work_cancel>
}
    abea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
    abee:	f7fd bdb3 	b.w	8758 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
    abf2:	4629      	mov	r1, r5
    abf4:	8820      	ldrh	r0, [r4, #0]
    abf6:	f018 f988 	bl	22f0a <bt_hci_disconnect>
	if (err) {
    abfa:	4605      	mov	r5, r0
    abfc:	2800      	cmp	r0, #0
    abfe:	d1d1      	bne.n	aba4 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    ac00:	2108      	movs	r1, #8
    ac02:	4620      	mov	r0, r4
    ac04:	f7ff fda8 	bl	a758 <bt_conn_set_state>
	return 0;
    ac08:	e7cc      	b.n	aba4 <bt_conn_disconnect+0x2c>
    ac0a:	bf00      	nop
    ac0c:	00026828 	.word	0x00026828
    ac10:	00026840 	.word	0x00026840
    ac14:	00029b42 	.word	0x00029b42

0000ac18 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    ac18:	b538      	push	{r3, r4, r5, lr}
    ac1a:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    ac1c:	490c      	ldr	r1, [pc, #48]	; (ac50 <bt_conn_create_pdu_timeout+0x38>)
    ac1e:	2800      	cmp	r0, #0
    ac20:	bf08      	it	eq
    ac22:	4608      	moveq	r0, r1
    ac24:	f01a fbd5 	bl	253d2 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    ac28:	4604      	mov	r4, r0
    ac2a:	b958      	cbnz	r0, ac44 <bt_conn_create_pdu_timeout+0x2c>
    ac2c:	4909      	ldr	r1, [pc, #36]	; (ac54 <bt_conn_create_pdu_timeout+0x3c>)
    ac2e:	4b0a      	ldr	r3, [pc, #40]	; (ac58 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    ac30:	480a      	ldr	r0, [pc, #40]	; (ac5c <bt_conn_create_pdu_timeout+0x44>)
    ac32:	1ac9      	subs	r1, r1, r3
    ac34:	08c9      	lsrs	r1, r1, #3
    ac36:	0189      	lsls	r1, r1, #6
    ac38:	f041 0102 	orr.w	r1, r1, #2
    ac3c:	f016 fa28 	bl	21090 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    ac40:	4620      	mov	r0, r4
    ac42:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_reserve(buf, reserve);
    ac44:	1d29      	adds	r1, r5, #4
    ac46:	3008      	adds	r0, #8
    ac48:	f01a fbe8 	bl	2541c <net_buf_simple_reserve>
	return buf;
    ac4c:	e7f8      	b.n	ac40 <bt_conn_create_pdu_timeout+0x28>
    ac4e:	bf00      	nop
    ac50:	20000ff8 	.word	0x20000ff8
    ac54:	00026840 	.word	0x00026840
    ac58:	00026828 	.word	0x00026828
    ac5c:	00029b69 	.word	0x00029b69

0000ac60 <bt_conn_create_frag_timeout>:
{
    ac60:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    ac62:	4801      	ldr	r0, [pc, #4]	; (ac68 <bt_conn_create_frag_timeout+0x8>)
    ac64:	f7ff bfd8 	b.w	ac18 <bt_conn_create_pdu_timeout>
    ac68:	20001048 	.word	0x20001048

0000ac6c <create_frag>:
{
    ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac70:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    ac72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ac76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ac7a:	2000      	movs	r0, #0
{
    ac7c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    ac7e:	f7ff ffef 	bl	ac60 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    ac82:	7b73      	ldrb	r3, [r6, #13]
    ac84:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    ac86:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    ac88:	f04f 0600 	mov.w	r6, #0
    ac8c:	d005      	beq.n	ac9a <create_frag+0x2e>
		net_buf_unref(frag);
    ac8e:	f012 fec5 	bl	1da1c <net_buf_unref>
		return NULL;
    ac92:	4635      	mov	r5, r6
}
    ac94:	4628      	mov	r0, r5
    ac96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    ac9a:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ac9c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    aca0:	4e0c      	ldr	r6, [pc, #48]	; (acd4 <create_frag+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    aca2:	4638      	mov	r0, r7
    aca4:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    aca8:	f01a fc3c 	bl	25524 <net_buf_simple_tailroom>
    acac:	4580      	cmp	r8, r0
    acae:	d20c      	bcs.n	acca <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    acb0:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	net_buf_add_mem(frag, buf->data, frag_len);
    acb4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    acb8:	4632      	mov	r2, r6
    acba:	4638      	mov	r0, r7
    acbc:	f01a fbeb 	bl	25496 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    acc0:	4631      	mov	r1, r6
    acc2:	4620      	mov	r0, r4
    acc4:	f01a fc0a 	bl	254dc <net_buf_simple_pull>
	return frag;
    acc8:	e7e4      	b.n	ac94 <create_frag+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    acca:	4638      	mov	r0, r7
    accc:	f01a fc2a 	bl	25524 <net_buf_simple_tailroom>
    acd0:	b286      	uxth	r6, r0
    acd2:	e7ef      	b.n	acb4 <create_frag+0x48>
    acd4:	20000000 	.word	0x20000000

0000acd8 <bt_conn_process_tx>:
{
    acd8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    acda:	7b43      	ldrb	r3, [r0, #13]
{
    acdc:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    acde:	b95b      	cbnz	r3, acf8 <bt_conn_process_tx+0x20>
    ace0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ace4:	3004      	adds	r0, #4
    ace6:	f018 fa2e 	bl	23146 <atomic_and>
    acea:	0643      	lsls	r3, r0, #25
    acec:	d504      	bpl.n	acf8 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    acee:	4620      	mov	r0, r4
}
    acf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    acf4:	f7ff bb0a 	b.w	a30c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    acf8:	2200      	movs	r2, #0
    acfa:	2300      	movs	r3, #0
    acfc:	f104 0034 	add.w	r0, r4, #52	; 0x34
    ad00:	f01a fb6c 	bl	253dc <net_buf_get>
	BT_ASSERT(buf);
    ad04:	4605      	mov	r5, r0
    ad06:	b960      	cbnz	r0, ad22 <bt_conn_process_tx+0x4a>
    ad08:	4a1f      	ldr	r2, [pc, #124]	; (ad88 <bt_conn_process_tx+0xb0>)
    ad0a:	4920      	ldr	r1, [pc, #128]	; (ad8c <bt_conn_process_tx+0xb4>)
    ad0c:	4820      	ldr	r0, [pc, #128]	; (ad90 <bt_conn_process_tx+0xb8>)
    ad0e:	f240 535e 	movw	r3, #1374	; 0x55e
    ad12:	f015 fe64 	bl	209de <printk>
    ad16:	4040      	eors	r0, r0
    ad18:	f380 8811 	msr	BASEPRI, r0
    ad1c:	f04f 0003 	mov.w	r0, #3
    ad20:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    ad22:	4e1c      	ldr	r6, [pc, #112]	; (ad94 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    ad24:	89aa      	ldrh	r2, [r5, #12]
    ad26:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
    ad2a:	429a      	cmp	r2, r3
    ad2c:	d807      	bhi.n	ad3e <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    ad2e:	2300      	movs	r3, #0
    ad30:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    ad32:	4629      	mov	r1, r5
    ad34:	4620      	mov	r0, r4
    ad36:	f7ff f9c5 	bl	a0c4 <send_frag>
	if (!send_buf(conn, buf)) {
    ad3a:	b130      	cbz	r0, ad4a <bt_conn_process_tx+0x72>
}
    ad3c:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    ad3e:	4629      	mov	r1, r5
    ad40:	4620      	mov	r0, r4
    ad42:	f7ff ff93 	bl	ac6c <create_frag>
	if (!frag) {
    ad46:	4601      	mov	r1, r0
    ad48:	b920      	cbnz	r0, ad54 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    ad4a:	4628      	mov	r0, r5
}
    ad4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    ad50:	f012 be64 	b.w	1da1c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    ad54:	2301      	movs	r3, #1
    ad56:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ad58:	4620      	mov	r0, r4
    ad5a:	f7ff f9b3 	bl	a0c4 <send_frag>
    ad5e:	2800      	cmp	r0, #0
    ad60:	d0f3      	beq.n	ad4a <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    ad62:	89aa      	ldrh	r2, [r5, #12]
    ad64:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
    ad68:	429a      	cmp	r2, r3
    ad6a:	d802      	bhi.n	ad72 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    ad6c:	2300      	movs	r3, #0
    ad6e:	2203      	movs	r2, #3
    ad70:	e7df      	b.n	ad32 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    ad72:	4629      	mov	r1, r5
    ad74:	4620      	mov	r0, r4
    ad76:	f7ff ff79 	bl	ac6c <create_frag>
		if (!frag) {
    ad7a:	4601      	mov	r1, r0
    ad7c:	2800      	cmp	r0, #0
    ad7e:	d0e4      	beq.n	ad4a <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ad80:	2301      	movs	r3, #1
    ad82:	461a      	mov	r2, r3
    ad84:	e7e8      	b.n	ad58 <bt_conn_process_tx+0x80>
    ad86:	bf00      	nop
    ad88:	00029b92 	.word	0x00029b92
    ad8c:	0002a41f 	.word	0x0002a41f
    ad90:	00029261 	.word	0x00029261
    ad94:	20000000 	.word	0x20000000

0000ad98 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    ad98:	4b0c      	ldr	r3, [pc, #48]	; (adcc <bt_conn_auth_cb_register+0x34>)
    ad9a:	b908      	cbnz	r0, ada0 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    ad9c:	6018      	str	r0, [r3, #0]
		return 0;
    ad9e:	4770      	bx	lr
	}

	if (bt_auth) {
    ada0:	681a      	ldr	r2, [r3, #0]
    ada2:	b962      	cbnz	r2, adbe <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    ada4:	6902      	ldr	r2, [r0, #16]
    ada6:	b93a      	cbnz	r2, adb8 <bt_conn_auth_cb_register+0x20>
    ada8:	6802      	ldr	r2, [r0, #0]
    adaa:	b95a      	cbnz	r2, adc4 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    adac:	6842      	ldr	r2, [r0, #4]
    adae:	b94a      	cbnz	r2, adc4 <bt_conn_auth_cb_register+0x2c>
    adb0:	6882      	ldr	r2, [r0, #8]
    adb2:	b93a      	cbnz	r2, adc4 <bt_conn_auth_cb_register+0x2c>
    adb4:	6942      	ldr	r2, [r0, #20]
    adb6:	b92a      	cbnz	r2, adc4 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    adb8:	6018      	str	r0, [r3, #0]
	return 0;
    adba:	2000      	movs	r0, #0
    adbc:	4770      	bx	lr
		return -EALREADY;
    adbe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    adc2:	4770      	bx	lr
		return -EINVAL;
    adc4:	f06f 0015 	mvn.w	r0, #21
}
    adc8:	4770      	bx	lr
    adca:	bf00      	nop
    adcc:	20001be4 	.word	0x20001be4

0000add0 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    add0:	4b03      	ldr	r3, [pc, #12]	; (ade0 <bt_conn_index+0x10>)
    add2:	1ac0      	subs	r0, r0, r3
    add4:	4b03      	ldr	r3, [pc, #12]	; (ade4 <bt_conn_index+0x14>)
    add6:	10c0      	asrs	r0, r0, #3
    add8:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
    adda:	b2c0      	uxtb	r0, r0
    addc:	4770      	bx	lr
    adde:	bf00      	nop
    ade0:	200012a0 	.word	0x200012a0
    ade4:	e9bd37a7 	.word	0xe9bd37a7

0000ade8 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    ade8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    adea:	4913      	ldr	r1, [pc, #76]	; (ae38 <bt_conn_init+0x50>)
    adec:	4813      	ldr	r0, [pc, #76]	; (ae3c <bt_conn_init+0x54>)
    adee:	f01a fe6a 	bl	25ac6 <k_queue_append>
    adf2:	4913      	ldr	r1, [pc, #76]	; (ae40 <bt_conn_init+0x58>)
    adf4:	4811      	ldr	r0, [pc, #68]	; (ae3c <bt_conn_init+0x54>)
    adf6:	f01a fe66 	bl	25ac6 <k_queue_append>
    adfa:	4912      	ldr	r1, [pc, #72]	; (ae44 <bt_conn_init+0x5c>)
    adfc:	480f      	ldr	r0, [pc, #60]	; (ae3c <bt_conn_init+0x54>)
    adfe:	f01a fe62 	bl	25ac6 <k_queue_append>
	}

	bt_att_init();
    ae02:	f018 feed 	bl	23be0 <bt_att_init>

	err = bt_smp_init();
    ae06:	f004 fa57 	bl	f2b8 <bt_smp_init>
	if (err) {
    ae0a:	4604      	mov	r4, r0
    ae0c:	b988      	cbnz	r0, ae32 <bt_conn_init+0x4a>
		return err;
	}

	bt_l2cap_init();
    ae0e:	f018 fbc9 	bl	235a4 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = &acl_conns[i];

			if (!atomic_get(&conn->ref)) {
    ae12:	4b0d      	ldr	r3, [pc, #52]	; (ae48 <bt_conn_init+0x60>)
    ae14:	f103 0054 	add.w	r0, r3, #84	; 0x54
    ae18:	f018 f98f 	bl	2313a <atomic_get>
    ae1c:	b148      	cbz	r0, ae32 <bt_conn_init+0x4a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ae1e:	1d18      	adds	r0, r3, #4
    ae20:	f018 f98b 	bl	2313a <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
    ae24:	07c2      	lsls	r2, r0, #31
    ae26:	d504      	bpl.n	ae32 <bt_conn_init+0x4a>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    ae28:	721c      	strb	r4, [r3, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ae2a:	2102      	movs	r1, #2
    ae2c:	4618      	mov	r0, r3
    ae2e:	f7ff fc93 	bl	a758 <bt_conn_set_state>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    ae32:	4620      	mov	r0, r4
    ae34:	bd10      	pop	{r4, pc}
    ae36:	bf00      	nop
    ae38:	20001bec 	.word	0x20001bec
    ae3c:	20000fc8 	.word	0x20000fc8
    ae40:	20001bfc 	.word	0x20001bfc
    ae44:	20001c0c 	.word	0x20001c0c
    ae48:	200012a0 	.word	0x200012a0

0000ae4c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    ae4c:	4a0b      	ldr	r2, [pc, #44]	; (ae7c <l2cap_accept+0x30>)
{
    ae4e:	b508      	push	{r3, lr}
    ae50:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    ae52:	6810      	ldr	r0, [r2, #0]
    ae54:	b918      	cbnz	r0, ae5e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    ae56:	4b0a      	ldr	r3, [pc, #40]	; (ae80 <l2cap_accept+0x34>)
    ae58:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    ae5a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    ae5c:	bd08      	pop	{r3, pc}
    ae5e:	4909      	ldr	r1, [pc, #36]	; (ae84 <l2cap_accept+0x38>)
    ae60:	4a09      	ldr	r2, [pc, #36]	; (ae88 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    ae62:	480a      	ldr	r0, [pc, #40]	; (ae8c <l2cap_accept+0x40>)
    ae64:	1a52      	subs	r2, r2, r1
    ae66:	08d2      	lsrs	r2, r2, #3
    ae68:	0192      	lsls	r2, r2, #6
    ae6a:	f042 0201 	orr.w	r2, r2, #1
    ae6e:	4619      	mov	r1, r3
    ae70:	f016 f91b 	bl	210aa <log_1>
	return -ENOMEM;
    ae74:	f06f 000b 	mvn.w	r0, #11
    ae78:	e7f0      	b.n	ae5c <l2cap_accept+0x10>
    ae7a:	bf00      	nop
    ae7c:	20001358 	.word	0x20001358
    ae80:	00026fb0 	.word	0x00026fb0
    ae84:	00026828 	.word	0x00026828
    ae88:	00026930 	.word	0x00026930
    ae8c:	00029c1f 	.word	0x00029c1f

0000ae90 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae92:	4605      	mov	r5, r0
    ae94:	460f      	mov	r7, r1
    ae96:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    ae98:	2300      	movs	r3, #0
    ae9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ae9e:	2104      	movs	r1, #4
    aea0:	2000      	movs	r0, #0
    aea2:	f7ff feb9 	bl	ac18 <bt_conn_create_pdu_timeout>
	if (!buf) {
    aea6:	4604      	mov	r4, r0
    aea8:	b960      	cbnz	r0, aec4 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    aeaa:	4a0a      	ldr	r2, [pc, #40]	; (aed4 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    aeac:	4b0a      	ldr	r3, [pc, #40]	; (aed8 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    aeae:	480b      	ldr	r0, [pc, #44]	; (aedc <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    aeb0:	1ad2      	subs	r2, r2, r3
    aeb2:	08d2      	lsrs	r2, r2, #3
    aeb4:	0192      	lsls	r2, r2, #6
    aeb6:	f042 0201 	orr.w	r2, r2, #1
    aeba:	4629      	mov	r1, r5
    aebc:	f016 f8f5 	bl	210aa <log_1>
}
    aec0:	4620      	mov	r0, r4
    aec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    aec4:	2104      	movs	r1, #4
    aec6:	3008      	adds	r0, #8
    aec8:	f01a fadf 	bl	2548a <net_buf_simple_add>
	hdr->code = code;
    aecc:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    aece:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    aed0:	8046      	strh	r6, [r0, #2]
	return buf;
    aed2:	e7f5      	b.n	aec0 <l2cap_create_le_sig_pdu.constprop.0+0x30>
    aed4:	00026930 	.word	0x00026930
    aed8:	00026828 	.word	0x00026828
    aedc:	00029c46 	.word	0x00029c46

0000aee0 <l2cap_rtx_timeout>:
{
    aee0:	b538      	push	{r3, r4, r5, lr}
    aee2:	4a0b      	ldr	r2, [pc, #44]	; (af10 <l2cap_rtx_timeout+0x30>)
    aee4:	4b0b      	ldr	r3, [pc, #44]	; (af14 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    aee6:	4604      	mov	r4, r0
    aee8:	1ad2      	subs	r2, r2, r3
    aeea:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    aeee:	480a      	ldr	r0, [pc, #40]	; (af18 <l2cap_rtx_timeout+0x38>)
    aef0:	08d2      	lsrs	r2, r2, #3
    aef2:	0192      	lsls	r2, r2, #6
    aef4:	4621      	mov	r1, r4
    aef6:	f042 0201 	orr.w	r2, r2, #1
    aefa:	f016 f8d6 	bl	210aa <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    aefe:	4628      	mov	r0, r5
    af00:	4621      	mov	r1, r4
    af02:	f018 fa96 	bl	23432 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    af06:	4620      	mov	r0, r4
}
    af08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    af0c:	f018 bab2 	b.w	23474 <bt_l2cap_chan_del>
    af10:	00026930 	.word	0x00026930
    af14:	00026828 	.word	0x00026828
    af18:	00029c6e 	.word	0x00029c6e

0000af1c <bt_l2cap_connected>:
{
    af1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    af20:	4e29      	ldr	r6, [pc, #164]	; (afc8 <bt_l2cap_connected+0xac>)
    af22:	4f2a      	ldr	r7, [pc, #168]	; (afcc <bt_l2cap_connected+0xb0>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    af24:	f8df 80a8 	ldr.w	r8, [pc, #168]	; afd0 <bt_l2cap_connected+0xb4>
{
    af28:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    af2a:	42be      	cmp	r6, r7
    af2c:	d302      	bcc.n	af34 <bt_l2cap_connected+0x18>
}
    af2e:	b003      	add	sp, #12
    af30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    af34:	6873      	ldr	r3, [r6, #4]
    af36:	a901      	add	r1, sp, #4
    af38:	4620      	mov	r0, r4
    af3a:	4798      	blx	r3
    af3c:	2800      	cmp	r0, #0
    af3e:	db3d      	blt.n	afbc <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    af40:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    af42:	8833      	ldrh	r3, [r6, #0]
    af44:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    af48:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    af4c:	4641      	mov	r1, r8
    af4e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    af52:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    af56:	f01a ff9a 	bl	25e8e <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    af5a:	f3bf 8f5b 	dmb	ish
    af5e:	f105 0340 	add.w	r3, r5, #64	; 0x40
    af62:	2200      	movs	r2, #0
    af64:	e853 1f00 	ldrex	r1, [r3]
    af68:	e843 2000 	strex	r0, r2, [r3]
    af6c:	2800      	cmp	r0, #0
    af6e:	d1f9      	bne.n	af64 <bt_l2cap_connected+0x48>
    af70:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    af74:	60aa      	str	r2, [r5, #8]
	return list->tail;
    af76:	6d22      	ldr	r2, [r4, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    af78:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    af7c:	bb02      	cbnz	r2, afc0 <bt_l2cap_connected+0xa4>
	list->head = node;
    af7e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		if (chan->ops->connected) {
    af82:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    af84:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    af86:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    af88:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    af8c:	681b      	ldr	r3, [r3, #0]
    af8e:	b103      	cbz	r3, af92 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    af90:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    af92:	9b01      	ldr	r3, [sp, #4]
    af94:	f3bf 8f5b 	dmb	ish
    af98:	3340      	adds	r3, #64	; 0x40
    af9a:	e853 2f00 	ldrex	r2, [r3]
    af9e:	f042 0201 	orr.w	r2, r2, #1
    afa2:	e843 2100 	strex	r1, r2, [r3]
    afa6:	2900      	cmp	r1, #0
    afa8:	d1f7      	bne.n	af9a <bt_l2cap_connected+0x7e>
    afaa:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    afae:	9801      	ldr	r0, [sp, #4]
    afb0:	6843      	ldr	r3, [r0, #4]
    afb2:	699b      	ldr	r3, [r3, #24]
    afb4:	b113      	cbz	r3, afbc <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    afb6:	f100 0140 	add.w	r1, r0, #64	; 0x40
    afba:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    afbc:	360c      	adds	r6, #12
    afbe:	e7b4      	b.n	af2a <bt_l2cap_connected+0xe>
	parent->next = child;
    afc0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    afc2:	6523      	str	r3, [r4, #80]	; 0x50
}
    afc4:	e7dd      	b.n	af82 <bt_l2cap_connected+0x66>
    afc6:	bf00      	nop
    afc8:	000267dc 	.word	0x000267dc
    afcc:	00026800 	.word	0x00026800
    afd0:	0000aee1 	.word	0x0000aee1

0000afd4 <l2cap_recv>:
{
    afd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    afd6:	898b      	ldrh	r3, [r1, #12]
    afd8:	2b03      	cmp	r3, #3
{
    afda:	b085      	sub	sp, #20
    afdc:	4606      	mov	r6, r0
    afde:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    afe0:	d80a      	bhi.n	aff8 <l2cap_recv+0x24>
    afe2:	494d      	ldr	r1, [pc, #308]	; (b118 <l2cap_recv+0x144>)
    afe4:	4b4d      	ldr	r3, [pc, #308]	; (b11c <l2cap_recv+0x148>)
		BT_ERR("Too small L2CAP signaling PDU");
    afe6:	484e      	ldr	r0, [pc, #312]	; (b120 <l2cap_recv+0x14c>)
    afe8:	1ac9      	subs	r1, r1, r3
    afea:	08c9      	lsrs	r1, r1, #3
    afec:	0189      	lsls	r1, r1, #6
    afee:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    aff2:	f016 f84d 	bl	21090 <log_0>
		return 0;
    aff6:	e013      	b.n	b020 <l2cap_recv+0x4c>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    aff8:	2104      	movs	r1, #4
    affa:	f105 0008 	add.w	r0, r5, #8
    affe:	f01a fa75 	bl	254ec <net_buf_simple_pull_mem>
	if (buf->len != len) {
    b002:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    b004:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    b006:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b008:	4604      	mov	r4, r0
	if (buf->len != len) {
    b00a:	d00c      	beq.n	b026 <l2cap_recv+0x52>
    b00c:	4843      	ldr	r0, [pc, #268]	; (b11c <l2cap_recv+0x148>)
    b00e:	4b42      	ldr	r3, [pc, #264]	; (b118 <l2cap_recv+0x144>)
    b010:	1a1b      	subs	r3, r3, r0
    b012:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b014:	019b      	lsls	r3, r3, #6
    b016:	4843      	ldr	r0, [pc, #268]	; (b124 <l2cap_recv+0x150>)
    b018:	f043 0301 	orr.w	r3, r3, #1
    b01c:	f016 f859 	bl	210d2 <log_2>
}
    b020:	2000      	movs	r0, #0
    b022:	b005      	add	sp, #20
    b024:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    b026:	7841      	ldrb	r1, [r0, #1]
    b028:	b941      	cbnz	r1, b03c <l2cap_recv+0x68>
    b02a:	493b      	ldr	r1, [pc, #236]	; (b118 <l2cap_recv+0x144>)
    b02c:	4b3b      	ldr	r3, [pc, #236]	; (b11c <l2cap_recv+0x148>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    b02e:	483e      	ldr	r0, [pc, #248]	; (b128 <l2cap_recv+0x154>)
    b030:	1ac9      	subs	r1, r1, r3
    b032:	08c9      	lsrs	r1, r1, #3
    b034:	0189      	lsls	r1, r1, #6
    b036:	f041 0101 	orr.w	r1, r1, #1
    b03a:	e7da      	b.n	aff2 <l2cap_recv+0x1e>
	switch (hdr->code) {
    b03c:	7803      	ldrb	r3, [r0, #0]
    b03e:	2b12      	cmp	r3, #18
    b040:	d01c      	beq.n	b07c <l2cap_recv+0xa8>
    b042:	2b13      	cmp	r3, #19
    b044:	d00f      	beq.n	b066 <l2cap_recv+0x92>
    b046:	2b01      	cmp	r3, #1
    b048:	d0ea      	beq.n	b020 <l2cap_recv+0x4c>
    b04a:	4934      	ldr	r1, [pc, #208]	; (b11c <l2cap_recv+0x148>)
    b04c:	4a32      	ldr	r2, [pc, #200]	; (b118 <l2cap_recv+0x144>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    b04e:	4837      	ldr	r0, [pc, #220]	; (b12c <l2cap_recv+0x158>)
    b050:	1a52      	subs	r2, r2, r1
    b052:	08d2      	lsrs	r2, r2, #3
    b054:	0192      	lsls	r2, r2, #6
    b056:	4619      	mov	r1, r3
    b058:	f042 0202 	orr.w	r2, r2, #2
    b05c:	f016 f825 	bl	210aa <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
    b060:	7861      	ldrb	r1, [r4, #1]
    b062:	6830      	ldr	r0, [r6, #0]
    b064:	e019      	b.n	b09a <l2cap_recv+0xc6>
	if (buf->len < sizeof(*rsp)) {
    b066:	2a01      	cmp	r2, #1
    b068:	d8da      	bhi.n	b020 <l2cap_recv+0x4c>
    b06a:	492b      	ldr	r1, [pc, #172]	; (b118 <l2cap_recv+0x144>)
    b06c:	4b2b      	ldr	r3, [pc, #172]	; (b11c <l2cap_recv+0x148>)
		BT_ERR("Too small LE conn param rsp");
    b06e:	4830      	ldr	r0, [pc, #192]	; (b130 <l2cap_recv+0x15c>)
    b070:	1ac9      	subs	r1, r1, r3
    b072:	08c9      	lsrs	r1, r1, #3
    b074:	0189      	lsls	r1, r1, #6
    b076:	f041 0101 	orr.w	r1, r1, #1
    b07a:	e7ba      	b.n	aff2 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
    b07c:	2a07      	cmp	r2, #7
    b07e:	d808      	bhi.n	b092 <l2cap_recv+0xbe>
    b080:	4925      	ldr	r1, [pc, #148]	; (b118 <l2cap_recv+0x144>)
    b082:	4b26      	ldr	r3, [pc, #152]	; (b11c <l2cap_recv+0x148>)
		BT_ERR("Too small LE conn update param req");
    b084:	482b      	ldr	r0, [pc, #172]	; (b134 <l2cap_recv+0x160>)
    b086:	1ac9      	subs	r1, r1, r3
    b088:	08c9      	lsrs	r1, r1, #3
    b08a:	0189      	lsls	r1, r1, #6
    b08c:	f041 0101 	orr.w	r1, r1, #1
    b090:	e7af      	b.n	aff2 <l2cap_recv+0x1e>
    b092:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    b094:	78e7      	ldrb	r7, [r4, #3]
    b096:	b11f      	cbz	r7, b0a0 <l2cap_recv+0xcc>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    b098:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
    b09a:	f018 fa4c 	bl	23536 <l2cap_send_reject.constprop.0>
		break;
    b09e:	e7bf      	b.n	b020 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    b0a0:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    b0a2:	7850      	ldrb	r0, [r2, #1]
    b0a4:	7813      	ldrb	r3, [r2, #0]
    b0a6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    b0aa:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    b0ae:	78d0      	ldrb	r0, [r2, #3]
    b0b0:	7893      	ldrb	r3, [r2, #2]
    b0b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    b0b6:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    b0ba:	7950      	ldrb	r0, [r2, #5]
    b0bc:	7913      	ldrb	r3, [r2, #4]
    b0be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    b0c2:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    b0c6:	7993      	ldrb	r3, [r2, #6]
    b0c8:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b0ca:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    b0cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b0d0:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    b0d2:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b0d6:	f7ff fedb 	bl	ae90 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    b0da:	4605      	mov	r5, r0
    b0dc:	2800      	cmp	r0, #0
    b0de:	d09f      	beq.n	b020 <l2cap_recv+0x4c>
	accepted = le_param_req(conn, &param);
    b0e0:	a902      	add	r1, sp, #8
    b0e2:	4620      	mov	r0, r4
    b0e4:	f7ff f8ba 	bl	a25c <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    b0e8:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    b0ea:	4606      	mov	r6, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    b0ec:	f105 0008 	add.w	r0, r5, #8
    b0f0:	f01a f9cb 	bl	2548a <net_buf_simple_add>
	if (accepted) {
    b0f4:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    b0f8:	b2db      	uxtb	r3, r3
    b0fa:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b0fc:	462a      	mov	r2, r5
    b0fe:	9700      	str	r7, [sp, #0]
    b100:	463b      	mov	r3, r7
    b102:	2105      	movs	r1, #5
    b104:	4620      	mov	r0, r4
    b106:	f018 f9fd 	bl	23504 <bt_l2cap_send_cb>
	if (accepted) {
    b10a:	2e00      	cmp	r6, #0
    b10c:	d088      	beq.n	b020 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    b10e:	a902      	add	r1, sp, #8
    b110:	4620      	mov	r0, r4
    b112:	f018 f964 	bl	233de <bt_conn_le_conn_update>
    b116:	e783      	b.n	b020 <l2cap_recv+0x4c>
    b118:	00026930 	.word	0x00026930
    b11c:	00026828 	.word	0x00026828
    b120:	00029c7e 	.word	0x00029c7e
    b124:	00029c9c 	.word	0x00029c9c
    b128:	00029cbd 	.word	0x00029cbd
    b12c:	00029d1d 	.word	0x00029d1d
    b130:	00029cde 	.word	0x00029cde
    b134:	00029cfa 	.word	0x00029cfa

0000b138 <bt_l2cap_recv>:
{
    b138:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    b13a:	898b      	ldrh	r3, [r1, #12]
    b13c:	2b03      	cmp	r3, #3
{
    b13e:	4605      	mov	r5, r0
    b140:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    b142:	d80e      	bhi.n	b162 <bt_l2cap_recv+0x2a>
    b144:	4914      	ldr	r1, [pc, #80]	; (b198 <bt_l2cap_recv+0x60>)
    b146:	4b15      	ldr	r3, [pc, #84]	; (b19c <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    b148:	4815      	ldr	r0, [pc, #84]	; (b1a0 <bt_l2cap_recv+0x68>)
    b14a:	1ac9      	subs	r1, r1, r3
    b14c:	08c9      	lsrs	r1, r1, #3
    b14e:	0189      	lsls	r1, r1, #6
    b150:	f041 0101 	orr.w	r1, r1, #1
    b154:	f015 ff9c 	bl	21090 <log_0>
	net_buf_unref(buf);
    b158:	4620      	mov	r0, r4
}
    b15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    b15e:	f012 bc5d 	b.w	1da1c <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b162:	2104      	movs	r1, #4
    b164:	f104 0008 	add.w	r0, r4, #8
    b168:	f01a f9c0 	bl	254ec <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    b16c:	8841      	ldrh	r1, [r0, #2]
    b16e:	4628      	mov	r0, r5
    b170:	f018 fa08 	bl	23584 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b174:	b950      	cbnz	r0, b18c <bt_l2cap_recv+0x54>
    b176:	4b09      	ldr	r3, [pc, #36]	; (b19c <bt_l2cap_recv+0x64>)
    b178:	4a07      	ldr	r2, [pc, #28]	; (b198 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    b17a:	480a      	ldr	r0, [pc, #40]	; (b1a4 <bt_l2cap_recv+0x6c>)
    b17c:	1ad2      	subs	r2, r2, r3
    b17e:	08d2      	lsrs	r2, r2, #3
    b180:	0192      	lsls	r2, r2, #6
    b182:	f042 0202 	orr.w	r2, r2, #2
    b186:	f015 ff90 	bl	210aa <log_1>
		net_buf_unref(buf);
    b18a:	e7e5      	b.n	b158 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    b18c:	6843      	ldr	r3, [r0, #4]
    b18e:	4621      	mov	r1, r4
    b190:	691b      	ldr	r3, [r3, #16]
    b192:	4798      	blx	r3
    b194:	e7e0      	b.n	b158 <bt_l2cap_recv+0x20>
    b196:	bf00      	nop
    b198:	00026930 	.word	0x00026930
    b19c:	00026828 	.word	0x00026828
    b1a0:	00029d3b 	.word	0x00029d3b
    b1a4:	00029d58 	.word	0x00029d58

0000b1a8 <bt_l2cap_update_conn_param>:
{
    b1a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b1aa:	460c      	mov	r4, r1
	ident++;
    b1ac:	4914      	ldr	r1, [pc, #80]	; (b200 <bt_l2cap_update_conn_param+0x58>)
    b1ae:	780b      	ldrb	r3, [r1, #0]
    b1b0:	3301      	adds	r3, #1
	if (!ident) {
    b1b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    b1b6:	bf08      	it	eq
    b1b8:	2301      	moveq	r3, #1
    b1ba:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b1bc:	7809      	ldrb	r1, [r1, #0]
{
    b1be:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b1c0:	2208      	movs	r2, #8
    b1c2:	2012      	movs	r0, #18
    b1c4:	f7ff fe64 	bl	ae90 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    b1c8:	4606      	mov	r6, r0
    b1ca:	b1b0      	cbz	r0, b1fa <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    b1cc:	2108      	movs	r1, #8
    b1ce:	4408      	add	r0, r1
    b1d0:	f01a f95b 	bl	2548a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    b1d4:	8822      	ldrh	r2, [r4, #0]
    b1d6:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    b1d8:	8862      	ldrh	r2, [r4, #2]
    b1da:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    b1dc:	88a2      	ldrh	r2, [r4, #4]
    b1de:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    b1e0:	88e2      	ldrh	r2, [r4, #6]
    b1e2:	80c2      	strh	r2, [r0, #6]
    b1e4:	2400      	movs	r4, #0
    b1e6:	9400      	str	r4, [sp, #0]
    b1e8:	4623      	mov	r3, r4
    b1ea:	4632      	mov	r2, r6
    b1ec:	2105      	movs	r1, #5
    b1ee:	4628      	mov	r0, r5
    b1f0:	f018 f988 	bl	23504 <bt_l2cap_send_cb>
	return 0;
    b1f4:	4620      	mov	r0, r4
}
    b1f6:	b002      	add	sp, #8
    b1f8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    b1fa:	f06f 000b 	mvn.w	r0, #11
    b1fe:	e7fa      	b.n	b1f6 <bt_l2cap_update_conn_param+0x4e>
    b200:	20003bae 	.word	0x20003bae

0000b204 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    b204:	4b02      	ldr	r3, [pc, #8]	; (b210 <att_cfm_sent+0xc>)
    b206:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    b20a:	f018 b9de 	b.w	235ca <att_sent>
    b20e:	bf00      	nop
    b210:	00023a1f 	.word	0x00023a1f

0000b214 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    b214:	4b02      	ldr	r3, [pc, #8]	; (b220 <att_rsp_sent+0xc>)
    b216:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    b21a:	f018 b9d6 	b.w	235ca <att_sent>
    b21e:	bf00      	nop
    b220:	00023a03 	.word	0x00023a03

0000b224 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    b224:	4b02      	ldr	r3, [pc, #8]	; (b230 <att_req_sent+0xc>)
    b226:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    b22a:	f018 b9ce 	b.w	235ca <att_sent>
    b22e:	bf00      	nop
    b230:	0000b4dd 	.word	0x0000b4dd

0000b234 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    b234:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    b236:	7b43      	ldrb	r3, [r0, #13]
    b238:	2b07      	cmp	r3, #7
    b23a:	d00b      	beq.n	b254 <att_get+0x20>
    b23c:	4918      	ldr	r1, [pc, #96]	; (b2a0 <att_get+0x6c>)
    b23e:	4b19      	ldr	r3, [pc, #100]	; (b2a4 <att_get+0x70>)
		BT_WARN("Not connected");
    b240:	4819      	ldr	r0, [pc, #100]	; (b2a8 <att_get+0x74>)
    b242:	1ac9      	subs	r1, r1, r3
    b244:	08c9      	lsrs	r1, r1, #3
    b246:	0189      	lsls	r1, r1, #6
    b248:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    b24c:	f015 ff20 	bl	21090 <log_0>
		return NULL;
    b250:	2400      	movs	r4, #0
    b252:	e00e      	b.n	b272 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    b254:	2104      	movs	r1, #4
    b256:	f018 f995 	bl	23584 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b25a:	4604      	mov	r4, r0
    b25c:	b958      	cbnz	r0, b276 <att_get+0x42>
    b25e:	4910      	ldr	r1, [pc, #64]	; (b2a0 <att_get+0x6c>)
    b260:	4b10      	ldr	r3, [pc, #64]	; (b2a4 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    b262:	4812      	ldr	r0, [pc, #72]	; (b2ac <att_get+0x78>)
    b264:	1ac9      	subs	r1, r1, r3
    b266:	08c9      	lsrs	r1, r1, #3
    b268:	0189      	lsls	r1, r1, #6
    b26a:	f041 0101 	orr.w	r1, r1, #1
    b26e:	f015 ff0f 	bl	21090 <log_0>
	}

	return att_chan->att;
}
    b272:	4620      	mov	r0, r4
    b274:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b276:	f3bf 8f5b 	dmb	ish
    b27a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    b27e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    b282:	075b      	lsls	r3, r3, #29
    b284:	d508      	bpl.n	b298 <att_get+0x64>
    b286:	4906      	ldr	r1, [pc, #24]	; (b2a0 <att_get+0x6c>)
    b288:	4b06      	ldr	r3, [pc, #24]	; (b2a4 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    b28a:	4809      	ldr	r0, [pc, #36]	; (b2b0 <att_get+0x7c>)
    b28c:	1ac9      	subs	r1, r1, r3
    b28e:	08c9      	lsrs	r1, r1, #3
    b290:	0189      	lsls	r1, r1, #6
    b292:	f041 0102 	orr.w	r1, r1, #2
    b296:	e7d9      	b.n	b24c <att_get+0x18>
	return att_chan->att;
    b298:	f850 4c08 	ldr.w	r4, [r0, #-8]
    b29c:	e7e9      	b.n	b272 <att_get+0x3e>
    b29e:	bf00      	nop
    b2a0:	00026838 	.word	0x00026838
    b2a4:	00026828 	.word	0x00026828
    b2a8:	00029d8d 	.word	0x00029d8d
    b2ac:	00029d9b 	.word	0x00029d9b
    b2b0:	00029db6 	.word	0x00029db6

0000b2b4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    b2b4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    b2b6:	3808      	subs	r0, #8
    b2b8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    b2ba:	a901      	add	r1, sp, #4
    b2bc:	4802      	ldr	r0, [pc, #8]	; (b2c8 <bt_att_released+0x14>)
    b2be:	f013 fcad 	bl	1ec1c <k_mem_slab_free>
}
    b2c2:	b003      	add	sp, #12
    b2c4:	f85d fb04 	ldr.w	pc, [sp], #4
    b2c8:	20000ef0 	.word	0x20000ef0

0000b2cc <read_group_cb>:
{
    b2cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b2d0:	4605      	mov	r5, r0
    b2d2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b2d4:	f04f 0800 	mov.w	r8, #0
    b2d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b2dc:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    b2de:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b2e0:	f88d 8008 	strb.w	r8, [sp, #8]
    b2e4:	a902      	add	r1, sp, #8
{
    b2e6:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b2e8:	f8ad 300a 	strh.w	r3, [sp, #10]
    b2ec:	f017 fc72 	bl	22bd4 <bt_uuid_cmp>
    b2f0:	b1a0      	cbz	r0, b31c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b2f2:	f642 0301 	movw	r3, #10241	; 0x2801
    b2f6:	6828      	ldr	r0, [r5, #0]
    b2f8:	f88d 800c 	strb.w	r8, [sp, #12]
    b2fc:	a903      	add	r1, sp, #12
    b2fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    b302:	f017 fc67 	bl	22bd4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b306:	b148      	cbz	r0, b31c <read_group_cb+0x50>
		if (data->group &&
    b308:	6923      	ldr	r3, [r4, #16]
    b30a:	b11b      	cbz	r3, b314 <read_group_cb+0x48>
    b30c:	885a      	ldrh	r2, [r3, #2]
    b30e:	42b2      	cmp	r2, r6
    b310:	d200      	bcs.n	b314 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b312:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    b314:	2001      	movs	r0, #1
}
    b316:	b004      	add	sp, #16
    b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b31c:	6861      	ldr	r1, [r4, #4]
    b31e:	6828      	ldr	r0, [r5, #0]
    b320:	f017 fc58 	bl	22bd4 <bt_uuid_cmp>
    b324:	b110      	cbz	r0, b32c <read_group_cb+0x60>
		data->group = NULL;
    b326:	2300      	movs	r3, #0
    b328:	6123      	str	r3, [r4, #16]
    b32a:	e7f3      	b.n	b314 <read_group_cb+0x48>
	if (data->rsp->len &&
    b32c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    b32e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    b330:	781a      	ldrb	r2, [r3, #0]
    b332:	b13a      	cbz	r2, b344 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    b334:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    b338:	8981      	ldrh	r1, [r0, #12]
    b33a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    b33c:	4293      	cmp	r3, r2
    b33e:	da01      	bge.n	b344 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    b340:	2000      	movs	r0, #0
    b342:	e7e8      	b.n	b316 <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    b344:	2104      	movs	r1, #4
    b346:	3008      	adds	r0, #8
    b348:	f01a f89f 	bl	2548a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b34c:	4b09      	ldr	r3, [pc, #36]	; (b374 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    b34e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b350:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b352:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b354:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b356:	4629      	mov	r1, r5
    b358:	9300      	str	r3, [sp, #0]
    b35a:	9401      	str	r4, [sp, #4]
    b35c:	2300      	movs	r3, #0
    b35e:	4638      	mov	r0, r7
    b360:	f018 f99c 	bl	2369c <att_chan_read>
	if (read < 0) {
    b364:	2800      	cmp	r0, #0
    b366:	dbeb      	blt.n	b340 <read_group_cb+0x74>
	if (!data->group) {
    b368:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    b36a:	3800      	subs	r0, #0
    b36c:	bf18      	it	ne
    b36e:	2001      	movne	r0, #1
    b370:	e7d1      	b.n	b316 <read_group_cb+0x4a>
    b372:	bf00      	nop
    b374:	000237b3 	.word	0x000237b3

0000b378 <find_type_cb>:
{
    b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    b37c:	f8d2 9000 	ldr.w	r9, [r2]
{
    b380:	b091      	sub	sp, #68	; 0x44
    b382:	4607      	mov	r7, r0
    b384:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b386:	2400      	movs	r4, #0
    b388:	f642 0301 	movw	r3, #10241	; 0x2801
    b38c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    b38e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b392:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    b396:	a90b      	add	r1, sp, #44	; 0x2c
{
    b398:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b39a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b39e:	f017 fc19 	bl	22bd4 <bt_uuid_cmp>
    b3a2:	2800      	cmp	r0, #0
    b3a4:	d06a      	beq.n	b47c <find_type_cb+0x104>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    b3a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b3aa:	6838      	ldr	r0, [r7, #0]
    b3ac:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    b3b0:	a90b      	add	r1, sp, #44	; 0x2c
    b3b2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b3b6:	f017 fc0d 	bl	22bd4 <bt_uuid_cmp>
    b3ba:	4604      	mov	r4, r0
    b3bc:	b148      	cbz	r0, b3d2 <find_type_cb+0x5a>
		if (data->group &&
    b3be:	68ab      	ldr	r3, [r5, #8]
    b3c0:	b11b      	cbz	r3, b3ca <find_type_cb+0x52>
    b3c2:	885a      	ldrh	r2, [r3, #2]
    b3c4:	42b2      	cmp	r2, r6
    b3c6:	d200      	bcs.n	b3ca <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b3c8:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    b3ca:	2001      	movs	r0, #1
}
    b3cc:	b011      	add	sp, #68	; 0x44
    b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    b3d2:	6869      	ldr	r1, [r5, #4]
    b3d4:	4608      	mov	r0, r1
    b3d6:	f018 f8f0 	bl	235ba <net_buf_frags_len>
    b3da:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    b3de:	1a1b      	subs	r3, r3, r0
    b3e0:	2b03      	cmp	r3, #3
    b3e2:	d922      	bls.n	b42a <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
    b3e4:	4608      	mov	r0, r1
    b3e6:	f01a f82e 	bl	25446 <net_buf_frag_last>
    b3ea:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    b3ec:	6868      	ldr	r0, [r5, #4]
    b3ee:	f018 f8e4 	bl	235ba <net_buf_frags_len>
    b3f2:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
    b3f6:	f104 0b08 	add.w	fp, r4, #8
    b3fa:	ebaa 0a00 	sub.w	sl, sl, r0
    b3fe:	4658      	mov	r0, fp
    b400:	f01a f890 	bl	25524 <net_buf_simple_tailroom>
    b404:	4582      	cmp	sl, r0
    b406:	d212      	bcs.n	b42e <find_type_cb+0xb6>
    b408:	6868      	ldr	r0, [r5, #4]
    b40a:	f018 f8d6 	bl	235ba <net_buf_frags_len>
    b40e:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    b412:	1a18      	subs	r0, r3, r0
	if (!len) {
    b414:	b998      	cbnz	r0, b43e <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    b416:	686b      	ldr	r3, [r5, #4]
    b418:	7998      	ldrb	r0, [r3, #6]
    b41a:	f012 fa41 	bl	1d8a0 <net_buf_pool_get>
    b41e:	2200      	movs	r2, #0
    b420:	2300      	movs	r3, #0
    b422:	f019 ffd6 	bl	253d2 <net_buf_alloc_fixed>
		if (!frag) {
    b426:	4604      	mov	r4, r0
    b428:	b928      	cbnz	r0, b436 <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
    b42a:	4620      	mov	r0, r4
    b42c:	e7ce      	b.n	b3cc <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    b42e:	4658      	mov	r0, fp
    b430:	f01a f878 	bl	25524 <net_buf_simple_tailroom>
    b434:	e7ee      	b.n	b414 <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
    b436:	4601      	mov	r1, r0
    b438:	6868      	ldr	r0, [r5, #4]
    b43a:	f01a f815 	bl	25468 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    b43e:	2300      	movs	r3, #0
    b440:	9300      	str	r3, [sp, #0]
    b442:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b446:	4639      	mov	r1, r7
    b448:	2310      	movs	r3, #16
    b44a:	aa02      	add	r2, sp, #8
    b44c:	4640      	mov	r0, r8
    b44e:	47c8      	blx	r9
	if (read < 0) {
    b450:	1e07      	subs	r7, r0, #0
    b452:	db13      	blt.n	b47c <find_type_cb+0x104>
	if (read != data->value_len) {
    b454:	7c2a      	ldrb	r2, [r5, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b456:	68e8      	ldr	r0, [r5, #12]
	if (read != data->value_len) {
    b458:	42ba      	cmp	r2, r7
    b45a:	d033      	beq.n	b4c4 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b45c:	4601      	mov	r1, r0
    b45e:	a80b      	add	r0, sp, #44	; 0x2c
    b460:	f017 fbe6 	bl	22c30 <bt_uuid_create>
    b464:	b968      	cbnz	r0, b482 <find_type_cb+0x10a>
    b466:	4a19      	ldr	r2, [pc, #100]	; (b4cc <find_type_cb+0x154>)
    b468:	4b19      	ldr	r3, [pc, #100]	; (b4d0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    b46a:	7c29      	ldrb	r1, [r5, #16]
    b46c:	4819      	ldr	r0, [pc, #100]	; (b4d4 <find_type_cb+0x15c>)
    b46e:	1ad2      	subs	r2, r2, r3
    b470:	08d2      	lsrs	r2, r2, #3
    b472:	0192      	lsls	r2, r2, #6
    b474:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    b478:	f015 fe17 	bl	210aa <log_1>
	data->group = NULL;
    b47c:	2300      	movs	r3, #0
    b47e:	60ab      	str	r3, [r5, #8]
    b480:	e7a3      	b.n	b3ca <find_type_cb+0x52>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    b482:	b2fa      	uxtb	r2, r7
    b484:	a902      	add	r1, sp, #8
    b486:	a806      	add	r0, sp, #24
    b488:	f017 fbd2 	bl	22c30 <bt_uuid_create>
    b48c:	b948      	cbnz	r0, b4a2 <find_type_cb+0x12a>
    b48e:	4a0f      	ldr	r2, [pc, #60]	; (b4cc <find_type_cb+0x154>)
    b490:	4b0f      	ldr	r3, [pc, #60]	; (b4d0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    b492:	4811      	ldr	r0, [pc, #68]	; (b4d8 <find_type_cb+0x160>)
    b494:	1ad2      	subs	r2, r2, r3
    b496:	08d2      	lsrs	r2, r2, #3
    b498:	0192      	lsls	r2, r2, #6
    b49a:	f042 0202 	orr.w	r2, r2, #2
    b49e:	4639      	mov	r1, r7
    b4a0:	e7ea      	b.n	b478 <find_type_cb+0x100>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    b4a2:	a906      	add	r1, sp, #24
    b4a4:	a80b      	add	r0, sp, #44	; 0x2c
    b4a6:	f017 fb95 	bl	22bd4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    b4aa:	2800      	cmp	r0, #0
    b4ac:	d1e6      	bne.n	b47c <find_type_cb+0x104>
	data->err = 0x00;
    b4ae:	2300      	movs	r3, #0
    b4b0:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
    b4b2:	2104      	movs	r1, #4
    b4b4:	f104 0008 	add.w	r0, r4, #8
    b4b8:	f019 ffe7 	bl	2548a <net_buf_simple_add>
    b4bc:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b4be:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b4c0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    b4c2:	e782      	b.n	b3ca <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
    b4c4:	a902      	add	r1, sp, #8
    b4c6:	f01a fed6 	bl	26276 <memcmp>
    b4ca:	e7ee      	b.n	b4aa <find_type_cb+0x132>
    b4cc:	00026838 	.word	0x00026838
    b4d0:	00026828 	.word	0x00026828
    b4d4:	00029dda 	.word	0x00029dda
    b4d8:	00029df9 	.word	0x00029df9

0000b4dc <chan_req_sent>:
	if (chan->req) {
    b4dc:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    b4e0:	b13b      	cbz	r3, b4f2 <chan_req_sent+0x16>
    b4e2:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    b4e6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b4ea:	4802      	ldr	r0, [pc, #8]	; (b4f4 <chan_req_sent+0x18>)
    b4ec:	2300      	movs	r3, #0
    b4ee:	f014 b93b 	b.w	1f768 <k_delayed_work_submit_to_queue>
}
    b4f2:	4770      	bx	lr
    b4f4:	20001940 	.word	0x20001940

0000b4f8 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    b4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b4fa:	2300      	movs	r3, #0
{
    b4fc:	4606      	mov	r6, r0
    b4fe:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b500:	482c      	ldr	r0, [pc, #176]	; (b5b4 <bt_att_accept+0xbc>)
    b502:	2200      	movs	r2, #0
    b504:	4669      	mov	r1, sp
    b506:	f013 fb59 	bl	1ebbc <k_mem_slab_alloc>
    b50a:	4604      	mov	r4, r0
    b50c:	b178      	cbz	r0, b52e <bt_att_accept+0x36>
    b50e:	4a2a      	ldr	r2, [pc, #168]	; (b5b8 <bt_att_accept+0xc0>)
    b510:	4b2a      	ldr	r3, [pc, #168]	; (b5bc <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    b512:	482b      	ldr	r0, [pc, #172]	; (b5c0 <bt_att_accept+0xc8>)
    b514:	1ad2      	subs	r2, r2, r3
    b516:	08d2      	lsrs	r2, r2, #3
    b518:	0192      	lsls	r2, r2, #6
    b51a:	f042 0201 	orr.w	r2, r2, #1
    b51e:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b520:	f015 fdc3 	bl	210aa <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    b524:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    b528:	4620      	mov	r0, r4
    b52a:	b003      	add	sp, #12
    b52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
    b52e:	4601      	mov	r1, r0
    b530:	222c      	movs	r2, #44	; 0x2c
    b532:	9800      	ldr	r0, [sp, #0]
    b534:	f01a febd 	bl	262b2 <memset>
	att->conn = conn;
    b538:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b53a:	4822      	ldr	r0, [pc, #136]	; (b5c4 <bt_att_accept+0xcc>)
	list->tail = NULL;
    b53c:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    b53e:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    b542:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    b546:	2200      	movs	r2, #0
    b548:	2300      	movs	r3, #0
    b54a:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    b54c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b54e:	f013 fb35 	bl	1ebbc <k_mem_slab_alloc>
    b552:	4604      	mov	r4, r0
    b554:	b148      	cbz	r0, b56a <bt_att_accept+0x72>
    b556:	4a18      	ldr	r2, [pc, #96]	; (b5b8 <bt_att_accept+0xc0>)
    b558:	4b18      	ldr	r3, [pc, #96]	; (b5bc <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b55a:	6829      	ldr	r1, [r5, #0]
    b55c:	481a      	ldr	r0, [pc, #104]	; (b5c8 <bt_att_accept+0xd0>)
    b55e:	1ad2      	subs	r2, r2, r3
    b560:	08d2      	lsrs	r2, r2, #3
    b562:	0192      	lsls	r2, r2, #6
    b564:	f042 0201 	orr.w	r2, r2, #1
    b568:	e7da      	b.n	b520 <bt_att_accept+0x28>
    b56a:	4601      	mov	r1, r0
    b56c:	f44f 7298 	mov.w	r2, #304	; 0x130
    b570:	9801      	ldr	r0, [sp, #4]
    b572:	f01a fe9e 	bl	262b2 <memset>
	chan->chan.chan.ops = &ops;
    b576:	9801      	ldr	r0, [sp, #4]
    b578:	4b14      	ldr	r3, [pc, #80]	; (b5cc <bt_att_accept+0xd4>)
    b57a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    b57c:	30c8      	adds	r0, #200	; 0xc8
    b57e:	f01a fa96 	bl	25aae <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    b582:	9801      	ldr	r0, [sp, #4]
    b584:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    b588:	2203      	movs	r2, #3
    b58a:	4611      	mov	r1, r2
    b58c:	f01a fbfc 	bl	25d88 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b590:	9b01      	ldr	r3, [sp, #4]
    b592:	f3bf 8f5b 	dmb	ish
    b596:	33c0      	adds	r3, #192	; 0xc0
    b598:	e853 2f00 	ldrex	r2, [r3]
    b59c:	e843 4100 	strex	r1, r4, [r3]
    b5a0:	2900      	cmp	r1, #0
    b5a2:	d1f9      	bne.n	b598 <bt_att_accept+0xa0>
    b5a4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    b5a8:	9b01      	ldr	r3, [sp, #4]
    b5aa:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    b5ae:	603b      	str	r3, [r7, #0]
	return 0;
    b5b0:	e7ba      	b.n	b528 <bt_att_accept+0x30>
    b5b2:	bf00      	nop
    b5b4:	20000ed4 	.word	0x20000ed4
    b5b8:	00026838 	.word	0x00026838
    b5bc:	00026828 	.word	0x00026828
    b5c0:	00029e18 	.word	0x00029e18
    b5c4:	20000ef0 	.word	0x20000ef0
    b5c8:	00029e3d 	.word	0x00029e3d
    b5cc:	2000026c 	.word	0x2000026c

0000b5d0 <chan_cb.isra.0>:
static bt_att_chan_sent_t chan_cb(struct net_buf *buf)
    b5d0:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    b5d2:	7800      	ldrb	r0, [r0, #0]
    b5d4:	f018 f811 	bl	235fa <att_op_get_type>
    b5d8:	3801      	subs	r0, #1
    b5da:	b2c0      	uxtb	r0, r0
    b5dc:	2804      	cmp	r0, #4
    b5de:	bf96      	itet	ls
    b5e0:	4b02      	ldrls	r3, [pc, #8]	; (b5ec <chan_cb.isra.0+0x1c>)
    b5e2:	2000      	movhi	r0, #0
    b5e4:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}
    b5e8:	bd08      	pop	{r3, pc}
    b5ea:	bf00      	nop
    b5ec:	00026fd0 	.word	0x00026fd0

0000b5f0 <chan_send>:
{
    b5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b5f4:	688b      	ldr	r3, [r1, #8]
    b5f6:	781b      	ldrb	r3, [r3, #0]
    b5f8:	2bd2      	cmp	r3, #210	; 0xd2
{
    b5fa:	4605      	mov	r5, r0
    b5fc:	460c      	mov	r4, r1
    b5fe:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b600:	d116      	bne.n	b630 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    b602:	6803      	ldr	r3, [r0, #0]
    b604:	6818      	ldr	r0, [r3, #0]
    b606:	f019 fe1b 	bl	25240 <bt_smp_sign>
		if (err) {
    b60a:	4606      	mov	r6, r0
    b60c:	b180      	cbz	r0, b630 <chan_send+0x40>
    b60e:	4923      	ldr	r1, [pc, #140]	; (b69c <chan_send+0xac>)
    b610:	4b23      	ldr	r3, [pc, #140]	; (b6a0 <chan_send+0xb0>)
			BT_ERR("Error signing data");
    b612:	4824      	ldr	r0, [pc, #144]	; (b6a4 <chan_send+0xb4>)
    b614:	1ac9      	subs	r1, r1, r3
    b616:	08c9      	lsrs	r1, r1, #3
    b618:	0189      	lsls	r1, r1, #6
    b61a:	f041 0101 	orr.w	r1, r1, #1
    b61e:	f015 fd37 	bl	21090 <log_0>
		net_buf_unref(buf);
    b622:	4620      	mov	r0, r4
    b624:	f012 f9fa 	bl	1da1c <net_buf_unref>
}
    b628:	4630      	mov	r0, r6
    b62a:	b003      	add	sp, #12
    b62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    b630:	f104 0008 	add.w	r0, r4, #8
    b634:	f019 ff72 	bl	2551c <net_buf_simple_headroom>
	state->len = buf->len;
    b638:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    b63c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    b63e:	b91f      	cbnz	r7, b648 <chan_send+0x58>
    b640:	68a0      	ldr	r0, [r4, #8]
    b642:	f7ff ffc5 	bl	b5d0 <chan_cb.isra.0>
    b646:	4607      	mov	r7, r0
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b648:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    b64a:	f8c5 7128 	str.w	r7, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b64e:	4620      	mov	r0, r4
    b650:	681e      	ldr	r6, [r3, #0]
    b652:	f019 fef4 	bl	2543e <net_buf_ref>
    b656:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    b65a:	4b13      	ldr	r3, [pc, #76]	; (b6a8 <chan_send+0xb8>)
    b65c:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b65e:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    b660:	d018      	beq.n	b694 <chan_send+0xa4>
	} else if (cb == chan_cfm_sent) {
    b662:	4b12      	ldr	r3, [pc, #72]	; (b6ac <chan_send+0xbc>)
    b664:	4299      	cmp	r1, r3
    b666:	d017      	beq.n	b698 <chan_send+0xa8>
		return att_sent;
    b668:	4f11      	ldr	r7, [pc, #68]	; (b6b0 <chan_send+0xc0>)
    b66a:	4b12      	ldr	r3, [pc, #72]	; (b6b4 <chan_send+0xc4>)
    b66c:	4812      	ldr	r0, [pc, #72]	; (b6b8 <chan_send+0xc8>)
    b66e:	42b9      	cmp	r1, r7
    b670:	bf18      	it	ne
    b672:	4603      	movne	r3, r0
				&chan->chan.chan);
    b674:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b676:	4630      	mov	r0, r6
    b678:	9500      	str	r5, [sp, #0]
    b67a:	2104      	movs	r1, #4
    b67c:	f017 ff42 	bl	23504 <bt_l2cap_send_cb>
	if (!err) {
    b680:	4606      	mov	r6, r0
    b682:	2800      	cmp	r0, #0
    b684:	d0cd      	beq.n	b622 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    b686:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    b688:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    b68c:	fa10 f088 	uxtah	r0, r0, r8
    b690:	60a0      	str	r0, [r4, #8]
}
    b692:	e7c9      	b.n	b628 <chan_send+0x38>
		return att_rsp_sent;
    b694:	4b09      	ldr	r3, [pc, #36]	; (b6bc <chan_send+0xcc>)
    b696:	e7ed      	b.n	b674 <chan_send+0x84>
		return att_cfm_sent;
    b698:	4b09      	ldr	r3, [pc, #36]	; (b6c0 <chan_send+0xd0>)
    b69a:	e7eb      	b.n	b674 <chan_send+0x84>
    b69c:	00026838 	.word	0x00026838
    b6a0:	00026828 	.word	0x00026828
    b6a4:	00029e62 	.word	0x00029e62
    b6a8:	00023a03 	.word	0x00023a03
    b6ac:	00023a1f 	.word	0x00023a1f
    b6b0:	0000b4dd 	.word	0x0000b4dd
    b6b4:	0000b225 	.word	0x0000b225
    b6b8:	000235cb 	.word	0x000235cb
    b6bc:	0000b215 	.word	0x0000b215
    b6c0:	0000b205 	.word	0x0000b205

0000b6c4 <read_type_cb>:
{
    b6c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    b6c8:	f8d2 8000 	ldr.w	r8, [r2]
{
    b6cc:	4606      	mov	r6, r0
    b6ce:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b6d0:	6800      	ldr	r0, [r0, #0]
    b6d2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    b6d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    b6d8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b6da:	f017 fa7b 	bl	22bd4 <bt_uuid_cmp>
    b6de:	4607      	mov	r7, r0
    b6e0:	2800      	cmp	r0, #0
    b6e2:	d13e      	bne.n	b762 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    b6e4:	4628      	mov	r0, r5
    b6e6:	2215      	movs	r2, #21
    b6e8:	4631      	mov	r1, r6
    b6ea:	f018 fdfa 	bl	242e2 <bt_gatt_check_perm>
    b6ee:	4605      	mov	r5, r0
    b6f0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    b6f2:	b148      	cbz	r0, b708 <read_type_cb+0x44>
		if (data->rsp->len) {
    b6f4:	68e3      	ldr	r3, [r4, #12]
    b6f6:	781b      	ldrb	r3, [r3, #0]
    b6f8:	b923      	cbnz	r3, b704 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    b6fa:	2500      	movs	r5, #0
}
    b6fc:	4628      	mov	r0, r5
    b6fe:	b003      	add	sp, #12
    b700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    b704:	7527      	strb	r7, [r4, #20]
    b706:	e7f8      	b.n	b6fa <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    b708:	68a0      	ldr	r0, [r4, #8]
    b70a:	f019 fe9c 	bl	25446 <net_buf_frag_last>
    b70e:	2102      	movs	r1, #2
    b710:	3008      	adds	r0, #8
    b712:	f019 feba 	bl	2548a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b716:	4b14      	ldr	r3, [pc, #80]	; (b768 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    b718:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b71a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    b71c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b720:	4631      	mov	r1, r6
    b722:	9300      	str	r3, [sp, #0]
    b724:	9401      	str	r4, [sp, #4]
    b726:	462b      	mov	r3, r5
    b728:	4640      	mov	r0, r8
    b72a:	f017 ffb7 	bl	2369c <att_chan_read>
	if (read < 0) {
    b72e:	2800      	cmp	r0, #0
    b730:	da07      	bge.n	b742 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    b732:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    b736:	bf26      	itte	cs
    b738:	4240      	negcs	r0, r0
    b73a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    b73c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    b73e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    b740:	e7dc      	b.n	b6fc <read_type_cb+0x38>
	if (!data->item) {
    b742:	6923      	ldr	r3, [r4, #16]
    b744:	2b00      	cmp	r3, #0
    b746:	d0d8      	beq.n	b6fa <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b748:	68a0      	ldr	r0, [r4, #8]
    b74a:	f017 ff36 	bl	235ba <net_buf_frags_len>
    b74e:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b752:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b754:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b756:	7818      	ldrb	r0, [r3, #0]
    b758:	4285      	cmp	r5, r0
    b75a:	bf94      	ite	ls
    b75c:	2500      	movls	r5, #0
    b75e:	2501      	movhi	r5, #1
    b760:	e7cc      	b.n	b6fc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    b762:	2501      	movs	r5, #1
    b764:	e7ca      	b.n	b6fc <read_type_cb+0x38>
    b766:	bf00      	nop
    b768:	000235d7 	.word	0x000235d7

0000b76c <bt_att_connected>:
{
    b76c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b76e:	2104      	movs	r1, #4
{
    b770:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b772:	6800      	ldr	r0, [r0, #0]
    b774:	f017 fef6 	bl	23564 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    b778:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    b77c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b77e:	b91b      	cbnz	r3, b788 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
    b780:	f105 000c 	add.w	r0, r5, #12
    b784:	f01a f993 	bl	25aae <z_impl_k_queue_init>
	parent->next = child;
    b788:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    b78a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    b78e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    b790:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    b794:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    b796:	b902      	cbnz	r2, b79a <bt_att_connected+0x2e>
	list->tail = node;
    b798:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b79a:	f3bf 8f5b 	dmb	ish
    b79e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    b7a2:	4908      	ldr	r1, [pc, #32]	; (b7c4 <bt_att_connected+0x58>)
    b7a4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    b7a8:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b7aa:	bf5e      	ittt	pl
    b7ac:	2317      	movpl	r3, #23
    b7ae:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b7b2:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    b7b6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
    b7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    b7be:	f01a bb66 	b.w	25e8e <k_delayed_work_init>
    b7c2:	bf00      	nop
    b7c4:	0000c215 	.word	0x0000c215

0000b7c8 <bt_att_chan_create_pdu>:
{
    b7c8:	b538      	push	{r3, r4, r5, lr}
    b7ca:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    b7cc:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    b7d0:	3201      	adds	r2, #1
    b7d2:	428a      	cmp	r2, r1
    b7d4:	d90c      	bls.n	b7f0 <bt_att_chan_create_pdu+0x28>
    b7d6:	481a      	ldr	r0, [pc, #104]	; (b840 <bt_att_chan_create_pdu+0x78>)
    b7d8:	4b1a      	ldr	r3, [pc, #104]	; (b844 <bt_att_chan_create_pdu+0x7c>)
    b7da:	1a1b      	subs	r3, r3, r0
    b7dc:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    b7de:	019b      	lsls	r3, r3, #6
    b7e0:	4819      	ldr	r0, [pc, #100]	; (b848 <bt_att_chan_create_pdu+0x80>)
    b7e2:	f043 0302 	orr.w	r3, r3, #2
    b7e6:	f015 fc74 	bl	210d2 <log_2>
		return NULL;
    b7ea:	2400      	movs	r4, #0
}
    b7ec:	4620      	mov	r0, r4
    b7ee:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    b7f0:	4628      	mov	r0, r5
    b7f2:	f017 ff02 	bl	235fa <att_op_get_type>
    b7f6:	2802      	cmp	r0, #2
    b7f8:	d001      	beq.n	b7fe <bt_att_chan_create_pdu+0x36>
    b7fa:	2804      	cmp	r0, #4
    b7fc:	d114      	bne.n	b828 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    b7fe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b802:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    b804:	2100      	movs	r1, #0
    b806:	4608      	mov	r0, r1
    b808:	f017 fe79 	bl	234fe <bt_l2cap_create_pdu_timeout>
    b80c:	4604      	mov	r4, r0
	if (!buf) {
    b80e:	b980      	cbnz	r0, b832 <bt_att_chan_create_pdu+0x6a>
    b810:	4b0b      	ldr	r3, [pc, #44]	; (b840 <bt_att_chan_create_pdu+0x78>)
    b812:	4a0c      	ldr	r2, [pc, #48]	; (b844 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    b814:	480d      	ldr	r0, [pc, #52]	; (b84c <bt_att_chan_create_pdu+0x84>)
    b816:	1ad2      	subs	r2, r2, r3
    b818:	08d2      	lsrs	r2, r2, #3
    b81a:	0192      	lsls	r2, r2, #6
    b81c:	f042 0201 	orr.w	r2, r2, #1
    b820:	4629      	mov	r1, r5
    b822:	f015 fc42 	bl	210aa <log_1>
		return NULL;
    b826:	e7e1      	b.n	b7ec <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    b828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b82c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b830:	e7e8      	b.n	b804 <bt_att_chan_create_pdu+0x3c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    b832:	2101      	movs	r1, #1
    b834:	3008      	adds	r0, #8
    b836:	f019 fe28 	bl	2548a <net_buf_simple_add>
	hdr->code = op;
    b83a:	7005      	strb	r5, [r0, #0]
	return buf;
    b83c:	e7d6      	b.n	b7ec <bt_att_chan_create_pdu+0x24>
    b83e:	bf00      	nop
    b840:	00026828 	.word	0x00026828
    b844:	00026838 	.word	0x00026838
    b848:	00029e75 	.word	0x00029e75
    b84c:	00029c46 	.word	0x00029c46

0000b850 <att_indicate>:
{
    b850:	b570      	push	{r4, r5, r6, lr}
    b852:	4604      	mov	r4, r0
	handle = net_buf_pull_le16(buf);
    b854:	f101 0008 	add.w	r0, r1, #8
{
    b858:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    b85a:	f019 fe57 	bl	2550c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    b85e:	6826      	ldr	r6, [r4, #0]
    b860:	89ab      	ldrh	r3, [r5, #12]
    b862:	68aa      	ldr	r2, [r5, #8]
	handle = net_buf_pull_le16(buf);
    b864:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    b866:	6830      	ldr	r0, [r6, #0]
    b868:	f018 fea1 	bl	245ae <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    b86c:	211e      	movs	r1, #30
    b86e:	2200      	movs	r2, #0
    b870:	4620      	mov	r0, r4
    b872:	f7ff ffa9 	bl	b7c8 <bt_att_chan_create_pdu>
	if (!buf) {
    b876:	4601      	mov	r1, r0
    b878:	b118      	cbz	r0, b882 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    b87a:	4a03      	ldr	r2, [pc, #12]	; (b888 <att_indicate+0x38>)
    b87c:	4620      	mov	r0, r4
    b87e:	f018 f898 	bl	239b2 <bt_att_chan_send_rsp>
}
    b882:	2000      	movs	r0, #0
    b884:	bd70      	pop	{r4, r5, r6, pc}
    b886:	bf00      	nop
    b888:	00023a1f 	.word	0x00023a1f

0000b88c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b890:	4688      	mov	r8, r1
    b892:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    b894:	2101      	movs	r1, #1
    b896:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    b898:	4605      	mov	r5, r0
    b89a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    b89c:	f7ff ff94 	bl	b7c8 <bt_att_chan_create_pdu>
	if (!buf) {
    b8a0:	4604      	mov	r4, r0
    b8a2:	b178      	cbz	r0, b8c4 <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    b8a4:	2104      	movs	r1, #4
    b8a6:	3008      	adds	r0, #8
    b8a8:	f019 fdef 	bl	2548a <net_buf_simple_add>
	rsp->request = req;
    b8ac:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    b8b0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    b8b2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    b8b6:	4621      	mov	r1, r4
    b8b8:	4628      	mov	r0, r5
    b8ba:	4a03      	ldr	r2, [pc, #12]	; (b8c8 <send_err_rsp.part.0+0x3c>)
}
    b8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    b8c0:	f018 b877 	b.w	239b2 <bt_att_chan_send_rsp>
}
    b8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8c8:	00023a03 	.word	0x00023a03

0000b8cc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    b8cc:	898b      	ldrh	r3, [r1, #12]
{
    b8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8d2:	4604      	mov	r4, r0
    b8d4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    b8d6:	b963      	cbnz	r3, b8f2 <bt_att_recv+0x26>
    b8d8:	494a      	ldr	r1, [pc, #296]	; (ba04 <bt_att_recv+0x138>)
    b8da:	4b4b      	ldr	r3, [pc, #300]	; (ba08 <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    b8dc:	484b      	ldr	r0, [pc, #300]	; (ba0c <bt_att_recv+0x140>)
    b8de:	1ac9      	subs	r1, r1, r3
    b8e0:	08c9      	lsrs	r1, r1, #3
    b8e2:	0189      	lsls	r1, r1, #6
    b8e4:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    b8e8:	f015 fbd2 	bl	21090 <log_0>
}
    b8ec:	2000      	movs	r0, #0
    b8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b8f2:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    b8f4:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b8f8:	f108 0008 	add.w	r0, r8, #8
    b8fc:	f019 fdf6 	bl	254ec <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    b900:	4a43      	ldr	r2, [pc, #268]	; (ba10 <bt_att_recv+0x144>)
    b902:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b904:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b906:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    b908:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    b90c:	4288      	cmp	r0, r1
    b90e:	d11e      	bne.n	b94e <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    b910:	00d8      	lsls	r0, r3, #3
    b912:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b916:	789f      	ldrb	r7, [r3, #2]
    b918:	2f01      	cmp	r7, #1
    b91a:	d133      	bne.n	b984 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b91c:	f3bf 8f5b 	dmb	ish
    b920:	34b8      	adds	r4, #184	; 0xb8
    b922:	e854 3f00 	ldrex	r3, [r4]
    b926:	f043 0101 	orr.w	r1, r3, #1
    b92a:	e844 1c00 	strex	ip, r1, [r4]
    b92e:	f1bc 0f00 	cmp.w	ip, #0
    b932:	d1f6      	bne.n	b922 <bt_att_recv+0x56>
    b934:	f3bf 8f5b 	dmb	ish
    b938:	07d9      	lsls	r1, r3, #31
    b93a:	d53e      	bpl.n	b9ba <bt_att_recv+0xee>
    b93c:	4931      	ldr	r1, [pc, #196]	; (ba04 <bt_att_recv+0x138>)
    b93e:	4b32      	ldr	r3, [pc, #200]	; (ba08 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    b940:	4834      	ldr	r0, [pc, #208]	; (ba14 <bt_att_recv+0x148>)
    b942:	1ac9      	subs	r1, r1, r3
    b944:	08c9      	lsrs	r1, r1, #3
    b946:	0189      	lsls	r1, r1, #6
    b948:	f041 0102 	orr.w	r1, r1, #2
    b94c:	e7cc      	b.n	b8e8 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b94e:	3301      	adds	r3, #1
    b950:	2b1c      	cmp	r3, #28
    b952:	d1d9      	bne.n	b908 <bt_att_recv+0x3c>
    b954:	4b2c      	ldr	r3, [pc, #176]	; (ba08 <bt_att_recv+0x13c>)
    b956:	4a2b      	ldr	r2, [pc, #172]	; (ba04 <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    b958:	482f      	ldr	r0, [pc, #188]	; (ba18 <bt_att_recv+0x14c>)
    b95a:	1ad2      	subs	r2, r2, r3
    b95c:	08d2      	lsrs	r2, r2, #3
    b95e:	0192      	lsls	r2, r2, #6
    b960:	f042 0202 	orr.w	r2, r2, #2
    b964:	f015 fba1 	bl	210aa <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    b968:	7829      	ldrb	r1, [r5, #0]
    b96a:	4608      	mov	r0, r1
    b96c:	f017 fe45 	bl	235fa <att_op_get_type>
    b970:	2800      	cmp	r0, #0
    b972:	d0bb      	beq.n	b8ec <bt_att_recv+0x20>
	if (!req) {
    b974:	2900      	cmp	r1, #0
    b976:	d0b9      	beq.n	b8ec <bt_att_recv+0x20>
    b978:	2306      	movs	r3, #6
    b97a:	2200      	movs	r2, #0
    b97c:	4630      	mov	r0, r6
    b97e:	f7ff ff85 	bl	b88c <send_err_rsp.part.0>
    b982:	e7b3      	b.n	b8ec <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    b984:	2f05      	cmp	r7, #5
    b986:	d118      	bne.n	b9ba <bt_att_recv+0xee>
    b988:	f3bf 8f5b 	dmb	ish
    b98c:	34b8      	adds	r4, #184	; 0xb8
    b98e:	e854 3f00 	ldrex	r3, [r4]
    b992:	f043 0102 	orr.w	r1, r3, #2
    b996:	e844 1c00 	strex	ip, r1, [r4]
    b99a:	f1bc 0f00 	cmp.w	ip, #0
    b99e:	d1f6      	bne.n	b98e <bt_att_recv+0xc2>
    b9a0:	f3bf 8f5b 	dmb	ish
    b9a4:	079b      	lsls	r3, r3, #30
    b9a6:	d508      	bpl.n	b9ba <bt_att_recv+0xee>
    b9a8:	4916      	ldr	r1, [pc, #88]	; (ba04 <bt_att_recv+0x138>)
    b9aa:	4b17      	ldr	r3, [pc, #92]	; (ba08 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    b9ac:	481b      	ldr	r0, [pc, #108]	; (ba1c <bt_att_recv+0x150>)
    b9ae:	1ac9      	subs	r1, r1, r3
    b9b0:	08c9      	lsrs	r1, r1, #3
    b9b2:	0189      	lsls	r1, r1, #6
    b9b4:	f041 0102 	orr.w	r1, r1, #2
    b9b8:	e796      	b.n	b8e8 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    b9ba:	1813      	adds	r3, r2, r0
    b9bc:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    b9c0:	785a      	ldrb	r2, [r3, #1]
    b9c2:	428a      	cmp	r2, r1
    b9c4:	d90e      	bls.n	b9e4 <bt_att_recv+0x118>
    b9c6:	4a10      	ldr	r2, [pc, #64]	; (ba08 <bt_att_recv+0x13c>)
    b9c8:	4b0e      	ldr	r3, [pc, #56]	; (ba04 <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    b9ca:	4815      	ldr	r0, [pc, #84]	; (ba20 <bt_att_recv+0x154>)
    b9cc:	1a9b      	subs	r3, r3, r2
    b9ce:	08db      	lsrs	r3, r3, #3
    b9d0:	019b      	lsls	r3, r3, #6
    b9d2:	782a      	ldrb	r2, [r5, #0]
    b9d4:	f043 0301 	orr.w	r3, r3, #1
    b9d8:	f015 fb7b 	bl	210d2 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    b9dc:	2f01      	cmp	r7, #1
    b9de:	d185      	bne.n	b8ec <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    b9e0:	2304      	movs	r3, #4
    b9e2:	e00a      	b.n	b9fa <bt_att_recv+0x12e>
		err = handler->func(att_chan, buf);
    b9e4:	685b      	ldr	r3, [r3, #4]
    b9e6:	4641      	mov	r1, r8
    b9e8:	4630      	mov	r0, r6
    b9ea:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    b9ec:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    b9ee:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    b9f0:	f47f af7c 	bne.w	b8ec <bt_att_recv+0x20>
    b9f4:	2800      	cmp	r0, #0
    b9f6:	f43f af79 	beq.w	b8ec <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    b9fa:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    b9fc:	2900      	cmp	r1, #0
    b9fe:	f43f af75 	beq.w	b8ec <bt_att_recv+0x20>
    ba02:	e7ba      	b.n	b97a <bt_att_recv+0xae>
    ba04:	00026838 	.word	0x00026838
    ba08:	00026828 	.word	0x00026828
    ba0c:	00029e9a 	.word	0x00029e9a
    ba10:	00026fe4 	.word	0x00026fe4
    ba14:	00029eb5 	.word	0x00029eb5
    ba18:	00029f0f 	.word	0x00029f0f
    ba1c:	00029ed1 	.word	0x00029ed1
    ba20:	00029ef0 	.word	0x00029ef0

0000ba24 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    ba24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ba28:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ba2a:	6803      	ldr	r3, [r0, #0]
    ba2c:	460e      	mov	r6, r1
    ba2e:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    ba30:	b087      	sub	sp, #28
    ba32:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ba34:	bf18      	it	ne
    ba36:	2101      	movne	r1, #1
    ba38:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    ba3a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ba3c:	f018 fde2 	bl	24604 <bt_gatt_change_aware>
    ba40:	2800      	cmp	r0, #0
    ba42:	d04b      	beq.n	badc <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
    ba44:	2f00      	cmp	r7, #0
    ba46:	d04b      	beq.n	bae0 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
    ba48:	2218      	movs	r2, #24
    ba4a:	2100      	movs	r1, #0
    ba4c:	4668      	mov	r0, sp
    ba4e:	f01a fc30 	bl	262b2 <memset>
	if (rsp) {
    ba52:	f1b8 0f00 	cmp.w	r8, #0
    ba56:	d122      	bne.n	ba9e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    ba58:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ba5a:	4a22      	ldr	r2, [pc, #136]	; (bae4 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    ba5c:	681b      	ldr	r3, [r3, #0]
    ba5e:	9300      	str	r3, [sp, #0]
	data.value = value;
    ba60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ba62:	9303      	str	r3, [sp, #12]
	data.len = len;
    ba64:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    ba68:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ba6c:	2301      	movs	r3, #1
    ba6e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    ba72:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ba76:	466b      	mov	r3, sp
    ba78:	4639      	mov	r1, r7
    ba7a:	4638      	mov	r0, r7
	data.req = req;
    ba7c:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    ba80:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ba84:	f017 fdff 	bl	23686 <bt_gatt_foreach_attr>
	if (data.err) {
    ba88:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ba8c:	b1f4      	cbz	r4, bacc <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    ba8e:	f1b8 0f00 	cmp.w	r8, #0
    ba92:	d10e      	bne.n	bab2 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    ba94:	2400      	movs	r4, #0
}
    ba96:	4620      	mov	r0, r4
    ba98:	b007      	add	sp, #28
    ba9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    ba9e:	2200      	movs	r2, #0
    baa0:	4641      	mov	r1, r8
    baa2:	4628      	mov	r0, r5
    baa4:	f7ff fe90 	bl	b7c8 <bt_att_chan_create_pdu>
    baa8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    baaa:	2800      	cmp	r0, #0
    baac:	d1d4      	bne.n	ba58 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    baae:	240e      	movs	r4, #14
    bab0:	e7f1      	b.n	ba96 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    bab2:	9801      	ldr	r0, [sp, #4]
    bab4:	f011 ffb2 	bl	1da1c <net_buf_unref>
	if (!req) {
    bab8:	2e00      	cmp	r6, #0
    baba:	d0eb      	beq.n	ba94 <att_write_rsp.constprop.0+0x70>
    babc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bac0:	463a      	mov	r2, r7
    bac2:	4631      	mov	r1, r6
    bac4:	4628      	mov	r0, r5
    bac6:	f7ff fee1 	bl	b88c <send_err_rsp.part.0>
    baca:	e7e3      	b.n	ba94 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    bacc:	9901      	ldr	r1, [sp, #4]
    bace:	2900      	cmp	r1, #0
    bad0:	d0e0      	beq.n	ba94 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bad2:	4a05      	ldr	r2, [pc, #20]	; (bae8 <att_write_rsp.constprop.0+0xc4>)
    bad4:	4628      	mov	r0, r5
    bad6:	f017 ff6c 	bl	239b2 <bt_att_chan_send_rsp>
    bada:	e7dc      	b.n	ba96 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    badc:	2412      	movs	r4, #18
    bade:	e7da      	b.n	ba96 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    bae0:	2401      	movs	r4, #1
    bae2:	e7d8      	b.n	ba96 <att_write_rsp.constprop.0+0x72>
    bae4:	000237d3 	.word	0x000237d3
    bae8:	00023a03 	.word	0x00023a03

0000baec <bt_att_create_pdu>:
{
    baec:	b570      	push	{r4, r5, r6, lr}
    baee:	460e      	mov	r6, r1
    baf0:	4615      	mov	r5, r2
	att = att_get(conn);
    baf2:	f7ff fb9f 	bl	b234 <att_get>
	if (!att) {
    baf6:	b1c0      	cbz	r0, bb2a <bt_att_create_pdu+0x3e>
	return list->head;
    baf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bafa:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bafc:	b15b      	cbz	r3, bb16 <bt_att_create_pdu+0x2a>
    bafe:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    bb02:	d008      	beq.n	bb16 <bt_att_create_pdu+0x2a>
	return node->next;
    bb04:	681b      	ldr	r3, [r3, #0]
    bb06:	b10b      	cbz	r3, bb0c <bt_att_create_pdu+0x20>
    bb08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    bb0c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    bb10:	4291      	cmp	r1, r2
    bb12:	d90c      	bls.n	bb2e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bb14:	b98b      	cbnz	r3, bb3a <bt_att_create_pdu+0x4e>
    bb16:	4a0e      	ldr	r2, [pc, #56]	; (bb50 <bt_att_create_pdu+0x64>)
    bb18:	4b0e      	ldr	r3, [pc, #56]	; (bb54 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    bb1a:	480f      	ldr	r0, [pc, #60]	; (bb58 <bt_att_create_pdu+0x6c>)
    bb1c:	1ad2      	subs	r2, r2, r3
    bb1e:	08d2      	lsrs	r2, r2, #3
    bb20:	0192      	lsls	r2, r2, #6
    bb22:	f042 0202 	orr.w	r2, r2, #2
    bb26:	f015 fac0 	bl	210aa <log_1>
}
    bb2a:	2000      	movs	r0, #0
    bb2c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    bb2e:	462a      	mov	r2, r5
    bb30:	4631      	mov	r1, r6
}
    bb32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    bb36:	f7ff be47 	b.w	b7c8 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bb3a:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    bb3e:	d004      	beq.n	bb4a <bt_att_create_pdu+0x5e>
	return node->next;
    bb40:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bb44:	b10c      	cbz	r4, bb4a <bt_att_create_pdu+0x5e>
    bb46:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    bb4a:	4618      	mov	r0, r3
    bb4c:	4623      	mov	r3, r4
    bb4e:	e7dd      	b.n	bb0c <bt_att_create_pdu+0x20>
    bb50:	00026838 	.word	0x00026838
    bb54:	00026828 	.word	0x00026828
    bb58:	00029f29 	.word	0x00029f29

0000bb5c <att_read_group_req>:
{
    bb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    bb60:	898c      	ldrh	r4, [r1, #12]
    bb62:	3c04      	subs	r4, #4
    bb64:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    bb66:	2c02      	cmp	r4, #2
{
    bb68:	4605      	mov	r5, r0
    bb6a:	b08c      	sub	sp, #48	; 0x30
    bb6c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    bb6e:	d001      	beq.n	bb74 <att_read_group_req+0x18>
    bb70:	2c10      	cmp	r4, #16
    bb72:	d16f      	bne.n	bc54 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    bb74:	2104      	movs	r1, #4
    bb76:	3008      	adds	r0, #8
    bb78:	f019 fcb8 	bl	254ec <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    bb7c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    bb80:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    bb82:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    bb84:	1d01      	adds	r1, r0, #4
    bb86:	4622      	mov	r2, r4
    bb88:	4640      	mov	r0, r8
    bb8a:	f017 f851 	bl	22c30 <bt_uuid_create>
    bb8e:	2800      	cmp	r0, #0
    bb90:	d062      	beq.n	bc58 <att_read_group_req+0xfc>
	if (!start || !end) {
    bb92:	2e00      	cmp	r6, #0
    bb94:	d03a      	beq.n	bc0c <att_read_group_req+0xb0>
    bb96:	2400      	movs	r4, #0
    bb98:	2f00      	cmp	r7, #0
    bb9a:	d036      	beq.n	bc0a <att_read_group_req+0xae>
	if (start > end) {
    bb9c:	42be      	cmp	r6, r7
    bb9e:	d835      	bhi.n	bc0c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    bba0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bba4:	a901      	add	r1, sp, #4
    bba6:	4640      	mov	r0, r8
    bba8:	f88d 4004 	strb.w	r4, [sp, #4]
    bbac:	f8ad 3006 	strh.w	r3, [sp, #6]
    bbb0:	f017 f810 	bl	22bd4 <bt_uuid_cmp>
    bbb4:	2800      	cmp	r0, #0
    bbb6:	d134      	bne.n	bc22 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    bbb8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    bbba:	2214      	movs	r2, #20
    bbbc:	2100      	movs	r1, #0
    bbbe:	a807      	add	r0, sp, #28
    bbc0:	f01a fb77 	bl	262b2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    bbc4:	2201      	movs	r2, #1
    bbc6:	2111      	movs	r1, #17
    bbc8:	4620      	mov	r0, r4
    bbca:	f7ff ff8f 	bl	baec <bt_att_create_pdu>
    bbce:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    bbd0:	2800      	cmp	r0, #0
    bbd2:	d041      	beq.n	bc58 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    bbd4:	2101      	movs	r1, #1
    bbd6:	3008      	adds	r0, #8
	data.uuid = uuid;
    bbd8:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    bbdc:	f019 fc55 	bl	2548a <net_buf_simple_add>
	data.rsp->len = 0U;
    bbe0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    bbe4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    bbe6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    bbe8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    bbec:	4a1b      	ldr	r2, [pc, #108]	; (bc5c <att_read_group_req+0x100>)
	data.group = NULL;
    bbee:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    bbf2:	4639      	mov	r1, r7
    bbf4:	4630      	mov	r0, r6
    bbf6:	f017 fd46 	bl	23686 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    bbfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bbfc:	781c      	ldrb	r4, [r3, #0]
    bbfe:	bb1c      	cbnz	r4, bc48 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    bc00:	9809      	ldr	r0, [sp, #36]	; 0x24
    bc02:	f011 ff0b 	bl	1da1c <net_buf_unref>
	if (!req) {
    bc06:	230a      	movs	r3, #10
    bc08:	e018      	b.n	bc3c <att_read_group_req+0xe0>
			*err = 0U;
    bc0a:	463e      	mov	r6, r7
	if (!req) {
    bc0c:	2301      	movs	r3, #1
    bc0e:	4632      	mov	r2, r6
    bc10:	2110      	movs	r1, #16
    bc12:	4628      	mov	r0, r5
    bc14:	f7ff fe3a 	bl	b88c <send_err_rsp.part.0>
		return 0;
    bc18:	2400      	movs	r4, #0
}
    bc1a:	4620      	mov	r0, r4
    bc1c:	b00c      	add	sp, #48	; 0x30
    bc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    bc22:	f642 0301 	movw	r3, #10241	; 0x2801
    bc26:	a907      	add	r1, sp, #28
    bc28:	4640      	mov	r0, r8
    bc2a:	f88d 401c 	strb.w	r4, [sp, #28]
    bc2e:	f8ad 301e 	strh.w	r3, [sp, #30]
    bc32:	f016 ffcf 	bl	22bd4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    bc36:	2800      	cmp	r0, #0
    bc38:	d0be      	beq.n	bbb8 <att_read_group_req+0x5c>
	if (!req) {
    bc3a:	2310      	movs	r3, #16
    bc3c:	4632      	mov	r2, r6
    bc3e:	2110      	movs	r1, #16
    bc40:	4628      	mov	r0, r5
    bc42:	f7ff fe23 	bl	b88c <send_err_rsp.part.0>
		return 0;
    bc46:	e7e8      	b.n	bc1a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bc48:	4a05      	ldr	r2, [pc, #20]	; (bc60 <att_read_group_req+0x104>)
    bc4a:	9909      	ldr	r1, [sp, #36]	; 0x24
    bc4c:	4628      	mov	r0, r5
    bc4e:	f017 feb0 	bl	239b2 <bt_att_chan_send_rsp>
	return 0;
    bc52:	e7e1      	b.n	bc18 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    bc54:	2404      	movs	r4, #4
    bc56:	e7e0      	b.n	bc1a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    bc58:	240e      	movs	r4, #14
    bc5a:	e7de      	b.n	bc1a <att_read_group_req+0xbe>
    bc5c:	0000b2cd 	.word	0x0000b2cd
    bc60:	00023a03 	.word	0x00023a03

0000bc64 <att_read_mult_req>:
{
    bc64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    bc68:	6886      	ldr	r6, [r0, #8]
{
    bc6a:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    bc6c:	2214      	movs	r2, #20
{
    bc6e:	4604      	mov	r4, r0
    bc70:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    bc72:	a801      	add	r0, sp, #4
    bc74:	2100      	movs	r1, #0
    bc76:	f01a fb1c 	bl	262b2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    bc7a:	2200      	movs	r2, #0
    bc7c:	210f      	movs	r1, #15
    bc7e:	4630      	mov	r0, r6
    bc80:	f7ff ff34 	bl	baec <bt_att_create_pdu>
    bc84:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    bc86:	b360      	cbz	r0, bce2 <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    bc88:	f8df 905c 	ldr.w	r9, [pc, #92]	; bce8 <att_read_mult_req+0x84>
	data.chan = chan;
    bc8c:	9401      	str	r4, [sp, #4]
		handle = net_buf_pull_le16(buf);
    bc8e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    bc92:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    bc96:	89ab      	ldrh	r3, [r5, #12]
    bc98:	2b01      	cmp	r3, #1
    bc9a:	d805      	bhi.n	bca8 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bc9c:	4a13      	ldr	r2, [pc, #76]	; (bcec <att_read_mult_req+0x88>)
    bc9e:	9903      	ldr	r1, [sp, #12]
    bca0:	4620      	mov	r0, r4
    bca2:	f017 fe86 	bl	239b2 <bt_att_chan_send_rsp>
    bca6:	e018      	b.n	bcda <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    bca8:	4638      	mov	r0, r7
    bcaa:	f019 fc2f 	bl	2550c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    bcae:	ab01      	add	r3, sp, #4
    bcb0:	464a      	mov	r2, r9
    bcb2:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    bcb4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    bcb6:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    bcba:	f017 fce4 	bl	23686 <bt_gatt_foreach_attr>
		if (data.err) {
    bcbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d0e7      	beq.n	bc96 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    bcc6:	9803      	ldr	r0, [sp, #12]
    bcc8:	f011 fea8 	bl	1da1c <net_buf_unref>
	if (!req) {
    bccc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bcd0:	4632      	mov	r2, r6
    bcd2:	210e      	movs	r1, #14
    bcd4:	4620      	mov	r0, r4
    bcd6:	f7ff fdd9 	bl	b88c <send_err_rsp.part.0>
	return 0;
    bcda:	2000      	movs	r0, #0
}
    bcdc:	b007      	add	sp, #28
    bcde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    bce2:	200e      	movs	r0, #14
    bce4:	e7fa      	b.n	bcdc <att_read_mult_req+0x78>
    bce6:	bf00      	nop
    bce8:	00023a3b 	.word	0x00023a3b
    bcec:	00023a03 	.word	0x00023a03

0000bcf0 <att_read_rsp>:
{
    bcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    bcf4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    bcf8:	b086      	sub	sp, #24
    bcfa:	4605      	mov	r5, r0
    bcfc:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    bcfe:	4640      	mov	r0, r8
    bd00:	2101      	movs	r1, #1
{
    bd02:	4614      	mov	r4, r2
    bd04:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    bd06:	f018 fc7d 	bl	24604 <bt_gatt_change_aware>
    bd0a:	b390      	cbz	r0, bd72 <att_read_rsp+0x82>
	if (!handle) {
    bd0c:	b39e      	cbz	r6, bd76 <att_read_rsp+0x86>
	(void)memset(&data, 0, sizeof(data));
    bd0e:	2214      	movs	r2, #20
    bd10:	2100      	movs	r1, #0
    bd12:	a801      	add	r0, sp, #4
    bd14:	f01a facd 	bl	262b2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    bd18:	2200      	movs	r2, #0
    bd1a:	4621      	mov	r1, r4
    bd1c:	4640      	mov	r0, r8
    bd1e:	f7ff fee5 	bl	baec <bt_att_create_pdu>
    bd22:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    bd24:	b348      	cbz	r0, bd7a <att_read_rsp+0x8a>
	data.offset = offset;
    bd26:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    bd2a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    bd2e:	2301      	movs	r3, #1
    bd30:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    bd34:	4a12      	ldr	r2, [pc, #72]	; (bd80 <att_read_rsp+0x90>)
	data.chan = chan;
    bd36:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    bd38:	ab01      	add	r3, sp, #4
    bd3a:	4631      	mov	r1, r6
    bd3c:	4630      	mov	r0, r6
    bd3e:	f017 fca2 	bl	23686 <bt_gatt_foreach_attr>
	if (data.err) {
    bd42:	f89d 4014 	ldrb.w	r4, [sp, #20]
    bd46:	b174      	cbz	r4, bd66 <att_read_rsp+0x76>
		net_buf_unref(data.buf);
    bd48:	9803      	ldr	r0, [sp, #12]
    bd4a:	f011 fe67 	bl	1da1c <net_buf_unref>
	if (!req) {
    bd4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bd52:	4632      	mov	r2, r6
    bd54:	4639      	mov	r1, r7
    bd56:	4628      	mov	r0, r5
    bd58:	f7ff fd98 	bl	b88c <send_err_rsp.part.0>
		return 0;
    bd5c:	2400      	movs	r4, #0
}
    bd5e:	4620      	mov	r0, r4
    bd60:	b006      	add	sp, #24
    bd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bd66:	4a07      	ldr	r2, [pc, #28]	; (bd84 <att_read_rsp+0x94>)
    bd68:	9903      	ldr	r1, [sp, #12]
    bd6a:	4628      	mov	r0, r5
    bd6c:	f017 fe21 	bl	239b2 <bt_att_chan_send_rsp>
	return 0;
    bd70:	e7f5      	b.n	bd5e <att_read_rsp+0x6e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    bd72:	2412      	movs	r4, #18
    bd74:	e7f3      	b.n	bd5e <att_read_rsp+0x6e>
		return BT_ATT_ERR_INVALID_HANDLE;
    bd76:	2401      	movs	r4, #1
    bd78:	e7f1      	b.n	bd5e <att_read_rsp+0x6e>
		return BT_ATT_ERR_UNLIKELY;
    bd7a:	240e      	movs	r4, #14
    bd7c:	e7ef      	b.n	bd5e <att_read_rsp+0x6e>
    bd7e:	bf00      	nop
    bd80:	00023a3b 	.word	0x00023a3b
    bd84:	00023a03 	.word	0x00023a03

0000bd88 <att_read_type_req>:
{
    bd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    bd8c:	898c      	ldrh	r4, [r1, #12]
    bd8e:	3c04      	subs	r4, #4
    bd90:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    bd92:	2c02      	cmp	r4, #2
{
    bd94:	4605      	mov	r5, r0
    bd96:	b08c      	sub	sp, #48	; 0x30
    bd98:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    bd9a:	d001      	beq.n	bda0 <att_read_type_req+0x18>
    bd9c:	2c10      	cmp	r4, #16
    bd9e:	d150      	bne.n	be42 <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    bda0:	2104      	movs	r1, #4
    bda2:	3008      	adds	r0, #8
    bda4:	f019 fba2 	bl	254ec <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    bda8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    bdac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    bdae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    bdb0:	1d01      	adds	r1, r0, #4
    bdb2:	4622      	mov	r2, r4
    bdb4:	4640      	mov	r0, r8
    bdb6:	f016 ff3b 	bl	22c30 <bt_uuid_create>
    bdba:	b188      	cbz	r0, bde0 <att_read_type_req+0x58>
	if (!start || !end) {
    bdbc:	b19e      	cbz	r6, bde6 <att_read_type_req+0x5e>
    bdbe:	b18f      	cbz	r7, bde4 <att_read_type_req+0x5c>
	if (start > end) {
    bdc0:	42b7      	cmp	r7, r6
    bdc2:	d310      	bcc.n	bde6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    bdc4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    bdc6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    bdc8:	2100      	movs	r1, #0
    bdca:	eb0d 0002 	add.w	r0, sp, r2
    bdce:	f01a fa70 	bl	262b2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    bdd2:	2201      	movs	r2, #1
    bdd4:	2109      	movs	r1, #9
    bdd6:	4620      	mov	r0, r4
    bdd8:	f7ff fe88 	bl	baec <bt_att_create_pdu>
    bddc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    bdde:	b968      	cbnz	r0, bdfc <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    bde0:	240e      	movs	r4, #14
    bde2:	e007      	b.n	bdf4 <att_read_type_req+0x6c>
			*err = 0U;
    bde4:	463e      	mov	r6, r7
	if (!req) {
    bde6:	2301      	movs	r3, #1
    bde8:	4632      	mov	r2, r6
    bdea:	2108      	movs	r1, #8
    bdec:	4628      	mov	r0, r5
    bdee:	f7ff fd4d 	bl	b88c <send_err_rsp.part.0>
		return 0;
    bdf2:	2400      	movs	r4, #0
}
    bdf4:	4620      	mov	r0, r4
    bdf6:	b00c      	add	sp, #48	; 0x30
    bdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    bdfc:	2101      	movs	r1, #1
    bdfe:	3008      	adds	r0, #8
	data.uuid = uuid;
    be00:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    be04:	f019 fb41 	bl	2548a <net_buf_simple_add>
	data.rsp->len = 0U;
    be08:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    be0c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    be0e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    be10:	4a0d      	ldr	r2, [pc, #52]	; (be48 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    be12:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    be16:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    be18:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    be1c:	4630      	mov	r0, r6
    be1e:	ab06      	add	r3, sp, #24
    be20:	f017 fc31 	bl	23686 <bt_gatt_foreach_attr>
	if (data.err) {
    be24:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    be28:	b12c      	cbz	r4, be36 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    be2a:	9808      	ldr	r0, [sp, #32]
    be2c:	f011 fdf6 	bl	1da1c <net_buf_unref>
	if (!req) {
    be30:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    be34:	e7d8      	b.n	bde8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    be36:	4a05      	ldr	r2, [pc, #20]	; (be4c <att_read_type_req+0xc4>)
    be38:	9908      	ldr	r1, [sp, #32]
    be3a:	4628      	mov	r0, r5
    be3c:	f017 fdb9 	bl	239b2 <bt_att_chan_send_rsp>
	return 0;
    be40:	e7d8      	b.n	bdf4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    be42:	2404      	movs	r4, #4
    be44:	e7d6      	b.n	bdf4 <att_read_type_req+0x6c>
    be46:	bf00      	nop
    be48:	0000b6c5 	.word	0x0000b6c5
    be4c:	00023a03 	.word	0x00023a03

0000be50 <att_find_type_req>:
{
    be50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be54:	4688      	mov	r8, r1
    be56:	b086      	sub	sp, #24
    be58:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    be5a:	2106      	movs	r1, #6
    be5c:	f108 0008 	add.w	r0, r8, #8
    be60:	f019 fb44 	bl	254ec <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    be64:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    be66:	b317      	cbz	r7, beae <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    be68:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    be6c:	f1b9 0f00 	cmp.w	r9, #0
    be70:	d01c      	beq.n	beac <att_find_type_req+0x5c>
	if (start > end) {
    be72:	454f      	cmp	r7, r9
    be74:	d81b      	bhi.n	beae <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    be76:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    be78:	f8ad 3002 	strh.w	r3, [sp, #2]
    be7c:	2400      	movs	r4, #0
    be7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    be82:	a901      	add	r1, sp, #4
    be84:	4668      	mov	r0, sp
	value = buf->data;
    be86:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    be8a:	f88d 4000 	strb.w	r4, [sp]
    be8e:	f88d 4004 	strb.w	r4, [sp, #4]
    be92:	f8ad 3006 	strh.w	r3, [sp, #6]
    be96:	f016 fe9d 	bl	22bd4 <bt_uuid_cmp>
    be9a:	4606      	mov	r6, r0
    be9c:	b190      	cbz	r0, bec4 <att_find_type_req+0x74>
	if (!req) {
    be9e:	230a      	movs	r3, #10
    bea0:	463a      	mov	r2, r7
    bea2:	2106      	movs	r1, #6
    bea4:	4628      	mov	r0, r5
    bea6:	f7ff fcf1 	bl	b88c <send_err_rsp.part.0>
		return 0;
    beaa:	e007      	b.n	bebc <att_find_type_req+0x6c>
			*err = 0U;
    beac:	464f      	mov	r7, r9
	if (!req) {
    beae:	2301      	movs	r3, #1
    beb0:	463a      	mov	r2, r7
    beb2:	2106      	movs	r1, #6
    beb4:	4628      	mov	r0, r5
    beb6:	f7ff fce9 	bl	b88c <send_err_rsp.part.0>
		return 0;
    beba:	2400      	movs	r4, #0
}
    bebc:	4620      	mov	r0, r4
    bebe:	b006      	add	sp, #24
    bec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    bec4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    bec8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    becc:	4601      	mov	r1, r0
    bece:	2214      	movs	r2, #20
    bed0:	a801      	add	r0, sp, #4
    bed2:	f01a f9ee 	bl	262b2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    bed6:	4632      	mov	r2, r6
    bed8:	2107      	movs	r1, #7
    beda:	4640      	mov	r0, r8
    bedc:	f7ff fe06 	bl	baec <bt_att_create_pdu>
    bee0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    bee2:	b1e0      	cbz	r0, bf1e <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    bee4:	230a      	movs	r3, #10
    bee6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    beea:	4a0e      	ldr	r2, [pc, #56]	; (bf24 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    beec:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bef0:	ab01      	add	r3, sp, #4
    bef2:	4649      	mov	r1, r9
    bef4:	4638      	mov	r0, r7
	data.value = value;
    bef6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    befa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    befc:	f017 fbc3 	bl	23686 <bt_gatt_foreach_attr>
	if (data.err) {
    bf00:	f89d 4015 	ldrb.w	r4, [sp, #21]
    bf04:	b12c      	cbz	r4, bf12 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    bf06:	9802      	ldr	r0, [sp, #8]
    bf08:	f011 fd88 	bl	1da1c <net_buf_unref>
	if (!req) {
    bf0c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    bf10:	e7ce      	b.n	beb0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bf12:	4a05      	ldr	r2, [pc, #20]	; (bf28 <att_find_type_req+0xd8>)
    bf14:	9902      	ldr	r1, [sp, #8]
    bf16:	4628      	mov	r0, r5
    bf18:	f017 fd4b 	bl	239b2 <bt_att_chan_send_rsp>
	return 0;
    bf1c:	e7ce      	b.n	bebc <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    bf1e:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    bf20:	e7cc      	b.n	bebc <att_find_type_req+0x6c>
    bf22:	bf00      	nop
    bf24:	0000b379 	.word	0x0000b379
    bf28:	00023a03 	.word	0x00023a03

0000bf2c <att_find_info_req>:
{
    bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    bf2e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    bf30:	881e      	ldrh	r6, [r3, #0]
{
    bf32:	b085      	sub	sp, #20
    bf34:	4605      	mov	r5, r0
	if (!start || !end) {
    bf36:	b19e      	cbz	r6, bf60 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    bf38:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    bf3a:	b184      	cbz	r4, bf5e <att_find_info_req+0x32>
	if (start > end) {
    bf3c:	42b4      	cmp	r4, r6
    bf3e:	d30f      	bcc.n	bf60 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    bf40:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    bf42:	2210      	movs	r2, #16
    bf44:	2100      	movs	r1, #0
    bf46:	4668      	mov	r0, sp
    bf48:	f01a f9b3 	bl	262b2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    bf4c:	2200      	movs	r2, #0
    bf4e:	2105      	movs	r1, #5
    bf50:	4638      	mov	r0, r7
    bf52:	f7ff fdcb 	bl	baec <bt_att_create_pdu>
    bf56:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    bf58:	b958      	cbnz	r0, bf72 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    bf5a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    bf5c:	e007      	b.n	bf6e <att_find_info_req+0x42>
			*err = 0U;
    bf5e:	4626      	mov	r6, r4
	if (!req) {
    bf60:	2301      	movs	r3, #1
    bf62:	4632      	mov	r2, r6
    bf64:	2104      	movs	r1, #4
    bf66:	4628      	mov	r0, r5
    bf68:	f7ff fc90 	bl	b88c <send_err_rsp.part.0>
	return 0;
    bf6c:	2000      	movs	r0, #0
}
    bf6e:	b005      	add	sp, #20
    bf70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bf72:	4621      	mov	r1, r4
    bf74:	4a09      	ldr	r2, [pc, #36]	; (bf9c <att_find_info_req+0x70>)
	data.chan = chan;
    bf76:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bf78:	466b      	mov	r3, sp
    bf7a:	4630      	mov	r0, r6
    bf7c:	f017 fb83 	bl	23686 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    bf80:	9c02      	ldr	r4, [sp, #8]
    bf82:	b924      	cbnz	r4, bf8e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    bf84:	9801      	ldr	r0, [sp, #4]
    bf86:	f011 fd49 	bl	1da1c <net_buf_unref>
	if (!req) {
    bf8a:	230a      	movs	r3, #10
    bf8c:	e7e9      	b.n	bf62 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bf8e:	4a04      	ldr	r2, [pc, #16]	; (bfa0 <att_find_info_req+0x74>)
    bf90:	9901      	ldr	r1, [sp, #4]
    bf92:	4628      	mov	r0, r5
    bf94:	f017 fd0d 	bl	239b2 <bt_att_chan_send_rsp>
    bf98:	e7e8      	b.n	bf6c <att_find_info_req+0x40>
    bf9a:	bf00      	nop
    bf9c:	0002382f 	.word	0x0002382f
    bfa0:	00023a03 	.word	0x00023a03

0000bfa4 <att_mtu_req>:
{
    bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    bfa6:	6803      	ldr	r3, [r0, #0]
{
    bfa8:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    bfaa:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bfac:	f3bf 8f5b 	dmb	ish
    bfb0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    bfb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    bfb8:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    bfbc:	071b      	lsls	r3, r3, #28
    bfbe:	d41e      	bmi.n	bffe <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
    bfc0:	688b      	ldr	r3, [r1, #8]
    bfc2:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    bfc4:	2e16      	cmp	r6, #22
    bfc6:	d91c      	bls.n	c002 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    bfc8:	2202      	movs	r2, #2
    bfca:	2103      	movs	r1, #3
    bfcc:	f7ff fd8e 	bl	baec <bt_att_create_pdu>
	if (!pdu) {
    bfd0:	4607      	mov	r7, r0
    bfd2:	b1c0      	cbz	r0, c006 <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    bfd4:	2102      	movs	r1, #2
    bfd6:	3008      	adds	r0, #8
    bfd8:	f019 fa57 	bl	2548a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    bfdc:	2341      	movs	r3, #65	; 0x41
    bfde:	7003      	strb	r3, [r0, #0]
    bfe0:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    bfe2:	4a0a      	ldr	r2, [pc, #40]	; (c00c <att_mtu_req+0x68>)
    bfe4:	4628      	mov	r0, r5
    bfe6:	4639      	mov	r1, r7
    bfe8:	f017 fce3 	bl	239b2 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    bfec:	2e41      	cmp	r6, #65	; 0x41
    bfee:	bf28      	it	cs
    bff0:	2641      	movcs	r6, #65	; 0x41
    bff2:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    bff6:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    bffa:	4620      	mov	r0, r4
}
    bffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    bffe:	2006      	movs	r0, #6
    c000:	e7fc      	b.n	bffc <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
    c002:	2004      	movs	r0, #4
    c004:	e7fa      	b.n	bffc <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
    c006:	200e      	movs	r0, #14
    c008:	e7f8      	b.n	bffc <att_mtu_req+0x58>
    c00a:	bf00      	nop
    c00c:	00023a03 	.word	0x00023a03

0000c010 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    c010:	b513      	push	{r0, r1, r4, lr}
    c012:	4602      	mov	r2, r0
    c014:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c016:	4808      	ldr	r0, [pc, #32]	; (c038 <bt_att_req_alloc+0x28>)
    c018:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    c01a:	2400      	movs	r4, #0
    c01c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c01e:	f012 fdcd 	bl	1ebbc <k_mem_slab_alloc>
    c022:	4601      	mov	r1, r0
    c024:	b930      	cbnz	r0, c034 <bt_att_req_alloc+0x24>
    c026:	9801      	ldr	r0, [sp, #4]
    c028:	221c      	movs	r2, #28
    c02a:	f01a f942 	bl	262b2 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    c02e:	9801      	ldr	r0, [sp, #4]
}
    c030:	b002      	add	sp, #8
    c032:	bd10      	pop	{r4, pc}
		return NULL;
    c034:	4620      	mov	r0, r4
    c036:	e7fb      	b.n	c030 <bt_att_req_alloc+0x20>
    c038:	20000f0c 	.word	0x20000f0c

0000c03c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    c03c:	b507      	push	{r0, r1, r2, lr}
    c03e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    c040:	a901      	add	r1, sp, #4
    c042:	4803      	ldr	r0, [pc, #12]	; (c050 <bt_att_req_free+0x14>)
    c044:	f012 fdea 	bl	1ec1c <k_mem_slab_free>
}
    c048:	b003      	add	sp, #12
    c04a:	f85d fb04 	ldr.w	pc, [sp], #4
    c04e:	bf00      	nop
    c050:	20000f0c 	.word	0x20000f0c

0000c054 <att_handle_rsp>:
{
    c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c058:	4605      	mov	r5, r0
    c05a:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    c05c:	30e0      	adds	r0, #224	; 0xe0
{
    c05e:	4689      	mov	r9, r1
    c060:	4692      	mov	sl, r2
    c062:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    c064:	f019 ff1b 	bl	25e9e <k_delayed_work_cancel>
	if (!chan->req) {
    c068:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    c06c:	bb64      	cbnz	r4, c0c8 <att_handle_rsp+0x74>
    c06e:	4932      	ldr	r1, [pc, #200]	; (c138 <att_handle_rsp+0xe4>)
    c070:	4b32      	ldr	r3, [pc, #200]	; (c13c <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    c072:	4833      	ldr	r0, [pc, #204]	; (c140 <att_handle_rsp+0xec>)
    c074:	1ac9      	subs	r1, r1, r3
    c076:	08c9      	lsrs	r1, r1, #3
    c078:	0189      	lsls	r1, r1, #6
    c07a:	f041 0102 	orr.w	r1, r1, #2
    c07e:	f015 f807 	bl	21090 <log_0>
	att_process(chan->att);
    c082:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    c086:	f10b 0004 	add.w	r0, fp, #4
    c08a:	f017 fa8c 	bl	235a6 <sys_slist_get>
	if (!node) {
    c08e:	4607      	mov	r7, r0
    c090:	2800      	cmp	r0, #0
    c092:	d039      	beq.n	c108 <att_handle_rsp+0xb4>
	return list->head;
    c094:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c098:	b15a      	cbz	r2, c0b2 <att_handle_rsp+0x5e>
    c09a:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    c09e:	d008      	beq.n	c0b2 <att_handle_rsp+0x5e>
	return node->next;
    c0a0:	6816      	ldr	r6, [r2, #0]
    c0a2:	b10e      	cbz	r6, c0a8 <att_handle_rsp+0x54>
    c0a4:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    c0a8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    c0ac:	b33a      	cbz	r2, c0fe <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c0ae:	2e00      	cmp	r6, #0
    c0b0:	d137      	bne.n	c122 <att_handle_rsp+0xce>
	parent->next = child;
    c0b2:	f8db 2004 	ldr.w	r2, [fp, #4]
    c0b6:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    c0b8:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    c0bc:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    c0c0:	bb12      	cbnz	r2, c108 <att_handle_rsp+0xb4>
	list->tail = node;
    c0c2:	f8cb 7008 	str.w	r7, [fp, #8]
}
    c0c6:	e01f      	b.n	c108 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    c0c8:	4b1e      	ldr	r3, [pc, #120]	; (c144 <att_handle_rsp+0xf0>)
    c0ca:	429c      	cmp	r4, r3
    c0cc:	d103      	bne.n	c0d6 <att_handle_rsp+0x82>
		chan->req = NULL;
    c0ce:	2400      	movs	r4, #0
    c0d0:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    c0d4:	e7d5      	b.n	c082 <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    c0d6:	6920      	ldr	r0, [r4, #16]
    c0d8:	b128      	cbz	r0, c0e6 <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    c0da:	f011 fc9f 	bl	1da1c <net_buf_unref>
		chan->req->buf = NULL;
    c0de:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    c0e2:	2200      	movs	r2, #0
    c0e4:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    c0e6:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	chan->req->func = NULL;
    c0ea:	2600      	movs	r6, #0
	func = chan->req->func;
    c0ec:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    c0ee:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    c0f0:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    c0f2:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    c0f4:	f017 fd76 	bl	23be4 <att_req_destroy>
	chan->req = NULL;
    c0f8:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    c0fc:	e7c1      	b.n	c082 <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    c0fe:	4639      	mov	r1, r7
    c100:	f017 fc26 	bl	23950 <bt_att_chan_req_send>
    c104:	2800      	cmp	r0, #0
    c106:	dbd2      	blt.n	c0ae <att_handle_rsp+0x5a>
	if (func) {
    c108:	b13c      	cbz	r4, c11a <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    c10a:	9b03      	ldr	r3, [sp, #12]
    c10c:	6828      	ldr	r0, [r5, #0]
    c10e:	9300      	str	r3, [sp, #0]
    c110:	6800      	ldr	r0, [r0, #0]
    c112:	4653      	mov	r3, sl
    c114:	464a      	mov	r2, r9
    c116:	4641      	mov	r1, r8
    c118:	47a0      	blx	r4
}
    c11a:	2000      	movs	r0, #0
    c11c:	b005      	add	sp, #20
    c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    c122:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    c126:	d004      	beq.n	c132 <att_handle_rsp+0xde>
	return node->next;
    c128:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c12c:	b10a      	cbz	r2, c132 <att_handle_rsp+0xde>
    c12e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    c132:	4630      	mov	r0, r6
    c134:	4616      	mov	r6, r2
    c136:	e7b7      	b.n	c0a8 <att_handle_rsp+0x54>
    c138:	00026838 	.word	0x00026838
    c13c:	00026828 	.word	0x00026828
    c140:	00029f44 	.word	0x00029f44
    c144:	20001c1c 	.word	0x20001c1c

0000c148 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    c148:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
{
    c14c:	b570      	push	{r4, r5, r6, lr}
    c14e:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    c150:	b352      	cbz	r2, c1a8 <att_error_rsp+0x60>
    c152:	4b1a      	ldr	r3, [pc, #104]	; (c1bc <att_error_rsp+0x74>)
    c154:	429a      	cmp	r2, r3
    c156:	d027      	beq.n	c1a8 <att_error_rsp+0x60>
	if (chan->req->buf) {
    c158:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    c15a:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
    c15c:	b12b      	cbz	r3, c16a <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    c15e:	8996      	ldrh	r6, [r2, #12]
    c160:	6919      	ldr	r1, [r3, #16]
    c162:	89d5      	ldrh	r5, [r2, #14]
	buf->len = state->len;
    c164:	819d      	strh	r5, [r3, #12]
	buf->data = buf->__buf + state->offset;
    c166:	4431      	add	r1, r6
    c168:	6099      	str	r1, [r3, #8]
	if (chan->req->retrying) {
    c16a:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    c16c:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
    c16e:	b9e3      	cbnz	r3, c1aa <att_error_rsp+0x62>
	switch (err) {
    c170:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
    c172:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
    c174:	d006      	beq.n	c184 <att_error_rsp+0x3c>
    c176:	2d0f      	cmp	r5, #15
    c178:	d117      	bne.n	c1aa <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    c17a:	7a43      	ldrb	r3, [r0, #9]
    c17c:	2b01      	cmp	r3, #1
    c17e:	d814      	bhi.n	c1aa <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    c180:	2102      	movs	r1, #2
    c182:	e007      	b.n	c194 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    c184:	7a43      	ldrb	r3, [r0, #9]
    c186:	2b01      	cmp	r3, #1
    c188:	d9fa      	bls.n	c180 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    c18a:	2b02      	cmp	r3, #2
    c18c:	d00a      	beq.n	c1a4 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    c18e:	2b03      	cmp	r3, #3
    c190:	d10b      	bne.n	c1aa <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    c192:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    c194:	f017 f88f 	bl	232b6 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    c198:	b938      	cbnz	r0, c1aa <att_error_rsp+0x62>
		chan->req->retrying = true;
    c19a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    c19e:	2201      	movs	r2, #1
    c1a0:	751a      	strb	r2, [r3, #20]
}
    c1a2:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    c1a4:	2103      	movs	r1, #3
    c1a6:	e7f5      	b.n	c194 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    c1a8:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    c1aa:	2200      	movs	r2, #0
    c1ac:	462b      	mov	r3, r5
    c1ae:	4620      	mov	r0, r4
    c1b0:	4611      	mov	r1, r2
}
    c1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    c1b6:	f7ff bf4d 	b.w	c054 <att_handle_rsp>
    c1ba:	bf00      	nop
    c1bc:	20001c1c 	.word	0x20001c1c

0000c1c0 <att_reset>:
{
    c1c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c1c2:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    c1c4:	9803      	ldr	r0, [sp, #12]
    c1c6:	2200      	movs	r2, #0
    c1c8:	2300      	movs	r3, #0
    c1ca:	300c      	adds	r0, #12
    c1cc:	f019 f906 	bl	253dc <net_buf_get>
    c1d0:	b948      	cbnz	r0, c1e6 <att_reset+0x26>
	att->conn = NULL;
    c1d2:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    c1d4:	6854      	ldr	r4, [r2, #4]
    c1d6:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c1d8:	b944      	cbnz	r4, c1ec <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    c1da:	480d      	ldr	r0, [pc, #52]	; (c210 <att_reset+0x50>)
    c1dc:	a903      	add	r1, sp, #12
    c1de:	f012 fd1d 	bl	1ec1c <k_mem_slab_free>
}
    c1e2:	b004      	add	sp, #16
    c1e4:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    c1e6:	f011 fc19 	bl	1da1c <net_buf_unref>
    c1ea:	e7eb      	b.n	c1c4 <att_reset+0x4>
	return node->next;
    c1ec:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
    c1ee:	6866      	ldr	r6, [r4, #4]
    c1f0:	b136      	cbz	r6, c200 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    c1f2:	69a3      	ldr	r3, [r4, #24]
    c1f4:	9300      	str	r3, [sp, #0]
    c1f6:	2300      	movs	r3, #0
    c1f8:	461a      	mov	r2, r3
    c1fa:	210e      	movs	r1, #14
    c1fc:	4618      	mov	r0, r3
    c1fe:	47b0      	blx	r6
		att_req_destroy(req);
    c200:	4620      	mov	r0, r4
    c202:	f017 fcef 	bl	23be4 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c206:	2d00      	cmp	r5, #0
    c208:	d0e7      	beq.n	c1da <att_reset+0x1a>
    c20a:	462c      	mov	r4, r5
    c20c:	682d      	ldr	r5, [r5, #0]
    c20e:	e7ee      	b.n	c1ee <att_reset+0x2e>
    c210:	20000ed4 	.word	0x20000ed4

0000c214 <att_timeout>:
    c214:	4b0e      	ldr	r3, [pc, #56]	; (c250 <att_timeout+0x3c>)
    c216:	490f      	ldr	r1, [pc, #60]	; (c254 <att_timeout+0x40>)
{
    c218:	b570      	push	{r4, r5, r6, lr}
    c21a:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
    c21c:	4605      	mov	r5, r0
    c21e:	08c9      	lsrs	r1, r1, #3
    c220:	f855 6de0 	ldr.w	r6, [r5, #-224]!
	BT_ERR("ATT Timeout");
    c224:	0189      	lsls	r1, r1, #6
    c226:	f041 0101 	orr.w	r1, r1, #1
{
    c22a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    c22c:	480a      	ldr	r0, [pc, #40]	; (c258 <att_timeout+0x44>)
    c22e:	f014 ff2f 	bl	21090 <log_0>
	att_chan_detach(chan);
    c232:	4628      	mov	r0, r5
    c234:	f017 fd3f 	bl	23cb6 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    c238:	6a75      	ldr	r5, [r6, #36]	; 0x24
    c23a:	b945      	cbnz	r5, c24e <att_timeout+0x3a>
	att_reset(att);
    c23c:	4630      	mov	r0, r6
    c23e:	f7ff ffbf 	bl	c1c0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    c242:	f854 0cd8 	ldr.w	r0, [r4, #-216]
    c246:	f001 fb01 	bl	d84c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    c24a:	f844 5cd8 	str.w	r5, [r4, #-216]
}
    c24e:	bd70      	pop	{r4, r5, r6, pc}
    c250:	00026828 	.word	0x00026828
    c254:	00026838 	.word	0x00026838
    c258:	00029f5b 	.word	0x00029f5b

0000c25c <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    c25c:	b510      	push	{r4, lr}
    c25e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    c260:	b350      	cbz	r0, c2b8 <bt_att_req_cancel+0x5c>
    c262:	b349      	cbz	r1, c2b8 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
    c264:	f7fe ffe6 	bl	b234 <att_get>
	if (!att) {
    c268:	b330      	cbz	r0, c2b8 <bt_att_req_cancel+0x5c>
	return list->head;
    c26a:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c26c:	b15b      	cbz	r3, c286 <bt_att_req_cancel+0x2a>
    c26e:	f5b3 7196 	subs.w	r1, r3, #300	; 0x12c
    c272:	d008      	beq.n	c286 <bt_att_req_cancel+0x2a>
	return node->next;
    c274:	681b      	ldr	r3, [r3, #0]
    c276:	b10b      	cbz	r3, c27c <bt_att_req_cancel+0x20>
    c278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
	if (chan->req != req) {
    c27c:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    c280:	4294      	cmp	r4, r2
    c282:	d006      	beq.n	c292 <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c284:	b96b      	cbnz	r3, c2a2 <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    c286:	3004      	adds	r0, #4
    c288:	4621      	mov	r1, r4
    c28a:	f017 fb21 	bl	238d0 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
    c28e:	4620      	mov	r0, r4
    c290:	e003      	b.n	c29a <bt_att_req_cancel+0x3e>
	chan->req = &cancel;
    c292:	4b0a      	ldr	r3, [pc, #40]	; (c2bc <bt_att_req_cancel+0x60>)
    c294:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4
	att_req_destroy(req);
    c298:	4620      	mov	r0, r4
}
    c29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    c29e:	f017 bca1 	b.w	23be4 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c2a2:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
    c2a6:	d004      	beq.n	c2b2 <bt_att_req_cancel+0x56>
	return node->next;
    c2a8:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c2ac:	b10a      	cbz	r2, c2b2 <bt_att_req_cancel+0x56>
    c2ae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
    c2b2:	4619      	mov	r1, r3
    c2b4:	4613      	mov	r3, r2
    c2b6:	e7e1      	b.n	c27c <bt_att_req_cancel+0x20>
}
    c2b8:	bd10      	pop	{r4, pc}
    c2ba:	bf00      	nop
    c2bc:	20001c1c 	.word	0x20001c1c

0000c2c0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    c2c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c2c2:	4c15      	ldr	r4, [pc, #84]	; (c318 <find_cf_cfg+0x58>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    c2c4:	4605      	mov	r5, r0
    c2c6:	b140      	cbz	r0, c2da <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c2c8:	4622      	mov	r2, r4
    c2ca:	f812 1b01 	ldrb.w	r1, [r2], #1
    c2ce:	f017 f848 	bl	23362 <bt_conn_is_peer_addr_le>
    c2d2:	b1b0      	cbz	r0, c302 <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
    c2d4:	4620      	mov	r0, r4
    c2d6:	b003      	add	sp, #12
    c2d8:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c2da:	9000      	str	r0, [sp, #0]
    c2dc:	4669      	mov	r1, sp
    c2de:	f8cd 0003 	str.w	r0, [sp, #3]
    c2e2:	1c60      	adds	r0, r4, #1
    c2e4:	f017 fe12 	bl	23f0c <bt_addr_le_cmp>
    c2e8:	2800      	cmp	r0, #0
    c2ea:	d0f3      	beq.n	c2d4 <find_cf_cfg+0x14>
    c2ec:	4669      	mov	r1, sp
    c2ee:	f104 0011 	add.w	r0, r4, #17
    c2f2:	9500      	str	r5, [sp, #0]
    c2f4:	f8cd 5003 	str.w	r5, [sp, #3]
    c2f8:	f017 fe08 	bl	23f0c <bt_addr_le_cmp>
    c2fc:	b948      	cbnz	r0, c312 <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    c2fe:	3410      	adds	r4, #16
    c300:	e7e8      	b.n	c2d4 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c302:	7c21      	ldrb	r1, [r4, #16]
    c304:	f104 0211 	add.w	r2, r4, #17
    c308:	4628      	mov	r0, r5
    c30a:	f017 f82a 	bl	23362 <bt_conn_is_peer_addr_le>
    c30e:	2800      	cmp	r0, #0
    c310:	d1f5      	bne.n	c2fe <find_cf_cfg+0x3e>
	return NULL;
    c312:	2400      	movs	r4, #0
    c314:	e7de      	b.n	c2d4 <find_cf_cfg+0x14>
    c316:	bf00      	nop
    c318:	20001c38 	.word	0x20001c38

0000c31c <find_sc_cfg>:
{
    c31c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    c31e:	4c0d      	ldr	r4, [pc, #52]	; (c354 <find_sc_cfg+0x38>)
    c320:	7823      	ldrb	r3, [r4, #0]
    c322:	4283      	cmp	r3, r0
{
    c324:	4605      	mov	r5, r0
    c326:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    c328:	d009      	beq.n	c33e <find_sc_cfg+0x22>
    c32a:	7b23      	ldrb	r3, [r4, #12]
    c32c:	42ab      	cmp	r3, r5
    c32e:	d10f      	bne.n	c350 <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    c330:	4809      	ldr	r0, [pc, #36]	; (c358 <find_sc_cfg+0x3c>)
    c332:	4631      	mov	r1, r6
    c334:	f017 fdea 	bl	23f0c <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    c338:	b950      	cbnz	r0, c350 <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c33a:	2001      	movs	r0, #1
    c33c:	e004      	b.n	c348 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    c33e:	1c60      	adds	r0, r4, #1
    c340:	f017 fde4 	bl	23f0c <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    c344:	2800      	cmp	r0, #0
    c346:	d1f0      	bne.n	c32a <find_sc_cfg+0xe>
			return &sc_cfg[i];
    c348:	230c      	movs	r3, #12
    c34a:	fb03 4000 	mla	r0, r3, r0, r4
    c34e:	e000      	b.n	c352 <find_sc_cfg+0x36>
	return NULL;
    c350:	2000      	movs	r0, #0
}
    c352:	bd70      	pop	{r4, r5, r6, pc}
    c354:	2000361a 	.word	0x2000361a
    c358:	20003627 	.word	0x20003627

0000c35c <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    c35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c35e:	4c15      	ldr	r4, [pc, #84]	; (c3b4 <gatt_sub_find+0x58>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    c360:	4605      	mov	r5, r0
    c362:	b140      	cbz	r0, c376 <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    c364:	4622      	mov	r2, r4
    c366:	f812 1b01 	ldrb.w	r1, [r2], #1
    c36a:	f016 fffa 	bl	23362 <bt_conn_is_peer_addr_le>
    c36e:	b1b0      	cbz	r0, c39e <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
    c370:	4620      	mov	r0, r4
    c372:	b003      	add	sp, #12
    c374:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    c376:	9000      	str	r0, [sp, #0]
    c378:	4669      	mov	r1, sp
    c37a:	f8cd 0003 	str.w	r0, [sp, #3]
    c37e:	1c60      	adds	r0, r4, #1
    c380:	f017 fdc4 	bl	23f0c <bt_addr_le_cmp>
    c384:	2800      	cmp	r0, #0
    c386:	d0f3      	beq.n	c370 <gatt_sub_find+0x14>
    c388:	4669      	mov	r1, sp
    c38a:	f104 0011 	add.w	r0, r4, #17
    c38e:	9500      	str	r5, [sp, #0]
    c390:	f8cd 5003 	str.w	r5, [sp, #3]
    c394:	f017 fdba 	bl	23f0c <bt_addr_le_cmp>
    c398:	b948      	cbnz	r0, c3ae <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
    c39a:	3410      	adds	r4, #16
    c39c:	e7e8      	b.n	c370 <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    c39e:	7c21      	ldrb	r1, [r4, #16]
    c3a0:	f104 0211 	add.w	r2, r4, #17
    c3a4:	4628      	mov	r0, r5
    c3a6:	f016 ffdc 	bl	23362 <bt_conn_is_peer_addr_le>
    c3aa:	2800      	cmp	r0, #0
    c3ac:	d1f5      	bne.n	c39a <gatt_sub_find+0x3e>
	return NULL;
    c3ae:	2400      	movs	r4, #0
    c3b0:	e7de      	b.n	c370 <gatt_sub_find+0x14>
    c3b2:	bf00      	nop
    c3b4:	20001c70 	.word	0x20001c70

0000c3b8 <bt_gatt_attr_write_ccc>:
{
    c3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c3bc:	461f      	mov	r7, r3
    c3be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    c3c2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    c3c6:	4606      	mov	r6, r0
    c3c8:	4688      	mov	r8, r1
	if (offset) {
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d14e      	bne.n	c46c <bt_gatt_attr_write_ccc+0xb4>
	if (!len || len > sizeof(uint16_t)) {
    c3ce:	1e7b      	subs	r3, r7, #1
    c3d0:	2b01      	cmp	r3, #1
    c3d2:	d84e      	bhi.n	c472 <bt_gatt_attr_write_ccc+0xba>
		value = *(uint8_t *)buf;
    c3d4:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
    c3d6:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    c3d8:	4649      	mov	r1, r9
    c3da:	bf14      	ite	ne
    c3dc:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
    c3de:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
    c3e0:	f017 fd97 	bl	23f12 <find_ccc_cfg>
	if (!cfg) {
    c3e4:	4604      	mov	r4, r0
    c3e6:	b9e8      	cbnz	r0, c424 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
    c3e8:	b91d      	cbnz	r5, c3f2 <bt_gatt_attr_write_ccc+0x3a>
			return len;
    c3ea:	4638      	mov	r0, r7
}
    c3ec:	b003      	add	sp, #12
    c3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    c3f2:	4649      	mov	r1, r9
    c3f4:	f017 fd8d 	bl	23f12 <find_ccc_cfg>
		if (!cfg) {
    c3f8:	4604      	mov	r4, r0
    c3fa:	b960      	cbnz	r0, c416 <bt_gatt_attr_write_ccc+0x5e>
    c3fc:	4b1e      	ldr	r3, [pc, #120]	; (c478 <bt_gatt_attr_write_ccc+0xc0>)
    c3fe:	491f      	ldr	r1, [pc, #124]	; (c47c <bt_gatt_attr_write_ccc+0xc4>)
			BT_WARN("No space to store CCC cfg");
    c400:	481f      	ldr	r0, [pc, #124]	; (c480 <bt_gatt_attr_write_ccc+0xc8>)
    c402:	1ac9      	subs	r1, r1, r3
    c404:	08c9      	lsrs	r1, r1, #3
    c406:	0189      	lsls	r1, r1, #6
    c408:	f041 0102 	orr.w	r1, r1, #2
    c40c:	f014 fe40 	bl	21090 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c410:	f06f 0010 	mvn.w	r0, #16
    c414:	e7ea      	b.n	c3ec <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c416:	f106 0188 	add.w	r1, r6, #136	; 0x88
    c41a:	3001      	adds	r0, #1
    c41c:	f017 fdab 	bl	23f76 <bt_addr_le_copy>
		cfg->id = conn->id;
    c420:	7a33      	ldrb	r3, [r6, #8]
    c422:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    c424:	f8d9 301c 	ldr.w	r3, [r9, #28]
    c428:	b9a3      	cbnz	r3, c454 <bt_gatt_attr_write_ccc+0x9c>
	if (cfg->value != ccc->value) {
    c42a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    c42e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    c430:	42ab      	cmp	r3, r5
    c432:	d003      	beq.n	c43c <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
    c434:	4649      	mov	r1, r9
    c436:	4640      	mov	r0, r8
    c438:	f017 fcf8 	bl	23e2c <gatt_ccc_changed>
	if (!value) {
    c43c:	2d00      	cmp	r5, #0
    c43e:	d1d4      	bne.n	c3ea <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    c440:	4669      	mov	r1, sp
    c442:	1c60      	adds	r0, r4, #1
    c444:	9500      	str	r5, [sp, #0]
    c446:	f8cd 5003 	str.w	r5, [sp, #3]
    c44a:	f017 fd94 	bl	23f76 <bt_addr_le_copy>
	cfg->id = 0U;
    c44e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    c450:	8125      	strh	r5, [r4, #8]
}
    c452:	e7ca      	b.n	c3ea <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    c454:	462a      	mov	r2, r5
    c456:	4641      	mov	r1, r8
    c458:	4630      	mov	r0, r6
    c45a:	4798      	blx	r3
		if (write < 0) {
    c45c:	2800      	cmp	r0, #0
    c45e:	dbc5      	blt.n	c3ec <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    c460:	3801      	subs	r0, #1
    c462:	2801      	cmp	r0, #1
    c464:	d9e1      	bls.n	c42a <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    c466:	f06f 000d 	mvn.w	r0, #13
    c46a:	e7bf      	b.n	c3ec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c46c:	f06f 0006 	mvn.w	r0, #6
    c470:	e7bc      	b.n	c3ec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c472:	f06f 000c 	mvn.w	r0, #12
    c476:	e7b9      	b.n	c3ec <bt_gatt_attr_write_ccc+0x34>
    c478:	00026828 	.word	0x00026828
    c47c:	00026910 	.word	0x00026910
    c480:	00029f6e 	.word	0x00029f6e

0000c484 <gatt_notify>:
{
    c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c488:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    c48a:	8992      	ldrh	r2, [r2, #12]
{
    c48c:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    c48e:	3202      	adds	r2, #2
    c490:	211b      	movs	r1, #27
{
    c492:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    c494:	f7ff fb2a 	bl	baec <bt_att_create_pdu>
	if (!buf) {
    c498:	4605      	mov	r5, r0
    c49a:	b1c8      	cbz	r0, c4d0 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    c49c:	f100 0908 	add.w	r9, r0, #8
    c4a0:	2102      	movs	r1, #2
    c4a2:	4648      	mov	r0, r9
    c4a4:	f018 fff1 	bl	2548a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    c4a8:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    c4aa:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    c4ac:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    c4b0:	4648      	mov	r0, r9
    c4b2:	f018 ffea 	bl	2548a <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c4b6:	89a2      	ldrh	r2, [r4, #12]
    c4b8:	68a1      	ldr	r1, [r4, #8]
    c4ba:	4630      	mov	r0, r6
    c4bc:	f019 feeb 	bl	26296 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    c4c0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    c4c4:	4629      	mov	r1, r5
    c4c6:	4638      	mov	r0, r7
}
    c4c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    c4cc:	f017 bc2e 	b.w	23d2c <bt_att_send>
    c4d0:	4b06      	ldr	r3, [pc, #24]	; (c4ec <gatt_notify+0x68>)
    c4d2:	4907      	ldr	r1, [pc, #28]	; (c4f0 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    c4d4:	4807      	ldr	r0, [pc, #28]	; (c4f4 <gatt_notify+0x70>)
    c4d6:	1ac9      	subs	r1, r1, r3
    c4d8:	08c9      	lsrs	r1, r1, #3
    c4da:	0189      	lsls	r1, r1, #6
    c4dc:	f041 0102 	orr.w	r1, r1, #2
    c4e0:	f014 fdd6 	bl	21090 <log_0>
}
    c4e4:	f06f 000b 	mvn.w	r0, #11
    c4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4ec:	00026828 	.word	0x00026828
    c4f0:	00026910 	.word	0x00026910
    c4f4:	00029f88 	.word	0x00029f88

0000c4f8 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    c4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4fc:	4606      	mov	r6, r0
    c4fe:	4688      	mov	r8, r1
    c500:	4617      	mov	r7, r2
	if (params) {
    c502:	461c      	mov	r4, r3
    c504:	b34b      	cbz	r3, c55a <gatt_send.constprop.0+0x62>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    c506:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    c50a:	2100      	movs	r1, #0
    c50c:	f7ff fd80 	bl	c010 <bt_att_req_alloc>
		if (!req) {
    c510:	4605      	mov	r5, r0
    c512:	b920      	cbnz	r0, c51e <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    c514:	f06f 040b 	mvn.w	r4, #11
}
    c518:	4620      	mov	r0, r4
    c51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    c51e:	2300      	movs	r3, #0
		req->user_data = params;
    c520:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    c522:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    c526:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    c528:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    c52a:	4601      	mov	r1, r0
    c52c:	4630      	mov	r0, r6
    c52e:	f017 fc47 	bl	23dc0 <bt_att_req_send>
		if (err) {
    c532:	4604      	mov	r4, r0
    c534:	2800      	cmp	r0, #0
    c536:	d0ef      	beq.n	c518 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    c538:	4628      	mov	r0, r5
    c53a:	f7ff fd7f 	bl	c03c <bt_att_req_free>
	if (err) {
    c53e:	2c00      	cmp	r4, #0
    c540:	d0ea      	beq.n	c518 <gatt_send.constprop.0+0x20>
    c542:	4b08      	ldr	r3, [pc, #32]	; (c564 <gatt_send.constprop.0+0x6c>)
    c544:	4a08      	ldr	r2, [pc, #32]	; (c568 <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    c546:	4809      	ldr	r0, [pc, #36]	; (c56c <gatt_send.constprop.0+0x74>)
    c548:	1ad2      	subs	r2, r2, r3
    c54a:	08d2      	lsrs	r2, r2, #3
    c54c:	0192      	lsls	r2, r2, #6
    c54e:	f042 0201 	orr.w	r2, r2, #1
    c552:	4621      	mov	r1, r4
    c554:	f014 fda9 	bl	210aa <log_1>
    c558:	e7de      	b.n	c518 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    c55a:	461a      	mov	r2, r3
    c55c:	f017 fbe6 	bl	23d2c <bt_att_send>
    c560:	4604      	mov	r4, r0
    c562:	e7ec      	b.n	c53e <gatt_send.constprop.0+0x46>
    c564:	00026828 	.word	0x00026828
    c568:	00026910 	.word	0x00026910
    c56c:	00029fb1 	.word	0x00029fb1

0000c570 <gatt_indicate>:
{
    c570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c574:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    c576:	8a12      	ldrh	r2, [r2, #16]
{
    c578:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    c57a:	3202      	adds	r2, #2
    c57c:	211d      	movs	r1, #29
{
    c57e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    c580:	f7ff fab4 	bl	baec <bt_att_create_pdu>
	if (!buf) {
    c584:	4605      	mov	r5, r0
    c586:	b1e8      	cbz	r0, c5c4 <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    c588:	f100 0808 	add.w	r8, r0, #8
    c58c:	2102      	movs	r1, #2
    c58e:	4640      	mov	r0, r8
    c590:	f018 ff7b 	bl	2548a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    c594:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    c596:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    c598:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    c59c:	4640      	mov	r0, r8
    c59e:	f018 ff74 	bl	2548a <net_buf_simple_add>
    c5a2:	8a22      	ldrh	r2, [r4, #16]
    c5a4:	68e1      	ldr	r1, [r4, #12]
    c5a6:	4630      	mov	r0, r6
    c5a8:	f019 fe75 	bl	26296 <memcpy>
	if (!params->func) {
    c5ac:	68a3      	ldr	r3, [r4, #8]
    c5ae:	b933      	cbnz	r3, c5be <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    c5b0:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    c5b2:	4629      	mov	r1, r5
    c5b4:	4638      	mov	r0, r7
}
    c5b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    c5ba:	f7ff bf9d 	b.w	c4f8 <gatt_send.constprop.0>
    c5be:	4a08      	ldr	r2, [pc, #32]	; (c5e0 <gatt_indicate+0x70>)
    c5c0:	4623      	mov	r3, r4
    c5c2:	e7f6      	b.n	c5b2 <gatt_indicate+0x42>
    c5c4:	4b07      	ldr	r3, [pc, #28]	; (c5e4 <gatt_indicate+0x74>)
    c5c6:	4908      	ldr	r1, [pc, #32]	; (c5e8 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    c5c8:	4808      	ldr	r0, [pc, #32]	; (c5ec <gatt_indicate+0x7c>)
    c5ca:	1ac9      	subs	r1, r1, r3
    c5cc:	08c9      	lsrs	r1, r1, #3
    c5ce:	0189      	lsls	r1, r1, #6
    c5d0:	f041 0102 	orr.w	r1, r1, #2
    c5d4:	f014 fd5c 	bl	21090 <log_0>
}
    c5d8:	f06f 000b 	mvn.w	r0, #11
    c5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c5e0:	00023e49 	.word	0x00023e49
    c5e4:	00026828 	.word	0x00026828
    c5e8:	00026910 	.word	0x00026910
    c5ec:	00029fcb 	.word	0x00029fcb

0000c5f0 <sc_save>:
{
    c5f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c5f4:	4680      	mov	r8, r0
    c5f6:	460f      	mov	r7, r1
    c5f8:	4616      	mov	r6, r2
    c5fa:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    c5fc:	f7ff fe8e 	bl	c31c <find_sc_cfg>
	if (!cfg) {
    c600:	4604      	mov	r4, r0
    c602:	b9c8      	cbnz	r0, c638 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    c604:	4669      	mov	r1, sp
    c606:	9000      	str	r0, [sp, #0]
    c608:	f8cd 0003 	str.w	r0, [sp, #3]
    c60c:	f7ff fe86 	bl	c31c <find_sc_cfg>
		if (!cfg) {
    c610:	4604      	mov	r4, r0
    c612:	b960      	cbnz	r0, c62e <sc_save+0x3e>
    c614:	490f      	ldr	r1, [pc, #60]	; (c654 <sc_save+0x64>)
    c616:	4b10      	ldr	r3, [pc, #64]	; (c658 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    c618:	4810      	ldr	r0, [pc, #64]	; (c65c <sc_save+0x6c>)
    c61a:	1ac9      	subs	r1, r1, r3
    c61c:	08c9      	lsrs	r1, r1, #3
    c61e:	0189      	lsls	r1, r1, #6
    c620:	f041 0101 	orr.w	r1, r1, #1
    c624:	f014 fd34 	bl	21090 <log_0>
}
    c628:	b002      	add	sp, #8
    c62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    c62e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    c632:	4639      	mov	r1, r7
    c634:	f017 fc9f 	bl	23f76 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    c638:	8922      	ldrh	r2, [r4, #8]
    c63a:	8963      	ldrh	r3, [r4, #10]
    c63c:	b91a      	cbnz	r2, c646 <sc_save+0x56>
    c63e:	b923      	cbnz	r3, c64a <sc_save+0x5a>
		cfg->data.start = start;
    c640:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    c642:	8165      	strh	r5, [r4, #10]
    c644:	e7f0      	b.n	c628 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    c646:	4296      	cmp	r6, r2
    c648:	d302      	bcc.n	c650 <sc_save+0x60>
    c64a:	429d      	cmp	r5, r3
    c64c:	d9ec      	bls.n	c628 <sc_save+0x38>
    c64e:	e7f8      	b.n	c642 <sc_save+0x52>
		*start = new_start;
    c650:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    c652:	e7fa      	b.n	c64a <sc_save+0x5a>
    c654:	00026910 	.word	0x00026910
    c658:	00026828 	.word	0x00026828
    c65c:	00029ff2 	.word	0x00029ff2

0000c660 <notify_cb>:
{
    c660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    c664:	4b36      	ldr	r3, [pc, #216]	; (c740 <notify_cb+0xe0>)
{
    c666:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c668:	6882      	ldr	r2, [r0, #8]
    c66a:	429a      	cmp	r2, r3
{
    c66c:	4680      	mov	r8, r0
    c66e:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    c670:	d003      	beq.n	c67a <notify_cb+0x1a>
		return BT_GATT_ITER_CONTINUE;
    c672:	2001      	movs	r0, #1
}
    c674:	b003      	add	sp, #12
    c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    c67a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    c67e:	4b31      	ldr	r3, [pc, #196]	; (c744 <notify_cb+0xe4>)
    c680:	4599      	cmp	r9, r3
    c682:	d01a      	beq.n	c6ba <notify_cb+0x5a>
			err = gatt_indicate(conn, handle - 1, data->ind_params);
    c684:	3c01      	subs	r4, #1
    c686:	f109 0701 	add.w	r7, r9, #1
    c68a:	f109 0a15 	add.w	sl, r9, #21
    c68e:	b2a4      	uxth	r4, r4
		if (cfg->value != data->type) {
    c690:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    c694:	88b3      	ldrh	r3, [r6, #4]
    c696:	429a      	cmp	r2, r3
    c698:	d10b      	bne.n	c6b2 <notify_cb+0x52>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c69a:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    c69e:	4639      	mov	r1, r7
    c6a0:	f7fd ffc2 	bl	a628 <bt_conn_lookup_addr_le>
		if (!conn) {
    c6a4:	4605      	mov	r5, r0
    c6a6:	b120      	cbz	r0, c6b2 <notify_cb+0x52>
		if (conn->state != BT_CONN_CONNECTED) {
    c6a8:	7b43      	ldrb	r3, [r0, #13]
    c6aa:	2b07      	cmp	r3, #7
    c6ac:	d029      	beq.n	c702 <notify_cb+0xa2>
			bt_conn_unref(conn);
    c6ae:	f016 fe7f 	bl	233b0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c6b2:	370a      	adds	r7, #10
    c6b4:	4557      	cmp	r7, sl
    c6b6:	d0dc      	beq.n	c672 <notify_cb+0x12>
    c6b8:	e7ea      	b.n	c690 <notify_cb+0x30>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c6ba:	2700      	movs	r7, #0
    c6bc:	4d22      	ldr	r5, [pc, #136]	; (c748 <notify_cb+0xe8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c6be:	46ba      	mov	sl, r7
    c6c0:	4669      	mov	r1, sp
    c6c2:	4628      	mov	r0, r5
    c6c4:	f8cd a000 	str.w	sl, [sp]
    c6c8:	f8cd a003 	str.w	sl, [sp, #3]
    c6cc:	f017 fc1e 	bl	23f0c <bt_addr_le_cmp>
    c6d0:	b178      	cbz	r0, c6f2 <notify_cb+0x92>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    c6d2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    c6d6:	2207      	movs	r2, #7
    c6d8:	4629      	mov	r1, r5
    c6da:	f7fd ffc1 	bl	a660 <bt_conn_lookup_state_le>
			if (!conn) {
    c6de:	b968      	cbnz	r0, c6fc <notify_cb+0x9c>
				sc = (struct sc_data *)data->ind_params->data;
    c6e0:	68b3      	ldr	r3, [r6, #8]
				sc_save(cfg->id, &cfg->peer,
    c6e2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    c6e6:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    c6e8:	4629      	mov	r1, r5
    c6ea:	8853      	ldrh	r3, [r2, #2]
    c6ec:	8812      	ldrh	r2, [r2, #0]
    c6ee:	f7ff ff7f 	bl	c5f0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c6f2:	350c      	adds	r5, #12
    c6f4:	2f00      	cmp	r7, #0
    c6f6:	d1c5      	bne.n	c684 <notify_cb+0x24>
    c6f8:	2701      	movs	r7, #1
    c6fa:	e7e1      	b.n	c6c0 <notify_cb+0x60>
			bt_conn_unref(conn);
    c6fc:	f016 fe58 	bl	233b0 <bt_conn_unref>
    c700:	e7f7      	b.n	c6f2 <notify_cb+0x92>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    c702:	f8d9 3020 	ldr.w	r3, [r9, #32]
    c706:	b123      	cbz	r3, c712 <notify_cb+0xb2>
    c708:	4641      	mov	r1, r8
    c70a:	4798      	blx	r3
    c70c:	b908      	cbnz	r0, c712 <notify_cb+0xb2>
			bt_conn_unref(conn);
    c70e:	4628      	mov	r0, r5
    c710:	e7cd      	b.n	c6ae <notify_cb+0x4e>
		if (data->type == BT_GATT_CCC_INDICATE) {
    c712:	88b3      	ldrh	r3, [r6, #4]
			err = gatt_indicate(conn, handle - 1, data->ind_params);
    c714:	68b2      	ldr	r2, [r6, #8]
		if (data->type == BT_GATT_CCC_INDICATE) {
    c716:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, handle - 1, data->ind_params);
    c718:	4621      	mov	r1, r4
    c71a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    c71c:	d10b      	bne.n	c736 <notify_cb+0xd6>
			err = gatt_indicate(conn, handle - 1, data->ind_params);
    c71e:	f7ff ff27 	bl	c570 <gatt_indicate>
			err = gatt_notify(conn, handle - 1, data->nfy_params);
    c722:	4683      	mov	fp, r0
		bt_conn_unref(conn);
    c724:	4628      	mov	r0, r5
    c726:	f016 fe43 	bl	233b0 <bt_conn_unref>
		if (err < 0) {
    c72a:	f1bb 0f00 	cmp.w	fp, #0
    c72e:	db05      	blt.n	c73c <notify_cb+0xdc>
		data->err = 0;
    c730:	2300      	movs	r3, #0
    c732:	6033      	str	r3, [r6, #0]
    c734:	e7bd      	b.n	c6b2 <notify_cb+0x52>
			err = gatt_notify(conn, handle - 1, data->nfy_params);
    c736:	f7ff fea5 	bl	c484 <gatt_notify>
    c73a:	e7f2      	b.n	c722 <notify_cb+0xc2>
			return BT_GATT_ITER_STOP;
    c73c:	2000      	movs	r0, #0
    c73e:	e799      	b.n	c674 <notify_cb+0x14>
    c740:	0000c3b9 	.word	0x0000c3b9
    c744:	200002bc 	.word	0x200002bc
    c748:	2000361b 	.word	0x2000361b

0000c74c <cf_write>:
{
    c74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c750:	461f      	mov	r7, r3
    c752:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	if (offset > sizeof(cfg->data)) {
    c756:	2b01      	cmp	r3, #1
{
    c758:	4680      	mov	r8, r0
    c75a:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    c75c:	d84b      	bhi.n	c7f6 <cf_write+0xaa>
	if (offset + len > sizeof(cfg->data)) {
    c75e:	443b      	add	r3, r7
    c760:	2b01      	cmp	r3, #1
    c762:	463d      	mov	r5, r7
    c764:	dc4a      	bgt.n	c7fc <cf_write+0xb0>
	cfg = find_cf_cfg(conn);
    c766:	f7ff fdab 	bl	c2c0 <find_cf_cfg>
	if (!cfg) {
    c76a:	4604      	mov	r4, r0
    c76c:	b918      	cbnz	r0, c776 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    c76e:	f7ff fda7 	bl	c2c0 <find_cf_cfg>
	if (!cfg) {
    c772:	4604      	mov	r4, r0
    c774:	b1d8      	cbz	r0, c7ae <cf_write+0x62>
    c776:	4632      	mov	r2, r6
    c778:	f104 0008 	add.w	r0, r4, #8
    c77c:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    c780:	4596      	cmp	lr, r2
    c782:	d123      	bne.n	c7cc <cf_write+0x80>
	for (i = 0U; i < len && i < last_byte; i++) {
    c784:	b12f      	cbz	r7, c792 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    c786:	7833      	ldrb	r3, [r6, #0]
    c788:	7a22      	ldrb	r2, [r4, #8]
    c78a:	f003 0307 	and.w	r3, r3, #7
    c78e:	4313      	orrs	r3, r2
    c790:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c792:	f108 0188 	add.w	r1, r8, #136	; 0x88
    c796:	1c60      	adds	r0, r4, #1
    c798:	f017 fbed 	bl	23f76 <bt_addr_le_copy>
	cfg->id = conn->id;
    c79c:	4620      	mov	r0, r4
    c79e:	f898 3008 	ldrb.w	r3, [r8, #8]
    c7a2:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c7a6:	2100      	movs	r1, #0
    c7a8:	f017 fcd7 	bl	2415a <atomic_set_bit>
	return len;
    c7ac:	e00b      	b.n	c7c6 <cf_write+0x7a>
    c7ae:	4b16      	ldr	r3, [pc, #88]	; (c808 <cf_write+0xbc>)
    c7b0:	4916      	ldr	r1, [pc, #88]	; (c80c <cf_write+0xc0>)
		BT_WARN("No space to store Client Supported Features");
    c7b2:	4817      	ldr	r0, [pc, #92]	; (c810 <cf_write+0xc4>)
    c7b4:	1ac9      	subs	r1, r1, r3
    c7b6:	08c9      	lsrs	r1, r1, #3
    c7b8:	0189      	lsls	r1, r1, #6
    c7ba:	f041 0102 	orr.w	r1, r1, #2
    c7be:	f014 fc67 	bl	21090 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c7c2:	f06f 0510 	mvn.w	r5, #16
}
    c7c6:	4628      	mov	r0, r5
    c7c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    c7cc:	f812 1b01 	ldrb.w	r1, [r2], #1
    c7d0:	f810 cb01 	ldrb.w	ip, [r0], #1
    c7d4:	2300      	movs	r3, #0
    c7d6:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
    c7da:	fa21 f903 	lsr.w	r9, r1, r3
    c7de:	f019 0f01 	tst.w	r9, #1
    c7e2:	d004      	beq.n	c7ee <cf_write+0xa2>
    c7e4:	fa2c f903 	lsr.w	r9, ip, r3
    c7e8:	f019 0f01 	tst.w	r9, #1
    c7ec:	d109      	bne.n	c802 <cf_write+0xb6>
		for (bit = 0U; bit <= last_bit; bit++) {
    c7ee:	3301      	adds	r3, #1
    c7f0:	2b03      	cmp	r3, #3
    c7f2:	d1f2      	bne.n	c7da <cf_write+0x8e>
    c7f4:	e7c4      	b.n	c780 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c7f6:	f06f 0506 	mvn.w	r5, #6
    c7fa:	e7e4      	b.n	c7c6 <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c7fc:	f06f 050c 	mvn.w	r5, #12
    c800:	e7e1      	b.n	c7c6 <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    c802:	f06f 0512 	mvn.w	r5, #18
    c806:	e7de      	b.n	c7c6 <cf_write+0x7a>
    c808:	00026828 	.word	0x00026828
    c80c:	00026910 	.word	0x00026910
    c810:	0002a011 	.word	0x0002a011

0000c814 <sc_indicate_rsp>:
{
    c814:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c816:	4913      	ldr	r1, [pc, #76]	; (c864 <sc_indicate_rsp+0x50>)
    c818:	f3bf 8f5b 	dmb	ish
    c81c:	4604      	mov	r4, r0
    c81e:	e851 3f00 	ldrex	r3, [r1]
    c822:	f023 0302 	bic.w	r3, r3, #2
    c826:	e841 3200 	strex	r2, r3, [r1]
    c82a:	2a00      	cmp	r2, #0
    c82c:	d1f7      	bne.n	c81e <sc_indicate_rsp+0xa>
    c82e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c832:	4608      	mov	r0, r1
    c834:	f017 fb99 	bl	23f6a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c838:	07c2      	lsls	r2, r0, #31
    c83a:	d505      	bpl.n	c848 <sc_indicate_rsp+0x34>
    c83c:	480a      	ldr	r0, [pc, #40]	; (c868 <sc_indicate_rsp+0x54>)
    c83e:	2200      	movs	r2, #0
    c840:	2300      	movs	r3, #0
    c842:	3930      	subs	r1, #48	; 0x30
    c844:	f012 ff90 	bl	1f768 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    c848:	4620      	mov	r0, r4
    c84a:	f7ff fd39 	bl	c2c0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    c84e:	b140      	cbz	r0, c862 <sc_indicate_rsp+0x4e>
    c850:	7a03      	ldrb	r3, [r0, #8]
    c852:	07db      	lsls	r3, r3, #31
    c854:	d505      	bpl.n	c862 <sc_indicate_rsp+0x4e>
}
    c856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c85a:	2100      	movs	r1, #0
    c85c:	300c      	adds	r0, #12
    c85e:	f017 bc7c 	b.w	2415a <atomic_set_bit>
}
    c862:	bd10      	pop	{r4, pc}
    c864:	20001488 	.word	0x20001488
    c868:	20001940 	.word	0x20001940

0000c86c <gatt_write_ccc.constprop.0>:
	if (params->write) {
		params->write(conn, err, NULL);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    c86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c870:	4688      	mov	r8, r1
    c872:	4617      	mov	r7, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    c874:	2112      	movs	r1, #18
    c876:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    c878:	4606      	mov	r6, r0
    c87a:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    c87c:	f7ff f936 	bl	baec <bt_att_create_pdu>
				sizeof(*req) + sizeof(uint16_t));
	if (!buf) {
    c880:	4604      	mov	r4, r0
    c882:	b1c0      	cbz	r0, c8b6 <gatt_write_ccc.constprop.0+0x4a>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    c884:	f100 0908 	add.w	r9, r0, #8
    c888:	2102      	movs	r1, #2
    c88a:	4648      	mov	r0, r9
    c88c:	f018 fdfd 	bl	2548a <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    c890:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    c892:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    c896:	4648      	mov	r0, r9
    c898:	f018 fe0e 	bl	254b8 <net_buf_simple_add_le16>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
    c89c:	f105 0010 	add.w	r0, r5, #16
    c8a0:	2102      	movs	r1, #2
    c8a2:	f017 fc5a 	bl	2415a <atomic_set_bit>

	return gatt_send(conn, buf, func, params, NULL);
    c8a6:	462b      	mov	r3, r5
    c8a8:	4621      	mov	r1, r4
    c8aa:	4630      	mov	r0, r6
    c8ac:	4a04      	ldr	r2, [pc, #16]	; (c8c0 <gatt_write_ccc.constprop.0+0x54>)
}
    c8ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    c8b2:	f7ff be21 	b.w	c4f8 <gatt_send.constprop.0>
}
    c8b6:	f06f 000b 	mvn.w	r0, #11
    c8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c8be:	bf00      	nop
    c8c0:	000241d1 	.word	0x000241d1

0000c8c4 <disconnected_cb>:
{
    c8c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8c8:	4b2a      	ldr	r3, [pc, #168]	; (c974 <disconnected_cb+0xb0>)
{
    c8ca:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8cc:	6882      	ldr	r2, [r0, #8]
    c8ce:	429a      	cmp	r2, r3
{
    c8d0:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8d2:	d12f      	bne.n	c934 <disconnected_cb+0x70>
	ccc = attr->user_data;
    c8d4:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    c8d6:	8aab      	ldrh	r3, [r5, #20]
    c8d8:	b363      	cbz	r3, c934 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    c8da:	f8df b09c 	ldr.w	fp, [pc, #156]	; c978 <disconnected_cb+0xb4>
    c8de:	1c6c      	adds	r4, r5, #1
    c8e0:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    c8e4:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c8e8:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    c8ec:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    c8f0:	b19b      	cbz	r3, c91a <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c8f2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    c8f6:	4622      	mov	r2, r4
    c8f8:	4630      	mov	r0, r6
    c8fa:	f016 fd32 	bl	23362 <bt_conn_is_peer_addr_le>
    c8fe:	b9e8      	cbnz	r0, c93c <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c900:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    c904:	4621      	mov	r1, r4
    c906:	f7fd fe8f 	bl	a628 <bt_conn_lookup_addr_le>
			if (tmp) {
    c90a:	b130      	cbz	r0, c91a <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    c90c:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    c90e:	2b07      	cmp	r3, #7
    c910:	bf08      	it	eq
    c912:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    c916:	f016 fd4b 	bl	233b0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c91a:	340a      	adds	r4, #10
    c91c:	4554      	cmp	r4, sl
    c91e:	d1e5      	bne.n	c8ec <disconnected_cb+0x28>
	if (!value_used) {
    c920:	f1b8 0f00 	cmp.w	r8, #0
    c924:	d106      	bne.n	c934 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    c926:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    c928:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    c92c:	b113      	cbz	r3, c934 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    c92e:	4641      	mov	r1, r8
    c930:	4638      	mov	r0, r7
    c932:	4798      	blx	r3
}
    c934:	2001      	movs	r0, #1
    c936:	b003      	add	sp, #12
    c938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c93c:	7a30      	ldrb	r0, [r6, #8]
    c93e:	4649      	mov	r1, r9
    c940:	f016 fb81 	bl	23046 <bt_addr_le_is_bonded>
    c944:	b988      	cbnz	r0, c96a <disconnected_cb+0xa6>
				if (ccc == &sc_ccc) {
    c946:	455d      	cmp	r5, fp
    c948:	d102      	bne.n	c950 <disconnected_cb+0x8c>
					sc_clear(conn);
    c94a:	4630      	mov	r0, r6
    c94c:	f017 fb2b 	bl	23fa6 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    c950:	2200      	movs	r2, #0
    c952:	4669      	mov	r1, sp
    c954:	4620      	mov	r0, r4
    c956:	9200      	str	r2, [sp, #0]
    c958:	f8cd 2003 	str.w	r2, [sp, #3]
    c95c:	f017 fb0b 	bl	23f76 <bt_addr_le_copy>
	cfg->id = 0U;
    c960:	f804 2c01 	strb.w	r2, [r4, #-1]
	cfg->value = 0U;
    c964:	f8a4 2007 	strh.w	r2, [r4, #7]
}
    c968:	e7d7      	b.n	c91a <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c96a:	4649      	mov	r1, r9
    c96c:	4620      	mov	r0, r4
    c96e:	f017 fb02 	bl	23f76 <bt_addr_le_copy>
    c972:	e7d2      	b.n	c91a <disconnected_cb+0x56>
    c974:	0000c3b9 	.word	0x0000c3b9
    c978:	200002bc 	.word	0x200002bc

0000c97c <bt_gatt_init>:
{
    c97c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c97e:	4b18      	ldr	r3, [pc, #96]	; (c9e0 <bt_gatt_init+0x64>)
    c980:	f3bf 8f5b 	dmb	ish
    c984:	2201      	movs	r2, #1
    c986:	e853 1f00 	ldrex	r1, [r3]
    c98a:	2900      	cmp	r1, #0
    c98c:	d103      	bne.n	c996 <bt_gatt_init+0x1a>
    c98e:	e843 2000 	strex	r0, r2, [r3]
    c992:	2800      	cmp	r0, #0
    c994:	d1f7      	bne.n	c986 <bt_gatt_init+0xa>
    c996:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    c99a:	d11f      	bne.n	c9dc <bt_gatt_init+0x60>
    c99c:	4911      	ldr	r1, [pc, #68]	; (c9e4 <bt_gatt_init+0x68>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c99e:	4a12      	ldr	r2, [pc, #72]	; (c9e8 <bt_gatt_init+0x6c>)
    c9a0:	880b      	ldrh	r3, [r1, #0]
    c9a2:	4c12      	ldr	r4, [pc, #72]	; (c9ec <bt_gatt_init+0x70>)
	if (!atomic_cas(&init, 0, 1)) {
    c9a4:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c9a6:	42a2      	cmp	r2, r4
    c9a8:	d312      	bcc.n	c9d0 <bt_gatt_init+0x54>
    c9aa:	b100      	cbz	r0, c9ae <bt_gatt_init+0x32>
    c9ac:	800b      	strh	r3, [r1, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    c9ae:	4910      	ldr	r1, [pc, #64]	; (c9f0 <bt_gatt_init+0x74>)
    c9b0:	4810      	ldr	r0, [pc, #64]	; (c9f4 <bt_gatt_init+0x78>)
    c9b2:	f019 fa6c 	bl	25e8e <k_delayed_work_init>
    c9b6:	490f      	ldr	r1, [pc, #60]	; (c9f4 <bt_gatt_init+0x78>)
    c9b8:	480f      	ldr	r0, [pc, #60]	; (c9f8 <bt_gatt_init+0x7c>)
    c9ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c9be:	2300      	movs	r3, #0
    c9c0:	f012 fed2 	bl	1f768 <k_delayed_work_submit_to_queue>
}
    c9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_init(&gatt_sc.work, sc_process);
    c9c8:	490c      	ldr	r1, [pc, #48]	; (c9fc <bt_gatt_init+0x80>)
    c9ca:	480d      	ldr	r0, [pc, #52]	; (ca00 <bt_gatt_init+0x84>)
    c9cc:	f019 ba5f 	b.w	25e8e <k_delayed_work_init>
		last_static_handle += svc->attr_count;
    c9d0:	6850      	ldr	r0, [r2, #4]
    c9d2:	4403      	add	r3, r0
    c9d4:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c9d6:	3208      	adds	r2, #8
    c9d8:	2001      	movs	r0, #1
    c9da:	e7e4      	b.n	c9a6 <bt_gatt_init+0x2a>
}
    c9dc:	bd10      	pop	{r4, pc}
    c9de:	bf00      	nop
    c9e0:	20001c58 	.word	0x20001c58
    c9e4:	20003618 	.word	0x20003618
    c9e8:	00026800 	.word	0x00026800
    c9ec:	00026828 	.word	0x00026828
    c9f0:	000242df 	.word	0x000242df
    c9f4:	20001410 	.word	0x20001410
    c9f8:	20001940 	.word	0x20001940
    c9fc:	0000cda1 	.word	0x0000cda1
    ca00:	20001458 	.word	0x20001458

0000ca04 <bt_gatt_attr_get_handle>:
{
    ca04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    ca08:	4603      	mov	r3, r0
    ca0a:	b148      	cbz	r0, ca20 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    ca0c:	8a00      	ldrh	r0, [r0, #16]
    ca0e:	b938      	cbnz	r0, ca20 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca10:	4912      	ldr	r1, [pc, #72]	; (ca5c <bt_gatt_attr_get_handle+0x58>)
    ca12:	f8df e04c 	ldr.w	lr, [pc, #76]	; ca60 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    ca16:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ca18:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca1c:	4571      	cmp	r1, lr
    ca1e:	d301      	bcc.n	ca24 <bt_gatt_attr_get_handle+0x20>
}
    ca20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ca24:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    ca28:	42bb      	cmp	r3, r7
    ca2a:	d304      	bcc.n	ca36 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ca2c:	fb0c 7206 	mla	r2, ip, r6, r7
    ca30:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    ca32:	4293      	cmp	r3, r2
    ca34:	d90e      	bls.n	ca54 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    ca36:	19a2      	adds	r2, r4, r6
    ca38:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca3a:	3108      	adds	r1, #8
    ca3c:	4614      	mov	r4, r2
    ca3e:	e7ed      	b.n	ca1c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    ca40:	fb0c 7805 	mla	r8, ip, r5, r7
    ca44:	4543      	cmp	r3, r8
    ca46:	d007      	beq.n	ca58 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    ca48:	3501      	adds	r5, #1
    ca4a:	1962      	adds	r2, r4, r5
    ca4c:	42b5      	cmp	r5, r6
    ca4e:	b292      	uxth	r2, r2
    ca50:	d1f6      	bne.n	ca40 <bt_gatt_attr_get_handle+0x3c>
    ca52:	e7f2      	b.n	ca3a <bt_gatt_attr_get_handle+0x36>
    ca54:	2500      	movs	r5, #0
    ca56:	e7f8      	b.n	ca4a <bt_gatt_attr_get_handle+0x46>
    ca58:	4610      	mov	r0, r2
    ca5a:	e7e1      	b.n	ca20 <bt_gatt_attr_get_handle+0x1c>
    ca5c:	00026800 	.word	0x00026800
    ca60:	00026828 	.word	0x00026828

0000ca64 <bt_gatt_attr_value_handle>:
{
    ca64:	b508      	push	{r3, lr}
    ca66:	4603      	mov	r3, r0
	if ((attr != NULL)
    ca68:	b150      	cbz	r0, ca80 <bt_gatt_attr_value_handle+0x1c>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    ca6a:	6841      	ldr	r1, [r0, #4]
    ca6c:	4a06      	ldr	r2, [pc, #24]	; (ca88 <bt_gatt_attr_value_handle+0x24>)
    ca6e:	4291      	cmp	r1, r2
    ca70:	d108      	bne.n	ca84 <bt_gatt_attr_value_handle+0x20>
		handle = chrc->value_handle;
    ca72:	68c3      	ldr	r3, [r0, #12]
    ca74:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    ca76:	b91b      	cbnz	r3, ca80 <bt_gatt_attr_value_handle+0x1c>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
    ca78:	f7ff ffc4 	bl	ca04 <bt_gatt_attr_get_handle>
    ca7c:	1c43      	adds	r3, r0, #1
    ca7e:	b29b      	uxth	r3, r3
}
    ca80:	4618      	mov	r0, r3
    ca82:	bd08      	pop	{r3, pc}
	uint16_t handle = 0;
    ca84:	2300      	movs	r3, #0
    ca86:	e7fb      	b.n	ca80 <bt_gatt_attr_value_handle+0x1c>
    ca88:	00024275 	.word	0x00024275

0000ca8c <bt_gatt_foreach_attr_type>:
{
    ca8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca90:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    ca94:	9100      	str	r1, [sp, #0]
    ca96:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    ca98:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca9c:	2d00      	cmp	r5, #0
    ca9e:	bf08      	it	eq
    caa0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    caa2:	4b24      	ldr	r3, [pc, #144]	; (cb34 <bt_gatt_foreach_attr_type+0xa8>)
    caa4:	881b      	ldrh	r3, [r3, #0]
    caa6:	4283      	cmp	r3, r0
{
    caa8:	4607      	mov	r7, r0
    caaa:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    caac:	d23c      	bcs.n	cb28 <bt_gatt_foreach_attr_type+0x9c>
}
    caae:	b003      	add	sp, #12
    cab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    cab4:	6873      	ldr	r3, [r6, #4]
    cab6:	4423      	add	r3, r4
    cab8:	42bb      	cmp	r3, r7
    caba:	d232      	bcs.n	cb22 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    cabc:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    cabe:	3608      	adds	r6, #8
    cac0:	4b1d      	ldr	r3, [pc, #116]	; (cb38 <bt_gatt_foreach_attr_type+0xac>)
    cac2:	429e      	cmp	r6, r3
    cac4:	d3f6      	bcc.n	cab4 <bt_gatt_foreach_attr_type+0x28>
    cac6:	e7f2      	b.n	caae <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cac8:	5889      	ldr	r1, [r1, r2]
    caca:	9301      	str	r3, [sp, #4]
    cacc:	4640      	mov	r0, r8
    cace:	f016 f881 	bl	22bd4 <bt_uuid_cmp>
    cad2:	9b01      	ldr	r3, [sp, #4]
    cad4:	b190      	cbz	r0, cafc <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    cad6:	3401      	adds	r4, #1
    cad8:	f10a 0a01 	add.w	sl, sl, #1
    cadc:	b2a4      	uxth	r4, r4
    cade:	6873      	ldr	r3, [r6, #4]
    cae0:	4553      	cmp	r3, sl
    cae2:	d9ec      	bls.n	cabe <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    cae4:	9b00      	ldr	r3, [sp, #0]
    cae6:	429c      	cmp	r4, r3
    cae8:	d8e1      	bhi.n	caae <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    caea:	42bc      	cmp	r4, r7
    caec:	d3f3      	bcc.n	cad6 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    caee:	6831      	ldr	r1, [r6, #0]
    caf0:	fb0b f20a 	mul.w	r2, fp, sl
    caf4:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    caf6:	f1b8 0f00 	cmp.w	r8, #0
    cafa:	d1e5      	bne.n	cac8 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    cafc:	f1b9 0f00 	cmp.w	r9, #0
    cb00:	d10b      	bne.n	cb1a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    cb02:	3d01      	subs	r5, #1
    cb04:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    cb06:	4618      	mov	r0, r3
    cb08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cb0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb0c:	4621      	mov	r1, r4
    cb0e:	4798      	blx	r3
	if (!*num_matches) {
    cb10:	2d00      	cmp	r5, #0
    cb12:	d0cc      	beq.n	caae <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cb14:	2800      	cmp	r0, #0
    cb16:	d1de      	bne.n	cad6 <bt_gatt_foreach_attr_type+0x4a>
    cb18:	e7c9      	b.n	caae <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    cb1a:	68da      	ldr	r2, [r3, #12]
    cb1c:	4591      	cmp	r9, r2
    cb1e:	d1da      	bne.n	cad6 <bt_gatt_foreach_attr_type+0x4a>
    cb20:	e7ef      	b.n	cb02 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    cb22:	f04f 0a00 	mov.w	sl, #0
    cb26:	e7da      	b.n	cade <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    cb28:	4e04      	ldr	r6, [pc, #16]	; (cb3c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    cb2a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cb2c:	f04f 0b14 	mov.w	fp, #20
    cb30:	e7c6      	b.n	cac0 <bt_gatt_foreach_attr_type+0x34>
    cb32:	bf00      	nop
    cb34:	20003618 	.word	0x20003618
    cb38:	00026828 	.word	0x00026828
    cb3c:	00026800 	.word	0x00026800

0000cb40 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    cb40:	b510      	push	{r4, lr}
    cb42:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    cb44:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    cb46:	aa1c      	add	r2, sp, #112	; 0x70
    cb48:	4669      	mov	r1, sp
    cb4a:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    cb4c:	e9cd 3300 	strd	r3, r3, [sp]
    cb50:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    cb54:	f015 fec8 	bl	228e8 <tc_cmac_setup>
    cb58:	b958      	cbnz	r0, cb72 <db_hash_gen.constprop.0+0x32>
    cb5a:	4917      	ldr	r1, [pc, #92]	; (cbb8 <db_hash_gen.constprop.0+0x78>)
    cb5c:	4b17      	ldr	r3, [pc, #92]	; (cbbc <db_hash_gen.constprop.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    cb5e:	4818      	ldr	r0, [pc, #96]	; (cbc0 <db_hash_gen.constprop.0+0x80>)
    cb60:	1ac9      	subs	r1, r1, r3
    cb62:	08c9      	lsrs	r1, r1, #3
    cb64:	0189      	lsls	r1, r1, #6
    cb66:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    cb6a:	f014 fa91 	bl	21090 <log_0>
}
    cb6e:	b048      	add	sp, #288	; 0x120
    cb70:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    cb72:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cb76:	2001      	movs	r0, #1
    cb78:	4a12      	ldr	r2, [pc, #72]	; (cbc4 <db_hash_gen.constprop.0+0x84>)
    cb7a:	ab04      	add	r3, sp, #16
    cb7c:	f017 fba4 	bl	242c8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    cb80:	4811      	ldr	r0, [pc, #68]	; (cbc8 <db_hash_gen.constprop.0+0x88>)
    cb82:	a904      	add	r1, sp, #16
    cb84:	f015 ff46 	bl	22a14 <tc_cmac_final>
    cb88:	b940      	cbnz	r0, cb9c <db_hash_gen.constprop.0+0x5c>
    cb8a:	490b      	ldr	r1, [pc, #44]	; (cbb8 <db_hash_gen.constprop.0+0x78>)
    cb8c:	4b0b      	ldr	r3, [pc, #44]	; (cbbc <db_hash_gen.constprop.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    cb8e:	480f      	ldr	r0, [pc, #60]	; (cbcc <db_hash_gen.constprop.0+0x8c>)
    cb90:	1ac9      	subs	r1, r1, r3
    cb92:	08c9      	lsrs	r1, r1, #3
    cb94:	0189      	lsls	r1, r1, #6
    cb96:	f041 0101 	orr.w	r1, r1, #1
    cb9a:	e7e6      	b.n	cb6a <db_hash_gen.constprop.0+0x2a>
    cb9c:	4b0a      	ldr	r3, [pc, #40]	; (cbc8 <db_hash_gen.constprop.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    cb9e:	2208      	movs	r2, #8
    cba0:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    cba4:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    cba6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    cbaa:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    cbae:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    cbb0:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    cbb2:	d1f7      	bne.n	cba4 <db_hash_gen.constprop.0+0x64>
    cbb4:	e7db      	b.n	cb6e <db_hash_gen.constprop.0+0x2e>
    cbb6:	bf00      	nop
    cbb8:	00026910 	.word	0x00026910
    cbbc:	00026828 	.word	0x00026828
    cbc0:	0002a03d 	.word	0x0002a03d
    cbc4:	00023e61 	.word	0x00023e61
    cbc8:	20003baf 	.word	0x20003baf
    cbcc:	0002a056 	.word	0x0002a056

0000cbd0 <bt_gatt_notify_cb>:
{
    cbd0:	b570      	push	{r4, r5, r6, lr}
    cbd2:	4604      	mov	r4, r0
    cbd4:	b08a      	sub	sp, #40	; 0x28
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    cbd6:	4835      	ldr	r0, [pc, #212]	; (ccac <bt_gatt_notify_cb+0xdc>)
    cbd8:	f017 f9c7 	bl	23f6a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cbdc:	0782      	lsls	r2, r0, #30
{
    cbde:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cbe0:	d55d      	bpl.n	cc9e <bt_gatt_notify_cb+0xce>
	found.attr = params->attr;
    cbe2:	6848      	ldr	r0, [r1, #4]
    cbe4:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    cbe6:	b114      	cbz	r4, cbee <bt_gatt_notify_cb+0x1e>
    cbe8:	7b63      	ldrb	r3, [r4, #13]
    cbea:	2b07      	cmp	r3, #7
    cbec:	d15a      	bne.n	cca4 <bt_gatt_notify_cb+0xd4>
	found.handle = bt_gatt_attr_get_handle(found.attr);
    cbee:	f7ff ff09 	bl	ca04 <bt_gatt_attr_get_handle>
    cbf2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!found.handle) {
    cbf6:	b918      	cbnz	r0, cc00 <bt_gatt_notify_cb+0x30>
		return -ENOENT;
    cbf8:	f06f 0001 	mvn.w	r0, #1
}
    cbfc:	b00a      	add	sp, #40	; 0x28
    cbfe:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid) {
    cc00:	682a      	ldr	r2, [r5, #0]
    cc02:	b9b2      	cbnz	r2, cc32 <bt_gatt_notify_cb+0x62>
	if (!bt_uuid_cmp(found.attr->uuid, BT_UUID_GATT_CHRC)) {
    cc04:	9b05      	ldr	r3, [sp, #20]
    cc06:	ae07      	add	r6, sp, #28
    cc08:	6818      	ldr	r0, [r3, #0]
    cc0a:	2300      	movs	r3, #0
    cc0c:	f88d 301c 	strb.w	r3, [sp, #28]
    cc10:	4631      	mov	r1, r6
    cc12:	f642 0303 	movw	r3, #10243	; 0x2803
    cc16:	f8ad 301e 	strh.w	r3, [sp, #30]
    cc1a:	f015 ffdb 	bl	22bd4 <bt_uuid_cmp>
    cc1e:	b1c0      	cbz	r0, cc52 <bt_gatt_notify_cb+0x82>
		return gatt_notify(conn, found.handle, params);
    cc20:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    cc24:	b314      	cbz	r4, cc6c <bt_gatt_notify_cb+0x9c>
		return gatt_notify(conn, found.handle, params);
    cc26:	4601      	mov	r1, r0
    cc28:	462a      	mov	r2, r5
    cc2a:	4620      	mov	r0, r4
    cc2c:	f7ff fc2a 	bl	c484 <gatt_notify>
    cc30:	e7e4      	b.n	cbfc <bt_gatt_notify_cb+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cc32:	a905      	add	r1, sp, #20
    cc34:	9102      	str	r1, [sp, #8]
    cc36:	491e      	ldr	r1, [pc, #120]	; (ccb0 <bt_gatt_notify_cb+0xe0>)
    cc38:	9101      	str	r1, [sp, #4]
    cc3a:	2101      	movs	r1, #1
	found->attr = NULL;
    cc3c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cc3e:	9100      	str	r1, [sp, #0]
    cc40:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    cc44:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cc46:	f7ff ff21 	bl	ca8c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&found, params->uuid)) {
    cc4a:	9b05      	ldr	r3, [sp, #20]
    cc4c:	2b00      	cmp	r3, #0
    cc4e:	d1d9      	bne.n	cc04 <bt_gatt_notify_cb+0x34>
    cc50:	e7d2      	b.n	cbf8 <bt_gatt_notify_cb+0x28>
		struct bt_gatt_chrc *chrc = found.attr->user_data;
    cc52:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    cc54:	68c3      	ldr	r3, [r0, #12]
    cc56:	799b      	ldrb	r3, [r3, #6]
    cc58:	06db      	lsls	r3, r3, #27
    cc5a:	d402      	bmi.n	cc62 <bt_gatt_notify_cb+0x92>
			return -EINVAL;
    cc5c:	f06f 0015 	mvn.w	r0, #21
    cc60:	e7cc      	b.n	cbfc <bt_gatt_notify_cb+0x2c>
		found.handle = bt_gatt_attr_value_handle(found.attr);
    cc62:	f7ff feff 	bl	ca64 <bt_gatt_attr_value_handle>
    cc66:	f8ad 0018 	strh.w	r0, [sp, #24]
    cc6a:	e7d9      	b.n	cc20 <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(found.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc6c:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
    cc70:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(found.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc74:	f8ad 2012 	strh.w	r2, [sp, #18]
    cc78:	4a0e      	ldr	r2, [pc, #56]	; (ccb4 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
    cc7a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    cc7c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(found.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc7e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    cc82:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(found.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc86:	9602      	str	r6, [sp, #8]
    cc88:	4623      	mov	r3, r4
    cc8a:	aa04      	add	r2, sp, #16
    cc8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    cc90:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(found.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc92:	f88d 4010 	strb.w	r4, [sp, #16]
    cc96:	f7ff fef9 	bl	ca8c <bt_gatt_foreach_attr_type>
	return data.err;
    cc9a:	9807      	ldr	r0, [sp, #28]
    cc9c:	e7ae      	b.n	cbfc <bt_gatt_notify_cb+0x2c>
		return -EAGAIN;
    cc9e:	f06f 000a 	mvn.w	r0, #10
    cca2:	e7ab      	b.n	cbfc <bt_gatt_notify_cb+0x2c>
		return -ENOTCONN;
    cca4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    cca8:	e7a8      	b.n	cbfc <bt_gatt_notify_cb+0x2c>
    ccaa:	bf00      	nop
    ccac:	20000098 	.word	0x20000098
    ccb0:	00023e59 	.word	0x00023e59
    ccb4:	0000c661 	.word	0x0000c661

0000ccb8 <bt_gatt_indicate>:
{
    ccb8:	b570      	push	{r4, r5, r6, lr}
    ccba:	4604      	mov	r4, r0
    ccbc:	b08a      	sub	sp, #40	; 0x28
    ccbe:	4835      	ldr	r0, [pc, #212]	; (cd94 <bt_gatt_indicate+0xdc>)
    ccc0:	f017 f953 	bl	23f6a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ccc4:	0782      	lsls	r2, r0, #30
{
    ccc6:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ccc8:	d55e      	bpl.n	cd88 <bt_gatt_indicate+0xd0>
	found.attr = params->attr;
    ccca:	6848      	ldr	r0, [r1, #4]
    cccc:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    ccce:	b114      	cbz	r4, ccd6 <bt_gatt_indicate+0x1e>
    ccd0:	7b63      	ldrb	r3, [r4, #13]
    ccd2:	2b07      	cmp	r3, #7
    ccd4:	d15b      	bne.n	cd8e <bt_gatt_indicate+0xd6>
	found.handle = bt_gatt_attr_get_handle(found.attr);
    ccd6:	f7ff fe95 	bl	ca04 <bt_gatt_attr_get_handle>
    ccda:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!found.handle) {
    ccde:	b918      	cbnz	r0, cce8 <bt_gatt_indicate+0x30>
		return -ENOENT;
    cce0:	f06f 0001 	mvn.w	r0, #1
}
    cce4:	b00a      	add	sp, #40	; 0x28
    cce6:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid) {
    cce8:	682a      	ldr	r2, [r5, #0]
    ccea:	b9b2      	cbnz	r2, cd1a <bt_gatt_indicate+0x62>
	if (!bt_uuid_cmp(found.attr->uuid, BT_UUID_GATT_CHRC)) {
    ccec:	9b05      	ldr	r3, [sp, #20]
    ccee:	ae07      	add	r6, sp, #28
    ccf0:	6818      	ldr	r0, [r3, #0]
    ccf2:	2300      	movs	r3, #0
    ccf4:	f88d 301c 	strb.w	r3, [sp, #28]
    ccf8:	4631      	mov	r1, r6
    ccfa:	f642 0303 	movw	r3, #10243	; 0x2803
    ccfe:	f8ad 301e 	strh.w	r3, [sp, #30]
    cd02:	f015 ff67 	bl	22bd4 <bt_uuid_cmp>
    cd06:	b1c0      	cbz	r0, cd3a <bt_gatt_indicate+0x82>
		return gatt_indicate(conn, found.handle, params);
    cd08:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    cd0c:	b314      	cbz	r4, cd54 <bt_gatt_indicate+0x9c>
		return gatt_indicate(conn, found.handle, params);
    cd0e:	4601      	mov	r1, r0
    cd10:	462a      	mov	r2, r5
    cd12:	4620      	mov	r0, r4
    cd14:	f7ff fc2c 	bl	c570 <gatt_indicate>
    cd18:	e7e4      	b.n	cce4 <bt_gatt_indicate+0x2c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd1a:	a905      	add	r1, sp, #20
    cd1c:	9102      	str	r1, [sp, #8]
    cd1e:	491e      	ldr	r1, [pc, #120]	; (cd98 <bt_gatt_indicate+0xe0>)
    cd20:	9101      	str	r1, [sp, #4]
    cd22:	2101      	movs	r1, #1
	found->attr = NULL;
    cd24:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd26:	9100      	str	r1, [sp, #0]
    cd28:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    cd2c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd2e:	f7ff fead 	bl	ca8c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&found, params->uuid)) {
    cd32:	9b05      	ldr	r3, [sp, #20]
    cd34:	2b00      	cmp	r3, #0
    cd36:	d1d9      	bne.n	ccec <bt_gatt_indicate+0x34>
    cd38:	e7d2      	b.n	cce0 <bt_gatt_indicate+0x28>
		struct bt_gatt_chrc *chrc = found.attr->user_data;
    cd3a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    cd3c:	68c3      	ldr	r3, [r0, #12]
    cd3e:	799b      	ldrb	r3, [r3, #6]
    cd40:	069b      	lsls	r3, r3, #26
    cd42:	d402      	bmi.n	cd4a <bt_gatt_indicate+0x92>
			return -EINVAL;
    cd44:	f06f 0015 	mvn.w	r0, #21
    cd48:	e7cc      	b.n	cce4 <bt_gatt_indicate+0x2c>
		found.handle = bt_gatt_attr_value_handle(found.attr);
    cd4a:	f7ff fe8b 	bl	ca64 <bt_gatt_attr_value_handle>
    cd4e:	f8ad 0018 	strh.w	r0, [sp, #24]
    cd52:	e7d9      	b.n	cd08 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
    cd54:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    cd58:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    cd5a:	2302      	movs	r3, #2
    cd5c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(found.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cd60:	f642 1302 	movw	r3, #10498	; 0x2902
    cd64:	f8ad 3012 	strh.w	r3, [sp, #18]
    cd68:	4b0c      	ldr	r3, [pc, #48]	; (cd9c <bt_gatt_indicate+0xe4>)
    cd6a:	9301      	str	r3, [sp, #4]
    cd6c:	2301      	movs	r3, #1
    cd6e:	9300      	str	r3, [sp, #0]
    cd70:	9602      	str	r6, [sp, #8]
    cd72:	4623      	mov	r3, r4
    cd74:	aa04      	add	r2, sp, #16
    cd76:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    cd7a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(found.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cd7c:	f88d 4010 	strb.w	r4, [sp, #16]
    cd80:	f7ff fe84 	bl	ca8c <bt_gatt_foreach_attr_type>
	return data.err;
    cd84:	9807      	ldr	r0, [sp, #28]
    cd86:	e7ad      	b.n	cce4 <bt_gatt_indicate+0x2c>
		return -EAGAIN;
    cd88:	f06f 000a 	mvn.w	r0, #10
    cd8c:	e7aa      	b.n	cce4 <bt_gatt_indicate+0x2c>
		return -ENOTCONN;
    cd8e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    cd92:	e7a7      	b.n	cce4 <bt_gatt_indicate+0x2c>
    cd94:	20000098 	.word	0x20000098
    cd98:	00023e59 	.word	0x00023e59
    cd9c:	0000c661 	.word	0x0000c661

0000cda0 <sc_process>:
{
    cda0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    cda2:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    cda6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    cdaa:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    cdae:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    cdb2:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    cdb4:	f1a0 0118 	sub.w	r1, r0, #24
    cdb8:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cdbc:	f3bf 8f5b 	dmb	ish
    cdc0:	e854 2f00 	ldrex	r2, [r4]
    cdc4:	f022 0201 	bic.w	r2, r2, #1
    cdc8:	e844 2000 	strex	r0, r2, [r4]
    cdcc:	2800      	cmp	r0, #0
    cdce:	d1f7      	bne.n	cdc0 <sc_process+0x20>
    cdd0:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    cdd4:	4a0c      	ldr	r2, [pc, #48]	; (ce08 <sc_process+0x68>)
    cdd6:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    cdda:	4a0c      	ldr	r2, [pc, #48]	; (ce0c <sc_process+0x6c>)
    cddc:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    cde0:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    cde2:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    cde4:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    cde8:	2204      	movs	r2, #4
	sc->start = 0U;
    cdea:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
    cdee:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    cdf2:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    cdf6:	f7ff ff5f 	bl	ccb8 <bt_gatt_indicate>
    cdfa:	b918      	cbnz	r0, ce04 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    cdfc:	2101      	movs	r1, #1
    cdfe:	4620      	mov	r0, r4
    ce00:	f017 f9ab 	bl	2415a <atomic_set_bit>
}
    ce04:	b002      	add	sp, #8
    ce06:	bd10      	pop	{r4, pc}
    ce08:	000270ec 	.word	0x000270ec
    ce0c:	0000c815 	.word	0x0000c815

0000ce10 <update_ccc>:
{
    ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce14:	6881      	ldr	r1, [r0, #8]
{
    ce16:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce18:	4a3e      	ldr	r2, [pc, #248]	; (cf14 <update_ccc+0x104>)
    ce1a:	4291      	cmp	r1, r2
{
    ce1c:	b085      	sub	sp, #20
    ce1e:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce20:	d174      	bne.n	cf0c <update_ccc+0xfc>
    ce22:	4c3d      	ldr	r4, [pc, #244]	; (cf18 <update_ccc+0x108>)
    ce24:	493d      	ldr	r1, [pc, #244]	; (cf1c <update_ccc+0x10c>)
	ccc = attr->user_data;
    ce26:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    ce2a:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    ce2c:	f8df b0f0 	ldr.w	fp, [pc, #240]	; cf20 <update_ccc+0x110>
    ce30:	1a64      	subs	r4, r4, r1
    ce32:	08e4      	lsrs	r4, r4, #3
    ce34:	f108 0315 	add.w	r3, r8, #21
    ce38:	ea4f 1984 	mov.w	r9, r4, lsl #6
    ce3c:	f108 0601 	add.w	r6, r8, #1
    ce40:	9300      	str	r3, [sp, #0]
    ce42:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    ce46:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    ce4a:	b19a      	cbz	r2, ce74 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ce4c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    ce50:	4632      	mov	r2, r6
    ce52:	4628      	mov	r0, r5
    ce54:	f016 fa85 	bl	23362 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    ce58:	b160      	cbz	r0, ce74 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    ce5a:	222a      	movs	r2, #42	; 0x2a
    ce5c:	4651      	mov	r1, sl
    ce5e:	4628      	mov	r0, r5
    ce60:	f017 fa3f 	bl	242e2 <bt_gatt_check_perm>
		if (err) {
    ce64:	b1d8      	cbz	r0, ce9e <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    ce66:	2803      	cmp	r0, #3
    ce68:	d109      	bne.n	ce7e <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    ce6a:	464a      	mov	r2, r9
    ce6c:	4651      	mov	r1, sl
    ce6e:	4658      	mov	r0, fp
    ce70:	f014 f91b 	bl	210aa <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    ce74:	9b00      	ldr	r3, [sp, #0]
    ce76:	360a      	adds	r6, #10
    ce78:	429e      	cmp	r6, r3
    ce7a:	d047      	beq.n	cf0c <update_ccc+0xfc>
    ce7c:	e7e3      	b.n	ce46 <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    ce7e:	2805      	cmp	r0, #5
    ce80:	bf14      	ite	ne
    ce82:	2202      	movne	r2, #2
    ce84:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    ce86:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    ce88:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    ce8a:	f016 fa3c 	bl	23306 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    ce8e:	9a01      	ldr	r2, [sp, #4]
    ce90:	4282      	cmp	r2, r0
    ce92:	d904      	bls.n	ce9e <update_ccc+0x8e>
				if (data->sec < sec) {
    ce94:	7939      	ldrb	r1, [r7, #4]
    ce96:	4291      	cmp	r1, r2
    ce98:	d2ec      	bcs.n	ce74 <update_ccc+0x64>
					data->sec = sec;
    ce9a:	713a      	strb	r2, [r7, #4]
    ce9c:	e7ea      	b.n	ce74 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    ce9e:	4641      	mov	r1, r8
    cea0:	4650      	mov	r0, sl
    cea2:	f016 ffc3 	bl	23e2c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    cea6:	4b1f      	ldr	r3, [pc, #124]	; (cf24 <update_ccc+0x114>)
    cea8:	4598      	cmp	r8, r3
    ceaa:	d12f      	bne.n	cf0c <update_ccc+0xfc>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    ceac:	7a28      	ldrb	r0, [r5, #8]
    ceae:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ceb2:	f7ff fa33 	bl	c31c <find_sc_cfg>
	if (!cfg) {
    ceb6:	4606      	mov	r6, r0
    ceb8:	b340      	cbz	r0, cf0c <update_ccc+0xfc>
	if (!(cfg->data.start || cfg->data.end)) {
    ceba:	8902      	ldrh	r2, [r0, #8]
    cebc:	8943      	ldrh	r3, [r0, #10]
    cebe:	ea52 0103 	orrs.w	r1, r2, r3
    cec2:	d023      	beq.n	cf0c <update_ccc+0xfc>
	index = bt_conn_index(conn);
    cec4:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    cec6:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    ceca:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    cece:	f7fd ff7f 	bl	add0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    ced2:	4915      	ldr	r1, [pc, #84]	; (cf28 <update_ccc+0x118>)
    ced4:	4a15      	ldr	r2, [pc, #84]	; (cf2c <update_ccc+0x11c>)
    ced6:	2314      	movs	r3, #20
    ced8:	fb03 1300 	mla	r3, r3, r0, r1
    cedc:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    cede:	4a14      	ldr	r2, [pc, #80]	; (cf30 <update_ccc+0x120>)
    cee0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    cee2:	aa03      	add	r2, sp, #12
    cee4:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    cee6:	2204      	movs	r2, #4
    cee8:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    ceea:	b203      	sxth	r3, r0
    ceec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cef0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    cef4:	4628      	mov	r0, r5
    cef6:	f7ff fedf 	bl	ccb8 <bt_gatt_indicate>
    cefa:	b128      	cbz	r0, cf08 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    cefc:	01a1      	lsls	r1, r4, #6
    cefe:	480d      	ldr	r0, [pc, #52]	; (cf34 <update_ccc+0x124>)
    cf00:	f041 0101 	orr.w	r1, r1, #1
    cf04:	f014 f8c4 	bl	21090 <log_0>
__ssp_bos_icheck3(memset, void *, int)
    cf08:	2300      	movs	r3, #0
    cf0a:	60b3      	str	r3, [r6, #8]
}
    cf0c:	2001      	movs	r0, #1
    cf0e:	b005      	add	sp, #20
    cf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf14:	0000c3b9 	.word	0x0000c3b9
    cf18:	00026910 	.word	0x00026910
    cf1c:	00026828 	.word	0x00026828
    cf20:	0002a06f 	.word	0x0002a06f
    cf24:	200002bc 	.word	0x200002bc
    cf28:	20001c5c 	.word	0x20001c5c
    cf2c:	000270ec 	.word	0x000270ec
    cf30:	00024177 	.word	0x00024177
    cf34:	0002a083 	.word	0x0002a083

0000cf38 <bt_gatt_discover>:
{
    cf38:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    cf3a:	7b43      	ldrb	r3, [r0, #13]
    cf3c:	2b07      	cmp	r3, #7
{
    cf3e:	b085      	sub	sp, #20
    cf40:	4605      	mov	r5, r0
    cf42:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    cf44:	f040 80de 	bne.w	d104 <bt_gatt_discover+0x1cc>
	switch (params->type) {
    cf48:	7c09      	ldrb	r1, [r1, #16]
    cf4a:	2905      	cmp	r1, #5
    cf4c:	f200 80cf 	bhi.w	d0ee <bt_gatt_discover+0x1b6>
    cf50:	e8df f001 	tbb	[pc, r1]
    cf54:	68680303 	.word	0x68680303
    cf58:	b986      	.short	0xb986
		if (params->uuid) {
    cf5a:	6823      	ldr	r3, [r4, #0]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d043      	beq.n	cfe8 <bt_gatt_discover+0xb0>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    cf60:	2206      	movs	r2, #6
    cf62:	4611      	mov	r1, r2
    cf64:	f7fe fdc2 	bl	baec <bt_att_create_pdu>
	if (!buf) {
    cf68:	4606      	mov	r6, r0
    cf6a:	b918      	cbnz	r0, cf74 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    cf6c:	f06f 000b 	mvn.w	r0, #11
}
    cf70:	b005      	add	sp, #20
    cf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    cf74:	f100 0708 	add.w	r7, r0, #8
    cf78:	2106      	movs	r1, #6
    cf7a:	4638      	mov	r0, r7
    cf7c:	f018 fa85 	bl	2548a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    cf80:	8923      	ldrh	r3, [r4, #8]
    cf82:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    cf84:	89e3      	ldrh	r3, [r4, #14]
    cf86:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    cf88:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	f642 0301 	movw	r3, #10241	; 0x2801
    cf90:	bf08      	it	eq
    cf92:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
    cf96:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    cf98:	6823      	ldr	r3, [r4, #0]
    cf9a:	7819      	ldrb	r1, [r3, #0]
    cf9c:	b189      	cbz	r1, cfc2 <bt_gatt_discover+0x8a>
    cf9e:	2902      	cmp	r1, #2
    cfa0:	d01c      	beq.n	cfdc <bt_gatt_discover+0xa4>
    cfa2:	4b5a      	ldr	r3, [pc, #360]	; (d10c <bt_gatt_discover+0x1d4>)
    cfa4:	4a5a      	ldr	r2, [pc, #360]	; (d110 <bt_gatt_discover+0x1d8>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    cfa6:	485b      	ldr	r0, [pc, #364]	; (d114 <bt_gatt_discover+0x1dc>)
    cfa8:	1ad2      	subs	r2, r2, r3
    cfaa:	08d2      	lsrs	r2, r2, #3
    cfac:	0192      	lsls	r2, r2, #6
    cfae:	f042 0201 	orr.w	r2, r2, #1
    cfb2:	f014 f87a 	bl	210aa <log_1>
		net_buf_unref(buf);
    cfb6:	4630      	mov	r0, r6
    cfb8:	f010 fd30 	bl	1da1c <net_buf_unref>
	return -EINVAL;
    cfbc:	f06f 0015 	mvn.w	r0, #21
    cfc0:	e7d6      	b.n	cf70 <bt_gatt_discover+0x38>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    cfc2:	8859      	ldrh	r1, [r3, #2]
    cfc4:	4638      	mov	r0, r7
    cfc6:	f018 fa77 	bl	254b8 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    cfca:	4a53      	ldr	r2, [pc, #332]	; (d118 <bt_gatt_discover+0x1e0>)
    cfcc:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    cfce:	4631      	mov	r1, r6
    cfd0:	4628      	mov	r0, r5
}
    cfd2:	b005      	add	sp, #20
    cfd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    cfd8:	f7ff ba8e 	b.w	c4f8 <gatt_send.constprop.0>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    cfdc:	2210      	movs	r2, #16
    cfde:	1c59      	adds	r1, r3, #1
    cfe0:	4638      	mov	r0, r7
    cfe2:	f018 fa58 	bl	25496 <net_buf_simple_add_mem>
		break;
    cfe6:	e7f0      	b.n	cfca <bt_gatt_discover+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    cfe8:	2204      	movs	r2, #4
    cfea:	2110      	movs	r1, #16
    cfec:	f7fe fd7e 	bl	baec <bt_att_create_pdu>
	if (!buf) {
    cff0:	4606      	mov	r6, r0
    cff2:	2800      	cmp	r0, #0
    cff4:	d0ba      	beq.n	cf6c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    cff6:	f100 0708 	add.w	r7, r0, #8
    cffa:	2104      	movs	r1, #4
    cffc:	4638      	mov	r0, r7
    cffe:	f018 fa44 	bl	2548a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d002:	8923      	ldrh	r3, [r4, #8]
    d004:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d006:	89e3      	ldrh	r3, [r4, #14]
    d008:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    d00a:	7c23      	ldrb	r3, [r4, #16]
    d00c:	b93b      	cbnz	r3, d01e <bt_gatt_discover+0xe6>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_PRIMARY)->val);
    d00e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    d012:	4638      	mov	r0, r7
    d014:	f018 fa50 	bl	254b8 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    d018:	4a40      	ldr	r2, [pc, #256]	; (d11c <bt_gatt_discover+0x1e4>)
    d01a:	4623      	mov	r3, r4
    d01c:	e7d7      	b.n	cfce <bt_gatt_discover+0x96>
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_SECONDARY)->val);
    d01e:	f642 0101 	movw	r1, #10241	; 0x2801
    d022:	e7f6      	b.n	d012 <bt_gatt_discover+0xda>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    d024:	2204      	movs	r2, #4
    d026:	2108      	movs	r1, #8
    d028:	f7fe fd60 	bl	baec <bt_att_create_pdu>
	if (!buf) {
    d02c:	4606      	mov	r6, r0
    d02e:	2800      	cmp	r0, #0
    d030:	d09c      	beq.n	cf6c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    d032:	f100 0708 	add.w	r7, r0, #8
    d036:	2104      	movs	r1, #4
    d038:	4638      	mov	r0, r7
    d03a:	f018 fa26 	bl	2548a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d03e:	8923      	ldrh	r3, [r4, #8]
    d040:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d042:	89e3      	ldrh	r3, [r4, #14]
    d044:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    d046:	7c23      	ldrb	r3, [r4, #16]
    d048:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_INCLUDE)->val);
    d04a:	bf0c      	ite	eq
    d04c:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    d050:	f642 0103 	movwne	r1, #10243	; 0x2803
    d054:	4638      	mov	r0, r7
    d056:	f018 fa2f 	bl	254b8 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    d05a:	4a31      	ldr	r2, [pc, #196]	; (d120 <bt_gatt_discover+0x1e8>)
    d05c:	4623      	mov	r3, r4
    d05e:	e7b6      	b.n	cfce <bt_gatt_discover+0x96>
		if (params->uuid &&
    d060:	6820      	ldr	r0, [r4, #0]
    d062:	b380      	cbz	r0, d0c6 <bt_gatt_discover+0x18e>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    d064:	2600      	movs	r6, #0
    d066:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d06a:	4669      	mov	r1, sp
    d06c:	f88d 6000 	strb.w	r6, [sp]
    d070:	f8ad 3002 	strh.w	r3, [sp, #2]
    d074:	f015 fdae 	bl	22bd4 <bt_uuid_cmp>
		if (params->uuid &&
    d078:	2800      	cmp	r0, #0
    d07a:	d09f      	beq.n	cfbc <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    d07c:	f642 0301 	movw	r3, #10241	; 0x2801
    d080:	6820      	ldr	r0, [r4, #0]
    d082:	f88d 6004 	strb.w	r6, [sp, #4]
    d086:	a901      	add	r1, sp, #4
    d088:	f8ad 3006 	strh.w	r3, [sp, #6]
    d08c:	f015 fda2 	bl	22bd4 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    d090:	2800      	cmp	r0, #0
    d092:	d093      	beq.n	cfbc <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    d094:	f642 0302 	movw	r3, #10242	; 0x2802
    d098:	6820      	ldr	r0, [r4, #0]
    d09a:	f88d 6008 	strb.w	r6, [sp, #8]
    d09e:	a902      	add	r1, sp, #8
    d0a0:	f8ad 300a 	strh.w	r3, [sp, #10]
    d0a4:	f015 fd96 	bl	22bd4 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    d0a8:	2800      	cmp	r0, #0
    d0aa:	d087      	beq.n	cfbc <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    d0ac:	f642 0303 	movw	r3, #10243	; 0x2803
    d0b0:	6820      	ldr	r0, [r4, #0]
    d0b2:	f88d 600c 	strb.w	r6, [sp, #12]
    d0b6:	a903      	add	r1, sp, #12
    d0b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    d0bc:	f015 fd8a 	bl	22bd4 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    d0c0:	2800      	cmp	r0, #0
    d0c2:	f43f af7b 	beq.w	cfbc <bt_gatt_discover+0x84>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    d0c6:	2204      	movs	r2, #4
    d0c8:	4611      	mov	r1, r2
    d0ca:	4628      	mov	r0, r5
    d0cc:	f7fe fd0e 	bl	baec <bt_att_create_pdu>
	if (!buf) {
    d0d0:	4606      	mov	r6, r0
    d0d2:	2800      	cmp	r0, #0
    d0d4:	f43f af4a 	beq.w	cf6c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    d0d8:	2104      	movs	r1, #4
    d0da:	3008      	adds	r0, #8
    d0dc:	f018 f9d5 	bl	2548a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d0e0:	8923      	ldrh	r3, [r4, #8]
    d0e2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d0e4:	89e3      	ldrh	r3, [r4, #14]
    d0e6:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    d0e8:	4a0e      	ldr	r2, [pc, #56]	; (d124 <bt_gatt_discover+0x1ec>)
    d0ea:	4623      	mov	r3, r4
    d0ec:	e76f      	b.n	cfce <bt_gatt_discover+0x96>
    d0ee:	4b07      	ldr	r3, [pc, #28]	; (d10c <bt_gatt_discover+0x1d4>)
    d0f0:	4a07      	ldr	r2, [pc, #28]	; (d110 <bt_gatt_discover+0x1d8>)
		BT_ERR("Invalid discovery type: %u", params->type);
    d0f2:	480d      	ldr	r0, [pc, #52]	; (d128 <bt_gatt_discover+0x1f0>)
    d0f4:	1ad2      	subs	r2, r2, r3
    d0f6:	08d2      	lsrs	r2, r2, #3
    d0f8:	0192      	lsls	r2, r2, #6
    d0fa:	f042 0201 	orr.w	r2, r2, #1
    d0fe:	f013 ffd4 	bl	210aa <log_1>
    d102:	e75b      	b.n	cfbc <bt_gatt_discover+0x84>
		return -ENOTCONN;
    d104:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    d108:	e732      	b.n	cf70 <bt_gatt_discover+0x38>
    d10a:	bf00      	nop
    d10c:	00026828 	.word	0x00026828
    d110:	00026910 	.word	0x00026910
    d114:	0002a0a0 	.word	0x0002a0a0
    d118:	00024373 	.word	0x00024373
    d11c:	0000d12d 	.word	0x0000d12d
    d120:	0000d24d 	.word	0x0000d24d
    d124:	0000d549 	.word	0x0000d549
    d128:	0002a0b5 	.word	0x0002a0b5

0000d12c <gatt_read_group_rsp>:
{
    d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d130:	b08e      	sub	sp, #56	; 0x38
    d132:	4690      	mov	r8, r2
    d134:	9f16      	ldr	r7, [sp, #88]	; 0x58
    d136:	4606      	mov	r6, r0
	if (err) {
    d138:	460a      	mov	r2, r1
    d13a:	b131      	cbz	r1, d14a <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    d13c:	687b      	ldr	r3, [r7, #4]
    d13e:	463a      	mov	r2, r7
    d140:	2100      	movs	r1, #0
}
    d142:	b00e      	add	sp, #56	; 0x38
    d144:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		params->func(conn, NULL, params);
    d148:	4718      	bx	r3
	switch (rsp->len) {
    d14a:	f898 1000 	ldrb.w	r1, [r8]
    d14e:	2906      	cmp	r1, #6
    d150:	d014      	beq.n	d17c <gatt_read_group_rsp+0x50>
    d152:	2914      	cmp	r1, #20
    d154:	d011      	beq.n	d17a <gatt_read_group_rsp+0x4e>
    d156:	4a3a      	ldr	r2, [pc, #232]	; (d240 <gatt_read_group_rsp+0x114>)
    d158:	4b3a      	ldr	r3, [pc, #232]	; (d244 <gatt_read_group_rsp+0x118>)
		BT_ERR("Invalid data len %u", rsp->len);
    d15a:	483b      	ldr	r0, [pc, #236]	; (d248 <gatt_read_group_rsp+0x11c>)
    d15c:	1ad2      	subs	r2, r2, r3
    d15e:	08d2      	lsrs	r2, r2, #3
    d160:	0192      	lsls	r2, r2, #6
    d162:	f042 0201 	orr.w	r2, r2, #1
    d166:	f013 ffa0 	bl	210aa <log_1>
	params->func(conn, NULL, params);
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	463a      	mov	r2, r7
    d16e:	2100      	movs	r1, #0
    d170:	4630      	mov	r0, r6
    d172:	4798      	blx	r3
}
    d174:	b00e      	add	sp, #56	; 0x38
    d176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		u.uuid.type = BT_UUID_TYPE_128;
    d17a:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    d17c:	3b01      	subs	r3, #1
	uint16_t start_handle, end_handle = 0U;
    d17e:	2500      	movs	r5, #0
		u.uuid.type = BT_UUID_TYPE_128;
    d180:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d184:	b29c      	uxth	r4, r3
    d186:	f108 0901 	add.w	r9, r8, #1
		struct bt_gatt_attr attr = {};
    d18a:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
    d18c:	f898 3000 	ldrb.w	r3, [r8]
    d190:	42a3      	cmp	r3, r4
    d192:	d90b      	bls.n	d1ac <gatt_read_group_rsp+0x80>
	if (length == 0U && end_handle) {
    d194:	2c00      	cmp	r4, #0
    d196:	d1e8      	bne.n	d16a <gatt_read_group_rsp+0x3e>
    d198:	2d00      	cmp	r5, #0
    d19a:	d0e6      	beq.n	d16a <gatt_read_group_rsp+0x3e>
	gatt_discover_next(conn, handle, params);
    d19c:	463a      	mov	r2, r7
    d19e:	4629      	mov	r1, r5
    d1a0:	4630      	mov	r0, r6
}
    d1a2:	b00e      	add	sp, #56	; 0x38
    d1a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, handle, params);
    d1a8:	f017 b8c6 	b.w	24338 <gatt_discover_next>
		struct bt_gatt_attr attr = {};
    d1ac:	2214      	movs	r2, #20
    d1ae:	2100      	movs	r1, #0
    d1b0:	a809      	add	r0, sp, #36	; 0x24
    d1b2:	f019 f87e 	bl	262b2 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    d1b6:	f8b9 2000 	ldrh.w	r2, [r9]
    d1ba:	b293      	uxth	r3, r2
		if (!start_handle) {
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d0d4      	beq.n	d16a <gatt_read_group_rsp+0x3e>
		end_handle = sys_le16_to_cpu(data->end_handle);
    d1c0:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    d1c4:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
    d1c6:	2d00      	cmp	r5, #0
    d1c8:	d0cf      	beq.n	d16a <gatt_read_group_rsp+0x3e>
    d1ca:	42ab      	cmp	r3, r5
    d1cc:	d8cd      	bhi.n	d16a <gatt_read_group_rsp+0x3e>
		switch (u.uuid.type) {
    d1ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
    d1d2:	b31b      	cbz	r3, d21c <gatt_read_group_rsp+0xf0>
    d1d4:	2b02      	cmp	r3, #2
    d1d6:	d026      	beq.n	d226 <gatt_read_group_rsp+0xfa>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    d1d8:	7c3b      	ldrb	r3, [r7, #16]
		value.end_handle = end_handle;
    d1da:	f8ad 100c 	strh.w	r1, [sp, #12]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
    d1de:	2b00      	cmp	r3, #0
    d1e0:	f642 0301 	movw	r3, #10241	; 0x2801
    d1e4:	bf08      	it	eq
    d1e6:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    d1ea:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    d1ee:	ab04      	add	r3, sp, #16
    d1f0:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    d1f2:	ab01      	add	r3, sp, #4
    d1f4:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    d1f6:	ab02      	add	r3, sp, #8
		attr.handle = start_handle;
    d1f8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		attr.user_data = &value;
    d1fc:	930c      	str	r3, [sp, #48]	; 0x30
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    d1fe:	f88d a004 	strb.w	sl, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d202:	687b      	ldr	r3, [r7, #4]
    d204:	463a      	mov	r2, r7
    d206:	a909      	add	r1, sp, #36	; 0x24
    d208:	4630      	mov	r0, r6
    d20a:	4798      	blx	r3
    d20c:	2800      	cmp	r0, #0
    d20e:	d0b1      	beq.n	d174 <gatt_read_group_rsp+0x48>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d210:	f898 2000 	ldrb.w	r2, [r8]
    d214:	1aa4      	subs	r4, r4, r2
    d216:	b2a4      	uxth	r4, r4
    d218:	4491      	add	r9, r2
    d21a:	e7b7      	b.n	d18c <gatt_read_group_rsp+0x60>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    d21c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    d220:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    d224:	e7d8      	b.n	d1d8 <gatt_read_group_rsp+0xac>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    d226:	f109 0304 	add.w	r3, r9, #4
    d22a:	f10d 0011 	add.w	r0, sp, #17
    d22e:	f109 0c14 	add.w	ip, r9, #20
    d232:	f853 eb04 	ldr.w	lr, [r3], #4
    d236:	f840 eb04 	str.w	lr, [r0], #4
    d23a:	4563      	cmp	r3, ip
    d23c:	d1f9      	bne.n	d232 <gatt_read_group_rsp+0x106>
    d23e:	e7cb      	b.n	d1d8 <gatt_read_group_rsp+0xac>
    d240:	00026910 	.word	0x00026910
    d244:	00026828 	.word	0x00026828
    d248:	0002a0d0 	.word	0x0002a0d0

0000d24c <gatt_read_type_rsp>:
{
    d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d250:	b091      	sub	sp, #68	; 0x44
    d252:	4690      	mov	r8, r2
    d254:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    d256:	4607      	mov	r7, r0
	if (err) {
    d258:	460a      	mov	r2, r1
    d25a:	b131      	cbz	r1, d26a <gatt_read_type_rsp+0x1e>
		params->func(conn, NULL, params);
    d25c:	686b      	ldr	r3, [r5, #4]
    d25e:	462a      	mov	r2, r5
    d260:	2100      	movs	r1, #0
}
    d262:	b011      	add	sp, #68	; 0x44
    d264:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
    d268:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    d26a:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
    d26c:	f898 1000 	ldrb.w	r1, [r8]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    d270:	2802      	cmp	r0, #2
    d272:	f040 8089 	bne.w	d388 <gatt_read_type_rsp+0x13c>
	switch (rsp->len) {
    d276:	2906      	cmp	r1, #6
    d278:	d01c      	beq.n	d2b4 <gatt_read_type_rsp+0x68>
    d27a:	2908      	cmp	r1, #8
    d27c:	f040 8088 	bne.w	d390 <gatt_read_type_rsp+0x144>
		u.uuid.type = BT_UUID_TYPE_16;
    d280:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d284:	1e5c      	subs	r4, r3, #1
    d286:	b2a4      	uxth	r4, r4
    d288:	f108 0901 	add.w	r9, r8, #1
	uint16_t handle = 0U;
    d28c:	2600      	movs	r6, #0
			value.uuid = &u.uuid;
    d28e:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
    d292:	f898 3000 	ldrb.w	r3, [r8]
    d296:	42a3      	cmp	r3, r4
    d298:	d90f      	bls.n	d2ba <gatt_read_type_rsp+0x6e>
	if (length == 0U && handle) {
    d29a:	2c00      	cmp	r4, #0
    d29c:	f040 8082 	bne.w	d3a4 <gatt_read_type_rsp+0x158>
    d2a0:	2e00      	cmp	r6, #0
    d2a2:	d07f      	beq.n	d3a4 <gatt_read_type_rsp+0x158>
	gatt_discover_next(conn, handle, params);
    d2a4:	462a      	mov	r2, r5
    d2a6:	4631      	mov	r1, r6
    d2a8:	4638      	mov	r0, r7
}
    d2aa:	b011      	add	sp, #68	; 0x44
    d2ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
    d2b0:	f017 b842 	b.w	24338 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
    d2b4:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
    d2b8:	e7e4      	b.n	d284 <gatt_read_type_rsp+0x38>
		handle = sys_le16_to_cpu(data->handle);
    d2ba:	f8b9 b000 	ldrh.w	fp, [r9]
    d2be:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
    d2c2:	2e00      	cmp	r6, #0
    d2c4:	d06e      	beq.n	d3a4 <gatt_read_type_rsp+0x158>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    d2c6:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    d2ca:	f8ad 3014 	strh.w	r3, [sp, #20]
    d2ce:	b298      	uxth	r0, r3
		switch (u.uuid.type) {
    d2d0:	f89d 2018 	ldrb.w	r2, [sp, #24]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    d2d4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    d2d8:	f8ad 3016 	strh.w	r3, [sp, #22]
    d2dc:	b299      	uxth	r1, r3
		switch (u.uuid.type) {
    d2de:	b172      	cbz	r2, d2fe <gatt_read_type_rsp+0xb2>
    d2e0:	2a02      	cmp	r2, #2
    d2e2:	d017      	beq.n	d314 <gatt_read_type_rsp+0xc8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d2e4:	6829      	ldr	r1, [r5, #0]
    d2e6:	2900      	cmp	r1, #0
    d2e8:	d034      	beq.n	d354 <gatt_read_type_rsp+0x108>
    d2ea:	4650      	mov	r0, sl
    d2ec:	f015 fc72 	bl	22bd4 <bt_uuid_cmp>
    d2f0:	b380      	cbz	r0, d354 <gatt_read_type_rsp+0x108>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d2f2:	f898 2000 	ldrb.w	r2, [r8]
    d2f6:	1aa4      	subs	r4, r4, r2
    d2f8:	b2a4      	uxth	r4, r4
    d2fa:	4491      	add	r9, r2
    d2fc:	e7c9      	b.n	d292 <gatt_read_type_rsp+0x46>
			value.uuid = &u.uuid;
    d2fe:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    d302:	f899 3006 	ldrb.w	r3, [r9, #6]
    d306:	f899 2007 	ldrb.w	r2, [r9, #7]
    d30a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d30e:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    d312:	e7e7      	b.n	d2e4 <gatt_read_type_rsp+0x98>
			params->_included.start_handle = value.start_handle;
    d314:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
    d316:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
    d318:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    d31a:	210a      	movs	r1, #10
    d31c:	4638      	mov	r0, r7
    d31e:	9201      	str	r2, [sp, #4]
    d320:	f7fe fbe4 	bl	baec <bt_att_create_pdu>
	if (!buf) {
    d324:	4604      	mov	r4, r0
    d326:	b190      	cbz	r0, d34e <gatt_read_type_rsp+0x102>
	req = net_buf_add(buf, sizeof(*req));
    d328:	9a01      	ldr	r2, [sp, #4]
    d32a:	3008      	adds	r0, #8
    d32c:	4611      	mov	r1, r2
    d32e:	f018 f8ac 	bl	2548a <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    d332:	896b      	ldrh	r3, [r5, #10]
    d334:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    d336:	4a51      	ldr	r2, [pc, #324]	; (d47c <gatt_read_type_rsp+0x230>)
    d338:	462b      	mov	r3, r5
    d33a:	4621      	mov	r1, r4
    d33c:	4638      	mov	r0, r7
    d33e:	f7ff f8db 	bl	c4f8 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    d342:	b286      	uxth	r6, r0
	if (!handle) {
    d344:	2e00      	cmp	r6, #0
    d346:	d1ad      	bne.n	d2a4 <gatt_read_type_rsp+0x58>
}
    d348:	b011      	add	sp, #68	; 0x44
    d34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    d34e:	f06f 000b 	mvn.w	r0, #11
    d352:	e7f6      	b.n	d342 <gatt_read_type_rsp+0xf6>
		attr = (&(struct bt_gatt_attr) {
    d354:	2210      	movs	r2, #16
    d356:	2100      	movs	r1, #0
    d358:	a80c      	add	r0, sp, #48	; 0x30
    d35a:	f018 ffaa 	bl	262b2 <memset>
			.uuid = BT_UUID_GATT_INCLUDE,
    d35e:	2300      	movs	r3, #0
    d360:	f88d 300c 	strb.w	r3, [sp, #12]
    d364:	f642 0302 	movw	r3, #10242	; 0x2802
    d368:	f8ad 300e 	strh.w	r3, [sp, #14]
		attr = (&(struct bt_gatt_attr) {
    d36c:	ab03      	add	r3, sp, #12
    d36e:	930b      	str	r3, [sp, #44]	; 0x2c
    d370:	ab04      	add	r3, sp, #16
    d372:	930e      	str	r3, [sp, #56]	; 0x38
		attr->handle = handle;
    d374:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    d378:	686b      	ldr	r3, [r5, #4]
    d37a:	462a      	mov	r2, r5
    d37c:	a90b      	add	r1, sp, #44	; 0x2c
    d37e:	4638      	mov	r0, r7
    d380:	4798      	blx	r3
    d382:	2800      	cmp	r0, #0
    d384:	d1b5      	bne.n	d2f2 <gatt_read_type_rsp+0xa6>
    d386:	e7df      	b.n	d348 <gatt_read_type_rsp+0xfc>
	switch (rsp->len) {
    d388:	2907      	cmp	r1, #7
    d38a:	d012      	beq.n	d3b2 <gatt_read_type_rsp+0x166>
    d38c:	2915      	cmp	r1, #21
    d38e:	d00f      	beq.n	d3b0 <gatt_read_type_rsp+0x164>
    d390:	4a3b      	ldr	r2, [pc, #236]	; (d480 <gatt_read_type_rsp+0x234>)
    d392:	4b3c      	ldr	r3, [pc, #240]	; (d484 <gatt_read_type_rsp+0x238>)
		BT_ERR("Invalid data len %u", rsp->len);
    d394:	483c      	ldr	r0, [pc, #240]	; (d488 <gatt_read_type_rsp+0x23c>)
    d396:	1ad2      	subs	r2, r2, r3
    d398:	08d2      	lsrs	r2, r2, #3
    d39a:	0192      	lsls	r2, r2, #6
    d39c:	f042 0201 	orr.w	r2, r2, #1
    d3a0:	f013 fe83 	bl	210aa <log_1>
	params->func(conn, NULL, params);
    d3a4:	686b      	ldr	r3, [r5, #4]
    d3a6:	462a      	mov	r2, r5
    d3a8:	2100      	movs	r1, #0
    d3aa:	4638      	mov	r0, r7
    d3ac:	4798      	blx	r3
	if (!handle) {
    d3ae:	e7cb      	b.n	d348 <gatt_read_type_rsp+0xfc>
		u.uuid.type = BT_UUID_TYPE_128;
    d3b0:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    d3b2:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    d3b4:	2600      	movs	r6, #0
		u.uuid.type = BT_UUID_TYPE_128;
    d3b6:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d3ba:	b2a4      	uxth	r4, r4
    d3bc:	f108 0b01 	add.w	fp, r8, #1
    d3c0:	f10d 0918 	add.w	r9, sp, #24
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    d3c4:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    d3c6:	f898 3000 	ldrb.w	r3, [r8]
    d3ca:	42a3      	cmp	r3, r4
    d3cc:	f63f af65 	bhi.w	d29a <gatt_read_type_rsp+0x4e>
		handle = sys_le16_to_cpu(data->handle);
    d3d0:	f8bb 3000 	ldrh.w	r3, [fp]
    d3d4:	b29e      	uxth	r6, r3
		if (!handle) {
    d3d6:	2e00      	cmp	r6, #0
    d3d8:	d0e4      	beq.n	d3a4 <gatt_read_type_rsp+0x158>
		switch (u.uuid.type) {
    d3da:	f89d 2018 	ldrb.w	r2, [sp, #24]
    d3de:	b17a      	cbz	r2, d400 <gatt_read_type_rsp+0x1b4>
    d3e0:	2a02      	cmp	r2, #2
    d3e2:	d016      	beq.n	d412 <gatt_read_type_rsp+0x1c6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d3e4:	6829      	ldr	r1, [r5, #0]
    d3e6:	b309      	cbz	r1, d42c <gatt_read_type_rsp+0x1e0>
    d3e8:	4648      	mov	r0, r9
    d3ea:	9301      	str	r3, [sp, #4]
    d3ec:	f015 fbf2 	bl	22bd4 <bt_uuid_cmp>
    d3f0:	9b01      	ldr	r3, [sp, #4]
    d3f2:	b1d8      	cbz	r0, d42c <gatt_read_type_rsp+0x1e0>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d3f4:	f898 2000 	ldrb.w	r2, [r8]
    d3f8:	1aa4      	subs	r4, r4, r2
    d3fa:	b2a4      	uxth	r4, r4
    d3fc:	4493      	add	fp, r2
    d3fe:	e7e2      	b.n	d3c6 <gatt_read_type_rsp+0x17a>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    d400:	f89b 2005 	ldrb.w	r2, [fp, #5]
    d404:	f89b 1006 	ldrb.w	r1, [fp, #6]
    d408:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d40c:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    d410:	e7e8      	b.n	d3e4 <gatt_read_type_rsp+0x198>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    d412:	f10b 0205 	add.w	r2, fp, #5
    d416:	f10d 0119 	add.w	r1, sp, #25
    d41a:	f10b 0015 	add.w	r0, fp, #21
    d41e:	f852 cb04 	ldr.w	ip, [r2], #4
    d422:	f841 cb04 	str.w	ip, [r1], #4
    d426:	4282      	cmp	r2, r0
    d428:	d1f9      	bne.n	d41e <gatt_read_type_rsp+0x1d2>
    d42a:	e7db      	b.n	d3e4 <gatt_read_type_rsp+0x198>
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    d42c:	f642 0203 	movw	r2, #10243	; 0x2803
    d430:	f8ad 200e 	strh.w	r2, [sp, #14]
    d434:	aa03      	add	r2, sp, #12
    d436:	920b      	str	r2, [sp, #44]	; 0x2c
    d438:	4a14      	ldr	r2, [pc, #80]	; (d48c <gatt_read_type_rsp+0x240>)
    d43a:	f88d a00c 	strb.w	sl, [sp, #12]
    d43e:	e9cd 2a0c 	strd	r2, sl, [sp, #48]	; 0x30
    d442:	f8cd 9010 	str.w	r9, [sp, #16]
    d446:	f89b 1004 	ldrb.w	r1, [fp, #4]
    d44a:	f89b 2003 	ldrb.w	r2, [fp, #3]
		attr->handle = handle;
    d44e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		attr = (&(struct bt_gatt_attr)BT_GATT_CHRC(&u.uuid,
    d452:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d456:	f8ad 2014 	strh.w	r2, [sp, #20]
    d45a:	f89b 2002 	ldrb.w	r2, [fp, #2]
    d45e:	f88d 2016 	strb.w	r2, [sp, #22]
    d462:	aa04      	add	r2, sp, #16
    d464:	920e      	str	r2, [sp, #56]	; 0x38
    d466:	2201      	movs	r2, #1
    d468:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    d46c:	686b      	ldr	r3, [r5, #4]
    d46e:	462a      	mov	r2, r5
    d470:	a90b      	add	r1, sp, #44	; 0x2c
    d472:	4638      	mov	r0, r7
    d474:	4798      	blx	r3
    d476:	2800      	cmp	r0, #0
    d478:	d1bc      	bne.n	d3f4 <gatt_read_type_rsp+0x1a8>
    d47a:	e765      	b.n	d348 <gatt_read_type_rsp+0xfc>
    d47c:	0000d491 	.word	0x0000d491
    d480:	00026910 	.word	0x00026910
    d484:	00026828 	.word	0x00026828
    d488:	0002a0d0 	.word	0x0002a0d0
    d48c:	00024275 	.word	0x00024275

0000d490 <read_included_uuid_cb>:
{
    d490:	b570      	push	{r4, r5, r6, lr}
    d492:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    d494:	2b10      	cmp	r3, #16
{
    d496:	9c12      	ldr	r4, [sp, #72]	; 0x48
    d498:	4605      	mov	r5, r0
    d49a:	4619      	mov	r1, r3
	if (length != 16U) {
    d49c:	d011      	beq.n	d4c2 <read_included_uuid_cb+0x32>
    d49e:	4b27      	ldr	r3, [pc, #156]	; (d53c <read_included_uuid_cb+0xac>)
    d4a0:	4a27      	ldr	r2, [pc, #156]	; (d540 <read_included_uuid_cb+0xb0>)
		BT_ERR("Invalid data len %u", length);
    d4a2:	4828      	ldr	r0, [pc, #160]	; (d544 <read_included_uuid_cb+0xb4>)
    d4a4:	1ad2      	subs	r2, r2, r3
    d4a6:	08d2      	lsrs	r2, r2, #3
    d4a8:	0192      	lsls	r2, r2, #6
    d4aa:	f042 0201 	orr.w	r2, r2, #1
    d4ae:	f013 fdfc 	bl	210aa <log_1>
		params->func(conn, NULL, params);
    d4b2:	6863      	ldr	r3, [r4, #4]
    d4b4:	4622      	mov	r2, r4
    d4b6:	2100      	movs	r1, #0
    d4b8:	4628      	mov	r0, r5
}
    d4ba:	b00e      	add	sp, #56	; 0x38
    d4bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
    d4c0:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
    d4c2:	8963      	ldrh	r3, [r4, #10]
    d4c4:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
    d4c8:	89a3      	ldrh	r3, [r4, #12]
    d4ca:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
    d4ce:	a804      	add	r0, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
    d4d0:	2302      	movs	r3, #2
    d4d2:	f88d 3010 	strb.w	r3, [sp, #16]
	value.uuid = &u.uuid;
    d4d6:	9002      	str	r0, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    d4d8:	f10d 0311 	add.w	r3, sp, #17
    d4dc:	f102 0110 	add.w	r1, r2, #16
    d4e0:	f852 6b04 	ldr.w	r6, [r2], #4
    d4e4:	f843 6b04 	str.w	r6, [r3], #4
    d4e8:	428a      	cmp	r2, r1
    d4ea:	d1f9      	bne.n	d4e0 <read_included_uuid_cb+0x50>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d4ec:	6821      	ldr	r1, [r4, #0]
    d4ee:	b9d1      	cbnz	r1, d526 <read_included_uuid_cb+0x96>
	attr = (&(struct bt_gatt_attr) {
    d4f0:	2210      	movs	r2, #16
    d4f2:	2100      	movs	r1, #0
    d4f4:	a80a      	add	r0, sp, #40	; 0x28
    d4f6:	f018 fedc 	bl	262b2 <memset>
		.uuid = BT_UUID_GATT_INCLUDE,
    d4fa:	2300      	movs	r3, #0
    d4fc:	f88d 3004 	strb.w	r3, [sp, #4]
    d500:	f642 0302 	movw	r3, #10242	; 0x2802
    d504:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (&(struct bt_gatt_attr) {
    d508:	ab01      	add	r3, sp, #4
    d50a:	9309      	str	r3, [sp, #36]	; 0x24
    d50c:	ab02      	add	r3, sp, #8
    d50e:	930c      	str	r3, [sp, #48]	; 0x30
	attr->handle = params->_included.attr_handle;
    d510:	8923      	ldrh	r3, [r4, #8]
    d512:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    d516:	4622      	mov	r2, r4
    d518:	6863      	ldr	r3, [r4, #4]
    d51a:	a909      	add	r1, sp, #36	; 0x24
    d51c:	4628      	mov	r0, r5
    d51e:	4798      	blx	r3
    d520:	b928      	cbnz	r0, d52e <read_included_uuid_cb+0x9e>
}
    d522:	b00e      	add	sp, #56	; 0x38
    d524:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d526:	f015 fb55 	bl	22bd4 <bt_uuid_cmp>
    d52a:	2800      	cmp	r0, #0
    d52c:	d0e0      	beq.n	d4f0 <read_included_uuid_cb+0x60>
	gatt_discover_next(conn, params->start_handle, params);
    d52e:	8921      	ldrh	r1, [r4, #8]
    d530:	4622      	mov	r2, r4
    d532:	4628      	mov	r0, r5
    d534:	f016 ff00 	bl	24338 <gatt_discover_next>
	return;
    d538:	e7f3      	b.n	d522 <read_included_uuid_cb+0x92>
    d53a:	bf00      	nop
    d53c:	00026828 	.word	0x00026828
    d540:	00026910 	.word	0x00026910
    d544:	0002a0d0 	.word	0x0002a0d0

0000d548 <gatt_find_info_rsp>:
{
    d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d54c:	b08f      	sub	sp, #60	; 0x3c
    d54e:	4680      	mov	r8, r0
    d550:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    d552:	4608      	mov	r0, r1
    d554:	b971      	cbnz	r1, d574 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
    d556:	7811      	ldrb	r1, [r2, #0]
    d558:	2901      	cmp	r1, #1
    d55a:	d011      	beq.n	d580 <gatt_find_info_rsp+0x38>
    d55c:	2902      	cmp	r1, #2
    d55e:	d028      	beq.n	d5b2 <gatt_find_info_rsp+0x6a>
    d560:	4a51      	ldr	r2, [pc, #324]	; (d6a8 <gatt_find_info_rsp+0x160>)
    d562:	4b52      	ldr	r3, [pc, #328]	; (d6ac <gatt_find_info_rsp+0x164>)
		BT_ERR("Invalid format %u", rsp->format);
    d564:	4852      	ldr	r0, [pc, #328]	; (d6b0 <gatt_find_info_rsp+0x168>)
    d566:	1ad2      	subs	r2, r2, r3
    d568:	08d2      	lsrs	r2, r2, #3
    d56a:	0192      	lsls	r2, r2, #6
    d56c:	f042 0201 	orr.w	r2, r2, #1
    d570:	f013 fd9b 	bl	210aa <log_1>
	params->func(conn, NULL, params);
    d574:	6873      	ldr	r3, [r6, #4]
    d576:	4632      	mov	r2, r6
    d578:	2100      	movs	r1, #0
    d57a:	4640      	mov	r0, r8
    d57c:	4798      	blx	r3
    d57e:	e08f      	b.n	d6a0 <gatt_find_info_rsp+0x158>
		u.uuid.type = BT_UUID_TYPE_16;
    d580:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
    d584:	f04f 0a04 	mov.w	sl, #4
	length--;
    d588:	3b01      	subs	r3, #1
    d58a:	b29b      	uxth	r3, r3
	if (length < len) {
    d58c:	4553      	cmp	r3, sl
    d58e:	d3f1      	bcc.n	d574 <gatt_find_info_rsp+0x2c>
	for (i = length / len, pdu = rsp->info; i != 0;
    d590:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    d594:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    d598:	9300      	str	r3, [sp, #0]
    d59a:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    d59c:	46cb      	mov	fp, r9
			skip = false;
    d59e:	464d      	mov	r5, r9
    d5a0:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
    d5a2:	9b00      	ldr	r3, [sp, #0]
    d5a4:	b953      	cbnz	r3, d5bc <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
    d5a6:	4632      	mov	r2, r6
    d5a8:	4659      	mov	r1, fp
    d5aa:	4640      	mov	r0, r8
    d5ac:	f016 fec4 	bl	24338 <gatt_discover_next>
	return;
    d5b0:	e076      	b.n	d6a0 <gatt_find_info_rsp+0x158>
		u.uuid.type = BT_UUID_TYPE_128;
    d5b2:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
    d5b6:	f04f 0a12 	mov.w	sl, #18
		break;
    d5ba:	e7e5      	b.n	d588 <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
    d5bc:	8823      	ldrh	r3, [r4, #0]
    d5be:	9301      	str	r3, [sp, #4]
    d5c0:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
    d5c4:	f1b9 0f00 	cmp.w	r9, #0
    d5c8:	d156      	bne.n	d678 <gatt_find_info_rsp+0x130>
		switch (u.uuid.type) {
    d5ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d03a      	beq.n	d648 <gatt_find_info_rsp+0x100>
    d5d2:	2b02      	cmp	r3, #2
    d5d4:	d03f      	beq.n	d656 <gatt_find_info_rsp+0x10e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d5d6:	6831      	ldr	r1, [r6, #0]
    d5d8:	2900      	cmp	r1, #0
    d5da:	d148      	bne.n	d66e <gatt_find_info_rsp+0x126>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    d5dc:	7c33      	ldrb	r3, [r6, #16]
    d5de:	2b04      	cmp	r3, #4
    d5e0:	d14d      	bne.n	d67e <gatt_find_info_rsp+0x136>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    d5e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d5e6:	a902      	add	r1, sp, #8
    d5e8:	4638      	mov	r0, r7
    d5ea:	f88d 5008 	strb.w	r5, [sp, #8]
    d5ee:	f8ad 300a 	strh.w	r3, [sp, #10]
    d5f2:	f015 faef 	bl	22bd4 <bt_uuid_cmp>
    d5f6:	b310      	cbz	r0, d63e <gatt_find_info_rsp+0xf6>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    d5f8:	f642 0301 	movw	r3, #10241	; 0x2801
    d5fc:	a903      	add	r1, sp, #12
    d5fe:	4638      	mov	r0, r7
    d600:	f88d 500c 	strb.w	r5, [sp, #12]
    d604:	f8ad 300e 	strh.w	r3, [sp, #14]
    d608:	f015 fae4 	bl	22bd4 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    d60c:	b1b8      	cbz	r0, d63e <gatt_find_info_rsp+0xf6>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    d60e:	f642 0302 	movw	r3, #10242	; 0x2802
    d612:	a909      	add	r1, sp, #36	; 0x24
    d614:	4638      	mov	r0, r7
    d616:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    d61a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    d61e:	f015 fad9 	bl	22bd4 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    d622:	b160      	cbz	r0, d63e <gatt_find_info_rsp+0xf6>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    d624:	f642 0303 	movw	r3, #10243	; 0x2803
    d628:	a909      	add	r1, sp, #36	; 0x24
    d62a:	4638      	mov	r0, r7
    d62c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    d630:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    d634:	f015 face 	bl	22bd4 <bt_uuid_cmp>
    d638:	bb08      	cbnz	r0, d67e <gatt_find_info_rsp+0x136>
				skip = true;
    d63a:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    d63e:	9b00      	ldr	r3, [sp, #0]
    d640:	3b01      	subs	r3, #1
    d642:	9300      	str	r3, [sp, #0]
    d644:	4454      	add	r4, sl
    d646:	e7ac      	b.n	d5a2 <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    d648:	78a3      	ldrb	r3, [r4, #2]
    d64a:	78e2      	ldrb	r2, [r4, #3]
    d64c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d650:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    d654:	e7bf      	b.n	d5d6 <gatt_find_info_rsp+0x8e>
			memcpy(u.u128.val, info.i128->uuid, 16);
    d656:	1ca3      	adds	r3, r4, #2
    d658:	f10d 0211 	add.w	r2, sp, #17
    d65c:	f104 0112 	add.w	r1, r4, #18
    d660:	f853 0b04 	ldr.w	r0, [r3], #4
    d664:	f842 0b04 	str.w	r0, [r2], #4
    d668:	428b      	cmp	r3, r1
    d66a:	d1f9      	bne.n	d660 <gatt_find_info_rsp+0x118>
    d66c:	e7b3      	b.n	d5d6 <gatt_find_info_rsp+0x8e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d66e:	4638      	mov	r0, r7
    d670:	f015 fab0 	bl	22bd4 <bt_uuid_cmp>
    d674:	2800      	cmp	r0, #0
    d676:	d0b1      	beq.n	d5dc <gatt_find_info_rsp+0x94>
			skip = false;
    d678:	f04f 0900 	mov.w	r9, #0
    d67c:	e7df      	b.n	d63e <gatt_find_info_rsp+0xf6>
		attr->handle = handle;
    d67e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d682:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    d686:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    d68a:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    d68e:	6873      	ldr	r3, [r6, #4]
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    d690:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    d694:	4632      	mov	r2, r6
    d696:	a909      	add	r1, sp, #36	; 0x24
    d698:	4640      	mov	r0, r8
    d69a:	4798      	blx	r3
    d69c:	2800      	cmp	r0, #0
    d69e:	d1ce      	bne.n	d63e <gatt_find_info_rsp+0xf6>
}
    d6a0:	b00f      	add	sp, #60	; 0x3c
    d6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6a6:	bf00      	nop
    d6a8:	00026910 	.word	0x00026910
    d6ac:	00026828 	.word	0x00026828
    d6b0:	0002a0e4 	.word	0x0002a0e4

0000d6b4 <bt_gatt_mult_notification>:
{
    d6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6b8:	b085      	sub	sp, #20
    d6ba:	4682      	mov	sl, r0
    d6bc:	460c      	mov	r4, r1
    d6be:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    d6c0:	f7fe fe4c 	bl	c35c <gatt_sub_find>
	if (!sub) {
    d6c4:	4607      	mov	r7, r0
    d6c6:	b300      	cbz	r0, d70a <bt_gatt_mult_notification+0x56>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    d6c8:	4632      	mov	r2, r6
    d6ca:	4621      	mov	r1, r4
    d6cc:	a801      	add	r0, sp, #4
    d6ce:	f017 fe9f 	bl	25410 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    d6d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    d6d6:	2b04      	cmp	r3, #4
    d6d8:	d917      	bls.n	d70a <bt_gatt_mult_notification+0x56>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    d6da:	2104      	movs	r1, #4
    d6dc:	eb0d 0001 	add.w	r0, sp, r1
    d6e0:	f017 ff04 	bl	254ec <net_buf_simple_pull_mem>
		if (len > buf.len) {
    d6e4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
    d6e8:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    d6ec:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    d6ee:	4605      	mov	r5, r0
		if (len > buf.len) {
    d6f0:	d20e      	bcs.n	d710 <bt_gatt_mult_notification+0x5c>
    d6f2:	4a1c      	ldr	r2, [pc, #112]	; (d764 <bt_gatt_mult_notification+0xb0>)
    d6f4:	4b1c      	ldr	r3, [pc, #112]	; (d768 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
    d6f6:	481d      	ldr	r0, [pc, #116]	; (d76c <bt_gatt_mult_notification+0xb8>)
    d6f8:	1a9b      	subs	r3, r3, r2
    d6fa:	08db      	lsrs	r3, r3, #3
    d6fc:	019b      	lsls	r3, r3, #6
    d6fe:	f043 0301 	orr.w	r3, r3, #1
    d702:	4632      	mov	r2, r6
    d704:	4641      	mov	r1, r8
    d706:	f013 fce4 	bl	210d2 <log_2>
}
    d70a:	b005      	add	sp, #20
    d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
    d710:	68bb      	ldr	r3, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    d712:	b30b      	cbz	r3, d758 <bt_gatt_mult_notification+0xa4>
    d714:	f1b3 0914 	subs.w	r9, r3, #20
    d718:	d01e      	beq.n	d758 <bt_gatt_mult_notification+0xa4>
	return node->next;
    d71a:	681c      	ldr	r4, [r3, #0]
    d71c:	b104      	cbz	r4, d720 <bt_gatt_mult_notification+0x6c>
    d71e:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
    d720:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
    d724:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    d728:	455b      	cmp	r3, fp
    d72a:	d10b      	bne.n	d744 <bt_gatt_mult_notification+0x90>
			if (params->notify(conn, params, nfy->value, len) ==
    d72c:	f8d9 c000 	ldr.w	ip, [r9]
    d730:	4643      	mov	r3, r8
    d732:	462a      	mov	r2, r5
    d734:	4649      	mov	r1, r9
    d736:	4650      	mov	r0, sl
    d738:	47e0      	blx	ip
    d73a:	b918      	cbnz	r0, d744 <bt_gatt_mult_notification+0x90>
				bt_gatt_unsubscribe(conn, params);
    d73c:	4649      	mov	r1, r9
    d73e:	4650      	mov	r0, sl
    d740:	f016 febe 	bl	244c0 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    d744:	b144      	cbz	r4, d758 <bt_gatt_mult_notification+0xa4>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d746:	f114 0314 	adds.w	r3, r4, #20
    d74a:	d002      	beq.n	d752 <bt_gatt_mult_notification+0x9e>
	return node->next;
    d74c:	6963      	ldr	r3, [r4, #20]
    d74e:	b103      	cbz	r3, d752 <bt_gatt_mult_notification+0x9e>
    d750:	3b14      	subs	r3, #20
{
    d752:	46a1      	mov	r9, r4
    d754:	461c      	mov	r4, r3
    d756:	e7e5      	b.n	d724 <bt_gatt_mult_notification+0x70>
		net_buf_simple_pull_mem(&buf, len);
    d758:	4641      	mov	r1, r8
    d75a:	a801      	add	r0, sp, #4
    d75c:	f017 fec6 	bl	254ec <net_buf_simple_pull_mem>
    d760:	e7b7      	b.n	d6d2 <bt_gatt_mult_notification+0x1e>
    d762:	bf00      	nop
    d764:	00026828 	.word	0x00026828
    d768:	00026910 	.word	0x00026910
    d76c:	0002a0f6 	.word	0x0002a0f6

0000d770 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    d770:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d772:	4a1d      	ldr	r2, [pc, #116]	; (d7e8 <bt_gatt_connected+0x78>)
	data.conn = conn;
    d774:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d776:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    d77a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d77c:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    d77e:	2001      	movs	r0, #1
    d780:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d784:	f016 fda0 	bl	242c8 <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    d788:	4628      	mov	r0, r5
    d78a:	f015 fdbc 	bl	23306 <bt_conn_get_security>
    d78e:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    d792:	4288      	cmp	r0, r1
    d794:	d202      	bcs.n	d79c <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    d796:	4628      	mov	r0, r5
    d798:	f015 fd8d 	bl	232b6 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    d79c:	4628      	mov	r0, r5
    d79e:	f7fe fddd 	bl	c35c <gatt_sub_find>
	if (!sub) {
    d7a2:	b128      	cbz	r0, d7b0 <bt_gatt_connected+0x40>
	return list->head;
    d7a4:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    d7a6:	b11c      	cbz	r4, d7b0 <bt_gatt_connected+0x40>
    d7a8:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    d7aa:	f105 0688 	add.w	r6, r5, #136	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    d7ae:	b90c      	cbnz	r4, d7b4 <bt_gatt_connected+0x44>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    d7b0:	b002      	add	sp, #8
    d7b2:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    d7b4:	7a28      	ldrb	r0, [r5, #8]
    d7b6:	4631      	mov	r1, r6
    d7b8:	f015 fc45 	bl	23046 <bt_addr_le_is_bonded>
    d7bc:	b158      	cbz	r0, d7d6 <bt_gatt_connected+0x66>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d7be:	f104 0010 	add.w	r0, r4, #16
    d7c2:	f016 fbd2 	bl	23f6a <atomic_get>
    d7c6:	0783      	lsls	r3, r0, #30
    d7c8:	d405      	bmi.n	d7d6 <bt_gatt_connected+0x66>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    d7ca:	89a2      	ldrh	r2, [r4, #12]
    d7cc:	8961      	ldrh	r1, [r4, #10]
    d7ce:	4623      	mov	r3, r4
    d7d0:	4628      	mov	r0, r5
    d7d2:	f7ff f84b 	bl	c86c <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d7d6:	f114 0f14 	cmn.w	r4, #20
    d7da:	d0e9      	beq.n	d7b0 <bt_gatt_connected+0x40>
	return node->next;
    d7dc:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    d7de:	2c00      	cmp	r4, #0
    d7e0:	d0e6      	beq.n	d7b0 <bt_gatt_connected+0x40>
    d7e2:	3c14      	subs	r4, #20
    d7e4:	e7e3      	b.n	d7ae <bt_gatt_connected+0x3e>
    d7e6:	bf00      	nop
    d7e8:	0000ce11 	.word	0x0000ce11

0000d7ec <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    d7ec:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d7ee:	4a06      	ldr	r2, [pc, #24]	; (d808 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    d7f0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d7f2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    d7f4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d7f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    d7fa:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d7fe:	f016 fd63 	bl	242c8 <bt_gatt_foreach_attr>
}
    d802:	b003      	add	sp, #12
    d804:	f85d fb04 	ldr.w	pc, [sp], #4
    d808:	0000ce11 	.word	0x0000ce11

0000d80c <db_hash_read>:
{
    d80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d810:	4606      	mov	r6, r0
	err = k_delayed_work_cancel(&db_hash_work);
    d812:	480c      	ldr	r0, [pc, #48]	; (d844 <db_hash_read+0x38>)
{
    d814:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    d818:	4614      	mov	r4, r2
    d81a:	461d      	mov	r5, r3
	err = k_delayed_work_cancel(&db_hash_work);
    d81c:	f018 fb3f 	bl	25e9e <k_delayed_work_cancel>
	if (!err) {
    d820:	b908      	cbnz	r0, d826 <db_hash_read+0x1a>
		db_hash_gen(true);
    d822:	f7ff f98d 	bl	cb40 <db_hash_gen.constprop.0>
	bt_gatt_change_aware(conn, true);
    d826:	2101      	movs	r1, #1
    d828:	4630      	mov	r0, r6
    d82a:	f016 feeb 	bl	24604 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    d82e:	2310      	movs	r3, #16
    d830:	9306      	str	r3, [sp, #24]
    d832:	463a      	mov	r2, r7
    d834:	4629      	mov	r1, r5
    d836:	4620      	mov	r0, r4
    d838:	4b03      	ldr	r3, [pc, #12]	; (d848 <db_hash_read+0x3c>)
}
    d83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    d83e:	f016 bbc4 	b.w	23fca <bt_gatt_attr_read.constprop.0>
    d842:	bf00      	nop
    d844:	20001410 	.word	0x20001410
    d848:	20003baf 	.word	0x20003baf

0000d84c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    d84c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    d850:	4a32      	ldr	r2, [pc, #200]	; (d91c <bt_gatt_disconnected+0xd0>)
    d852:	4603      	mov	r3, r0
{
    d854:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    d856:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d85a:	2001      	movs	r0, #1
    d85c:	f016 fd34 	bl	242c8 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    d860:	4620      	mov	r0, r4
    d862:	f7fe fd7b 	bl	c35c <gatt_sub_find>
	if (!sub) {
    d866:	4606      	mov	r6, r0
    d868:	b398      	cbz	r0, d8d2 <bt_gatt_disconnected+0x86>
	return list->head;
    d86a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    d86c:	b38b      	cbz	r3, d8d2 <bt_gatt_disconnected+0x86>
    d86e:	f1b3 0b14 	subs.w	fp, r3, #20
    d872:	d02e      	beq.n	d8d2 <bt_gatt_disconnected+0x86>
	return node->next;
    d874:	681d      	ldr	r5, [r3, #0]
    d876:	b105      	cbz	r5, d87a <bt_gatt_disconnected+0x2e>
    d878:	3d14      	subs	r5, #20
{
    d87a:	2700      	movs	r7, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    d87c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    d880:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
    d884:	46ba      	mov	sl, r7
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    d886:	7a20      	ldrb	r0, [r4, #8]
    d888:	4641      	mov	r1, r8
    d88a:	f015 fbdc 	bl	23046 <bt_addr_le_is_bonded>
    d88e:	b988      	cbnz	r0, d8b4 <bt_gatt_disconnected+0x68>
			params->value = 0U;
    d890:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
    d894:	465b      	mov	r3, fp
    d896:	463a      	mov	r2, r7
    d898:	4631      	mov	r1, r6
    d89a:	4620      	mov	r0, r4
    d89c:	f016 fc79 	bl	24192 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    d8a0:	b1bd      	cbz	r5, d8d2 <bt_gatt_disconnected+0x86>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d8a2:	f115 0214 	adds.w	r2, r5, #20
    d8a6:	d002      	beq.n	d8ae <bt_gatt_disconnected+0x62>
	return node->next;
    d8a8:	696a      	ldr	r2, [r5, #20]
    d8aa:	b102      	cbz	r2, d8ae <bt_gatt_disconnected+0x62>
    d8ac:	3a14      	subs	r2, #20
{
    d8ae:	46ab      	mov	fp, r5
    d8b0:	4615      	mov	r5, r2
    d8b2:	e7e8      	b.n	d886 <bt_gatt_disconnected+0x3a>
    d8b4:	f10b 0010 	add.w	r0, fp, #16
    d8b8:	f016 fb57 	bl	23f6a <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    d8bc:	07c3      	lsls	r3, r0, #31
    d8be:	d4e7      	bmi.n	d890 <bt_gatt_disconnected+0x44>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    d8c0:	7873      	ldrb	r3, [r6, #1]
    d8c2:	b11b      	cbz	r3, d8cc <bt_gatt_disconnected+0x80>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    d8c4:	4641      	mov	r1, r8
    d8c6:	4648      	mov	r0, r9
    d8c8:	f016 fb55 	bl	23f76 <bt_addr_le_copy>
			prev = &params->node;
    d8cc:	f10b 0714 	add.w	r7, fp, #20
    d8d0:	e7e6      	b.n	d8a0 <bt_gatt_disconnected+0x54>
	cfg = find_cf_cfg(conn);
    d8d2:	4620      	mov	r0, r4
    d8d4:	f7fe fcf4 	bl	c2c0 <find_cf_cfg>
	if (!cfg) {
    d8d8:	4605      	mov	r5, r0
    d8da:	b1e0      	cbz	r0, d916 <bt_gatt_disconnected+0xca>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d8dc:	f104 0688 	add.w	r6, r4, #136	; 0x88
    d8e0:	7a20      	ldrb	r0, [r4, #8]
    d8e2:	4631      	mov	r1, r6
    d8e4:	f015 fbaf 	bl	23046 <bt_addr_le_is_bonded>
    d8e8:	b920      	cbnz	r0, d8f4 <bt_gatt_disconnected+0xa8>
		clear_cf_cfg(cfg);
    d8ea:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    d8ec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    d8f0:	f016 bc0b 	b.w	2410a <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d8f4:	1c68      	adds	r0, r5, #1
    d8f6:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d8f8:	350c      	adds	r5, #12
    d8fa:	f016 fb3c 	bl	23f76 <bt_addr_le_copy>
    d8fe:	f3bf 8f5b 	dmb	ish
    d902:	e855 3f00 	ldrex	r3, [r5]
    d906:	f023 0302 	bic.w	r3, r3, #2
    d90a:	e845 3200 	strex	r2, r3, [r5]
    d90e:	2a00      	cmp	r2, #0
    d910:	d1f7      	bne.n	d902 <bt_gatt_disconnected+0xb6>
    d912:	f3bf 8f5b 	dmb	ish
}
    d916:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d91a:	bf00      	nop
    d91c:	0000c8c5 	.word	0x0000c8c5

0000d920 <get_io_capa>:
static const uint8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    d920:	4b10      	ldr	r3, [pc, #64]	; (d964 <get_io_capa+0x44>)
    d922:	681b      	ldr	r3, [r3, #0]
    d924:	b1bb      	cbz	r3, d956 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    d926:	681a      	ldr	r2, [r3, #0]
    d928:	b142      	cbz	r2, d93c <get_io_capa+0x1c>
    d92a:	6859      	ldr	r1, [r3, #4]
    d92c:	b131      	cbz	r1, d93c <get_io_capa+0x1c>
    d92e:	6899      	ldr	r1, [r3, #8]
    d930:	b911      	cbnz	r1, d938 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    d932:	490d      	ldr	r1, [pc, #52]	; (d968 <get_io_capa+0x48>)
    d934:	7809      	ldrb	r1, [r1, #0]
    d936:	b939      	cbnz	r1, d948 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    d938:	2004      	movs	r0, #4
    d93a:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    d93c:	490a      	ldr	r1, [pc, #40]	; (d968 <get_io_capa+0x48>)
    d93e:	7809      	ldrb	r1, [r1, #0]
    d940:	b111      	cbz	r1, d948 <get_io_capa+0x28>
    d942:	b10a      	cbz	r2, d948 <get_io_capa+0x28>
    d944:	6899      	ldr	r1, [r3, #8]
    d946:	b941      	cbnz	r1, d95a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    d948:	685b      	ldr	r3, [r3, #4]
    d94a:	b943      	cbnz	r3, d95e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    d94c:	2a00      	cmp	r2, #0
    d94e:	bf0c      	ite	eq
    d950:	2003      	moveq	r0, #3
    d952:	2000      	movne	r0, #0
    d954:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    d956:	2003      	movs	r0, #3
    d958:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    d95a:	2001      	movs	r0, #1
    d95c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    d95e:	2002      	movs	r0, #2
	}
}
    d960:	4770      	bx	lr
    d962:	bf00      	nop
    d964:	20001be4 	.word	0x20001be4
    d968:	20003bc0 	.word	0x20003bc0

0000d96c <smp_g2>:
	return 0;
}

static int smp_g2(const uint8_t u[32], const uint8_t v[32],
		  const uint8_t x[16], const uint8_t y[16], uint32_t *passkey)
{
    d96c:	b570      	push	{r4, r5, r6, lr}
    d96e:	b098      	sub	sp, #96	; 0x60
    d970:	460e      	mov	r6, r1
    d972:	4614      	mov	r4, r2
	BT_DBG("u %s", bt_hex(u, 32));
	BT_DBG("v %s", bt_hex(v, 32));
	BT_DBG("x %s", bt_hex(x, 16));
	BT_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
    d974:	4601      	mov	r1, r0
    d976:	2220      	movs	r2, #32
    d978:	a804      	add	r0, sp, #16
{
    d97a:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    d97c:	f016 fe70 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    d980:	2220      	movs	r2, #32
    d982:	4631      	mov	r1, r6
    d984:	a80c      	add	r0, sp, #48	; 0x30
    d986:	f016 fe6b 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    d98a:	2210      	movs	r2, #16
    d98c:	4629      	mov	r1, r5
    d98e:	a814      	add	r0, sp, #80	; 0x50
    d990:	f016 fe66 	bl	24660 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
    d994:	2210      	movs	r2, #16
    d996:	4621      	mov	r1, r4
    d998:	4668      	mov	r0, sp
    d99a:	f016 fe61 	bl	24660 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    d99e:	466b      	mov	r3, sp
    d9a0:	2250      	movs	r2, #80	; 0x50
    d9a2:	a904      	add	r1, sp, #16
    d9a4:	4618      	mov	r0, r3
    d9a6:	f016 feab 	bl	24700 <bt_smp_aes_cmac>
	if (err) {
    d9aa:	b940      	cbnz	r0, d9be <smp_g2+0x52>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d9ac:	9b03      	ldr	r3, [sp, #12]
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    d9ae:	4a05      	ldr	r2, [pc, #20]	; (d9c4 <smp_g2+0x58>)
    d9b0:	ba1b      	rev	r3, r3
    d9b2:	fbb3 f1f2 	udiv	r1, r3, r2
    d9b6:	fb02 3311 	mls	r3, r2, r1, r3
    d9ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d9bc:	6013      	str	r3, [r2, #0]

	BT_DBG("passkey %u", *passkey);

	return 0;
}
    d9be:	b018      	add	sp, #96	; 0x60
    d9c0:	bd70      	pop	{r4, r5, r6, pc}
    d9c2:	bf00      	nop
    d9c4:	000f4240 	.word	0x000f4240

0000d9c8 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    d9c8:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    d9ca:	2106      	movs	r1, #6
    d9cc:	f015 fdda 	bl	23584 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    d9d0:	4604      	mov	r4, r0
    d9d2:	b948      	cbnz	r0, d9e8 <smp_chan_get+0x20>
    d9d4:	4905      	ldr	r1, [pc, #20]	; (d9ec <smp_chan_get+0x24>)
    d9d6:	4b06      	ldr	r3, [pc, #24]	; (d9f0 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    d9d8:	4806      	ldr	r0, [pc, #24]	; (d9f4 <smp_chan_get+0x2c>)
    d9da:	1ac9      	subs	r1, r1, r3
    d9dc:	08c9      	lsrs	r1, r1, #3
    d9de:	0189      	lsls	r1, r1, #6
    d9e0:	f041 0101 	orr.w	r1, r1, #1
    d9e4:	f013 fb54 	bl	21090 <log_0>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    d9e8:	4620      	mov	r0, r4
    d9ea:	bd10      	pop	{r4, pc}
    d9ec:	00026940 	.word	0x00026940
    d9f0:	00026828 	.word	0x00026828
    d9f4:	0002a11e 	.word	0x0002a11e

0000d9f8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    d9f8:	4a0b      	ldr	r2, [pc, #44]	; (da28 <bt_smp_accept+0x30>)
{
    d9fa:	b508      	push	{r3, lr}
    d9fc:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    d9fe:	6810      	ldr	r0, [r2, #0]
    da00:	b918      	cbnz	r0, da0a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    da02:	4b0a      	ldr	r3, [pc, #40]	; (da2c <bt_smp_accept+0x34>)
    da04:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    da06:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    da08:	bd08      	pop	{r3, pc}
    da0a:	4909      	ldr	r1, [pc, #36]	; (da30 <bt_smp_accept+0x38>)
    da0c:	4a09      	ldr	r2, [pc, #36]	; (da34 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    da0e:	480a      	ldr	r0, [pc, #40]	; (da38 <bt_smp_accept+0x40>)
    da10:	1a52      	subs	r2, r2, r1
    da12:	08d2      	lsrs	r2, r2, #3
    da14:	0192      	lsls	r2, r2, #6
    da16:	f042 0201 	orr.w	r2, r2, #1
    da1a:	4619      	mov	r1, r3
    da1c:	f013 fb45 	bl	210aa <log_1>
	return -ENOMEM;
    da20:	f06f 000b 	mvn.w	r0, #11
    da24:	e7f0      	b.n	da08 <bt_smp_accept+0x10>
    da26:	bf00      	nop
    da28:	20001490 	.word	0x20001490
    da2c:	00027260 	.word	0x00027260
    da30:	00026828 	.word	0x00026828
    da34:	00026940 	.word	0x00026940
    da38:	0002a139 	.word	0x0002a139

0000da3c <get_auth.constprop.0>:
	if (sc_supported) {
    da3c:	4b0c      	ldr	r3, [pc, #48]	; (da70 <get_auth.constprop.0+0x34>)
    da3e:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    da40:	b510      	push	{r4, lr}
	if (sc_supported) {
    da42:	b17b      	cbz	r3, da64 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    da44:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    da48:	f7ff ff6a 	bl	d920 <get_io_capa>
	if (bondable) {
    da4c:	4b09      	ldr	r3, [pc, #36]	; (da74 <get_auth.constprop.0+0x38>)
    da4e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    da50:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    da52:	bf0c      	ite	eq
    da54:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    da58:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    da5c:	b12b      	cbz	r3, da6a <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    da5e:	f044 0001 	orr.w	r0, r4, #1
}
    da62:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    da64:	f000 0407 	and.w	r4, r0, #7
    da68:	e7ee      	b.n	da48 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    da6a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    da6e:	e7f8      	b.n	da62 <get_auth.constprop.0+0x26>
    da70:	20003bc0 	.word	0x20003bc0
    da74:	20000e5b 	.word	0x20000e5b

0000da78 <smp_f5>:
{
    da78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da7c:	b09a      	sub	sp, #104	; 0x68
    da7e:	461d      	mov	r5, r3
    da80:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
    da84:	4b2e      	ldr	r3, [pc, #184]	; (db40 <smp_f5+0xc8>)
{
    da86:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
    da88:	aa0c      	add	r2, sp, #48	; 0x30
{
    da8a:	4684      	mov	ip, r0
    da8c:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
    da8e:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    da92:	4690      	mov	r8, r2
    da94:	6818      	ldr	r0, [r3, #0]
    da96:	6859      	ldr	r1, [r3, #4]
    da98:	4614      	mov	r4, r2
    da9a:	c403      	stmia	r4!, {r0, r1}
    da9c:	3308      	adds	r3, #8
    da9e:	4573      	cmp	r3, lr
    daa0:	4622      	mov	r2, r4
    daa2:	d1f7      	bne.n	da94 <smp_f5+0x1c>
    daa4:	6818      	ldr	r0, [r3, #0]
    daa6:	791b      	ldrb	r3, [r3, #4]
    daa8:	6020      	str	r0, [r4, #0]
    daaa:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
    daac:	4661      	mov	r1, ip
    daae:	2220      	movs	r2, #32
    dab0:	a804      	add	r0, sp, #16
    dab2:	f016 fdd5 	bl	24660 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    dab6:	4823      	ldr	r0, [pc, #140]	; (db44 <smp_f5+0xcc>)
    dab8:	466b      	mov	r3, sp
    daba:	2220      	movs	r2, #32
    dabc:	a904      	add	r1, sp, #16
    dabe:	f016 fe1f 	bl	24700 <bt_smp_aes_cmac>
	if (err) {
    dac2:	4604      	mov	r4, r0
    dac4:	bbc0      	cbnz	r0, db38 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
    dac6:	2210      	movs	r2, #16
    dac8:	4651      	mov	r1, sl
    daca:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    dace:	f016 fdc7 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    dad2:	2210      	movs	r2, #16
    dad4:	4631      	mov	r1, r6
    dad6:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    dada:	f016 fdc1 	bl	24660 <sys_memcpy_swap>
	m[37] = a1->type;
    dade:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    dae0:	2206      	movs	r2, #6
	m[37] = a1->type;
    dae2:	f811 3b01 	ldrb.w	r3, [r1], #1
    dae6:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    daea:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    daee:	f016 fdb7 	bl	24660 <sys_memcpy_swap>
	m[44] = a2->type;
    daf2:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    daf4:	2206      	movs	r2, #6
	m[44] = a2->type;
    daf6:	f811 3b01 	ldrb.w	r3, [r1], #1
    dafa:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    dafe:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    db02:	f016 fdad 	bl	24660 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    db06:	464b      	mov	r3, r9
    db08:	2235      	movs	r2, #53	; 0x35
    db0a:	4641      	mov	r1, r8
    db0c:	4668      	mov	r0, sp
    db0e:	f016 fdf7 	bl	24700 <bt_smp_aes_cmac>
	if (err) {
    db12:	4604      	mov	r4, r0
    db14:	b980      	cbnz	r0, db38 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
    db16:	4648      	mov	r0, r9
    db18:	f016 fe28 	bl	2476c <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    db1c:	2301      	movs	r3, #1
    db1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    db22:	2235      	movs	r2, #53	; 0x35
    db24:	463b      	mov	r3, r7
    db26:	4641      	mov	r1, r8
    db28:	4668      	mov	r0, sp
    db2a:	f016 fde9 	bl	24700 <bt_smp_aes_cmac>
	if (err) {
    db2e:	4604      	mov	r4, r0
    db30:	b910      	cbnz	r0, db38 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
    db32:	4638      	mov	r0, r7
    db34:	f016 fe1a 	bl	2476c <sys_mem_swap.constprop.0>
}
    db38:	4620      	mov	r0, r4
    db3a:	b01a      	add	sp, #104	; 0x68
    db3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db40:	00026a4d 	.word	0x00026a4d
    db44:	0002a3c3 	.word	0x0002a3c3

0000db48 <sc_smp_check_confirm>:
{
    db48:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    db4a:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
{
    db4e:	b087      	sub	sp, #28
    db50:	4604      	mov	r4, r0
	switch (smp->method) {
    db52:	2b05      	cmp	r3, #5
    db54:	d828      	bhi.n	dba8 <sc_smp_check_confirm+0x60>
    db56:	e8df f003 	tbb	[pc, r3]
    db5a:	0323      	.short	0x0323
    db5c:	25272303 	.word	0x25272303
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    db60:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
    db64:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
    db68:	40d3      	lsrs	r3, r2
    db6a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    db6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    db72:	490e      	ldr	r1, [pc, #56]	; (dbac <sc_smp_check_confirm+0x64>)
    db74:	ad02      	add	r5, sp, #8
    db76:	9500      	str	r5, [sp, #0]
    db78:	6809      	ldr	r1, [r1, #0]
    db7a:	f104 02ef 	add.w	r2, r4, #239	; 0xef
    db7e:	f204 100f 	addw	r0, r4, #271	; 0x10f
    db82:	f016 fe51 	bl	24828 <smp_f4>
    db86:	b978      	cbnz	r0, dba8 <sc_smp_check_confirm+0x60>
	if (memcmp(smp->pcnf, cfm, 16)) {
    db88:	2210      	movs	r2, #16
    db8a:	4629      	mov	r1, r5
    db8c:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    db90:	f018 fb71 	bl	26276 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
    db94:	2800      	cmp	r0, #0
    db96:	bf0c      	ite	eq
    db98:	2000      	moveq	r0, #0
    db9a:	2004      	movne	r0, #4
}
    db9c:	b007      	add	sp, #28
    db9e:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
    dba0:	2300      	movs	r3, #0
    dba2:	e7e6      	b.n	db72 <sc_smp_check_confirm+0x2a>
		return 0;
    dba4:	2000      	movs	r0, #0
    dba6:	e7f9      	b.n	db9c <sc_smp_check_confirm+0x54>
		return BT_SMP_ERR_UNSPECIFIED;
    dba8:	2008      	movs	r0, #8
    dbaa:	e7f7      	b.n	db9c <sc_smp_check_confirm+0x54>
    dbac:	20001c90 	.word	0x20001c90

0000dbb0 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    dbb0:	b513      	push	{r0, r1, r4, lr}
    dbb2:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    dbb4:	2200      	movs	r2, #0
    dbb6:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    dbb8:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    dbba:	460a      	mov	r2, r1
    dbbc:	6800      	ldr	r0, [r0, #0]
    dbbe:	2106      	movs	r1, #6
    dbc0:	f015 fca0 	bl	23504 <bt_l2cap_send_cb>
    dbc4:	4805      	ldr	r0, [pc, #20]	; (dbdc <smp_send.constprop.0+0x2c>)
    dbc6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    dbca:	2300      	movs	r3, #0
    dbcc:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    dbd0:	b002      	add	sp, #8
    dbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbd6:	f011 bdc7 	b.w	1f768 <k_delayed_work_submit_to_queue>
    dbda:	bf00      	nop
    dbdc:	20001940 	.word	0x20001940

0000dbe0 <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
    dbe0:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
    dbe2:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    dbe4:	d00a      	beq.n	dbfc <sec_level_reachable.isra.0+0x1c>
    dbe6:	d805      	bhi.n	dbf4 <sec_level_reachable.isra.0+0x14>
    dbe8:	3801      	subs	r0, #1
    dbea:	2801      	cmp	r0, #1
    dbec:	bf8c      	ite	hi
    dbee:	2000      	movhi	r0, #0
    dbf0:	2001      	movls	r0, #1
}
    dbf2:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
    dbf4:	2804      	cmp	r0, #4
    dbf6:	d010      	beq.n	dc1a <sec_level_reachable.isra.0+0x3a>
    dbf8:	2000      	movs	r0, #0
    dbfa:	e7fa      	b.n	dbf2 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    dbfc:	f7ff fe90 	bl	d920 <get_io_capa>
    dc00:	2803      	cmp	r0, #3
    dc02:	d108      	bne.n	dc16 <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
    dc04:	4b0c      	ldr	r3, [pc, #48]	; (dc38 <sec_level_reachable.isra.0+0x58>)
    dc06:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    dc08:	2800      	cmp	r0, #0
    dc0a:	d0f2      	beq.n	dbf2 <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
    dc0c:	68c0      	ldr	r0, [r0, #12]
    dc0e:	3800      	subs	r0, #0
    dc10:	bf18      	it	ne
    dc12:	2001      	movne	r0, #1
    dc14:	e7ed      	b.n	dbf2 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    dc16:	2001      	movs	r0, #1
    dc18:	e7eb      	b.n	dbf2 <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    dc1a:	f7ff fe81 	bl	d920 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    dc1e:	2803      	cmp	r0, #3
    dc20:	d104      	bne.n	dc2c <sec_level_reachable.isra.0+0x4c>
    dc22:	4b05      	ldr	r3, [pc, #20]	; (dc38 <sec_level_reachable.isra.0+0x58>)
    dc24:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    dc26:	b118      	cbz	r0, dc30 <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    dc28:	68c0      	ldr	r0, [r0, #12]
    dc2a:	b108      	cbz	r0, dc30 <sec_level_reachable.isra.0+0x50>
    dc2c:	4b03      	ldr	r3, [pc, #12]	; (dc3c <sec_level_reachable.isra.0+0x5c>)
    dc2e:	7818      	ldrb	r0, [r3, #0]
    dc30:	f000 0001 	and.w	r0, r0, #1
    dc34:	e7dd      	b.n	dbf2 <sec_level_reachable.isra.0+0x12>
    dc36:	bf00      	nop
    dc38:	20001be4 	.word	0x20001be4
    dc3c:	20003bc0 	.word	0x20003bc0

0000dc40 <get_pair_method>:
{
    dc40:	b538      	push	{r3, r4, r5, lr}
    dc42:	4605      	mov	r5, r0
    dc44:	460c      	mov	r4, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    dc46:	30bc      	adds	r0, #188	; 0xbc
    dc48:	2105      	movs	r1, #5
    dc4a:	f016 fe12 	bl	24872 <atomic_test_bit>
    dc4e:	bb00      	cbnz	r0, dc92 <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    dc50:	2c04      	cmp	r4, #4
    dc52:	d81d      	bhi.n	dc90 <get_pair_method+0x50>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    dc54:	f895 30c3 	ldrb.w	r3, [r5, #195]	; 0xc3
    dc58:	f895 20ca 	ldrb.w	r2, [r5, #202]	; 0xca
    dc5c:	4013      	ands	r3, r2
    dc5e:	07d9      	lsls	r1, r3, #31
    dc60:	d434      	bmi.n	dccc <get_pair_method+0x8c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    dc62:	f895 00cb 	ldrb.w	r0, [r5, #203]	; 0xcb
    dc66:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
    dc6a:	4303      	orrs	r3, r0
    dc6c:	f013 0004 	ands.w	r0, r3, #4
    dc70:	d00e      	beq.n	dc90 <get_pair_method+0x50>
	method = gen_method_legacy[remote_io][get_io_capa()];
    dc72:	f7ff fe55 	bl	d920 <get_io_capa>
    dc76:	4b18      	ldr	r3, [pc, #96]	; (dcd8 <get_pair_method+0x98>)
    dc78:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    dc7c:	441c      	add	r4, r3
    dc7e:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    dc80:	2804      	cmp	r0, #4
    dc82:	d105      	bne.n	dc90 <get_pair_method+0x50>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    dc84:	682b      	ldr	r3, [r5, #0]
    dc86:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    dc88:	2b00      	cmp	r3, #0
    dc8a:	bf0c      	ite	eq
    dc8c:	2002      	moveq	r0, #2
    dc8e:	2001      	movne	r0, #1
}
    dc90:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    dc92:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
    dc96:	f895 00cb 	ldrb.w	r0, [r5, #203]	; 0xcb
    dc9a:	ea03 0200 	and.w	r2, r3, r0
    dc9e:	0712      	lsls	r2, r2, #28
    dca0:	d506      	bpl.n	dcb0 <get_pair_method+0x70>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    dca2:	f895 20c3 	ldrb.w	r2, [r5, #195]	; 0xc3
    dca6:	f895 50ca 	ldrb.w	r5, [r5, #202]	; 0xca
    dcaa:	432a      	orrs	r2, r5
    dcac:	07d2      	lsls	r2, r2, #31
    dcae:	d40f      	bmi.n	dcd0 <get_pair_method+0x90>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    dcb0:	2c04      	cmp	r4, #4
    dcb2:	d80f      	bhi.n	dcd4 <get_pair_method+0x94>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    dcb4:	4318      	orrs	r0, r3
    dcb6:	f010 0004 	ands.w	r0, r0, #4
    dcba:	d0e9      	beq.n	dc90 <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
    dcbc:	f7ff fe30 	bl	d920 <get_io_capa>
    dcc0:	4906      	ldr	r1, [pc, #24]	; (dcdc <get_pair_method+0x9c>)
    dcc2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    dcc6:	440c      	add	r4, r1
    dcc8:	5c20      	ldrb	r0, [r4, r0]
    dcca:	e7e1      	b.n	dc90 <get_pair_method+0x50>
		return LEGACY_OOB;
    dccc:	2006      	movs	r0, #6
    dcce:	e7df      	b.n	dc90 <get_pair_method+0x50>
			return LE_SC_OOB;
    dcd0:	4608      	mov	r0, r1
    dcd2:	e7dd      	b.n	dc90 <get_pair_method+0x50>
		return JUST_WORKS;
    dcd4:	2000      	movs	r0, #0
    dcd6:	e7db      	b.n	dc90 <get_pair_method+0x50>
    dcd8:	0002a391 	.word	0x0002a391
    dcdc:	0002a3aa 	.word	0x0002a3aa

0000dce0 <display_passkey>:
{
    dce0:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    dce2:	2104      	movs	r1, #4
{
    dce4:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    dce6:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    dcea:	f004 fed1 	bl	12a90 <bt_rand>
    dcee:	4605      	mov	r5, r0
    dcf0:	b9e0      	cbnz	r0, dd2c <display_passkey+0x4c>
	if (bt_auth && bt_auth->passkey_display) {
    dcf2:	4e0f      	ldr	r6, [pc, #60]	; (dd30 <display_passkey+0x50>)
		smp->passkey %= 1000000;
    dcf4:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    dcf8:	4a0e      	ldr	r2, [pc, #56]	; (dd34 <display_passkey+0x54>)
	smp->passkey_round = 0U;
    dcfa:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    dcfe:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
    dd00:	fbb3 f1f2 	udiv	r1, r3, r2
    dd04:	fb02 3311 	mls	r3, r2, r1, r3
    dd08:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    dd0c:	b168      	cbz	r0, dd2a <display_passkey+0x4a>
    dd0e:	6800      	ldr	r0, [r0, #0]
    dd10:	b158      	cbz	r0, dd2a <display_passkey+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    dd12:	210a      	movs	r1, #10
    dd14:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    dd18:	f016 fe2c 	bl	24974 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    dd1c:	6833      	ldr	r3, [r6, #0]
    dd1e:	6820      	ldr	r0, [r4, #0]
    dd20:	681b      	ldr	r3, [r3, #0]
    dd22:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    dd26:	4798      	blx	r3
	return 0;
    dd28:	4628      	mov	r0, r5
}
    dd2a:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    dd2c:	2008      	movs	r0, #8
    dd2e:	e7fc      	b.n	dd2a <display_passkey+0x4a>
    dd30:	20001be4 	.word	0x20001be4
    dd34:	000f4240 	.word	0x000f4240

0000dd38 <smp_init>:
{
    dd38:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    dd3a:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    dd3e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    dd40:	22f0      	movs	r2, #240	; 0xf0
    dd42:	2100      	movs	r1, #0
    dd44:	4628      	mov	r0, r5
    dd46:	f018 fab4 	bl	262b2 <memset>
	if (bt_rand(smp->prnd, 16)) {
    dd4a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    dd4e:	2110      	movs	r1, #16
    dd50:	f004 fe9e 	bl	12a90 <bt_rand>
    dd54:	4604      	mov	r4, r0
    dd56:	b948      	cbnz	r0, dd6c <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    dd58:	2105      	movs	r1, #5
    dd5a:	4628      	mov	r0, r5
    dd5c:	f016 fe0a 	bl	24974 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    dd60:	f7fc f944 	bl	9fec <bt_pub_key_get>
    dd64:	4b02      	ldr	r3, [pc, #8]	; (dd70 <smp_init+0x38>)
    dd66:	6018      	str	r0, [r3, #0]
}
    dd68:	4620      	mov	r0, r4
    dd6a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    dd6c:	2408      	movs	r4, #8
    dd6e:	e7fb      	b.n	dd68 <smp_init+0x30>
    dd70:	20001c90 	.word	0x20001c90

0000dd74 <smp_ident_info>:
{
    dd74:	b570      	push	{r4, r5, r6, lr}
    dd76:	460b      	mov	r3, r1
    dd78:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dd7a:	210c      	movs	r1, #12
    dd7c:	30bc      	adds	r0, #188	; 0xbc
    dd7e:	f016 fd78 	bl	24872 <atomic_test_bit>
    dd82:	b338      	cbz	r0, ddd4 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
    dd84:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    dd86:	682b      	ldr	r3, [r5, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    dd88:	f103 0688 	add.w	r6, r3, #136	; 0x88
    dd8c:	7a19      	ldrb	r1, [r3, #8]
    dd8e:	4632      	mov	r2, r6
    dd90:	2002      	movs	r0, #2
    dd92:	f017 fafb 	bl	2538c <bt_keys_get_type>
		if (!keys) {
    dd96:	b990      	cbnz	r0, ddbe <smp_ident_info+0x4a>
    dd98:	4a12      	ldr	r2, [pc, #72]	; (dde4 <smp_ident_info+0x70>)
    dd9a:	4c13      	ldr	r4, [pc, #76]	; (dde8 <smp_ident_info+0x74>)
			BT_ERR("Unable to get keys for %s",
    dd9c:	4630      	mov	r0, r6
    dd9e:	1aa4      	subs	r4, r4, r2
    dda0:	f7f9 f9a0 	bl	70e4 <bt_addr_le_str_real>
    dda4:	f7f7 faa0 	bl	52e8 <log_strdup>
    dda8:	08e4      	lsrs	r4, r4, #3
    ddaa:	01a4      	lsls	r4, r4, #6
    ddac:	f044 0401 	orr.w	r4, r4, #1
    ddb0:	4601      	mov	r1, r0
    ddb2:	4622      	mov	r2, r4
    ddb4:	480d      	ldr	r0, [pc, #52]	; (ddec <smp_ident_info+0x78>)
    ddb6:	f013 f978 	bl	210aa <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    ddba:	2008      	movs	r0, #8
}
    ddbc:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ddbe:	4622      	mov	r2, r4
    ddc0:	f100 032a 	add.w	r3, r0, #42	; 0x2a
    ddc4:	f104 0110 	add.w	r1, r4, #16
    ddc8:	f852 0b04 	ldr.w	r0, [r2], #4
    ddcc:	f843 0b04 	str.w	r0, [r3], #4
    ddd0:	428a      	cmp	r2, r1
    ddd2:	d1f9      	bne.n	ddc8 <smp_ident_info+0x54>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    ddd4:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    ddd8:	2109      	movs	r1, #9
    ddda:	f016 fdcb 	bl	24974 <atomic_set_bit>
	return 0;
    ddde:	2000      	movs	r0, #0
    dde0:	e7ec      	b.n	ddbc <smp_ident_info+0x48>
    dde2:	bf00      	nop
    dde4:	00026828 	.word	0x00026828
    dde8:	00026940 	.word	0x00026940
    ddec:	0002a15e 	.word	0x0002a15e

0000ddf0 <smp_encrypt_info>:
{
    ddf0:	b570      	push	{r4, r5, r6, lr}
    ddf2:	460b      	mov	r3, r1
    ddf4:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ddf6:	210c      	movs	r1, #12
    ddf8:	30bc      	adds	r0, #188	; 0xbc
    ddfa:	f016 fd3a 	bl	24872 <atomic_test_bit>
    ddfe:	b338      	cbz	r0, de50 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    de00:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    de02:	682b      	ldr	r3, [r5, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    de04:	f103 0688 	add.w	r6, r3, #136	; 0x88
    de08:	7a19      	ldrb	r1, [r3, #8]
    de0a:	4632      	mov	r2, r6
    de0c:	2004      	movs	r0, #4
    de0e:	f017 fabd 	bl	2538c <bt_keys_get_type>
		if (!keys) {
    de12:	b990      	cbnz	r0, de3a <smp_encrypt_info+0x4a>
    de14:	4a12      	ldr	r2, [pc, #72]	; (de60 <smp_encrypt_info+0x70>)
    de16:	4c13      	ldr	r4, [pc, #76]	; (de64 <smp_encrypt_info+0x74>)
			BT_ERR("Unable to get keys for %s",
    de18:	4630      	mov	r0, r6
    de1a:	1aa4      	subs	r4, r4, r2
    de1c:	f7f9 f962 	bl	70e4 <bt_addr_le_str_real>
    de20:	f7f7 fa62 	bl	52e8 <log_strdup>
    de24:	08e4      	lsrs	r4, r4, #3
    de26:	01a4      	lsls	r4, r4, #6
    de28:	f044 0401 	orr.w	r4, r4, #1
    de2c:	4601      	mov	r1, r0
    de2e:	4622      	mov	r2, r4
    de30:	480d      	ldr	r0, [pc, #52]	; (de68 <smp_encrypt_info+0x78>)
    de32:	f013 f93a 	bl	210aa <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    de36:	2008      	movs	r0, #8
}
    de38:	bd70      	pop	{r4, r5, r6, pc}
    de3a:	4622      	mov	r2, r4
    de3c:	f100 031a 	add.w	r3, r0, #26
    de40:	f104 0110 	add.w	r1, r4, #16
    de44:	f852 0b04 	ldr.w	r0, [r2], #4
    de48:	f843 0b04 	str.w	r0, [r3], #4
    de4c:	428a      	cmp	r2, r1
    de4e:	d1f9      	bne.n	de44 <smp_encrypt_info+0x54>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    de50:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    de54:	2107      	movs	r1, #7
    de56:	f016 fd8d 	bl	24974 <atomic_set_bit>
	return 0;
    de5a:	2000      	movs	r0, #0
    de5c:	e7ec      	b.n	de38 <smp_encrypt_info+0x48>
    de5e:	bf00      	nop
    de60:	00026828 	.word	0x00026828
    de64:	00026940 	.word	0x00026940
    de68:	0002a15e 	.word	0x0002a15e

0000de6c <legacy_request_tk>:
{
    de6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    de6e:	6804      	ldr	r4, [r0, #0]
{
    de70:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    de72:	f104 0188 	add.w	r1, r4, #136	; 0x88
    de76:	7a20      	ldrb	r0, [r4, #8]
    de78:	f001 fac2 	bl	f400 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    de7c:	f895 10c0 	ldrb.w	r1, [r5, #192]	; 0xc0
    de80:	b178      	cbz	r0, dea2 <legacy_request_tk+0x36>
    de82:	7b43      	ldrb	r3, [r0, #13]
    de84:	07db      	lsls	r3, r3, #31
    de86:	d50c      	bpl.n	dea2 <legacy_request_tk+0x36>
    de88:	b959      	cbnz	r1, dea2 <legacy_request_tk+0x36>
    de8a:	4937      	ldr	r1, [pc, #220]	; (df68 <legacy_request_tk+0xfc>)
    de8c:	4b37      	ldr	r3, [pc, #220]	; (df6c <legacy_request_tk+0x100>)
		BT_ERR("JustWorks failed, authenticated keys present");
    de8e:	4838      	ldr	r0, [pc, #224]	; (df70 <legacy_request_tk+0x104>)
    de90:	1ac9      	subs	r1, r1, r3
    de92:	08c9      	lsrs	r1, r1, #3
    de94:	0189      	lsls	r1, r1, #6
    de96:	f041 0101 	orr.w	r1, r1, #1
    de9a:	f013 f8f9 	bl	21090 <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    de9e:	2008      	movs	r0, #8
    dea0:	e01d      	b.n	dede <legacy_request_tk+0x72>
	switch (smp->method) {
    dea2:	4608      	mov	r0, r1
    dea4:	2906      	cmp	r1, #6
    dea6:	d852      	bhi.n	df4e <legacy_request_tk+0xe2>
    dea8:	e8df f001 	tbb	[pc, r1]
    deac:	511b4619 	.word	0x511b4619
    deb0:	5151      	.short	0x5151
    deb2:	04          	.byte	0x04
    deb3:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    deb4:	4e2f      	ldr	r6, [pc, #188]	; (df74 <legacy_request_tk+0x108>)
    deb6:	6833      	ldr	r3, [r6, #0]
    deb8:	2b00      	cmp	r3, #0
    deba:	d053      	beq.n	df64 <legacy_request_tk+0xf8>
    debc:	68db      	ldr	r3, [r3, #12]
    debe:	2b00      	cmp	r3, #0
    dec0:	d050      	beq.n	df64 <legacy_request_tk+0xf8>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    dec2:	2109      	movs	r1, #9
    dec4:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
			struct bt_conn_oob_info info = {
    dec8:	2400      	movs	r4, #0
    deca:	f8ad 4004 	strh.w	r4, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    dece:	f016 fd51 	bl	24974 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    ded2:	6833      	ldr	r3, [r6, #0]
    ded4:	6828      	ldr	r0, [r5, #0]
    ded6:	68db      	ldr	r3, [r3, #12]
    ded8:	a901      	add	r1, sp, #4
    deda:	4798      	blx	r3
	return 0;
    dedc:	2000      	movs	r0, #0
}
    dede:	b002      	add	sp, #8
    dee0:	bd70      	pop	{r4, r5, r6, pc}
			if (bt_rand(&passkey, sizeof(passkey))) {
    dee2:	2104      	movs	r1, #4
    dee4:	eb0d 0001 	add.w	r0, sp, r1
    dee8:	f004 fdd2 	bl	12a90 <bt_rand>
    deec:	2800      	cmp	r0, #0
    deee:	d1d6      	bne.n	de9e <legacy_request_tk+0x32>
			passkey %= 1000000;
    def0:	9b01      	ldr	r3, [sp, #4]
    def2:	4a21      	ldr	r2, [pc, #132]	; (df78 <legacy_request_tk+0x10c>)
		if (bt_auth && bt_auth->passkey_display) {
    def4:	4e1f      	ldr	r6, [pc, #124]	; (df74 <legacy_request_tk+0x108>)
			passkey %= 1000000;
    def6:	fbb3 f1f2 	udiv	r1, r3, r2
    defa:	fb02 3311 	mls	r3, r2, r1, r3
    defe:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    df00:	6833      	ldr	r3, [r6, #0]
    df02:	b15b      	cbz	r3, df1c <legacy_request_tk+0xb0>
    df04:	681b      	ldr	r3, [r3, #0]
    df06:	b14b      	cbz	r3, df1c <legacy_request_tk+0xb0>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    df08:	210a      	movs	r1, #10
    df0a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    df0e:	f016 fd31 	bl	24974 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    df12:	6833      	ldr	r3, [r6, #0]
    df14:	9901      	ldr	r1, [sp, #4]
    df16:	681b      	ldr	r3, [r3, #0]
    df18:	4620      	mov	r0, r4
    df1a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    df1c:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    df1e:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
	dst[1] = val >> 8;
    df22:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    df26:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    df28:	f885 3101 	strb.w	r3, [r5, #257]	; 0x101
	dst[1] = val >> 8;
    df2c:	0a1b      	lsrs	r3, r3, #8
    df2e:	f885 2100 	strb.w	r2, [r5, #256]	; 0x100
    df32:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
    df36:	e7d1      	b.n	dedc <legacy_request_tk+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    df38:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    df3c:	2109      	movs	r1, #9
    df3e:	f016 fd19 	bl	24974 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    df42:	4b0c      	ldr	r3, [pc, #48]	; (df74 <legacy_request_tk+0x108>)
    df44:	681b      	ldr	r3, [r3, #0]
    df46:	4620      	mov	r0, r4
    df48:	685b      	ldr	r3, [r3, #4]
    df4a:	4798      	blx	r3
    df4c:	e7c6      	b.n	dedc <legacy_request_tk+0x70>
    df4e:	4b07      	ldr	r3, [pc, #28]	; (df6c <legacy_request_tk+0x100>)
    df50:	4a05      	ldr	r2, [pc, #20]	; (df68 <legacy_request_tk+0xfc>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    df52:	480a      	ldr	r0, [pc, #40]	; (df7c <legacy_request_tk+0x110>)
    df54:	1ad2      	subs	r2, r2, r3
    df56:	08d2      	lsrs	r2, r2, #3
    df58:	0192      	lsls	r2, r2, #6
    df5a:	f042 0201 	orr.w	r2, r2, #1
    df5e:	f013 f8a4 	bl	210aa <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    df62:	e79c      	b.n	de9e <legacy_request_tk+0x32>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    df64:	2002      	movs	r0, #2
    df66:	e7ba      	b.n	dede <legacy_request_tk+0x72>
    df68:	00026940 	.word	0x00026940
    df6c:	00026828 	.word	0x00026828
    df70:	0002a178 	.word	0x0002a178
    df74:	20001be4 	.word	0x20001be4
    df78:	000f4240 	.word	0x000f4240
    df7c:	0002a1a5 	.word	0x0002a1a5

0000df80 <bt_smp_distribute_keys>:
{
    df80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    df84:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    df86:	6800      	ldr	r0, [r0, #0]
	if (!keys) {
    df88:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
    df8c:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
    df8e:	b9a3      	cbnz	r3, dfba <bt_smp_distribute_keys+0x3a>
    df90:	4a49      	ldr	r2, [pc, #292]	; (e0b8 <bt_smp_distribute_keys+0x138>)
    df92:	4c4a      	ldr	r4, [pc, #296]	; (e0bc <bt_smp_distribute_keys+0x13c>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    df94:	3088      	adds	r0, #136	; 0x88
    df96:	1aa4      	subs	r4, r4, r2
    df98:	f7f9 f8a4 	bl	70e4 <bt_addr_le_str_real>
    df9c:	f7f7 f9a4 	bl	52e8 <log_strdup>
    dfa0:	08e4      	lsrs	r4, r4, #3
    dfa2:	01a4      	lsls	r4, r4, #6
    dfa4:	f044 0401 	orr.w	r4, r4, #1
    dfa8:	4601      	mov	r1, r0
    dfaa:	4622      	mov	r2, r4
    dfac:	4844      	ldr	r0, [pc, #272]	; (e0c0 <bt_smp_distribute_keys+0x140>)
    dfae:	f013 f87c 	bl	210aa <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    dfb2:	2008      	movs	r0, #8
}
    dfb4:	b009      	add	sp, #36	; 0x24
    dfb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    dfba:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
    dfbe:	2105      	movs	r1, #5
    dfc0:	4638      	mov	r0, r7
    dfc2:	f016 fc56 	bl	24872 <atomic_test_bit>
    dfc6:	4680      	mov	r8, r0
    dfc8:	b9d8      	cbnz	r0, e002 <bt_smp_distribute_keys+0x82>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    dfca:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    dfce:	f013 0001 	ands.w	r0, r3, #1
    dfd2:	d0ef      	beq.n	dfb4 <bt_smp_distribute_keys+0x34>
	struct bt_keys *keys = conn->le.keys;
    dfd4:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    dfd6:	211a      	movs	r1, #26
    dfd8:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    dfda:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    dfde:	f004 fd57 	bl	12a90 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    dfe2:	2106      	movs	r1, #6
    dfe4:	4620      	mov	r0, r4
    dfe6:	f016 fcd3 	bl	24990 <smp_create_pdu.constprop.0>
		if (!buf) {
    dfea:	4606      	mov	r6, r0
    dfec:	b958      	cbnz	r0, e006 <bt_smp_distribute_keys+0x86>
    dfee:	4933      	ldr	r1, [pc, #204]	; (e0bc <bt_smp_distribute_keys+0x13c>)
    dff0:	4b31      	ldr	r3, [pc, #196]	; (e0b8 <bt_smp_distribute_keys+0x138>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    dff2:	4834      	ldr	r0, [pc, #208]	; (e0c4 <bt_smp_distribute_keys+0x144>)
    dff4:	1ac9      	subs	r1, r1, r3
    dff6:	08c9      	lsrs	r1, r1, #3
    dff8:	0189      	lsls	r1, r1, #6
    dffa:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    dffe:	f013 f847 	bl	21090 <log_0>
	return 0;
    e002:	2000      	movs	r0, #0
    e004:	e7d6      	b.n	dfb4 <bt_smp_distribute_keys+0x34>
		info = net_buf_add(buf, sizeof(*info));
    e006:	2110      	movs	r1, #16
    e008:	3008      	adds	r0, #8
    e00a:	f017 fa3e 	bl	2548a <net_buf_simple_add>
    e00e:	7b2a      	ldrb	r2, [r5, #12]
    e010:	a901      	add	r1, sp, #4
    e012:	4681      	mov	r9, r0
    e014:	f018 f93f 	bl	26296 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    e018:	7b28      	ldrb	r0, [r5, #12]
    e01a:	280f      	cmp	r0, #15
    e01c:	d805      	bhi.n	e02a <bt_smp_distribute_keys+0xaa>
__ssp_bos_icheck3(memset, void *, int)
    e01e:	f1c0 0210 	rsb	r2, r0, #16
    e022:	4641      	mov	r1, r8
    e024:	4448      	add	r0, r9
    e026:	f018 f944 	bl	262b2 <memset>
		smp_send(smp, buf, NULL, NULL);
    e02a:	4631      	mov	r1, r6
    e02c:	2200      	movs	r2, #0
    e02e:	4620      	mov	r0, r4
    e030:	f7ff fdbe 	bl	dbb0 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    e034:	2107      	movs	r1, #7
    e036:	4620      	mov	r0, r4
    e038:	f016 fcaa 	bl	24990 <smp_create_pdu.constprop.0>
		if (!buf) {
    e03c:	4606      	mov	r6, r0
    e03e:	b940      	cbnz	r0, e052 <bt_smp_distribute_keys+0xd2>
    e040:	491e      	ldr	r1, [pc, #120]	; (e0bc <bt_smp_distribute_keys+0x13c>)
    e042:	4b1d      	ldr	r3, [pc, #116]	; (e0b8 <bt_smp_distribute_keys+0x138>)
			BT_ERR("Unable to allocate Master Ident buffer");
    e044:	4820      	ldr	r0, [pc, #128]	; (e0c8 <bt_smp_distribute_keys+0x148>)
    e046:	1ac9      	subs	r1, r1, r3
    e048:	08c9      	lsrs	r1, r1, #3
    e04a:	0189      	lsls	r1, r1, #6
    e04c:	f041 0101 	orr.w	r1, r1, #1
    e050:	e7d5      	b.n	dffe <bt_smp_distribute_keys+0x7e>
		ident = net_buf_add(buf, sizeof(*ident));
    e052:	210a      	movs	r1, #10
    e054:	3008      	adds	r0, #8
    e056:	f017 fa18 	bl	2548a <net_buf_simple_add>
    e05a:	aa05      	add	r2, sp, #20
    e05c:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e05e:	ca03      	ldmia	r2!, {r0, r1}
    e060:	f8c3 0002 	str.w	r0, [r3, #2]
    e064:	f8c3 1006 	str.w	r1, [r3, #6]
    e068:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    e06c:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
    e06e:	4620      	mov	r0, r4
    e070:	4631      	mov	r1, r6
    e072:	4a16      	ldr	r2, [pc, #88]	; (e0cc <bt_smp_distribute_keys+0x14c>)
    e074:	f7ff fd9c 	bl	dbb0 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e078:	210c      	movs	r1, #12
    e07a:	4638      	mov	r0, r7
    e07c:	f016 fbf9 	bl	24872 <atomic_test_bit>
    e080:	ac05      	add	r4, sp, #20
    e082:	2800      	cmp	r0, #0
    e084:	d0bd      	beq.n	e002 <bt_smp_distribute_keys+0x82>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    e086:	2101      	movs	r1, #1
    e088:	4628      	mov	r0, r5
    e08a:	f017 f98f 	bl	253ac <bt_keys_add_type>
    e08e:	f105 064a 	add.w	r6, r5, #74	; 0x4a
    e092:	ab01      	add	r3, sp, #4
    e094:	461a      	mov	r2, r3
    e096:	ca03      	ldmia	r2!, {r0, r1}
    e098:	42a2      	cmp	r2, r4
    e09a:	6030      	str	r0, [r6, #0]
    e09c:	6071      	str	r1, [r6, #4]
    e09e:	4613      	mov	r3, r2
    e0a0:	f106 0608 	add.w	r6, r6, #8
    e0a4:	d1f6      	bne.n	e094 <bt_smp_distribute_keys+0x114>
    e0a6:	4623      	mov	r3, r4
    e0a8:	cb03      	ldmia	r3!, {r0, r1}
    e0aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    e0ae:	6428      	str	r0, [r5, #64]	; 0x40
    e0b0:	6469      	str	r1, [r5, #68]	; 0x44
    e0b2:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    e0b6:	e7a4      	b.n	e002 <bt_smp_distribute_keys+0x82>
    e0b8:	00026828 	.word	0x00026828
    e0bc:	00026940 	.word	0x00026940
    e0c0:	0002a1c1 	.word	0x0002a1c1
    e0c4:	0002a1d6 	.word	0x0002a1d6
    e0c8:	0002a1fd 	.word	0x0002a1fd
    e0cc:	00024e2b 	.word	0x00024e2b

0000e0d0 <smp_send_pairing_req>:
{
    e0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e0d4:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    e0d6:	f7ff fc77 	bl	d9c8 <smp_chan_get>
	if (!smp) {
    e0da:	4604      	mov	r4, r0
    e0dc:	2800      	cmp	r0, #0
    e0de:	d06f      	beq.n	e1c0 <smp_send_pairing_req+0xf0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e0e0:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
    e0e4:	2104      	movs	r1, #4
    e0e6:	4640      	mov	r0, r8
    e0e8:	f016 fbc3 	bl	24872 <atomic_test_bit>
    e0ec:	2800      	cmp	r0, #0
    e0ee:	d16a      	bne.n	e1c6 <smp_send_pairing_req+0xf6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e0f0:	2103      	movs	r1, #3
    e0f2:	4640      	mov	r0, r8
    e0f4:	f016 fbbd 	bl	24872 <atomic_test_bit>
    e0f8:	b120      	cbz	r0, e104 <smp_send_pairing_req+0x34>
		return -EBUSY;
    e0fa:	f06f 050f 	mvn.w	r5, #15
}
    e0fe:	4628      	mov	r0, r5
    e100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e104:	2101      	movs	r1, #1
    e106:	4640      	mov	r0, r8
    e108:	f016 fbb3 	bl	24872 <atomic_test_bit>
    e10c:	2800      	cmp	r0, #0
    e10e:	d1f4      	bne.n	e0fa <smp_send_pairing_req+0x2a>
	if (!sec_level_reachable(conn)) {
    e110:	7aa8      	ldrb	r0, [r5, #10]
    e112:	f7ff fd65 	bl	dbe0 <sec_level_reachable.isra.0>
    e116:	2800      	cmp	r0, #0
    e118:	d058      	beq.n	e1cc <smp_send_pairing_req+0xfc>
	if (!conn->le.keys) {
    e11a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e11e:	b13b      	cbz	r3, e130 <smp_send_pairing_req+0x60>
	if (smp_init(smp)) {
    e120:	4620      	mov	r0, r4
    e122:	f7ff fe09 	bl	dd38 <smp_init>
    e126:	4605      	mov	r5, r0
    e128:	b170      	cbz	r0, e148 <smp_send_pairing_req+0x78>
		return -ENOBUFS;
    e12a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    e12e:	e7e6      	b.n	e0fe <smp_send_pairing_req+0x2e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e130:	7a28      	ldrb	r0, [r5, #8]
    e132:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e136:	f001 f8d5 	bl	f2e4 <bt_keys_get_addr>
    e13a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    e13e:	2800      	cmp	r0, #0
    e140:	d1ee      	bne.n	e120 <smp_send_pairing_req+0x50>
			return -ENOMEM;
    e142:	f06f 050b 	mvn.w	r5, #11
    e146:	e7da      	b.n	e0fe <smp_send_pairing_req+0x2e>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    e148:	2101      	movs	r1, #1
    e14a:	4620      	mov	r0, r4
    e14c:	f016 fc20 	bl	24990 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    e150:	4607      	mov	r7, r0
    e152:	2800      	cmp	r0, #0
    e154:	d0e9      	beq.n	e12a <smp_send_pairing_req+0x5a>
	req = net_buf_add(req_buf, sizeof(*req));
    e156:	2106      	movs	r1, #6
    e158:	3008      	adds	r0, #8
    e15a:	f017 f996 	bl	2548a <net_buf_simple_add>
    e15e:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    e160:	2009      	movs	r0, #9
    e162:	f7ff fc6b 	bl	da3c <get_auth.constprop.0>
    e166:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
    e168:	f7ff fbda 	bl	d920 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e16c:	4b19      	ldr	r3, [pc, #100]	; (e1d4 <smp_send_pairing_req+0x104>)
	req->io_capability = get_io_capa();
    e16e:	7030      	strb	r0, [r6, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e170:	781b      	ldrb	r3, [r3, #0]
    e172:	7073      	strb	r3, [r6, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e174:	2310      	movs	r3, #16
    e176:	70f3      	strb	r3, [r6, #3]
	req->resp_key_dist = RECV_KEYS;
    e178:	f04f 0903 	mov.w	r9, #3
	req->init_key_dist = SEND_KEYS;
    e17c:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
    e17e:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
    e182:	7133      	strb	r3, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
    e184:	f886 9005 	strb.w	r9, [r6, #5]
	smp->local_dist = SEND_KEYS;
    e188:	f8a4 21a0 	strh.w	r2, [r4, #416]	; 0x1a0
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e18c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    e190:	6833      	ldr	r3, [r6, #0]
    e192:	f8c4 30c2 	str.w	r3, [r4, #194]	; 0xc2
    e196:	88b3      	ldrh	r3, [r6, #4]
    e198:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	smp_send(smp, req_buf, NULL, NULL);
    e19c:	462a      	mov	r2, r5
    e19e:	4639      	mov	r1, r7
    e1a0:	4620      	mov	r0, r4
    e1a2:	f7ff fd05 	bl	dbb0 <smp_send.constprop.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    e1a6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e1aa:	2102      	movs	r1, #2
    e1ac:	f016 fbe2 	bl	24974 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    e1b0:	210b      	movs	r1, #11
    e1b2:	f016 fbdf 	bl	24974 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e1b6:	4649      	mov	r1, r9
    e1b8:	4640      	mov	r0, r8
    e1ba:	f016 fbdb 	bl	24974 <atomic_set_bit>
	return 0;
    e1be:	e79e      	b.n	e0fe <smp_send_pairing_req+0x2e>
		return -ENOTCONN;
    e1c0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    e1c4:	e79b      	b.n	e0fe <smp_send_pairing_req+0x2e>
		return -EIO;
    e1c6:	f06f 0504 	mvn.w	r5, #4
    e1ca:	e798      	b.n	e0fe <smp_send_pairing_req+0x2e>
		return -EINVAL;
    e1cc:	f06f 0515 	mvn.w	r5, #21
    e1d0:	e795      	b.n	e0fe <smp_send_pairing_req+0x2e>
    e1d2:	bf00      	nop
    e1d4:	20003bbf 	.word	0x20003bbf

0000e1d8 <smp_security_request>:
{
    e1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    e1da:	4606      	mov	r6, r0
	struct bt_smp_security_request *req = (void *)buf->data;
    e1dc:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e1de:	f856 4bbc 	ldr.w	r4, [r6], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e1e2:	2103      	movs	r1, #3
    e1e4:	4630      	mov	r0, r6
    e1e6:	f016 fb44 	bl	24872 <atomic_test_bit>
    e1ea:	b108      	cbz	r0, e1f0 <smp_security_request+0x18>
	return 0;
    e1ec:	2000      	movs	r0, #0
    e1ee:	e064      	b.n	e2ba <smp_security_request+0xe2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e1f0:	2101      	movs	r1, #1
    e1f2:	4630      	mov	r0, r6
    e1f4:	f016 fb3d 	bl	24872 <atomic_test_bit>
    e1f8:	2800      	cmp	r0, #0
    e1fa:	d1f7      	bne.n	e1ec <smp_security_request+0x14>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    e1fc:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
    e1fe:	4b32      	ldr	r3, [pc, #200]	; (e2c8 <smp_security_request+0xf0>)
    e200:	781b      	ldrb	r3, [r3, #0]
    e202:	b17b      	cbz	r3, e224 <smp_security_request+0x4c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    e204:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    e208:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    e20c:	b16b      	cbz	r3, e22a <smp_security_request+0x52>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    e20e:	89db      	ldrh	r3, [r3, #14]
    e210:	f003 0324 	and.w	r3, r3, #36	; 0x24
    e214:	b9d3      	cbnz	r3, e24c <smp_security_request+0x74>
	if (smp_send_pairing_req(conn) < 0) {
    e216:	4620      	mov	r0, r4
    e218:	f7ff ff5a 	bl	e0d0 <smp_send_pairing_req>
    e21c:	2800      	cmp	r0, #0
    e21e:	db4b      	blt.n	e2b8 <smp_security_request+0xe0>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e220:	210e      	movs	r1, #14
    e222:	e04d      	b.n	e2c0 <smp_security_request+0xe8>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    e224:	f005 0507 	and.w	r5, r5, #7
    e228:	e7ee      	b.n	e208 <smp_security_request+0x30>
					     &conn->le.dst);
    e22a:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    e22e:	7a21      	ldrb	r1, [r4, #8]
    e230:	463a      	mov	r2, r7
    e232:	2020      	movs	r0, #32
    e234:	f001 f894 	bl	f360 <bt_keys_find>
    e238:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
    e23c:	b930      	cbnz	r0, e24c <smp_security_request+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    e23e:	7a21      	ldrb	r1, [r4, #8]
    e240:	463a      	mov	r2, r7
    e242:	2004      	movs	r0, #4
    e244:	f001 f88c 	bl	f360 <bt_keys_find>
    e248:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    e24c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    e250:	2900      	cmp	r1, #0
    e252:	d0e0      	beq.n	e216 <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    e254:	076f      	lsls	r7, r5, #29
    e256:	d518      	bpl.n	e28a <smp_security_request+0xb2>
    e258:	7b4b      	ldrb	r3, [r1, #13]
    e25a:	07d8      	lsls	r0, r3, #31
    e25c:	d415      	bmi.n	e28a <smp_security_request+0xb2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    e25e:	f7ff fb5f 	bl	d920 <get_io_capa>
    e262:	4a1a      	ldr	r2, [pc, #104]	; (e2cc <smp_security_request+0xf4>)
    e264:	4b1a      	ldr	r3, [pc, #104]	; (e2d0 <smp_security_request+0xf8>)
    e266:	1ad2      	subs	r2, r2, r3
    e268:	08d2      	lsrs	r2, r2, #3
    e26a:	2803      	cmp	r0, #3
    e26c:	ea4f 1282 	mov.w	r2, r2, lsl #6
    e270:	d004      	beq.n	e27c <smp_security_request+0xa4>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    e272:	4818      	ldr	r0, [pc, #96]	; (e2d4 <smp_security_request+0xfc>)
    e274:	f042 0203 	orr.w	r2, r2, #3
    e278:	4629      	mov	r1, r5
    e27a:	e003      	b.n	e284 <smp_security_request+0xac>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    e27c:	4816      	ldr	r0, [pc, #88]	; (e2d8 <smp_security_request+0x100>)
    e27e:	f042 0202 	orr.w	r2, r2, #2
    e282:	4629      	mov	r1, r5
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    e284:	f012 ff11 	bl	210aa <log_1>
		goto pair;
    e288:	e7c5      	b.n	e216 <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_SC) &&
    e28a:	072a      	lsls	r2, r5, #28
    e28c:	d508      	bpl.n	e2a0 <smp_security_request+0xc8>
    e28e:	89cb      	ldrh	r3, [r1, #14]
    e290:	069b      	lsls	r3, r3, #26
    e292:	d405      	bmi.n	e2a0 <smp_security_request+0xc8>
    e294:	4a0d      	ldr	r2, [pc, #52]	; (e2cc <smp_security_request+0xf4>)
    e296:	4b0e      	ldr	r3, [pc, #56]	; (e2d0 <smp_security_request+0xf8>)
    e298:	1ad2      	subs	r2, r2, r3
    e29a:	08d2      	lsrs	r2, r2, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    e29c:	0192      	lsls	r2, r2, #6
    e29e:	e7e8      	b.n	e272 <smp_security_request+0x9a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    e2a0:	7b0b      	ldrb	r3, [r1, #12]
    e2a2:	9300      	str	r3, [sp, #0]
    e2a4:	f101 0218 	add.w	r2, r1, #24
    e2a8:	f101 031a 	add.w	r3, r1, #26
    e2ac:	4620      	mov	r0, r4
    e2ae:	3110      	adds	r1, #16
    e2b0:	f014 ffc7 	bl	23242 <bt_conn_le_start_encryption>
    e2b4:	2800      	cmp	r0, #0
    e2b6:	da02      	bge.n	e2be <smp_security_request+0xe6>
		return BT_SMP_ERR_UNSPECIFIED;
    e2b8:	2008      	movs	r0, #8
}
    e2ba:	b003      	add	sp, #12
    e2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    e2be:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e2c0:	4630      	mov	r0, r6
    e2c2:	f016 fb57 	bl	24974 <atomic_set_bit>
    e2c6:	e791      	b.n	e1ec <smp_security_request+0x14>
    e2c8:	20003bc0 	.word	0x20003bc0
    e2cc:	00026940 	.word	0x00026940
    e2d0:	00026828 	.word	0x00026828
    e2d4:	0002a224 	.word	0x0002a224
    e2d8:	0002a24b 	.word	0x0002a24b

0000e2dc <smp_send_pairing_confirm>:
{
    e2dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    e2de:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    e2e2:	2c02      	cmp	r4, #2
{
    e2e4:	4605      	mov	r5, r0
	switch (smp->method) {
    e2e6:	d823      	bhi.n	e330 <smp_send_pairing_confirm+0x54>
    e2e8:	b144      	cbz	r4, e2fc <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    e2ea:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    e2ee:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    e2f2:	40dc      	lsrs	r4, r3
    e2f4:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    e2f8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    e2fc:	2103      	movs	r1, #3
    e2fe:	4628      	mov	r0, r5
    e300:	f016 fb46 	bl	24990 <smp_create_pdu.constprop.0>
	if (!buf) {
    e304:	4606      	mov	r6, r0
    e306:	b1a8      	cbz	r0, e334 <smp_send_pairing_confirm+0x58>
	req = net_buf_add(buf, sizeof(*req));
    e308:	2110      	movs	r1, #16
    e30a:	3008      	adds	r0, #8
    e30c:	f017 f8bd 	bl	2548a <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    e310:	9000      	str	r0, [sp, #0]
    e312:	4811      	ldr	r0, [pc, #68]	; (e358 <smp_send_pairing_confirm+0x7c>)
    e314:	4623      	mov	r3, r4
    e316:	6800      	ldr	r0, [r0, #0]
    e318:	f105 02df 	add.w	r2, r5, #223	; 0xdf
    e31c:	f205 110f 	addw	r1, r5, #271	; 0x10f
    e320:	f016 fa82 	bl	24828 <smp_f4>
    e324:	4604      	mov	r4, r0
    e326:	b148      	cbz	r0, e33c <smp_send_pairing_confirm+0x60>
		net_buf_unref(buf);
    e328:	4630      	mov	r0, r6
    e32a:	f00f fb77 	bl	1da1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    e32e:	e001      	b.n	e334 <smp_send_pairing_confirm+0x58>
	switch (smp->method) {
    e330:	2c03      	cmp	r4, #3
    e332:	d001      	beq.n	e338 <smp_send_pairing_confirm+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    e334:	2008      	movs	r0, #8
    e336:	e00c      	b.n	e352 <smp_send_pairing_confirm+0x76>
	switch (smp->method) {
    e338:	2400      	movs	r4, #0
    e33a:	e7df      	b.n	e2fc <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    e33c:	4602      	mov	r2, r0
    e33e:	4631      	mov	r1, r6
    e340:	4628      	mov	r0, r5
    e342:	f7ff fc35 	bl	dbb0 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    e346:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    e34a:	4621      	mov	r1, r4
    e34c:	f016 f9b3 	bl	246b6 <atomic_clear_bit>
	return 0;
    e350:	4620      	mov	r0, r4
}
    e352:	b002      	add	sp, #8
    e354:	bd70      	pop	{r4, r5, r6, pc}
    e356:	bf00      	nop
    e358:	20001c90 	.word	0x20001c90

0000e35c <smp_pairing_req>:
{
    e35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e360:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e362:	78fb      	ldrb	r3, [r7, #3]
    e364:	3b07      	subs	r3, #7
    e366:	2b09      	cmp	r3, #9
{
    e368:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e36a:	d903      	bls.n	e374 <smp_pairing_req+0x18>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    e36c:	2506      	movs	r5, #6
}
    e36e:	4628      	mov	r0, r5
    e370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    e374:	f8d0 8000 	ldr.w	r8, [r0]
	if (!conn->le.keys) {
    e378:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    e37c:	b163      	cbz	r3, e398 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    e37e:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
    e382:	210e      	movs	r1, #14
    e384:	4630      	mov	r0, r6
    e386:	f016 fa74 	bl	24872 <atomic_test_bit>
    e38a:	b988      	cbnz	r0, e3b0 <smp_pairing_req+0x54>
		int ret = smp_init(smp);
    e38c:	4620      	mov	r0, r4
    e38e:	f7ff fcd3 	bl	dd38 <smp_init>
		if (ret) {
    e392:	b168      	cbz	r0, e3b0 <smp_pairing_req+0x54>
			return ret;
    e394:	b2c5      	uxtb	r5, r0
    e396:	e7ea      	b.n	e36e <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e398:	f898 0008 	ldrb.w	r0, [r8, #8]
    e39c:	f108 0188 	add.w	r1, r8, #136	; 0x88
    e3a0:	f000 ffa0 	bl	f2e4 <bt_keys_get_addr>
    e3a4:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
    e3a8:	2800      	cmp	r0, #0
    e3aa:	d1e8      	bne.n	e37e <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    e3ac:	2508      	movs	r5, #8
    e3ae:	e7de      	b.n	e36e <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e3b0:	2301      	movs	r3, #1
    e3b2:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    e3b6:	683b      	ldr	r3, [r7, #0]
    e3b8:	f8c4 30c2 	str.w	r3, [r4, #194]	; 0xc2
    e3bc:	88bb      	ldrh	r3, [r7, #4]
    e3be:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    e3c2:	2302      	movs	r3, #2
    e3c4:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    e3c8:	78b8      	ldrb	r0, [r7, #2]
    e3ca:	f7ff fb37 	bl	da3c <get_auth.constprop.0>
    e3ce:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    e3d2:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    e3d4:	f7ff faa4 	bl	d920 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e3d8:	4b54      	ldr	r3, [pc, #336]	; (e52c <smp_pairing_req+0x1d0>)
	rsp->io_capability = get_io_capa();
    e3da:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e3de:	781b      	ldrb	r3, [r3, #0]
    e3e0:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e3e4:	2310      	movs	r3, #16
    e3e6:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    e3ea:	793b      	ldrb	r3, [r7, #4]
    e3ec:	f003 0303 	and.w	r3, r3, #3
    e3f0:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e3f4:	797b      	ldrb	r3, [r7, #5]
    e3f6:	f003 0301 	and.w	r3, r3, #1
    e3fa:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e3fe:	072b      	lsls	r3, r5, #28
    e400:	d50f      	bpl.n	e422 <smp_pairing_req+0xc6>
    e402:	78bb      	ldrb	r3, [r7, #2]
    e404:	071d      	lsls	r5, r3, #28
    e406:	d50c      	bpl.n	e422 <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    e408:	2105      	movs	r1, #5
    e40a:	4630      	mov	r0, r6
    e40c:	f016 fab2 	bl	24974 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    e410:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e414:	f003 0302 	and.w	r3, r3, #2
    e418:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    e41c:	2300      	movs	r3, #0
    e41e:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    e422:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e426:	0698      	lsls	r0, r3, #26
    e428:	d506      	bpl.n	e438 <smp_pairing_req+0xdc>
    e42a:	78bb      	ldrb	r3, [r7, #2]
    e42c:	0699      	lsls	r1, r3, #26
    e42e:	d503      	bpl.n	e438 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    e430:	2113      	movs	r1, #19
    e432:	4630      	mov	r0, r6
    e434:	f016 fa9e 	bl	24974 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    e438:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    e43c:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    e440:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e444:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    e448:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e44c:	07da      	lsls	r2, r3, #31
    e44e:	d506      	bpl.n	e45e <smp_pairing_req+0x102>
    e450:	78bb      	ldrb	r3, [r7, #2]
    e452:	07db      	lsls	r3, r3, #31
    e454:	d503      	bpl.n	e45e <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    e456:	210c      	movs	r1, #12
    e458:	4630      	mov	r0, r6
    e45a:	f016 fa8b 	bl	24974 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e45e:	2103      	movs	r1, #3
    e460:	4630      	mov	r0, r6
    e462:	f016 fa87 	bl	24974 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
    e466:	7839      	ldrb	r1, [r7, #0]
    e468:	4620      	mov	r0, r4
    e46a:	f7ff fbe9 	bl	dc40 <get_pair_method>
    e46e:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!update_keys_check(smp)) {
    e472:	4620      	mov	r0, r4
    e474:	f016 fa34 	bl	248e0 <update_keys_check>
    e478:	b908      	cbnz	r0, e47e <smp_pairing_req+0x122>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    e47a:	2503      	movs	r5, #3
    e47c:	e777      	b.n	e36e <smp_pairing_req+0x12>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e47e:	2105      	movs	r1, #5
    e480:	4630      	mov	r0, r6
    e482:	f016 f9f6 	bl	24872 <atomic_test_bit>
    e486:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e48a:	461d      	mov	r5, r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e48c:	bb20      	cbnz	r0, e4d8 <smp_pairing_req+0x17c>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e48e:	b993      	cbnz	r3, e4b6 <smp_pairing_req+0x15a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e490:	210e      	movs	r1, #14
    e492:	4630      	mov	r0, r6
    e494:	f016 f9ed 	bl	24872 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e498:	b968      	cbnz	r0, e4b6 <smp_pairing_req+0x15a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e49a:	4f25      	ldr	r7, [pc, #148]	; (e530 <smp_pairing_req+0x1d4>)
    e49c:	683b      	ldr	r3, [r7, #0]
    e49e:	b153      	cbz	r3, e4b6 <smp_pairing_req+0x15a>
	    bt_auth && bt_auth->pairing_confirm) {
    e4a0:	695b      	ldr	r3, [r3, #20]
    e4a2:	b143      	cbz	r3, e4b6 <smp_pairing_req+0x15a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e4a4:	4630      	mov	r0, r6
    e4a6:	2109      	movs	r1, #9
    e4a8:	f016 fa64 	bl	24974 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    e4ac:	683b      	ldr	r3, [r7, #0]
    e4ae:	6820      	ldr	r0, [r4, #0]
    e4b0:	695b      	ldr	r3, [r3, #20]
    e4b2:	4798      	blx	r3
		return 0;
    e4b4:	e75b      	b.n	e36e <smp_pairing_req+0x12>
	ret = send_pairing_rsp(smp);
    e4b6:	4620      	mov	r0, r4
    e4b8:	f016 fa8a 	bl	249d0 <send_pairing_rsp>
	if (ret) {
    e4bc:	4605      	mov	r5, r0
    e4be:	2800      	cmp	r0, #0
    e4c0:	f47f af55 	bne.w	e36e <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e4c4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e4c8:	2103      	movs	r1, #3
    e4ca:	f016 fa53 	bl	24974 <atomic_set_bit>
	return legacy_request_tk(smp);
    e4ce:	4620      	mov	r0, r4
}
    e4d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return legacy_request_tk(smp);
    e4d4:	f7ff bcca 	b.w	de6c <legacy_request_tk>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    e4d8:	f898 200a 	ldrb.w	r2, [r8, #10]
    e4dc:	2a04      	cmp	r2, #4
    e4de:	d115      	bne.n	e50c <smp_pairing_req+0x1b0>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    e4e0:	2b00      	cmp	r3, #0
    e4e2:	d0ca      	beq.n	e47a <smp_pairing_req+0x11e>
	return MIN(req->max_key_size, rsp->max_key_size);
    e4e4:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    e4e8:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
	     conn->required_sec_level == BT_SECURITY_L4) &&
    e4ec:	4293      	cmp	r3, r2
    e4ee:	bf28      	it	cs
    e4f0:	4613      	movcs	r3, r2
    e4f2:	2b10      	cmp	r3, #16
    e4f4:	f47f af3a 	bne.w	e36c <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    e4f8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e4fc:	210c      	movs	r1, #12
    e4fe:	f016 fa39 	bl	24974 <atomic_set_bit>
	return send_pairing_rsp(smp);
    e502:	4620      	mov	r0, r4
}
    e504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    e508:	f016 ba62 	b.w	249d0 <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e50c:	2b00      	cmp	r3, #0
    e50e:	d1f3      	bne.n	e4f8 <smp_pairing_req+0x19c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e510:	210e      	movs	r1, #14
    e512:	4630      	mov	r0, r6
    e514:	f016 f9ad 	bl	24872 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e518:	2800      	cmp	r0, #0
    e51a:	d1ed      	bne.n	e4f8 <smp_pairing_req+0x19c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e51c:	4f04      	ldr	r7, [pc, #16]	; (e530 <smp_pairing_req+0x1d4>)
    e51e:	683b      	ldr	r3, [r7, #0]
    e520:	2b00      	cmp	r3, #0
    e522:	d0e9      	beq.n	e4f8 <smp_pairing_req+0x19c>
	    bt_auth && bt_auth->pairing_confirm) {
    e524:	695b      	ldr	r3, [r3, #20]
    e526:	2b00      	cmp	r3, #0
    e528:	d0e6      	beq.n	e4f8 <smp_pairing_req+0x19c>
    e52a:	e7bb      	b.n	e4a4 <smp_pairing_req+0x148>
    e52c:	20003bbf 	.word	0x20003bbf
    e530:	20001be4 	.word	0x20001be4

0000e534 <sc_send_public_key>:
{
    e534:	b570      	push	{r4, r5, r6, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    e536:	210c      	movs	r1, #12
{
    e538:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    e53a:	f016 fa29 	bl	24990 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    e53e:	4604      	mov	r4, r0
    e540:	b1f8      	cbz	r0, e582 <sc_send_public_key+0x4e>
	req = net_buf_add(req_buf, sizeof(*req));
    e542:	2140      	movs	r1, #64	; 0x40
    e544:	3008      	adds	r0, #8
    e546:	f016 ffa0 	bl	2548a <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    e54a:	4b0f      	ldr	r3, [pc, #60]	; (e588 <sc_send_public_key+0x54>)
    e54c:	681b      	ldr	r3, [r3, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    e54e:	4602      	mov	r2, r0
    e550:	4601      	mov	r1, r0
    e552:	f103 0020 	add.w	r0, r3, #32
    e556:	f853 6b04 	ldr.w	r6, [r3], #4
    e55a:	f841 6b04 	str.w	r6, [r1], #4
    e55e:	4283      	cmp	r3, r0
    e560:	d1f9      	bne.n	e556 <sc_send_public_key+0x22>
    e562:	3220      	adds	r2, #32
    e564:	f103 0120 	add.w	r1, r3, #32
    e568:	f853 0b04 	ldr.w	r0, [r3], #4
    e56c:	f842 0b04 	str.w	r0, [r2], #4
    e570:	428b      	cmp	r3, r1
    e572:	d1f9      	bne.n	e568 <sc_send_public_key+0x34>
	smp_send(smp, req_buf, NULL, NULL);
    e574:	4628      	mov	r0, r5
    e576:	2200      	movs	r2, #0
    e578:	4621      	mov	r1, r4
    e57a:	f7ff fb19 	bl	dbb0 <smp_send.constprop.0>
	return 0;
    e57e:	2000      	movs	r0, #0
}
    e580:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e582:	2008      	movs	r0, #8
    e584:	e7fc      	b.n	e580 <sc_send_public_key+0x4c>
    e586:	bf00      	nop
    e588:	20001c90 	.word	0x20001c90

0000e58c <smp_public_key_slave>:
{
    e58c:	b538      	push	{r3, r4, r5, lr}
    e58e:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    e590:	f7ff ffd0 	bl	e534 <sc_send_public_key>
	if (err) {
    e594:	4605      	mov	r5, r0
    e596:	2800      	cmp	r0, #0
    e598:	d138      	bne.n	e60c <smp_public_key_slave+0x80>
	switch (smp->method) {
    e59a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e59e:	2b05      	cmp	r3, #5
    e5a0:	d838      	bhi.n	e614 <smp_public_key_slave+0x88>
    e5a2:	e8df f003 	tbb	[pc, r3]
    e5a6:	1903      	.short	0x1903
    e5a8:	3537030e 	.word	0x3537030e
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e5ac:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e5b0:	2104      	movs	r1, #4
    e5b2:	f016 f9df 	bl	24974 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    e5b6:	4620      	mov	r0, r4
    e5b8:	f7ff fe90 	bl	e2dc <smp_send_pairing_confirm>
		if (err) {
    e5bc:	b1d8      	cbz	r0, e5f6 <smp_public_key_slave+0x6a>
    e5be:	4605      	mov	r5, r0
    e5c0:	e024      	b.n	e60c <smp_public_key_slave+0x80>
		err = display_passkey(smp);
    e5c2:	4620      	mov	r0, r4
    e5c4:	f7ff fb8c 	bl	dce0 <display_passkey>
		if (err) {
    e5c8:	2800      	cmp	r0, #0
    e5ca:	d1f8      	bne.n	e5be <smp_public_key_slave+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e5cc:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e5ce:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e5d2:	f016 f9cf 	bl	24974 <atomic_set_bit>
		break;
    e5d6:	e00e      	b.n	e5f6 <smp_public_key_slave+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e5d8:	2103      	movs	r1, #3
    e5da:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e5de:	f016 f9c9 	bl	24974 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e5e2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e5e6:	2109      	movs	r1, #9
    e5e8:	f016 f9c4 	bl	24974 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    e5ec:	4b0a      	ldr	r3, [pc, #40]	; (e618 <smp_public_key_slave+0x8c>)
    e5ee:	6820      	ldr	r0, [r4, #0]
    e5f0:	681b      	ldr	r3, [r3, #0]
    e5f2:	685b      	ldr	r3, [r3, #4]
    e5f4:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    e5f6:	4909      	ldr	r1, [pc, #36]	; (e61c <smp_public_key_slave+0x90>)
    e5f8:	f204 100f 	addw	r0, r4, #271	; 0x10f
    e5fc:	f7fb fd04 	bl	a008 <bt_dh_key_gen>
    e600:	b940      	cbnz	r0, e614 <smp_public_key_slave+0x88>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    e602:	2107      	movs	r1, #7
    e604:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e608:	f016 f9b4 	bl	24974 <atomic_set_bit>
}
    e60c:	4628      	mov	r0, r5
    e60e:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e610:	2104      	movs	r1, #4
    e612:	e7dc      	b.n	e5ce <smp_public_key_slave+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    e614:	2508      	movs	r5, #8
    e616:	e7f9      	b.n	e60c <smp_public_key_slave+0x80>
    e618:	20001be4 	.word	0x20001be4
    e61c:	0000e6c1 	.word	0x0000e6c1

0000e620 <smp_pairing_complete>:
{
    e620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e624:	f8df 8090 	ldr.w	r8, [pc, #144]	; e6b8 <smp_pairing_complete+0x98>
    e628:	4604      	mov	r4, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    e62a:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (!status) {
    e62e:	460d      	mov	r5, r1
    e630:	b981      	cbnz	r1, e654 <smp_pairing_complete+0x34>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    e632:	210c      	movs	r1, #12
    e634:	4638      	mov	r0, r7
    e636:	f016 f91c 	bl	24872 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    e63a:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    e63e:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    e640:	b11b      	cbz	r3, e64a <smp_pairing_complete+0x2a>
    e642:	699b      	ldr	r3, [r3, #24]
    e644:	b10b      	cbz	r3, e64a <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    e646:	6820      	ldr	r0, [r4, #0]
    e648:	4798      	blx	r3
	smp_reset(smp);
    e64a:	4620      	mov	r0, r4
}
    e64c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    e650:	f016 bb9e 	b.w	24d90 <smp_reset>
	switch (smp_err) {
    e654:	1e4b      	subs	r3, r1, #1
    e656:	b2db      	uxtb	r3, r3
    e658:	2b0d      	cmp	r3, #13
    e65a:	bf9c      	itt	ls
    e65c:	4a17      	ldrls	r2, [pc, #92]	; (e6bc <smp_pairing_complete+0x9c>)
    e65e:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    e660:	6803      	ldr	r3, [r0, #0]
    e662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    e666:	bf88      	it	hi
    e668:	2608      	movhi	r6, #8
		if (smp->chan.chan.conn->le.keys &&
    e66a:	b153      	cbz	r3, e682 <smp_pairing_complete+0x62>
    e66c:	7b1b      	ldrb	r3, [r3, #12]
    e66e:	b9db      	cbnz	r3, e6a8 <smp_pairing_complete+0x88>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    e670:	6823      	ldr	r3, [r4, #0]
    e672:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    e676:	f016 fe9d 	bl	253b4 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    e67a:	6823      	ldr	r3, [r4, #0]
    e67c:	2200      	movs	r2, #0
    e67e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    e682:	2102      	movs	r1, #2
    e684:	4638      	mov	r0, r7
    e686:	f016 f8f4 	bl	24872 <atomic_test_bit>
    e68a:	b920      	cbnz	r0, e696 <smp_pairing_complete+0x76>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    e68c:	6820      	ldr	r0, [r4, #0]
    e68e:	4632      	mov	r2, r6
    e690:	4629      	mov	r1, r5
    e692:	f7fb fe1d 	bl	a2d0 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    e696:	f8d8 3000 	ldr.w	r3, [r8]
    e69a:	2b00      	cmp	r3, #0
    e69c:	d0d5      	beq.n	e64a <smp_pairing_complete+0x2a>
    e69e:	69db      	ldr	r3, [r3, #28]
    e6a0:	2b00      	cmp	r3, #0
    e6a2:	d0d2      	beq.n	e64a <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    e6a4:	4631      	mov	r1, r6
    e6a6:	e7ce      	b.n	e646 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    e6a8:	2102      	movs	r1, #2
    e6aa:	4638      	mov	r0, r7
    e6ac:	f016 f8e1 	bl	24872 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    e6b0:	2800      	cmp	r0, #0
    e6b2:	d1dd      	bne.n	e670 <smp_pairing_complete+0x50>
    e6b4:	e7e5      	b.n	e682 <smp_pairing_complete+0x62>
    e6b6:	bf00      	nop
    e6b8:	20001be4 	.word	0x20001be4
    e6bc:	0002a383 	.word	0x0002a383

0000e6c0 <bt_smp_dhkey_ready>:
{
    e6c0:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    e6c2:	2107      	movs	r1, #7
{
    e6c4:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    e6c6:	481d      	ldr	r0, [pc, #116]	; (e73c <bt_smp_dhkey_ready+0x7c>)
    e6c8:	f016 f93c 	bl	24944 <atomic_test_and_clear_bit>
    e6cc:	4b1c      	ldr	r3, [pc, #112]	; (e740 <bt_smp_dhkey_ready+0x80>)
    e6ce:	b3a0      	cbz	r0, e73a <bt_smp_dhkey_ready+0x7a>
	if (!dhkey) {
    e6d0:	b92c      	cbnz	r4, e6de <bt_smp_dhkey_ready+0x1e>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    e6d2:	210b      	movs	r1, #11
    e6d4:	4618      	mov	r0, r3
}
    e6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    e6da:	f016 bb88 	b.w	24dee <smp_error>
    e6de:	4620      	mov	r0, r4
    e6e0:	f203 124f 	addw	r2, r3, #335	; 0x14f
    e6e4:	f104 0120 	add.w	r1, r4, #32
    e6e8:	f850 4b04 	ldr.w	r4, [r0], #4
    e6ec:	f842 4b04 	str.w	r4, [r2], #4
    e6f0:	4288      	cmp	r0, r1
    e6f2:	d1f9      	bne.n	e6e8 <bt_smp_dhkey_ready+0x28>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    e6f4:	4811      	ldr	r0, [pc, #68]	; (e73c <bt_smp_dhkey_ready+0x7c>)
    e6f6:	2109      	movs	r1, #9
    e6f8:	f016 f8bb 	bl	24872 <atomic_test_bit>
    e6fc:	b128      	cbz	r0, e70a <bt_smp_dhkey_ready+0x4a>
}
    e6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    e702:	480e      	ldr	r0, [pc, #56]	; (e73c <bt_smp_dhkey_ready+0x7c>)
    e704:	2108      	movs	r1, #8
    e706:	f016 b935 	b.w	24974 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    e70a:	480c      	ldr	r0, [pc, #48]	; (e73c <bt_smp_dhkey_ready+0x7c>)
    e70c:	210f      	movs	r1, #15
    e70e:	f016 f8b0 	bl	24872 <atomic_test_bit>
    e712:	2800      	cmp	r0, #0
    e714:	d1f3      	bne.n	e6fe <bt_smp_dhkey_ready+0x3e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    e716:	4809      	ldr	r0, [pc, #36]	; (e73c <bt_smp_dhkey_ready+0x7c>)
    e718:	2108      	movs	r1, #8
    e71a:	f016 f8aa 	bl	24872 <atomic_test_bit>
    e71e:	b160      	cbz	r0, e73a <bt_smp_dhkey_ready+0x7a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e720:	681b      	ldr	r3, [r3, #0]
			err = compute_and_send_master_dhcheck(smp);
    e722:	4807      	ldr	r0, [pc, #28]	; (e740 <bt_smp_dhkey_ready+0x80>)
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e724:	78db      	ldrb	r3, [r3, #3]
    e726:	b92b      	cbnz	r3, e734 <bt_smp_dhkey_ready+0x74>
			err = compute_and_send_master_dhcheck(smp);
    e728:	f016 f9a8 	bl	24a7c <compute_and_send_master_dhcheck>
		if (err) {
    e72c:	4601      	mov	r1, r0
    e72e:	b120      	cbz	r0, e73a <bt_smp_dhkey_ready+0x7a>
			smp_error(smp, err);
    e730:	4803      	ldr	r0, [pc, #12]	; (e740 <bt_smp_dhkey_ready+0x80>)
    e732:	e7d0      	b.n	e6d6 <bt_smp_dhkey_ready+0x16>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    e734:	f016 f9fe 	bl	24b34 <compute_and_check_and_send_slave_dhcheck>
    e738:	e7f8      	b.n	e72c <bt_smp_dhkey_ready+0x6c>
}
    e73a:	bd10      	pop	{r4, pc}
    e73c:	2000154c 	.word	0x2000154c
    e740:	20001490 	.word	0x20001490

0000e744 <bt_smp_recv>:
{
    e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    e746:	898b      	ldrh	r3, [r1, #12]
{
    e748:	4604      	mov	r4, r0
    e74a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    e74c:	b95b      	cbnz	r3, e766 <bt_smp_recv+0x22>
    e74e:	4935      	ldr	r1, [pc, #212]	; (e824 <bt_smp_recv+0xe0>)
    e750:	4b35      	ldr	r3, [pc, #212]	; (e828 <bt_smp_recv+0xe4>)
		BT_ERR("Too small SMP PDU received");
    e752:	4836      	ldr	r0, [pc, #216]	; (e82c <bt_smp_recv+0xe8>)
    e754:	1ac9      	subs	r1, r1, r3
    e756:	08c9      	lsrs	r1, r1, #3
    e758:	0189      	lsls	r1, r1, #6
    e75a:	f041 0101 	orr.w	r1, r1, #1
    e75e:	f012 fc97 	bl	21090 <log_0>
}
    e762:	2000      	movs	r0, #0
    e764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    e766:	2101      	movs	r1, #1
    e768:	f105 0008 	add.w	r0, r5, #8
    e76c:	f016 febe 	bl	254ec <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e770:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    e772:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e774:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e778:	f016 f87b 	bl	24872 <atomic_test_bit>
    e77c:	7831      	ldrb	r1, [r6, #0]
    e77e:	b150      	cbz	r0, e796 <bt_smp_recv+0x52>
    e780:	4b29      	ldr	r3, [pc, #164]	; (e828 <bt_smp_recv+0xe4>)
    e782:	4a28      	ldr	r2, [pc, #160]	; (e824 <bt_smp_recv+0xe0>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    e784:	482a      	ldr	r0, [pc, #168]	; (e830 <bt_smp_recv+0xec>)
    e786:	1ad2      	subs	r2, r2, r3
    e788:	08d2      	lsrs	r2, r2, #3
    e78a:	0192      	lsls	r2, r2, #6
    e78c:	f042 0202 	orr.w	r2, r2, #2
    e790:	f012 fc8b 	bl	210aa <log_1>
		return 0;
    e794:	e7e5      	b.n	e762 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    e796:	290d      	cmp	r1, #13
    e798:	d803      	bhi.n	e7a2 <bt_smp_recv+0x5e>
    e79a:	4f26      	ldr	r7, [pc, #152]	; (e834 <bt_smp_recv+0xf0>)
    e79c:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    e7a0:	b973      	cbnz	r3, e7c0 <bt_smp_recv+0x7c>
    e7a2:	4b21      	ldr	r3, [pc, #132]	; (e828 <bt_smp_recv+0xe4>)
    e7a4:	4a1f      	ldr	r2, [pc, #124]	; (e824 <bt_smp_recv+0xe0>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    e7a6:	4824      	ldr	r0, [pc, #144]	; (e838 <bt_smp_recv+0xf4>)
    e7a8:	1ad2      	subs	r2, r2, r3
    e7aa:	08d2      	lsrs	r2, r2, #3
    e7ac:	0192      	lsls	r2, r2, #6
    e7ae:	f042 0202 	orr.w	r2, r2, #2
    e7b2:	f012 fc7a 	bl	210aa <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    e7b6:	2107      	movs	r1, #7
		smp_error(smp, err);
    e7b8:	4620      	mov	r0, r4
    e7ba:	f016 fb18 	bl	24dee <smp_error>
    e7be:	e7d0      	b.n	e762 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    e7c0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e7c4:	f016 f8be 	bl	24944 <atomic_test_and_clear_bit>
    e7c8:	7831      	ldrb	r1, [r6, #0]
    e7ca:	b970      	cbnz	r0, e7ea <bt_smp_recv+0xa6>
    e7cc:	4b16      	ldr	r3, [pc, #88]	; (e828 <bt_smp_recv+0xe4>)
    e7ce:	4a15      	ldr	r2, [pc, #84]	; (e824 <bt_smp_recv+0xe0>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    e7d0:	481a      	ldr	r0, [pc, #104]	; (e83c <bt_smp_recv+0xf8>)
    e7d2:	1ad2      	subs	r2, r2, r3
    e7d4:	08d2      	lsrs	r2, r2, #3
    e7d6:	0192      	lsls	r2, r2, #6
    e7d8:	f042 0202 	orr.w	r2, r2, #2
    e7dc:	f012 fc65 	bl	210aa <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    e7e0:	7833      	ldrb	r3, [r6, #0]
    e7e2:	2b05      	cmp	r3, #5
    e7e4:	d0bd      	beq.n	e762 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e7e6:	2108      	movs	r1, #8
    e7e8:	e7e6      	b.n	e7b8 <bt_smp_recv+0x74>
	if (buf->len != handlers[hdr->code].expect_len) {
    e7ea:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    e7ee:	89a8      	ldrh	r0, [r5, #12]
    e7f0:	791b      	ldrb	r3, [r3, #4]
    e7f2:	4283      	cmp	r3, r0
    e7f4:	d00d      	beq.n	e812 <bt_smp_recv+0xce>
    e7f6:	4a0c      	ldr	r2, [pc, #48]	; (e828 <bt_smp_recv+0xe4>)
    e7f8:	4b0a      	ldr	r3, [pc, #40]	; (e824 <bt_smp_recv+0xe0>)
    e7fa:	1a9b      	subs	r3, r3, r2
    e7fc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    e7fe:	019b      	lsls	r3, r3, #6
    e800:	460a      	mov	r2, r1
    e802:	f043 0301 	orr.w	r3, r3, #1
    e806:	4601      	mov	r1, r0
    e808:	480d      	ldr	r0, [pc, #52]	; (e840 <bt_smp_recv+0xfc>)
    e80a:	f012 fc62 	bl	210d2 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    e80e:	210a      	movs	r1, #10
    e810:	e7d2      	b.n	e7b8 <bt_smp_recv+0x74>
	err = handlers[hdr->code].func(smp, buf);
    e812:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    e816:	4620      	mov	r0, r4
    e818:	4629      	mov	r1, r5
    e81a:	4798      	blx	r3
	if (err) {
    e81c:	4601      	mov	r1, r0
    e81e:	2800      	cmp	r0, #0
    e820:	d09f      	beq.n	e762 <bt_smp_recv+0x1e>
    e822:	e7c9      	b.n	e7b8 <bt_smp_recv+0x74>
    e824:	00026940 	.word	0x00026940
    e828:	00026828 	.word	0x00026828
    e82c:	0002a27a 	.word	0x0002a27a
    e830:	0002a295 	.word	0x0002a295
    e834:	000271f0 	.word	0x000271f0
    e838:	0002a2c6 	.word	0x0002a2c6
    e83c:	0002a2e0 	.word	0x0002a2e0
    e840:	00029ef0 	.word	0x00029ef0

0000e844 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    e844:	4b1f      	ldr	r3, [pc, #124]	; (e8c4 <bt_smp_pkey_ready+0x80>)
{
    e846:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    e848:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    e84a:	b958      	cbnz	r0, e864 <bt_smp_pkey_ready+0x20>
    e84c:	491e      	ldr	r1, [pc, #120]	; (e8c8 <bt_smp_pkey_ready+0x84>)
    e84e:	4b1f      	ldr	r3, [pc, #124]	; (e8cc <bt_smp_pkey_ready+0x88>)
		BT_WARN("Public key not available");
    e850:	481f      	ldr	r0, [pc, #124]	; (e8d0 <bt_smp_pkey_ready+0x8c>)
    e852:	1ac9      	subs	r1, r1, r3
    e854:	08c9      	lsrs	r1, r1, #3
    e856:	0189      	lsls	r1, r1, #6
}
    e858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    e85c:	f041 0102 	orr.w	r1, r1, #2
    e860:	f012 bc16 	b.w	21090 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e864:	4c1b      	ldr	r4, [pc, #108]	; (e8d4 <bt_smp_pkey_ready+0x90>)
	z_impl_k_sem_give(sem);
    e866:	481c      	ldr	r0, [pc, #112]	; (e8d8 <bt_smp_pkey_ready+0x94>)
    e868:	f010 fe3a 	bl	1f4e0 <z_impl_k_sem_give>
    e86c:	f3bf 8f5b 	dmb	ish
    e870:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    e874:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    e878:	065b      	lsls	r3, r3, #25
    e87a:	d517      	bpl.n	e8ac <bt_smp_pkey_ready+0x68>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e87c:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e87e:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
    e880:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e882:	b9a3      	cbnz	r3, e8ae <bt_smp_pkey_ready+0x6a>
			err = sc_send_public_key(smp);
    e884:	f7ff fe56 	bl	e534 <sc_send_public_key>
			if (err) {
    e888:	4601      	mov	r1, r0
    e88a:	b110      	cbz	r0, e892 <bt_smp_pkey_ready+0x4e>
				smp_error(smp, err);
    e88c:	4620      	mov	r0, r4
    e88e:	f016 faae 	bl	24dee <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e892:	f3bf 8f5b 	dmb	ish
    e896:	4b11      	ldr	r3, [pc, #68]	; (e8dc <bt_smp_pkey_ready+0x98>)
    e898:	e853 2f00 	ldrex	r2, [r3]
    e89c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    e8a0:	e843 2100 	strex	r1, r2, [r3]
    e8a4:	2900      	cmp	r1, #0
    e8a6:	d1f7      	bne.n	e898 <bt_smp_pkey_ready+0x54>
    e8a8:	f3bf 8f5b 	dmb	ish
}
    e8ac:	bd10      	pop	{r4, pc}
		err = smp_public_key_slave(smp);
    e8ae:	f7ff fe6d 	bl	e58c <smp_public_key_slave>
		if (err) {
    e8b2:	4601      	mov	r1, r0
    e8b4:	2800      	cmp	r0, #0
    e8b6:	d0f9      	beq.n	e8ac <bt_smp_pkey_ready+0x68>
			smp_error(smp, err);
    e8b8:	4620      	mov	r0, r4
}
    e8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    e8be:	f016 ba96 	b.w	24dee <smp_error>
    e8c2:	bf00      	nop
    e8c4:	20001c90 	.word	0x20001c90
    e8c8:	00026940 	.word	0x00026940
    e8cc:	00026828 	.word	0x00026828
    e8d0:	0002a2fb 	.word	0x0002a2fb
    e8d4:	20001490 	.word	0x20001490
    e8d8:	20000f98 	.word	0x20000f98
    e8dc:	20001548 	.word	0x20001548

0000e8e0 <smp_timeout>:
    e8e0:	4b0b      	ldr	r3, [pc, #44]	; (e910 <smp_timeout+0x30>)
    e8e2:	490c      	ldr	r1, [pc, #48]	; (e914 <smp_timeout+0x34>)
{
    e8e4:	b510      	push	{r4, lr}
    e8e6:	1ac9      	subs	r1, r1, r3
    e8e8:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    e8ea:	0189      	lsls	r1, r1, #6
{
    e8ec:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    e8ee:	f041 0101 	orr.w	r1, r1, #1
    e8f2:	4809      	ldr	r0, [pc, #36]	; (e918 <smp_timeout+0x38>)
    e8f4:	f012 fbcc 	bl	21090 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    e8f8:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
    e8fc:	2108      	movs	r1, #8
    e8fe:	f7ff fe8f 	bl	e620 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    e902:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    e906:	2104      	movs	r1, #4
}
    e908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    e90c:	f016 b832 	b.w	24974 <atomic_set_bit>
    e910:	00026828 	.word	0x00026828
    e914:	00026940 	.word	0x00026940
    e918:	0002a314 	.word	0x0002a314

0000e91c <smp_pairing_failed>:
{
    e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e91e:	4a15      	ldr	r2, [pc, #84]	; (e974 <smp_pairing_failed+0x58>)
    e920:	4b15      	ldr	r3, [pc, #84]	; (e978 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    e922:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e924:	4605      	mov	r5, r0
    e926:	1ad2      	subs	r2, r2, r3
    e928:	08d2      	lsrs	r2, r2, #3
    e92a:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    e92e:	7831      	ldrb	r1, [r6, #0]
    e930:	0192      	lsls	r2, r2, #6
{
    e932:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    e934:	f042 0201 	orr.w	r2, r2, #1
    e938:	4810      	ldr	r0, [pc, #64]	; (e97c <smp_pairing_failed+0x60>)
    e93a:	f012 fbb6 	bl	210aa <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    e93e:	2109      	movs	r1, #9
    e940:	4628      	mov	r0, r5
    e942:	f015 ffff 	bl	24944 <atomic_test_and_clear_bit>
    e946:	b140      	cbz	r0, e95a <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    e948:	4b0d      	ldr	r3, [pc, #52]	; (e980 <smp_pairing_failed+0x64>)
    e94a:	681b      	ldr	r3, [r3, #0]
    e94c:	b963      	cbnz	r3, e968 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    e94e:	4620      	mov	r0, r4
    e950:	7831      	ldrb	r1, [r6, #0]
    e952:	f7ff fe65 	bl	e620 <smp_pairing_complete>
}
    e956:	2000      	movs	r0, #0
    e958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    e95a:	210a      	movs	r1, #10
    e95c:	4628      	mov	r0, r5
    e95e:	f015 fff1 	bl	24944 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    e962:	2800      	cmp	r0, #0
    e964:	d1f0      	bne.n	e948 <smp_pairing_failed+0x2c>
    e966:	e7f2      	b.n	e94e <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    e968:	691b      	ldr	r3, [r3, #16]
    e96a:	2b00      	cmp	r3, #0
    e96c:	d0ef      	beq.n	e94e <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    e96e:	4638      	mov	r0, r7
    e970:	4798      	blx	r3
    e972:	e7ec      	b.n	e94e <smp_pairing_failed+0x32>
    e974:	00026940 	.word	0x00026940
    e978:	00026828 	.word	0x00026828
    e97c:	0002a320 	.word	0x0002a320
    e980:	20001be4 	.word	0x20001be4

0000e984 <smp_master_ident>:
{
    e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e986:	4604      	mov	r4, r0
    e988:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    e98a:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e98e:	210c      	movs	r1, #12
    e990:	f015 ff6f 	bl	24872 <atomic_test_bit>
    e994:	b350      	cbz	r0, e9ec <smp_master_ident+0x68>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e996:	f105 0688 	add.w	r6, r5, #136	; 0x88
    e99a:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    e99c:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e99e:	4632      	mov	r2, r6
    e9a0:	2004      	movs	r0, #4
    e9a2:	f016 fcf3 	bl	2538c <bt_keys_get_type>
		if (!keys) {
    e9a6:	b990      	cbnz	r0, e9ce <smp_master_ident+0x4a>
    e9a8:	4a22      	ldr	r2, [pc, #136]	; (ea34 <smp_master_ident+0xb0>)
    e9aa:	4c23      	ldr	r4, [pc, #140]	; (ea38 <smp_master_ident+0xb4>)
			BT_ERR("Unable to get keys for %s",
    e9ac:	4630      	mov	r0, r6
    e9ae:	1aa4      	subs	r4, r4, r2
    e9b0:	f7f8 fb98 	bl	70e4 <bt_addr_le_str_real>
    e9b4:	f7f6 fc98 	bl	52e8 <log_strdup>
    e9b8:	08e4      	lsrs	r4, r4, #3
    e9ba:	01a4      	lsls	r4, r4, #6
    e9bc:	f044 0401 	orr.w	r4, r4, #1
    e9c0:	4601      	mov	r1, r0
    e9c2:	4622      	mov	r2, r4
    e9c4:	481d      	ldr	r0, [pc, #116]	; (ea3c <smp_master_ident+0xb8>)
    e9c6:	f012 fb70 	bl	210aa <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e9ca:	2008      	movs	r0, #8
}
    e9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e9ce:	463a      	mov	r2, r7
    e9d0:	f832 3b02 	ldrh.w	r3, [r2], #2
    e9d4:	8303      	strh	r3, [r0, #24]
    e9d6:	f8d7 3002 	ldr.w	r3, [r7, #2]
    e9da:	6103      	str	r3, [r0, #16]
    e9dc:	6853      	ldr	r3, [r2, #4]
    e9de:	6143      	str	r3, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    e9e0:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    e9e4:	f023 0301 	bic.w	r3, r3, #1
    e9e8:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    e9ec:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    e9f0:	079a      	lsls	r2, r3, #30
    e9f2:	d50b      	bpl.n	ea0c <smp_master_ident+0x88>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    e9f4:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e9f6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e9fa:	f015 ffbb 	bl	24974 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e9fe:	78eb      	ldrb	r3, [r5, #3]
    ea00:	b143      	cbz	r3, ea14 <smp_master_ident+0x90>
	if (!smp->local_dist && !smp->remote_dist) {
    ea02:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    ea06:	b17d      	cbz	r5, ea28 <smp_master_ident+0xa4>
	return 0;
    ea08:	2000      	movs	r0, #0
    ea0a:	e7df      	b.n	e9cc <smp_master_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ea0c:	075b      	lsls	r3, r3, #29
    ea0e:	d5f6      	bpl.n	e9fe <smp_master_ident+0x7a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ea10:	210a      	movs	r1, #10
    ea12:	e7f0      	b.n	e9f6 <smp_master_ident+0x72>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ea14:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    ea18:	2b00      	cmp	r3, #0
    ea1a:	d1f2      	bne.n	ea02 <smp_master_ident+0x7e>
		err = bt_smp_distribute_keys(smp);
    ea1c:	4620      	mov	r0, r4
    ea1e:	f7ff faaf 	bl	df80 <bt_smp_distribute_keys>
		if (err) {
    ea22:	2800      	cmp	r0, #0
    ea24:	d0ed      	beq.n	ea02 <smp_master_ident+0x7e>
    ea26:	e7d1      	b.n	e9cc <smp_master_ident+0x48>
		smp_pairing_complete(smp, 0);
    ea28:	4620      	mov	r0, r4
    ea2a:	4629      	mov	r1, r5
    ea2c:	f7ff fdf8 	bl	e620 <smp_pairing_complete>
	return 0;
    ea30:	4628      	mov	r0, r5
    ea32:	e7cb      	b.n	e9cc <smp_master_ident+0x48>
    ea34:	00026828 	.word	0x00026828
    ea38:	00026940 	.word	0x00026940
    ea3c:	0002a15e 	.word	0x0002a15e

0000ea40 <bt_smp_connected>:
{
    ea40:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    ea42:	4905      	ldr	r1, [pc, #20]	; (ea58 <bt_smp_connected+0x18>)
{
    ea44:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    ea46:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    ea4a:	f017 fa20 	bl	25e8e <k_delayed_work_init>
	smp_reset(smp);
    ea4e:	4620      	mov	r0, r4
}
    ea50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    ea54:	f016 b99c 	b.w	24d90 <smp_reset>
    ea58:	0000e8e1 	.word	0x0000e8e1

0000ea5c <smp_ident_addr_info>:
{
    ea5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    ea60:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    ea62:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ea64:	783b      	ldrb	r3, [r7, #0]
{
    ea66:	4605      	mov	r5, r0
    ea68:	b31b      	cbz	r3, eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
	if (!bt_addr_le_is_identity(&req->addr)) {
    ea6a:	79bb      	ldrb	r3, [r7, #6]
    ea6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ea70:	2bc0      	cmp	r3, #192	; 0xc0
    ea72:	d01e      	beq.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    ea74:	4b48      	ldr	r3, [pc, #288]	; (eb98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x138>)
    ea76:	4d49      	ldr	r5, [pc, #292]	; (eb9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    ea78:	4638      	mov	r0, r7
    ea7a:	1aed      	subs	r5, r5, r3
    ea7c:	f7f8 fb32 	bl	70e4 <bt_addr_le_str_real>
    ea80:	f7f6 fc32 	bl	52e8 <log_strdup>
    ea84:	08ed      	lsrs	r5, r5, #3
    ea86:	01ad      	lsls	r5, r5, #6
    ea88:	f045 0501 	orr.w	r5, r5, #1
    ea8c:	4601      	mov	r1, r0
    ea8e:	462a      	mov	r2, r5
    ea90:	4843      	ldr	r0, [pc, #268]	; (eba0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x140>)
    ea92:	f012 fb0a 	bl	210aa <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    ea96:	f104 0088 	add.w	r0, r4, #136	; 0x88
    ea9a:	f7f8 fb23 	bl	70e4 <bt_addr_le_str_real>
    ea9e:	f7f6 fc23 	bl	52e8 <log_strdup>
    eaa2:	462a      	mov	r2, r5
    eaa4:	4601      	mov	r1, r0
    eaa6:	483f      	ldr	r0, [pc, #252]	; (eba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x144>)
    eaa8:	f012 faff 	bl	210aa <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    eaac:	200a      	movs	r0, #10
}
    eaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    eab2:	210c      	movs	r1, #12
    eab4:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    eab8:	f015 fedb 	bl	24872 <atomic_test_bit>
    eabc:	2800      	cmp	r0, #0
    eabe:	d044      	beq.n	eb4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xea>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    eac0:	f104 0888 	add.w	r8, r4, #136	; 0x88
    eac4:	7a21      	ldrb	r1, [r4, #8]
    eac6:	4642      	mov	r2, r8
    eac8:	2002      	movs	r0, #2
    eaca:	f016 fc5f 	bl	2538c <bt_keys_get_type>
		if (!keys) {
    eace:	4606      	mov	r6, r0
    ead0:	b990      	cbnz	r0, eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    ead2:	4a31      	ldr	r2, [pc, #196]	; (eb98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x138>)
    ead4:	4c31      	ldr	r4, [pc, #196]	; (eb9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13c>)
			BT_ERR("Unable to get keys for %s",
    ead6:	4640      	mov	r0, r8
    ead8:	1aa4      	subs	r4, r4, r2
    eada:	f7f8 fb03 	bl	70e4 <bt_addr_le_str_real>
    eade:	f7f6 fc03 	bl	52e8 <log_strdup>
    eae2:	08e4      	lsrs	r4, r4, #3
    eae4:	01a4      	lsls	r4, r4, #6
    eae6:	f044 0401 	orr.w	r4, r4, #1
    eaea:	4601      	mov	r1, r0
    eaec:	4622      	mov	r2, r4
    eaee:	482e      	ldr	r0, [pc, #184]	; (eba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148>)
    eaf0:	f012 fadb 	bl	210aa <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    eaf4:	2008      	movs	r0, #8
    eaf6:	e7da      	b.n	eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    eaf8:	78e3      	ldrb	r3, [r4, #3]
    eafa:	bbd3      	cbnz	r3, eb72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x112>
			dst = &conn->le.resp_addr;
    eafc:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    eb00:	781a      	ldrb	r2, [r3, #0]
    eb02:	2a01      	cmp	r2, #1
    eb04:	d11e      	bne.n	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
		if (bt_addr_le_is_rpa(dst)) {
    eb06:	799a      	ldrb	r2, [r3, #6]
    eb08:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    eb0c:	2a40      	cmp	r2, #64	; 0x40
    eb0e:	d119      	bne.n	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
    eb10:	f8d3 2001 	ldr.w	r2, [r3, #1]
    eb14:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
    eb18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    eb1c:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    eb1e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    eb22:	b17b      	cbz	r3, eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    eb24:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    eb28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    eb2c:	2bc0      	cmp	r3, #192	; 0xc0
    eb2e:	d009      	beq.n	eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>
				bt_addr_le_copy(&keys->addr, &req->addr);
    eb30:	4639      	mov	r1, r7
    eb32:	1c70      	adds	r0, r6, #1
    eb34:	f015 fdce 	bl	246d4 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
    eb38:	4640      	mov	r0, r8
    eb3a:	f015 fdcb 	bl	246d4 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
    eb3e:	4620      	mov	r0, r4
    eb40:	f7fb fbac 	bl	a29c <bt_conn_identity_resolved>
		bt_id_add(keys);
    eb44:	4630      	mov	r0, r6
    eb46:	f7f9 ff9f 	bl	8a88 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    eb4a:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    eb4e:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    eb52:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    eb54:	f885 21a1 	strb.w	r2, [r5, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    eb58:	d504      	bpl.n	eb64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x104>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    eb5a:	210a      	movs	r1, #10
    eb5c:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    eb60:	f015 ff08 	bl	24974 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    eb64:	78e3      	ldrb	r3, [r4, #3]
    eb66:	b13b      	cbz	r3, eb78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118>
	if (!smp->local_dist && !smp->remote_dist) {
    eb68:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    eb6c:	b174      	cbz	r4, eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>
	return 0;
    eb6e:	2000      	movs	r0, #0
    eb70:	e79d      	b.n	eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
			dst = &conn->le.init_addr;
    eb72:	f104 038f 	add.w	r3, r4, #143	; 0x8f
    eb76:	e7c3      	b.n	eb00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa0>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    eb78:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d1f3      	bne.n	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
		err = bt_smp_distribute_keys(smp);
    eb80:	4628      	mov	r0, r5
    eb82:	f7ff f9fd 	bl	df80 <bt_smp_distribute_keys>
		if (err) {
    eb86:	2800      	cmp	r0, #0
    eb88:	d0ee      	beq.n	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    eb8a:	e790      	b.n	eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
		smp_pairing_complete(smp, 0);
    eb8c:	4628      	mov	r0, r5
    eb8e:	4621      	mov	r1, r4
    eb90:	f7ff fd46 	bl	e620 <smp_pairing_complete>
	return 0;
    eb94:	4620      	mov	r0, r4
    eb96:	e78a      	b.n	eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
    eb98:	00026828 	.word	0x00026828
    eb9c:	00026940 	.word	0x00026940
    eba0:	0002a32c 	.word	0x0002a32c
    eba4:	0002a1ce 	.word	0x0002a1ce
    eba8:	0002a15e 	.word	0x0002a15e

0000ebac <smp_public_key>:
    ebac:	688b      	ldr	r3, [r1, #8]
{
    ebae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memcpy(smp->pkey, req->x, 32);
    ebb0:	f200 140f 	addw	r4, r0, #271	; 0x10f
{
    ebb4:	4605      	mov	r5, r0
    ebb6:	4622      	mov	r2, r4
    ebb8:	f103 0120 	add.w	r1, r3, #32
    ebbc:	f853 0b04 	ldr.w	r0, [r3], #4
    ebc0:	f842 0b04 	str.w	r0, [r2], #4
    ebc4:	428b      	cmp	r3, r1
    ebc6:	d1f9      	bne.n	ebbc <smp_public_key+0x10>
    ebc8:	f205 122f 	addw	r2, r5, #303	; 0x12f
    ebcc:	f103 0120 	add.w	r1, r3, #32
    ebd0:	f853 0b04 	ldr.w	r0, [r3], #4
    ebd4:	f842 0b04 	str.w	r0, [r2], #4
    ebd8:	428b      	cmp	r3, r1
    ebda:	d1f9      	bne.n	ebd0 <smp_public_key+0x24>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    ebdc:	494c      	ldr	r1, [pc, #304]	; (ed10 <smp_public_key+0x164>)
    ebde:	2240      	movs	r2, #64	; 0x40
    ebe0:	4620      	mov	r0, r4
    ebe2:	f017 fb48 	bl	26276 <memcmp>
    ebe6:	b148      	cbz	r0, ebfc <smp_public_key+0x50>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ebe8:	682b      	ldr	r3, [r5, #0]
    ebea:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ebec:	b373      	cbz	r3, ec4c <smp_public_key+0xa0>
	if (!sc_public_key) {
    ebee:	4b49      	ldr	r3, [pc, #292]	; (ed14 <smp_public_key+0x168>)
    ebf0:	681c      	ldr	r4, [r3, #0]
    ebf2:	2c00      	cmp	r4, #0
    ebf4:	f040 8084 	bne.w	ed00 <smp_public_key+0x154>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ebf8:	2106      	movs	r1, #6
    ebfa:	e03c      	b.n	ec76 <smp_public_key+0xca>
    ebfc:	4b46      	ldr	r3, [pc, #280]	; (ed18 <smp_public_key+0x16c>)
    ebfe:	4947      	ldr	r1, [pc, #284]	; (ed1c <smp_public_key+0x170>)
		BT_INFO("Remote is using Debug Public key");
    ec00:	4847      	ldr	r0, [pc, #284]	; (ed20 <smp_public_key+0x174>)
    ec02:	1ac9      	subs	r1, r1, r3
    ec04:	08c9      	lsrs	r1, r1, #3
    ec06:	0189      	lsls	r1, r1, #6
    ec08:	f041 0103 	orr.w	r1, r1, #3
    ec0c:	f012 fa40 	bl	21090 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    ec10:	210d      	movs	r1, #13
    ec12:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ec16:	f015 fead 	bl	24974 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    ec1a:	682e      	ldr	r6, [r5, #0]
	if (!conn->le.keys) {
    ec1c:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    ec20:	b933      	cbnz	r3, ec30 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ec22:	7a30      	ldrb	r0, [r6, #8]
    ec24:	f106 0188 	add.w	r1, r6, #136	; 0x88
    ec28:	f000 fb5c 	bl	f2e4 <bt_keys_get_addr>
    ec2c:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
	if (!conn->le.keys ||
    ec30:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    ec34:	2b00      	cmp	r3, #0
    ec36:	d0d7      	beq.n	ebe8 <smp_public_key+0x3c>
    ec38:	89da      	ldrh	r2, [r3, #14]
    ec3a:	f002 0224 	and.w	r2, r2, #36	; 0x24
    ec3e:	2a00      	cmp	r2, #0
    ec40:	d0d2      	beq.n	ebe8 <smp_public_key+0x3c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    ec42:	7b5b      	ldrb	r3, [r3, #13]
    ec44:	079b      	lsls	r3, r3, #30
    ec46:	d5cf      	bpl.n	ebe8 <smp_public_key+0x3c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ec48:	2003      	movs	r0, #3
    ec4a:	e028      	b.n	ec9e <smp_public_key+0xf2>
		switch (smp->method) {
    ec4c:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    ec50:	2b05      	cmp	r3, #5
    ec52:	d838      	bhi.n	ecc6 <smp_public_key+0x11a>
    ec54:	e8df f003 	tbb	[pc, r3]
    ec58:	03152503 	.word	0x03152503
    ec5c:	3037      	.short	0x3037
			atomic_set_bit(&smp->allowed_cmds,
    ec5e:	2103      	movs	r1, #3
    ec60:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    ec64:	f015 fe86 	bl	24974 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    ec68:	4620      	mov	r0, r4
    ec6a:	492e      	ldr	r1, [pc, #184]	; (ed24 <smp_public_key+0x178>)
    ec6c:	f7fb f9cc 	bl	a008 <bt_dh_key_gen>
    ec70:	4604      	mov	r4, r0
    ec72:	bb40      	cbnz	r0, ecc6 <smp_public_key+0x11a>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ec74:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ec76:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ec7a:	f015 fe7b 	bl	24974 <atomic_set_bit>
		return 0;
    ec7e:	4620      	mov	r0, r4
    ec80:	e00d      	b.n	ec9e <smp_public_key+0xf2>
			err = display_passkey(smp);
    ec82:	4628      	mov	r0, r5
    ec84:	f7ff f82c 	bl	dce0 <display_passkey>
			if (err) {
    ec88:	b948      	cbnz	r0, ec9e <smp_public_key+0xf2>
			atomic_set_bit(&smp->allowed_cmds,
    ec8a:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    ec8e:	2103      	movs	r1, #3
    ec90:	f015 fe70 	bl	24974 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    ec94:	4628      	mov	r0, r5
    ec96:	f7ff fb21 	bl	e2dc <smp_send_pairing_confirm>
			if (err) {
    ec9a:	2800      	cmp	r0, #0
    ec9c:	d0e4      	beq.n	ec68 <smp_public_key+0xbc>
}
    ec9e:	b003      	add	sp, #12
    eca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eca2:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    eca6:	2109      	movs	r1, #9
    eca8:	f015 fe64 	bl	24974 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    ecac:	4b1e      	ldr	r3, [pc, #120]	; (ed28 <smp_public_key+0x17c>)
    ecae:	6828      	ldr	r0, [r5, #0]
    ecb0:	681b      	ldr	r3, [r3, #0]
    ecb2:	685b      	ldr	r3, [r3, #4]
    ecb4:	4798      	blx	r3
			break;
    ecb6:	e7d7      	b.n	ec68 <smp_public_key+0xbc>
			if (bt_rand(smp->prnd, 16)) {
    ecb8:	2110      	movs	r1, #16
    ecba:	f105 00df 	add.w	r0, r5, #223	; 0xdf
    ecbe:	f003 fee7 	bl	12a90 <bt_rand>
    ecc2:	4606      	mov	r6, r0
    ecc4:	b108      	cbz	r0, ecca <smp_public_key+0x11e>
		switch (smp->method) {
    ecc6:	2008      	movs	r0, #8
    ecc8:	e7e9      	b.n	ec9e <smp_public_key+0xf2>
			if (bt_auth && bt_auth->oob_data_request) {
    ecca:	4f17      	ldr	r7, [pc, #92]	; (ed28 <smp_public_key+0x17c>)
    eccc:	683b      	ldr	r3, [r7, #0]
    ecce:	b1eb      	cbz	r3, ed0c <smp_public_key+0x160>
    ecd0:	68db      	ldr	r3, [r3, #12]
    ecd2:	b1db      	cbz	r3, ed0c <smp_public_key+0x160>
				struct bt_conn_oob_info info = {
    ecd4:	4b15      	ldr	r3, [pc, #84]	; (ed2c <smp_public_key+0x180>)
				le_sc_oob_config_set(smp, &info);
    ecd6:	a901      	add	r1, sp, #4
				struct bt_conn_oob_info info = {
    ecd8:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    ecdc:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
    ece0:	4628      	mov	r0, r5
    ece2:	f015 fcc7 	bl	24674 <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
    ece6:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
				smp->oobd_remote = NULL;
    ecea:	e9c5 6666 	strd	r6, r6, [r5, #408]	; 0x198
				atomic_set_bit(smp->flags,
    ecee:	210b      	movs	r1, #11
    ecf0:	f015 fe40 	bl	24974 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    ecf4:	683b      	ldr	r3, [r7, #0]
    ecf6:	6828      	ldr	r0, [r5, #0]
    ecf8:	68db      	ldr	r3, [r3, #12]
    ecfa:	a901      	add	r1, sp, #4
    ecfc:	4798      	blx	r3
			break;
    ecfe:	e7b3      	b.n	ec68 <smp_public_key+0xbc>
	err = smp_public_key_slave(smp);
    ed00:	4628      	mov	r0, r5
}
    ed02:	b003      	add	sp, #12
    ed04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_slave(smp);
    ed08:	f7ff bc40 	b.w	e58c <smp_public_key_slave>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    ed0c:	2002      	movs	r0, #2
    ed0e:	e7c6      	b.n	ec9e <smp_public_key+0xf2>
    ed10:	0002a3d3 	.word	0x0002a3d3
    ed14:	20001c90 	.word	0x20001c90
    ed18:	00026828 	.word	0x00026828
    ed1c:	00026940 	.word	0x00026940
    ed20:	0002a340 	.word	0x0002a340
    ed24:	0000e6c1 	.word	0x0000e6c1
    ed28:	20001be4 	.word	0x20001be4
    ed2c:	00026a4d 	.word	0x00026a4d

0000ed30 <smp_pairing_rsp>:
{
    ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    ed32:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ed34:	78eb      	ldrb	r3, [r5, #3]
    ed36:	3b07      	subs	r3, #7
    ed38:	2b09      	cmp	r3, #9
{
    ed3a:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ed3c:	d902      	bls.n	ed44 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    ed3e:	2506      	movs	r5, #6
}
    ed40:	4628      	mov	r0, r5
    ed42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	smp->local_dist &= rsp->init_key_dist;
    ed44:	792a      	ldrb	r2, [r5, #4]
    ed46:	f890 31a0 	ldrb.w	r3, [r0, #416]	; 0x1a0
	struct bt_conn *conn = smp->chan.chan.conn;
    ed4a:	6807      	ldr	r7, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
    ed4c:	4013      	ands	r3, r2
    ed4e:	f880 31a0 	strb.w	r3, [r0, #416]	; 0x1a0
	smp->remote_dist &= rsp->resp_key_dist;
    ed52:	796a      	ldrb	r2, [r5, #5]
    ed54:	f890 31a1 	ldrb.w	r3, [r0, #417]	; 0x1a1
    ed58:	4013      	ands	r3, r2
    ed5a:	f880 31a1 	strb.w	r3, [r0, #417]	; 0x1a1
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    ed5e:	2302      	movs	r3, #2
    ed60:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
    ed64:	682b      	ldr	r3, [r5, #0]
    ed66:	f8c0 30c9 	str.w	r3, [r0, #201]	; 0xc9
    ed6a:	88ab      	ldrh	r3, [r5, #4]
    ed6c:	f8a0 30cd 	strh.w	r3, [r0, #205]	; 0xcd
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    ed70:	78ab      	ldrb	r3, [r5, #2]
    ed72:	071b      	lsls	r3, r3, #28
    ed74:	d507      	bpl.n	ed86 <smp_pairing_rsp+0x56>
    ed76:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    ed7a:	071e      	lsls	r6, r3, #28
    ed7c:	d503      	bpl.n	ed86 <smp_pairing_rsp+0x56>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    ed7e:	2105      	movs	r1, #5
    ed80:	30bc      	adds	r0, #188	; 0xbc
    ed82:	f015 fdf7 	bl	24974 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    ed86:	78ab      	ldrb	r3, [r5, #2]
    ed88:	0698      	lsls	r0, r3, #26
    ed8a:	d508      	bpl.n	ed9e <smp_pairing_rsp+0x6e>
    ed8c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    ed90:	0699      	lsls	r1, r3, #26
    ed92:	d504      	bpl.n	ed9e <smp_pairing_rsp+0x6e>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    ed94:	2113      	movs	r1, #19
    ed96:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    ed9a:	f015 fdeb 	bl	24974 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    ed9e:	78ab      	ldrb	r3, [r5, #2]
    eda0:	07da      	lsls	r2, r3, #31
    eda2:	d508      	bpl.n	edb6 <smp_pairing_rsp+0x86>
    eda4:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    eda8:	07db      	lsls	r3, r3, #31
    edaa:	d504      	bpl.n	edb6 <smp_pairing_rsp+0x86>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    edac:	210c      	movs	r1, #12
    edae:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    edb2:	f015 fddf 	bl	24974 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
    edb6:	7829      	ldrb	r1, [r5, #0]
    edb8:	4620      	mov	r0, r4
    edba:	f7fe ff41 	bl	dc40 <get_pair_method>
    edbe:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!update_keys_check(smp)) {
    edc2:	4620      	mov	r0, r4
    edc4:	f015 fd8c 	bl	248e0 <update_keys_check>
    edc8:	b908      	cbnz	r0, edce <smp_pairing_rsp+0x9e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    edca:	2503      	movs	r5, #3
    edcc:	e7b8      	b.n	ed40 <smp_pairing_rsp+0x10>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    edce:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
    edd2:	2105      	movs	r1, #5
    edd4:	4630      	mov	r0, r6
    edd6:	f015 fd4c 	bl	24872 <atomic_test_bit>
    edda:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    edde:	461d      	mov	r5, r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ede0:	bb68      	cbnz	r0, ee3e <smp_pairing_rsp+0x10e>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ede2:	b993      	cbnz	r3, ee0a <smp_pairing_rsp+0xda>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ede4:	210e      	movs	r1, #14
    ede6:	4630      	mov	r0, r6
    ede8:	f015 fd43 	bl	24872 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    edec:	b168      	cbz	r0, ee0a <smp_pairing_rsp+0xda>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    edee:	4f2f      	ldr	r7, [pc, #188]	; (eeac <smp_pairing_rsp+0x17c>)
    edf0:	683b      	ldr	r3, [r7, #0]
    edf2:	b153      	cbz	r3, ee0a <smp_pairing_rsp+0xda>
	    bt_auth && bt_auth->pairing_confirm) {
    edf4:	695b      	ldr	r3, [r3, #20]
    edf6:	b143      	cbz	r3, ee0a <smp_pairing_rsp+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    edf8:	4630      	mov	r0, r6
    edfa:	2109      	movs	r1, #9
    edfc:	f015 fdba 	bl	24974 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    ee00:	683b      	ldr	r3, [r7, #0]
    ee02:	6820      	ldr	r0, [r4, #0]
    ee04:	695b      	ldr	r3, [r3, #20]
    ee06:	4798      	blx	r3
		return 0;
    ee08:	e79a      	b.n	ed40 <smp_pairing_rsp+0x10>
	ret = legacy_request_tk(smp);
    ee0a:	4620      	mov	r0, r4
    ee0c:	f7ff f82e 	bl	de6c <legacy_request_tk>
	if (ret) {
    ee10:	4605      	mov	r5, r0
    ee12:	2800      	cmp	r0, #0
    ee14:	d194      	bne.n	ed40 <smp_pairing_rsp+0x10>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    ee16:	2109      	movs	r1, #9
    ee18:	4630      	mov	r0, r6
    ee1a:	f015 fd2a 	bl	24872 <atomic_test_bit>
    ee1e:	b948      	cbnz	r0, ee34 <smp_pairing_rsp+0x104>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ee20:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ee24:	2103      	movs	r1, #3
    ee26:	f015 fda5 	bl	24974 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    ee2a:	4620      	mov	r0, r4
}
    ee2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
    ee30:	f016 b8c4 	b.w	24fbc <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    ee34:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ee36:	4630      	mov	r0, r6
    ee38:	f015 fd9c 	bl	24974 <atomic_set_bit>
		return 0;
    ee3c:	e780      	b.n	ed40 <smp_pairing_rsp+0x10>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    ee3e:	7aba      	ldrb	r2, [r7, #10]
    ee40:	2a04      	cmp	r2, #4
    ee42:	d10b      	bne.n	ee5c <smp_pairing_rsp+0x12c>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    ee44:	2b00      	cmp	r3, #0
    ee46:	d0c0      	beq.n	edca <smp_pairing_rsp+0x9a>
	return MIN(req->max_key_size, rsp->max_key_size);
    ee48:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
    ee4c:	f894 10c5 	ldrb.w	r1, [r4, #197]	; 0xc5
	     conn->required_sec_level == BT_SECURITY_L4) &&
    ee50:	428a      	cmp	r2, r1
    ee52:	bf28      	it	cs
    ee54:	460a      	movcs	r2, r1
    ee56:	2a10      	cmp	r2, #16
    ee58:	f47f af71 	bne.w	ed3e <smp_pairing_rsp+0xe>
	smp->local_dist &= SEND_KEYS_SC;
    ee5c:	2200      	movs	r2, #0
    ee5e:	f884 21a0 	strb.w	r2, [r4, #416]	; 0x1a0
	smp->remote_dist &= RECV_KEYS_SC;
    ee62:	f894 21a1 	ldrb.w	r2, [r4, #417]	; 0x1a1
    ee66:	f002 0202 	and.w	r2, r2, #2
    ee6a:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ee6e:	b953      	cbnz	r3, ee86 <smp_pairing_rsp+0x156>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ee70:	210e      	movs	r1, #14
    ee72:	4630      	mov	r0, r6
    ee74:	f015 fcfd 	bl	24872 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ee78:	b128      	cbz	r0, ee86 <smp_pairing_rsp+0x156>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ee7a:	4f0c      	ldr	r7, [pc, #48]	; (eeac <smp_pairing_rsp+0x17c>)
    ee7c:	683b      	ldr	r3, [r7, #0]
    ee7e:	b113      	cbz	r3, ee86 <smp_pairing_rsp+0x156>
	    bt_auth && bt_auth->pairing_confirm) {
    ee80:	695b      	ldr	r3, [r3, #20]
    ee82:	2b00      	cmp	r3, #0
    ee84:	d1b8      	bne.n	edf8 <smp_pairing_rsp+0xc8>
	if (!sc_public_key) {
    ee86:	4b0a      	ldr	r3, [pc, #40]	; (eeb0 <smp_pairing_rsp+0x180>)
    ee88:	681d      	ldr	r5, [r3, #0]
    ee8a:	b90d      	cbnz	r5, ee90 <smp_pairing_rsp+0x160>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ee8c:	2106      	movs	r1, #6
    ee8e:	e7d2      	b.n	ee36 <smp_pairing_rsp+0x106>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ee90:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ee94:	210c      	movs	r1, #12
    ee96:	f015 fd6d 	bl	24974 <atomic_set_bit>
	atomic_clear_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    ee9a:	210b      	movs	r1, #11
    ee9c:	f015 fc0b 	bl	246b6 <atomic_clear_bit>
	return sc_send_public_key(smp);
    eea0:	4620      	mov	r0, r4
}
    eea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
    eea6:	f7ff bb45 	b.w	e534 <sc_send_public_key>
    eeaa:	bf00      	nop
    eeac:	20001be4 	.word	0x20001be4
    eeb0:	20001c90 	.word	0x20001c90

0000eeb4 <smp_pairing_random>:
{
    eeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eeb8:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    eeba:	f100 09ef 	add.w	r9, r0, #239	; 0xef
{
    eebe:	b08c      	sub	sp, #48	; 0x30
    eec0:	4604      	mov	r4, r0
    eec2:	464a      	mov	r2, r9
    eec4:	f103 0110 	add.w	r1, r3, #16
    eec8:	f853 0b04 	ldr.w	r0, [r3], #4
    eecc:	f842 0b04 	str.w	r0, [r2], #4
    eed0:	428b      	cmp	r3, r1
    eed2:	d1f9      	bne.n	eec8 <smp_pairing_random+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eed4:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
    eed8:	2105      	movs	r1, #5
    eeda:	4640      	mov	r0, r8
    eedc:	f015 fcc9 	bl	24872 <atomic_test_bit>
    eee0:	f8d4 a000 	ldr.w	sl, [r4]
    eee4:	2800      	cmp	r0, #0
    eee6:	d16a      	bne.n	efbe <smp_pairing_random+0x10a>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    eee8:	f10a 0396 	add.w	r3, sl, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    eeec:	f104 07ff 	add.w	r7, r4, #255	; 0xff
    eef0:	ae08      	add	r6, sp, #32
    eef2:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    eef4:	f10a 038f 	add.w	r3, sl, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    eef8:	9300      	str	r3, [sp, #0]
    eefa:	9602      	str	r6, [sp, #8]
    eefc:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    ef00:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    ef04:	4649      	mov	r1, r9
    ef06:	4638      	mov	r0, r7
    ef08:	f015 fffc 	bl	24f04 <smp_c1>
	if (err) {
    ef0c:	b108      	cbz	r0, ef12 <smp_pairing_random+0x5e>
				return BT_SMP_ERR_UNSPECIFIED;
    ef0e:	2508      	movs	r5, #8
    ef10:	e051      	b.n	efb6 <smp_pairing_random+0x102>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    ef12:	2210      	movs	r2, #16
    ef14:	4631      	mov	r1, r6
    ef16:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    ef1a:	f017 f9ac 	bl	26276 <memcmp>
    ef1e:	2800      	cmp	r0, #0
    ef20:	d148      	bne.n	efb4 <smp_pairing_random+0x100>
	    conn->role == BT_HCI_ROLE_MASTER) {
    ef22:	f89a 5003 	ldrb.w	r5, [sl, #3]
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    ef26:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    ef2a:	4633      	mov	r3, r6
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ef2c:	bb4d      	cbnz	r5, ef82 <smp_pairing_random+0xce>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    ef2e:	460a      	mov	r2, r1
    ef30:	4638      	mov	r0, r7
    ef32:	4649      	mov	r1, r9
    ef34:	f015 fbd5 	bl	246e2 <smp_s1>
		if (err) {
    ef38:	2800      	cmp	r0, #0
    ef3a:	d1e8      	bne.n	ef0e <smp_pairing_random+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
    ef3c:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
    ef40:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    ef44:	429a      	cmp	r2, r3
    ef46:	bf94      	ite	ls
    ef48:	9200      	strls	r2, [sp, #0]
    ef4a:	9300      	strhi	r3, [sp, #0]
    ef4c:	a906      	add	r1, sp, #24
    ef4e:	4633      	mov	r3, r6
    ef50:	aa05      	add	r2, sp, #20
    ef52:	4650      	mov	r0, sl
		(void)memset(rand, 0, sizeof(rand));
    ef54:	e9cd 5506 	strd	r5, r5, [sp, #24]
		(void)memset(ediv, 0, sizeof(ediv));
    ef58:	f8ad 5014 	strh.w	r5, [sp, #20]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    ef5c:	f014 f971 	bl	23242 <bt_conn_le_start_encryption>
    ef60:	b150      	cbz	r0, ef78 <smp_pairing_random+0xc4>
    ef62:	4b88      	ldr	r3, [pc, #544]	; (f184 <smp_pairing_random+0x2d0>)
    ef64:	4988      	ldr	r1, [pc, #544]	; (f188 <smp_pairing_random+0x2d4>)
			BT_ERR("Failed to start encryption");
    ef66:	4889      	ldr	r0, [pc, #548]	; (f18c <smp_pairing_random+0x2d8>)
    ef68:	1ac9      	subs	r1, r1, r3
    ef6a:	08c9      	lsrs	r1, r1, #3
    ef6c:	0189      	lsls	r1, r1, #6
    ef6e:	f041 0101 	orr.w	r1, r1, #1
    ef72:	f012 f88d 	bl	21090 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
    ef76:	e7ca      	b.n	ef0e <smp_pairing_random+0x5a>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ef78:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    ef7a:	4640      	mov	r0, r8
    ef7c:	f015 fcfa 	bl	24974 <atomic_set_bit>
			return 0;
    ef80:	e019      	b.n	efb6 <smp_pairing_random+0x102>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    ef82:	464a      	mov	r2, r9
    ef84:	4638      	mov	r0, r7
    ef86:	f015 fbac 	bl	246e2 <smp_s1>
		if (err) {
    ef8a:	2800      	cmp	r0, #0
    ef8c:	d1bf      	bne.n	ef0e <smp_pairing_random+0x5a>
    ef8e:	aa0c      	add	r2, sp, #48	; 0x30
    ef90:	4633      	mov	r3, r6
    ef92:	cb03      	ldmia	r3!, {r0, r1}
    ef94:	4293      	cmp	r3, r2
    ef96:	6038      	str	r0, [r7, #0]
    ef98:	6079      	str	r1, [r7, #4]
    ef9a:	461e      	mov	r6, r3
    ef9c:	f107 0708 	add.w	r7, r7, #8
    efa0:	d1f6      	bne.n	ef90 <smp_pairing_random+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    efa2:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    efa4:	4640      	mov	r0, r8
    efa6:	f015 fce5 	bl	24974 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    efaa:	4620      	mov	r0, r4
    efac:	f015 fd2a 	bl	24a04 <smp_send_pairing_random>
    efb0:	4605      	mov	r5, r0
    efb2:	e000      	b.n	efb6 <smp_pairing_random+0x102>
		return BT_SMP_ERR_CONFIRM_FAILED;
    efb4:	2504      	movs	r5, #4
}
    efb6:	4628      	mov	r0, r5
    efb8:	b00c      	add	sp, #48	; 0x30
    efba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    efbe:	f89a 3003 	ldrb.w	r3, [sl, #3]
    efc2:	2b00      	cmp	r3, #0
    efc4:	d15c      	bne.n	f080 <smp_pairing_random+0x1cc>
		err = sc_smp_check_confirm(smp);
    efc6:	4620      	mov	r0, r4
    efc8:	f7fe fdbe 	bl	db48 <sc_smp_check_confirm>
		if (err) {
    efcc:	4605      	mov	r5, r0
    efce:	2800      	cmp	r0, #0
    efd0:	d1f1      	bne.n	efb6 <smp_pairing_random+0x102>
		switch (smp->method) {
    efd2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    efd6:	2b05      	cmp	r3, #5
    efd8:	d899      	bhi.n	ef0e <smp_pairing_random+0x5a>
    efda:	a201      	add	r2, pc, #4	; (adr r2, efe0 <smp_pairing_random+0x12c>)
    efdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    efe0:	0000f067 	.word	0x0000f067
    efe4:	0000f031 	.word	0x0000f031
    efe8:	0000f031 	.word	0x0000f031
    efec:	0000eff9 	.word	0x0000eff9
    eff0:	0000ef0f 	.word	0x0000ef0f
    eff4:	0000f067 	.word	0x0000f067
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    eff8:	ab08      	add	r3, sp, #32
    effa:	4865      	ldr	r0, [pc, #404]	; (f190 <smp_pairing_random+0x2dc>)
    effc:	9300      	str	r3, [sp, #0]
    effe:	6800      	ldr	r0, [r0, #0]
    f000:	464b      	mov	r3, r9
    f002:	f104 02df 	add.w	r2, r4, #223	; 0xdf
    f006:	f204 110f 	addw	r1, r4, #271	; 0x10f
    f00a:	f7fe fcaf 	bl	d96c <smp_g2>
    f00e:	2800      	cmp	r0, #0
    f010:	f47f af7d 	bne.w	ef0e <smp_pairing_random+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f014:	2109      	movs	r1, #9
    f016:	4640      	mov	r0, r8
    f018:	f015 fcac 	bl	24974 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f01c:	2108      	movs	r1, #8
    f01e:	f015 fca9 	bl	24974 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f022:	4b5c      	ldr	r3, [pc, #368]	; (f194 <smp_pairing_random+0x2e0>)
    f024:	9908      	ldr	r1, [sp, #32]
    f026:	681b      	ldr	r3, [r3, #0]
    f028:	689b      	ldr	r3, [r3, #8]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f02a:	6820      	ldr	r0, [r4, #0]
    f02c:	4798      	blx	r3
			return 0;
    f02e:	e7c2      	b.n	efb6 <smp_pairing_random+0x102>
			smp->passkey_round++;
    f030:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    f034:	3301      	adds	r3, #1
    f036:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
    f038:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    f03a:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
			if (smp->passkey_round == 20U) {
    f03e:	d012      	beq.n	f066 <smp_pairing_random+0x1b2>
			if (bt_rand(smp->prnd, 16)) {
    f040:	2110      	movs	r1, #16
    f042:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f046:	f003 fd23 	bl	12a90 <bt_rand>
    f04a:	2800      	cmp	r0, #0
    f04c:	f47f af5f 	bne.w	ef0e <smp_pairing_random+0x5a>
			atomic_set_bit(&smp->allowed_cmds,
    f050:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f054:	2103      	movs	r1, #3
    f056:	f015 fc8d 	bl	24974 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
    f05a:	4620      	mov	r0, r4
}
    f05c:	b00c      	add	sp, #48	; 0x30
    f05e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
    f062:	f7ff b93b 	b.w	e2dc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    f066:	2107      	movs	r1, #7
    f068:	4640      	mov	r0, r8
    f06a:	f015 fc02 	bl	24872 <atomic_test_bit>
    f06e:	b108      	cbz	r0, f074 <smp_pairing_random+0x1c0>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f070:	2108      	movs	r1, #8
    f072:	e782      	b.n	ef7a <smp_pairing_random+0xc6>
		return compute_and_send_master_dhcheck(smp);
    f074:	4620      	mov	r0, r4
}
    f076:	b00c      	add	sp, #48	; 0x30
    f078:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_master_dhcheck(smp);
    f07c:	f015 bcfe 	b.w	24a7c <compute_and_send_master_dhcheck>
	switch (smp->method) {
    f080:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    f084:	2b05      	cmp	r3, #5
    f086:	f63f af42 	bhi.w	ef0e <smp_pairing_random+0x5a>
    f08a:	a201      	add	r2, pc, #4	; (adr r2, f090 <smp_pairing_random+0x1dc>)
    f08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f090:	0000f0d9 	.word	0x0000f0d9
    f094:	0000f0e7 	.word	0x0000f0e7
    f098:	0000f0e7 	.word	0x0000f0e7
    f09c:	0000f0a9 	.word	0x0000f0a9
    f0a0:	0000ef0f 	.word	0x0000ef0f
    f0a4:	0000f13d 	.word	0x0000f13d
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    f0a8:	ab08      	add	r3, sp, #32
    f0aa:	4939      	ldr	r1, [pc, #228]	; (f190 <smp_pairing_random+0x2dc>)
    f0ac:	9300      	str	r3, [sp, #0]
    f0ae:	6809      	ldr	r1, [r1, #0]
    f0b0:	f104 03df 	add.w	r3, r4, #223	; 0xdf
    f0b4:	464a      	mov	r2, r9
    f0b6:	f204 100f 	addw	r0, r4, #271	; 0x10f
    f0ba:	f7fe fc57 	bl	d96c <smp_g2>
    f0be:	2800      	cmp	r0, #0
    f0c0:	f47f af25 	bne.w	ef0e <smp_pairing_random+0x5a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f0c4:	2109      	movs	r1, #9
    f0c6:	4640      	mov	r0, r8
    f0c8:	f015 fc54 	bl	24974 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f0cc:	4b31      	ldr	r3, [pc, #196]	; (f194 <smp_pairing_random+0x2e0>)
    f0ce:	9908      	ldr	r1, [sp, #32]
    f0d0:	681b      	ldr	r3, [r3, #0]
    f0d2:	6820      	ldr	r0, [r4, #0]
    f0d4:	689b      	ldr	r3, [r3, #8]
    f0d6:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f0d8:	210d      	movs	r1, #13
    f0da:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f0de:	f015 fc49 	bl	24974 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f0e2:	210f      	movs	r1, #15
    f0e4:	e75e      	b.n	efa4 <smp_pairing_random+0xf0>
		err = sc_smp_check_confirm(smp);
    f0e6:	4620      	mov	r0, r4
    f0e8:	f7fe fd2e 	bl	db48 <sc_smp_check_confirm>
		if (err) {
    f0ec:	4605      	mov	r5, r0
    f0ee:	2800      	cmp	r0, #0
    f0f0:	f47f af61 	bne.w	efb6 <smp_pairing_random+0x102>
		atomic_set_bit(&smp->allowed_cmds,
    f0f4:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
    f0f8:	2103      	movs	r1, #3
    f0fa:	4630      	mov	r0, r6
    f0fc:	f015 fc3a 	bl	24974 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    f100:	4620      	mov	r0, r4
    f102:	f015 fc7f 	bl	24a04 <smp_send_pairing_random>
		if (err) {
    f106:	4605      	mov	r5, r0
    f108:	2800      	cmp	r0, #0
    f10a:	f47f af54 	bne.w	efb6 <smp_pairing_random+0x102>
		smp->passkey_round++;
    f10e:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    f112:	3301      	adds	r3, #1
    f114:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    f116:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    f118:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    f11c:	d105      	bne.n	f12a <smp_pairing_random+0x276>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f11e:	210d      	movs	r1, #13
    f120:	4630      	mov	r0, r6
    f122:	f015 fc27 	bl	24974 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f126:	210f      	movs	r1, #15
    f128:	e727      	b.n	ef7a <smp_pairing_random+0xc6>
		if (bt_rand(smp->prnd, 16)) {
    f12a:	2110      	movs	r1, #16
    f12c:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f130:	f003 fcae 	bl	12a90 <bt_rand>
    f134:	2800      	cmp	r0, #0
    f136:	f43f af3e 	beq.w	efb6 <smp_pairing_random+0x102>
    f13a:	e6e8      	b.n	ef0e <smp_pairing_random+0x5a>
		if (bt_rand(smp->prnd, 16)) {
    f13c:	2110      	movs	r1, #16
    f13e:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f142:	f003 fca5 	bl	12a90 <bt_rand>
    f146:	4605      	mov	r5, r0
    f148:	2800      	cmp	r0, #0
    f14a:	f47f aee0 	bne.w	ef0e <smp_pairing_random+0x5a>
		if (bt_auth && bt_auth->oob_data_request) {
    f14e:	4e11      	ldr	r6, [pc, #68]	; (f194 <smp_pairing_random+0x2e0>)
    f150:	6833      	ldr	r3, [r6, #0]
    f152:	b1a3      	cbz	r3, f17e <smp_pairing_random+0x2ca>
    f154:	68db      	ldr	r3, [r3, #12]
    f156:	b193      	cbz	r3, f17e <smp_pairing_random+0x2ca>
			struct bt_conn_oob_info info = {
    f158:	4b0f      	ldr	r3, [pc, #60]	; (f198 <smp_pairing_random+0x2e4>)
			le_sc_oob_config_set(smp, &info);
    f15a:	a908      	add	r1, sp, #32
			struct bt_conn_oob_info info = {
    f15c:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    f160:	f8ad 3020 	strh.w	r3, [sp, #32]
			le_sc_oob_config_set(smp, &info);
    f164:	4620      	mov	r0, r4
    f166:	f015 fa85 	bl	24674 <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f16a:	210b      	movs	r1, #11
			smp->oobd_remote = NULL;
    f16c:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f170:	4640      	mov	r0, r8
    f172:	f015 fbff 	bl	24974 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f176:	6833      	ldr	r3, [r6, #0]
    f178:	a908      	add	r1, sp, #32
    f17a:	68db      	ldr	r3, [r3, #12]
    f17c:	e755      	b.n	f02a <smp_pairing_random+0x176>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f17e:	2502      	movs	r5, #2
    f180:	e719      	b.n	efb6 <smp_pairing_random+0x102>
    f182:	bf00      	nop
    f184:	00026828 	.word	0x00026828
    f188:	00026940 	.word	0x00026940
    f18c:	0002a361 	.word	0x0002a361
    f190:	20001c90 	.word	0x20001c90
    f194:	20001be4 	.word	0x20001be4
    f198:	00026a4d 	.word	0x00026a4d

0000f19c <bt_smp_update_keys>:
{
    f19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f19e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    f1a0:	f7fe fc12 	bl	d9c8 <smp_chan_get>
	if (!smp) {
    f1a4:	4605      	mov	r5, r0
    f1a6:	2800      	cmp	r0, #0
    f1a8:	d074      	beq.n	f294 <bt_smp_update_keys+0xf8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f1aa:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    f1ae:	2103      	movs	r1, #3
    f1b0:	4630      	mov	r0, r6
    f1b2:	f015 fb5e 	bl	24872 <atomic_test_bit>
    f1b6:	2800      	cmp	r0, #0
    f1b8:	d06c      	beq.n	f294 <bt_smp_update_keys+0xf8>
	if (conn->le.keys) {
    f1ba:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f1be:	b108      	cbz	r0, f1c4 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    f1c0:	f016 f8f8 	bl	253b4 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f1c4:	f104 0788 	add.w	r7, r4, #136	; 0x88
    f1c8:	7a20      	ldrb	r0, [r4, #8]
    f1ca:	4639      	mov	r1, r7
    f1cc:	f000 f88a 	bl	f2e4 <bt_keys_get_addr>
    f1d0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    f1d4:	b9b0      	cbnz	r0, f204 <bt_smp_update_keys+0x68>
    f1d6:	4a35      	ldr	r2, [pc, #212]	; (f2ac <bt_smp_update_keys+0x110>)
    f1d8:	4c35      	ldr	r4, [pc, #212]	; (f2b0 <bt_smp_update_keys+0x114>)
		BT_ERR("Unable to get keys for %s",
    f1da:	4638      	mov	r0, r7
    f1dc:	1aa4      	subs	r4, r4, r2
    f1de:	f7f7 ff81 	bl	70e4 <bt_addr_le_str_real>
    f1e2:	f7f6 f881 	bl	52e8 <log_strdup>
    f1e6:	08e4      	lsrs	r4, r4, #3
    f1e8:	01a4      	lsls	r4, r4, #6
    f1ea:	f044 0401 	orr.w	r4, r4, #1
    f1ee:	4601      	mov	r1, r0
    f1f0:	4622      	mov	r2, r4
    f1f2:	4830      	ldr	r0, [pc, #192]	; (f2b4 <bt_smp_update_keys+0x118>)
    f1f4:	f011 ff59 	bl	210aa <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f1f8:	4628      	mov	r0, r5
    f1fa:	2108      	movs	r1, #8
}
    f1fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f200:	f015 bdf5 	b.w	24dee <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    f204:	210d      	movs	r1, #13
    f206:	4630      	mov	r0, r6
    f208:	f015 fb33 	bl	24872 <atomic_test_bit>
    f20c:	b128      	cbz	r0, f21a <bt_smp_update_keys+0x7e>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    f20e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    f212:	7b53      	ldrb	r3, [r2, #13]
    f214:	f043 0302 	orr.w	r3, r3, #2
    f218:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    f21a:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    f21e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
    f222:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    f224:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
    f226:	d836      	bhi.n	f296 <bt_smp_update_keys+0xfa>
    f228:	b3c2      	cbz	r2, f29c <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    f22a:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    f22e:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    f230:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    f234:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
    f238:	4293      	cmp	r3, r2
    f23a:	bf28      	it	cs
    f23c:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    f23e:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f240:	4630      	mov	r0, r6
    f242:	2105      	movs	r1, #5
    f244:	f015 fb15 	bl	24872 <atomic_test_bit>
    f248:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    f24c:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f24e:	b340      	cbz	r0, f2a2 <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_SC;
    f250:	f042 0210 	orr.w	r2, r2, #16
    f254:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f256:	210c      	movs	r1, #12
    f258:	4630      	mov	r0, r6
    f25a:	f015 fb0a 	bl	24872 <atomic_test_bit>
    f25e:	b1c8      	cbz	r0, f294 <bt_smp_update_keys+0xf8>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    f260:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f264:	2120      	movs	r1, #32
    f266:	f016 f8a1 	bl	253ac <bt_keys_add_type>
    f26a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    f26e:	f105 02ff 	add.w	r2, r5, #255	; 0xff
    f272:	331a      	adds	r3, #26
    f274:	f205 150f 	addw	r5, r5, #271	; 0x10f
    f278:	f852 1b04 	ldr.w	r1, [r2], #4
    f27c:	f843 1b04 	str.w	r1, [r3], #4
    f280:	42aa      	cmp	r2, r5
    f282:	d1f9      	bne.n	f278 <bt_smp_update_keys+0xdc>
__ssp_bos_icheck3(memset, void *, int)
    f284:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    f288:	2300      	movs	r3, #0
    f28a:	6113      	str	r3, [r2, #16]
    f28c:	6153      	str	r3, [r2, #20]
    f28e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    f292:	8313      	strh	r3, [r2, #24]
}
    f294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
    f296:	3a05      	subs	r2, #5
    f298:	2a01      	cmp	r2, #1
    f29a:	d9c6      	bls.n	f22a <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    f29c:	f023 0301 	bic.w	r3, r3, #1
    f2a0:	e7c5      	b.n	f22e <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    f2a2:	f022 0210 	bic.w	r2, r2, #16
    f2a6:	735a      	strb	r2, [r3, #13]
    f2a8:	e7f4      	b.n	f294 <bt_smp_update_keys+0xf8>
    f2aa:	bf00      	nop
    f2ac:	00026828 	.word	0x00026828
    f2b0:	00026940 	.word	0x00026940
    f2b4:	0002a15e 	.word	0x0002a15e

0000f2b8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    f2b8:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    f2ba:	4b07      	ldr	r3, [pc, #28]	; (f2d8 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    f2bc:	4807      	ldr	r0, [pc, #28]	; (f2dc <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    f2be:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    f2c2:	f003 0306 	and.w	r3, r3, #6
    f2c6:	1f9a      	subs	r2, r3, #6
    f2c8:	4253      	negs	r3, r2
    f2ca:	4153      	adcs	r3, r2
    f2cc:	4a04      	ldr	r2, [pc, #16]	; (f2e0 <bt_smp_init+0x28>)
    f2ce:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    f2d0:	f7fa fe3c 	bl	9f4c <bt_pub_key_gen>
	}

	return smp_self_test();
}
    f2d4:	2000      	movs	r0, #0
    f2d6:	bd08      	pop	{r3, pc}
    f2d8:	20000000 	.word	0x20000000
    f2dc:	200002e0 	.word	0x200002e0
    f2e0:	20003bc0 	.word	0x20003bc0

0000f2e4 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    f2e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f2e8:	4f14      	ldr	r7, [pc, #80]	; (f33c <bt_keys_get_addr+0x58>)
    f2ea:	463d      	mov	r5, r7
{
    f2ec:	4680      	mov	r8, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f2ee:	f815 3b01 	ldrb.w	r3, [r5], #1
    f2f2:	4283      	cmp	r3, r0
{
    f2f4:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f2f6:	d00b      	beq.n	f310 <bt_keys_get_addr+0x2c>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    f2f8:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    f2fa:	4811      	ldr	r0, [pc, #68]	; (f340 <bt_keys_get_addr+0x5c>)
    f2fc:	9400      	str	r4, [sp, #0]
    f2fe:	2207      	movs	r2, #7
    f300:	4669      	mov	r1, sp
    f302:	f8cd 4003 	str.w	r4, [sp, #3]
    f306:	f016 ffb6 	bl	26276 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    f30a:	b158      	cbz	r0, f324 <bt_keys_get_addr+0x40>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    f30c:	4620      	mov	r0, r4
    f30e:	e006      	b.n	f31e <bt_keys_get_addr+0x3a>
    f310:	2207      	movs	r2, #7
    f312:	4628      	mov	r0, r5
    f314:	f016 ffaf 	bl	26276 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f318:	2800      	cmp	r0, #0
    f31a:	d1ed      	bne.n	f2f8 <bt_keys_get_addr+0x14>
		keys = &key_pool[i];
    f31c:	4638      	mov	r0, r7
}
    f31e:	b002      	add	sp, #8
    f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys->id = id;
    f324:	f887 8000 	strb.w	r8, [r7]
	memcpy(dst, src, sizeof(*dst));
    f328:	6833      	ldr	r3, [r6, #0]
    f32a:	f8c7 3001 	str.w	r3, [r7, #1]
    f32e:	88b3      	ldrh	r3, [r6, #4]
    f330:	80ab      	strh	r3, [r5, #4]
    f332:	79b3      	ldrb	r3, [r6, #6]
		return keys;
    f334:	4801      	ldr	r0, [pc, #4]	; (f33c <bt_keys_get_addr+0x58>)
    f336:	71ab      	strb	r3, [r5, #6]
}
    f338:	e7f1      	b.n	f31e <bt_keys_get_addr+0x3a>
    f33a:	bf00      	nop
    f33c:	20001c94 	.word	0x20001c94
    f340:	20001c95 	.word	0x20001c95

0000f344 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    f344:	460b      	mov	r3, r1
    f346:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    f348:	4a04      	ldr	r2, [pc, #16]	; (f35c <bt_keys_foreach+0x18>)
{
    f34a:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    f34c:	89d4      	ldrh	r4, [r2, #14]
    f34e:	4204      	tst	r4, r0
    f350:	d002      	beq.n	f358 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    f352:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    f354:	4610      	mov	r0, r2
    f356:	4718      	bx	r3
}
    f358:	bc10      	pop	{r4}
    f35a:	4770      	bx	lr
    f35c:	20001c94 	.word	0x20001c94

0000f360 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    f360:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    f362:	4c09      	ldr	r4, [pc, #36]	; (f388 <bt_keys_find+0x28>)
{
    f364:	460b      	mov	r3, r1
    f366:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    f368:	89e2      	ldrh	r2, [r4, #14]
    f36a:	4202      	tst	r2, r0
    f36c:	d007      	beq.n	f37e <bt_keys_find+0x1e>
    f36e:	7822      	ldrb	r2, [r4, #0]
    f370:	429a      	cmp	r2, r3
    f372:	d104      	bne.n	f37e <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    f374:	2207      	movs	r2, #7
    f376:	1c60      	adds	r0, r4, #1
    f378:	f016 ff7d 	bl	26276 <memcmp>
    f37c:	b108      	cbz	r0, f382 <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    f37e:	2000      	movs	r0, #0
}
    f380:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    f382:	4620      	mov	r0, r4
    f384:	e7fc      	b.n	f380 <bt_keys_find+0x20>
    f386:	bf00      	nop
    f388:	20001c94 	.word	0x20001c94

0000f38c <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    f38c:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    f38e:	780b      	ldrb	r3, [r1, #0]
    f390:	2b01      	cmp	r3, #1
    f392:	4606      	mov	r6, r0
    f394:	460d      	mov	r5, r1
    f396:	d001      	beq.n	f39c <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    f398:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    f39a:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    f39c:	798b      	ldrb	r3, [r1, #6]
    f39e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f3a2:	2b40      	cmp	r3, #64	; 0x40
    f3a4:	d1f8      	bne.n	f398 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    f3a6:	4c13      	ldr	r4, [pc, #76]	; (f3f4 <bt_keys_find_irk+0x68>)
    f3a8:	89e3      	ldrh	r3, [r4, #14]
    f3aa:	079b      	lsls	r3, r3, #30
    f3ac:	d5f4      	bpl.n	f398 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    f3ae:	7823      	ldrb	r3, [r4, #0]
    f3b0:	42b3      	cmp	r3, r6
    f3b2:	d10b      	bne.n	f3cc <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
    f3b4:	2206      	movs	r2, #6
    f3b6:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    f3ba:	1c68      	adds	r0, r5, #1
    f3bc:	f016 ff5b 	bl	26276 <memcmp>
    f3c0:	b908      	cbnz	r0, f3c6 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
    f3c2:	4620      	mov	r0, r4
    f3c4:	e7e9      	b.n	f39a <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    f3c6:	89e3      	ldrh	r3, [r4, #14]
    f3c8:	079a      	lsls	r2, r3, #30
    f3ca:	d5e5      	bpl.n	f398 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    f3cc:	7823      	ldrb	r3, [r4, #0]
    f3ce:	42b3      	cmp	r3, r6
    f3d0:	d1e2      	bne.n	f398 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    f3d2:	1c6e      	adds	r6, r5, #1
    f3d4:	4808      	ldr	r0, [pc, #32]	; (f3f8 <bt_keys_find_irk+0x6c>)
    f3d6:	4631      	mov	r1, r6
    f3d8:	f013 fb9d 	bl	22b16 <bt_rpa_irk_matches>
    f3dc:	2800      	cmp	r0, #0
    f3de:	d0db      	beq.n	f398 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    f3e0:	f8d5 3001 	ldr.w	r3, [r5, #1]
    f3e4:	4805      	ldr	r0, [pc, #20]	; (f3fc <bt_keys_find_irk+0x70>)
    f3e6:	f8c4 303a 	str.w	r3, [r4, #58]	; 0x3a
    f3ea:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    f3ee:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
    f3f0:	383a      	subs	r0, #58	; 0x3a
}
    f3f2:	e7d2      	b.n	f39a <bt_keys_find_irk+0xe>
    f3f4:	20001c94 	.word	0x20001c94
    f3f8:	20001cbe 	.word	0x20001cbe
    f3fc:	20001cce 	.word	0x20001cce

0000f400 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    f400:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    f402:	4c06      	ldr	r4, [pc, #24]	; (f41c <bt_keys_find_addr+0x1c>)
    f404:	7823      	ldrb	r3, [r4, #0]
    f406:	4283      	cmp	r3, r0
    f408:	d104      	bne.n	f414 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    f40a:	2207      	movs	r2, #7
    f40c:	1c60      	adds	r0, r4, #1
    f40e:	f016 ff32 	bl	26276 <memcmp>
    f412:	b108      	cbz	r0, f418 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    f414:	2000      	movs	r0, #0
}
    f416:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    f418:	4620      	mov	r0, r4
    f41a:	e7fc      	b.n	f416 <bt_keys_find_addr+0x16>
    f41c:	20001c94 	.word	0x20001c94

0000f420 <mem_init>:
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f420:	f100 0c07 	add.w	ip, r0, #7
    f424:	f02c 0c03 	bic.w	ip, ip, #3
{
    f428:	b410      	push	{r4}

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f42a:	1e54      	subs	r4, r2, #1
	*mem_head = mem_pool;
    f42c:	6018      	str	r0, [r3, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f42e:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f430:	f8ac 2000 	strh.w	r2, [ip]
		     sizeof(mem_pool));
	while (mem_count--) {
    f434:	3a02      	subs	r2, #2
    f436:	b293      	uxth	r3, r2
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f438:	fb01 f204 	mul.w	r2, r1, r4
    f43c:	f04f 0c00 	mov.w	ip, #0
    f440:	f840 c002 	str.w	ip, [r0, r2]
	while (mem_count--) {
    f444:	b174      	cbz	r4, f464 <mem_init+0x44>
    f446:	fb03 1401 	mla	r4, r3, r1, r1
    f44a:	fb03 f201 	mul.w	r2, r3, r1
    f44e:	4420      	add	r0, r4
    f450:	1b12      	subs	r2, r2, r4
    f452:	f64f 7cff 	movw	ip, #65535	; 0xffff
    f456:	3b01      	subs	r3, #1
    f458:	b29b      	uxth	r3, r3
    f45a:	4563      	cmp	r3, ip
    f45c:	5080      	str	r0, [r0, r2]
    f45e:	eba0 0001 	sub.w	r0, r0, r1
    f462:	d1f8      	bne.n	f456 <mem_init+0x36>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    f464:	bc10      	pop	{r4}
    f466:	4770      	bx	lr

0000f468 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    f468:	4603      	mov	r3, r0
	if (*mem_head) {
    f46a:	6800      	ldr	r0, [r0, #0]
    f46c:	b110      	cbz	r0, f474 <mem_acquire+0xc>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    f46e:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
    f470:	b90a      	cbnz	r2, f476 <mem_acquire+0xe>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
				free_count;
		}

		*mem_head = head;
    f472:	601a      	str	r2, [r3, #0]
		return mem;
	}

	return NULL;
}
    f474:	4770      	bx	lr
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f476:	f100 0c07 	add.w	ip, r0, #7
    f47a:	f02c 0c03 	bic.w	ip, ip, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    f47e:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f480:	f8bc c000 	ldrh.w	ip, [ip]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    f484:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
    f488:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    f48c:	f8a1 c000 	strh.w	ip, [r1]
    f490:	e7ef      	b.n	f472 <mem_acquire+0xa>
    f492:	bf00      	nop

0000f494 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    f494:	b082      	sub	sp, #8
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    f496:	680b      	ldr	r3, [r1, #0]
{
    f498:	9001      	str	r0, [sp, #4]
    f49a:	4602      	mov	r2, r0
	if (*mem_head) {
    f49c:	b183      	cbz	r3, f4c0 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f49e:	3307      	adds	r3, #7
    f4a0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    f4a4:	8818      	ldrh	r0, [r3, #0]
    f4a6:	3001      	adds	r0, #1
    f4a8:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f4aa:	4613      	mov	r3, r2
    f4ac:	f8d1 c000 	ldr.w	ip, [r1]
    f4b0:	f843 cb07 	str.w	ip, [r3], #7

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    f4b4:	f023 0303 	bic.w	r3, r3, #3
    f4b8:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
    f4ba:	600a      	str	r2, [r1, #0]
}
    f4bc:	b002      	add	sp, #8
    f4be:	4770      	bx	lr
    f4c0:	2001      	movs	r0, #1
    f4c2:	e7f2      	b.n	f4aa <mem_release+0x16>

0000f4c4 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    f4c4:	fb02 0001 	mla	r0, r2, r1, r0
    f4c8:	4770      	bx	lr
    f4ca:	bf00      	nop

0000f4cc <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    f4cc:	1a40      	subs	r0, r0, r1
    f4ce:	b280      	uxth	r0, r0
}
    f4d0:	fbb0 f0f2 	udiv	r0, r0, r2
    f4d4:	4770      	bx	lr
    f4d6:	bf00      	nop

0000f4d8 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    f4d8:	1e53      	subs	r3, r2, #1
	src += len;
    f4da:	4411      	add	r1, r2
	while (len--) {
    f4dc:	b29b      	uxth	r3, r3
    f4de:	b142      	cbz	r2, f4f2 <mem_rcopy+0x1a>
    f4e0:	43db      	mvns	r3, r3
    f4e2:	3801      	subs	r0, #1
    f4e4:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    f4e6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    f4ea:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    f4ee:	4291      	cmp	r1, r2
    f4f0:	d1f9      	bne.n	f4e6 <mem_rcopy+0xe>
	}
}
    f4f2:	4770      	bx	lr

0000f4f4 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    f4f4:	4401      	add	r1, r0
    f4f6:	e002      	b.n	f4fe <mem_nz+0xa>
		if (*src++) {
    f4f8:	f810 3b01 	ldrb.w	r3, [r0], #1
    f4fc:	b91b      	cbnz	r3, f506 <mem_nz+0x12>
	while (len--) {
    f4fe:	4288      	cmp	r0, r1
    f500:	d1fa      	bne.n	f4f8 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    f502:	2000      	movs	r0, #0
    f504:	4770      	bx	lr
			return 1;
    f506:	2001      	movs	r0, #1
}
    f508:	4770      	bx	lr
    f50a:	bf00      	nop

0000f50c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    f50c:	6010      	str	r0, [r2, #0]
    f50e:	6008      	str	r0, [r1, #0]

	return link;
}
    f510:	4770      	bx	lr
    f512:	bf00      	nop

0000f514 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    f514:	680a      	ldr	r2, [r1, #0]
{
    f516:	4603      	mov	r3, r0
	if (*head != *tail) {
    f518:	6800      	ldr	r0, [r0, #0]
    f51a:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    f51c:	bf05      	ittet	eq
    f51e:	2200      	moveq	r2, #0
    f520:	600a      	streq	r2, [r1, #0]
		return NULL;
    f522:	2000      	movne	r0, #0
	*head = *tail = NULL;
    f524:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    f526:	4770      	bx	lr

0000f528 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    f528:	f8d2 c000 	ldr.w	ip, [r2]
    f52c:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    f530:	f8d2 c000 	ldr.w	ip, [r2]
    f534:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
    f538:	6010      	str	r0, [r2, #0]

	return link;
}
    f53a:	4770      	bx	lr

0000f53c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    f53c:	4288      	cmp	r0, r1
    f53e:	d003      	beq.n	f548 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    f540:	b11a      	cbz	r2, f54a <memq_peek+0xe>
		*mem = head->mem;
    f542:	6843      	ldr	r3, [r0, #4]
    f544:	6013      	str	r3, [r2, #0]
    f546:	4770      	bx	lr
		return NULL;
    f548:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    f54a:	4770      	bx	lr

0000f54c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    f54c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    f54e:	4283      	cmp	r3, r0
    f550:	d009      	beq.n	f566 <memq_dequeue+0x1a>
	if (mem) {
    f552:	b12a      	cbz	r2, f560 <memq_dequeue+0x14>
		*mem = head->mem;
    f554:	6858      	ldr	r0, [r3, #4]
    f556:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    f558:	681a      	ldr	r2, [r3, #0]
    f55a:	600a      	str	r2, [r1, #0]

	return old_head;
}
    f55c:	4618      	mov	r0, r3
    f55e:	4770      	bx	lr
	if (old_head == NULL) {
    f560:	2b00      	cmp	r3, #0
    f562:	d1f9      	bne.n	f558 <memq_dequeue+0xc>
    f564:	e7fa      	b.n	f55c <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    f566:	2300      	movs	r3, #0
    f568:	e7f8      	b.n	f55c <memq_dequeue+0x10>
    f56a:	bf00      	nop

0000f56c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    f56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f570:	f8df 8030 	ldr.w	r8, [pc, #48]	; f5a4 <mayfly_init+0x38>
    f574:	4e0c      	ldr	r6, [pc, #48]	; (f5a8 <mayfly_init+0x3c>)
    f576:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    f578:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    f57c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    f57e:	1d22      	adds	r2, r4, #4
    f580:	4621      	mov	r1, r4
    f582:	4628      	mov	r0, r5
		while (caller_id--) {
    f584:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    f586:	f7ff ffc1 	bl	f50c <memq_init>
		while (caller_id--) {
    f58a:	42b4      	cmp	r4, r6
    f58c:	f1a5 0508 	sub.w	r5, r5, #8
    f590:	d1f5      	bne.n	f57e <mayfly_init+0x12>
	while (callee_id--) {
    f592:	3f04      	subs	r7, #4
    f594:	1d3b      	adds	r3, r7, #4
    f596:	f1a8 0820 	sub.w	r8, r8, #32
    f59a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    f59e:	d1eb      	bne.n	f578 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5a4:	20001d68 	.word	0x20001d68
    f5a8:	20001df8 	.word	0x20001df8

0000f5ac <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    f5ac:	b410      	push	{r4}
    f5ae:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    f5b0:	4c15      	ldr	r4, [pc, #84]	; (f608 <mayfly_enable+0x5c>)
{
    f5b2:	468c      	mov	ip, r1
	if (enable) {
    f5b4:	b192      	cbz	r2, f5dc <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    f5b6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    f5ba:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    f5be:	0100      	lsls	r0, r0, #4
    f5c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    f5c4:	4421      	add	r1, r4
    f5c6:	7a48      	ldrb	r0, [r1, #9]
    f5c8:	7a0c      	ldrb	r4, [r1, #8]
    f5ca:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    f5cc:	bf04      	itt	eq
    f5ce:	3001      	addeq	r0, #1
    f5d0:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    f5d2:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    f5d4:	4661      	mov	r1, ip
    f5d6:	4618      	mov	r0, r3
    f5d8:	f00d bf36 	b.w	1d448 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    f5dc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    f5e0:	0112      	lsls	r2, r2, #4
    f5e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    f5e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    f5ea:	4423      	add	r3, r4
    f5ec:	7a9c      	ldrb	r4, [r3, #10]
    f5ee:	7ada      	ldrb	r2, [r3, #11]
    f5f0:	42a2      	cmp	r2, r4
    f5f2:	d001      	beq.n	f5f8 <mayfly_enable+0x4c>
}
    f5f4:	bc10      	pop	{r4}
    f5f6:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    f5f8:	3201      	adds	r2, #1
    f5fa:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    f5fc:	4b03      	ldr	r3, [pc, #12]	; (f60c <mayfly_enable+0x60>)
    f5fe:	2201      	movs	r2, #1
    f600:	545a      	strb	r2, [r3, r1]
}
    f602:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    f604:	f00d bf7e 	b.w	1d504 <mayfly_pend>
    f608:	20001d74 	.word	0x20001d74
    f60c:	20001d70 	.word	0x20001d70

0000f610 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    f610:	b570      	push	{r4, r5, r6, lr}
    f612:	4606      	mov	r6, r0
    f614:	461c      	mov	r4, r3
    f616:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    f618:	b322      	cbz	r2, f664 <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    f61a:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    f61c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    f61e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    f620:	f012 0203 	ands.w	r2, r2, #3
    f624:	d005      	beq.n	f632 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    f626:	2a01      	cmp	r2, #1
    f628:	d040      	beq.n	f6ac <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    f62a:	3301      	adds	r3, #1
    f62c:	b2db      	uxtb	r3, r3
    f62e:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    f630:	e00f      	b.n	f652 <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    f632:	3301      	adds	r3, #1
    f634:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    f636:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    f638:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    f63a:	2304      	movs	r3, #4
    f63c:	fb11 3105 	smlabb	r1, r1, r5, r3
    f640:	4a1b      	ldr	r2, [pc, #108]	; (f6b0 <mayfly_enqueue+0xa0>)
    f642:	6860      	ldr	r0, [r4, #4]
    f644:	230c      	movs	r3, #12
    f646:	fb13 1306 	smlabb	r3, r3, r6, r1
    f64a:	441a      	add	r2, r3
    f64c:	4621      	mov	r1, r4
    f64e:	f7ff ff6b 	bl	f528 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    f652:	4b18      	ldr	r3, [pc, #96]	; (f6b4 <mayfly_enqueue+0xa4>)
    f654:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    f656:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    f658:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    f65a:	4629      	mov	r1, r5
    f65c:	f00d ff52 	bl	1d504 <mayfly_pend>

	return 0;
    f660:	2000      	movs	r0, #0
}
    f662:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f664:	f00d ff30 	bl	1d4c8 <mayfly_prio_is_equal>
    f668:	2800      	cmp	r0, #0
    f66a:	d0d6      	beq.n	f61a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    f66c:	4629      	mov	r1, r5
    f66e:	4630      	mov	r0, r6
    f670:	f00d ff0a 	bl	1d488 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f674:	2800      	cmp	r0, #0
    f676:	d0d0      	beq.n	f61a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    f678:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    f67c:	0112      	lsls	r2, r2, #4
    f67e:	490c      	ldr	r1, [pc, #48]	; (f6b0 <mayfly_enqueue+0xa0>)
    f680:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    f684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    f688:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    f68a:	7a9a      	ldrb	r2, [r3, #10]
    f68c:	7adb      	ldrb	r3, [r3, #11]
    f68e:	429a      	cmp	r2, r3
    f690:	d1c3      	bne.n	f61a <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
    f692:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    f694:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    f696:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    f698:	0792      	lsls	r2, r2, #30
    f69a:	d002      	beq.n	f6a2 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    f69c:	3302      	adds	r3, #2
    f69e:	b2db      	uxtb	r3, r3
    f6a0:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    f6a2:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    f6a6:	4798      	blx	r3
		return 0;
    f6a8:	2000      	movs	r0, #0
}
    f6aa:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    f6ac:	4610      	mov	r0, r2
}
    f6ae:	bd70      	pop	{r4, r5, r6, pc}
    f6b0:	20001d74 	.word	0x20001d74
    f6b4:	20001d70 	.word	0x20001d70

0000f6b8 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    f6b8:	4a4f      	ldr	r2, [pc, #316]	; (f7f8 <mayfly_run+0x140>)
    f6ba:	5c13      	ldrb	r3, [r2, r0]
    f6bc:	2b00      	cmp	r3, #0
    f6be:	f000 8099 	beq.w	f7f4 <mayfly_run+0x13c>
{
    f6c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    f6c6:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f6c8:	4f4c      	ldr	r7, [pc, #304]	; (f7fc <mayfly_run+0x144>)
	mfp[callee_id] = 0U;
    f6ca:	5413      	strb	r3, [r2, r0]
{
    f6cc:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    f6ce:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f6d0:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    f6d4:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f6d8:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    f6dc:	9303      	str	r3, [sp, #12]
    f6de:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f6e2:	f10b 0804 	add.w	r8, fp, #4
    f6e6:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    f6ea:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    f6ee:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    f6f0:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    f6f4:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    f6f6:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    f6f8:	f7ff ff20 	bl	f53c <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    f6fc:	f107 0624 	add.w	r6, r7, #36	; 0x24
    f700:	4683      	mov	fp, r0
    f702:	b398      	cbz	r0, f76c <mayfly_run+0xb4>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    f704:	9c05      	ldr	r4, [sp, #20]
    f706:	7863      	ldrb	r3, [r4, #1]
    f708:	7825      	ldrb	r5, [r4, #0]
    f70a:	1aed      	subs	r5, r5, r3
    f70c:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    f710:	2d01      	cmp	r5, #1
    f712:	d106      	bne.n	f722 <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    f714:	3b01      	subs	r3, #1
    f716:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f718:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    f71c:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    f71e:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    f720:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    f722:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    f724:	1ac3      	subs	r3, r0, r3
    f726:	f003 0303 	and.w	r3, r3, #3
    f72a:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    f72c:	f04f 0200 	mov.w	r2, #0
    f730:	4631      	mov	r1, r6
	req = m->_req;
    f732:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    f736:	d00f      	beq.n	f758 <mayfly_run+0xa0>
		memq_dequeue(mft[callee_id][caller_id].tail,
    f738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f73a:	f7ff ff07 	bl	f54c <memq_dequeue>
		ack = m->_ack;
    f73e:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    f742:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    f744:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    f748:	eba3 030c 	sub.w	r3, r3, ip
    f74c:	f003 0303 	and.w	r3, r3, #3
    f750:	2b01      	cmp	r3, #1
		m->_ack = req;
    f752:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    f756:	d045      	beq.n	f7e4 <mayfly_run+0x12c>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    f758:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    f75c:	aa05      	add	r2, sp, #20
    f75e:	f7ff feed 	bl	f53c <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    f762:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    f764:	4683      	mov	fp, r0
			if (state == 1U) {
    f766:	d02b      	beq.n	f7c0 <mayfly_run+0x108>
		while (link) {
    f768:	2800      	cmp	r0, #0
    f76a:	d1cb      	bne.n	f704 <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    f76c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    f770:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    f774:	429a      	cmp	r2, r3
    f776:	d003      	beq.n	f780 <mayfly_run+0xc8>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    f778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    f77c:	2301      	movs	r3, #1
    f77e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    f780:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    f784:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    f788:	429a      	cmp	r2, r3
    f78a:	d003      	beq.n	f794 <mayfly_run+0xdc>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    f78c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    f790:	2301      	movs	r3, #1
    f792:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    f794:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    f798:	fa5f f989 	uxtb.w	r9, r9
    f79c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    f7a0:	f1a7 070c 	sub.w	r7, r7, #12
    f7a4:	d1a3      	bne.n	f6ee <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    f7a6:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    f7aa:	b1c3      	cbz	r3, f7de <mayfly_run+0x126>
    f7ac:	9b03      	ldr	r3, [sp, #12]
    f7ae:	b9b3      	cbnz	r3, f7de <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    f7b0:	461a      	mov	r2, r3
    f7b2:	4651      	mov	r1, sl
    f7b4:	4650      	mov	r0, sl
	}
}
    f7b6:	b007      	add	sp, #28
    f7b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    f7bc:	f00d be44 	b.w	1d448 <mayfly_enable_cb>
				if (caller_id || link) {
    f7c0:	f1b9 0f00 	cmp.w	r9, #0
    f7c4:	d101      	bne.n	f7ca <mayfly_run+0x112>
    f7c6:	2800      	cmp	r0, #0
    f7c8:	d0d0      	beq.n	f76c <mayfly_run+0xb4>
					mfp[callee_id] = 1U;
    f7ca:	f8dd a008 	ldr.w	sl, [sp, #8]
    f7ce:	4a0a      	ldr	r2, [pc, #40]	; (f7f8 <mayfly_run+0x140>)
    f7d0:	2301      	movs	r3, #1
    f7d2:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    f7d6:	4651      	mov	r1, sl
    f7d8:	4650      	mov	r0, sl
    f7da:	f00d fe93 	bl	1d504 <mayfly_pend>
}
    f7de:	b007      	add	sp, #28
    f7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f7e4:	4642      	mov	r2, r8
    f7e6:	4621      	mov	r1, r4
    f7e8:	4658      	mov	r0, fp
			m->_ack = ack;
    f7ea:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f7ee:	f7ff fe9b 	bl	f528 <memq_enqueue>
    f7f2:	e7b1      	b.n	f758 <mayfly_run+0xa0>
    f7f4:	4770      	bx	lr
    f7f6:	bf00      	nop
    f7f8:	20001d70 	.word	0x20001d70
    f7fc:	20001d74 	.word	0x20001d74

0000f800 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    f800:	1e4b      	subs	r3, r1, #1
    f802:	b2db      	uxtb	r3, r3
    f804:	b189      	cbz	r1, f82a <util_ones_count_get+0x2a>
    f806:	1e41      	subs	r1, r0, #1
    f808:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    f80c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    f80e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    f812:	b13b      	cbz	r3, f824 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    f814:	b25b      	sxtb	r3, r3
    f816:	1e5a      	subs	r2, r3, #1
    f818:	4013      	ands	r3, r2
			one_count++;
    f81a:	3001      	adds	r0, #1
		while (bite) {
    f81c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    f820:	b2c0      	uxtb	r0, r0
		while (bite) {
    f822:	d1f7      	bne.n	f814 <util_ones_count_get+0x14>
	while (octets_len--) {
    f824:	4561      	cmp	r1, ip
    f826:	d1f2      	bne.n	f80e <util_ones_count_get+0xe>
    f828:	4770      	bx	lr
	uint8_t one_count = 0U;
    f82a:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    f82c:	4770      	bx	lr
    f82e:	bf00      	nop

0000f830 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
    f830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    f834:	4da4      	ldr	r5, [pc, #656]	; (fac8 <util_aa_le32+0x298>)
{
    f836:	b083      	sub	sp, #12
    f838:	4607      	mov	r7, r0
    f83a:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
    f83c:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
    f83e:	2104      	movs	r1, #4
    f840:	4638      	mov	r0, r7
    f842:	f00a ff75 	bl	1a730 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    f846:	6838      	ldr	r0, [r7, #0]
	transitions = 0U;
    f848:	f04f 0800 	mov.w	r8, #0
	consecutive_bit = (aa >> bit_idx) & 0x01;
    f84c:	ea4f 7ed0 	mov.w	lr, r0, lsr #31
    f850:	231e      	movs	r3, #30
	consecutive_cnt = 1U;
    f852:	f04f 0a01 	mov.w	sl, #1
	ones_count_lsb8 = 0U;
    f856:	46c3      	mov	fp, r8
	transitions_lsb16 = 0U;
    f858:	46c1      	mov	r9, r8
    f85a:	e01a      	b.n	f892 <util_aa_le32+0x62>
			transitions++;
    f85c:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
    f860:	2b0e      	cmp	r3, #14
			transitions++;
    f862:	b2c9      	uxtb	r1, r1
			if (bit_idx < 15) {
    f864:	fa5f fe83 	uxtb.w	lr, r3
    f868:	f240 809c 	bls.w	f9a4 <util_aa_le32+0x174>
		if ((consecutive_cnt > 6) ||
    f86c:	b3d2      	cbz	r2, f8e4 <util_aa_le32+0xb4>
    f86e:	4696      	mov	lr, r2
    f870:	46cc      	mov	ip, r9
		    ((consecutive_cnt < 6) &&
    f872:	2b1c      	cmp	r3, #28
    f874:	f240 80a5 	bls.w	f9c2 <util_aa_le32+0x192>
		     (((bit_idx < 29) && (transitions < 1)) ||
    f878:	2b1b      	cmp	r3, #27
    f87a:	f240 8112 	bls.w	faa2 <util_aa_le32+0x272>
		if ((transitions > 24) ||
    f87e:	2919      	cmp	r1, #25
    f880:	d03b      	beq.n	f8fa <util_aa_le32+0xca>
					   (ones_count_lsb8 < 3)))) ||
    f882:	4688      	mov	r8, r1
    f884:	4692      	mov	sl, r2
		    (transitions_lsb16 > 11) ||
    f886:	f1bc 0f0c 	cmp.w	ip, #12
					   (ones_count_lsb8 < 3)))) ||
    f88a:	46e1      	mov	r9, ip
		    (transitions_lsb16 > 11) ||
    f88c:	d035      	beq.n	f8fa <util_aa_le32+0xca>
	while (bit_idx--) {
    f88e:	3b01      	subs	r3, #1
    f890:	d33b      	bcc.n	f90a <util_aa_le32+0xda>
		bit = (aa >> bit_idx) & 0x01;
    f892:	fa20 f203 	lsr.w	r2, r0, r3
    f896:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
    f89a:	4572      	cmp	r2, lr
    f89c:	d1de      	bne.n	f85c <util_aa_le32+0x2c>
			consecutive_cnt++;
    f89e:	f10a 0201 	add.w	r2, sl, #1
		if ((bit_idx < 8) && consecutive_bit) {
    f8a2:	2b07      	cmp	r3, #7
			consecutive_cnt++;
    f8a4:	b2d2      	uxtb	r2, r2
		if ((bit_idx < 8) && consecutive_bit) {
    f8a6:	f240 80e0 	bls.w	fa6a <util_aa_le32+0x23a>
		if ((consecutive_cnt > 6) ||
    f8aa:	2a06      	cmp	r2, #6
    f8ac:	f240 80d7 	bls.w	fa5e <util_aa_le32+0x22e>
			if (consecutive_bit) {
    f8b0:	f1be 0f00 	cmp.w	lr, #0
    f8b4:	d054      	beq.n	f960 <util_aa_le32+0x130>
				aa &= ~BIT(bit_idx);
    f8b6:	fa04 f203 	lsl.w	r2, r4, r3
    f8ba:	ea20 0002 	bic.w	r0, r0, r2
    f8be:	46cc      	mov	ip, r9
				consecutive_bit = 0U;
    f8c0:	f04f 0e00 	mov.w	lr, #0
				transitions++;
    f8c4:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
    f8c8:	2b0e      	cmp	r3, #14
				transitions++;
    f8ca:	b2c9      	uxtb	r1, r1
				consecutive_cnt = 1U;
    f8cc:	bf88      	it	hi
    f8ce:	2201      	movhi	r2, #1
			if (bit_idx < 15) {
    f8d0:	d8d5      	bhi.n	f87e <util_aa_le32+0x4e>
				if (transitions_lsb16 !=
    f8d2:	45e1      	cmp	r9, ip
    f8d4:	f000 80c0 	beq.w	fa58 <util_aa_le32+0x228>
		if ((transitions > 24) ||
    f8d8:	2919      	cmp	r1, #25
    f8da:	d00e      	beq.n	f8fa <util_aa_le32+0xca>
    f8dc:	4688      	mov	r8, r1
				consecutive_cnt = 1U;
    f8de:	f04f 0a01 	mov.w	sl, #1
    f8e2:	e7d4      	b.n	f88e <util_aa_le32+0x5e>
		if ((consecutive_cnt > 6) ||
    f8e4:	46cc      	mov	ip, r9
			consecutive_cnt = 1U;
    f8e6:	2201      	movs	r2, #1
		    (!consecutive_bit && (((bit_idx < 6) &&
    f8e8:	2b05      	cmp	r3, #5
    f8ea:	f240 8089 	bls.w	fa00 <util_aa_le32+0x1d0>
					   (ones_count_lsb8 < 3)))) ||
    f8ee:	2a06      	cmp	r2, #6
    f8f0:	f04f 0e00 	mov.w	lr, #0
    f8f4:	d1bd      	bne.n	f872 <util_aa_le32+0x42>
		if ((transitions > 24) ||
    f8f6:	2919      	cmp	r1, #25
    f8f8:	d1c3      	bne.n	f882 <util_aa_le32+0x52>
				aa &= ~(BIT(bit_idx + 1) - 1);
    f8fa:	3301      	adds	r3, #1
    f8fc:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
    f900:	f1be 0f00 	cmp.w	lr, #0
    f904:	d040      	beq.n	f988 <util_aa_le32+0x158>
				aa &= ~(BIT(bit_idx + 1) - 1);
    f906:	425b      	negs	r3, r3
    f908:	4018      	ands	r0, r3
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    f90a:	ea80 0305 	eor.w	r3, r0, r5
    f90e:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
    f910:	f10d 0c04 	add.w	ip, sp, #4
    f914:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
    f918:	2200      	movs	r2, #0
		bite = *octets;
    f91a:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
    f91e:	b13b      	cbz	r3, f930 <util_aa_le32+0x100>
			bite &= (bite - 1);
    f920:	b25b      	sxtb	r3, r3
    f922:	1e59      	subs	r1, r3, #1
    f924:	400b      	ands	r3, r1
			one_count++;
    f926:	3201      	adds	r2, #1
		while (bite) {
    f928:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    f92c:	b2d2      	uxtb	r2, r2
		while (bite) {
    f92e:	d1f7      	bne.n	f920 <util_aa_le32+0xf0>
	while (octets_len--) {
    f930:	45e6      	cmp	lr, ip
    f932:	d1f2      	bne.n	f91a <util_aa_le32+0xea>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
    f934:	2a01      	cmp	r2, #1
    f936:	d909      	bls.n	f94c <util_aa_le32+0x11c>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    f938:	b283      	uxth	r3, r0
    f93a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    f93e:	ea4f 4210 	mov.w	r2, r0, lsr #16
    f942:	d124      	bne.n	f98e <util_aa_le32+0x15e>
	    !((aa & 0xFF) ^ (aa >> 24))) {
    f944:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    f946:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
    f94a:	d120      	bne.n	f98e <util_aa_le32+0x15e>
	if (!retry) {
    f94c:	3e01      	subs	r6, #1
    f94e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    f952:	f47f af74 	bne.w	f83e <util_aa_le32+0xe>
		return -EFAULT;
    f956:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
    f95a:	b003      	add	sp, #12
    f95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aa |= BIT(bit_idx);
    f960:	fa04 f203 	lsl.w	r2, r4, r3
    f964:	4310      	orrs	r0, r2
    f966:	4641      	mov	r1, r8
    f968:	46cc      	mov	ip, r9
				consecutive_bit = 1U;
    f96a:	f04f 0e01 	mov.w	lr, #1
			if (transitions != transitions_prev) {
    f96e:	4588      	cmp	r8, r1
    f970:	d0a8      	beq.n	f8c4 <util_aa_le32+0x94>
			if (bit_idx < 15) {
    f972:	2b0e      	cmp	r3, #14
    f974:	d887      	bhi.n	f886 <util_aa_le32+0x56>
				if (transitions_lsb16 !=
    f976:	45e1      	cmp	r9, ip
    f978:	d189      	bne.n	f88e <util_aa_le32+0x5e>
    f97a:	4641      	mov	r1, r8
					transitions_lsb16++;
    f97c:	f10c 0c01 	add.w	ip, ip, #1
    f980:	fa5f fc8c 	uxtb.w	ip, ip
    f984:	4652      	mov	r2, sl
    f986:	e77a      	b.n	f87e <util_aa_le32+0x4e>
				aa |= (BIT(bit_idx + 1) - 1);
    f988:	3b01      	subs	r3, #1
    f98a:	4318      	orrs	r0, r3
    f98c:	e7bd      	b.n	f90a <util_aa_le32+0xda>
	dst[1] = val >> 8;
    f98e:	f3c0 2107 	ubfx	r1, r0, #8, #8
    f992:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
    f994:	7038      	strb	r0, [r7, #0]
	return 0;
    f996:	2000      	movs	r0, #0
	dst[1] = val >> 8;
    f998:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
    f99a:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
    f99c:	70fb      	strb	r3, [r7, #3]
}
    f99e:	b003      	add	sp, #12
    f9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transitions_lsb16++;
    f9a4:	f109 0c01 	add.w	ip, r9, #1
		if ((bit_idx < 8) && consecutive_bit) {
    f9a8:	f1be 0f07 	cmp.w	lr, #7
				transitions_lsb16++;
    f9ac:	fa5f fc8c 	uxtb.w	ip, ip
		if ((bit_idx < 8) && consecutive_bit) {
    f9b0:	d91d      	bls.n	f9ee <util_aa_le32+0x1be>
		if ((consecutive_cnt > 6) ||
    f9b2:	b912      	cbnz	r2, f9ba <util_aa_le32+0x18a>
    f9b4:	4696      	mov	lr, r2
			consecutive_cnt = 1U;
    f9b6:	2201      	movs	r2, #1
    f9b8:	e75b      	b.n	f872 <util_aa_le32+0x42>
		      ((bit_idx < 28) && (transitions < 2))))) {
    f9ba:	2901      	cmp	r1, #1
    f9bc:	d007      	beq.n	f9ce <util_aa_le32+0x19e>
    f9be:	4696      	mov	lr, r2
    f9c0:	e75d      	b.n	f87e <util_aa_le32+0x4e>
		     (((bit_idx < 29) && (transitions < 1)) ||
    f9c2:	2900      	cmp	r1, #0
    f9c4:	f47f af58 	bne.w	f878 <util_aa_le32+0x48>
			if (consecutive_bit) {
    f9c8:	f1be 0f00 	cmp.w	lr, #0
    f9cc:	d037      	beq.n	fa3e <util_aa_le32+0x20e>
				aa &= ~BIT(bit_idx);
    f9ce:	fa04 f203 	lsl.w	r2, r4, r3
				if (bit_idx < 8) {
    f9d2:	2b07      	cmp	r3, #7
				aa &= ~BIT(bit_idx);
    f9d4:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
    f9d8:	bf88      	it	hi
    f9da:	f04f 0e00 	movhi.w	lr, #0
				if (bit_idx < 8) {
    f9de:	d8c6      	bhi.n	f96e <util_aa_le32+0x13e>
					ones_count_lsb8--;
    f9e0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    f9e4:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 0U;
    f9e8:	f04f 0e00 	mov.w	lr, #0
    f9ec:	e7bf      	b.n	f96e <util_aa_le32+0x13e>
		if ((bit_idx < 8) && consecutive_bit) {
    f9ee:	2a00      	cmp	r2, #0
    f9f0:	f43f af79 	beq.w	f8e6 <util_aa_le32+0xb6>
			ones_count_lsb8++;
    f9f4:	f10b 0b01 	add.w	fp, fp, #1
    f9f8:	fa5f fb8b 	uxtb.w	fp, fp
    f9fc:	4696      	mov	lr, r2
    f9fe:	e73b      	b.n	f878 <util_aa_le32+0x48>
		    (!consecutive_bit && (((bit_idx < 6) &&
    fa00:	f1bb 0f00 	cmp.w	fp, #0
    fa04:	d00b      	beq.n	fa1e <util_aa_le32+0x1ee>
					   (ones_count_lsb8 < 1)) ||
    fa06:	2b04      	cmp	r3, #4
    fa08:	f63f af71 	bhi.w	f8ee <util_aa_le32+0xbe>
					  ((bit_idx < 5) &&
    fa0c:	f1bb 0f01 	cmp.w	fp, #1
    fa10:	d905      	bls.n	fa1e <util_aa_le32+0x1ee>
					   (ones_count_lsb8 < 2)) ||
    fa12:	2b03      	cmp	r3, #3
    fa14:	f63f af6b 	bhi.w	f8ee <util_aa_le32+0xbe>
					  ((bit_idx < 4) &&
    fa18:	f1bb 0f02 	cmp.w	fp, #2
    fa1c:	d809      	bhi.n	fa32 <util_aa_le32+0x202>
				aa |= BIT(bit_idx);
    fa1e:	fa04 f203 	lsl.w	r2, r4, r3
    fa22:	4310      	orrs	r0, r2
					ones_count_lsb8++;
    fa24:	f10b 0b01 	add.w	fp, fp, #1
    fa28:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 1U;
    fa2c:	f04f 0e01 	mov.w	lr, #1
    fa30:	e79d      	b.n	f96e <util_aa_le32+0x13e>
					   (ones_count_lsb8 < 3)))) ||
    fa32:	2a06      	cmp	r2, #6
    fa34:	d00d      	beq.n	fa52 <util_aa_le32+0x222>
		     (((bit_idx < 29) && (transitions < 1)) ||
    fa36:	b111      	cbz	r1, fa3e <util_aa_le32+0x20e>
    fa38:	f04f 0e00 	mov.w	lr, #0
    fa3c:	e71c      	b.n	f878 <util_aa_le32+0x48>
				aa |= BIT(bit_idx);
    fa3e:	fa04 f203 	lsl.w	r2, r4, r3
				if (bit_idx < 8) {
    fa42:	2b07      	cmp	r3, #7
				aa |= BIT(bit_idx);
    fa44:	ea40 0002 	orr.w	r0, r0, r2
				consecutive_bit = 1U;
    fa48:	bf88      	it	hi
    fa4a:	f04f 0e01 	movhi.w	lr, #1
				if (bit_idx < 8) {
    fa4e:	d88e      	bhi.n	f96e <util_aa_le32+0x13e>
    fa50:	e7e8      	b.n	fa24 <util_aa_le32+0x1f4>
					   (ones_count_lsb8 < 3)))) ||
    fa52:	f04f 0e00 	mov.w	lr, #0
    fa56:	e712      	b.n	f87e <util_aa_le32+0x4e>
				consecutive_cnt = 1U;
    fa58:	f04f 0a01 	mov.w	sl, #1
    fa5c:	e78e      	b.n	f97c <util_aa_le32+0x14c>
		if ((consecutive_cnt > 6) ||
    fa5e:	f1be 0f00 	cmp.w	lr, #0
    fa62:	d112      	bne.n	fa8a <util_aa_le32+0x25a>
    fa64:	4641      	mov	r1, r8
    fa66:	46cc      	mov	ip, r9
    fa68:	e73e      	b.n	f8e8 <util_aa_le32+0xb8>
		if ((bit_idx < 8) && consecutive_bit) {
    fa6a:	f1be 0f00 	cmp.w	lr, #0
    fa6e:	d01f      	beq.n	fab0 <util_aa_le32+0x280>
			ones_count_lsb8++;
    fa70:	f10b 0b01 	add.w	fp, fp, #1
		if ((consecutive_cnt > 6) ||
    fa74:	2a06      	cmp	r2, #6
			ones_count_lsb8++;
    fa76:	fa5f fb8b 	uxtb.w	fp, fp
		if ((consecutive_cnt > 6) ||
    fa7a:	d90b      	bls.n	fa94 <util_aa_le32+0x264>
				aa &= ~BIT(bit_idx);
    fa7c:	fa04 f203 	lsl.w	r2, r4, r3
    fa80:	ea20 0002 	bic.w	r0, r0, r2
    fa84:	4641      	mov	r1, r8
    fa86:	46cc      	mov	ip, r9
    fa88:	e7aa      	b.n	f9e0 <util_aa_le32+0x1b0>
					   (ones_count_lsb8 < 3)))) ||
    fa8a:	2a06      	cmp	r2, #6
    fa8c:	d118      	bne.n	fac0 <util_aa_le32+0x290>
    fa8e:	4641      	mov	r1, r8
    fa90:	46cc      	mov	ip, r9
    fa92:	e6f6      	b.n	f882 <util_aa_le32+0x52>
    fa94:	d0fb      	beq.n	fa8e <util_aa_le32+0x25e>
		     (((bit_idx < 29) && (transitions < 1)) ||
    fa96:	4641      	mov	r1, r8
    fa98:	46cc      	mov	ip, r9
    fa9a:	f1b8 0f00 	cmp.w	r8, #0
    fa9e:	d096      	beq.n	f9ce <util_aa_le32+0x19e>
    faa0:	e6ea      	b.n	f878 <util_aa_le32+0x48>
		      ((bit_idx < 28) && (transitions < 2))))) {
    faa2:	2901      	cmp	r1, #1
    faa4:	f63f aeeb 	bhi.w	f87e <util_aa_le32+0x4e>
			if (consecutive_bit) {
    faa8:	f1be 0f00 	cmp.w	lr, #0
    faac:	d0c7      	beq.n	fa3e <util_aa_le32+0x20e>
    faae:	e78e      	b.n	f9ce <util_aa_le32+0x19e>
		if ((consecutive_cnt > 6) ||
    fab0:	2a06      	cmp	r2, #6
    fab2:	d9d7      	bls.n	fa64 <util_aa_le32+0x234>
				aa |= BIT(bit_idx);
    fab4:	fa04 f203 	lsl.w	r2, r4, r3
    fab8:	4310      	orrs	r0, r2
    faba:	4641      	mov	r1, r8
    fabc:	46cc      	mov	ip, r9
    fabe:	e7b1      	b.n	fa24 <util_aa_le32+0x1f4>
					   (ones_count_lsb8 < 3)))) ||
    fac0:	4641      	mov	r1, r8
    fac2:	46cc      	mov	ip, r9
    fac4:	e6d5      	b.n	f872 <util_aa_le32+0x42>
    fac6:	bf00      	nop
    fac8:	8e89bed6 	.word	0x8e89bed6

0000facc <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    facc:	eba2 0c01 	sub.w	ip, r2, r1
    fad0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    fad4:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    fad6:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    fad8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    fada:	d10a      	bne.n	faf2 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fadc:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    fae0:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    fae2:	42a3      	cmp	r3, r4
    fae4:	d914      	bls.n	fb10 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    fae6:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    fae8:	2100      	movs	r1, #0
}
    faea:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    faec:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    faee:	6141      	str	r1, [r0, #20]
}
    faf0:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    faf2:	1a89      	subs	r1, r1, r2
    faf4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    faf8:	428b      	cmp	r3, r1
    fafa:	d806      	bhi.n	fb0a <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    fafc:	4421      	add	r1, r4
    fafe:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    fb00:	2300      	movs	r3, #0
}
    fb02:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    fb04:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    fb06:	6141      	str	r1, [r0, #20]
}
    fb08:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    fb0a:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    fb0c:	42a3      	cmp	r3, r4
    fb0e:	d8ea      	bhi.n	fae6 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    fb10:	1ae1      	subs	r1, r4, r3
    fb12:	e7f5      	b.n	fb00 <ticks_to_expire_prep+0x34>

0000fb14 <ticker_job_list_insert>:
{
    fb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb18:	b087      	sub	sp, #28
    fb1a:	4603      	mov	r3, r0
	count_user = instance->count_user;
    fb1c:	7a42      	ldrb	r2, [r0, #9]
{
    fb1e:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    fb20:	6800      	ldr	r0, [r0, #0]
    fb22:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    fb24:	6858      	ldr	r0, [r3, #4]
    fb26:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    fb28:	2a00      	cmp	r2, #0
    fb2a:	f000 80e9 	beq.w	fd00 <ticker_job_list_insert+0x1ec>
    fb2e:	1e53      	subs	r3, r2, #1
    fb30:	b2db      	uxtb	r3, r3
    fb32:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    fb36:	460f      	mov	r7, r1
    fb38:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    fb3a:	9b03      	ldr	r3, [sp, #12]
    fb3c:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    fb3e:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    fb40:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    fb42:	2fff      	cmp	r7, #255	; 0xff
    fb44:	d05e      	beq.n	fc04 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    fb46:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    fb4a:	9b02      	ldr	r3, [sp, #8]
    fb4c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    fb50:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    fb52:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    fb56:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    fb5a:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    fb5c:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    fb5e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    fb62:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    fb66:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    fb6a:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    fb6c:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    fb70:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    fb72:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    fb76:	d10f      	bne.n	fb98 <ticker_job_list_insert+0x84>
    fb78:	e0bd      	b.n	fcf6 <ticker_job_list_insert+0x1e2>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    fb7a:	1a09      	subs	r1, r1, r0
    fb7c:	d106      	bne.n	fb8c <ticker_job_list_insert+0x78>
    fb7e:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    fb82:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    fb86:	45e2      	cmp	sl, ip
    fb88:	f200 8086 	bhi.w	fc98 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    fb8c:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    fb90:	2bff      	cmp	r3, #255	; 0xff
    fb92:	4691      	mov	r9, r2
    fb94:	d072      	beq.n	fc7c <ticker_job_list_insert+0x168>
    fb96:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    fb98:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    fb9c:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    fba0:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    fba2:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    fba6:	4288      	cmp	r0, r1
    fba8:	d9e7      	bls.n	fb7a <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    fbaa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    fbae:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    fbb2:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    fbb6:	d166      	bne.n	fc86 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    fbb8:	9b01      	ldr	r3, [sp, #4]
    fbba:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    fbbe:	2aff      	cmp	r2, #255	; 0xff
    fbc0:	d008      	beq.n	fbd4 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    fbc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fbc6:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    fbca:	f8de 3008 	ldr.w	r3, [lr, #8]
    fbce:	1a5b      	subs	r3, r3, r1
    fbd0:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    fbd4:	78a3      	ldrb	r3, [r4, #2]
    fbd6:	3301      	adds	r3, #1
    fbd8:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    fbda:	2d00      	cmp	r5, #0
    fbdc:	d0b1      	beq.n	fb42 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    fbde:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    fbe2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    fbe4:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    fbe6:	2200      	movs	r2, #0
    fbe8:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    fbea:	b113      	cbz	r3, fbf2 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fbec:	6b29      	ldr	r1, [r5, #48]	; 0x30
    fbee:	4610      	mov	r0, r2
    fbf0:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    fbf2:	6863      	ldr	r3, [r4, #4]
    fbf4:	2b00      	cmp	r3, #0
    fbf6:	d1a4      	bne.n	fb42 <ticker_job_list_insert+0x2e>
					ticker->op_context =
    fbf8:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    fbfc:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    fbfe:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    fc02:	d1a0      	bne.n	fb46 <ticker_job_list_insert+0x32>
    fc04:	9b03      	ldr	r3, [sp, #12]
    fc06:	7898      	ldrb	r0, [r3, #2]
    fc08:	42b0      	cmp	r0, r6
    fc0a:	d02f      	beq.n	fc6c <ticker_job_list_insert+0x158>
    fc0c:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    fc10:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    fc14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
    fc18:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    fc1c:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
    fc20:	3601      	adds	r6, #1
    fc22:	b2f6      	uxtb	r6, r6
					first = 0U;
    fc24:	42b1      	cmp	r1, r6
    fc26:	bf08      	it	eq
    fc28:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    fc2a:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
    fc2c:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    fc30:	d11a      	bne.n	fc68 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    fc32:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    fc36:	9902      	ldr	r1, [sp, #8]
    fc38:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    fc3c:	eb01 1402 	add.w	r4, r1, r2, lsl #4
    fc40:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    fc44:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    fc46:	7862      	ldrb	r2, [r4, #1]
    fc48:	1a52      	subs	r2, r2, r1
    fc4a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    fc4e:	d025      	beq.n	fc9c <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    fc50:	f04f 0200 	mov.w	r2, #0
    fc54:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
    fc58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fc5a:	2001      	movs	r0, #1
	user_op->status = status;
    fc5c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    fc5e:	b10b      	cbz	r3, fc64 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fc60:	6b29      	ldr	r1, [r5, #48]	; 0x30
    fc62:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    fc64:	f89b 0002 	ldrb.w	r0, [fp, #2]
    fc68:	42b0      	cmp	r0, r6
    fc6a:	d1d1      	bne.n	fc10 <ticker_job_list_insert+0xfc>
	while (count_user--) {
    fc6c:	9a03      	ldr	r2, [sp, #12]
    fc6e:	9905      	ldr	r1, [sp, #20]
    fc70:	4291      	cmp	r1, r2
    fc72:	f1a2 0308 	sub.w	r3, r2, #8
    fc76:	d043      	beq.n	fd00 <ticker_job_list_insert+0x1ec>
    fc78:	9303      	str	r3, [sp, #12]
    fc7a:	e75e      	b.n	fb3a <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    fc7c:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    fc80:	f88b 3000 	strb.w	r3, [fp]
    fc84:	461a      	mov	r2, r3
		node[previous].next = id;
    fc86:	fa0f f989 	sxth.w	r9, r9
    fc8a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    fc8e:	ea4f 1909 	mov.w	r9, r9, lsl #4
    fc92:	f80e 8009 	strb.w	r8, [lr, r9]
    fc96:	e792      	b.n	fbbe <ticker_job_list_insert+0xaa>
    fc98:	4601      	mov	r1, r0
    fc9a:	e786      	b.n	fbaa <ticker_job_list_insert+0x96>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    fc9c:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    fc9e:	9901      	ldr	r1, [sp, #4]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    fca0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    fca4:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
    fca6:	6949      	ldr	r1, [r1, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    fca8:	d01f      	beq.n	fcea <ticker_job_list_insert+0x1d6>
    fcaa:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    fcae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fcb0:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    fcb2:	68ea      	ldr	r2, [r5, #12]
    fcb4:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    fcb6:	692a      	ldr	r2, [r5, #16]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    fcb8:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    fcba:	69ab      	ldr	r3, [r5, #24]
    fcbc:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    fcbe:	69eb      	ldr	r3, [r5, #28]
    fcc0:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    fcc2:	6a2b      	ldr	r3, [r5, #32]
    fcc4:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    fcc6:	68ab      	ldr	r3, [r5, #8]
    fcc8:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    fcca:	2300      	movs	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
    fccc:	6222      	str	r2, [r4, #32]
	ticker->ticks_to_expire_minus = 0U;
    fcce:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    fcd0:	686a      	ldr	r2, [r5, #4]
    fcd2:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    fcd4:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    fcd6:	f7ff fef9 	bl	facc <ticks_to_expire_prep>
	ticker->force = 1U;
    fcda:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    fcde:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    fce2:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    fce6:	70e3      	strb	r3, [r4, #3]
}
    fce8:	e738      	b.n	fb5c <ticker_job_list_insert+0x48>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    fcea:	f04f 0301 	mov.w	r3, #1
    fcee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    fcf2:	4613      	mov	r3, r2
    fcf4:	e7db      	b.n	fcae <ticker_job_list_insert+0x19a>
	ticker_new->next = current;
    fcf6:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    fcfa:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    fcfe:	e769      	b.n	fbd4 <ticker_job_list_insert+0xc0>
}
    fd00:	b007      	add	sp, #28
    fd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd06:	bf00      	nop

0000fd08 <ticker_worker>:
{
    fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    fd0c:	7f82      	ldrb	r2, [r0, #30]
{
    fd0e:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    fd10:	2301      	movs	r3, #1
	if (instance->job_guard) {
    fd12:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    fd14:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    fd16:	2a00      	cmp	r2, #0
    fd18:	d15a      	bne.n	fdd0 <ticker_worker+0xc8>
	if (instance->ticker_id_head == TICKER_NULL) {
    fd1a:	7f43      	ldrb	r3, [r0, #29]
    fd1c:	2bff      	cmp	r3, #255	; 0xff
    fd1e:	4681      	mov	r9, r0
    fd20:	d055      	beq.n	fdce <ticker_worker+0xc6>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    fd22:	f00c fdc1 	bl	1c8a8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fd26:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fd2a:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    fd2e:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fd32:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fd34:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fd36:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fd3a:	f000 813a 	beq.w	ffb2 <ticker_worker+0x2aa>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    fd3e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    fd42:	42b3      	cmp	r3, r6
    fd44:	bf94      	ite	ls
    fd46:	2300      	movls	r3, #0
    fd48:	2301      	movhi	r3, #1
    fd4a:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    fd4c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
    fd50:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    fd54:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    fd58:	d062      	beq.n	fe20 <ticker_worker+0x118>
			must_expire_skip = 1U;
    fd5a:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
    fd5e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    fd62:	eb07 140b 	add.w	r4, r7, fp, lsl #4
    fd66:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    fd6a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    fd6c:	42b3      	cmp	r3, r6
    fd6e:	d855      	bhi.n	fe1c <ticker_worker+0x114>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    fd70:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
    fd74:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
    fd78:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
    fd7a:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    fd7c:	7863      	ldrb	r3, [r4, #1]
    fd7e:	eba3 030a 	sub.w	r3, r3, sl
    fd82:	b2db      	uxtb	r3, r3
    fd84:	2b01      	cmp	r3, #1
    fd86:	d146      	bne.n	fe16 <ticker_worker+0x10e>
		if (ticker->ticks_slot != 0U &&
    fd88:	69a0      	ldr	r0, [r4, #24]
    fd8a:	b348      	cbz	r0, fde0 <ticker_worker+0xd8>
    fd8c:	9b01      	ldr	r3, [sp, #4]
    fd8e:	b313      	cbz	r3, fdd6 <ticker_worker+0xce>
		int32_t lazy_current = ticker->lazy_current;
    fd90:	8be3      	ldrh	r3, [r4, #30]
    fd92:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    fd94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
    fd96:	b13a      	cbz	r2, fda8 <ticker_worker+0xa0>
    fd98:	6813      	ldr	r3, [r2, #0]
    fd9a:	b11b      	cbz	r3, fda4 <ticker_worker+0x9c>
			    ext_data->ticks_slot_window != 0U &&
    fd9c:	7a13      	ldrb	r3, [r2, #8]
    fd9e:	2b00      	cmp	r3, #0
    fda0:	f000 80ed 	beq.w	ff7e <ticker_worker+0x276>
				ext_data->reschedule_state =
    fda4:	2300      	movs	r3, #0
    fda6:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
    fda8:	9b03      	ldr	r3, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    fdaa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    fdae:	3301      	adds	r3, #1
    fdb0:	b29b      	uxth	r3, r3
    fdb2:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    fdb4:	2900      	cmp	r1, #0
    fdb6:	d02e      	beq.n	fe16 <ticker_worker+0x10e>
    fdb8:	8ba1      	ldrh	r1, [r4, #28]
    fdba:	4299      	cmp	r1, r3
    fdbc:	d22b      	bcs.n	fe16 <ticker_worker+0x10e>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    fdbe:	2a00      	cmp	r2, #0
    fdc0:	f000 80fa 	beq.w	ffb8 <ticker_worker+0x2b0>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    fdc4:	7a13      	ldrb	r3, [r2, #8]
    fdc6:	2b01      	cmp	r3, #1
    fdc8:	d025      	beq.n	fe16 <ticker_worker+0x10e>
			must_expire_skip = 1U;
    fdca:	2301      	movs	r3, #1
    fdcc:	e00c      	b.n	fde8 <ticker_worker+0xe0>
		instance->worker_trigger = 0U;
    fdce:	77c2      	strb	r2, [r0, #31]
}
    fdd0:	b00d      	add	sp, #52	; 0x34
    fdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    fdd6:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    fdda:	9305      	str	r3, [sp, #20]
    fddc:	3380      	adds	r3, #128	; 0x80
    fdde:	d163      	bne.n	fea8 <ticker_worker+0x1a0>
		if (ticker->ext_data) {
    fde0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    fde2:	2a00      	cmp	r2, #0
    fde4:	d03f      	beq.n	fe66 <ticker_worker+0x15e>
    fde6:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
    fde8:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    fdea:	7211      	strb	r1, [r2, #8]
		if (ticker->timeout_func) {
    fdec:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    fdee:	6051      	str	r1, [r2, #4]
		ticker->ack--;
    fdf0:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
    fdf4:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    fdf6:	b175      	cbz	r5, fe16 <ticker_worker+0x10e>
					   ticks_expired -
    fdf8:	9a02      	ldr	r2, [sp, #8]
    fdfa:	6960      	ldr	r0, [r4, #20]
    fdfc:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
    fdfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    fe00:	eba8 0000 	sub.w	r0, r8, r0
    fe04:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    fe06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    fe0a:	2b00      	cmp	r3, #0
    fe0c:	d03a      	beq.n	fe84 <ticker_worker+0x17c>
    fe0e:	6923      	ldr	r3, [r4, #16]
    fe10:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fe14:	47a8      	blx	r5
	while (ticker_id_head != TICKER_NULL) {
    fe16:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    fe1a:	d1a0      	bne.n	fd5e <ticker_worker+0x56>
    fe1c:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    fe20:	f899 300b 	ldrb.w	r3, [r9, #11]
    fe24:	f899 200a 	ldrb.w	r2, [r9, #10]
    fe28:	429a      	cmp	r2, r3
    fe2a:	d10a      	bne.n	fe42 <ticker_worker+0x13a>
	uint8_t idx = *ticks_elapsed_index + 1;
    fe2c:	3201      	adds	r2, #1
    fe2e:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    fe30:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    fe32:	bf1c      	itt	ne
    fe34:	4613      	movne	r3, r2
    fe36:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    fe38:	9a04      	ldr	r2, [sp, #16]
    fe3a:	f889 200b 	strb.w	r2, [r9, #11]
    fe3e:	bf08      	it	eq
    fe40:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    fe42:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fe46:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    fe4a:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    fe4e:	2200      	movs	r2, #0
    fe50:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fe54:	464b      	mov	r3, r9
    fe56:	2201      	movs	r2, #1
    fe58:	2104      	movs	r1, #4
    fe5a:	2003      	movs	r0, #3
    fe5c:	46a4      	mov	ip, r4
}
    fe5e:	b00d      	add	sp, #52	; 0x34
    fe60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fe64:	4760      	bx	ip
		if (ticker->timeout_func) {
    fe66:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    fe68:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fe6c:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    fe6e:	2d00      	cmp	r5, #0
    fe70:	d0d1      	beq.n	fe16 <ticker_worker+0x10e>
					   ticks_expired -
    fe72:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    fe74:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    fe76:	eba8 0003 	sub.w	r0, r8, r3
    fe7a:	9b02      	ldr	r3, [sp, #8]
    fe7c:	695b      	ldr	r3, [r3, #20]
    fe7e:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    fe80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    fe84:	6923      	ldr	r3, [r4, #16]
    fe86:	8be2      	ldrh	r2, [r4, #30]
    fe88:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    fe8a:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    fe8c:	2b00      	cmp	r3, #0
    fe8e:	9b01      	ldr	r3, [sp, #4]
    fe90:	bf18      	it	ne
    fe92:	2301      	movne	r3, #1
    fe94:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    fe96:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
				ticker->lazy_current = 0U;
    fe9a:	f04f 0300 	mov.w	r3, #0
    fe9e:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    fea0:	70e3      	strb	r3, [r4, #3]
	while (ticker_id_head != TICKER_NULL) {
    fea2:	f47f af5c 	bne.w	fd5e <ticker_worker+0x56>
    fea6:	e7b9      	b.n	fe1c <ticker_worker+0x114>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    fea8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    feac:	d098      	beq.n	fde0 <ticker_worker+0xd8>
		int32_t lazy_current = ticker->lazy_current;
    feae:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    feb0:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    feb2:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    feb6:	9203      	str	r2, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
    feb8:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    feba:	bf28      	it	cs
    febc:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    febe:	fb02 c10c 	mla	r1, r2, ip, ip
    fec2:	9106      	str	r1, [sp, #24]
				(lazy_current - ticker->priority);
    fec4:	9905      	ldr	r1, [sp, #20]
		uint32_t acc_ticks_to_expire = 0U;
    fec6:	f8cd a020 	str.w	sl, [sp, #32]
    feca:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
    fece:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
    fed0:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
    fed2:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
    fed4:	9207      	str	r2, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    fed6:	2500      	movs	r5, #0
    fed8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    fedc:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
    fede:	b21b      	sxth	r3, r3
    fee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fee4:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    fee8:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    feea:	f8d2 8008 	ldr.w	r8, [r2, #8]
    feee:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    fef0:	42a8      	cmp	r0, r5
    fef2:	d33c      	bcc.n	ff6e <ticker_worker+0x266>
			if (ticker_next->ticks_slot == 0U) {
    fef4:	6991      	ldr	r1, [r2, #24]
    fef6:	2900      	cmp	r1, #0
    fef8:	d036      	beq.n	ff68 <ticker_worker+0x260>
			int32_t lazy_next = ticker_next->lazy_current;
    fefa:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    fefc:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    fefe:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    ff02:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    ff06:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    ff08:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    ff0a:	bf28      	it	cs
    ff0c:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    ff10:	f1ba 0f00 	cmp.w	sl, #0
    ff14:	d040      	beq.n	ff98 <ticker_worker+0x290>
    ff16:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    ff1a:	2c00      	cmp	r4, #0
    ff1c:	d038      	beq.n	ff90 <ticker_worker+0x288>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    ff1e:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    ff22:	f8dd a018 	ldr.w	sl, [sp, #24]
    ff26:	45c2      	cmp	sl, r8
    ff28:	bf8c      	ite	hi
    ff2a:	f04f 0801 	movhi.w	r8, #1
    ff2e:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    ff32:	bf34      	ite	cc
    ff34:	f04f 0a01 	movcc.w	sl, #1
    ff38:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    ff3c:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    ff3e:	f892 b003 	ldrb.w	fp, [r2, #3]
    ff42:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    ff46:	d30f      	bcc.n	ff68 <ticker_worker+0x260>
    ff48:	4593      	cmp	fp, r2
    ff4a:	d82a      	bhi.n	ffa2 <ticker_worker+0x29a>
			    (next_force ||
    ff4c:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    ff50:	d027      	beq.n	ffa2 <ticker_worker+0x29a>
			     next_is_critical ||
    ff52:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    ff54:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    ff58:	4594      	cmp	ip, r2
    ff5a:	dd02      	ble.n	ff62 <ticker_worker+0x25a>
			     (next_has_priority && !current_is_older) ||
    ff5c:	f1b8 0f00 	cmp.w	r8, #0
    ff60:	d01f      	beq.n	ffa2 <ticker_worker+0x29a>
    ff62:	9a05      	ldr	r2, [sp, #20]
    ff64:	4572      	cmp	r2, lr
    ff66:	d019      	beq.n	ff9c <ticker_worker+0x294>
			id_head = ticker_next->next;
    ff68:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    ff6a:	2bff      	cmp	r3, #255	; 0xff
    ff6c:	d1b7      	bne.n	fede <ticker_worker+0x1d6>
    ff6e:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
    ff72:	f8dd a020 	ldr.w	sl, [sp, #32]
    ff76:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    ff7a:	464c      	mov	r4, r9
    ff7c:	e730      	b.n	fde0 <ticker_worker+0xd8>
			    TICKER_RESCHEDULE_STATE_NONE &&
    ff7e:	8ba3      	ldrh	r3, [r4, #28]
    ff80:	9903      	ldr	r1, [sp, #12]
    ff82:	428b      	cmp	r3, r1
    ff84:	f63f af0e 	bhi.w	fda4 <ticker_worker+0x9c>
				ext_data->reschedule_state =
    ff88:	f04f 0301 	mov.w	r3, #1
    ff8c:	7213      	strb	r3, [r2, #8]
    ff8e:	e70b      	b.n	fda8 <ticker_worker+0xa0>
				(ticker->ticks_periodic == 0U) ||
    ff90:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
    ff94:	46a2      	mov	sl, r4
    ff96:	e7d1      	b.n	ff3c <ticker_worker+0x234>
					  0U :
    ff98:	46d0      	mov	r8, sl
    ff9a:	e7be      	b.n	ff1a <ticker_worker+0x212>
			     (equal_priority && next_is_older))) {
    ff9c:	f1ba 0f00 	cmp.w	sl, #0
    ffa0:	d0e2      	beq.n	ff68 <ticker_worker+0x260>
    ffa2:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
    ffa6:	f8dd a020 	ldr.w	sl, [sp, #32]
    ffaa:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    ffae:	464c      	mov	r4, r9
    ffb0:	e6f0      	b.n	fd94 <ticker_worker+0x8c>
	uint8_t slot_reserved = 0;
    ffb2:	9b04      	ldr	r3, [sp, #16]
    ffb4:	9301      	str	r3, [sp, #4]
    ffb6:	e6c9      	b.n	fd4c <ticker_worker+0x44>
		if (ticker->timeout_func) {
    ffb8:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    ffba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    ffbe:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    ffc0:	2d00      	cmp	r5, #0
    ffc2:	f43f af28 	beq.w	fe16 <ticker_worker+0x10e>
					   ticks_expired -
    ffc6:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    ffc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    ffca:	eba8 0003 	sub.w	r0, r8, r3
    ffce:	9b02      	ldr	r3, [sp, #8]
    ffd0:	695b      	ldr	r3, [r3, #20]
    ffd2:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    ffd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ffd8:	e719      	b.n	fe0e <ticker_worker+0x106>
    ffda:	bf00      	nop

0000ffdc <ticker_job>:
	if (instance->worker_trigger) {
    ffdc:	7fc2      	ldrb	r2, [r0, #31]
    ffde:	2a00      	cmp	r2, #0
    ffe0:	f040 8401 	bne.w	107e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7e7>
{
    ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffe8:	4683      	mov	fp, r0
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ffea:	7a83      	ldrb	r3, [r0, #10]
    ffec:	7ac1      	ldrb	r1, [r0, #11]
{
    ffee:	b08f      	sub	sp, #60	; 0x3c
	instance->job_guard = 1U;
    fff0:	2001      	movs	r0, #1
    fff2:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    fff6:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    fff8:	f8db 0014 	ldr.w	r0, [fp, #20]
    fffc:	900a      	str	r0, [sp, #40]	; 0x28
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    fffe:	f000 80a2 	beq.w	10146 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x147>
	uint8_t idx = *ticks_elapsed_index + 1;
   10002:	3301      	adds	r3, #1
   10004:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   10006:	2b02      	cmp	r3, #2
		idx = 0U;
   10008:	bf08      	it	eq
   1000a:	4613      	moveq	r3, r2
		ticks_elapsed =
   1000c:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   10010:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   10014:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   10018:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   1001a:	930b      	str	r3, [sp, #44]	; 0x2c
		instance->ticks_current += ticks_elapsed;
   1001c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		ticks_elapsed =
   1001e:	9205      	str	r2, [sp, #20]
		instance->ticks_current += ticks_elapsed;
   10020:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   10022:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   10026:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1002a:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   1002e:	f8db 3000 	ldr.w	r3, [fp]
   10032:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   10034:	f8db 3004 	ldr.w	r3, [fp, #4]
   10038:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   1003a:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   1003c:	9208      	str	r2, [sp, #32]
	while (count_user--) {
   1003e:	b2db      	uxtb	r3, r3
   10040:	2a00      	cmp	r2, #0
   10042:	f000 84bf 	beq.w	109c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9c5>
		flag_elapsed = 1U;
   10046:	2201      	movs	r2, #1
   10048:	920d      	str	r2, [sp, #52]	; 0x34
   1004a:	9a07      	ldr	r2, [sp, #28]
   1004c:	f8cd b004 	str.w	fp, [sp, #4]
   10050:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   10054:	2300      	movs	r3, #0
   10056:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   10058:	23ff      	movs	r3, #255	; 0xff
   1005a:	9304      	str	r3, [sp, #16]
   1005c:	46cb      	mov	fp, r9
		user_ops = &user->user_op[0];
   1005e:	f8db 8004 	ldr.w	r8, [fp, #4]
		while (user->middle != user->last) {
   10062:	f89b c003 	ldrb.w	ip, [fp, #3]
   10066:	f89b 9002 	ldrb.w	r9, [fp, #2]
   1006a:	45e1      	cmp	r9, ip
   1006c:	d063      	beq.n	10136 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x137>
			if (middle == user->count_user_op) {
   1006e:	f89b 2000 	ldrb.w	r2, [fp]
			middle = user->middle + 1;
   10072:	f109 0301 	add.w	r3, r9, #1
			user_op = &user_ops[user->middle];
   10076:	fa0f f789 	sxth.w	r7, r9
			middle = user->middle + 1;
   1007a:	b2db      	uxtb	r3, r3
				middle = 0U;
   1007c:	429a      	cmp	r2, r3
   1007e:	bf08      	it	eq
   10080:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   10082:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   10086:	eb07 0782 	add.w	r7, r7, r2, lsl #2
			user->middle = middle;
   1008a:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1008e:	f818 2027 	ldrb.w	r2, [r8, r7, lsl #2]
   10092:	2a04      	cmp	r2, #4
			user_op = &user_ops[user->middle];
   10094:	eb08 0687 	add.w	r6, r8, r7, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10098:	d969      	bls.n	1016e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16f>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1009a:	2a07      	cmp	r2, #7
   1009c:	d879      	bhi.n	10192 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x193>
			ticker = &node[user_op->id];
   1009e:	7875      	ldrb	r5, [r6, #1]
   100a0:	9903      	ldr	r1, [sp, #12]
   100a2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   100a6:	eb01 1404 	add.w	r4, r1, r4, lsl #4
   100aa:	b229      	sxth	r1, r5
			state = (ticker->req - ticker->ack) & 0xff;
   100ac:	f894 e002 	ldrb.w	lr, [r4, #2]
			ticker = &node[user_op->id];
   100b0:	9102      	str	r1, [sp, #8]
			state = (ticker->req - ticker->ack) & 0xff;
   100b2:	7861      	ldrb	r1, [r4, #1]
   100b4:	eba1 010e 	sub.w	r1, r1, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   100b8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   100bc:	d069      	beq.n	10192 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x193>
			    (state == 0U) ||
   100be:	2a05      	cmp	r2, #5
   100c0:	d057      	beq.n	10172 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x173>
			if (state == 1U) {
   100c2:	2901      	cmp	r1, #1
   100c4:	f040 816a 	bne.w	1039c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39d>
	previous = instance->ticker_id_head;
   100c8:	9901      	ldr	r1, [sp, #4]
   100ca:	7f4b      	ldrb	r3, [r1, #29]
	node = &instance->nodes[0];
   100cc:	f8d1 9000 	ldr.w	r9, [r1]
	while (current != TICKER_NULL) {
   100d0:	2bff      	cmp	r3, #255	; 0xff
   100d2:	d016      	beq.n	10102 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x103>
		ticker_current = &node[current];
   100d4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		if (current == id) {
   100d8:	429d      	cmp	r5, r3
		ticker_current = &node[current];
   100da:	eb09 1101 	add.w	r1, r9, r1, lsl #4
		if (current == id) {
   100de:	f000 8261 	beq.w	105a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5a5>
	total = 0U;
   100e2:	f04f 0c00 	mov.w	ip, #0
   100e6:	e001      	b.n	100ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xed>
		if (current == id) {
   100e8:	429d      	cmp	r5, r3
   100ea:	d061      	beq.n	101b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b1>
		total += ticker_current->ticks_to_expire;
   100ec:	4618      	mov	r0, r3
		current = ticker_current->next;
   100ee:	780b      	ldrb	r3, [r1, #0]
		total += ticker_current->ticks_to_expire;
   100f0:	f8d1 a008 	ldr.w	sl, [r1, #8]
	while (current != TICKER_NULL) {
   100f4:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   100f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   100fa:	44d4      	add	ip, sl
		ticker_current = &node[current];
   100fc:	eb09 1101 	add.w	r1, r9, r1, lsl #4
	while (current != TICKER_NULL) {
   10100:	d1f2      	bne.n	100e8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe9>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10102:	2300      	movs	r3, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10104:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10106:	60a3      	str	r3, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10108:	f000 8130 	beq.w	1036c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x36d>
		if (instance->ticker_id_slot_previous == user_op->id) {
   1010c:	9b01      	ldr	r3, [sp, #4]
		ticker->req = ticker->ack;
   1010e:	f884 e001 	strb.w	lr, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   10112:	7f1b      	ldrb	r3, [r3, #28]
   10114:	42ab      	cmp	r3, r5
   10116:	f000 80fd 	beq.w	10314 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x315>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1011a:	2000      	movs	r0, #0
   1011c:	f808 0027 	strb.w	r0, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   10120:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->status = status;
   10122:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   10124:	b10b      	cbz	r3, 1012a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12b>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10126:	6b31      	ldr	r1, [r6, #48]	; 0x30
   10128:	4798      	blx	r3
		while (user->middle != user->last) {
   1012a:	f89b c003 	ldrb.w	ip, [fp, #3]
   1012e:	f89b 9002 	ldrb.w	r9, [fp, #2]
   10132:	45e1      	cmp	r9, ip
   10134:	d19b      	bne.n	1006e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6f>
	while (count_user--) {
   10136:	9a07      	ldr	r2, [sp, #28]
   10138:	455a      	cmp	r2, fp
   1013a:	f1ab 0308 	sub.w	r3, fp, #8
   1013e:	f000 813d 	beq.w	103bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bd>
   10142:	469b      	mov	fp, r3
   10144:	e78b      	b.n	1005e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5f>
	ticker_id_old_head = instance->ticker_id_head;
   10146:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   1014a:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1014e:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->nodes[0];
   10150:	f8db 3000 	ldr.w	r3, [fp]
   10154:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   10156:	f8db 3004 	ldr.w	r3, [fp, #4]
   1015a:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   1015c:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   1015e:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   10160:	b2db      	uxtb	r3, r3
   10162:	2900      	cmp	r1, #0
   10164:	f000 8304 	beq.w	10770 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x771>
		flag_elapsed = 0U;
   10168:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   1016a:	9205      	str	r2, [sp, #20]
   1016c:	e76d      	b.n	1004a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b>
   1016e:	4699      	mov	r9, r3
   10170:	e77b      	b.n	1006a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6b>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   10172:	6870      	ldr	r0, [r6, #4]
   10174:	2800      	cmp	r0, #0
   10176:	d1a4      	bne.n	100c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   10178:	68b0      	ldr	r0, [r6, #8]
   1017a:	2800      	cmp	r0, #0
   1017c:	d1a1      	bne.n	100c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1017e:	68f0      	ldr	r0, [r6, #12]
   10180:	2800      	cmp	r0, #0
   10182:	d19e      	bne.n	100c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   10184:	6930      	ldr	r0, [r6, #16]
   10186:	2800      	cmp	r0, #0
   10188:	d19b      	bne.n	100c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3>
			     (user_op->params.update.lazy == 0U) &&
   1018a:	6970      	ldr	r0, [r6, #20]
   1018c:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   10190:	d197      	bne.n	100c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10192:	2200      	movs	r2, #0
   10194:	f808 2027 	strb.w	r2, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   10198:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	user_op->status = status;
   1019a:	2001      	movs	r0, #1
   1019c:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   1019e:	2a00      	cmp	r2, #0
   101a0:	d0e5      	beq.n	1016e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16f>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   101a2:	6b31      	ldr	r1, [r6, #48]	; 0x30
   101a4:	4790      	blx	r2
		while (user->middle != user->last) {
   101a6:	f89b c003 	ldrb.w	ip, [fp, #3]
   101aa:	f89b 9002 	ldrb.w	r9, [fp, #2]
   101ae:	e75c      	b.n	1006a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6b>
	if (previous == current) {
   101b0:	4285      	cmp	r5, r0
   101b2:	f000 80c4 	beq.w	1033e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x33f>
	node[previous].next = ticker_current->next;
   101b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   101ba:	780b      	ldrb	r3, [r1, #0]
   101bc:	eb09 1000 	add.w	r0, r9, r0, lsl #4
	timeout = ticker_current->ticks_to_expire;
   101c0:	f8d1 a008 	ldr.w	sl, [r1, #8]
	node[previous].next = ticker_current->next;
   101c4:	7003      	strb	r3, [r0, #0]
	if (ticker_current->next != TICKER_NULL) {
   101c6:	780b      	ldrb	r3, [r1, #0]
   101c8:	2bff      	cmp	r3, #255	; 0xff
   101ca:	d008      	beq.n	101de <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1df>
		node[ticker_current->next].ticks_to_expire += timeout;
   101cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   101d0:	eb09 1903 	add.w	r9, r9, r3, lsl #4
   101d4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   101d8:	4453      	add	r3, sl
   101da:	f8c9 3008 	str.w	r3, [r9, #8]
	return (total + timeout);
   101de:	eb0a 090c 	add.w	r9, sl, ip
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   101e2:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   101e4:	f8c4 9008 	str.w	r9, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   101e8:	d190      	bne.n	1010c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10d>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   101ea:	9b01      	ldr	r3, [sp, #4]
   101ec:	695d      	ldr	r5, [r3, #20]
   101ee:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   101f0:	f00c fb5a 	bl	1c8a8 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   101f4:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   101f6:	1b42      	subs	r2, r0, r5
   101f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   101fc:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   101fe:	4591      	cmp	r9, r2
	ticks_now = cntr_cnt_get();
   10200:	4682      	mov	sl, r0
	if (ticks_to_expire > ticks_elapsed) {
   10202:	f240 80bf 	bls.w	10384 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x385>
	ticker->ticks_to_expire_minus +=
   10206:	6963      	ldr	r3, [r4, #20]
   10208:	9306      	str	r3, [sp, #24]
		ticks_to_expire -= ticks_elapsed;
   1020a:	eba9 0202 	sub.w	r2, r9, r2
	if ((ticker->ticks_periodic != 0U) &&
   1020e:	6865      	ldr	r5, [r4, #4]
   10210:	2d00      	cmp	r5, #0
   10212:	d059      	beq.n	102c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c9>
	    (user_op->params.update.lazy != 0U)) {
   10214:	f8b6 9014 	ldrh.w	r9, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   10218:	f1b9 0f00 	cmp.w	r9, #0
   1021c:	d054      	beq.n	102c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c9>
		user_op->params.update.lazy--;
   1021e:	f109 3eff 	add.w	lr, r9, #4294967295	; 0xffffffff
   10222:	fa1f fe8e 	uxth.w	lr, lr
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10226:	4295      	cmp	r5, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   10228:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   1022a:	f8a6 e014 	strh.w	lr, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1022e:	d223      	bcs.n	10278 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x279>
   10230:	1c69      	adds	r1, r5, #1
   10232:	f8cd 8020 	str.w	r8, [sp, #32]
   10236:	960c      	str	r6, [sp, #48]	; 0x30
   10238:	468c      	mov	ip, r1
   1023a:	e018      	b.n	1026e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x26f>
	if ((ticker->remainder_current >= BIT(31)) ||
   1023c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1023e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 10394 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x395>
   10242:	4e55      	ldr	r6, [pc, #340]	; (10398 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x399>)
   10244:	4488      	add	r8, r1
   10246:	45b0      	cmp	r8, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   10248:	bf84      	itt	hi
   1024a:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   1024e:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   10252:	4660      	mov	r0, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   10254:	6a26      	ldr	r6, [r4, #32]
   10256:	bf94      	ite	ls
   10258:	4628      	movls	r0, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1025a:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   1025e:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   10260:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   10262:	1b89      	subs	r1, r1, r6
			ticker->lazy_current--;
   10264:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10266:	4295      	cmp	r5, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   10268:	6261      	str	r1, [r4, #36]	; 0x24
			ticker->lazy_current--;
   1026a:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1026c:	d201      	bcs.n	10272 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x273>
   1026e:	459e      	cmp	lr, r3
   10270:	d3e4      	bcc.n	1023c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x23d>
   10272:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10276:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10278:	459e      	cmp	lr, r3
   1027a:	d923      	bls.n	102c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2c5>
   1027c:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   1027e:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   10280:	e9d4 c108 	ldrd	ip, r1, [r4, #32]
   10284:	b29b      	uxth	r3, r3
			ticks_to_expire += ticker->ticks_periodic +
   10286:	9008      	str	r0, [sp, #32]
   10288:	940c      	str	r4, [sp, #48]	; 0x30
   1028a:	e005      	b.n	10298 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x299>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1028c:	3301      	adds	r3, #1
   1028e:	b29b      	uxth	r3, r3
   10290:	4628      	mov	r0, r5
   10292:	4599      	cmp	r9, r3
			ticks_to_expire += ticker->ticks_periodic +
   10294:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10296:	d011      	beq.n	102bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2bd>
	if ((ticker->remainder_current < BIT(31)) &&
   10298:	483e      	ldr	r0, [pc, #248]	; (10394 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x395>)
   1029a:	4c3f      	ldr	r4, [pc, #252]	; (10398 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x399>)
	ticker->remainder_current += ticker->remainder_periodic;
   1029c:	4461      	add	r1, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1029e:	1808      	adds	r0, r1, r0
   102a0:	42a0      	cmp	r0, r4
   102a2:	d8f3      	bhi.n	1028c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x28d>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   102a4:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   102a6:	9808      	ldr	r0, [sp, #32]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   102a8:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   102ac:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   102ae:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   102b2:	4599      	cmp	r9, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   102b4:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   102b8:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   102ba:	d1ed      	bne.n	10298 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x299>
   102bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   102be:	6261      	str	r1, [r4, #36]	; 0x24
   102c0:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   102c4:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   102c8:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   102ca:	68b0      	ldr	r0, [r6, #8]
	ticker->ticks_to_expire = ticks_to_expire +
   102cc:	440a      	add	r2, r1
   102ce:	60a2      	str	r2, [r4, #8]
	ticker->ticks_to_expire_minus +=
   102d0:	9a06      	ldr	r2, [sp, #24]
   102d2:	4402      	add	r2, r0
   102d4:	6162      	str	r2, [r4, #20]
	struct ticker_ext *ext_data = ticker->ext_data;
   102d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   102d8:	b11a      	cbz	r2, 102e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e3>
   102da:	6813      	ldr	r3, [r2, #0]
   102dc:	b10b      	cbz	r3, 102e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e3>
			user_op->params.update.ticks_drift_plus -
   102de:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   102e0:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   102e2:	4652      	mov	r2, sl
   102e4:	9902      	ldr	r1, [sp, #8]
   102e6:	4620      	mov	r0, r4
   102e8:	f7ff fbf0 	bl	facc <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   102ec:	68f2      	ldr	r2, [r6, #12]
   102ee:	69a3      	ldr	r3, [r4, #24]
   102f0:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   102f2:	6932      	ldr	r2, [r6, #16]
   102f4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   102f6:	bf8c      	ite	hi
   102f8:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   102fa:	2300      	movls	r3, #0
   102fc:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   102fe:	7db3      	ldrb	r3, [r6, #22]
   10300:	b103      	cbz	r3, 10304 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x305>
		ticker->force = user_op->params.update.force;
   10302:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
   10304:	9b04      	ldr	r3, [sp, #16]
   10306:	7023      	strb	r3, [r4, #0]
		ticker->req++;
   10308:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   1030a:	7872      	ldrb	r2, [r6, #1]
   1030c:	9204      	str	r2, [sp, #16]
		ticker->req++;
   1030e:	3301      	adds	r3, #1
   10310:	7063      	strb	r3, [r4, #1]
   10312:	e702      	b.n	1011a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11b>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10314:	9901      	ldr	r1, [sp, #4]
   10316:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10318:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   1031a:	770b      	strb	r3, [r1, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   1031c:	d123      	bne.n	10366 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x367>
				ticks_at_stop =
   1031e:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   10320:	9b01      	ldr	r3, [sp, #4]
   10322:	695b      	ldr	r3, [r3, #20]
			if (!((ticks_at_stop - ticks_current) &
   10324:	1ac2      	subs	r2, r0, r3
   10326:	0211      	lsls	r1, r2, #8
   10328:	d414      	bmi.n	10354 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x355>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1032a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   1032e:	9a05      	ldr	r2, [sp, #20]
   10330:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   10332:	9901      	ldr	r1, [sp, #4]
   10334:	698a      	ldr	r2, [r1, #24]
   10336:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   10338:	bf88      	it	hi
   1033a:	618b      	strhi	r3, [r1, #24]
   1033c:	e6ed      	b.n	1011a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11b>
	node[previous].next = ticker_current->next;
   1033e:	9b02      	ldr	r3, [sp, #8]
   10340:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   10344:	eb09 1000 	add.w	r0, r9, r0, lsl #4
		instance->ticker_id_head = ticker_current->next;
   10348:	f8dd a004 	ldr.w	sl, [sp, #4]
   1034c:	780b      	ldrb	r3, [r1, #0]
   1034e:	f88a 301d 	strb.w	r3, [sl, #29]
   10352:	e735      	b.n	101c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c1>
				if (ticks_elapsed > ticks_used) {
   10354:	9a05      	ldr	r2, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10356:	1a1b      	subs	r3, r3, r0
   10358:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   1035c:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   1035e:	bf34      	ite	cc
   10360:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   10362:	2300      	movcs	r3, #0
   10364:	e7e5      	b.n	10332 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x333>
				ticks_at_stop = cntr_cnt_get();
   10366:	f00c fa9f 	bl	1c8a8 <cntr_cnt_get>
   1036a:	e7d9      	b.n	10320 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x321>
		return 0;
   1036c:	4699      	mov	r9, r3
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1036e:	9b01      	ldr	r3, [sp, #4]
   10370:	695d      	ldr	r5, [r3, #20]
   10372:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   10374:	f00c fa98 	bl	1c8a8 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10378:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1037a:	1b42      	subs	r2, r0, r5
   1037c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   10380:	4682      	mov	sl, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10382:	441a      	add	r2, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10384:	6963      	ldr	r3, [r4, #20]
   10386:	441a      	add	r2, r3
   10388:	eba2 0309 	sub.w	r3, r2, r9
   1038c:	9306      	str	r3, [sp, #24]
   1038e:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   10390:	2200      	movs	r2, #0
   10392:	e73c      	b.n	1020e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x20f>
   10394:	ff172b5a 	.word	0xff172b5a
   10398:	7f172b59 	.word	0x7f172b59
				instance->sched_cb(TICKER_CALL_ID_JOB,
   1039c:	9b01      	ldr	r3, [sp, #4]
   1039e:	2104      	movs	r1, #4
   103a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   103a2:	2201      	movs	r2, #1
   103a4:	4608      	mov	r0, r1
   103a6:	47a0      	blx	r4
	while (count_user--) {
   103a8:	9a07      	ldr	r2, [sp, #28]
				user->middle = prev;
   103aa:	f88b 9002 	strb.w	r9, [fp, #2]
				pending = 1U;
   103ae:	2301      	movs	r3, #1
	while (count_user--) {
   103b0:	455a      	cmp	r2, fp
				pending = 1U;
   103b2:	9309      	str	r3, [sp, #36]	; 0x24
	while (count_user--) {
   103b4:	f1ab 0308 	sub.w	r3, fp, #8
   103b8:	f47f aec3 	bne.w	10142 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x143>
	if (instance->ticker_id_head != ticker_id_old_head) {
   103bc:	f8dd b004 	ldr.w	fp, [sp, #4]
		flag_compare_update = 1U;
   103c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (instance->ticker_id_head != ticker_id_old_head) {
   103c2:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   103c6:	1a9b      	subs	r3, r3, r2
   103c8:	bf18      	it	ne
   103ca:	2301      	movne	r3, #1
   103cc:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   103ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   103d0:	2b00      	cmp	r3, #0
   103d2:	f000 81d0 	beq.w	10776 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x777>
	ticks_now = cntr_cnt_get();
   103d6:	f00c fa67 	bl	1c8a8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   103da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	while (instance->ticker_id_head != TICKER_NULL) {
   103dc:	f89b 701d 	ldrb.w	r7, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   103e0:	1ac3      	subs	r3, r0, r3
   103e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   103e6:	9303      	str	r3, [sp, #12]
	while (instance->ticker_id_head != TICKER_NULL) {
   103e8:	2fff      	cmp	r7, #255	; 0xff
	node = &instance->nodes[0];
   103ea:	f8db 3000 	ldr.w	r3, [fp]
   103ee:	9301      	str	r3, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   103f0:	d058      	beq.n	104a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4a5>
   103f2:	f8dd a014 	ldr.w	sl, [sp, #20]
	if ((ticker->remainder_current < BIT(31)) &&
   103f6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 106c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6c1>
   103fa:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 106c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6c5>
	ticks_expired = 0U;
   103fe:	2300      	movs	r3, #0
   10400:	9302      	str	r3, [sp, #8]
			instance->ticker_id_slot_previous = TICKER_NULL;
   10402:	4655      	mov	r5, sl
		ticker = &node[id_expired];
   10404:	9a01      	ldr	r2, [sp, #4]
   10406:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   1040a:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   1040e:	ea4f 1a03 	mov.w	sl, r3, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   10412:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10414:	42ab      	cmp	r3, r5
   10416:	f200 82b3 	bhi.w	10980 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x981>
		ticks_expired += ticks_to_expire;
   1041a:	9a02      	ldr	r2, [sp, #8]
		is_must_expire_skip = (ticker->must_expire &&
   1041c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
		ticks_expired += ticks_to_expire;
   10420:	441a      	add	r2, r3
   10422:	9202      	str	r2, [sp, #8]
		ticks_latency -= ticks_to_expire;
   10424:	9a03      	ldr	r2, [sp, #12]
   10426:	1ad2      	subs	r2, r2, r3
		ticks_elapsed -= ticks_to_expire;
   10428:	1aed      	subs	r5, r5, r3
		ticks_latency -= ticks_to_expire;
   1042a:	9203      	str	r2, [sp, #12]
		is_must_expire_skip = (ticker->must_expire &&
   1042c:	2800      	cmp	r0, #0
   1042e:	f000 8145 	beq.w	106bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6bd>
   10432:	8be1      	ldrh	r1, [r4, #30]
   10434:	3900      	subs	r1, #0
   10436:	bf18      	it	ne
   10438:	2101      	movne	r1, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
   1043a:	f8db 2018 	ldr.w	r2, [fp, #24]
   1043e:	4293      	cmp	r3, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
   10440:	bf26      	itte	cs
   10442:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   10446:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   1044a:	1ad3      	subcc	r3, r2, r3
		if ((ticker->ticks_slot != 0U) &&
   1044c:	69a2      	ldr	r2, [r4, #24]
			instance->ticks_slot_previous = 0U;
   1044e:	bf28      	it	cs
   10450:	2300      	movcs	r3, #0
   10452:	f8cb 3018 	str.w	r3, [fp, #24]
		if ((ticker->ticks_slot != 0U) &&
   10456:	b132      	cbz	r2, 10466 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x467>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   10458:	7863      	ldrb	r3, [r4, #1]
   1045a:	78a6      	ldrb	r6, [r4, #2]
   1045c:	1b9b      	subs	r3, r3, r6
   1045e:	b2db      	uxtb	r3, r3
		if ((ticker->ticks_slot != 0U) &&
   10460:	2b02      	cmp	r3, #2
   10462:	f000 81ae 	beq.w	107c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7c3>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   10466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		ticker->ticks_to_expire = 0U;
   10468:	2200      	movs	r2, #0
   1046a:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1046c:	9a01      	ldr	r2, [sp, #4]
   1046e:	f812 200a 	ldrb.w	r2, [r2, sl]
   10472:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   10476:	f8d4 c004 	ldr.w	ip, [r4, #4]
   1047a:	f1bc 0f00 	cmp.w	ip, #0
   1047e:	f040 8129 	bne.w	106d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d5>
   10482:	b11b      	cbz	r3, 1048c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x48d>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   10484:	7a1b      	ldrb	r3, [r3, #8]
   10486:	2b01      	cmp	r3, #1
   10488:	f000 815e 	beq.w	10748 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x749>
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   1048c:	78a2      	ldrb	r2, [r4, #2]
   1048e:	7860      	ldrb	r0, [r4, #1]
   10490:	1a80      	subs	r0, r0, r2
   10492:	b2c0      	uxtb	r0, r0
   10494:	2801      	cmp	r0, #1
   10496:	f000 8089 	beq.w	105ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5ad>
			ticker->req = ticker->ack;
   1049a:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   1049c:	f89b 701d 	ldrb.w	r7, [fp, #29]
   104a0:	2fff      	cmp	r7, #255	; 0xff
   104a2:	d1af      	bne.n	10404 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x405>
			flag_compare_update = 1U;
   104a4:	9b08      	ldr	r3, [sp, #32]
   104a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_job_list_insert(instance, insert_head);
   104a8:	9904      	ldr	r1, [sp, #16]
			flag_compare_update = 1U;
   104aa:	4297      	cmp	r7, r2
   104ac:	bf18      	it	ne
   104ae:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   104b0:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   104b2:	9308      	str	r3, [sp, #32]
		ticker_job_list_insert(instance, insert_head);
   104b4:	f7ff fb2e 	bl	fb14 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   104b8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   104bc:	f8db 1000 	ldr.w	r1, [fp]
	while (rescheduling) {
   104c0:	e9cd 3b01 	strd	r3, fp, [sp, #4]
	uint8_t  rescheduled = 0U;
   104c4:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   104c6:	9b01      	ldr	r3, [sp, #4]
   104c8:	2bff      	cmp	r3, #255	; 0xff
   104ca:	d00e      	beq.n	104ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4eb>
   104cc:	9f01      	ldr	r7, [sp, #4]
			ticker = &nodes[ticker_id_head];
   104ce:	b23b      	sxth	r3, r7
   104d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   104d4:	eb01 1603 	add.w	r6, r1, r3, lsl #4
   104d8:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   104da:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   104dc:	b110      	cbz	r0, 104e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4e5>
   104de:	7a04      	ldrb	r4, [r0, #8]
   104e0:	2c01      	cmp	r4, #1
   104e2:	d06b      	beq.n	105bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5bd>
			ticker_id_head = ticker->next;
   104e4:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
   104e6:	2fff      	cmp	r7, #255	; 0xff
   104e8:	d1f1      	bne.n	104ce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4cf>
	return rescheduled;
   104ea:	f8dd b008 	ldr.w	fp, [sp, #8]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   104ee:	2a00      	cmp	r2, #0
   104f0:	f000 8148 	beq.w	10784 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x785>
	if (instance->ticker_id_head != ticker_id_old_head) {
   104f4:	9b01      	ldr	r3, [sp, #4]
   104f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   104f8:	428b      	cmp	r3, r1
   104fa:	f000 81a5 	beq.w	10848 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x849>
	if (!pending) {
   104fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10500:	2b00      	cmp	r3, #0
   10502:	f000 81ac 	beq.w	1085e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x85f>
	if (instance->ticker_id_head == TICKER_NULL) {
   10506:	f89b 201d 	ldrb.w	r2, [fp, #29]
   1050a:	9201      	str	r2, [sp, #4]
	instance->job_guard = 0U;
   1050c:	2300      	movs	r3, #0
   1050e:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   10512:	9b01      	ldr	r3, [sp, #4]
   10514:	2bff      	cmp	r3, #255	; 0xff
   10516:	f000 8249 	beq.w	109ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9ad>
	if (ticker_id_old_head == TICKER_NULL) {
   1051a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1051c:	2bff      	cmp	r3, #255	; 0xff
   1051e:	f000 8256 	beq.w	109ce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9cf>
	ticker = &instance->nodes[instance->ticker_id_head];
   10522:	9a01      	ldr	r2, [sp, #4]
	ticks_to_expire = ticker->ticks_to_expire;
   10524:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   10528:	f8df 919c 	ldr.w	r9, [pc, #412]	; 106c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6c9>
   1052c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 106cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6cd>
   10530:	4f67      	ldr	r7, [pc, #412]	; (106d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d1>)
	ticker = &instance->nodes[instance->ticker_id_head];
   10532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   10536:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   1053a:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   1053c:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   1053e:	f00c f9b3 	bl	1c8a8 <cntr_cnt_get>
		cc = instance->ticks_current;
   10542:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10546:	1b03      	subs	r3, r0, r4
   10548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   1054c:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   1054e:	42b3      	cmp	r3, r6
   10550:	bf2c      	ite	cs
   10552:	18e4      	addcs	r4, r4, r3
   10554:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   10556:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   1055a:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   1055e:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   10560:	4620      	mov	r0, r4
   10562:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   10564:	f00c f9a0 	bl	1c8a8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10568:	eba0 030a 	sub.w	r3, r0, sl
   1056c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10570:	eba4 020a 	sub.w	r2, r4, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   10574:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10576:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   1057a:	4293      	cmp	r3, r2
		i--;
   1057c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   10580:	f240 8110 	bls.w	107a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7a5>
		LL_ASSERT(i);
   10584:	2d00      	cmp	r5, #0
   10586:	d1da      	bne.n	1053e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x53f>
   10588:	f640 039a 	movw	r3, #2202	; 0x89a
   1058c:	464a      	mov	r2, r9
   1058e:	4641      	mov	r1, r8
   10590:	4638      	mov	r0, r7
   10592:	f010 fa24 	bl	209de <printk>
   10596:	4040      	eors	r0, r0
   10598:	f380 8811 	msr	BASEPRI, r0
   1059c:	f04f 0003 	mov.w	r0, #3
   105a0:	df02      	svc	2
   105a2:	e7cc      	b.n	1053e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x53f>
		if (current == id) {
   105a4:	4608      	mov	r0, r1
	total = 0U;
   105a6:	f04f 0c00 	mov.w	ip, #0
   105aa:	e6cd      	b.n	10348 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x349>
			    ticker->fp_op_func) {
   105ac:	6a23      	ldr	r3, [r4, #32]
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   105ae:	2b00      	cmp	r3, #0
   105b0:	f43f af73 	beq.w	1049a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49b>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   105b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   105b6:	4798      	blx	r3
			ticker->req = ticker->ack;
   105b8:	78a2      	ldrb	r2, [r4, #2]
   105ba:	e76e      	b.n	1049a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49b>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   105bc:	9b02      	ldr	r3, [sp, #8]
   105be:	7f1b      	ldrb	r3, [r3, #28]
   105c0:	2bff      	cmp	r3, #255	; 0xff
   105c2:	4686      	mov	lr, r0
   105c4:	d044      	beq.n	10650 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x651>
			instance->ticks_slot_previous > ticks_elapsed) {
   105c6:	9b02      	ldr	r3, [sp, #8]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   105c8:	9a05      	ldr	r2, [sp, #20]
			instance->ticks_slot_previous > ticks_elapsed) {
   105ca:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   105cc:	4293      	cmp	r3, r2
   105ce:	d93f      	bls.n	10650 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x651>
			window_start_ticks = instance->ticks_slot_previous -
   105d0:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   105d4:	e9de 2300 	ldrd	r2, r3, [lr]
   105d8:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   105da:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   105de:	d23f      	bcs.n	10660 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x661>
		while (ticker_id_iter != TICKER_NULL &&
   105e0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   105e4:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
   105e8:	d03a      	beq.n	10660 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x661>
		       ticks_start_offset + ticker->ticks_slot <=
   105ea:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
   105ee:	45c1      	cmp	r9, r8
   105f0:	f04f 0300 	mov.w	r3, #0
   105f4:	d337      	bcc.n	10666 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x667>
   105f6:	46c2      	mov	sl, r8
   105f8:	465a      	mov	r2, fp
   105fa:	461d      	mov	r5, r3
   105fc:	e01b      	b.n	10636 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x637>
			if (node->ticks_to_expire >
   105fe:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
   10600:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
   10602:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
   10604:	442b      	add	r3, r5
			if (node->ticks_to_expire >
   10606:	d909      	bls.n	1061c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61d>
				window_end_ticks =
   10608:	454b      	cmp	r3, r9
   1060a:	bf28      	it	cs
   1060c:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
   1060e:	4553      	cmp	r3, sl
   10610:	d904      	bls.n	1061c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61d>
			if (ticks_to_expire != 0U &&
   10612:	ebb3 0308 	subs.w	r3, r3, r8
   10616:	d001      	beq.n	1061c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61d>
   10618:	459c      	cmp	ip, r3
   1061a:	d924      	bls.n	10666 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x667>
			window_start_ticks  = node->ticks_to_expire +
   1061c:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
   1061e:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
   10620:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
   10624:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
   10626:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
   1062a:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   1062c:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
   10630:	d019      	beq.n	10666 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x667>
   10632:	45d1      	cmp	r9, sl
   10634:	d317      	bcc.n	10666 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x667>
			node = &nodes[ticker_id_iter];
   10636:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1063a:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   1063e:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   10640:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10642:	2800      	cmp	r0, #0
   10644:	d0db      	beq.n	105fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5ff>
   10646:	7a00      	ldrb	r0, [r0, #8]
   10648:	2801      	cmp	r0, #1
   1064a:	d1d8      	bne.n	105fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5ff>
				ticker_id_iter = node->next;
   1064c:	5c8a      	ldrb	r2, [r1, r2]
				continue;
   1064e:	e7ec      	b.n	1062a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x62b>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10650:	e9de 2300 	ldrd	r2, r3, [lr]
   10654:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   10656:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
   1065a:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1065e:	d3bf      	bcc.n	105e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5e1>
		ticker->ticks_to_expire = ticks_to_expire;
   10660:	2300      	movs	r3, #0
   10662:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
   10664:	e021      	b.n	106aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6ab>
		ticker->ticks_to_expire = ticks_to_expire;
   10666:	60b3      	str	r3, [r6, #8]
   10668:	465d      	mov	r5, fp
   1066a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1066e:	e000      	b.n	10672 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x673>
   10670:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
   10672:	b228      	sxth	r0, r5
   10674:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   10678:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
   1067c:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   1067e:	f8dc 4008 	ldr.w	r4, [ip, #8]
   10682:	42a3      	cmp	r3, r4
   10684:	f240 80d6 	bls.w	10834 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x835>
				ticker->ticks_to_expire -=
   10688:	1b1b      	subs	r3, r3, r4
   1068a:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
   1068c:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
   1068e:	2aff      	cmp	r2, #255	; 0xff
   10690:	46a8      	mov	r8, r5
   10692:	d1ed      	bne.n	10670 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x671>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   10694:	9a02      	ldr	r2, [sp, #8]
			nodes[ticker_id_prev].next = ticker_id_head;
   10696:	f8cd b004 	str.w	fp, [sp, #4]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   1069a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1069e:	0103      	lsls	r3, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   106a0:	f882 b01d 	strb.w	fp, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   106a4:	5cca      	ldrb	r2, [r1, r3]
   106a6:	7032      	strb	r2, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   106a8:	54cf      	strb	r7, [r1, r3]
		ticker->lazy_current--;
   106aa:	8bf3      	ldrh	r3, [r6, #30]
   106ac:	3b01      	subs	r3, #1
   106ae:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
   106b0:	f04f 0302 	mov.w	r3, #2
   106b4:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
   106b8:	2201      	movs	r2, #1
   106ba:	e704      	b.n	104c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4c7>
		is_must_expire_skip = (ticker->must_expire &&
   106bc:	4601      	mov	r1, r0
   106be:	e6bc      	b.n	1043a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x43b>
   106c0:	ff172b5a 	.word	0xff172b5a
   106c4:	7f172b59 	.word	0x7f172b59
   106c8:	00027280 	.word	0x00027280
   106cc:	00027384 	.word	0x00027384
   106d0:	000272c0 	.word	0x000272c0
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   106d4:	b113      	cbz	r3, 106dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6dd>
   106d6:	7a1b      	ldrb	r3, [r3, #8]
   106d8:	2b01      	cmp	r3, #1
   106da:	d035      	beq.n	10748 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x749>
				if (!ticker->lazy_current) {
   106dc:	8be3      	ldrh	r3, [r4, #30]
   106de:	930c      	str	r3, [sp, #48]	; 0x30
   106e0:	2b00      	cmp	r3, #0
   106e2:	d17b      	bne.n	107dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7dd>
					lazy_periodic = ticker->lazy_periodic;
   106e4:	8ba3      	ldrh	r3, [r4, #28]
   106e6:	9307      	str	r3, [sp, #28]
   106e8:	461a      	mov	r2, r3
				while (count--) {
   106ea:	f10c 0601 	add.w	r6, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   106ee:	e9d4 e308 	ldrd	lr, r3, [r4, #32]
				ticks_to_expire = 0U;
   106f2:	2100      	movs	r1, #0
   106f4:	9606      	str	r6, [sp, #24]
   106f6:	e004      	b.n	10702 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x703>
   106f8:	4666      	mov	r6, ip
				while (count--) {
   106fa:	3a01      	subs	r2, #1
					ticks_to_expire +=
   106fc:	4431      	add	r1, r6
				while (count--) {
   106fe:	1c56      	adds	r6, r2, #1
   10700:	d00f      	beq.n	10722 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x723>
	ticker->remainder_current += ticker->remainder_periodic;
   10702:	4473      	add	r3, lr
	if ((ticker->remainder_current < BIT(31)) &&
   10704:	eb03 0609 	add.w	r6, r3, r9
   10708:	4546      	cmp	r6, r8
   1070a:	d8f5      	bhi.n	106f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6f9>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1070c:	9e06      	ldr	r6, [sp, #24]
   1070e:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   10712:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10714:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   10718:	4431      	add	r1, r6
				while (count--) {
   1071a:	1c56      	adds	r6, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1071c:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   10720:	d1ef      	bne.n	10702 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x703>
   10722:	6263      	str	r3, [r4, #36]	; 0x24
				if (!ticker->must_expire) {
   10724:	2800      	cmp	r0, #0
   10726:	d05f      	beq.n	107e8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7e9>
				ticker->lazy_current += (lazy_periodic + lazy);
   10728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1072a:	9a07      	ldr	r2, [sp, #28]
				ticker->ticks_to_expire = ticks_to_expire;
   1072c:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   1072e:	4413      	add	r3, r2
   10730:	83e3      	strh	r3, [r4, #30]
   10732:	e00c      	b.n	1074e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x74f>
		instance->ticker_id_head = ticker->next;
   10734:	9a01      	ldr	r2, [sp, #4]
		ticker->ticks_to_expire = 0U;
   10736:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   10738:	f812 200a 	ldrb.w	r2, [r2, sl]
   1073c:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   10740:	6862      	ldr	r2, [r4, #4]
   10742:	2a00      	cmp	r2, #0
   10744:	f43f ae9e 	beq.w	10484 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x485>
				ticker->req = ticker->ack;
   10748:	78a3      	ldrb	r3, [r4, #2]
				ticker->ticks_to_expire = ticks_elapsed;
   1074a:	60a5      	str	r5, [r4, #8]
				ticker->req = ticker->ack;
   1074c:	7063      	strb	r3, [r4, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1074e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10750:	9a02      	ldr	r2, [sp, #8]
   10752:	f8db 1014 	ldr.w	r1, [fp, #20]
   10756:	189a      	adds	r2, r3, r2
   10758:	4620      	mov	r0, r4
   1075a:	f7ff f9b7 	bl	facc <ticks_to_expire_prep>
			ticker->next = *insert_head;
   1075e:	9a01      	ldr	r2, [sp, #4]
   10760:	9b04      	ldr	r3, [sp, #16]
   10762:	f802 300a 	strb.w	r3, [r2, sl]
			ticker->req++;
   10766:	7863      	ldrb	r3, [r4, #1]
   10768:	9704      	str	r7, [sp, #16]
   1076a:	3301      	adds	r3, #1
   1076c:	7063      	strb	r3, [r4, #1]
   1076e:	e695      	b.n	1049c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49d>
	insert_head = TICKER_NULL;
   10770:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   10772:	9108      	str	r1, [sp, #32]
	insert_head = TICKER_NULL;
   10774:	9304      	str	r3, [sp, #16]
		ticker_job_list_insert(instance, insert_head);
   10776:	9904      	ldr	r1, [sp, #16]
   10778:	4658      	mov	r0, fp
   1077a:	f7ff f9cb 	bl	fb14 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1077e:	f89b 301d 	ldrb.w	r3, [fp, #29]
   10782:	9301      	str	r3, [sp, #4]
   10784:	9b01      	ldr	r3, [sp, #4]
   10786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10788:	4293      	cmp	r3, r2
   1078a:	f47f aeb8 	bne.w	104fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4ff>
	if (!pending) {
   1078e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10790:	2b00      	cmp	r3, #0
   10792:	f000 80f8 	beq.w	10986 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x987>
	instance->job_guard = 0U;
   10796:	2300      	movs	r3, #0
   10798:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   1079c:	9b08      	ldr	r3, [sp, #32]
   1079e:	2b00      	cmp	r3, #0
   107a0:	f040 8123 	bne.w	109ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9eb>
	if (instance->worker_trigger) {
   107a4:	f89b 301f 	ldrb.w	r3, [fp, #31]
   107a8:	2b00      	cmp	r3, #0
   107aa:	d055      	beq.n	10858 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x859>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   107ac:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   107b0:	465b      	mov	r3, fp
   107b2:	2201      	movs	r2, #1
   107b4:	2103      	movs	r1, #3
   107b6:	2004      	movs	r0, #4
   107b8:	46a4      	mov	ip, r4
}
   107ba:	b00f      	add	sp, #60	; 0x3c
   107bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   107c0:	4760      	bx	ip
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   107c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   107c4:	2900      	cmp	r1, #0
   107c6:	f47f ae4f 	bne.w	10468 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x469>
		    !is_must_expire_skip &&
   107ca:	b113      	cbz	r3, 107d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7d3>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   107cc:	7a1e      	ldrb	r6, [r3, #8]
   107ce:	2e01      	cmp	r6, #1
   107d0:	d0b0      	beq.n	10734 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x735>
			instance->ticks_slot_previous = ticker->ticks_slot;
   107d2:	f8cb 2018 	str.w	r2, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   107d6:	f88b 701c 	strb.w	r7, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   107da:	e645      	b.n	10468 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x469>
					ticker->req = ticker->ack;
   107dc:	78a3      	ldrb	r3, [r4, #2]
   107de:	7063      	strb	r3, [r4, #1]
   107e0:	2200      	movs	r2, #0
					lazy_periodic = 0U;
   107e2:	9207      	str	r2, [sp, #28]
   107e4:	e781      	b.n	106ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6eb>
   107e6:	4770      	bx	lr
					while (ticks_to_expire <
   107e8:	9a03      	ldr	r2, [sp, #12]
   107ea:	428a      	cmp	r2, r1
   107ec:	d99c      	bls.n	10728 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x729>
   107ee:	9706      	str	r7, [sp, #24]
   107f0:	f10c 0601 	add.w	r6, ip, #1
   107f4:	4617      	mov	r7, r2
   107f6:	e005      	b.n	10804 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x805>
   107f8:	4662      	mov	r2, ip
						ticks_to_expire +=
   107fa:	4411      	add	r1, r2
						lazy++;
   107fc:	3001      	adds	r0, #1
					while (ticks_to_expire <
   107fe:	428f      	cmp	r7, r1
						lazy++;
   10800:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   10802:	d910      	bls.n	10826 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x827>
	ticker->remainder_current += ticker->remainder_periodic;
   10804:	4473      	add	r3, lr
	if ((ticker->remainder_current < BIT(31)) &&
   10806:	eb03 0209 	add.w	r2, r3, r9
   1080a:	4542      	cmp	r2, r8
   1080c:	d8f4      	bhi.n	107f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7f9>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1080e:	4632      	mov	r2, r6
   10810:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   10814:	4411      	add	r1, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10816:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   1081a:	3001      	adds	r0, #1
					while (ticks_to_expire <
   1081c:	428f      	cmp	r7, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1081e:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   10822:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   10824:	d8ee      	bhi.n	10804 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x805>
				ticker->lazy_current += (lazy_periodic + lazy);
   10826:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
   1082a:	4402      	add	r2, r0
   1082c:	6263      	str	r3, [r4, #36]	; 0x24
   1082e:	b293      	uxth	r3, r2
   10830:	9307      	str	r3, [sp, #28]
   10832:	e779      	b.n	10728 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x729>
				node->ticks_to_expire -=
   10834:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
   10836:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
   1083a:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   1083e:	f43f af34 	beq.w	106aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6ab>
   10842:	fa0f f088 	sxth.w	r0, r8
   10846:	e725      	b.n	10694 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x695>
	if (!pending) {
   10848:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1084a:	2b00      	cmp	r3, #0
   1084c:	f000 80a5 	beq.w	1099a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99b>
	instance->job_guard = 0U;
   10850:	2300      	movs	r3, #0
   10852:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   10856:	e65c      	b.n	10512 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x513>
}
   10858:	b00f      	add	sp, #60	; 0x3c
   1085a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	count_user = instance->count_user;
   1085e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   10862:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10866:	1e5c      	subs	r4, r3, #1
   10868:	b2e4      	uxtb	r4, r4
   1086a:	2b00      	cmp	r3, #0
   1086c:	f43f ae4b 	beq.w	10506 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x507>
		flag_compare_update = 1U;
   10870:	2301      	movs	r3, #1
   10872:	9308      	str	r3, [sp, #32]
   10874:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   10878:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
   1087a:	f04f 0a01 	mov.w	sl, #1
   1087e:	9601      	str	r6, [sp, #4]
		while (user->first != user->last) {
   10880:	7863      	ldrb	r3, [r4, #1]
   10882:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
   10884:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
   10886:	429a      	cmp	r2, r3
   10888:	d10c      	bne.n	108a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8a5>
   1088a:	e068      	b.n	1095e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x95f>
	switch (uop->op) {
   1088c:	2b01      	cmp	r3, #1
   1088e:	d05e      	beq.n	1094e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x94f>
			first = user->first + 1;
   10890:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   10892:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
   10894:	3301      	adds	r3, #1
   10896:	b2db      	uxtb	r3, r3
				first = 0U;
   10898:	4299      	cmp	r1, r3
   1089a:	bf08      	it	eq
   1089c:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   1089e:	429a      	cmp	r2, r3
			user->first = first;
   108a0:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   108a2:	d05c      	beq.n	1095e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x95f>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   108a4:	b21b      	sxth	r3, r3
   108a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   108aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   108ae:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
	switch (uop->op) {
   108b2:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   108b6:	2b02      	cmp	r3, #2
   108b8:	d01d      	beq.n	108f6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f7>
   108ba:	2b03      	cmp	r3, #3
   108bc:	d1e6      	bne.n	1088c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x88d>
		if (uop->id < instance->count_node) {
   108be:	f89c 3001 	ldrb.w	r3, [ip, #1]
   108c2:	f89b 2008 	ldrb.w	r2, [fp, #8]
   108c6:	429a      	cmp	r2, r3
   108c8:	d946      	bls.n	10958 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x959>
			node[uop->id].priority =
   108ca:	f8db 2000 	ldr.w	r2, [fp]
   108ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   108d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   108d6:	f89c 2004 	ldrb.w	r2, [ip, #4]
   108da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   108de:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   108e2:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (fp_op_func) {
   108e6:	b123      	cbz	r3, 108f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f3>
		fp_op_func(uop->status, uop->op_context);
   108e8:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
   108ec:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
   108f0:	4798      	blx	r3
   108f2:	78e2      	ldrb	r2, [r4, #3]
   108f4:	e7cc      	b.n	10890 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x891>
		ticker_by_next_slot_get(instance,
   108f6:	e9dc e101 	ldrd	lr, r1, [ip, #4]
	_ticker_id_head = *ticker_id_head;
   108fa:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   108fe:	f8dc 800c 	ldr.w	r8, [ip, #12]
	node = instance->nodes;
   10902:	f8db 0000 	ldr.w	r0, [fp]
	    (*ticks_current != instance->ticks_current)) {
   10906:	f8db 6014 	ldr.w	r6, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   1090a:	2aff      	cmp	r2, #255	; 0xff
   1090c:	d002      	beq.n	10914 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x915>
   1090e:	680b      	ldr	r3, [r1, #0]
   10910:	42b3      	cmp	r3, r6
   10912:	d02e      	beq.n	10972 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x973>
		_ticker_id_head = instance->ticker_id_head;
   10914:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   10918:	600e      	str	r6, [r1, #0]
		_ticks_to_expire = 0U;
   1091a:	2600      	movs	r6, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   1091c:	2aff      	cmp	r2, #255	; 0xff
   1091e:	bf18      	it	ne
   10920:	46a1      	movne	r9, r4
   10922:	d105      	bne.n	10930 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x931>
   10924:	e00f      	b.n	10946 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x947>
		_ticker_id_head = ticker->next;
   10926:	5cc2      	ldrb	r2, [r0, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   10928:	6889      	ldr	r1, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   1092a:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   1092c:	440e      	add	r6, r1
	while ((_ticker_id_head != TICKER_NULL) &&
   1092e:	d01e      	beq.n	1096e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x96f>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   10930:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   10934:	eb00 1103 	add.w	r1, r0, r3, lsl #4
   10938:	011b      	lsls	r3, r3, #4
	while ((_ticker_id_head != TICKER_NULL) &&
   1093a:	698c      	ldr	r4, [r1, #24]
   1093c:	2c00      	cmp	r4, #0
   1093e:	d0f2      	beq.n	10926 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x927>
		_ticks_to_expire += ticker->ticks_to_expire;
   10940:	688b      	ldr	r3, [r1, #8]
   10942:	464c      	mov	r4, r9
   10944:	441e      	add	r6, r3
	*ticker_id_head = _ticker_id_head;
   10946:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   1094a:	f8c8 6000 	str.w	r6, [r8]
		fp_op_func = uop->fp_op_func;
   1094e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   10952:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		break;
   10956:	e7c6      	b.n	108e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8e7>
			uop->status = TICKER_STATUS_FAILURE;
   10958:	f8cc a028 	str.w	sl, [ip, #40]	; 0x28
   1095c:	e7c1      	b.n	108e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8e3>
	while (count_user--) {
   1095e:	9a01      	ldr	r2, [sp, #4]
   10960:	42a2      	cmp	r2, r4
   10962:	f1a4 0308 	sub.w	r3, r4, #8
   10966:	f43f af16 	beq.w	10796 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x797>
   1096a:	461c      	mov	r4, r3
   1096c:	e788      	b.n	10880 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x881>
   1096e:	464c      	mov	r4, r9
   10970:	e7e9      	b.n	10946 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x947>
		ticker = &node[_ticker_id_head];
   10972:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10976:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   10978:	f8d8 6000 	ldr.w	r6, [r8]
		_ticker_id_head = ticker->next;
   1097c:	5cc2      	ldrb	r2, [r0, r3]
   1097e:	e7cd      	b.n	1091c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91d>
			ticker->ticks_to_expire -= ticks_elapsed;
   10980:	1b5b      	subs	r3, r3, r5
   10982:	60a3      	str	r3, [r4, #8]
			break;
   10984:	e58e      	b.n	104a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4a5>
	count_user = instance->count_user;
   10986:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1098a:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   1098e:	1e5c      	subs	r4, r3, #1
   10990:	b2e4      	uxtb	r4, r4
   10992:	2b00      	cmp	r3, #0
   10994:	f47f af6e 	bne.w	10874 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x875>
   10998:	e6fd      	b.n	10796 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x797>
	count_user = instance->count_user;
   1099a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1099e:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   109a2:	1e5c      	subs	r4, r3, #1
   109a4:	b2e4      	uxtb	r4, r4
   109a6:	b323      	cbz	r3, 109f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9f3>
			flag_compare_update = 1U;
   109a8:	9208      	str	r2, [sp, #32]
   109aa:	e763      	b.n	10874 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x875>
		if (cntr_stop() == 0) {
   109ac:	f00b ff56 	bl	1c85c <cntr_stop>
   109b0:	2800      	cmp	r0, #0
   109b2:	f47f aef7 	bne.w	107a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7a5>
			instance->ticks_slot_previous = 0U;
   109b6:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   109ba:	f00b ff75 	bl	1c8a8 <cntr_cnt_get>
   109be:	f8cb 0014 	str.w	r0, [fp, #20]
   109c2:	e6ef      	b.n	107a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7a5>
	pending = 0U;
   109c4:	9b08      	ldr	r3, [sp, #32]
   109c6:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   109c8:	23ff      	movs	r3, #255	; 0xff
   109ca:	9304      	str	r3, [sp, #16]
   109cc:	e503      	b.n	103d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d7>
		ticks_current = cntr_cnt_get();
   109ce:	f00b ff6b 	bl	1c8a8 <cntr_cnt_get>
   109d2:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   109d4:	f00b ff32 	bl	1c83c <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   109d8:	f89b 301d 	ldrb.w	r3, [fp, #29]
   109dc:	9301      	str	r3, [sp, #4]
		if (cntr_start() == 0) {
   109de:	2800      	cmp	r0, #0
   109e0:	f47f ad9f 	bne.w	10522 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x523>
			instance->ticks_current = ticks_current;
   109e4:	f8cb 4014 	str.w	r4, [fp, #20]
   109e8:	e59b      	b.n	10522 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x523>
	if (instance->ticker_id_head == TICKER_NULL) {
   109ea:	f89b 301d 	ldrb.w	r3, [fp, #29]
   109ee:	9301      	str	r3, [sp, #4]
   109f0:	e58f      	b.n	10512 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x513>
	instance->job_guard = 0U;
   109f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   109f4:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   109f8:	e58b      	b.n	10512 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x513>
   109fa:	bf00      	nop

000109fc <ticker_init>:
{
   109fc:	b4f0      	push	{r4, r5, r6, r7}
   109fe:	9d04      	ldr	r5, [sp, #16]
   10a00:	f89d 7014 	ldrb.w	r7, [sp, #20]
   10a04:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   10a06:	2800      	cmp	r0, #0
   10a08:	d137      	bne.n	10a7a <ticker_init+0x7e>
	instance->count_node = count_node;
   10a0a:	4e1d      	ldr	r6, [pc, #116]	; (10a80 <ticker_init+0x84>)
	while (count_node--) {
   10a0c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   10a10:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   10a12:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   10a14:	fa5f fc8c 	uxtb.w	ip, ip
   10a18:	b149      	cbz	r1, 10a2e <ticker_init+0x32>
   10a1a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   10a1e:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   10a22:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   10a24:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   10a28:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   10a2c:	d1f9      	bne.n	10a22 <ticker_init+0x26>
	while (count_user--) {
   10a2e:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   10a30:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   10a32:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   10a34:	b2d2      	uxtb	r2, r2
   10a36:	b183      	cbz	r3, 10a5a <ticker_init+0x5e>
   10a38:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   10a3c:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   10a3e:	4610      	mov	r0, r2
   10a40:	f812 3908 	ldrb.w	r3, [r2], #-8
   10a44:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   10a48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   10a4c:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   10a4e:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   10a52:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   10a56:	b2df      	uxtb	r7, r3
	while (count_user--) {
   10a58:	d1f0      	bne.n	10a3c <ticker_init+0x40>
	if (count_op) {
   10a5a:	b977      	cbnz	r7, 10a7a <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   10a5c:	9a07      	ldr	r2, [sp, #28]
   10a5e:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   10a60:	9a08      	ldr	r2, [sp, #32]
   10a62:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   10a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   10a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a6a:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   10a6c:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   10a6e:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   10a72:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   10a74:	8177      	strh	r7, [r6, #10]
}
   10a76:	bcf0      	pop	{r4, r5, r6, r7}
   10a78:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   10a7a:	2001      	movs	r0, #1
}
   10a7c:	bcf0      	pop	{r4, r5, r6, r7}
   10a7e:	4770      	bx	lr
   10a80:	20001e34 	.word	0x20001e34

00010a84 <ticker_trigger>:
	if (instance->sched_cb) {
   10a84:	4b0a      	ldr	r3, [pc, #40]	; (10ab0 <ticker_trigger+0x2c>)
   10a86:	222c      	movs	r2, #44	; 0x2c
   10a88:	fb02 3200 	mla	r2, r2, r0, r3
{
   10a8c:	b410      	push	{r4}
	if (instance->sched_cb) {
   10a8e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   10a90:	b15c      	cbz	r4, 10aaa <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   10a92:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   10a96:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10a9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   10a9e:	46a4      	mov	ip, r4
   10aa0:	2201      	movs	r2, #1
}
   10aa2:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10aa4:	2103      	movs	r1, #3
   10aa6:	2002      	movs	r0, #2
   10aa8:	4760      	bx	ip
}
   10aaa:	bc10      	pop	{r4}
   10aac:	4770      	bx	lr
   10aae:	bf00      	nop
   10ab0:	20001e34 	.word	0x20001e34

00010ab4 <ticker_start_ext>:
{
   10ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10ab8:	4e28      	ldr	r6, [pc, #160]	; (10b5c <ticker_start_ext+0xa8>)
{
   10aba:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   10abe:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10ac0:	252c      	movs	r5, #44	; 0x2c
   10ac2:	fb05 6504 	mla	r5, r5, r4, r6
{
   10ac6:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   10ac8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   10acc:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   10ad0:	6869      	ldr	r1, [r5, #4]
   10ad2:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   10ad6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   10ada:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   10ade:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   10ae2:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   10ae4:	f10e 0c01 	add.w	ip, lr, #1
   10ae8:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   10aec:	4564      	cmp	r4, ip
   10aee:	bf98      	it	ls
   10af0:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   10af4:	4561      	cmp	r1, ip
   10af6:	d02e      	beq.n	10b56 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   10af8:	6879      	ldr	r1, [r7, #4]
   10afa:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   10afe:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   10b02:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   10b06:	f04f 0904 	mov.w	r9, #4
   10b0a:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10b0e:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10b10:	9b08      	ldr	r3, [sp, #32]
   10b12:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10b16:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b1a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10b1e:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   10b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10b22:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   10b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b26:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   10b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10b2a:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   10b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10b32:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10b34:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   10b36:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10b38:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   10b3a:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   10b3e:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10b42:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   10b46:	4798      	blx	r3
   10b48:	4633      	mov	r3, r6
   10b4a:	4649      	mov	r1, r9
   10b4c:	2200      	movs	r2, #0
   10b4e:	47a8      	blx	r5
	return user_op->status;
   10b50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10b56:	2001      	movs	r0, #1
}
   10b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b5c:	20001e34 	.word	0x20001e34

00010b60 <ticker_start>:
{
   10b60:	b510      	push	{r4, lr}
   10b62:	b08a      	sub	sp, #40	; 0x28
   10b64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b66:	9400      	str	r4, [sp, #0]
{
   10b68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b6a:	9401      	str	r4, [sp, #4]
{
   10b6c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b6e:	9402      	str	r4, [sp, #8]
{
   10b70:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b74:	9403      	str	r4, [sp, #12]
{
   10b76:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b78:	9404      	str	r4, [sp, #16]
{
   10b7a:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b7c:	9405      	str	r4, [sp, #20]
{
   10b7e:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b80:	9406      	str	r4, [sp, #24]
{
   10b82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b84:	9407      	str	r4, [sp, #28]
{
   10b86:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10b88:	9408      	str	r4, [sp, #32]
   10b8a:	2400      	movs	r4, #0
   10b8c:	9409      	str	r4, [sp, #36]	; 0x24
   10b8e:	f7ff ff91 	bl	10ab4 <ticker_start_ext>
}
   10b92:	b00a      	add	sp, #40	; 0x28
   10b94:	bd10      	pop	{r4, pc}
   10b96:	bf00      	nop

00010b98 <ticker_update>:
{
   10b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10b9c:	4d26      	ldr	r5, [pc, #152]	; (10c38 <ticker_update+0xa0>)
{
   10b9e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
   10ba2:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   10ba6:	4604      	mov	r4, r0
   10ba8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10baa:	212c      	movs	r1, #44	; 0x2c
   10bac:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10bb0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   10bb4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   10bb8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   10bbc:	684c      	ldr	r4, [r1, #4]
   10bbe:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   10bc2:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   10bc6:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   10bca:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   10bcc:	f10e 0c01 	add.w	ip, lr, #1
   10bd0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   10bd4:	45e1      	cmp	r9, ip
   10bd6:	bf98      	it	ls
   10bd8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   10bdc:	4564      	cmp	r4, ip
   10bde:	d028      	beq.n	10c32 <ticker_update+0x9a>
	user_op = &user->user_op[user->last];
   10be0:	f8d6 9004 	ldr.w	r9, [r6, #4]
   10be4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   10be8:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   10bec:	eb09 048e 	add.w	r4, r9, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10bf0:	f04f 0a05 	mov.w	sl, #5
   10bf4:	f809 a02e 	strb.w	sl, [r9, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10bf8:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10bfa:	9b08      	ldr	r3, [sp, #32]
   10bfc:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c00:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10c04:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   10c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10c08:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   10c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10c0c:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10c0e:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   10c10:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10c12:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   10c14:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   10c16:	f884 8016 	strb.w	r8, [r4, #22]
	user->last = last;
   10c1a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10c1e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   10c22:	4798      	blx	r3
   10c24:	462b      	mov	r3, r5
   10c26:	2200      	movs	r2, #0
   10c28:	2104      	movs	r1, #4
   10c2a:	47b0      	blx	r6
	return user_op->status;
   10c2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   10c32:	2001      	movs	r0, #1
}
   10c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c38:	20001e34 	.word	0x20001e34

00010c3c <ticker_stop>:
{
   10c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10c40:	4c1e      	ldr	r4, [pc, #120]	; (10cbc <ticker_stop+0x80>)
{
   10c42:	4684      	mov	ip, r0
   10c44:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10c46:	212c      	movs	r1, #44	; 0x2c
   10c48:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   10c4c:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   10c50:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   10c54:	684d      	ldr	r5, [r1, #4]
   10c56:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   10c5a:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   10c5e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   10c62:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10c64:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   10c68:	f10e 0c01 	add.w	ip, lr, #1
   10c6c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   10c70:	4567      	cmp	r7, ip
   10c72:	bf98      	it	ls
   10c74:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   10c78:	4565      	cmp	r5, ip
   10c7a:	d01c      	beq.n	10cb6 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   10c7c:	6877      	ldr	r7, [r6, #4]
   10c7e:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   10c82:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   10c86:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10c8a:	f04f 0806 	mov.w	r8, #6
   10c8e:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   10c92:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   10c94:	9b06      	ldr	r3, [sp, #24]
   10c96:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10c98:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   10c9a:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10c9c:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   10c9e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10ca2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   10ca6:	4798      	blx	r3
   10ca8:	4623      	mov	r3, r4
   10caa:	2200      	movs	r2, #0
   10cac:	2104      	movs	r1, #4
   10cae:	47b0      	blx	r6
	return user_op->status;
   10cb0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   10cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10cb6:	2001      	movs	r0, #1
}
   10cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cbc:	20001e34 	.word	0x20001e34

00010cc0 <ticker_next_slot_get>:
{
   10cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10cc4:	4d20      	ldr	r5, [pc, #128]	; (10d48 <ticker_next_slot_get+0x88>)
{
   10cc6:	4684      	mov	ip, r0
   10cc8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10cca:	212c      	movs	r1, #44	; 0x2c
   10ccc:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10cd0:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   10cd4:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   10cd8:	684c      	ldr	r4, [r1, #4]
   10cda:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   10cde:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   10ce2:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   10ce6:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10ce8:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   10cec:	f10e 0c01 	add.w	ip, lr, #1
   10cf0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   10cf4:	4567      	cmp	r7, ip
   10cf6:	bf98      	it	ls
   10cf8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   10cfc:	4564      	cmp	r4, ip
   10cfe:	d020      	beq.n	10d42 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   10d00:	6877      	ldr	r7, [r6, #4]
   10d02:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   10d06:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   10d0a:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10d0e:	f64f 7802 	movw	r8, #65282	; 0xff02
   10d12:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   10d16:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10d1a:	9b06      	ldr	r3, [sp, #24]
   10d1c:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   10d1e:	9b07      	ldr	r3, [sp, #28]
   10d20:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   10d22:	9b08      	ldr	r3, [sp, #32]
   10d24:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10d26:	2302      	movs	r3, #2
   10d28:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   10d2a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10d2e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   10d32:	4798      	blx	r3
   10d34:	462b      	mov	r3, r5
   10d36:	2200      	movs	r2, #0
   10d38:	2104      	movs	r1, #4
   10d3a:	47b0      	blx	r6
	return user_op->status;
   10d3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10d42:	2001      	movs	r0, #1
}
   10d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d48:	20001e34 	.word	0x20001e34

00010d4c <ticker_job_sched>:
{
   10d4c:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10d4e:	4d0a      	ldr	r5, [pc, #40]	; (10d78 <ticker_job_sched+0x2c>)
   10d50:	222c      	movs	r2, #44	; 0x2c
   10d52:	fb02 5200 	mla	r2, r2, r0, r5
   10d56:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   10d5a:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10d5c:	4608      	mov	r0, r1
   10d5e:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   10d60:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10d64:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10d68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   10d6c:	46b4      	mov	ip, r6
   10d6e:	2200      	movs	r2, #0
}
   10d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10d74:	2104      	movs	r1, #4
   10d76:	4760      	bx	ip
   10d78:	20001e34 	.word	0x20001e34

00010d7c <ticker_ticks_now_get>:
	return cntr_cnt_get();
   10d7c:	f00b bd94 	b.w	1c8a8 <cntr_cnt_get>

00010d80 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10d80:	1a40      	subs	r0, r0, r1
}
   10d82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10d86:	4770      	bx	lr

00010d88 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   10d88:	2801      	cmp	r0, #1
   10d8a:	d810      	bhi.n	10dae <ll_addr_get+0x26>
		return NULL;
	}

	if (addr_type) {
   10d8c:	b938      	cbnz	r0, 10d9e <ll_addr_get+0x16>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   10d8e:	b181      	cbz	r1, 10db2 <ll_addr_get+0x2a>
   10d90:	4b0a      	ldr	r3, [pc, #40]	; (10dbc <ll_addr_get+0x34>)
   10d92:	6818      	ldr	r0, [r3, #0]
   10d94:	6008      	str	r0, [r1, #0]
   10d96:	889a      	ldrh	r2, [r3, #4]
   10d98:	808a      	strh	r2, [r1, #4]
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
   10d9a:	4618      	mov	r0, r3
   10d9c:	4770      	bx	lr
		if (bdaddr) {
   10d9e:	b151      	cbz	r1, 10db6 <ll_addr_get+0x2e>
   10da0:	4b07      	ldr	r3, [pc, #28]	; (10dc0 <ll_addr_get+0x38>)
   10da2:	6818      	ldr	r0, [r3, #0]
   10da4:	6008      	str	r0, [r1, #0]
   10da6:	889a      	ldrh	r2, [r3, #4]
   10da8:	808a      	strh	r2, [r1, #4]
	return pub_addr;
   10daa:	4618      	mov	r0, r3
   10dac:	4770      	bx	lr
		return NULL;
   10dae:	2000      	movs	r0, #0
   10db0:	4770      	bx	lr
	return pub_addr;
   10db2:	4802      	ldr	r0, [pc, #8]	; (10dbc <ll_addr_get+0x34>)
}
   10db4:	4770      	bx	lr
		return rnd_addr;
   10db6:	4802      	ldr	r0, [pc, #8]	; (10dc0 <ll_addr_get+0x38>)
   10db8:	4770      	bx	lr
   10dba:	bf00      	nop
   10dbc:	20001e60 	.word	0x20001e60
   10dc0:	20001e68 	.word	0x20001e68

00010dc4 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   10dc4:	b538      	push	{r3, r4, r5, lr}
   10dc6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   10dc8:	2000      	movs	r0, #0
{
   10dca:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   10dcc:	f003 fbec 	bl	145a8 <ull_adv_is_enabled>
   10dd0:	b998      	cbnz	r0, 10dfa <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   10dd2:	f003 fe2f 	bl	14a34 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   10dd6:	f010 0306 	ands.w	r3, r0, #6
   10dda:	d10e      	bne.n	10dfa <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   10ddc:	b134      	cbz	r4, 10dec <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   10dde:	4a08      	ldr	r2, [pc, #32]	; (10e00 <ll_addr_set+0x3c>)
   10de0:	6828      	ldr	r0, [r5, #0]
   10de2:	6010      	str	r0, [r2, #0]
   10de4:	88a9      	ldrh	r1, [r5, #4]
   10de6:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   10de8:	4618      	mov	r0, r3
}
   10dea:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   10dec:	4b05      	ldr	r3, [pc, #20]	; (10e04 <ll_addr_set+0x40>)
   10dee:	6828      	ldr	r0, [r5, #0]
   10df0:	6018      	str	r0, [r3, #0]
   10df2:	88aa      	ldrh	r2, [r5, #4]
   10df4:	809a      	strh	r2, [r3, #4]
	return 0;
   10df6:	4620      	mov	r0, r4
}
   10df8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   10dfa:	200c      	movs	r0, #12
}
   10dfc:	bd38      	pop	{r3, r4, r5, pc}
   10dfe:	bf00      	nop
   10e00:	20001e68 	.word	0x20001e68
   10e04:	20001e60 	.word	0x20001e60

00010e08 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   10e08:	2802      	cmp	r0, #2
   10e0a:	d001      	beq.n	10e10 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   10e0c:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   10e0e:	4770      	bx	lr
{
   10e10:	b538      	push	{r3, r4, r5, lr}
   10e12:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   10e14:	4608      	mov	r0, r1
   10e16:	461d      	mov	r5, r3
   10e18:	f004 fa84 	bl	15324 <ll_connected_get>
			if (!conn) {
   10e1c:	b110      	cbz	r0, 10e24 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   10e1e:	2000      	movs	r0, #0
   10e20:	7028      	strb	r0, [r5, #0]
}
   10e22:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10e24:	4620      	mov	r0, r4
}
   10e26:	bd38      	pop	{r3, r4, r5, pc}

00010e28 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   10e28:	2300      	movs	r3, #0
   10e2a:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   10e2c:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   10e2e:	4770      	bx	lr

00010e30 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   10e30:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   10e32:	4802      	ldr	r0, [pc, #8]	; (10e3c <hci_driver_init+0xc>)
   10e34:	f7f8 faa0 	bl	9378 <bt_hci_driver_register>

	return 0;
}
   10e38:	2000      	movs	r0, #0
   10e3a:	bd08      	pop	{r3, pc}
   10e3c:	000273b0 	.word	0x000273b0

00010e40 <hci_driver_send>:
{
   10e40:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   10e42:	8983      	ldrh	r3, [r0, #12]
{
   10e44:	b083      	sub	sp, #12
	if (!buf->len) {
   10e46:	2b00      	cmp	r3, #0
   10e48:	d03a      	beq.n	10ec0 <hci_driver_send+0x80>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   10e4a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   10e4c:	4604      	mov	r4, r0
   10e4e:	b31b      	cbz	r3, 10e98 <hci_driver_send+0x58>
   10e50:	2b02      	cmp	r3, #2
   10e52:	d00f      	beq.n	10e74 <hci_driver_send+0x34>
   10e54:	4921      	ldr	r1, [pc, #132]	; (10edc <hci_driver_send+0x9c>)
   10e56:	4a22      	ldr	r2, [pc, #136]	; (10ee0 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   10e58:	4822      	ldr	r0, [pc, #136]	; (10ee4 <hci_driver_send+0xa4>)
   10e5a:	1a52      	subs	r2, r2, r1
   10e5c:	08d2      	lsrs	r2, r2, #3
   10e5e:	0192      	lsls	r2, r2, #6
   10e60:	f042 0201 	orr.w	r2, r2, #1
   10e64:	4619      	mov	r1, r3
   10e66:	f010 f920 	bl	210aa <log_1>
		return -EINVAL;
   10e6a:	f06f 0515 	mvn.w	r5, #21
}
   10e6e:	4628      	mov	r0, r5
   10e70:	b003      	add	sp, #12
   10e72:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   10e74:	a901      	add	r1, sp, #4
   10e76:	f000 ffd1 	bl	11e1c <hci_acl_handle>
	if (evt) {
   10e7a:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   10e7c:	4605      	mov	r5, r0
	if (evt) {
   10e7e:	b113      	cbz	r3, 10e86 <hci_driver_send+0x46>
		bt_recv_prio(evt);
   10e80:	4618      	mov	r0, r3
   10e82:	f7f8 fa5b 	bl	933c <bt_recv_prio>
	if (!err) {
   10e86:	2d00      	cmp	r5, #0
   10e88:	d1f1      	bne.n	10e6e <hci_driver_send+0x2e>
		net_buf_unref(buf);
   10e8a:	4620      	mov	r0, r4
   10e8c:	f00c fdc6 	bl	1da1c <net_buf_unref>
   10e90:	2500      	movs	r5, #0
}
   10e92:	4628      	mov	r0, r5
   10e94:	b003      	add	sp, #12
   10e96:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   10e98:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   10e9a:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   10e9c:	f000 fa6e 	bl	1137c <hci_cmd_handle>
	if (evt) {
   10ea0:	2800      	cmp	r0, #0
   10ea2:	d0f2      	beq.n	10e8a <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   10ea4:	f7f8 fa4a 	bl	933c <bt_recv_prio>
		if (node_rx) {
   10ea8:	9d01      	ldr	r5, [sp, #4]
   10eaa:	2d00      	cmp	r5, #0
   10eac:	d0ed      	beq.n	10e8a <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   10eae:	4628      	mov	r0, r5
   10eb0:	f001 fdb2 	bl	12a18 <hci_get_class>
   10eb4:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   10eb6:	9901      	ldr	r1, [sp, #4]
   10eb8:	480b      	ldr	r0, [pc, #44]	; (10ee8 <hci_driver_send+0xa8>)
   10eba:	f014 fe04 	bl	25ac6 <k_queue_append>
	if (!err) {
   10ebe:	e7e4      	b.n	10e8a <hci_driver_send+0x4a>
   10ec0:	4b06      	ldr	r3, [pc, #24]	; (10edc <hci_driver_send+0x9c>)
   10ec2:	4907      	ldr	r1, [pc, #28]	; (10ee0 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   10ec4:	4809      	ldr	r0, [pc, #36]	; (10eec <hci_driver_send+0xac>)
   10ec6:	1ac9      	subs	r1, r1, r3
   10ec8:	08c9      	lsrs	r1, r1, #3
   10eca:	0189      	lsls	r1, r1, #6
   10ecc:	f041 0101 	orr.w	r1, r1, #1
   10ed0:	f010 f8de 	bl	21090 <log_0>
		return -EINVAL;
   10ed4:	f06f 0515 	mvn.w	r5, #21
   10ed8:	e7c9      	b.n	10e6e <hci_driver_send+0x2e>
   10eda:	bf00      	nop
   10edc:	00026828 	.word	0x00026828
   10ee0:	00026878 	.word	0x00026878
   10ee4:	00027304 	.word	0x00027304
   10ee8:	20000fe0 	.word	0x20000fe0
   10eec:	000272f0 	.word	0x000272f0

00010ef0 <recv_thread>:
{
   10ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   10ef2:	4d37      	ldr	r5, [pc, #220]	; (10fd0 <recv_thread+0xe0>)
		LL_ASSERT(0);
   10ef4:	4f37      	ldr	r7, [pc, #220]	; (10fd4 <recv_thread+0xe4>)
   10ef6:	4e38      	ldr	r6, [pc, #224]	; (10fd8 <recv_thread+0xe8>)
{
   10ef8:	b083      	sub	sp, #12
   10efa:	e015      	b.n	10f28 <recv_thread+0x38>
	switch (class) {
   10efc:	2b00      	cmp	r3, #0
   10efe:	d13c      	bne.n	10f7a <recv_thread+0x8a>
		LL_ASSERT(0);
   10f00:	4836      	ldr	r0, [pc, #216]	; (10fdc <recv_thread+0xec>)
   10f02:	23cf      	movs	r3, #207	; 0xcf
   10f04:	463a      	mov	r2, r7
   10f06:	4631      	mov	r1, r6
   10f08:	f00f fd69 	bl	209de <printk>
   10f0c:	4040      	eors	r0, r0
   10f0e:	f380 8811 	msr	BASEPRI, r0
   10f12:	f04f 0003 	mov.w	r0, #3
   10f16:	df02      	svc	2
	node_rx->hdr.next = NULL;
   10f18:	9b01      	ldr	r3, [sp, #4]
   10f1a:	2200      	movs	r2, #0
   10f1c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   10f1e:	a801      	add	r0, sp, #4
   10f20:	f002 fc24 	bl	1376c <ll_rx_mem_release>
	z_impl_k_yield();
   10f24:	f00e fa3c 	bl	1f3a0 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   10f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f30:	4628      	mov	r0, r5
   10f32:	f00d ff51 	bl	1edd8 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   10f36:	2800      	cmp	r0, #0
   10f38:	d0f4      	beq.n	10f24 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   10f3a:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   10f3c:	9001      	str	r0, [sp, #4]
	switch (class) {
   10f3e:	2b04      	cmp	r3, #4
   10f40:	d9dc      	bls.n	10efc <recv_thread+0xc>
   10f42:	2b05      	cmp	r3, #5
   10f44:	d1dc      	bne.n	10f00 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   10f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f4e:	2003      	movs	r0, #3
   10f50:	f7f8 ff9c 	bl	9e8c <bt_buf_get_rx>
   10f54:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   10f56:	4621      	mov	r1, r4
   10f58:	9801      	ldr	r0, [sp, #4]
   10f5a:	f001 f81d 	bl	11f98 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   10f5e:	9b01      	ldr	r3, [sp, #4]
   10f60:	2200      	movs	r2, #0
   10f62:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   10f64:	a801      	add	r0, sp, #4
   10f66:	f002 fc01 	bl	1376c <ll_rx_mem_release>
		if (buf) {
   10f6a:	2c00      	cmp	r4, #0
   10f6c:	d0da      	beq.n	10f24 <recv_thread+0x34>
			if (buf->len) {
   10f6e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   10f70:	4620      	mov	r0, r4
			if (buf->len) {
   10f72:	b1db      	cbz	r3, 10fac <recv_thread+0xbc>
				bt_recv(buf);
   10f74:	f7f8 f93e 	bl	91f4 <bt_recv>
   10f78:	e7d4      	b.n	10f24 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   10f7a:	2b02      	cmp	r3, #2
   10f7c:	d019      	beq.n	10fb2 <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f86:	2001      	movs	r0, #1
   10f88:	f7f8 ff80 	bl	9e8c <bt_buf_get_rx>
   10f8c:	4604      	mov	r4, r0
		if (buf) {
   10f8e:	b1cc      	cbz	r4, 10fc4 <recv_thread+0xd4>
			hci_evt_encode(node_rx, buf);
   10f90:	9801      	ldr	r0, [sp, #4]
   10f92:	4621      	mov	r1, r4
   10f94:	f001 f83a 	bl	1200c <hci_evt_encode>
	node_rx->hdr.next = NULL;
   10f98:	9b01      	ldr	r3, [sp, #4]
   10f9a:	2200      	movs	r2, #0
   10f9c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   10f9e:	a801      	add	r0, sp, #4
   10fa0:	f002 fbe4 	bl	1376c <ll_rx_mem_release>
			if (buf->len) {
   10fa4:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   10fa6:	4620      	mov	r0, r4
			if (buf->len) {
   10fa8:	2b00      	cmp	r3, #0
   10faa:	d1e3      	bne.n	10f74 <recv_thread+0x84>
				net_buf_unref(buf);
   10fac:	f00c fd36 	bl	1da1c <net_buf_unref>
   10fb0:	e7b8      	b.n	10f24 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   10fb2:	2200      	movs	r2, #0
   10fb4:	2300      	movs	r3, #0
   10fb6:	2101      	movs	r1, #1
   10fb8:	2000      	movs	r0, #0
   10fba:	f7f8 ff9d 	bl	9ef8 <bt_buf_get_evt>
   10fbe:	4604      	mov	r4, r0
		if (buf) {
   10fc0:	2c00      	cmp	r4, #0
   10fc2:	d1e5      	bne.n	10f90 <recv_thread+0xa0>
	node_rx->hdr.next = NULL;
   10fc4:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   10fc6:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   10fc8:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   10fca:	f002 fbcf 	bl	1376c <ll_rx_mem_release>
		if (buf) {
   10fce:	e7a9      	b.n	10f24 <recv_thread+0x34>
   10fd0:	20000fe0 	.word	0x20000fe0
   10fd4:	00027318 	.word	0x00027318
   10fd8:	00027358 	.word	0x00027358
   10fdc:	000272c0 	.word	0x000272c0

00010fe0 <prio_recv_thread>:
{
   10fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   10fe4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 11098 <prio_recv_thread+0xb8>
				k_fifo_put(&recv_fifo, node_rx);
   10fe8:	4f2c      	ldr	r7, [pc, #176]	; (1109c <prio_recv_thread+0xbc>)
{
   10fea:	b082      	sub	sp, #8
   10fec:	e00c      	b.n	11008 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   10fee:	f7f8 ff83 	bl	9ef8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   10ff2:	4622      	mov	r2, r4
   10ff4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   10ff8:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   10ffa:	f001 fcf5 	bl	129e8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   10ffe:	4620      	mov	r0, r4
   11000:	f7f8 f99c 	bl	933c <bt_recv_prio>
	z_impl_k_yield();
   11004:	f00e f9cc 	bl	1f3a0 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11008:	f10d 0102 	add.w	r1, sp, #2
   1100c:	a801      	add	r0, sp, #4
   1100e:	f002 fa09 	bl	13424 <ll_rx_get>
   11012:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1101c:	2100      	movs	r1, #0
   1101e:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11020:	2c00      	cmp	r4, #0
   11022:	d1e4      	bne.n	10fee <prio_recv_thread+0xe>
		if (node_rx) {
   11024:	9b01      	ldr	r3, [sp, #4]
   11026:	b193      	cbz	r3, 1104e <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   11028:	f002 fad2 	bl	135d0 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1102c:	9e01      	ldr	r6, [sp, #4]
   1102e:	4630      	mov	r0, r6
   11030:	f001 fcf2 	bl	12a18 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   11034:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11036:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   11038:	796b      	ldrb	r3, [r5, #5]
   1103a:	2b03      	cmp	r3, #3
   1103c:	d102      	bne.n	11044 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   1103e:	792b      	ldrb	r3, [r5, #4]
   11040:	2b0b      	cmp	r3, #11
   11042:	d00c      	beq.n	1105e <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   11044:	4629      	mov	r1, r5
   11046:	4638      	mov	r0, r7
   11048:	f014 fd3d 	bl	25ac6 <k_queue_append>
			continue;
   1104c:	e7dc      	b.n	11008 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   1104e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11056:	4640      	mov	r0, r8
   11058:	f00e fa68 	bl	1f52c <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1105c:	e7d4      	b.n	11008 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11062:	4621      	mov	r1, r4
   11064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11068:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   1106a:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1106c:	f7f8 ff44 	bl	9ef8 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   11070:	4631      	mov	r1, r6
   11072:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11074:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   11076:	f105 001c 	add.w	r0, r5, #28
   1107a:	f000 ff65 	bl	11f48 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   1107e:	4630      	mov	r0, r6
   11080:	f000 ff82 	bl	11f88 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   11084:	4620      	mov	r0, r4
			if (buf) {
   11086:	b124      	cbz	r4, 11092 <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   11088:	f7f8 f958 	bl	933c <bt_recv_prio>
					net_buf_unref(buf);
   1108c:	4620      	mov	r0, r4
   1108e:	f00c fcc5 	bl	1da1c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   11092:	9d01      	ldr	r5, [sp, #4]
   11094:	e7d6      	b.n	11044 <prio_recv_thread+0x64>
   11096:	bf00      	nop
   11098:	20000fb0 	.word	0x20000fb0
   1109c:	20000fe0 	.word	0x20000fe0

000110a0 <hci_driver_open>:
{
   110a0:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   110a2:	4821      	ldr	r0, [pc, #132]	; (11128 <hci_driver_open+0x88>)
{
   110a4:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   110a6:	f002 f87d 	bl	131a4 <ll_init>
	if (err) {
   110aa:	4604      	mov	r4, r0
   110ac:	bb70      	cbnz	r0, 1110c <hci_driver_open+0x6c>
	hci_init(NULL);
   110ae:	f001 fcc9 	bl	12a44 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   110b2:	2600      	movs	r6, #0
   110b4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   110b6:	f06f 0209 	mvn.w	r2, #9
   110ba:	e9cd 2403 	strd	r2, r4, [sp, #12]
   110be:	e9cd 6706 	strd	r6, r7, [sp, #24]
   110c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   110c6:	4b19      	ldr	r3, [pc, #100]	; (1112c <hci_driver_open+0x8c>)
   110c8:	4919      	ldr	r1, [pc, #100]	; (11130 <hci_driver_open+0x90>)
   110ca:	9400      	str	r4, [sp, #0]
   110cc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   110d0:	4818      	ldr	r0, [pc, #96]	; (11134 <hci_driver_open+0x94>)
   110d2:	f00e fa9b 	bl	1f60c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   110d6:	4918      	ldr	r1, [pc, #96]	; (11138 <hci_driver_open+0x98>)
   110d8:	4816      	ldr	r0, [pc, #88]	; (11134 <hci_driver_open+0x94>)
   110da:	f014 fe6d 	bl	25db8 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   110de:	f06f 0207 	mvn.w	r2, #7
   110e2:	e9cd 2403 	strd	r2, r4, [sp, #12]
   110e6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   110ea:	e9cd 4401 	strd	r4, r4, [sp, #4]
   110ee:	4b13      	ldr	r3, [pc, #76]	; (1113c <hci_driver_open+0x9c>)
   110f0:	4913      	ldr	r1, [pc, #76]	; (11140 <hci_driver_open+0xa0>)
   110f2:	9400      	str	r4, [sp, #0]
   110f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   110f8:	4812      	ldr	r0, [pc, #72]	; (11144 <hci_driver_open+0xa4>)
   110fa:	f00e fa87 	bl	1f60c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   110fe:	4912      	ldr	r1, [pc, #72]	; (11148 <hci_driver_open+0xa8>)
   11100:	4810      	ldr	r0, [pc, #64]	; (11144 <hci_driver_open+0xa4>)
   11102:	f014 fe59 	bl	25db8 <z_impl_k_thread_name_set>
}
   11106:	4620      	mov	r0, r4
   11108:	b008      	add	sp, #32
   1110a:	bdd0      	pop	{r4, r6, r7, pc}
   1110c:	4b0f      	ldr	r3, [pc, #60]	; (1114c <hci_driver_open+0xac>)
   1110e:	4a10      	ldr	r2, [pc, #64]	; (11150 <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
   11110:	4810      	ldr	r0, [pc, #64]	; (11154 <hci_driver_open+0xb4>)
   11112:	1ad2      	subs	r2, r2, r3
   11114:	08d2      	lsrs	r2, r2, #3
   11116:	0192      	lsls	r2, r2, #6
   11118:	f042 0201 	orr.w	r2, r2, #1
   1111c:	4621      	mov	r1, r4
   1111e:	f00f ffc4 	bl	210aa <log_1>
}
   11122:	4620      	mov	r0, r4
   11124:	b008      	add	sp, #32
   11126:	bdd0      	pop	{r4, r6, r7, pc}
   11128:	20000fb0 	.word	0x20000fb0
   1112c:	00010fe1 	.word	0x00010fe1
   11130:	200048e0 	.word	0x200048e0
   11134:	20001668 	.word	0x20001668
   11138:	0002737c 	.word	0x0002737c
   1113c:	00010ef1 	.word	0x00010ef1
   11140:	20004aa0 	.word	0x20004aa0
   11144:	200016e8 	.word	0x200016e8
   11148:	00027388 	.word	0x00027388
   1114c:	00026828 	.word	0x00026828
   11150:	00026878 	.word	0x00026878
   11154:	0002735c 	.word	0x0002735c

00011158 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   11158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1115c:	4c1a      	ldr	r4, [pc, #104]	; (111c8 <le_remote_feat_complete+0x70>)
   1115e:	6864      	ldr	r4, [r4, #4]
   11160:	00a4      	lsls	r4, r4, #2
   11162:	d504      	bpl.n	1116e <le_remote_feat_complete+0x16>
   11164:	4616      	mov	r6, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   11166:	4a19      	ldr	r2, [pc, #100]	; (111cc <le_remote_feat_complete+0x74>)
   11168:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1116a:	0712      	lsls	r2, r2, #28
   1116c:	d401      	bmi.n	11172 <le_remote_feat_complete+0x1a>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1116e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
   11172:	f103 0408 	add.w	r4, r3, #8
   11176:	4605      	mov	r5, r0
   11178:	460f      	mov	r7, r1
   1117a:	4620      	mov	r0, r4
   1117c:	2102      	movs	r1, #2
   1117e:	f014 f984 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   11182:	233e      	movs	r3, #62	; 0x3e
   11184:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   11186:	230c      	movs	r3, #12
   11188:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   1118a:	2101      	movs	r1, #1
   1118c:	4620      	mov	r0, r4
   1118e:	f014 f97c 	bl	2548a <net_buf_simple_add>
   11192:	4603      	mov	r3, r0
	me->subevent = subevt;
   11194:	2204      	movs	r2, #4
	return net_buf_add(buf, melen);
   11196:	4620      	mov	r0, r4
	me->subevent = subevt;
   11198:	701a      	strb	r2, [r3, #0]
	return net_buf_add(buf, melen);
   1119a:	210b      	movs	r1, #11
   1119c:	f014 f975 	bl	2548a <net_buf_simple_add>
	sep->status = status;
   111a0:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   111a2:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
   111a6:	b93d      	cbnz	r5, 111b8 <le_remote_feat_complete+0x60>
   111a8:	687b      	ldr	r3, [r7, #4]
   111aa:	68ba      	ldr	r2, [r7, #8]
   111ac:	f8c0 2007 	str.w	r2, [r0, #7]
   111b0:	f8c0 3003 	str.w	r3, [r0, #3]
}
   111b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
__ssp_bos_icheck3(memset, void *, int)
   111b8:	f04f 0800 	mov.w	r8, #0
   111bc:	f8c0 8003 	str.w	r8, [r0, #3]
   111c0:	f8c0 8007 	str.w	r8, [r0, #7]
   111c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111c8:	20000128 	.word	0x20000128
   111cc:	20000130 	.word	0x20000130

000111d0 <hci_vendor_cmd_handle_common>:
{
   111d0:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
   111d2:	3801      	subs	r0, #1
{
   111d4:	b086      	sub	sp, #24
   111d6:	4614      	mov	r4, r2
	switch (ocf) {
   111d8:	2809      	cmp	r0, #9
   111da:	d806      	bhi.n	111ea <hci_vendor_cmd_handle_common+0x1a>
   111dc:	e8df f000 	tbb	[pc, r0]
   111e0:	054b310a 	.word	0x054b310a
   111e4:	76056005 	.word	0x76056005
   111e8:	b59f      	.short	0xb59f
   111ea:	f06f 0c15 	mvn.w	ip, #21
}
   111ee:	4660      	mov	r0, ip
   111f0:	b006      	add	sp, #24
   111f2:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   111f4:	4b5f      	ldr	r3, [pc, #380]	; (11374 <hci_vendor_cmd_handle_common+0x1a4>)
   111f6:	210d      	movs	r1, #13
   111f8:	8818      	ldrh	r0, [r3, #0]
   111fa:	f011 ff7a 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   111fe:	210d      	movs	r1, #13
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11200:	6020      	str	r0, [r4, #0]
	return net_buf_add(*buf, plen);
   11202:	3008      	adds	r0, #8
   11204:	f014 f941 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11208:	f04f 0c00 	mov.w	ip, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1120c:	2302      	movs	r3, #2
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1120e:	2204      	movs	r2, #4
	rp->status = 0x00;
   11210:	f880 c000 	strb.w	ip, [r0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11214:	7043      	strb	r3, [r0, #1]
   11216:	f880 c002 	strb.w	ip, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   1121a:	70c3      	strb	r3, [r0, #3]
   1121c:	f880 c004 	strb.w	ip, [r0, #4]
	rp->fw_variant = 0U;
   11220:	f880 c005 	strb.w	ip, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   11224:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11226:	71c2      	strb	r2, [r0, #7]
   11228:	f880 c008 	strb.w	ip, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1122c:	f880 c009 	strb.w	ip, [r0, #9]
   11230:	f880 c00a 	strb.w	ip, [r0, #10]
   11234:	f880 c00b 	strb.w	ip, [r0, #11]
   11238:	f880 c00c 	strb.w	ip, [r0, #12]
}
   1123c:	4660      	mov	r0, ip
   1123e:	b006      	add	sp, #24
   11240:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11242:	4b4c      	ldr	r3, [pc, #304]	; (11374 <hci_vendor_cmd_handle_common+0x1a4>)
   11244:	2141      	movs	r1, #65	; 0x41
   11246:	8818      	ldrh	r0, [r3, #0]
   11248:	f011 ff53 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   1124c:	2141      	movs	r1, #65	; 0x41
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1124e:	6020      	str	r0, [r4, #0]
	return net_buf_add(*buf, plen);
   11250:	3008      	adds	r0, #8
   11252:	f014 f91a 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11256:	2400      	movs	r4, #0
	return net_buf_add(*buf, plen);
   11258:	4605      	mov	r5, r0
   1125a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1125c:	f800 4b01 	strb.w	r4, [r0], #1
   11260:	4621      	mov	r1, r4
   11262:	f015 f826 	bl	262b2 <memset>
	return 0;
   11266:	46a4      	mov	ip, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   11268:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
   1126a:	2303      	movs	r3, #3
}
   1126c:	4660      	mov	r0, ip
	rp->commands[0] |= BIT(5) | BIT(7);
   1126e:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11270:	70ab      	strb	r3, [r5, #2]
}
   11272:	b006      	add	sp, #24
   11274:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11276:	4b3f      	ldr	r3, [pc, #252]	; (11374 <hci_vendor_cmd_handle_common+0x1a4>)
   11278:	2109      	movs	r1, #9
   1127a:	8818      	ldrh	r0, [r3, #0]
   1127c:	f011 ff39 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11280:	2109      	movs	r1, #9
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11282:	6020      	str	r0, [r4, #0]
	return net_buf_add(*buf, plen);
   11284:	3008      	adds	r0, #8
   11286:	f014 f900 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   1128a:	4602      	mov	r2, r0
   1128c:	2300      	movs	r3, #0
   1128e:	f802 3b01 	strb.w	r3, [r2], #1
	return 0;
   11292:	469c      	mov	ip, r3
   11294:	f8c0 3001 	str.w	r3, [r0, #1]
}
   11298:	4660      	mov	r0, ip
   1129a:	6053      	str	r3, [r2, #4]
   1129c:	b006      	add	sp, #24
   1129e:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   112a0:	6889      	ldr	r1, [r1, #8]
   112a2:	2000      	movs	r0, #0
   112a4:	f7ff fd8e 	bl	10dc4 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   112a8:	4b32      	ldr	r3, [pc, #200]	; (11374 <hci_vendor_cmd_handle_common+0x1a4>)
   112aa:	2101      	movs	r1, #1
   112ac:	8818      	ldrh	r0, [r3, #0]
   112ae:	f011 ff20 	bl	230f2 <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
   112b2:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   112b4:	4605      	mov	r5, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
   112b6:	3008      	adds	r0, #8
   112b8:	f014 f8e7 	bl	2548a <net_buf_simple_add>
	ccst->status = status;
   112bc:	f04f 0c00 	mov.w	ip, #0
   112c0:	f880 c000 	strb.w	ip, [r0]
}
   112c4:	4660      	mov	r0, ip
	*evt = cmd_complete_status(0x00);
   112c6:	6025      	str	r5, [r4, #0]
}
   112c8:	b006      	add	sp, #24
   112ca:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   112cc:	4d2a      	ldr	r5, [pc, #168]	; (11378 <hci_vendor_cmd_handle_common+0x1a8>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   112ce:	4e29      	ldr	r6, [pc, #164]	; (11374 <hci_vendor_cmd_handle_common+0x1a4>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   112d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   112d2:	46ec      	mov	ip, sp
   112d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   112d8:	e895 0003 	ldmia.w	r5, {r0, r1}
   112dc:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   112e0:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   112e2:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   112e6:	2116      	movs	r1, #22
   112e8:	f011 ff03 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   112ec:	2116      	movs	r1, #22
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   112ee:	6020      	str	r0, [r4, #0]
	return net_buf_add(*buf, plen);
   112f0:	3008      	adds	r0, #8
   112f2:	f014 f8ca 	bl	2548a <net_buf_simple_add>
   112f6:	466c      	mov	r4, sp
	rp->status = 0x00;
   112f8:	4605      	mov	r5, r0
	return net_buf_add(*buf, plen);
   112fa:	4686      	mov	lr, r0
	rp->status = 0x00;
   112fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   112fe:	f04f 0c00 	mov.w	ip, #0
   11302:	f805 cb01 	strb.w	ip, [r5], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11306:	f8ce 0001 	str.w	r0, [lr, #1]
   1130a:	6820      	ldr	r0, [r4, #0]
   1130c:	60aa      	str	r2, [r5, #8]
   1130e:	7922      	ldrb	r2, [r4, #4]
   11310:	6128      	str	r0, [r5, #16]
}
   11312:	4660      	mov	r0, ip
   11314:	6069      	str	r1, [r5, #4]
   11316:	60eb      	str	r3, [r5, #12]
   11318:	752a      	strb	r2, [r5, #20]
   1131a:	b006      	add	sp, #24
   1131c:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1131e:	4b15      	ldr	r3, [pc, #84]	; (11374 <hci_vendor_cmd_handle_common+0x1a4>)
   11320:	2118      	movs	r1, #24
   11322:	8818      	ldrh	r0, [r3, #0]
   11324:	f011 fee5 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11328:	2118      	movs	r1, #24
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1132a:	6020      	str	r0, [r4, #0]
	return net_buf_add(*buf, plen);
   1132c:	3008      	adds	r0, #8
   1132e:	f014 f8ac 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11332:	2400      	movs	r4, #0
	return net_buf_add(*buf, plen);
   11334:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11336:	2101      	movs	r1, #1
	rp->status = 0x00;
   11338:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1133c:	f00c f9e8 	bl	1d710 <hci_vendor_read_static_addr>
	return 0;
   11340:	46a4      	mov	ip, r4
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11342:	7068      	strb	r0, [r5, #1]
}
   11344:	4660      	mov	r0, ip
   11346:	b006      	add	sp, #24
   11348:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1134a:	4b0a      	ldr	r3, [pc, #40]	; (11374 <hci_vendor_cmd_handle_common+0x1a4>)
   1134c:	2121      	movs	r1, #33	; 0x21
   1134e:	8818      	ldrh	r0, [r3, #0]
   11350:	f011 fecf 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11354:	2121      	movs	r1, #33	; 0x21
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11356:	6020      	str	r0, [r4, #0]
	return net_buf_add(*buf, plen);
   11358:	3008      	adds	r0, #8
   1135a:	f014 f896 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   1135e:	4601      	mov	r1, r0
   11360:	2400      	movs	r4, #0
   11362:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   11366:	3001      	adds	r0, #1
   11368:	f00c fa4e 	bl	1d808 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   1136c:	46a4      	mov	ip, r4
}
   1136e:	4660      	mov	r0, ip
   11370:	b006      	add	sp, #24
   11372:	bd70      	pop	{r4, r5, r6, pc}
   11374:	20003632 	.word	0x20003632
   11378:	000273c4 	.word	0x000273c4

0001137c <hci_cmd_handle>:
{
   1137c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   1137e:	8983      	ldrh	r3, [r0, #12]
{
   11380:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
   11382:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   11384:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   11386:	9409      	str	r4, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   11388:	f240 8146 	bls.w	11618 <hci_cmd_handle+0x29c>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   1138c:	4605      	mov	r5, r0
   1138e:	460e      	mov	r6, r1
   11390:	3008      	adds	r0, #8
   11392:	2103      	movs	r1, #3
   11394:	f014 f8aa 	bl	254ec <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   11398:	89aa      	ldrh	r2, [r5, #12]
   1139a:	7883      	ldrb	r3, [r0, #2]
   1139c:	429a      	cmp	r2, r3
   1139e:	f0c0 817a 	bcc.w	11696 <hci_cmd_handle+0x31a>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   113a2:	8802      	ldrh	r2, [r0, #0]
   113a4:	4fc9      	ldr	r7, [pc, #804]	; (116cc <hci_cmd_handle+0x350>)
	switch (BT_OGF(_opcode)) {
   113a6:	f3c2 2385 	ubfx	r3, r2, #10, #6
   113aa:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   113ac:	fa1f fc82 	uxth.w	ip, r2
   113b0:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   113b2:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   113b6:	d80d      	bhi.n	113d4 <hci_cmd_handle+0x58>
   113b8:	b1cb      	cbz	r3, 113ee <hci_cmd_handle+0x72>
   113ba:	3b01      	subs	r3, #1
   113bc:	2b07      	cmp	r3, #7
   113be:	d816      	bhi.n	113ee <hci_cmd_handle+0x72>
   113c0:	e8df f013 	tbh	[pc, r3, lsl #1]
   113c4:	0015011a 	.word	0x0015011a
   113c8:	0041001d 	.word	0x0041001d
   113cc:	0015005a 	.word	0x0015005a
   113d0:	00770015 	.word	0x00770015
   113d4:	2b3f      	cmp	r3, #63	; 0x3f
   113d6:	d10a      	bne.n	113ee <hci_cmd_handle+0x72>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   113d8:	aa09      	add	r2, sp, #36	; 0x24
   113da:	4629      	mov	r1, r5
   113dc:	4620      	mov	r0, r4
   113de:	f7ff fef7 	bl	111d0 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   113e2:	3016      	adds	r0, #22
	return evt;
   113e4:	bf18      	it	ne
   113e6:	9e09      	ldrne	r6, [sp, #36]	; 0x24
	if (err == -EINVAL) {
   113e8:	d106      	bne.n	113f8 <hci_cmd_handle+0x7c>
	return bt_hci_cmd_status_create(_opcode, status);
   113ea:	f8b7 c000 	ldrh.w	ip, [r7]
   113ee:	2101      	movs	r1, #1
   113f0:	4660      	mov	r0, ip
   113f2:	f011 fe90 	bl	23116 <bt_hci_cmd_status_create>
   113f6:	4606      	mov	r6, r0
}
   113f8:	4630      	mov	r0, r6
   113fa:	b00f      	add	sp, #60	; 0x3c
   113fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   113fe:	2c63      	cmp	r4, #99	; 0x63
   11400:	f000 84cf 	beq.w	11da2 <hci_cmd_handle+0xa26>
   11404:	f200 812b 	bhi.w	1165e <hci_cmd_handle+0x2e2>
   11408:	2c03      	cmp	r4, #3
   1140a:	f000 84a4 	beq.w	11d56 <hci_cmd_handle+0x9da>
   1140e:	2c2d      	cmp	r4, #45	; 0x2d
   11410:	f040 8110 	bne.w	11634 <hci_cmd_handle+0x2b8>
		read_tx_power_level(cmd, evt);
   11414:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11416:	4660      	mov	r0, ip
   11418:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1141a:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   1141c:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1141e:	f011 fe68 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11422:	2104      	movs	r1, #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11424:	9009      	str	r0, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11426:	3008      	adds	r0, #8
   11428:	f014 f82f 	bl	2548a <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   1142c:	b2ae      	uxth	r6, r5
	return net_buf_add(*buf, plen);
   1142e:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   11430:	1cc3      	adds	r3, r0, #3
   11432:	4631      	mov	r1, r6
   11434:	463a      	mov	r2, r7
   11436:	2002      	movs	r0, #2
   11438:	f7ff fce6 	bl	10e08 <ll_tx_pwr_lvl_get>
	rp->status = status;
   1143c:	7020      	strb	r0, [r4, #0]
	return evt;
   1143e:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   11440:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   11444:	e7d8      	b.n	113f8 <hci_cmd_handle+0x7c>
	switch (ocf) {
   11446:	1e62      	subs	r2, r4, #1
   11448:	2a08      	cmp	r2, #8
   1144a:	d8d0      	bhi.n	113ee <hci_cmd_handle+0x72>
   1144c:	a301      	add	r3, pc, #4	; (adr r3, 11454 <hci_cmd_handle+0xd8>)
   1144e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   11452:	bf00      	nop
   11454:	0001177b 	.word	0x0001177b
   11458:	0001170f 	.word	0x0001170f
   1145c:	000116e5 	.word	0x000116e5
   11460:	000113ef 	.word	0x000113ef
   11464:	000113ef 	.word	0x000113ef
   11468:	000113ef 	.word	0x000113ef
   1146c:	000113ef 	.word	0x000113ef
   11470:	000113ef 	.word	0x000113ef
   11474:	000116a7 	.word	0x000116a7
	switch (ocf) {
   11478:	2c05      	cmp	r4, #5
   1147a:	d1b8      	bne.n	113ee <hci_cmd_handle+0x72>
	handle = sys_le16_to_cpu(cmd->handle);
   1147c:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1147e:	4660      	mov	r0, ip
   11480:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   11482:	881d      	ldrh	r5, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11484:	f011 fe35 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11488:	2104      	movs	r1, #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1148a:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   1148c:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1148e:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11490:	f013 fffb 	bl	2548a <net_buf_simple_add>
   11494:	4604      	mov	r4, r0
	rp->status = ll_rssi_get(handle, &rp->rssi);
   11496:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   11498:	b2a8      	uxth	r0, r5
	rp->status = ll_rssi_get(handle, &rp->rssi);
   1149a:	f004 f9b1 	bl	15800 <ll_rssi_get>
	rp->handle = sys_cpu_to_le16(handle);
   1149e:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = ll_rssi_get(handle, &rp->rssi);
   114a2:	7020      	strb	r0, [r4, #0]
	rp->rssi = (!rp->status) ? -rp->rssi : 127;
   114a4:	2800      	cmp	r0, #0
   114a6:	f000 80fa 	beq.w	1169e <hci_cmd_handle+0x322>
   114aa:	237f      	movs	r3, #127	; 0x7f
   114ac:	70e3      	strb	r3, [r4, #3]
	return evt;
   114ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
}
   114b0:	e7a2      	b.n	113f8 <hci_cmd_handle+0x7c>
	switch (ocf) {
   114b2:	1e62      	subs	r2, r4, #1
   114b4:	2a4d      	cmp	r2, #77	; 0x4d
   114b6:	d89a      	bhi.n	113ee <hci_cmd_handle+0x72>
   114b8:	a301      	add	r3, pc, #4	; (adr r3, 114c0 <hci_cmd_handle+0x144>)
   114ba:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   114be:	bf00      	nop
   114c0:	00011d25 	.word	0x00011d25
   114c4:	00011cfd 	.word	0x00011cfd
   114c8:	00011cc9 	.word	0x00011cc9
   114cc:	000113ef 	.word	0x000113ef
   114d0:	00011cbf 	.word	0x00011cbf
   114d4:	00011ca3 	.word	0x00011ca3
   114d8:	00011c83 	.word	0x00011c83
   114dc:	00011c77 	.word	0x00011c77
   114e0:	00011c6b 	.word	0x00011c6b
   114e4:	00011d35 	.word	0x00011d35
   114e8:	00011c53 	.word	0x00011c53
   114ec:	00011c31 	.word	0x00011c31
   114f0:	00011bfb 	.word	0x00011bfb
   114f4:	00011bf3 	.word	0x00011bf3
   114f8:	00011bcf 	.word	0x00011bcf
   114fc:	00011bc9 	.word	0x00011bc9
   11500:	00011bc1 	.word	0x00011bc1
   11504:	00011bb9 	.word	0x00011bb9
   11508:	00011b93 	.word	0x00011b93
   1150c:	00011b8b 	.word	0x00011b8b
   11510:	00011b5f 	.word	0x00011b5f
   11514:	00011b4b 	.word	0x00011b4b
   11518:	00011b0d 	.word	0x00011b0d
   1151c:	00011ae9 	.word	0x00011ae9
   11520:	00011acb 	.word	0x00011acb
   11524:	00011ac1 	.word	0x00011ac1
   11528:	00011ab1 	.word	0x00011ab1
   1152c:	00011a7f 	.word	0x00011a7f
   11530:	000113ef 	.word	0x000113ef
   11534:	000113ef 	.word	0x000113ef
   11538:	000113ef 	.word	0x000113ef
   1153c:	00011a69 	.word	0x00011a69
   11540:	00011a33 	.word	0x00011a33
   11544:	00011a23 	.word	0x00011a23
   11548:	000119eb 	.word	0x000119eb
   1154c:	000119df 	.word	0x000119df
   11550:	000113ef 	.word	0x000113ef
   11554:	000113ef 	.word	0x000113ef
   11558:	000119d1 	.word	0x000119d1
   1155c:	000119c9 	.word	0x000119c9
   11560:	000119c3 	.word	0x000119c3
   11564:	0001199f 	.word	0x0001199f
   11568:	00011969 	.word	0x00011969
   1156c:	00011933 	.word	0x00011933
   11570:	00011929 	.word	0x00011929
   11574:	0001191b 	.word	0x0001191b
   11578:	000118cd 	.word	0x000118cd
   1157c:	00011871 	.word	0x00011871
   11580:	00011853 	.word	0x00011853
   11584:	000117f9 	.word	0x000117f9
   11588:	000113ef 	.word	0x000113ef
   1158c:	000113ef 	.word	0x000113ef
   11590:	000113ef 	.word	0x000113ef
   11594:	000113ef 	.word	0x000113ef
   11598:	000113ef 	.word	0x000113ef
   1159c:	000113ef 	.word	0x000113ef
   115a0:	000113ef 	.word	0x000113ef
   115a4:	000113ef 	.word	0x000113ef
   115a8:	000113ef 	.word	0x000113ef
   115ac:	000113ef 	.word	0x000113ef
   115b0:	000113ef 	.word	0x000113ef
   115b4:	000113ef 	.word	0x000113ef
   115b8:	000113ef 	.word	0x000113ef
   115bc:	000113ef 	.word	0x000113ef
   115c0:	000113ef 	.word	0x000113ef
   115c4:	000113ef 	.word	0x000113ef
   115c8:	000113ef 	.word	0x000113ef
   115cc:	000113ef 	.word	0x000113ef
   115d0:	000113ef 	.word	0x000113ef
   115d4:	000113ef 	.word	0x000113ef
   115d8:	000113ef 	.word	0x000113ef
   115dc:	000113ef 	.word	0x000113ef
   115e0:	000113ef 	.word	0x000113ef
   115e4:	000113ef 	.word	0x000113ef
   115e8:	000117d3 	.word	0x000117d3
   115ec:	000113ef 	.word	0x000113ef
   115f0:	000113ef 	.word	0x000113ef
   115f4:	000117b3 	.word	0x000117b3
	switch (ocf) {
   115f8:	2c06      	cmp	r4, #6
   115fa:	f000 83a0 	beq.w	11d3e <hci_cmd_handle+0x9c2>
   115fe:	2c1d      	cmp	r4, #29
   11600:	f47f aef5 	bne.w	113ee <hci_cmd_handle+0x72>
	handle = sys_le16_to_cpu(cmd->handle);
   11604:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   11606:	8818      	ldrh	r0, [r3, #0]
   11608:	f003 fffc 	bl	15604 <ll_version_ind_send>
   1160c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1160e:	8838      	ldrh	r0, [r7, #0]
   11610:	f011 fd81 	bl	23116 <bt_hci_cmd_status_create>
   11614:	4606      	mov	r6, r0
}
   11616:	e6ef      	b.n	113f8 <hci_cmd_handle+0x7c>
   11618:	492d      	ldr	r1, [pc, #180]	; (116d0 <hci_cmd_handle+0x354>)
   1161a:	4b2e      	ldr	r3, [pc, #184]	; (116d4 <hci_cmd_handle+0x358>)
		BT_ERR("No HCI Command header");
   1161c:	482e      	ldr	r0, [pc, #184]	; (116d8 <hci_cmd_handle+0x35c>)
   1161e:	1ac9      	subs	r1, r1, r3
   11620:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   11622:	0189      	lsls	r1, r1, #6
   11624:	f041 0101 	orr.w	r1, r1, #1
   11628:	f00f fd32 	bl	21090 <log_0>
		return NULL;
   1162c:	4626      	mov	r6, r4
}
   1162e:	4630      	mov	r0, r6
   11630:	b00f      	add	sp, #60	; 0x3c
   11632:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   11634:	2c01      	cmp	r4, #1
   11636:	f47f aeda 	bne.w	113ee <hci_cmd_handle+0x72>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1163a:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   1163c:	4b27      	ldr	r3, [pc, #156]	; (116dc <hci_cmd_handle+0x360>)
   1163e:	6811      	ldr	r1, [r2, #0]
   11640:	6852      	ldr	r2, [r2, #4]
   11642:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11644:	4660      	mov	r0, ip
   11646:	4621      	mov	r1, r4
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11648:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1164a:	f011 fd52 	bl	230f2 <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
   1164e:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11650:	4606      	mov	r6, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
   11652:	3008      	adds	r0, #8
   11654:	f013 ff19 	bl	2548a <net_buf_simple_add>
	ccst->status = status;
   11658:	2300      	movs	r3, #0
   1165a:	7003      	strb	r3, [r0, #0]
}
   1165c:	e6cc      	b.n	113f8 <hci_cmd_handle+0x7c>
	switch (ocf) {
   1165e:	2c7b      	cmp	r4, #123	; 0x7b
   11660:	f000 83a2 	beq.w	11da8 <hci_cmd_handle+0xa2c>
   11664:	2c7c      	cmp	r4, #124	; 0x7c
   11666:	f47f aec2 	bne.w	113ee <hci_cmd_handle+0x72>
		write_auth_payload_timeout(cmd, evt);
   1166a:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1166c:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   1166e:	8859      	ldrh	r1, [r3, #2]
   11670:	b2a8      	uxth	r0, r5
   11672:	f004 f8ff 	bl	15874 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11676:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11678:	2103      	movs	r1, #3
   1167a:	8838      	ldrh	r0, [r7, #0]
   1167c:	f011 fd39 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11680:	2103      	movs	r1, #3
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11682:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11684:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11686:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11688:	f013 feff 	bl	2548a <net_buf_simple_add>
	rp->status = status;
   1168c:	7004      	strb	r4, [r0, #0]
	return evt;
   1168e:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   11690:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   11694:	e6b0      	b.n	113f8 <hci_cmd_handle+0x7c>
   11696:	490e      	ldr	r1, [pc, #56]	; (116d0 <hci_cmd_handle+0x354>)
   11698:	4b0e      	ldr	r3, [pc, #56]	; (116d4 <hci_cmd_handle+0x358>)
		BT_ERR("Invalid HCI CMD packet length");
   1169a:	4811      	ldr	r0, [pc, #68]	; (116e0 <hci_cmd_handle+0x364>)
   1169c:	e7bf      	b.n	1161e <hci_cmd_handle+0x2a2>
	rp->rssi = (!rp->status) ? -rp->rssi : 127;
   1169e:	78e3      	ldrb	r3, [r4, #3]
   116a0:	425b      	negs	r3, r3
   116a2:	b25b      	sxtb	r3, r3
   116a4:	e702      	b.n	114ac <hci_cmd_handle+0x130>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   116a6:	4660      	mov	r0, ip
   116a8:	2107      	movs	r1, #7
   116aa:	f011 fd22 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   116ae:	2107      	movs	r1, #7
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   116b0:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   116b2:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   116b4:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   116b6:	f013 fee8 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   116ba:	4601      	mov	r1, r0
   116bc:	2000      	movs	r0, #0
   116be:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   116c2:	f7ff fb61 	bl	10d88 <ll_addr_get>
	return evt;
   116c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
}
   116c8:	e696      	b.n	113f8 <hci_cmd_handle+0x7c>
   116ca:	bf00      	nop
   116cc:	20003632 	.word	0x20003632
   116d0:	00026870 	.word	0x00026870
   116d4:	00026828 	.word	0x00026828
   116d8:	000273dc 	.word	0x000273dc
   116dc:	20000128 	.word	0x20000128
   116e0:	000273f4 	.word	0x000273f4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   116e4:	2109      	movs	r1, #9
   116e6:	4660      	mov	r0, ip
   116e8:	f011 fd03 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   116ec:	2109      	movs	r1, #9
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   116ee:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   116f0:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   116f2:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   116f4:	f013 fec9 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   116f8:	4603      	mov	r3, r0
   116fa:	2200      	movs	r2, #0
   116fc:	f803 2b01 	strb.w	r2, [r3], #1
	rp->features[4] = (1 << 5) | (1 << 6);
   11700:	2160      	movs	r1, #96	; 0x60
__ssp_bos_icheck3(memset, void *, int)
   11702:	f8c0 2001 	str.w	r2, [r0, #1]
	return evt;
   11706:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11708:	605a      	str	r2, [r3, #4]
	rp->features[4] = (1 << 5) | (1 << 6);
   1170a:	7141      	strb	r1, [r0, #5]
}
   1170c:	e674      	b.n	113f8 <hci_cmd_handle+0x7c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1170e:	4660      	mov	r0, ip
   11710:	2141      	movs	r1, #65	; 0x41
   11712:	f011 fcee 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11716:	2141      	movs	r1, #65	; 0x41
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11718:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   1171a:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1171c:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   1171e:	f013 feb4 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11722:	2100      	movs	r1, #0
	return net_buf_add(*buf, plen);
   11724:	4605      	mov	r5, r0
   11726:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   11728:	f800 1b01 	strb.w	r1, [r0], #1
   1172c:	f014 fdc1 	bl	262b2 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   11730:	20c0      	movs	r0, #192	; 0xc0
   11732:	71a8      	strb	r0, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   11734:	2028      	movs	r0, #40	; 0x28
   11736:	73e8      	strb	r0, [r5, #15]
	rp->commands[15] |= BIT(5);
   11738:	2022      	movs	r0, #34	; 0x22
	rp->commands[26] |= BIT(4) | BIT(5);
   1173a:	22ff      	movs	r2, #255	; 0xff
	rp->commands[0] |= BIT(5);
   1173c:	2120      	movs	r1, #32
	rp->commands[15] |= BIT(5);
   1173e:	7428      	strb	r0, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11740:	20f7      	movs	r0, #247	; 0xf7
	rp->commands[0] |= BIT(5);
   11742:	7069      	strb	r1, [r5, #1]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11744:	76a8      	strb	r0, [r5, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
   11746:	2130      	movs	r1, #48	; 0x30
	rp->commands[28] |= BIT(1) | BIT(2);
   11748:	200f      	movs	r0, #15
	rp->commands[26] |= BIT(4) | BIT(5);
   1174a:	76ea      	strb	r2, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1174c:	772a      	strb	r2, [r5, #28]
	rp->commands[33] |= BIT(6) | BIT(7);
   1174e:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[10] |= BIT(2);
   11750:	2304      	movs	r3, #4
	rp->commands[28] |= BIT(1) | BIT(2);
   11752:	7768      	strb	r0, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   11754:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   11758:	20f9      	movs	r0, #249	; 0xf9
	rp->commands[33] |= BIT(6) | BIT(7);
   1175a:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1175e:	217f      	movs	r1, #127	; 0x7f
	rp->commands[38] |= BIT(7);
   11760:	2280      	movs	r2, #128	; 0x80
	return evt;
   11762:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->commands[10] |= BIT(2);
   11764:	72eb      	strb	r3, [r5, #11]
	rp->commands[22] |= BIT(2);
   11766:	75eb      	strb	r3, [r5, #23]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   11768:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1176c:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   11770:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   11774:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
}
   11778:	e63e      	b.n	113f8 <hci_cmd_handle+0x7c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1177a:	2109      	movs	r1, #9
   1177c:	4660      	mov	r0, ip
   1177e:	f011 fcb8 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11782:	2109      	movs	r1, #9
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11784:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11786:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11788:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   1178a:	f013 fe7e 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   1178e:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   11790:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   11792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   11796:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   11798:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1179a:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   1179e:	7083      	strb	r3, [r0, #2]
   117a0:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   117a2:	2305      	movs	r3, #5
	return evt;
   117a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->lmp_version = LL_VERSION_NUMBER;
   117a6:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   117a8:	7144      	strb	r4, [r0, #5]
   117aa:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   117ac:	71c2      	strb	r2, [r0, #7]
   117ae:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   117b0:	e622      	b.n	113f8 <hci_cmd_handle+0x7c>
		le_set_privacy_mode(cmd, evt);
   117b2:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   117b4:	79c1      	ldrb	r1, [r0, #7]
   117b6:	f007 fc05 	bl	18fc4 <ll_priv_mode_set>
   117ba:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   117bc:	2101      	movs	r1, #1
   117be:	8838      	ldrh	r0, [r7, #0]
   117c0:	f011 fc97 	bl	230f2 <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
   117c4:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   117c6:	4606      	mov	r6, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
   117c8:	3008      	adds	r0, #8
   117ca:	f013 fe5e 	bl	2548a <net_buf_simple_add>
	ccst->status = status;
   117ce:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   117d0:	e612      	b.n	113f8 <hci_cmd_handle+0x7c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   117d2:	4660      	mov	r0, ip
   117d4:	2103      	movs	r1, #3
   117d6:	f011 fc8c 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   117da:	2103      	movs	r1, #3
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   117dc:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   117de:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   117e0:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   117e2:	f013 fe52 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   117e6:	4601      	mov	r1, r0
   117e8:	2300      	movs	r3, #0
   117ea:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   117ee:	3001      	adds	r0, #1
   117f0:	f7ff fb1a 	bl	10e28 <ll_tx_pwr_get>
	return evt;
   117f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   117f6:	e5ff      	b.n	113f8 <hci_cmd_handle+0x7c>
		le_set_phy(cmd, evt);
   117f8:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   117fa:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   117fc:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   117fe:	8810      	ldrh	r0, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   11800:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11804:	07de      	lsls	r6, r3, #31
		cmd->tx_phys |= mask_phys;
   11806:	bf44      	itt	mi
   11808:	f041 0107 	orrmi.w	r1, r1, #7
   1180c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1180e:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   11812:	7913      	ldrb	r3, [r2, #4]
   11814:	bf1c      	itt	ne
   11816:	f043 0307 	orrne.w	r3, r3, #7
   1181a:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1181c:	ea41 0203 	orr.w	r2, r1, r3
   11820:	f012 0ff8 	tst.w	r2, #248	; 0xf8
   11824:	f040 82e7 	bne.w	11df6 <hci_cmd_handle+0xa7a>
	if (!(cmd->tx_phys & 0x07) ||
   11828:	074d      	lsls	r5, r1, #29
   1182a:	f000 82dd 	beq.w	11de8 <hci_cmd_handle+0xa6c>
   1182e:	075a      	lsls	r2, r3, #29
   11830:	f000 82da 	beq.w	11de8 <hci_cmd_handle+0xa6c>
	if (phy_opts & 0x03) {
   11834:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   11838:	bf1c      	itt	ne
   1183a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   1183e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   11842:	f003 ff8f 	bl	15764 <ll_phy_req_send>
   11846:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11848:	8838      	ldrh	r0, [r7, #0]
   1184a:	f011 fc64 	bl	23116 <bt_hci_cmd_status_create>
   1184e:	4606      	mov	r6, r0
   11850:	e5d2      	b.n	113f8 <hci_cmd_handle+0x7c>
		le_set_default_phy(cmd, evt);
   11852:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11854:	781a      	ldrb	r2, [r3, #0]
   11856:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   11858:	bf4a      	itet	mi
   1185a:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1185c:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   1185e:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11860:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   11862:	bf4a      	itet	mi
   11864:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   11866:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   11868:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1186a:	f003 ff71 	bl	15750 <ll_phy_default_set>
   1186e:	e7a4      	b.n	117ba <hci_cmd_handle+0x43e>
	handle = sys_le16_to_cpu(cmd->handle);
   11870:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11872:	4660      	mov	r0, ip
   11874:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   11876:	881d      	ldrh	r5, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11878:	f011 fc3b 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   1187c:	2105      	movs	r1, #5
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1187e:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11880:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11882:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11884:	f013 fe01 	bl	2548a <net_buf_simple_add>
   11888:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1188a:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1188c:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1188e:	1ce1      	adds	r1, r4, #3
   11890:	f003 ff40 	bl	15714 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   11894:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   11896:	7020      	strb	r0, [r4, #0]
   11898:	2b00      	cmp	r3, #0
   1189a:	fa93 f2a3 	rbit	r2, r3
   1189e:	7923      	ldrb	r3, [r4, #4]
   118a0:	fab2 f282 	clz	r2, r2
   118a4:	bf08      	it	eq
   118a6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   118aa:	2b00      	cmp	r3, #0
   118ac:	fa93 f3a3 	rbit	r3, r3
   118b0:	fab3 f383 	clz	r3, r3
   118b4:	f102 0201 	add.w	r2, r2, #1
   118b8:	bf08      	it	eq
   118ba:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   118be:	70e2      	strb	r2, [r4, #3]
   118c0:	3301      	adds	r3, #1
	return evt;
   118c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   118c4:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   118c6:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   118ca:	e595      	b.n	113f8 <hci_cmd_handle+0x7c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   118cc:	4660      	mov	r0, ip
   118ce:	2109      	movs	r1, #9
   118d0:	f011 fc0f 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   118d4:	2109      	movs	r1, #9
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   118d6:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   118d8:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   118da:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   118dc:	f013 fdd5 	bl	2548a <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   118e0:	ab0a      	add	r3, sp, #40	; 0x28
	return net_buf_add(*buf, plen);
   118e2:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   118e4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   118e8:	a908      	add	r1, sp, #32
   118ea:	f10d 001e 	add.w	r0, sp, #30
   118ee:	f003 ff05 	bl	156fc <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   118f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   118f6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   118fa:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   118fe:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   11902:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   11906:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   1190a:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1190c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   11910:	7022      	strb	r2, [r4, #0]
	return evt;
   11912:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   11914:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   11918:	e56e      	b.n	113f8 <hci_cmd_handle+0x7c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   1191a:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   1191c:	8818      	ldrh	r0, [r3, #0]
   1191e:	f007 fb47 	bl	18fb0 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11922:	8838      	ldrh	r0, [r7, #0]
   11924:	2101      	movs	r1, #1
   11926:	e690      	b.n	1164a <hci_cmd_handle+0x2ce>
	status = ll_rl_enable(cmd->enable);
   11928:	68ab      	ldr	r3, [r5, #8]
   1192a:	7818      	ldrb	r0, [r3, #0]
   1192c:	f007 fb26 	bl	18f7c <ll_rl_enable>
   11930:	e743      	b.n	117ba <hci_cmd_handle+0x43e>
	memcpy(dst, src, sizeof(*dst));
   11932:	68ab      	ldr	r3, [r5, #8]
   11934:	6818      	ldr	r0, [r3, #0]
   11936:	900a      	str	r0, [sp, #40]	; 0x28
   11938:	889a      	ldrh	r2, [r3, #4]
   1193a:	799b      	ldrb	r3, [r3, #6]
   1193c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11940:	4660      	mov	r0, ip
   11942:	2107      	movs	r1, #7
   11944:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
   11948:	f011 fbd3 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   1194c:	2107      	movs	r1, #7
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1194e:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11950:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11952:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11954:	f013 fd99 	bl	2548a <net_buf_simple_add>
   11958:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1195a:	1c41      	adds	r1, r0, #1
   1195c:	a80a      	add	r0, sp, #40	; 0x28
   1195e:	f007 fadb 	bl	18f18 <ll_rl_lrpa_get>
   11962:	7020      	strb	r0, [r4, #0]
	return evt;
   11964:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11966:	e547      	b.n	113f8 <hci_cmd_handle+0x7c>
   11968:	68ab      	ldr	r3, [r5, #8]
   1196a:	6818      	ldr	r0, [r3, #0]
   1196c:	900a      	str	r0, [sp, #40]	; 0x28
   1196e:	889a      	ldrh	r2, [r3, #4]
   11970:	799b      	ldrb	r3, [r3, #6]
   11972:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11976:	4660      	mov	r0, ip
   11978:	2107      	movs	r1, #7
   1197a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
   1197e:	f011 fbb8 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11982:	2107      	movs	r1, #7
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11984:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11986:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11988:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   1198a:	f013 fd7e 	bl	2548a <net_buf_simple_add>
   1198e:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   11990:	1c41      	adds	r1, r0, #1
   11992:	a80a      	add	r0, sp, #40	; 0x28
   11994:	f007 fa86 	bl	18ea4 <ll_rl_crpa_get>
   11998:	7020      	strb	r0, [r4, #0]
	return evt;
   1199a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1199c:	e52c      	b.n	113f8 <hci_cmd_handle+0x7c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1199e:	4660      	mov	r0, ip
   119a0:	2102      	movs	r1, #2
   119a2:	f011 fba6 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   119a6:	2102      	movs	r1, #2
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   119a8:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   119aa:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   119ac:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   119ae:	f013 fd6c 	bl	2548a <net_buf_simple_add>
   119b2:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   119b4:	f007 f940 	bl	18c38 <ll_rl_size_get>
	rp->status = 0x00;
   119b8:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   119ba:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   119bc:	7023      	strb	r3, [r4, #0]
	return evt;
   119be:	9e09      	ldr	r6, [sp, #36]	; 0x24
   119c0:	e51a      	b.n	113f8 <hci_cmd_handle+0x7c>
	status = ll_rl_clear();
   119c2:	f007 f93b 	bl	18c3c <ll_rl_clear>
   119c6:	e6f8      	b.n	117ba <hci_cmd_handle+0x43e>
	status = ll_rl_remove(&cmd->peer_id_addr);
   119c8:	68a8      	ldr	r0, [r5, #8]
   119ca:	f007 f979 	bl	18cc0 <ll_rl_remove>
   119ce:	e6f4      	b.n	117ba <hci_cmd_handle+0x43e>
		le_add_dev_to_rl(cmd, evt);
   119d0:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   119d2:	f100 0217 	add.w	r2, r0, #23
   119d6:	1dc1      	adds	r1, r0, #7
   119d8:	f007 fdaa 	bl	19530 <ll_rl_add>
   119dc:	e6ed      	b.n	117ba <hci_cmd_handle+0x43e>
		le_write_default_data_len(cmd, evt);
   119de:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   119e0:	8859      	ldrh	r1, [r3, #2]
   119e2:	8818      	ldrh	r0, [r3, #0]
   119e4:	f003 fe80 	bl	156e8 <ll_length_default_set>
   119e8:	e6e7      	b.n	117ba <hci_cmd_handle+0x43e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   119ea:	4660      	mov	r0, ip
   119ec:	2105      	movs	r1, #5
   119ee:	f011 fb80 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   119f2:	2105      	movs	r1, #5
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   119f4:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   119f6:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   119f8:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   119fa:	f013 fd46 	bl	2548a <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   119fe:	a90a      	add	r1, sp, #40	; 0x28
	return net_buf_add(*buf, plen);
   11a00:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   11a02:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   11a06:	f003 fe63 	bl	156d0 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   11a0a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   11a0e:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   11a12:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11a14:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   11a18:	7022      	strb	r2, [r4, #0]
	return evt;
   11a1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11a1c:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   11a20:	e4ea      	b.n	113f8 <hci_cmd_handle+0x7c>
		le_set_data_len(cmd, evt);
   11a22:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11a24:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   11a26:	889a      	ldrh	r2, [r3, #4]
   11a28:	8859      	ldrh	r1, [r3, #2]
   11a2a:	b2a8      	uxth	r0, r5
   11a2c:	f003 fe06 	bl	1563c <ll_length_req_send>
   11a30:	e621      	b.n	11676 <hci_cmd_handle+0x2fa>
		le_conn_param_req_neg_reply(cmd, evt);
   11a32:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   11a34:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   11a36:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   11a38:	7892      	ldrb	r2, [r2, #2]
   11a3a:	9300      	str	r3, [sp, #0]
   11a3c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11a40:	2102      	movs	r1, #2
   11a42:	b2a0      	uxth	r0, r4
   11a44:	f003 fcfe 	bl	15444 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a48:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   11a4a:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a4c:	8838      	ldrh	r0, [r7, #0]
   11a4e:	f011 fb50 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11a52:	2103      	movs	r1, #3
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a54:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11a56:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a58:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11a5a:	f013 fd16 	bl	2548a <net_buf_simple_add>
	rp->status = status;
   11a5e:	7005      	strb	r5, [r0, #0]
	return evt;
   11a60:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   11a62:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   11a66:	e4c7      	b.n	113f8 <hci_cmd_handle+0x7c>
		le_conn_param_req_reply(cmd, evt);
   11a68:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11a6a:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11a6c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11a6e:	8853      	ldrh	r3, [r2, #2]
   11a70:	9102      	str	r1, [sp, #8]
   11a72:	88d1      	ldrh	r1, [r2, #6]
   11a74:	9101      	str	r1, [sp, #4]
   11a76:	8891      	ldrh	r1, [r2, #4]
   11a78:	9100      	str	r1, [sp, #0]
   11a7a:	2200      	movs	r2, #0
   11a7c:	e7e0      	b.n	11a40 <hci_cmd_handle+0x6c4>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a7e:	2109      	movs	r1, #9
   11a80:	4660      	mov	r0, ip
   11a82:	f011 fb36 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11a86:	2109      	movs	r1, #9
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a88:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11a8a:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a8c:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11a8e:	f013 fcfc 	bl	2548a <net_buf_simple_add>
	dst[0] = val;
   11a92:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
   11a94:	2200      	movs	r2, #0
   11a96:	213f      	movs	r1, #63	; 0x3f
   11a98:	70c1      	strb	r1, [r0, #3]
   11a9a:	7002      	strb	r2, [r0, #0]
   11a9c:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
   11a9e:	7083      	strb	r3, [r0, #2]
   11aa0:	2103      	movs	r1, #3
	return evt;
   11aa2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11aa4:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   11aa6:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
   11aa8:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
   11aaa:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
   11aac:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   11aae:	e4a3      	b.n	113f8 <hci_cmd_handle+0x7c>
	handle = sys_le16_to_cpu(cmd->handle);
   11ab0:	68ab      	ldr	r3, [r5, #8]
   11ab2:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   11ab4:	2200      	movs	r2, #0
   11ab6:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11ab8:	b2a8      	uxth	r0, r5
   11aba:	f006 fa0f 	bl	17edc <ll_start_enc_req_send>
   11abe:	e5da      	b.n	11676 <hci_cmd_handle+0x2fa>
	handle = sys_le16_to_cpu(cmd->handle);
   11ac0:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11ac2:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   11ac4:	f832 5b02 	ldrh.w	r5, [r2], #2
   11ac8:	e7f6      	b.n	11ab8 <hci_cmd_handle+0x73c>
		le_start_encryption(cmd, evt);
   11aca:	68aa      	ldr	r2, [r5, #8]
				 (uint8_t *)&cmd->rand,
   11acc:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   11ace:	f102 030c 	add.w	r3, r2, #12
   11ad2:	f831 0b02 	ldrh.w	r0, [r1], #2
   11ad6:	320a      	adds	r2, #10
   11ad8:	f006 fd34 	bl	18544 <ll_enc_req_send>
   11adc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11ade:	8838      	ldrh	r0, [r7, #0]
   11ae0:	f011 fb19 	bl	23116 <bt_hci_cmd_status_create>
   11ae4:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   11ae6:	e487      	b.n	113f8 <hci_cmd_handle+0x7c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11ae8:	4660      	mov	r0, ip
   11aea:	2109      	movs	r1, #9
   11aec:	f011 fb01 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11af0:	2109      	movs	r1, #9
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11af2:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11af4:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11af6:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11af8:	f013 fcc7 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11afc:	2300      	movs	r3, #0
   11afe:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   11b02:	2108      	movs	r1, #8
   11b04:	f008 fe14 	bl	1a730 <lll_csrand_get>
	return evt;
   11b08:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11b0a:	e475      	b.n	113f8 <hci_cmd_handle+0x7c>
		le_encrypt(cmd, evt);
   11b0c:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   11b0e:	aa0a      	add	r2, sp, #40	; 0x28
   11b10:	2300      	movs	r3, #0
   11b12:	f100 0110 	add.w	r1, r0, #16
   11b16:	f00a fefd 	bl	1c914 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11b1a:	2111      	movs	r1, #17
   11b1c:	8838      	ldrh	r0, [r7, #0]
   11b1e:	f011 fae8 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11b22:	2111      	movs	r1, #17
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11b24:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11b26:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11b28:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11b2a:	f013 fcae 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11b2e:	4605      	mov	r5, r0
   11b30:	2300      	movs	r3, #0
   11b32:	f805 3b01 	strb.w	r3, [r5], #1
   11b36:	ac0a      	add	r4, sp, #40	; 0x28
	return net_buf_add(*buf, plen);
   11b38:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   11b3c:	f8c6 0001 	str.w	r0, [r6, #1]
	return evt;
   11b40:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11b42:	6069      	str	r1, [r5, #4]
   11b44:	60aa      	str	r2, [r5, #8]
   11b46:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
   11b48:	e456      	b.n	113f8 <hci_cmd_handle+0x7c>
	handle = sys_le16_to_cpu(cmd->handle);
   11b4a:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   11b4c:	8818      	ldrh	r0, [r3, #0]
   11b4e:	f003 fd3d 	bl	155cc <ll_feature_req_send>
   11b52:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11b54:	8838      	ldrh	r0, [r7, #0]
   11b56:	f011 fade 	bl	23116 <bt_hci_cmd_status_create>
   11b5a:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   11b5c:	e44c      	b.n	113f8 <hci_cmd_handle+0x7c>
	handle = sys_le16_to_cpu(cmd->handle);
   11b5e:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11b60:	4660      	mov	r0, ip
   11b62:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   11b64:	881d      	ldrh	r5, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11b66:	f011 fac4 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11b6a:	2108      	movs	r1, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11b6c:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11b6e:	4408      	add	r0, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11b70:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11b72:	f013 fc8a 	bl	2548a <net_buf_simple_add>
   11b76:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   11b78:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   11b7a:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   11b7c:	f003 fcec 	bl	15558 <ll_chm_get>
	rp->status = status;
   11b80:	7020      	strb	r0, [r4, #0]
	return evt;
   11b82:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->handle = sys_le16_to_cpu(handle);
   11b84:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   11b88:	e436      	b.n	113f8 <hci_cmd_handle+0x7c>
	status = ll_chm_update(&cmd->ch_map[0]);
   11b8a:	68a8      	ldr	r0, [r5, #8]
   11b8c:	f006 fcb2 	bl	184f4 <ll_chm_update>
   11b90:	e613      	b.n	117ba <hci_cmd_handle+0x43e>
		le_conn_update(cmd, evt);
   11b92:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   11b94:	890a      	ldrh	r2, [r1, #8]
   11b96:	884b      	ldrh	r3, [r1, #2]
   11b98:	8808      	ldrh	r0, [r1, #0]
   11b9a:	9202      	str	r2, [sp, #8]
   11b9c:	88ca      	ldrh	r2, [r1, #6]
   11b9e:	9201      	str	r2, [sp, #4]
   11ba0:	8889      	ldrh	r1, [r1, #4]
   11ba2:	9100      	str	r1, [sp, #0]
   11ba4:	2200      	movs	r2, #0
   11ba6:	4611      	mov	r1, r2
   11ba8:	f003 fc4c 	bl	15444 <ll_conn_update>
   11bac:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11bae:	8838      	ldrh	r0, [r7, #0]
   11bb0:	f011 fab1 	bl	23116 <bt_hci_cmd_status_create>
   11bb4:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   11bb6:	e41f      	b.n	113f8 <hci_cmd_handle+0x7c>
	status = ll_wl_remove(&cmd->addr);
   11bb8:	68a8      	ldr	r0, [r5, #8]
   11bba:	f006 ffa5 	bl	18b08 <ll_wl_remove>
   11bbe:	e5fc      	b.n	117ba <hci_cmd_handle+0x43e>
	status = ll_wl_add(&cmd->addr);
   11bc0:	68a8      	ldr	r0, [r5, #8]
   11bc2:	f006 feff 	bl	189c4 <ll_wl_add>
   11bc6:	e5f8      	b.n	117ba <hci_cmd_handle+0x43e>
	status = ll_wl_clear();
   11bc8:	f006 fece 	bl	18968 <ll_wl_clear>
   11bcc:	e5f5      	b.n	117ba <hci_cmd_handle+0x43e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11bce:	4660      	mov	r0, ip
   11bd0:	2102      	movs	r1, #2
   11bd2:	f011 fa8e 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11bd6:	2102      	movs	r1, #2
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11bd8:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11bda:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11bdc:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11bde:	f013 fc54 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11be2:	2300      	movs	r3, #0
   11be4:	7003      	strb	r3, [r0, #0]
	return net_buf_add(*buf, plen);
   11be6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   11be8:	f006 febc 	bl	18964 <ll_wl_size_get>
   11bec:	7060      	strb	r0, [r4, #1]
	return evt;
   11bee:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11bf0:	e402      	b.n	113f8 <hci_cmd_handle+0x7c>
	status = ll_connect_disable(node_rx);
   11bf2:	4630      	mov	r0, r6
   11bf4:	f006 fc38 	bl	18468 <ll_connect_disable>
   11bf8:	e5df      	b.n	117ba <hci_cmd_handle+0x43e>
		le_create_connection(cmd, evt);
   11bfa:	68ac      	ldr	r4, [r5, #8]
	status = ll_create_connection(scan_interval, scan_window,
   11bfc:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   11c00:	7963      	ldrb	r3, [r4, #5]
   11c02:	7922      	ldrb	r2, [r4, #4]
   11c04:	8861      	ldrh	r1, [r4, #2]
   11c06:	8820      	ldrh	r0, [r4, #0]
   11c08:	9504      	str	r5, [sp, #16]
   11c0a:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   11c0e:	9503      	str	r5, [sp, #12]
   11c10:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   11c14:	9502      	str	r5, [sp, #8]
   11c16:	7b25      	ldrb	r5, [r4, #12]
   11c18:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   11c1a:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   11c1c:	9400      	str	r4, [sp, #0]
   11c1e:	f006 fa21 	bl	18064 <ll_create_connection>
   11c22:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11c24:	8838      	ldrh	r0, [r7, #0]
   11c26:	f011 fa76 	bl	23116 <bt_hci_cmd_status_create>
   11c2a:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   11c2c:	f7ff bbe4 	b.w	113f8 <hci_cmd_handle+0x7c>
		le_set_scan_enable(cmd, evt);
   11c30:	68ab      	ldr	r3, [r5, #8]
	if (cmd->enable && cmd->filter_dup) {
   11c32:	7818      	ldrb	r0, [r3, #0]
   11c34:	2800      	cmp	r0, #0
   11c36:	f000 80d2 	beq.w	11dde <hci_cmd_handle+0xa62>
   11c3a:	785b      	ldrb	r3, [r3, #1]
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	f000 80ce 	beq.w	11dde <hci_cmd_handle+0xa62>
		dup_count = 0;
   11c42:	4970      	ldr	r1, [pc, #448]	; (11e04 <hci_cmd_handle+0xa88>)
		dup_curr = 0U;
   11c44:	4a70      	ldr	r2, [pc, #448]	; (11e08 <hci_cmd_handle+0xa8c>)
		dup_count = 0;
   11c46:	2300      	movs	r3, #0
   11c48:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
   11c4a:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   11c4c:	f002 fe3e 	bl	148cc <ll_scan_enable>
   11c50:	e5b3      	b.n	117ba <hci_cmd_handle+0x43e>
		le_set_scan_param(cmd, evt);
   11c52:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   11c54:	7963      	ldrb	r3, [r4, #5]
   11c56:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   11c5a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   11c5e:	7820      	ldrb	r0, [r4, #0]
   11c60:	79a4      	ldrb	r4, [r4, #6]
   11c62:	9400      	str	r4, [sp, #0]
   11c64:	f7ef fc10 	bl	1488 <ll_scan_params_set>
   11c68:	e5a7      	b.n	117ba <hci_cmd_handle+0x43e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   11c6a:	68a9      	ldr	r1, [r5, #8]
   11c6c:	f811 0b01 	ldrb.w	r0, [r1], #1
   11c70:	f002 fd6a 	bl	14748 <ll_adv_scan_rsp_set>
   11c74:	e5a1      	b.n	117ba <hci_cmd_handle+0x43e>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   11c76:	68a9      	ldr	r1, [r5, #8]
   11c78:	f811 0b01 	ldrb.w	r0, [r1], #1
   11c7c:	f002 fd10 	bl	146a0 <ll_adv_data_set>
   11c80:	e59b      	b.n	117ba <hci_cmd_handle+0x43e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11c82:	2102      	movs	r1, #2
   11c84:	4660      	mov	r0, ip
   11c86:	f011 fa34 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11c8a:	2102      	movs	r1, #2
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11c8c:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11c8e:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11c90:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11c92:	f013 fbfa 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11c96:	2300      	movs	r3, #0
   11c98:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   11c9a:	7043      	strb	r3, [r0, #1]
	return evt;
   11c9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11c9e:	f7ff bbab 	b.w	113f8 <hci_cmd_handle+0x7c>
		le_set_adv_param(cmd, evt);
   11ca2:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   11ca4:	7ba5      	ldrb	r5, [r4, #14]
   11ca6:	79a3      	ldrb	r3, [r4, #6]
   11ca8:	7962      	ldrb	r2, [r4, #5]
   11caa:	7921      	ldrb	r1, [r4, #4]
   11cac:	8820      	ldrh	r0, [r4, #0]
   11cae:	9502      	str	r5, [sp, #8]
   11cb0:	7b65      	ldrb	r5, [r4, #13]
   11cb2:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   11cb4:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   11cb6:	9400      	str	r4, [sp, #0]
   11cb8:	f002 fba0 	bl	143fc <ll_adv_params_set>
   11cbc:	e57d      	b.n	117ba <hci_cmd_handle+0x43e>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   11cbe:	68a9      	ldr	r1, [r5, #8]
   11cc0:	2001      	movs	r0, #1
   11cc2:	f7ff f87f 	bl	10dc4 <ll_addr_set>
   11cc6:	e578      	b.n	117ba <hci_cmd_handle+0x43e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11cc8:	2109      	movs	r1, #9
   11cca:	4660      	mov	r0, ip
   11ccc:	f011 fa11 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11cd0:	2109      	movs	r1, #9
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11cd2:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11cd4:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11cd6:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11cd8:	f013 fbd7 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11cdc:	4603      	mov	r3, r0
   11cde:	2200      	movs	r2, #0
   11ce0:	f803 2b01 	strb.w	r2, [r3], #1
	dst[0] = val;
   11ce4:	24ff      	movs	r4, #255	; 0xff
__ssp_bos_icheck3(memset, void *, int)
   11ce6:	f8c0 2001 	str.w	r2, [r0, #1]
	dst[1] = val >> 8;
   11cea:	2149      	movs	r1, #73	; 0x49
   11cec:	605a      	str	r2, [r3, #4]
	dst[2] = val >> 16;
   11cee:	2301      	movs	r3, #1
	dst[0] = val;
   11cf0:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   11cf2:	7081      	strb	r1, [r0, #2]
	dst[2] = val >> 16;
   11cf4:	70c3      	strb	r3, [r0, #3]
	return evt;
   11cf6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11cf8:	f7ff bb7e 	b.w	113f8 <hci_cmd_handle+0x7c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11cfc:	2104      	movs	r1, #4
   11cfe:	4660      	mov	r0, ip
   11d00:	f011 f9f7 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11d04:	2104      	movs	r1, #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11d06:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11d08:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11d0a:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11d0c:	f013 fbbd 	bl	2548a <net_buf_simple_add>
	rp->status = 0x00;
   11d10:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   11d12:	2103      	movs	r1, #3
	rp->status = 0x00;
   11d14:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   11d16:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   11d18:	70c1      	strb	r1, [r0, #3]
	return evt;
   11d1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   11d1c:	7042      	strb	r2, [r0, #1]
   11d1e:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   11d20:	f7ff bb6a 	b.w	113f8 <hci_cmd_handle+0x7c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11d24:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   11d26:	4b39      	ldr	r3, [pc, #228]	; (11e0c <hci_cmd_handle+0xa90>)
   11d28:	6811      	ldr	r1, [r2, #0]
   11d2a:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11d2c:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11d2e:	4660      	mov	r0, ip
   11d30:	2101      	movs	r1, #1
   11d32:	e489      	b.n	11648 <hci_cmd_handle+0x2cc>
	status = ll_adv_enable(cmd->enable);
   11d34:	68ab      	ldr	r3, [r5, #8]
   11d36:	7818      	ldrb	r0, [r3, #0]
   11d38:	f7ef f93a 	bl	fb0 <ll_adv_enable>
   11d3c:	e53d      	b.n	117ba <hci_cmd_handle+0x43e>
		disconnect(cmd, evt);
   11d3e:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   11d40:	7899      	ldrb	r1, [r3, #2]
   11d42:	8818      	ldrh	r0, [r3, #0]
   11d44:	f003 fc28 	bl	15598 <ll_terminate_ind_send>
   11d48:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11d4a:	8838      	ldrh	r0, [r7, #0]
   11d4c:	f011 f9e3 	bl	23116 <bt_hci_cmd_status_create>
   11d50:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   11d52:	f7ff bb51 	b.w	113f8 <hci_cmd_handle+0x7c>
	dup_count = -1;
   11d56:	482b      	ldr	r0, [pc, #172]	; (11e04 <hci_cmd_handle+0xa88>)
	event_mask = DEFAULT_EVENT_MASK;
   11d58:	492d      	ldr	r1, [pc, #180]	; (11e10 <hci_cmd_handle+0xa94>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11d5a:	4a2e      	ldr	r2, [pc, #184]	; (11e14 <hci_cmd_handle+0xa98>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11d5c:	4b2b      	ldr	r3, [pc, #172]	; (11e0c <hci_cmd_handle+0xa90>)
	dup_count = -1;
   11d5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11d62:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   11d64:	f641 75ff 	movw	r5, #8191	; 0x1fff
   11d68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11d6c:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11d70:	2000      	movs	r0, #0
   11d72:	2100      	movs	r1, #0
   11d74:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11d78:	201f      	movs	r0, #31
   11d7a:	2100      	movs	r1, #0
   11d7c:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   11d80:	f001 fa90 	bl	132a4 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11d84:	2101      	movs	r1, #1
   11d86:	8838      	ldrh	r0, [r7, #0]
   11d88:	f011 f9b3 	bl	230f2 <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
   11d8c:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11d8e:	4606      	mov	r6, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
   11d90:	3008      	adds	r0, #8
   11d92:	f013 fb7a 	bl	2548a <net_buf_simple_add>
	conn_count = 0U;
   11d96:	4a20      	ldr	r2, [pc, #128]	; (11e18 <hci_cmd_handle+0xa9c>)
	ccst->status = status;
   11d98:	2300      	movs	r3, #0
   11d9a:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   11d9c:	6013      	str	r3, [r2, #0]
}
   11d9e:	f7ff bb2b 	b.w	113f8 <hci_cmd_handle+0x7c>
   11da2:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11da4:	4b1b      	ldr	r3, [pc, #108]	; (11e14 <hci_cmd_handle+0xa98>)
   11da6:	e7bf      	b.n	11d28 <hci_cmd_handle+0x9ac>
	handle = sys_le16_to_cpu(cmd->handle);
   11da8:	68ab      	ldr	r3, [r5, #8]
   11daa:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   11dac:	a90a      	add	r1, sp, #40	; 0x28
   11dae:	b2a8      	uxth	r0, r5
   11db0:	f003 fd3c 	bl	1582c <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11db4:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   11db6:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11db8:	8838      	ldrh	r0, [r7, #0]
   11dba:	f011 f99a 	bl	230f2 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   11dbe:	2105      	movs	r1, #5
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11dc0:	4603      	mov	r3, r0
	return net_buf_add(*buf, plen);
   11dc2:	3008      	adds	r0, #8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11dc4:	9309      	str	r3, [sp, #36]	; 0x24
	return net_buf_add(*buf, plen);
   11dc6:	f013 fb60 	bl	2548a <net_buf_simple_add>
	rp->status = status;
   11dca:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   11dcc:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   11dd0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   11dd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   11dd6:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   11dda:	f7ff bb0d 	b.w	113f8 <hci_cmd_handle+0x7c>
		dup_count = -1;
   11dde:	4b09      	ldr	r3, [pc, #36]	; (11e04 <hci_cmd_handle+0xa88>)
   11de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11de4:	601a      	str	r2, [r3, #0]
   11de6:	e731      	b.n	11c4c <hci_cmd_handle+0x8d0>
	return bt_hci_cmd_status_create(_opcode, status);
   11de8:	2112      	movs	r1, #18
   11dea:	4660      	mov	r0, ip
   11dec:	f011 f993 	bl	23116 <bt_hci_cmd_status_create>
   11df0:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   11df2:	f7ff bb01 	b.w	113f8 <hci_cmd_handle+0x7c>
	return bt_hci_cmd_status_create(_opcode, status);
   11df6:	2111      	movs	r1, #17
   11df8:	4660      	mov	r0, ip
   11dfa:	f011 f98c 	bl	23116 <bt_hci_cmd_status_create>
   11dfe:	4606      	mov	r6, r0
		return;
   11e00:	f7ff bafa 	b.w	113f8 <hci_cmd_handle+0x7c>
   11e04:	20001e74 	.word	0x20001e74
   11e08:	20001e78 	.word	0x20001e78
   11e0c:	20000130 	.word	0x20000130
   11e10:	20000128 	.word	0x20000128
   11e14:	20001768 	.word	0x20001768
   11e18:	20001e70 	.word	0x20001e70

00011e1c <hci_acl_handle>:
{
   11e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   11e20:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   11e22:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   11e24:	2b03      	cmp	r3, #3
	*evt = NULL;
   11e26:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   11e28:	d944      	bls.n	11eb4 <hci_acl_handle+0x98>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   11e2a:	4605      	mov	r5, r0
   11e2c:	460f      	mov	r7, r1
   11e2e:	3008      	adds	r0, #8
   11e30:	2104      	movs	r1, #4
   11e32:	f013 fb5b 	bl	254ec <net_buf_simple_pull_mem>
	if (buf->len < len) {
   11e36:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   11e38:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   11e3c:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   11e40:	4543      	cmp	r3, r8
   11e42:	d344      	bcc.n	11ece <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
   11e44:	f003 fa80 	bl	15348 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   11e48:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   11e4c:	4604      	mov	r4, r0
   11e4e:	2800      	cmp	r0, #0
   11e50:	d041      	beq.n	11ed6 <hci_acl_handle+0xba>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   11e52:	08b3      	lsrs	r3, r6, #2
   11e54:	d102      	bne.n	11e5c <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   11e56:	b33e      	cbz	r6, 11ea8 <hci_acl_handle+0x8c>
   11e58:	2e01      	cmp	r6, #1
   11e5a:	d003      	beq.n	11e64 <hci_acl_handle+0x48>
		return -EINVAL;
   11e5c:	f06f 0015 	mvn.w	r0, #21
}
   11e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11e64:	7903      	ldrb	r3, [r0, #4]
   11e66:	f366 0301 	bfi	r3, r6, #0, #2
   11e6a:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   11e6c:	f884 8005 	strb.w	r8, [r4, #5]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11e70:	68a9      	ldr	r1, [r5, #8]
   11e72:	4642      	mov	r2, r8
   11e74:	1de0      	adds	r0, r4, #7
   11e76:	f014 fa0e 	bl	26296 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   11e7a:	4621      	mov	r1, r4
   11e7c:	f3c9 000b 	ubfx	r0, r9, #0, #12
   11e80:	f003 fa6e 	bl	15360 <ll_tx_mem_enqueue>
   11e84:	2800      	cmp	r0, #0
   11e86:	d0eb      	beq.n	11e60 <hci_acl_handle+0x44>
   11e88:	4b28      	ldr	r3, [pc, #160]	; (11f2c <hci_acl_handle+0x110>)
   11e8a:	4929      	ldr	r1, [pc, #164]	; (11f30 <hci_acl_handle+0x114>)
		BT_ERR("Invalid Tx Enqueue");
   11e8c:	4829      	ldr	r0, [pc, #164]	; (11f34 <hci_acl_handle+0x118>)
   11e8e:	1ac9      	subs	r1, r1, r3
   11e90:	08c9      	lsrs	r1, r1, #3
   11e92:	0189      	lsls	r1, r1, #6
   11e94:	f041 0101 	orr.w	r1, r1, #1
   11e98:	f00f f8fa 	bl	21090 <log_0>
		ll_tx_mem_release(node_tx);
   11e9c:	4620      	mov	r0, r4
   11e9e:	f003 fa59 	bl	15354 <ll_tx_mem_release>
		return -EINVAL;
   11ea2:	f06f 0015 	mvn.w	r0, #21
   11ea6:	e7db      	b.n	11e60 <hci_acl_handle+0x44>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   11ea8:	7903      	ldrb	r3, [r0, #4]
   11eaa:	2202      	movs	r2, #2
   11eac:	f362 0301 	bfi	r3, r2, #0, #2
   11eb0:	7103      	strb	r3, [r0, #4]
		break;
   11eb2:	e7db      	b.n	11e6c <hci_acl_handle+0x50>
   11eb4:	491e      	ldr	r1, [pc, #120]	; (11f30 <hci_acl_handle+0x114>)
   11eb6:	4b1d      	ldr	r3, [pc, #116]	; (11f2c <hci_acl_handle+0x110>)
		BT_ERR("No HCI ACL header");
   11eb8:	481f      	ldr	r0, [pc, #124]	; (11f38 <hci_acl_handle+0x11c>)
   11eba:	1ac9      	subs	r1, r1, r3
   11ebc:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   11ebe:	0189      	lsls	r1, r1, #6
   11ec0:	f041 0101 	orr.w	r1, r1, #1
   11ec4:	f00f f8e4 	bl	21090 <log_0>
		return -EINVAL;
   11ec8:	f06f 0015 	mvn.w	r0, #21
   11ecc:	e7c8      	b.n	11e60 <hci_acl_handle+0x44>
   11ece:	4918      	ldr	r1, [pc, #96]	; (11f30 <hci_acl_handle+0x114>)
   11ed0:	4b16      	ldr	r3, [pc, #88]	; (11f2c <hci_acl_handle+0x110>)
		BT_ERR("Invalid HCI ACL packet length");
   11ed2:	481a      	ldr	r0, [pc, #104]	; (11f3c <hci_acl_handle+0x120>)
   11ed4:	e7f1      	b.n	11eba <hci_acl_handle+0x9e>
   11ed6:	4b15      	ldr	r3, [pc, #84]	; (11f2c <hci_acl_handle+0x110>)
   11ed8:	4915      	ldr	r1, [pc, #84]	; (11f30 <hci_acl_handle+0x114>)
		BT_ERR("Tx Buffer Overflow");
   11eda:	4819      	ldr	r0, [pc, #100]	; (11f40 <hci_acl_handle+0x124>)
   11edc:	1ac9      	subs	r1, r1, r3
   11ede:	08c9      	lsrs	r1, r1, #3
   11ee0:	0189      	lsls	r1, r1, #6
   11ee2:	f041 0101 	orr.w	r1, r1, #1
   11ee6:	f00f f8d3 	bl	21090 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   11eea:	4b16      	ldr	r3, [pc, #88]	; (11f44 <hci_acl_handle+0x128>)
   11eec:	681b      	ldr	r3, [r3, #0]
   11eee:	019b      	lsls	r3, r3, #6
   11ef0:	d402      	bmi.n	11ef8 <hci_acl_handle+0xdc>
		return -ENOBUFS;
   11ef2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11ef6:	e7b3      	b.n	11e60 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11f00:	2001      	movs	r0, #1
   11f02:	f7f7 ffc3 	bl	9e8c <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   11f06:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11f08:	6038      	str	r0, [r7, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   11f0a:	3008      	adds	r0, #8
   11f0c:	f013 fabd 	bl	2548a <net_buf_simple_add>
	hdr->len = len;
   11f10:	2401      	movs	r4, #1
	hdr->evt = evt;
   11f12:	221a      	movs	r2, #26
   11f14:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   11f16:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   11f18:	6838      	ldr	r0, [r7, #0]
   11f1a:	4621      	mov	r1, r4
   11f1c:	3008      	adds	r0, #8
   11f1e:	f013 fab4 	bl	2548a <net_buf_simple_add>
   11f22:	4603      	mov	r3, r0
		return -ENOBUFS;
   11f24:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   11f28:	701c      	strb	r4, [r3, #0]
   11f2a:	e799      	b.n	11e60 <hci_acl_handle+0x44>
   11f2c:	00026828 	.word	0x00026828
   11f30:	00026870 	.word	0x00026870
   11f34:	0002745c 	.word	0x0002745c
   11f38:	00027414 	.word	0x00027414
   11f3c:	00027428 	.word	0x00027428
   11f40:	00027448 	.word	0x00027448
   11f44:	20000128 	.word	0x20000128

00011f48 <hci_disconn_complete_encode>:
{
   11f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   11f4a:	4b0e      	ldr	r3, [pc, #56]	; (11f84 <hci_disconn_complete_encode+0x3c>)
   11f4c:	681b      	ldr	r3, [r3, #0]
   11f4e:	06db      	lsls	r3, r3, #27
   11f50:	d400      	bmi.n	11f54 <hci_disconn_complete_encode+0xc>
}
   11f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
   11f54:	f102 0408 	add.w	r4, r2, #8
   11f58:	4605      	mov	r5, r0
   11f5a:	460e      	mov	r6, r1
   11f5c:	4620      	mov	r0, r4
   11f5e:	2102      	movs	r1, #2
   11f60:	f013 fa93 	bl	2548a <net_buf_simple_add>
   11f64:	4603      	mov	r3, r0
	hdr->len = len;
   11f66:	2104      	movs	r1, #4
	hdr->evt = evt;
   11f68:	2205      	movs	r2, #5
	hdr->len = len;
   11f6a:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   11f6c:	701a      	strb	r2, [r3, #0]
	ep = net_buf_add(buf, sizeof(*ep));
   11f6e:	4620      	mov	r0, r4
   11f70:	f013 fa8b 	bl	2548a <net_buf_simple_add>
   11f74:	2700      	movs	r7, #0
	ep->status = 0x00;
   11f76:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   11f78:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   11f7c:	782b      	ldrb	r3, [r5, #0]
   11f7e:	70c3      	strb	r3, [r0, #3]
}
   11f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f82:	bf00      	nop
   11f84:	20000128 	.word	0x20000128

00011f88 <hci_disconn_complete_process>:
	conn_count--;
   11f88:	4a02      	ldr	r2, [pc, #8]	; (11f94 <hci_disconn_complete_process+0xc>)
   11f8a:	6813      	ldr	r3, [r2, #0]
   11f8c:	3b01      	subs	r3, #1
   11f8e:	6013      	str	r3, [r2, #0]
}
   11f90:	4770      	bx	lr
   11f92:	bf00      	nop
   11f94:	20001e70 	.word	0x20001e70

00011f98 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   11f98:	7f03      	ldrb	r3, [r0, #28]
   11f9a:	f003 0303 	and.w	r3, r3, #3
   11f9e:	3b01      	subs	r3, #1
   11fa0:	2b01      	cmp	r3, #1
{
   11fa2:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   11fa4:	d90d      	bls.n	11fc2 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   11fa6:	4a16      	ldr	r2, [pc, #88]	; (12000 <hci_acl_encode+0x68>)
   11fa8:	4916      	ldr	r1, [pc, #88]	; (12004 <hci_acl_encode+0x6c>)
   11faa:	4817      	ldr	r0, [pc, #92]	; (12008 <hci_acl_encode+0x70>)
   11fac:	f241 1347 	movw	r3, #4423	; 0x1147
   11fb0:	f00e fd15 	bl	209de <printk>
   11fb4:	4040      	eors	r0, r0
   11fb6:	f380 8811 	msr	BASEPRI, r0
   11fba:	f04f 0003 	mov.w	r0, #3
   11fbe:	df02      	svc	2
		break;
	}
}
   11fc0:	bd70      	pop	{r4, r5, r6, pc}
   11fc2:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   11fc4:	f101 0508 	add.w	r5, r1, #8
   11fc8:	4628      	mov	r0, r5
   11fca:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   11fcc:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   11fce:	f013 fa5c 	bl	2548a <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   11fd2:	7f23      	ldrb	r3, [r4, #28]
   11fd4:	f003 0303 	and.w	r3, r3, #3
   11fd8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   11fda:	bf0c      	ite	eq
   11fdc:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   11fe0:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   11fe4:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   11fe6:	7f61      	ldrb	r1, [r4, #29]
   11fe8:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   11fea:	4628      	mov	r0, r5
   11fec:	f013 fa4d 	bl	2548a <net_buf_simple_add>
   11ff0:	7f62      	ldrb	r2, [r4, #29]
   11ff2:	f104 011f 	add.w	r1, r4, #31
}
   11ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11ffa:	f014 b94c 	b.w	26296 <memcpy>
   11ffe:	bf00      	nop
   12000:	00027470 	.word	0x00027470
   12004:	00027358 	.word	0x00027358
   12008:	000272c0 	.word	0x000272c0

0001200c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12010:	f890 c004 	ldrb.w	ip, [r0, #4]
   12014:	f1bc 0f02 	cmp.w	ip, #2
{
   12018:	4604      	mov	r4, r0
   1201a:	b08b      	sub	sp, #44	; 0x2c
   1201c:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   1201e:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12022:	d014      	beq.n	1204e <hci_evt_encode+0x42>
	switch (node_rx->hdr.type) {
   12024:	f1ac 0c04 	sub.w	ip, ip, #4
	handle = node_rx->hdr.handle;
   12028:	88e6      	ldrh	r6, [r4, #6]
	switch (node_rx->hdr.type) {
   1202a:	f1bc 0f0c 	cmp.w	ip, #12
   1202e:	d829      	bhi.n	12084 <hci_evt_encode+0x78>
   12030:	e8df f01c 	tbh	[pc, ip, lsl #1]
   12034:	00280038 	.word	0x00280038
   12038:	00280028 	.word	0x00280028
   1203c:	00280028 	.word	0x00280028
   12040:	016400f0 	.word	0x016400f0
   12044:	014d016b 	.word	0x014d016b
   12048:	019601fe 	.word	0x019601fe
   1204c:	01ce      	.short	0x01ce
	switch (pdu_data->llctrl.opcode) {
   1204e:	7fe3      	ldrb	r3, [r4, #31]
   12050:	88e6      	ldrh	r6, [r4, #6]
   12052:	3b03      	subs	r3, #3
   12054:	2b12      	cmp	r3, #18
   12056:	f200 81fe 	bhi.w	12456 <hci_evt_encode+0x44a>
   1205a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1205e:	025f      	.short	0x025f
   12060:	01fc01fc 	.word	0x01fc01fc
   12064:	02cf02b6 	.word	0x02cf02b6
   12068:	02ad01fc 	.word	0x02ad01fc
   1206c:	01fc01fc 	.word	0x01fc01fc
   12070:	02e101fc 	.word	0x02e101fc
   12074:	028701fc 	.word	0x028701fc
   12078:	01fc01fc 	.word	0x01fc01fc
   1207c:	01fc01fc 	.word	0x01fc01fc
   12080:	020a020a 	.word	0x020a020a
		LL_ASSERT(0);
   12084:	4ac7      	ldr	r2, [pc, #796]	; (123a4 <hci_evt_encode+0x398>)
   12086:	49c8      	ldr	r1, [pc, #800]	; (123a8 <hci_evt_encode+0x39c>)
   12088:	48c8      	ldr	r0, [pc, #800]	; (123ac <hci_evt_encode+0x3a0>)
   1208a:	f241 0352 	movw	r3, #4178	; 0x1052
   1208e:	f00e fca6 	bl	209de <printk>
   12092:	4040      	eors	r0, r0
   12094:	f380 8811 	msr	BASEPRI, r0
   12098:	f04f 0003 	mov.w	r0, #3
   1209c:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1209e:	b00b      	add	sp, #44	; 0x2c
   120a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		le_advertising_report(pdu_data, node_rx, buf);
   120a4:	7e27      	ldrb	r7, [r4, #24]
	if (adv->tx_addr) {
   120a6:	7f22      	ldrb	r2, [r4, #28]
   120a8:	f894 b01a 	ldrb.w	fp, [r4, #26]
   120ac:	f894 901b 	ldrb.w	r9, [r4, #27]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   120b0:	427f      	negs	r7, r7
   120b2:	b27b      	sxtb	r3, r7
   120b4:	9305      	str	r3, [sp, #20]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   120b6:	4bbe      	ldr	r3, [pc, #760]	; (123b0 <hci_evt_encode+0x3a4>)
   120b8:	e893 0003 	ldmia.w	r3, {r0, r1}
	if (adv->tx_addr) {
   120bc:	0657      	lsls	r7, r2, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   120be:	f8ad 101c 	strh.w	r1, [sp, #28]
   120c2:	ea4f 4111 	mov.w	r1, r1, lsr #16
   120c6:	9006      	str	r0, [sp, #24]
   120c8:	f88d 101e 	strb.w	r1, [sp, #30]
	if (adv->tx_addr) {
   120cc:	f100 82cc 	bmi.w	12668 <hci_evt_encode+0x65c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   120d0:	4bb8      	ldr	r3, [pc, #736]	; (123b4 <hci_evt_encode+0x3a8>)
   120d2:	685b      	ldr	r3, [r3, #4]
	if (direct) {
   120d4:	f1b9 0f00 	cmp.w	r9, #0
   120d8:	f040 8310 	bne.w	126fc <hci_evt_encode+0x6f0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   120dc:	009b      	lsls	r3, r3, #2
   120de:	d5de      	bpl.n	1209e <hci_evt_encode+0x92>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   120e0:	4bb5      	ldr	r3, [pc, #724]	; (123b8 <hci_evt_encode+0x3ac>)
   120e2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   120e4:	079f      	lsls	r7, r3, #30
   120e6:	d5da      	bpl.n	1209e <hci_evt_encode+0x92>
	if (dup_count >= 0) {
   120e8:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 123bc <hci_evt_encode+0x3b0>
   120ec:	f8d8 2000 	ldr.w	r2, [r8]
   120f0:	2a00      	cmp	r2, #0
   120f2:	db41      	blt.n	12178 <hci_evt_encode+0x16c>
		for (i = 0; i < dup_count; i++) {
   120f4:	f000 83fb 	beq.w	128ee <hci_evt_encode+0x8e2>
   120f8:	4eb1      	ldr	r6, [pc, #708]	; (123c0 <hci_evt_encode+0x3b4>)
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   120fa:	f104 0a1e 	add.w	sl, r4, #30
		for (i = 0; i < dup_count; i++) {
   120fe:	464f      	mov	r7, r9
			if (!memcmp(&adv->adv_ind.addr[0],
   12100:	4631      	mov	r1, r6
   12102:	2206      	movs	r2, #6
   12104:	4650      	mov	r0, sl
   12106:	f014 f8b6 	bl	26276 <memcmp>
   1210a:	b938      	cbnz	r0, 1211c <hci_evt_encode+0x110>
			    adv->tx_addr == dup_filter[i].addr.type) {
   1210c:	7f22      	ldrb	r2, [r4, #28]
   1210e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   12112:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   12116:	4288      	cmp	r0, r1
   12118:	f000 840c 	beq.w	12934 <hci_evt_encode+0x928>
		for (i = 0; i < dup_count; i++) {
   1211c:	f8d8 2000 	ldr.w	r2, [r8]
   12120:	3701      	adds	r7, #1
   12122:	4297      	cmp	r7, r2
   12124:	f106 0608 	add.w	r6, r6, #8
   12128:	dbea      	blt.n	12100 <hci_evt_encode+0xf4>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   1212a:	49a6      	ldr	r1, [pc, #664]	; (123c4 <hci_evt_encode+0x3b8>)
   1212c:	48a6      	ldr	r0, [pc, #664]	; (123c8 <hci_evt_encode+0x3bc>)
   1212e:	680b      	ldr	r3, [r1, #0]
   12130:	f8d4 e01e 	ldr.w	lr, [r4, #30]
   12134:	00de      	lsls	r6, r3, #3
   12136:	f106 0c02 	add.w	ip, r6, #2
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   1213a:	4406      	add	r6, r0
   1213c:	f840 e00c 	str.w	lr, [r0, ip]
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   12140:	4484      	add	ip, r0
   12142:	f8ba e004 	ldrh.w	lr, [sl, #4]
   12146:	f8ac e004 	strh.w	lr, [ip, #4]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   1214a:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1214e:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   12152:	f886 c001 	strb.w	ip, [r6, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   12156:	7f26      	ldrb	r6, [r4, #28]
   12158:	f006 0c0f 	and.w	ip, r6, #15
   1215c:	2601      	movs	r6, #1
   1215e:	fa06 f60c 	lsl.w	r6, r6, ip
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12162:	2a0f      	cmp	r2, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   12164:	f800 6033 	strb.w	r6, [r0, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12168:	f340 83df 	ble.w	1292a <hci_evt_encode+0x91e>
			dup_curr++;
   1216c:	3301      	adds	r3, #1
   1216e:	600b      	str	r3, [r1, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12170:	2b10      	cmp	r3, #16
			dup_curr = 0U;
   12172:	bf04      	itt	eq
   12174:	2300      	moveq	r3, #0
   12176:	600b      	streq	r3, [r1, #0]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   12178:	7f23      	ldrb	r3, [r4, #28]
   1217a:	f003 030f 	and.w	r3, r3, #15
   1217e:	2b01      	cmp	r3, #1
   12180:	f000 83a6 	beq.w	128d0 <hci_evt_encode+0x8c4>
		data_len = (adv->len - BDADDR_SIZE);
   12184:	7f63      	ldrb	r3, [r4, #29]
   12186:	f1a3 0906 	sub.w	r9, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1218a:	f103 0a06 	add.w	sl, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
   1218e:	fa5f f989 	uxtb.w	r9, r9
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12192:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   12194:	fa5f fa8a 	uxtb.w	sl, sl
	return net_buf_add(buf, melen);
   12198:	fa5f f883 	uxtb.w	r8, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1219c:	464e      	mov	r6, r9
	hdr = net_buf_add(buf, sizeof(*hdr));
   1219e:	3508      	adds	r5, #8
   121a0:	2102      	movs	r1, #2
   121a2:	4628      	mov	r0, r5
   121a4:	f013 f971 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   121a8:	233e      	movs	r3, #62	; 0x3e
   121aa:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   121ac:	f880 a001 	strb.w	sl, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   121b0:	2101      	movs	r1, #1
   121b2:	4628      	mov	r0, r5
   121b4:	f013 f969 	bl	2548a <net_buf_simple_add>
   121b8:	4603      	mov	r3, r0
	me->subevent = subevt;
   121ba:	2202      	movs	r2, #2
   121bc:	701a      	strb	r2, [r3, #0]
	return net_buf_add(buf, melen);
   121be:	4641      	mov	r1, r8
   121c0:	4628      	mov	r0, r5
   121c2:	f013 f962 	bl	2548a <net_buf_simple_add>
	sep->num_reports = 1U;
   121c6:	2301      	movs	r3, #1
   121c8:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   121ca:	7f23      	ldrb	r3, [r4, #28]
   121cc:	f003 030f 	and.w	r3, r3, #15
   121d0:	3328      	adds	r3, #40	; 0x28
   121d2:	446b      	add	r3, sp
	return net_buf_add(buf, melen);
   121d4:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   121d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   121da:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   121dc:	f006 fd2c 	bl	18c38 <ll_rl_size_get>
   121e0:	4583      	cmp	fp, r0
   121e2:	f0c0 837b 	bcc.w	128dc <hci_evt_encode+0x8d0>
		adv_info->addr.type = adv->tx_addr;
   121e6:	7f23      	ldrb	r3, [r4, #28]
   121e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   121ec:	70ab      	strb	r3, [r5, #2]
   121ee:	f8d4 301e 	ldr.w	r3, [r4, #30]
   121f2:	f8c5 3003 	str.w	r3, [r5, #3]
   121f6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   121f8:	f8a5 3007 	strh.w	r3, [r5, #7]
	adv_info->length = data_len;
   121fc:	f885 9009 	strb.w	r9, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12200:	350a      	adds	r5, #10
   12202:	f104 0124 	add.w	r1, r4, #36	; 0x24
   12206:	4632      	mov	r2, r6
   12208:	4628      	mov	r0, r5
   1220a:	f014 f844 	bl	26296 <memcpy>
	*prssi = rssi;
   1220e:	9b05      	ldr	r3, [sp, #20]
   12210:	55ab      	strb	r3, [r5, r6]
   12212:	e744      	b.n	1209e <hci_evt_encode+0x92>
	uint8_t status = node_rx->status;
   12214:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   12216:	2f00      	cmp	r7, #0
   12218:	f000 821d 	beq.w	12656 <hci_evt_encode+0x64a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1221c:	4b65      	ldr	r3, [pc, #404]	; (123b4 <hci_evt_encode+0x3a8>)
   1221e:	685b      	ldr	r3, [r3, #4]
   12220:	009a      	lsls	r2, r3, #2
   12222:	f57f af3c 	bpl.w	1209e <hci_evt_encode+0x92>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12226:	4b64      	ldr	r3, [pc, #400]	; (123b8 <hci_evt_encode+0x3ac>)
   12228:	681b      	ldr	r3, [r3, #0]
   1222a:	f240 2201 	movw	r2, #513	; 0x201
   1222e:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   12230:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12234:	f43f af33 	beq.w	1209e <hci_evt_encode+0x92>
	if (!status) {
   12238:	2f00      	cmp	r7, #0
   1223a:	f040 8227 	bne.w	1268c <hci_evt_encode+0x680>
		conn_count++;
   1223e:	4a63      	ldr	r2, [pc, #396]	; (123cc <hci_evt_encode+0x3c0>)
   12240:	6813      	ldr	r3, [r2, #0]
   12242:	3301      	adds	r3, #1
   12244:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12246:	f1b8 0f00 	cmp.w	r8, #0
   1224a:	f000 82f4 	beq.w	12836 <hci_evt_encode+0x82a>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1224e:	3508      	adds	r5, #8
   12250:	2102      	movs	r1, #2
   12252:	4628      	mov	r0, r5
   12254:	f013 f919 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   12258:	233e      	movs	r3, #62	; 0x3e
   1225a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1225c:	231f      	movs	r3, #31
   1225e:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   12260:	2101      	movs	r1, #1
   12262:	4628      	mov	r0, r5
   12264:	f013 f911 	bl	2548a <net_buf_simple_add>
   12268:	4603      	mov	r3, r0
	me->subevent = subevt;
   1226a:	220a      	movs	r2, #10
   1226c:	701a      	strb	r2, [r3, #0]
	return net_buf_add(buf, melen);
   1226e:	211e      	movs	r1, #30
   12270:	4628      	mov	r0, r5
   12272:	f013 f90a 	bl	2548a <net_buf_simple_add>
		leecc->status = 0x00;
   12276:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   12278:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = node_rx->role;
   1227c:	7f63      	ldrb	r3, [r4, #29]
   1227e:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
   12280:	7fa3      	ldrb	r3, [r4, #30]
   12282:	7103      	strb	r3, [r0, #4]
   12284:	f8d4 301f 	ldr.w	r3, [r4, #31]
   12288:	f8c0 3005 	str.w	r3, [r0, #5]
   1228c:	f8b4 3023 	ldrh.w	r3, [r4, #35]	; 0x23
   12290:	f8a0 3009 	strh.w	r3, [r0, #9]
   12294:	f8d4 302b 	ldr.w	r3, [r4, #43]	; 0x2b
   12298:	f8c0 300b 	str.w	r3, [r0, #11]
   1229c:	f8b4 302f 	ldrh.w	r3, [r4, #47]	; 0x2f
   122a0:	f8a0 300f 	strh.w	r3, [r0, #15]
   122a4:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
   122a8:	f8c0 3011 	str.w	r3, [r0, #17]
   122ac:	f8b4 3029 	ldrh.w	r3, [r4, #41]	; 0x29
   122b0:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   122b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   122b6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
   122b8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   122ba:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   122be:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   122c2:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = node_rx->sca;
   122c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   122ca:	7743      	strb	r3, [r0, #29]
		return;
   122cc:	e6e7      	b.n	1209e <hci_evt_encode+0x92>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   122ce:	4b39      	ldr	r3, [pc, #228]	; (123b4 <hci_evt_encode+0x3a8>)
   122d0:	685b      	ldr	r3, [r3, #4]
   122d2:	0418      	lsls	r0, r3, #16
   122d4:	f04f 0400 	mov.w	r4, #0
   122d8:	f57f aee1 	bpl.w	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   122dc:	3508      	adds	r5, #8
   122de:	2102      	movs	r1, #2
   122e0:	4628      	mov	r0, r5
   122e2:	f013 f8d2 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   122e6:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   122e8:	2103      	movs	r1, #3
	hdr->evt = evt;
   122ea:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   122ec:	7041      	strb	r1, [r0, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   122ee:	4628      	mov	r0, r5
   122f0:	f013 f8cb 	bl	2548a <net_buf_simple_add>
	ep->status = 0x00;
   122f4:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   122f6:	f8a0 6001 	strh.w	r6, [r0, #1]
   122fa:	e6d0      	b.n	1209e <hci_evt_encode+0x92>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   122fc:	460a      	mov	r2, r1
   122fe:	4631      	mov	r1, r6
}
   12300:	b00b      	add	sp, #44	; 0x2c
   12302:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   12306:	f7ff be1f 	b.w	11f48 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1230a:	4b2a      	ldr	r3, [pc, #168]	; (123b4 <hci_evt_encode+0x3a8>)
   1230c:	685b      	ldr	r3, [r3, #4]
   1230e:	009b      	lsls	r3, r3, #2
   12310:	f57f aec5 	bpl.w	1209e <hci_evt_encode+0x92>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   12314:	4b28      	ldr	r3, [pc, #160]	; (123b8 <hci_evt_encode+0x3ac>)
   12316:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12318:	075f      	lsls	r7, r3, #29
   1231a:	f57f aec0 	bpl.w	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1231e:	3508      	adds	r5, #8
   12320:	2102      	movs	r1, #2
   12322:	4628      	mov	r0, r5
   12324:	f013 f8b1 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   12328:	233e      	movs	r3, #62	; 0x3e
   1232a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1232c:	230a      	movs	r3, #10
   1232e:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   12330:	2101      	movs	r1, #1
   12332:	4628      	mov	r0, r5
   12334:	f013 f8a9 	bl	2548a <net_buf_simple_add>
	me->subevent = subevt;
   12338:	2303      	movs	r3, #3
   1233a:	7003      	strb	r3, [r0, #0]
	return net_buf_add(buf, melen);
   1233c:	2109      	movs	r1, #9
   1233e:	4628      	mov	r0, r5
   12340:	f013 f8a3 	bl	2548a <net_buf_simple_add>
	sep->status = cu->status;
   12344:	7f23      	ldrb	r3, [r4, #28]
   12346:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12348:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1234a:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1234c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1234e:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   12352:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12356:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1235a:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1235e:	e69e      	b.n	1209e <hci_evt_encode+0x92>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12360:	4b14      	ldr	r3, [pc, #80]	; (123b4 <hci_evt_encode+0x3a8>)
   12362:	685b      	ldr	r3, [r3, #4]
   12364:	009a      	lsls	r2, r3, #2
   12366:	f57f ae9a 	bpl.w	1209e <hci_evt_encode+0x92>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   1236a:	4b13      	ldr	r3, [pc, #76]	; (123b8 <hci_evt_encode+0x3ac>)
   1236c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1236e:	031b      	lsls	r3, r3, #12
   12370:	f57f ae95 	bpl.w	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12374:	3508      	adds	r5, #8
   12376:	2102      	movs	r1, #2
   12378:	4628      	mov	r0, r5
   1237a:	f013 f886 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   1237e:	233e      	movs	r3, #62	; 0x3e
   12380:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12382:	2304      	movs	r3, #4
   12384:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   12386:	2101      	movs	r1, #1
   12388:	4628      	mov	r0, r5
   1238a:	f013 f87e 	bl	2548a <net_buf_simple_add>
	me->subevent = subevt;
   1238e:	2314      	movs	r3, #20
   12390:	7003      	strb	r3, [r0, #0]
	return net_buf_add(buf, melen);
   12392:	2103      	movs	r1, #3
   12394:	4628      	mov	r0, r5
   12396:	f013 f878 	bl	2548a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1239a:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   1239c:	7f23      	ldrb	r3, [r4, #28]
   1239e:	7083      	strb	r3, [r0, #2]
   123a0:	e67d      	b.n	1209e <hci_evt_encode+0x92>
   123a2:	bf00      	nop
   123a4:	00027470 	.word	0x00027470
   123a8:	00027358 	.word	0x00027358
   123ac:	000272c0 	.word	0x000272c0
   123b0:	00026a40 	.word	0x00026a40
   123b4:	20000128 	.word	0x20000128
   123b8:	20000130 	.word	0x20000130
   123bc:	20001e74 	.word	0x20001e74
   123c0:	20001e7e 	.word	0x20001e7e
   123c4:	20001e78 	.word	0x20001e78
   123c8:	20001e7c 	.word	0x20001e7c
   123cc:	20001e70 	.word	0x20001e70
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   123d0:	4bc0      	ldr	r3, [pc, #768]	; (126d4 <hci_evt_encode+0x6c8>)
   123d2:	685b      	ldr	r3, [r3, #4]
   123d4:	009f      	lsls	r7, r3, #2
   123d6:	d503      	bpl.n	123e0 <hci_evt_encode+0x3d4>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   123d8:	4bbf      	ldr	r3, [pc, #764]	; (126d8 <hci_evt_encode+0x6cc>)
   123da:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   123dc:	0518      	lsls	r0, r3, #20
   123de:	d46f      	bmi.n	124c0 <hci_evt_encode+0x4b4>
   123e0:	7f62      	ldrb	r2, [r4, #29]
   123e2:	7fa0      	ldrb	r0, [r4, #30]
   123e4:	49bd      	ldr	r1, [pc, #756]	; (126dc <hci_evt_encode+0x6d0>)
   123e6:	4bbe      	ldr	r3, [pc, #760]	; (126e0 <hci_evt_encode+0x6d4>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   123e8:	7f24      	ldrb	r4, [r4, #28]
   123ea:	2a00      	cmp	r2, #0
   123ec:	fa92 f2a2 	rbit	r2, r2
   123f0:	fab2 f282 	clz	r2, r2
   123f4:	eba3 0301 	sub.w	r3, r3, r1
   123f8:	bf08      	it	eq
   123fa:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   123fe:	2800      	cmp	r0, #0
   12400:	fa90 f0a0 	rbit	r0, r0
   12404:	fab0 f080 	clz	r0, r0
   12408:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   1240c:	bf08      	it	eq
   1240e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   12412:	1c51      	adds	r1, r2, #1
   12414:	3001      	adds	r0, #1
   12416:	019b      	lsls	r3, r3, #6
   12418:	9009      	str	r0, [sp, #36]	; 0x24
   1241a:	9108      	str	r1, [sp, #32]
   1241c:	48b1      	ldr	r0, [pc, #708]	; (126e4 <hci_evt_encode+0x6d8>)
   1241e:	f043 0302 	orr.w	r3, r3, #2
   12422:	2204      	movs	r2, #4
   12424:	a906      	add	r1, sp, #24
   12426:	e9cd 6406 	strd	r6, r4, [sp, #24]
   1242a:	f00e fe87 	bl	2113c <log_n>
		return;
   1242e:	e636      	b.n	1209e <hci_evt_encode+0x92>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   12430:	4bad      	ldr	r3, [pc, #692]	; (126e8 <hci_evt_encode+0x6dc>)
   12432:	681b      	ldr	r3, [r3, #0]
   12434:	0219      	lsls	r1, r3, #8
   12436:	f57f ae32 	bpl.w	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1243a:	3508      	adds	r5, #8
   1243c:	2102      	movs	r1, #2
   1243e:	4628      	mov	r0, r5
   12440:	f013 f823 	bl	2548a <net_buf_simple_add>
	hdr->len = len;
   12444:	2102      	movs	r1, #2
	hdr->evt = evt;
   12446:	2357      	movs	r3, #87	; 0x57
   12448:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1244a:	7041      	strb	r1, [r0, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   1244c:	4628      	mov	r0, r5
   1244e:	f013 f81c 	bl	2548a <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   12452:	8006      	strh	r6, [r0, #0]
   12454:	e623      	b.n	1209e <hci_evt_encode+0x92>
		LL_ASSERT(0);
   12456:	4aa5      	ldr	r2, [pc, #660]	; (126ec <hci_evt_encode+0x6e0>)
   12458:	49a5      	ldr	r1, [pc, #660]	; (126f0 <hci_evt_encode+0x6e4>)
   1245a:	48a6      	ldr	r0, [pc, #664]	; (126f4 <hci_evt_encode+0x6e8>)
   1245c:	f241 131b 	movw	r3, #4379	; 0x111b
   12460:	f00e fabd 	bl	209de <printk>
   12464:	4040      	eors	r0, r0
   12466:	f380 8811 	msr	BASEPRI, r0
   1246a:	f04f 0003 	mov.w	r0, #3
   1246e:	df02      	svc	2
}
   12470:	e615      	b.n	1209e <hci_evt_encode+0x92>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12472:	4b98      	ldr	r3, [pc, #608]	; (126d4 <hci_evt_encode+0x6c8>)
   12474:	685b      	ldr	r3, [r3, #4]
   12476:	009a      	lsls	r2, r3, #2
   12478:	f57f ae11 	bpl.w	1209e <hci_evt_encode+0x92>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   1247c:	4b96      	ldr	r3, [pc, #600]	; (126d8 <hci_evt_encode+0x6cc>)
   1247e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12480:	065b      	lsls	r3, r3, #25
   12482:	f57f ae0c 	bpl.w	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12486:	3508      	adds	r5, #8
   12488:	2102      	movs	r1, #2
   1248a:	4628      	mov	r0, r5
   1248c:	f012 fffd 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   12490:	233e      	movs	r3, #62	; 0x3e
   12492:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12494:	230b      	movs	r3, #11
   12496:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   12498:	2101      	movs	r1, #1
   1249a:	4628      	mov	r0, r5
   1249c:	f012 fff5 	bl	2548a <net_buf_simple_add>
	me->subevent = subevt;
   124a0:	2307      	movs	r3, #7
   124a2:	7003      	strb	r3, [r0, #0]
	return net_buf_add(buf, melen);
   124a4:	210a      	movs	r1, #10
   124a6:	4628      	mov	r0, r5
   124a8:	f012 ffef 	bl	2548a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   124ac:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   124ae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   124b0:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   124b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   124b4:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   124b6:	8c23      	ldrh	r3, [r4, #32]
   124b8:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   124ba:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   124bc:	8103      	strh	r3, [r0, #8]
   124be:	e5ee      	b.n	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   124c0:	3508      	adds	r5, #8
   124c2:	2102      	movs	r1, #2
   124c4:	4628      	mov	r0, r5
   124c6:	f012 ffe0 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   124ca:	233e      	movs	r3, #62	; 0x3e
   124cc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   124ce:	2306      	movs	r3, #6
   124d0:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   124d2:	2101      	movs	r1, #1
   124d4:	4628      	mov	r0, r5
   124d6:	f012 ffd8 	bl	2548a <net_buf_simple_add>
	me->subevent = subevt;
   124da:	230c      	movs	r3, #12
   124dc:	7003      	strb	r3, [r0, #0]
	return net_buf_add(buf, melen);
   124de:	2105      	movs	r1, #5
   124e0:	4628      	mov	r0, r5
   124e2:	f012 ffd2 	bl	2548a <net_buf_simple_add>
	sep->status = pu->status;
   124e6:	7f23      	ldrb	r3, [r4, #28]
   124e8:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   124ea:	f8a0 6001 	strh.w	r6, [r0, #1]
   124ee:	7f62      	ldrb	r2, [r4, #29]
   124f0:	2a00      	cmp	r2, #0
   124f2:	fa92 f3a2 	rbit	r3, r2
   124f6:	fab3 f383 	clz	r3, r3
   124fa:	bf08      	it	eq
   124fc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12500:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   12502:	70c3      	strb	r3, [r0, #3]
   12504:	7fa2      	ldrb	r2, [r4, #30]
   12506:	fa92 f3a2 	rbit	r3, r2
   1250a:	2a00      	cmp	r2, #0
   1250c:	fab3 f383 	clz	r3, r3
   12510:	bf08      	it	eq
   12512:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12516:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   12518:	7103      	strb	r3, [r0, #4]
   1251a:	e5c0      	b.n	1209e <hci_evt_encode+0x92>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1251c:	4b6d      	ldr	r3, [pc, #436]	; (126d4 <hci_evt_encode+0x6c8>)
   1251e:	685b      	ldr	r3, [r3, #4]
   12520:	0099      	lsls	r1, r3, #2
   12522:	f57f adbc 	bpl.w	1209e <hci_evt_encode+0x92>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   12526:	4b6c      	ldr	r3, [pc, #432]	; (126d8 <hci_evt_encode+0x6cc>)
   12528:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1252a:	06da      	lsls	r2, r3, #27
   1252c:	f57f adb7 	bpl.w	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12530:	3508      	adds	r5, #8
   12532:	2102      	movs	r1, #2
   12534:	4628      	mov	r0, r5
   12536:	f012 ffa8 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   1253a:	233e      	movs	r3, #62	; 0x3e
   1253c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1253e:	230d      	movs	r3, #13
   12540:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   12542:	2101      	movs	r1, #1
   12544:	4628      	mov	r0, r5
   12546:	f012 ffa0 	bl	2548a <net_buf_simple_add>
	me->subevent = subevt;
   1254a:	2305      	movs	r3, #5
   1254c:	7003      	strb	r3, [r0, #0]
	return net_buf_add(buf, melen);
   1254e:	210c      	movs	r1, #12
   12550:	4628      	mov	r0, r5
   12552:	f012 ff9a 	bl	2548a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   12556:	4603      	mov	r3, r0
   12558:	f823 6b02 	strh.w	r6, [r3], #2
   1255c:	6a21      	ldr	r1, [r4, #32]
   1255e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12560:	f8c0 1002 	str.w	r1, [r0, #2]
   12564:	605a      	str	r2, [r3, #4]
   12566:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   12568:	8143      	strh	r3, [r0, #10]
   1256a:	e598      	b.n	1209e <hci_evt_encode+0x92>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1256c:	4b59      	ldr	r3, [pc, #356]	; (126d4 <hci_evt_encode+0x6c8>)
   1256e:	685b      	ldr	r3, [r3, #4]
   12570:	0098      	lsls	r0, r3, #2
   12572:	f140 8081 	bpl.w	12678 <hci_evt_encode+0x66c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   12576:	4b58      	ldr	r3, [pc, #352]	; (126d8 <hci_evt_encode+0x6cc>)
   12578:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1257a:	0699      	lsls	r1, r3, #26
   1257c:	d57c      	bpl.n	12678 <hci_evt_encode+0x66c>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1257e:	3508      	adds	r5, #8
   12580:	2102      	movs	r1, #2
   12582:	4628      	mov	r0, r5
   12584:	f012 ff81 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   12588:	233e      	movs	r3, #62	; 0x3e
   1258a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1258c:	230b      	movs	r3, #11
   1258e:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   12590:	2101      	movs	r1, #1
   12592:	4628      	mov	r0, r5
   12594:	f012 ff79 	bl	2548a <net_buf_simple_add>
	me->subevent = subevt;
   12598:	2306      	movs	r3, #6
   1259a:	7003      	strb	r3, [r0, #0]
	return net_buf_add(buf, melen);
   1259c:	210a      	movs	r1, #10
   1259e:	4628      	mov	r0, r5
   125a0:	f012 ff73 	bl	2548a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   125a4:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   125a6:	8c23      	ldrh	r3, [r4, #32]
   125a8:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   125aa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   125ac:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   125ae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   125b0:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   125b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   125b4:	8103      	strh	r3, [r0, #8]
   125b6:	e572      	b.n	1209e <hci_evt_encode+0x92>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   125b8:	460b      	mov	r3, r1
   125ba:	4632      	mov	r2, r6
   125bc:	4601      	mov	r1, r0
   125be:	2000      	movs	r0, #0
}
   125c0:	b00b      	add	sp, #44	; 0x2c
   125c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   125c6:	f7fe bdc7 	b.w	11158 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   125ca:	4b42      	ldr	r3, [pc, #264]	; (126d4 <hci_evt_encode+0x6c8>)
   125cc:	681b      	ldr	r3, [r3, #0]
   125ce:	061b      	lsls	r3, r3, #24
   125d0:	f04f 0400 	mov.w	r4, #0
   125d4:	f57f ad63 	bpl.w	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   125d8:	3508      	adds	r5, #8
   125da:	2102      	movs	r1, #2
   125dc:	4628      	mov	r0, r5
   125de:	f012 ff54 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   125e2:	2308      	movs	r3, #8
	hdr->len = len;
   125e4:	2104      	movs	r1, #4
	hdr->evt = evt;
   125e6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   125e8:	7041      	strb	r1, [r0, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   125ea:	4628      	mov	r0, r5
   125ec:	f012 ff4d 	bl	2548a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   125f0:	2301      	movs	r3, #1
	ep->status = err;
   125f2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   125f4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   125f8:	70c3      	strb	r3, [r0, #3]
   125fa:	e550      	b.n	1209e <hci_evt_encode+0x92>
		le_unknown_rsp(pdu_data, handle, buf);
   125fc:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   12600:	290e      	cmp	r1, #14
   12602:	f000 8113 	beq.w	1282c <hci_evt_encode+0x820>
   12606:	4b35      	ldr	r3, [pc, #212]	; (126dc <hci_evt_encode+0x6d0>)
   12608:	4a35      	ldr	r2, [pc, #212]	; (126e0 <hci_evt_encode+0x6d4>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1260a:	483b      	ldr	r0, [pc, #236]	; (126f8 <hci_evt_encode+0x6ec>)
   1260c:	1ad2      	subs	r2, r2, r3
   1260e:	08d2      	lsrs	r2, r2, #3
   12610:	0192      	lsls	r2, r2, #6
   12612:	f042 0202 	orr.w	r2, r2, #2
}
   12616:	b00b      	add	sp, #44	; 0x2c
   12618:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1261c:	f00e bd45 	b.w	210aa <log_1>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   12620:	4b2c      	ldr	r3, [pc, #176]	; (126d4 <hci_evt_encode+0x6c8>)
   12622:	681b      	ldr	r3, [r3, #0]
   12624:	061f      	lsls	r7, r3, #24
   12626:	f57f ad3a 	bpl.w	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1262a:	3508      	adds	r5, #8
   1262c:	2102      	movs	r1, #2
   1262e:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   12630:	f894 4020 	ldrb.w	r4, [r4, #32]
	hdr = net_buf_add(buf, sizeof(*hdr));
   12634:	f012 ff29 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   12638:	2308      	movs	r3, #8
	hdr->len = len;
   1263a:	2104      	movs	r1, #4
	hdr->evt = evt;
   1263c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1263e:	7041      	strb	r1, [r0, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12640:	4628      	mov	r0, r5
   12642:	f012 ff22 	bl	2548a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   12646:	fab4 f384 	clz	r3, r4
   1264a:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   1264c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1264e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   12652:	70c3      	strb	r3, [r0, #3]
   12654:	e523      	b.n	1209e <hci_evt_encode+0x92>
		ll_rl_crpa_set(node_rx->peer_addr_type,
   12656:	7fa0      	ldrb	r0, [r4, #30]
   12658:	f104 0325 	add.w	r3, r4, #37	; 0x25
   1265c:	22ff      	movs	r2, #255	; 0xff
   1265e:	f104 011f 	add.w	r1, r4, #31
   12662:	f006 fbd9 	bl	18e18 <ll_rl_crpa_set>
   12666:	e5d9      	b.n	1221c <hci_evt_encode+0x210>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   12668:	2100      	movs	r1, #0
   1266a:	f104 031e 	add.w	r3, r4, #30
   1266e:	465a      	mov	r2, fp
   12670:	4608      	mov	r0, r1
   12672:	f006 fbd1 	bl	18e18 <ll_rl_crpa_set>
   12676:	e52b      	b.n	120d0 <hci_evt_encode+0xc4>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   12678:	2300      	movs	r3, #0
   1267a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1267e:	9300      	str	r3, [sp, #0]
   12680:	221a      	movs	r2, #26
   12682:	2102      	movs	r1, #2
   12684:	4630      	mov	r0, r6
   12686:	f002 fedd 	bl	15444 <ll_conn_update>
		return;
   1268a:	e508      	b.n	1209e <hci_evt_encode+0x92>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1268c:	f1b8 0f00 	cmp.w	r8, #0
   12690:	f040 8103 	bne.w	1289a <hci_evt_encode+0x88e>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12694:	3508      	adds	r5, #8
   12696:	2102      	movs	r1, #2
   12698:	4628      	mov	r0, r5
   1269a:	f012 fef6 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   1269e:	233e      	movs	r3, #62	; 0x3e
   126a0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   126a2:	2313      	movs	r3, #19
   126a4:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   126a6:	2101      	movs	r1, #1
   126a8:	4628      	mov	r0, r5
   126aa:	f012 feee 	bl	2548a <net_buf_simple_add>
	me->subevent = subevt;
   126ae:	2301      	movs	r3, #1
   126b0:	7003      	strb	r3, [r0, #0]
	return net_buf_add(buf, melen);
   126b2:	2112      	movs	r1, #18
   126b4:	4628      	mov	r0, r5
   126b6:	f012 fee8 	bl	2548a <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   126ba:	f8c0 8000 	str.w	r8, [r0]
   126be:	f8c0 8004 	str.w	r8, [r0, #4]
   126c2:	f8c0 8008 	str.w	r8, [r0, #8]
   126c6:	f8c0 800c 	str.w	r8, [r0, #12]
   126ca:	f8a0 8010 	strh.w	r8, [r0, #16]
		lecc->status = status;
   126ce:	7007      	strb	r7, [r0, #0]
		return;
   126d0:	e4e5      	b.n	1209e <hci_evt_encode+0x92>
   126d2:	bf00      	nop
   126d4:	20000128 	.word	0x20000128
   126d8:	20000130 	.word	0x20000130
   126dc:	00026828 	.word	0x00026828
   126e0:	00026870 	.word	0x00026870
   126e4:	000274d4 	.word	0x000274d4
   126e8:	20001768 	.word	0x20001768
   126ec:	00027470 	.word	0x00027470
   126f0:	00027358 	.word	0x00027358
   126f4:	000272c0 	.word	0x000272c0
   126f8:	00027500 	.word	0x00027500
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   126fc:	009e      	lsls	r6, r3, #2
   126fe:	f57f acce 	bpl.w	1209e <hci_evt_encode+0x92>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   12702:	4bb1      	ldr	r3, [pc, #708]	; (129c8 <hci_evt_encode+0x9bc>)
   12704:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12706:	0558      	lsls	r0, r3, #21
   12708:	f57f acc9 	bpl.w	1209e <hci_evt_encode+0x92>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1270c:	7f23      	ldrb	r3, [r4, #28]
   1270e:	f003 030f 	and.w	r3, r3, #15
   12712:	2b01      	cmp	r3, #1
   12714:	d00c      	beq.n	12730 <hci_evt_encode+0x724>
   12716:	4aad      	ldr	r2, [pc, #692]	; (129cc <hci_evt_encode+0x9c0>)
   12718:	49ad      	ldr	r1, [pc, #692]	; (129d0 <hci_evt_encode+0x9c4>)
   1271a:	48ae      	ldr	r0, [pc, #696]	; (129d4 <hci_evt_encode+0x9c8>)
   1271c:	f640 33dd 	movw	r3, #3037	; 0xbdd
   12720:	f00e f95d 	bl	209de <printk>
   12724:	4040      	eors	r0, r0
   12726:	f380 8811 	msr	BASEPRI, r0
   1272a:	f04f 0003 	mov.w	r0, #3
   1272e:	df02      	svc	2
	if (dup_count >= 0) {
   12730:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 129d8 <hci_evt_encode+0x9cc>
   12734:	f8d8 3000 	ldr.w	r3, [r8]
   12738:	2b00      	cmp	r3, #0
   1273a:	db43      	blt.n	127c4 <hci_evt_encode+0x7b8>
		for (i = 0; i < dup_count; i++) {
   1273c:	f000 810b 	beq.w	12956 <hci_evt_encode+0x94a>
   12740:	4ea6      	ldr	r6, [pc, #664]	; (129dc <hci_evt_encode+0x9d0>)
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   12742:	f104 0a1e 	add.w	sl, r4, #30
		for (i = 0; i < dup_count; i++) {
   12746:	f04f 0900 	mov.w	r9, #0
			if (!memcmp(&adv->adv_ind.addr[0],
   1274a:	4631      	mov	r1, r6
   1274c:	2206      	movs	r2, #6
   1274e:	4650      	mov	r0, sl
   12750:	f013 fd91 	bl	26276 <memcmp>
   12754:	b938      	cbnz	r0, 12766 <hci_evt_encode+0x75a>
			    adv->tx_addr == dup_filter[i].addr.type) {
   12756:	7f23      	ldrb	r3, [r4, #28]
   12758:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1275c:	f3c3 1180 	ubfx	r1, r3, #6, #1
				    sizeof(bt_addr_t)) &&
   12760:	4291      	cmp	r1, r2
   12762:	f000 8117 	beq.w	12994 <hci_evt_encode+0x988>
		for (i = 0; i < dup_count; i++) {
   12766:	f8d8 3000 	ldr.w	r3, [r8]
   1276a:	f109 0901 	add.w	r9, r9, #1
   1276e:	4599      	cmp	r9, r3
   12770:	f106 0608 	add.w	r6, r6, #8
   12774:	dbe9      	blt.n	1274a <hci_evt_encode+0x73e>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   12776:	499a      	ldr	r1, [pc, #616]	; (129e0 <hci_evt_encode+0x9d4>)
   12778:	489a      	ldr	r0, [pc, #616]	; (129e4 <hci_evt_encode+0x9d8>)
   1277a:	680a      	ldr	r2, [r1, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1277c:	f8d4 e01e 	ldr.w	lr, [r4, #30]
   12780:	00d6      	lsls	r6, r2, #3
   12782:	f106 0c02 	add.w	ip, r6, #2
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12786:	4406      	add	r6, r0
   12788:	f840 e00c 	str.w	lr, [r0, ip]
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   1278c:	4484      	add	ip, r0
   1278e:	f8ba e004 	ldrh.w	lr, [sl, #4]
   12792:	f8ac e004 	strh.w	lr, [ip, #4]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12796:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1279a:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1279e:	f886 c001 	strb.w	ip, [r6, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   127a2:	7f26      	ldrb	r6, [r4, #28]
   127a4:	f006 0c0f 	and.w	ip, r6, #15
   127a8:	2601      	movs	r6, #1
   127aa:	fa06 f60c 	lsl.w	r6, r6, ip
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   127ae:	2b0f      	cmp	r3, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   127b0:	f800 6032 	strb.w	r6, [r0, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   127b4:	f340 80e9 	ble.w	1298a <hci_evt_encode+0x97e>
			dup_curr++;
   127b8:	1c53      	adds	r3, r2, #1
   127ba:	600b      	str	r3, [r1, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   127bc:	2b10      	cmp	r3, #16
			dup_curr = 0U;
   127be:	bf04      	itt	eq
   127c0:	2300      	moveq	r3, #0
   127c2:	600b      	streq	r3, [r1, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   127c4:	3508      	adds	r5, #8
   127c6:	2102      	movs	r1, #2
   127c8:	4628      	mov	r0, r5
   127ca:	f012 fe5e 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   127ce:	233e      	movs	r3, #62	; 0x3e
   127d0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   127d2:	2312      	movs	r3, #18
   127d4:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   127d6:	2101      	movs	r1, #1
   127d8:	4628      	mov	r0, r5
   127da:	f012 fe56 	bl	2548a <net_buf_simple_add>
   127de:	4603      	mov	r3, r0
	me->subevent = subevt;
   127e0:	220b      	movs	r2, #11
   127e2:	701a      	strb	r2, [r3, #0]
	return net_buf_add(buf, melen);
   127e4:	4628      	mov	r0, r5
   127e6:	2111      	movs	r1, #17
   127e8:	f012 fe4f 	bl	2548a <net_buf_simple_add>
	drp->num_reports = 1U;
   127ec:	2301      	movs	r3, #1
   127ee:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   127f0:	7043      	strb	r3, [r0, #1]
	return net_buf_add(buf, melen);
   127f2:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   127f4:	f006 fa20 	bl	18c38 <ll_rl_size_get>
   127f8:	4583      	cmp	fp, r0
   127fa:	f0c0 80dc 	bcc.w	129b6 <hci_evt_encode+0x9aa>
		dir_info->addr.type = adv->tx_addr;
   127fe:	7f23      	ldrb	r3, [r4, #28]
   12800:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12804:	70ab      	strb	r3, [r5, #2]
   12806:	f8d4 301e 	ldr.w	r3, [r4, #30]
   1280a:	f8c5 3003 	str.w	r3, [r5, #3]
   1280e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12810:	f8a5 3007 	strh.w	r3, [r5, #7]
	dir_info->dir_addr.type = adv->rx_addr;
   12814:	7f23      	ldrb	r3, [r4, #28]
   12816:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   1281a:	726b      	strb	r3, [r5, #9]
   1281c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1281e:	f8c5 300a 	str.w	r3, [r5, #10]
   12822:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   12824:	81eb      	strh	r3, [r5, #14]
	dir_info->rssi = rssi;
   12826:	9b05      	ldr	r3, [sp, #20]
   12828:	742b      	strb	r3, [r5, #16]
   1282a:	e438      	b.n	1209e <hci_evt_encode+0x92>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1282c:	462b      	mov	r3, r5
   1282e:	4632      	mov	r2, r6
   12830:	2100      	movs	r1, #0
   12832:	201a      	movs	r0, #26
   12834:	e6c4      	b.n	125c0 <hci_evt_encode+0x5b4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12836:	3508      	adds	r5, #8
   12838:	2102      	movs	r1, #2
   1283a:	4628      	mov	r0, r5
   1283c:	f012 fe25 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   12840:	233e      	movs	r3, #62	; 0x3e
   12842:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12844:	2313      	movs	r3, #19
   12846:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   12848:	2101      	movs	r1, #1
   1284a:	4628      	mov	r0, r5
   1284c:	f012 fe1d 	bl	2548a <net_buf_simple_add>
   12850:	4603      	mov	r3, r0
	me->subevent = subevt;
   12852:	2201      	movs	r2, #1
   12854:	701a      	strb	r2, [r3, #0]
	return net_buf_add(buf, melen);
   12856:	2112      	movs	r1, #18
   12858:	4628      	mov	r0, r5
   1285a:	f012 fe16 	bl	2548a <net_buf_simple_add>
	lecc->status = 0x00;
   1285e:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   12860:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = node_rx->role;
   12864:	7f63      	ldrb	r3, [r4, #29]
   12866:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   12868:	7fa3      	ldrb	r3, [r4, #30]
   1286a:	f003 0301 	and.w	r3, r3, #1
   1286e:	7103      	strb	r3, [r0, #4]
   12870:	f8d4 301f 	ldr.w	r3, [r4, #31]
   12874:	f8c0 3005 	str.w	r3, [r0, #5]
   12878:	f8b4 3023 	ldrh.w	r3, [r4, #35]	; 0x23
   1287c:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   12880:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   12882:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   12884:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12886:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   1288a:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   1288e:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = node_rx->sca;
   12892:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12896:	7443      	strb	r3, [r0, #17]
   12898:	e401      	b.n	1209e <hci_evt_encode+0x92>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1289a:	3508      	adds	r5, #8
   1289c:	2102      	movs	r1, #2
   1289e:	4628      	mov	r0, r5
   128a0:	f012 fdf3 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   128a4:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   128a6:	231f      	movs	r3, #31
	hdr->evt = evt;
   128a8:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   128aa:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   128ac:	2101      	movs	r1, #1
   128ae:	4628      	mov	r0, r5
   128b0:	f012 fdeb 	bl	2548a <net_buf_simple_add>
	me->subevent = subevt;
   128b4:	230a      	movs	r3, #10
   128b6:	7003      	strb	r3, [r0, #0]
	return net_buf_add(buf, melen);
   128b8:	211e      	movs	r1, #30
   128ba:	4628      	mov	r0, r5
   128bc:	f012 fde5 	bl	2548a <net_buf_simple_add>
   128c0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   128c2:	221e      	movs	r2, #30
   128c4:	2100      	movs	r1, #0
   128c6:	f013 fcf4 	bl	262b2 <memset>
			leecc->status = status;
   128ca:	7027      	strb	r7, [r4, #0]
			return;
   128cc:	f7ff bbe7 	b.w	1209e <hci_evt_encode+0x92>
   128d0:	f04f 080b 	mov.w	r8, #11
   128d4:	f04f 0a0c 	mov.w	sl, #12
   128d8:	2600      	movs	r6, #0
   128da:	e460      	b.n	1219e <hci_evt_encode+0x192>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   128dc:	4658      	mov	r0, fp
   128de:	1cea      	adds	r2, r5, #3
   128e0:	1ca9      	adds	r1, r5, #2
   128e2:	f006 f963 	bl	18bac <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   128e6:	78ab      	ldrb	r3, [r5, #2]
   128e8:	3302      	adds	r3, #2
   128ea:	70ab      	strb	r3, [r5, #2]
   128ec:	e486      	b.n	121fc <hci_evt_encode+0x1f0>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   128ee:	493c      	ldr	r1, [pc, #240]	; (129e0 <hci_evt_encode+0x9d4>)
   128f0:	4b3c      	ldr	r3, [pc, #240]	; (129e4 <hci_evt_encode+0x9d8>)
   128f2:	680e      	ldr	r6, [r1, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   128f4:	f8d4 e01e 	ldr.w	lr, [r4, #30]
   128f8:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
   128fc:	f10c 0002 	add.w	r0, ip, #2
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12900:	449c      	add	ip, r3
   12902:	f843 e000 	str.w	lr, [r3, r0]
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   12906:	4418      	add	r0, r3
   12908:	f8b4 e022 	ldrh.w	lr, [r4, #34]	; 0x22
   1290c:	f8a0 e004 	strh.w	lr, [r0, #4]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12910:	7f20      	ldrb	r0, [r4, #28]
   12912:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12916:	f88c 0001 	strb.w	r0, [ip, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   1291a:	7f20      	ldrb	r0, [r4, #28]
   1291c:	f000 0c0f 	and.w	ip, r0, #15
   12920:	2001      	movs	r0, #1
   12922:	fa00 f00c 	lsl.w	r0, r0, ip
   12926:	f803 0036 	strb.w	r0, [r3, r6, lsl #3]
			dup_count++;
   1292a:	1c53      	adds	r3, r2, #1
   1292c:	f8c8 3000 	str.w	r3, [r8]
			dup_curr = dup_count;
   12930:	600b      	str	r3, [r1, #0]
   12932:	e41d      	b.n	12170 <hci_evt_encode+0x164>
				if (dup_filter[i].mask & BIT(adv->type)) {
   12934:	482b      	ldr	r0, [pc, #172]	; (129e4 <hci_evt_encode+0x9d8>)
   12936:	f810 1037 	ldrb.w	r1, [r0, r7, lsl #3]
   1293a:	f002 020f 	and.w	r2, r2, #15
   1293e:	fa21 f602 	lsr.w	r6, r1, r2
   12942:	07f6      	lsls	r6, r6, #31
   12944:	f53f abab 	bmi.w	1209e <hci_evt_encode+0x92>
				dup_filter[i].mask |= BIT(adv->type);
   12948:	2601      	movs	r6, #1
   1294a:	fa06 f202 	lsl.w	r2, r6, r2
   1294e:	4311      	orrs	r1, r2
   12950:	f800 1037 	strb.w	r1, [r0, r7, lsl #3]
				return false;
   12954:	e410      	b.n	12178 <hci_evt_encode+0x16c>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   12956:	4922      	ldr	r1, [pc, #136]	; (129e0 <hci_evt_encode+0x9d4>)
   12958:	4a22      	ldr	r2, [pc, #136]	; (129e4 <hci_evt_encode+0x9d8>)
   1295a:	680f      	ldr	r7, [r1, #0]
   1295c:	f8d4 e01e 	ldr.w	lr, [r4, #30]
   12960:	00f8      	lsls	r0, r7, #3
   12962:	1c86      	adds	r6, r0, #2
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12964:	4410      	add	r0, r2
   12966:	f842 e006 	str.w	lr, [r2, r6]
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   1296a:	4416      	add	r6, r2
   1296c:	f8b4 e022 	ldrh.w	lr, [r4, #34]	; 0x22
   12970:	f8a6 e004 	strh.w	lr, [r6, #4]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   12974:	7f26      	ldrb	r6, [r4, #28]
   12976:	f3c6 1680 	ubfx	r6, r6, #6, #1
   1297a:	7046      	strb	r6, [r0, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   1297c:	7f20      	ldrb	r0, [r4, #28]
   1297e:	f000 060f 	and.w	r6, r0, #15
   12982:	2001      	movs	r0, #1
   12984:	40b0      	lsls	r0, r6
   12986:	f802 0037 	strb.w	r0, [r2, r7, lsl #3]
			dup_count++;
   1298a:	3301      	adds	r3, #1
   1298c:	f8c8 3000 	str.w	r3, [r8]
			dup_curr = dup_count;
   12990:	600b      	str	r3, [r1, #0]
   12992:	e713      	b.n	127bc <hci_evt_encode+0x7b0>
				if (dup_filter[i].mask & BIT(adv->type)) {
   12994:	4813      	ldr	r0, [pc, #76]	; (129e4 <hci_evt_encode+0x9d8>)
   12996:	f810 2039 	ldrb.w	r2, [r0, r9, lsl #3]
   1299a:	f003 030f 	and.w	r3, r3, #15
   1299e:	fa22 f103 	lsr.w	r1, r2, r3
   129a2:	07c9      	lsls	r1, r1, #31
   129a4:	f53f ab7b 	bmi.w	1209e <hci_evt_encode+0x92>
				dup_filter[i].mask |= BIT(adv->type);
   129a8:	2101      	movs	r1, #1
   129aa:	fa01 f303 	lsl.w	r3, r1, r3
   129ae:	431a      	orrs	r2, r3
   129b0:	f800 2039 	strb.w	r2, [r0, r9, lsl #3]
				return false;
   129b4:	e706      	b.n	127c4 <hci_evt_encode+0x7b8>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   129b6:	1cea      	adds	r2, r5, #3
   129b8:	4658      	mov	r0, fp
   129ba:	1ca9      	adds	r1, r5, #2
   129bc:	f006 f8f6 	bl	18bac <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   129c0:	78ab      	ldrb	r3, [r5, #2]
   129c2:	3302      	adds	r3, #2
   129c4:	70ab      	strb	r3, [r5, #2]
   129c6:	e725      	b.n	12814 <hci_evt_encode+0x808>
   129c8:	20000130 	.word	0x20000130
   129cc:	00027470 	.word	0x00027470
   129d0:	000274ac 	.word	0x000274ac
   129d4:	000272c0 	.word	0x000272c0
   129d8:	20001e74 	.word	0x20001e74
   129dc:	20001e7e 	.word	0x20001e7e
   129e0:	20001e78 	.word	0x20001e78
   129e4:	20001e7c 	.word	0x20001e7c

000129e8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   129e8:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   129ea:	f100 0408 	add.w	r4, r0, #8
{
   129ee:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   129f0:	4620      	mov	r0, r4
   129f2:	2102      	movs	r1, #2
{
   129f4:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   129f6:	f012 fd48 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   129fa:	2313      	movs	r3, #19
	hdr->len = len;
   129fc:	2105      	movs	r1, #5
	hdr->evt = evt;
   129fe:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12a00:	7041      	strb	r1, [r0, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   12a02:	4620      	mov	r0, r4
   12a04:	f012 fd41 	bl	2548a <net_buf_simple_add>
	ep->num_handles = num_handles;
   12a08:	2301      	movs	r3, #1
   12a0a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   12a0c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   12a10:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   12a14:	bd70      	pop	{r4, r5, r6, pc}
   12a16:	bf00      	nop

00012a18 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12a18:	7903      	ldrb	r3, [r0, #4]
   12a1a:	2b02      	cmp	r3, #2
   12a1c:	d008      	beq.n	12a30 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   12a1e:	3b04      	subs	r3, #4
   12a20:	b2db      	uxtb	r3, r3
   12a22:	2b0c      	cmp	r3, #12
   12a24:	d901      	bls.n	12a2a <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12a26:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   12a28:	4770      	bx	lr
   12a2a:	4a05      	ldr	r2, [pc, #20]	; (12a40 <hci_get_class+0x28>)
   12a2c:	5cd0      	ldrb	r0, [r2, r3]
   12a2e:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   12a30:	7f03      	ldrb	r3, [r0, #28]
   12a32:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   12a36:	2b03      	cmp	r3, #3
   12a38:	bf0c      	ite	eq
   12a3a:	2004      	moveq	r0, #4
   12a3c:	2005      	movne	r0, #5
   12a3e:	4770      	bx	lr
   12a40:	0002751c 	.word	0x0002751c

00012a44 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   12a44:	480d      	ldr	r0, [pc, #52]	; (12a7c <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12a46:	4a0e      	ldr	r2, [pc, #56]	; (12a80 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12a48:	490e      	ldr	r1, [pc, #56]	; (12a84 <hci_init+0x40>)
	dup_count = -1;
   12a4a:	4b0f      	ldr	r3, [pc, #60]	; (12a88 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   12a4c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   12a4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12a52:	f641 75ff 	movw	r5, #8191	; 0x1fff
   12a56:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12a5a:	2400      	movs	r4, #0
   12a5c:	2500      	movs	r5, #0
   12a5e:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   12a62:	4a0a      	ldr	r2, [pc, #40]	; (12a8c <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12a64:	241f      	movs	r4, #31
   12a66:	2500      	movs	r5, #0
   12a68:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   12a6c:	2100      	movs	r1, #0
   12a6e:	6011      	str	r1, [r2, #0]
	dup_count = -1;
   12a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   12a74:	bc30      	pop	{r4, r5}
	dup_count = -1;
   12a76:	601a      	str	r2, [r3, #0]
}
   12a78:	4770      	bx	lr
   12a7a:	bf00      	nop
   12a7c:	20000128 	.word	0x20000128
   12a80:	20001768 	.word	0x20001768
   12a84:	20000130 	.word	0x20000130
   12a88:	20001e74 	.word	0x20001e74
   12a8c:	20001e70 	.word	0x20001e70

00012a90 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   12a90:	f007 be4e 	b.w	1a730 <lll_csrand_get>

00012a94 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   12a94:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   12a96:	2300      	movs	r3, #0
   12a98:	f009 ff3c 	bl	1c914 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   12a9c:	2000      	movs	r0, #0
   12a9e:	bd08      	pop	{r3, pc}

00012aa0 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   12aa0:	b510      	push	{r4, lr}
   12aa2:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   12aa4:	f007 fe7a 	bl	1a79c <lll_reset>
	LL_ASSERT(!err);
   12aa8:	b970      	cbnz	r0, 12ac8 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   12aaa:	f008 fae1 	bl	1b070 <lll_adv_reset>
	LL_ASSERT(!err);
   12aae:	b9e0      	cbnz	r0, 12aea <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   12ab0:	f009 f80e 	bl	1bad0 <lll_scan_reset>
	LL_ASSERT(!err);
   12ab4:	bb50      	cbnz	r0, 12b0c <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   12ab6:	f009 f8a3 	bl	1bc00 <lll_conn_reset>
	LL_ASSERT(!err);
   12aba:	2800      	cmp	r0, #0
   12abc:	d137      	bne.n	12b2e <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   12abe:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   12ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12ac4:	f00c bd0c 	b.w	1f4e0 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   12ac8:	4a22      	ldr	r2, [pc, #136]	; (12b54 <perform_lll_reset+0xb4>)
   12aca:	4923      	ldr	r1, [pc, #140]	; (12b58 <perform_lll_reset+0xb8>)
   12acc:	4823      	ldr	r0, [pc, #140]	; (12b5c <perform_lll_reset+0xbc>)
   12ace:	f240 5335 	movw	r3, #1333	; 0x535
   12ad2:	f00d ff84 	bl	209de <printk>
   12ad6:	4040      	eors	r0, r0
   12ad8:	f380 8811 	msr	BASEPRI, r0
   12adc:	f04f 0003 	mov.w	r0, #3
   12ae0:	df02      	svc	2
	err = lll_adv_reset();
   12ae2:	f008 fac5 	bl	1b070 <lll_adv_reset>
	LL_ASSERT(!err);
   12ae6:	2800      	cmp	r0, #0
   12ae8:	d0e2      	beq.n	12ab0 <perform_lll_reset+0x10>
   12aea:	4a1a      	ldr	r2, [pc, #104]	; (12b54 <perform_lll_reset+0xb4>)
   12aec:	491a      	ldr	r1, [pc, #104]	; (12b58 <perform_lll_reset+0xb8>)
   12aee:	481b      	ldr	r0, [pc, #108]	; (12b5c <perform_lll_reset+0xbc>)
   12af0:	f240 533a 	movw	r3, #1338	; 0x53a
   12af4:	f00d ff73 	bl	209de <printk>
   12af8:	4040      	eors	r0, r0
   12afa:	f380 8811 	msr	BASEPRI, r0
   12afe:	f04f 0003 	mov.w	r0, #3
   12b02:	df02      	svc	2
	err = lll_scan_reset();
   12b04:	f008 ffe4 	bl	1bad0 <lll_scan_reset>
	LL_ASSERT(!err);
   12b08:	2800      	cmp	r0, #0
   12b0a:	d0d4      	beq.n	12ab6 <perform_lll_reset+0x16>
   12b0c:	4a11      	ldr	r2, [pc, #68]	; (12b54 <perform_lll_reset+0xb4>)
   12b0e:	4912      	ldr	r1, [pc, #72]	; (12b58 <perform_lll_reset+0xb8>)
   12b10:	4812      	ldr	r0, [pc, #72]	; (12b5c <perform_lll_reset+0xbc>)
   12b12:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   12b16:	f00d ff62 	bl	209de <printk>
   12b1a:	4040      	eors	r0, r0
   12b1c:	f380 8811 	msr	BASEPRI, r0
   12b20:	f04f 0003 	mov.w	r0, #3
   12b24:	df02      	svc	2
	err = lll_conn_reset();
   12b26:	f009 f86b 	bl	1bc00 <lll_conn_reset>
	LL_ASSERT(!err);
   12b2a:	2800      	cmp	r0, #0
   12b2c:	d0c7      	beq.n	12abe <perform_lll_reset+0x1e>
   12b2e:	4a09      	ldr	r2, [pc, #36]	; (12b54 <perform_lll_reset+0xb4>)
   12b30:	4909      	ldr	r1, [pc, #36]	; (12b58 <perform_lll_reset+0xb8>)
   12b32:	480a      	ldr	r0, [pc, #40]	; (12b5c <perform_lll_reset+0xbc>)
   12b34:	f240 5346 	movw	r3, #1350	; 0x546
   12b38:	f00d ff51 	bl	209de <printk>
   12b3c:	4040      	eors	r0, r0
   12b3e:	f380 8811 	msr	BASEPRI, r0
   12b42:	f04f 0003 	mov.w	r0, #3
   12b46:	df02      	svc	2
   12b48:	4620      	mov	r0, r4
}
   12b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12b4e:	f00c bcc7 	b.w	1f4e0 <z_impl_k_sem_give>
   12b52:	bf00      	nop
   12b54:	0002753c 	.word	0x0002753c
   12b58:	00027578 	.word	0x00027578
   12b5c:	000272c0 	.word	0x000272c0

00012b60 <disabled_cb>:
   12b60:	f00c bcbe 	b.w	1f4e0 <z_impl_k_sem_give>

00012b64 <tx_cmplt_get>:
	}
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   12b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12b68:	4e2f      	ldr	r6, [pc, #188]	; (12c28 <tx_cmplt_get+0xc4>)
{
   12b6a:	460c      	mov	r4, r1
   12b6c:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   12b6e:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12b70:	7872      	ldrb	r2, [r6, #1]
   12b72:	7831      	ldrb	r1, [r6, #0]
   12b74:	429a      	cmp	r2, r3
   12b76:	bf9c      	itt	ls
   12b78:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   12b7a:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
   12b7c:	4599      	cmp	r9, r3
{
   12b7e:	4682      	mov	sl, r0
   12b80:	d049      	beq.n	12c16 <tx_cmplt_get+0xb2>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   12b82:	fb13 f101 	smulbb	r1, r3, r1
   12b86:	4d29      	ldr	r5, [pc, #164]	; (12c2c <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   12b88:	3301      	adds	r3, #1
   12b8a:	b2db      	uxtb	r3, r3
		i = 0U;
   12b8c:	429a      	cmp	r2, r3
   12b8e:	bf08      	it	eq
   12b90:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   12b92:	186a      	adds	r2, r5, r1

	*idx = i;
   12b94:	7023      	strb	r3, [r4, #0]
   12b96:	d03e      	beq.n	12c16 <tx_cmplt_get+0xb2>
		return 0;
	}

	*handle = tx->handle;
   12b98:	5a6b      	ldrh	r3, [r5, r1]
   12b9a:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   12b9c:	2700      	movs	r7, #0
   12b9e:	f04f 0802 	mov.w	r8, #2
   12ba2:	f04f 0b01 	mov.w	fp, #1
   12ba6:	e022      	b.n	12bee <tx_cmplt_get+0x8a>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   12ba8:	3701      	adds	r7, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   12baa:	f030 0303 	bics.w	r3, r0, #3
   12bae:	f8c2 b004 	str.w	fp, [r2, #4]
			cmplt++;
   12bb2:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   12bb4:	d129      	bne.n	12c0a <tx_cmplt_get+0xa6>
	if (*idx >= count) {
   12bb6:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12bb8:	7872      	ldrb	r2, [r6, #1]
   12bba:	7831      	ldrb	r1, [r6, #0]
   12bbc:	429a      	cmp	r2, r3
   12bbe:	bf9c      	itt	ls
   12bc0:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   12bc2:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   12bc4:	454b      	cmp	r3, r9
   12bc6:	d027      	beq.n	12c18 <tx_cmplt_get+0xb4>
	i = *idx + 1;
   12bc8:	f103 0c01 	add.w	ip, r3, #1
   12bcc:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
   12bd0:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
   12bd4:	4562      	cmp	r2, ip
   12bd6:	bf08      	it	eq
   12bd8:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   12bdc:	18ea      	adds	r2, r5, r3
	*idx = i;
   12bde:	f884 c000 	strb.w	ip, [r4]
   12be2:	d019      	beq.n	12c18 <tx_cmplt_get+0xb4>
   12be4:	5ae9      	ldrh	r1, [r5, r3]
   12be6:	f8ba 3000 	ldrh.w	r3, [sl]
   12bea:	4299      	cmp	r1, r3
   12bec:	d114      	bne.n	12c18 <tx_cmplt_get+0xb4>
		node_tx = tx->node;
   12bee:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   12bf0:	2801      	cmp	r0, #1
   12bf2:	d9d9      	bls.n	12ba8 <tx_cmplt_get+0x44>
   12bf4:	f030 0303 	bics.w	r3, r0, #3
   12bf8:	d00a      	beq.n	12c10 <tx_cmplt_get+0xac>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   12bfa:	7903      	ldrb	r3, [r0, #4]
   12bfc:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   12c00:	3b01      	subs	r3, #1
   12c02:	2b01      	cmp	r3, #1
   12c04:	d90b      	bls.n	12c1e <tx_cmplt_get+0xba>
   12c06:	f8c2 8004 	str.w	r8, [r2, #4]
			ll_tx_mem_release(node_tx);
   12c0a:	f002 fba3 	bl	15354 <ll_tx_mem_release>
   12c0e:	e7d2      	b.n	12bb6 <tx_cmplt_get+0x52>
   12c10:	f8c2 8004 	str.w	r8, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   12c14:	e7cf      	b.n	12bb6 <tx_cmplt_get+0x52>
		return 0;
   12c16:	2700      	movs	r7, #0

	return cmplt;
}
   12c18:	4638      	mov	r0, r7
   12c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   12c1e:	3701      	adds	r7, #1
   12c20:	f8c2 b004 	str.w	fp, [r2, #4]
   12c24:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   12c26:	e7f0      	b.n	12c0a <tx_cmplt_get+0xa6>
   12c28:	2000044c 	.word	0x2000044c
   12c2c:	20000450 	.word	0x20000450

00012c30 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
   12c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c34:	4ca4      	ldr	r4, [pc, #656]	; (12ec8 <rx_demux+0x298>)
	k_sem_give(sem_recv);
   12c36:	4ea5      	ldr	r6, [pc, #660]	; (12ecc <rx_demux+0x29c>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   12c38:	f8df a294 	ldr.w	sl, [pc, #660]	; 12ed0 <rx_demux+0x2a0>
{
   12c3c:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   12c3e:	e9d4 0100 	ldrd	r0, r1, [r4]
   12c42:	aa03      	add	r2, sp, #12
   12c44:	f7fc fc7a 	bl	f53c <memq_peek>
		if (link) {
   12c48:	4607      	mov	r7, r0
   12c4a:	2800      	cmp	r0, #0
   12c4c:	d040      	beq.n	12cd0 <rx_demux+0xa0>
			LL_ASSERT(rx);
   12c4e:	9b03      	ldr	r3, [sp, #12]
   12c50:	2b00      	cmp	r3, #0
   12c52:	f000 8129 	beq.w	12ea8 <rx_demux+0x278>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   12c56:	7818      	ldrb	r0, [r3, #0]
   12c58:	aa04      	add	r2, sp, #16
   12c5a:	a902      	add	r1, sp, #8
   12c5c:	f004 fe6c 	bl	17938 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   12c60:	4605      	mov	r5, r0
   12c62:	2800      	cmp	r0, #0
   12c64:	d06a      	beq.n	12d3c <rx_demux+0x10c>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   12c66:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   12c6a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12c6e:	f891 9000 	ldrb.w	r9, [r1]
   12c72:	f8ad 200a 	strh.w	r2, [sp, #10]
   12c76:	f10d 0814 	add.w	r8, sp, #20
   12c7a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   12c7c:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   12c80:	f004 fe76 	bl	17970 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   12c84:	4629      	mov	r1, r5
   12c86:	9a05      	ldr	r2, [sp, #20]
   12c88:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12c8c:	f004 feba 	bl	17a04 <ull_conn_tx_ack>
   12c90:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   12c92:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   12c94:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   12c96:	f004 fe27 	bl	178e8 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   12c9a:	2001      	movs	r0, #1
   12c9c:	f004 fac4 	bl	17228 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   12ca0:	2101      	movs	r1, #1
   12ca2:	4628      	mov	r0, r5
		if (conn) {
   12ca4:	b10d      	cbz	r5, 12caa <rx_demux+0x7a>
			ull_conn_tx_lll_enqueue(conn, 1);
   12ca6:	f004 fd29 	bl	176fc <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   12caa:	4642      	mov	r2, r8
   12cac:	4639      	mov	r1, r7
   12cae:	4648      	mov	r0, r9
   12cb0:	f004 fe42 	bl	17938 <ull_conn_ack_by_last_peek>
	} while (link);
   12cb4:	4605      	mov	r5, r0
   12cb6:	2800      	cmp	r0, #0
   12cb8:	d1e2      	bne.n	12c80 <rx_demux+0x50>
	k_sem_give(sem_recv);
   12cba:	6830      	ldr	r0, [r6, #0]
   12cbc:	f00c fc10 	bl	1f4e0 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   12cc0:	e9d4 0100 	ldrd	r0, r1, [r4]
   12cc4:	aa03      	add	r2, sp, #12
   12cc6:	f7fc fc39 	bl	f53c <memq_peek>
		if (link) {
   12cca:	4607      	mov	r7, r0
   12ccc:	2800      	cmp	r0, #0
   12cce:	d1be      	bne.n	12c4e <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   12cd0:	aa04      	add	r2, sp, #16
   12cd2:	a902      	add	r1, sp, #8
   12cd4:	f10d 0007 	add.w	r0, sp, #7
   12cd8:	f004 fe12 	bl	17900 <ull_conn_ack_peek>
			if (link) {
   12cdc:	4605      	mov	r5, r0
   12cde:	2800      	cmp	r0, #0
   12ce0:	d06a      	beq.n	12db8 <rx_demux+0x188>
				rx_demux_conn_tx_ack(ack_last, handle,
   12ce2:	9b04      	ldr	r3, [sp, #16]
   12ce4:	9305      	str	r3, [sp, #20]
   12ce6:	f89d 9007 	ldrb.w	r9, [sp, #7]
   12cea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12cee:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   12cf2:	f10d 0814 	add.w	r8, sp, #20
   12cf6:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   12cfa:	f004 fe39 	bl	17970 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   12cfe:	4629      	mov	r1, r5
   12d00:	9a05      	ldr	r2, [sp, #20]
   12d02:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12d06:	f004 fe7d 	bl	17a04 <ull_conn_tx_ack>
   12d0a:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   12d0c:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   12d0e:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   12d10:	f004 fdea 	bl	178e8 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   12d14:	2001      	movs	r0, #1
   12d16:	f004 fa87 	bl	17228 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   12d1a:	2101      	movs	r1, #1
   12d1c:	4628      	mov	r0, r5
		if (conn) {
   12d1e:	b10d      	cbz	r5, 12d24 <rx_demux+0xf4>
			ull_conn_tx_lll_enqueue(conn, 1);
   12d20:	f004 fcec 	bl	176fc <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   12d24:	4642      	mov	r2, r8
   12d26:	4639      	mov	r1, r7
   12d28:	4648      	mov	r0, r9
   12d2a:	f004 fe05 	bl	17938 <ull_conn_ack_by_last_peek>
	} while (link);
   12d2e:	4605      	mov	r5, r0
   12d30:	2800      	cmp	r0, #0
   12d32:	d1e2      	bne.n	12cfa <rx_demux+0xca>
	k_sem_give(sem_recv);
   12d34:	6830      	ldr	r0, [r6, #0]
   12d36:	f00c fbd3 	bl	1f4e0 <z_impl_k_sem_give>
			if (nack) {
   12d3a:	e7c1      	b.n	12cc0 <rx_demux+0x90>
				nack = rx_demux_rx(link, rx);
   12d3c:	9b03      	ldr	r3, [sp, #12]
   12d3e:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   12d40:	791b      	ldrb	r3, [r3, #4]
   12d42:	3b01      	subs	r3, #1
   12d44:	2b0a      	cmp	r3, #10
   12d46:	d807      	bhi.n	12d58 <rx_demux+0x128>
   12d48:	e8df f003 	tbb	[pc, r3]
   12d4c:	14062f39 	.word	0x14062f39
   12d50:	06060606 	.word	0x06060606
   12d54:	2506      	.short	0x2506
   12d56:	14          	.byte	0x14
   12d57:	00          	.byte	0x00
		LL_ASSERT(0);
   12d58:	4a5e      	ldr	r2, [pc, #376]	; (12ed4 <rx_demux+0x2a4>)
   12d5a:	495f      	ldr	r1, [pc, #380]	; (12ed8 <rx_demux+0x2a8>)
   12d5c:	485f      	ldr	r0, [pc, #380]	; (12edc <rx_demux+0x2ac>)
   12d5e:	f240 63eb 	movw	r3, #1771	; 0x6eb
   12d62:	f00d fe3c 	bl	209de <printk>
   12d66:	4040      	eors	r0, r0
   12d68:	f380 8811 	msr	BASEPRI, r0
   12d6c:	f04f 0003 	mov.w	r0, #3
   12d70:	df02      	svc	2
			if (nack) {
   12d72:	e764      	b.n	12c3e <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12d74:	4954      	ldr	r1, [pc, #336]	; (12ec8 <rx_demux+0x298>)
   12d76:	6860      	ldr	r0, [r4, #4]
   12d78:	2200      	movs	r2, #0
   12d7a:	f7fc fbe7 	bl	f54c <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12d7e:	4b58      	ldr	r3, [pc, #352]	; (12ee0 <rx_demux+0x2b0>)
		ll_rx_put(link, rx);
   12d80:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12d82:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12d84:	4638      	mov	r0, r7
   12d86:	4a57      	ldr	r2, [pc, #348]	; (12ee4 <rx_demux+0x2b4>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12d88:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12d8a:	f7fc fbcd 	bl	f528 <memq_enqueue>
	k_sem_give(sem_recv);
   12d8e:	6830      	ldr	r0, [r6, #0]
   12d90:	f00c fba6 	bl	1f4e0 <z_impl_k_sem_give>
			if (nack) {
   12d94:	e794      	b.n	12cc0 <rx_demux+0x90>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12d96:	494c      	ldr	r1, [pc, #304]	; (12ec8 <rx_demux+0x298>)
   12d98:	6860      	ldr	r0, [r4, #4]
   12d9a:	2200      	movs	r2, #0
   12d9c:	f7fc fbd6 	bl	f54c <memq_dequeue>
		ull_conn_setup(link, rx);
   12da0:	9905      	ldr	r1, [sp, #20]
   12da2:	4638      	mov	r0, r7
   12da4:	f002 fe10 	bl	159c8 <ull_conn_setup>
			if (nack) {
   12da8:	e749      	b.n	12c3e <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   12daa:	a905      	add	r1, sp, #20
   12dac:	4638      	mov	r0, r7
   12dae:	f002 fe19 	bl	159e4 <ull_conn_rx>
		if (nack) {
   12db2:	2800      	cmp	r0, #0
   12db4:	f000 80c0 	beq.w	12f38 <rx_demux+0x308>
}
   12db8:	b007      	add	sp, #28
   12dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12dbe:	4942      	ldr	r1, [pc, #264]	; (12ec8 <rx_demux+0x298>)
   12dc0:	6860      	ldr	r0, [r4, #4]
   12dc2:	2200      	movs	r2, #0
   12dc4:	f7fc fbc2 	bl	f54c <memq_dequeue>
		rx_demux_event_done(link, rx);
   12dc8:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   12dca:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   12dce:	f8d5 b01c 	ldr.w	fp, [r5, #28]
	switch (done->extra.type) {
   12dd2:	b17b      	cbz	r3, 12df4 <rx_demux+0x1c4>
   12dd4:	2b01      	cmp	r3, #1
   12dd6:	f000 80ab 	beq.w	12f30 <rx_demux+0x300>
		LL_ASSERT(0);
   12dda:	4a3e      	ldr	r2, [pc, #248]	; (12ed4 <rx_demux+0x2a4>)
   12ddc:	493e      	ldr	r1, [pc, #248]	; (12ed8 <rx_demux+0x2a8>)
   12dde:	483f      	ldr	r0, [pc, #252]	; (12edc <rx_demux+0x2ac>)
   12de0:	f240 7322 	movw	r3, #1826	; 0x722
   12de4:	f00d fdfb 	bl	209de <printk>
   12de8:	4040      	eors	r0, r0
   12dea:	f380 8811 	msr	BASEPRI, r0
   12dee:	f04f 0003 	mov.w	r0, #3
   12df2:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12df4:	4a3c      	ldr	r2, [pc, #240]	; (12ee8 <rx_demux+0x2b8>)
	done->extra.type = 0U;
   12df6:	2300      	movs	r3, #0
   12df8:	f885 3020 	strb.w	r3, [r5, #32]
	last = last + 1;
   12dfc:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   12dfe:	7851      	ldrb	r1, [r2, #1]
	last = last + 1;
   12e00:	3301      	adds	r3, #1
   12e02:	b2db      	uxtb	r3, r3
		last = 0U;
   12e04:	4299      	cmp	r1, r3
   12e06:	bf08      	it	eq
   12e08:	2300      	moveq	r3, #0
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12e0a:	7891      	ldrb	r1, [r2, #2]
	if (last == first) {
   12e0c:	4299      	cmp	r1, r3
   12e0e:	f000 80a0 	beq.w	12f52 <rx_demux+0x322>
	done->hdr.link = link;
   12e12:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12e14:	78d0      	ldrb	r0, [r2, #3]
   12e16:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12e18:	fb00 2101 	mla	r1, r0, r1, r2
   12e1c:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   12e1e:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   12e20:	4d32      	ldr	r5, [pc, #200]	; (12eec <rx_demux+0x2bc>)
   12e22:	78aa      	ldrb	r2, [r5, #2]
	if (first == last) {
   12e24:	78e9      	ldrb	r1, [r5, #3]
   12e26:	782b      	ldrb	r3, [r5, #0]
   12e28:	4291      	cmp	r1, r2
   12e2a:	d025      	beq.n	12e78 <rx_demux+0x248>
	return (void *)(fifo + first * size);
   12e2c:	f105 0904 	add.w	r9, r5, #4
   12e30:	fb02 9303 	mla	r3, r2, r3, r9
	while (next) {
   12e34:	b303      	cbz	r3, 12e78 <rx_demux+0x248>
		uint8_t is_aborted = next->is_aborted;
   12e36:	f893 2020 	ldrb.w	r2, [r3, #32]
		if (!is_aborted) {
   12e3a:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
   12e3c:	f3c2 0740 	ubfx	r7, r2, #1, #1
		uint8_t is_resume = next->is_resume;
   12e40:	f002 0801 	and.w	r8, r2, #1
		if (!is_aborted) {
   12e44:	d556      	bpl.n	12ef4 <rx_demux+0x2c4>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   12e46:	78e9      	ldrb	r1, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   12e48:	78ab      	ldrb	r3, [r5, #2]
   12e4a:	782a      	ldrb	r2, [r5, #0]
   12e4c:	7868      	ldrb	r0, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   12e4e:	4299      	cmp	r1, r3
   12e50:	d012      	beq.n	12e78 <rx_demux+0x248>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   12e52:	3301      	adds	r3, #1
   12e54:	b2db      	uxtb	r3, r3
	if (_first == count) {
   12e56:	4298      	cmp	r0, r3
   12e58:	d064      	beq.n	12f24 <rx_demux+0x2f4>
	if (first == last) {
   12e5a:	4299      	cmp	r1, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   12e5c:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   12e5e:	d00b      	beq.n	12e78 <rx_demux+0x248>
	return (void *)(fifo + first * size);
   12e60:	fb03 9302 	mla	r3, r3, r2, r9

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   12e64:	b143      	cbz	r3, 12e78 <rx_demux+0x248>
   12e66:	2f00      	cmp	r7, #0
   12e68:	d1e5      	bne.n	12e36 <rx_demux+0x206>
   12e6a:	f1b8 0f00 	cmp.w	r8, #0
   12e6e:	d003      	beq.n	12e78 <rx_demux+0x248>
   12e70:	f893 2020 	ldrb.w	r2, [r3, #32]
   12e74:	07d2      	lsls	r2, r2, #31
   12e76:	d5de      	bpl.n	12e36 <rx_demux+0x206>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   12e78:	f1bb 0f00 	cmp.w	fp, #0
   12e7c:	f43f aedf 	beq.w	12c3e <rx_demux+0xe>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
   12e80:	f89b 3000 	ldrb.w	r3, [fp]
   12e84:	2b00      	cmp	r3, #0
   12e86:	d072      	beq.n	12f6e <rx_demux+0x33e>
	return hdr->ref--;
   12e88:	3b01      	subs	r3, #1
   12e8a:	b2db      	uxtb	r3, r3
   12e8c:	f88b 3000 	strb.w	r3, [fp]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   12e90:	2b00      	cmp	r3, #0
   12e92:	f47f aed4 	bne.w	12c3e <rx_demux+0xe>
   12e96:	f8db 3004 	ldr.w	r3, [fp, #4]
   12e9a:	2b00      	cmp	r3, #0
   12e9c:	f43f aecf 	beq.w	12c3e <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   12ea0:	f8db 0008 	ldr.w	r0, [fp, #8]
   12ea4:	4798      	blx	r3
			if (nack) {
   12ea6:	e6ca      	b.n	12c3e <rx_demux+0xe>
			LL_ASSERT(rx);
   12ea8:	4a0a      	ldr	r2, [pc, #40]	; (12ed4 <rx_demux+0x2a4>)
   12eaa:	4911      	ldr	r1, [pc, #68]	; (12ef0 <rx_demux+0x2c0>)
   12eac:	480b      	ldr	r0, [pc, #44]	; (12edc <rx_demux+0x2ac>)
   12eae:	f240 6337 	movw	r3, #1591	; 0x637
   12eb2:	f00d fd94 	bl	209de <printk>
   12eb6:	4040      	eors	r0, r0
   12eb8:	f380 8811 	msr	BASEPRI, r0
   12ebc:	f04f 0003 	mov.w	r0, #3
   12ec0:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   12ec2:	9b03      	ldr	r3, [sp, #12]
   12ec4:	e6c7      	b.n	12c56 <rx_demux+0x26>
   12ec6:	bf00      	nop
   12ec8:	2000231c 	.word	0x2000231c
   12ecc:	20002324 	.word	0x20002324
   12ed0:	20000470 	.word	0x20000470
   12ed4:	0002753c 	.word	0x0002753c
   12ed8:	00027358 	.word	0x00027358
   12edc:	000272c0 	.word	0x000272c0
   12ee0:	2000044c 	.word	0x2000044c
   12ee4:	20002318 	.word	0x20002318
   12ee8:	200002e8 	.word	0x200002e8
   12eec:	20000328 	.word	0x20000328
   12ef0:	00027580 	.word	0x00027580
			mfy.param = next;
   12ef4:	f8ca 3008 	str.w	r3, [sl, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12ef8:	463a      	mov	r2, r7
   12efa:	4653      	mov	r3, sl
   12efc:	4639      	mov	r1, r7
   12efe:	2001      	movs	r0, #1
   12f00:	f7fc fb86 	bl	f610 <mayfly_enqueue>
			LL_ASSERT(!ret);
   12f04:	2800      	cmp	r0, #0
   12f06:	d09e      	beq.n	12e46 <rx_demux+0x216>
   12f08:	4824      	ldr	r0, [pc, #144]	; (12f9c <rx_demux+0x36c>)
   12f0a:	4a25      	ldr	r2, [pc, #148]	; (12fa0 <rx_demux+0x370>)
   12f0c:	4925      	ldr	r1, [pc, #148]	; (12fa4 <rx_demux+0x374>)
   12f0e:	f240 733a 	movw	r3, #1850	; 0x73a
   12f12:	f00d fd64 	bl	209de <printk>
   12f16:	4040      	eors	r0, r0
   12f18:	f380 8811 	msr	BASEPRI, r0
   12f1c:	f04f 0003 	mov.w	r0, #3
   12f20:	df02      	svc	2
   12f22:	e790      	b.n	12e46 <rx_demux+0x216>
	*first = _first; /* Write back read-index */
   12f24:	2300      	movs	r3, #0
   12f26:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   12f28:	2900      	cmp	r1, #0
   12f2a:	d0a5      	beq.n	12e78 <rx_demux+0x248>
	return (void *)(fifo + first * size);
   12f2c:	4b1e      	ldr	r3, [pc, #120]	; (12fa8 <rx_demux+0x378>)
   12f2e:	e79a      	b.n	12e66 <rx_demux+0x236>
		ull_conn_done(done);
   12f30:	4628      	mov	r0, r5
   12f32:	f004 fa47 	bl	173c4 <ull_conn_done>
		break;
   12f36:	e75d      	b.n	12df4 <rx_demux+0x1c4>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12f38:	491c      	ldr	r1, [pc, #112]	; (12fac <rx_demux+0x37c>)
   12f3a:	4602      	mov	r2, r0
   12f3c:	6860      	ldr	r0, [r4, #4]
   12f3e:	f7fc fb05 	bl	f54c <memq_dequeue>
		if (rx) {
   12f42:	9905      	ldr	r1, [sp, #20]
   12f44:	2900      	cmp	r1, #0
   12f46:	f43f ae7a 	beq.w	12c3e <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12f4a:	4b19      	ldr	r3, [pc, #100]	; (12fb0 <rx_demux+0x380>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12f4c:	4638      	mov	r0, r7
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12f4e:	78db      	ldrb	r3, [r3, #3]
   12f50:	e719      	b.n	12d86 <rx_demux+0x156>
	LL_ASSERT(release == done);
   12f52:	4a13      	ldr	r2, [pc, #76]	; (12fa0 <rx_demux+0x370>)
   12f54:	4917      	ldr	r1, [pc, #92]	; (12fb4 <rx_demux+0x384>)
   12f56:	4811      	ldr	r0, [pc, #68]	; (12f9c <rx_demux+0x36c>)
   12f58:	f240 7329 	movw	r3, #1833	; 0x729
   12f5c:	f00d fd3f 	bl	209de <printk>
   12f60:	4040      	eors	r0, r0
   12f62:	f380 8811 	msr	BASEPRI, r0
   12f66:	f04f 0003 	mov.w	r0, #3
   12f6a:	df02      	svc	2
   12f6c:	e758      	b.n	12e20 <rx_demux+0x1f0>
	LL_ASSERT(ull_hdr->ref);
   12f6e:	4a0c      	ldr	r2, [pc, #48]	; (12fa0 <rx_demux+0x370>)
   12f70:	4911      	ldr	r1, [pc, #68]	; (12fb8 <rx_demux+0x388>)
   12f72:	480a      	ldr	r0, [pc, #40]	; (12f9c <rx_demux+0x36c>)
   12f74:	f240 734c 	movw	r3, #1868	; 0x74c
   12f78:	f00d fd31 	bl	209de <printk>
   12f7c:	4040      	eors	r0, r0
   12f7e:	f380 8811 	msr	BASEPRI, r0
   12f82:	f04f 0003 	mov.w	r0, #3
   12f86:	df02      	svc	2
   12f88:	f89b 3000 	ldrb.w	r3, [fp]
   12f8c:	3b01      	subs	r3, #1
   12f8e:	b2db      	uxtb	r3, r3
   12f90:	f88b 3000 	strb.w	r3, [fp]
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   12f94:	2b00      	cmp	r3, #0
   12f96:	f47f ae52 	bne.w	12c3e <rx_demux+0xe>
   12f9a:	e77c      	b.n	12e96 <rx_demux+0x266>
   12f9c:	000272c0 	.word	0x000272c0
   12fa0:	0002753c 	.word	0x0002753c
   12fa4:	00027594 	.word	0x00027594
   12fa8:	2000032c 	.word	0x2000032c
   12fac:	2000231c 	.word	0x2000231c
   12fb0:	2000044c 	.word	0x2000044c
   12fb4:	00027584 	.word	0x00027584
   12fb8:	0002759c 	.word	0x0002759c

00012fbc <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12fbc:	4b6c      	ldr	r3, [pc, #432]	; (13170 <init_reset+0x1b4>)
{
   12fbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12fc2:	1d18      	adds	r0, r3, #4
   12fc4:	2203      	movs	r2, #3
   12fc6:	2134      	movs	r1, #52	; 0x34
   12fc8:	f7fc fa2a 	bl	f420 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   12fcc:	4b69      	ldr	r3, [pc, #420]	; (13174 <init_reset+0x1b8>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12fce:	4d6a      	ldr	r5, [pc, #424]	; (13178 <init_reset+0x1bc>)
		link = mem_acquire(&mem_link_done.free);
   12fd0:	4f68      	ldr	r7, [pc, #416]	; (13174 <init_reset+0x1b8>)
		rx = mem_acquire(&mem_done.free);
   12fd2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 13170 <init_reset+0x1b4>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   12fd6:	2203      	movs	r2, #3
   12fd8:	2108      	movs	r1, #8
   12fda:	1d18      	adds	r0, r3, #4
   12fdc:	f7fc fa20 	bl	f420 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12fe0:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   12fe2:	786a      	ldrb	r2, [r5, #1]
   12fe4:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12fe6:	3401      	adds	r4, #1
   12fe8:	b2e4      	uxtb	r4, r4
		last = 0U;
   12fea:	42a2      	cmp	r2, r4
   12fec:	bf08      	it	eq
   12fee:	2400      	moveq	r4, #0
	if (last == first) {
   12ff0:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   12ff2:	4638      	mov	r0, r7
   12ff4:	d013      	beq.n	1301e <init_reset+0x62>
   12ff6:	f7fc fa37 	bl	f468 <mem_acquire>
   12ffa:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   12ffc:	4640      	mov	r0, r8
		if (!link) {
   12ffe:	b176      	cbz	r6, 1301e <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
   13000:	f7fc fa32 	bl	f468 <mem_acquire>
		if (!rx) {
   13004:	b138      	cbz	r0, 13016 <init_reset+0x5a>
		rx->link = link;
   13006:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13008:	78ea      	ldrb	r2, [r5, #3]
   1300a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1300c:	fb02 5303 	mla	r3, r2, r3, r5
   13010:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   13012:	70ec      	strb	r4, [r5, #3]
}
   13014:	e7e5      	b.n	12fe2 <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
   13016:	4957      	ldr	r1, [pc, #348]	; (13174 <init_reset+0x1b8>)
   13018:	4630      	mov	r0, r6
   1301a:	f7fc fa3b 	bl	f494 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1301e:	4b57      	ldr	r3, [pc, #348]	; (1317c <init_reset+0x1c0>)
   13020:	220a      	movs	r2, #10
   13022:	1d18      	adds	r0, r3, #4
   13024:	2148      	movs	r1, #72	; 0x48
   13026:	f7fc f9fb 	bl	f420 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1302a:	4b55      	ldr	r3, [pc, #340]	; (13180 <init_reset+0x1c4>)
   1302c:	220b      	movs	r2, #11
   1302e:	1d18      	adds	r0, r3, #4
   13030:	2108      	movs	r1, #8
   13032:	f7fc f9f5 	bl	f420 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   13036:	4852      	ldr	r0, [pc, #328]	; (13180 <init_reset+0x1c4>)
   13038:	f7fc fa16 	bl	f468 <mem_acquire>
	LL_ASSERT(link);
   1303c:	4604      	mov	r4, r0
   1303e:	2800      	cmp	r0, #0
   13040:	d074      	beq.n	1312c <init_reset+0x170>
	MEMQ_INIT(ull_rx, link);
   13042:	4a50      	ldr	r2, [pc, #320]	; (13184 <init_reset+0x1c8>)
   13044:	4620      	mov	r0, r4
   13046:	1f11      	subs	r1, r2, #4
   13048:	f7fc fa60 	bl	f50c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1304c:	484c      	ldr	r0, [pc, #304]	; (13180 <init_reset+0x1c4>)
   1304e:	f7fc fa0b 	bl	f468 <mem_acquire>
	LL_ASSERT(link);
   13052:	4604      	mov	r4, r0
   13054:	2800      	cmp	r0, #0
   13056:	d077      	beq.n	13148 <init_reset+0x18c>
	MEMQ_INIT(ll_rx, link);
   13058:	4a4b      	ldr	r2, [pc, #300]	; (13188 <init_reset+0x1cc>)
	mem_link_rx.quota_pdu = RX_CNT;
   1305a:	4e4c      	ldr	r6, [pc, #304]	; (1318c <init_reset+0x1d0>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1305c:	4d4c      	ldr	r5, [pc, #304]	; (13190 <init_reset+0x1d4>)
		rx = mem_acquire(&mem_pdu_rx.free);
   1305e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1317c <init_reset+0x1c0>
	MEMQ_INIT(ll_rx, link);
   13062:	4620      	mov	r0, r4
   13064:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   13066:	4637      	mov	r7, r6
	MEMQ_INIT(ll_rx, link);
   13068:	f7fc fa50 	bl	f50c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1306c:	2307      	movs	r3, #7
   1306e:	f807 3b04 	strb.w	r3, [r7], #4
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13072:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   13074:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   13078:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1307a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1307c:	3401      	adds	r4, #1
   1307e:	b2e4      	uxtb	r4, r4
		last = 0U;
   13080:	42a2      	cmp	r2, r4
   13082:	bf08      	it	eq
   13084:	2400      	moveq	r4, #0
	if (last == first) {
   13086:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13088:	4638      	mov	r0, r7
   1308a:	d020      	beq.n	130ce <init_reset+0x112>
   1308c:	f7fc f9ec 	bl	f468 <mem_acquire>
   13090:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13092:	4640      	mov	r0, r8
		if (!link) {
   13094:	f1ba 0f00 	cmp.w	sl, #0
   13098:	d019      	beq.n	130ce <init_reset+0x112>
		rx = mem_acquire(&mem_pdu_rx.free);
   1309a:	f7fc f9e5 	bl	f468 <mem_acquire>
		if (!rx) {
   1309e:	b190      	cbz	r0, 130c6 <init_reset+0x10a>
		link->mem = NULL;
   130a0:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   130a4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   130a8:	78e9      	ldrb	r1, [r5, #3]
   130aa:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   130ac:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   130ae:	fb01 5202 	mla	r2, r1, r2, r5
   130b2:	3b01      	subs	r3, #1
   130b4:	b2db      	uxtb	r3, r3
   130b6:	6050      	str	r0, [r2, #4]
   130b8:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   130ba:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   130bc:	2b00      	cmp	r3, #0
   130be:	d1db      	bne.n	13078 <init_reset+0xbc>
}
   130c0:	2000      	movs	r0, #0
   130c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			mem_release(link, &mem_link_rx.free);
   130c6:	492e      	ldr	r1, [pc, #184]	; (13180 <init_reset+0x1c4>)
   130c8:	4650      	mov	r0, sl
   130ca:	f7fc f9e3 	bl	f494 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   130ce:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   130d0:	1e5f      	subs	r7, r3, #1
   130d2:	b2ff      	uxtb	r7, r7
   130d4:	2b00      	cmp	r3, #0
   130d6:	d0f3      	beq.n	130c0 <init_reset+0x104>
   130d8:	4d2e      	ldr	r5, [pc, #184]	; (13194 <init_reset+0x1d8>)
		link = mem_acquire(&mem_link_rx.free);
   130da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13180 <init_reset+0x1c4>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   130de:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   130e0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1317c <init_reset+0x1c0>
	if (last == count) {
   130e4:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   130e6:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   130e8:	3401      	adds	r4, #1
   130ea:	b2e4      	uxtb	r4, r4
		last = 0U;
   130ec:	42a2      	cmp	r2, r4
   130ee:	bf08      	it	eq
   130f0:	2400      	moveq	r4, #0
	if (last == first) {
   130f2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   130f4:	4640      	mov	r0, r8
   130f6:	d0e3      	beq.n	130c0 <init_reset+0x104>
   130f8:	f7fc f9b6 	bl	f468 <mem_acquire>
   130fc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   130fe:	4648      	mov	r0, r9
		if (!link) {
   13100:	f1ba 0f00 	cmp.w	sl, #0
   13104:	d0dc      	beq.n	130c0 <init_reset+0x104>
		rx = mem_acquire(&mem_pdu_rx.free);
   13106:	f7fc f9af 	bl	f468 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1310a:	3f01      	subs	r7, #1
   1310c:	b2ff      	uxtb	r7, r7
		if (!rx) {
   1310e:	b348      	cbz	r0, 13164 <init_reset+0x1a8>
		rx->link = link;
   13110:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13114:	78e9      	ldrb	r1, [r5, #3]
   13116:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   13118:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1311a:	fb01 5202 	mla	r2, r1, r2, r5
   1311e:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13120:	2fff      	cmp	r7, #255	; 0xff
   13122:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   13124:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   13126:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13128:	d1dc      	bne.n	130e4 <init_reset+0x128>
   1312a:	e7c9      	b.n	130c0 <init_reset+0x104>
	LL_ASSERT(link);
   1312c:	4a1a      	ldr	r2, [pc, #104]	; (13198 <init_reset+0x1dc>)
   1312e:	491b      	ldr	r1, [pc, #108]	; (1319c <init_reset+0x1e0>)
   13130:	481b      	ldr	r0, [pc, #108]	; (131a0 <init_reset+0x1e4>)
   13132:	f240 531c 	movw	r3, #1308	; 0x51c
   13136:	f00d fc52 	bl	209de <printk>
   1313a:	4040      	eors	r0, r0
   1313c:	f380 8811 	msr	BASEPRI, r0
   13140:	f04f 0003 	mov.w	r0, #3
   13144:	df02      	svc	2
   13146:	e77c      	b.n	13042 <init_reset+0x86>
	LL_ASSERT(link);
   13148:	4a13      	ldr	r2, [pc, #76]	; (13198 <init_reset+0x1dc>)
   1314a:	4914      	ldr	r1, [pc, #80]	; (1319c <init_reset+0x1e0>)
   1314c:	4814      	ldr	r0, [pc, #80]	; (131a0 <init_reset+0x1e4>)
   1314e:	f240 5323 	movw	r3, #1315	; 0x523
   13152:	f00d fc44 	bl	209de <printk>
   13156:	4040      	eors	r0, r0
   13158:	f380 8811 	msr	BASEPRI, r0
   1315c:	f04f 0003 	mov.w	r0, #3
   13160:	df02      	svc	2
   13162:	e779      	b.n	13058 <init_reset+0x9c>
			mem_release(link, &mem_link_rx.free);
   13164:	4906      	ldr	r1, [pc, #24]	; (13180 <init_reset+0x1c4>)
   13166:	4650      	mov	r0, sl
   13168:	f7fc f994 	bl	f494 <mem_release>
			break;
   1316c:	e7a8      	b.n	130c0 <init_reset+0x104>
   1316e:	bf00      	nop
   13170:	20001f24 	.word	0x20001f24
   13174:	20001fc4 	.word	0x20001fc4
   13178:	200002e8 	.word	0x200002e8
   1317c:	20002040 	.word	0x20002040
   13180:	20001fe4 	.word	0x20001fe4
   13184:	20002320 	.word	0x20002320
   13188:	20002318 	.word	0x20002318
   1318c:	20001fe0 	.word	0x20001fe0
   13190:	200002fc 	.word	0x200002fc
   13194:	20000310 	.word	0x20000310
   13198:	0002753c 	.word	0x0002753c
   1319c:	00027854 	.word	0x00027854
   131a0:	000272c0 	.word	0x000272c0

000131a4 <ll_init>:
{
   131a4:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   131a6:	4b34      	ldr	r3, [pc, #208]	; (13278 <ll_init+0xd4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   131a8:	4d34      	ldr	r5, [pc, #208]	; (1327c <ll_init+0xd8>)
	sem_recv = sem_rx;
   131aa:	6018      	str	r0, [r3, #0]
{
   131ac:	b087      	sub	sp, #28
	cntr_init();
   131ae:	f009 fb37 	bl	1c820 <cntr_init>
	mayfly_init();
   131b2:	f7fc f9db 	bl	f56c <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   131b6:	4932      	ldr	r1, [pc, #200]	; (13280 <ll_init+0xdc>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   131b8:	4a32      	ldr	r2, [pc, #200]	; (13284 <ll_init+0xe0>)
   131ba:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   131bc:	f04f 0c03 	mov.w	ip, #3
   131c0:	f881 c000 	strb.w	ip, [r1]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   131c4:	4c30      	ldr	r4, [pc, #192]	; (13288 <ll_init+0xe4>)
   131c6:	9204      	str	r2, [sp, #16]
   131c8:	4a30      	ldr	r2, [pc, #192]	; (1328c <ll_init+0xe8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   131ca:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   131cc:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   131d0:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   131d2:	240b      	movs	r4, #11
   131d4:	e9cd 1400 	strd	r1, r4, [sp]
   131d8:	4a2d      	ldr	r2, [pc, #180]	; (13290 <ll_init+0xec>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   131da:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   131dc:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   131de:	720b      	strb	r3, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   131e0:	2000      	movs	r0, #0
   131e2:	2106      	movs	r1, #6
   131e4:	f7fd fc0a 	bl	109fc <ticker_init>
	LL_ASSERT(!err);
   131e8:	2800      	cmp	r0, #0
   131ea:	d137      	bne.n	1325c <ll_init+0xb8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   131ec:	2201      	movs	r2, #1
   131ee:	2100      	movs	r1, #0
   131f0:	4828      	ldr	r0, [pc, #160]	; (13294 <ll_init+0xf0>)
   131f2:	f012 fdc9 	bl	25d88 <z_impl_k_sem_init>
	err = lll_init();
   131f6:	f007 fa69 	bl	1a6cc <lll_init>
	if (err) {
   131fa:	4604      	mov	r4, r0
   131fc:	b110      	cbz	r0, 13204 <ll_init+0x60>
}
   131fe:	4620      	mov	r0, r4
   13200:	b007      	add	sp, #28
   13202:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   13204:	f7ff feda 	bl	12fbc <init_reset>
	if (err) {
   13208:	4604      	mov	r4, r0
   1320a:	2800      	cmp	r0, #0
   1320c:	d1f7      	bne.n	131fe <ll_init+0x5a>
	err = lll_adv_init();
   1320e:	f007 ff2d 	bl	1b06c <lll_adv_init>
	if (err) {
   13212:	4604      	mov	r4, r0
   13214:	2800      	cmp	r0, #0
   13216:	d1f2      	bne.n	131fe <ll_init+0x5a>
	err = ull_adv_init();
   13218:	f001 f990 	bl	1453c <ull_adv_init>
	if (err) {
   1321c:	4604      	mov	r4, r0
   1321e:	2800      	cmp	r0, #0
   13220:	d1ed      	bne.n	131fe <ll_init+0x5a>
	err = lll_scan_init();
   13222:	f008 fc53 	bl	1bacc <lll_scan_init>
	if (err) {
   13226:	4604      	mov	r4, r0
   13228:	2800      	cmp	r0, #0
   1322a:	d1e8      	bne.n	131fe <ll_init+0x5a>
	err = ull_scan_init();
   1322c:	f001 fada 	bl	147e4 <ull_scan_init>
	if (err) {
   13230:	4604      	mov	r4, r0
   13232:	2800      	cmp	r0, #0
   13234:	d1e3      	bne.n	131fe <ll_init+0x5a>
	err = lll_conn_init();
   13236:	f008 fce1 	bl	1bbfc <lll_conn_init>
	if (err) {
   1323a:	4604      	mov	r4, r0
   1323c:	2800      	cmp	r0, #0
   1323e:	d1de      	bne.n	131fe <ll_init+0x5a>
	err = ull_conn_init();
   13240:	f002 fb3a 	bl	158b8 <ull_conn_init>
	if (err) {
   13244:	4604      	mov	r4, r0
   13246:	2800      	cmp	r0, #0
   13248:	d1d9      	bne.n	131fe <ll_init+0x5a>
	err = ull_afh_init();
   1324a:	f006 fc99 	bl	19b80 <ull_afh_init>
	if (err) {
   1324e:	4604      	mov	r4, r0
   13250:	2800      	cmp	r0, #0
   13252:	d1d4      	bne.n	131fe <ll_init+0x5a>
		ull_filter_reset(true);
   13254:	2001      	movs	r0, #1
   13256:	f006 fa4f 	bl	196f8 <ull_filter_reset>
	return  0;
   1325a:	e7d0      	b.n	131fe <ll_init+0x5a>
	LL_ASSERT(!err);
   1325c:	4a0e      	ldr	r2, [pc, #56]	; (13298 <ll_init+0xf4>)
   1325e:	490f      	ldr	r1, [pc, #60]	; (1329c <ll_init+0xf8>)
   13260:	480f      	ldr	r0, [pc, #60]	; (132a0 <ll_init+0xfc>)
   13262:	f240 1331 	movw	r3, #305	; 0x131
   13266:	f00d fbba 	bl	209de <printk>
   1326a:	4040      	eors	r0, r0
   1326c:	f380 8811 	msr	BASEPRI, r0
   13270:	f04f 0003 	mov.w	r0, #3
   13274:	df02      	svc	2
   13276:	e7b9      	b.n	131ec <ll_init+0x48>
   13278:	20002324 	.word	0x20002324
   1327c:	0001d709 	.word	0x0001d709
   13280:	2000269c 	.word	0x2000269c
   13284:	0001d5b9 	.word	0x0001d5b9
   13288:	0001d555 	.word	0x0001d555
   1328c:	20002460 	.word	0x20002460
   13290:	20002340 	.word	0x20002340
   13294:	20002328 	.word	0x20002328
   13298:	0002753c 	.word	0x0002753c
   1329c:	00027578 	.word	0x00027578
   132a0:	000272c0 	.word	0x000272c0

000132a4 <ll_reset>:
{
   132a4:	b510      	push	{r4, lr}
   132a6:	b086      	sub	sp, #24
	err = ull_adv_reset();
   132a8:	f001 f94a 	bl	14540 <ull_adv_reset>
	LL_ASSERT(!err);
   132ac:	2800      	cmp	r0, #0
   132ae:	d136      	bne.n	1331e <ll_reset+0x7a>
	err = ull_scan_reset();
   132b0:	f001 fb6c 	bl	1498c <ull_scan_reset>
	LL_ASSERT(!err);
   132b4:	2800      	cmp	r0, #0
   132b6:	d143      	bne.n	13340 <ll_reset+0x9c>
		err = ll_connect_disable(&rx);
   132b8:	4668      	mov	r0, sp
   132ba:	f005 f8d5 	bl	18468 <ll_connect_disable>
		if (!err) {
   132be:	2800      	cmp	r0, #0
   132c0:	d050      	beq.n	13364 <ll_reset+0xc0>
	err = ull_conn_reset();
   132c2:	f002 fafb 	bl	158bc <ull_conn_reset>
	LL_ASSERT(!err);
   132c6:	2800      	cmp	r0, #0
   132c8:	d15d      	bne.n	13386 <ll_reset+0xe2>
	MFIFO_INIT(tx_ack);
   132ca:	4b4b      	ldr	r3, [pc, #300]	; (133f8 <ll_reset+0x154>)
   132cc:	2400      	movs	r4, #0
   132ce:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   132d0:	4620      	mov	r0, r4
   132d2:	f006 fa11 	bl	196f8 <ull_filter_reset>
	MFIFO_INIT(done);
   132d6:	4b49      	ldr	r3, [pc, #292]	; (133fc <ll_reset+0x158>)
	MFIFO_INIT(prep);
   132d8:	4949      	ldr	r1, [pc, #292]	; (13400 <ll_reset+0x15c>)
	MFIFO_INIT(done);
   132da:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   132dc:	4a49      	ldr	r2, [pc, #292]	; (13404 <ll_reset+0x160>)
	MFIFO_INIT(ll_pdu_rx_free);
   132de:	4b4a      	ldr	r3, [pc, #296]	; (13408 <ll_reset+0x164>)
	MFIFO_INIT(prep);
   132e0:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   132e2:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   132e4:	805c      	strh	r4, [r3, #2]
   132e6:	2201      	movs	r2, #1
   132e8:	4621      	mov	r1, r4
   132ea:	4668      	mov	r0, sp
   132ec:	f012 fd4c 	bl	25d88 <z_impl_k_sem_init>
		mfy.param = &sem;
   132f0:	4b46      	ldr	r3, [pc, #280]	; (1340c <ll_reset+0x168>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   132f2:	4622      	mov	r2, r4
   132f4:	4621      	mov	r1, r4
   132f6:	2003      	movs	r0, #3
		mfy.param = &sem;
   132f8:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   132fc:	f7fc f988 	bl	f610 <mayfly_enqueue>
		LL_ASSERT(!retval);
   13300:	2800      	cmp	r0, #0
   13302:	d15d      	bne.n	133c0 <ll_reset+0x11c>
	return z_impl_k_sem_take(sem, timeout);
   13304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1330c:	4668      	mov	r0, sp
   1330e:	f00c f90d 	bl	1f52c <z_impl_k_sem_take>
	err = init_reset();
   13312:	f7ff fe53 	bl	12fbc <init_reset>
	LL_ASSERT(!err);
   13316:	2800      	cmp	r0, #0
   13318:	d143      	bne.n	133a2 <ll_reset+0xfe>
}
   1331a:	b006      	add	sp, #24
   1331c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   1331e:	4a3c      	ldr	r2, [pc, #240]	; (13410 <ll_reset+0x16c>)
   13320:	493c      	ldr	r1, [pc, #240]	; (13414 <ll_reset+0x170>)
   13322:	483d      	ldr	r0, [pc, #244]	; (13418 <ll_reset+0x174>)
   13324:	f44f 73c3 	mov.w	r3, #390	; 0x186
   13328:	f00d fb59 	bl	209de <printk>
   1332c:	4040      	eors	r0, r0
   1332e:	f380 8811 	msr	BASEPRI, r0
   13332:	f04f 0003 	mov.w	r0, #3
   13336:	df02      	svc	2
	err = ull_scan_reset();
   13338:	f001 fb28 	bl	1498c <ull_scan_reset>
	LL_ASSERT(!err);
   1333c:	2800      	cmp	r0, #0
   1333e:	d0bb      	beq.n	132b8 <ll_reset+0x14>
   13340:	4a33      	ldr	r2, [pc, #204]	; (13410 <ll_reset+0x16c>)
   13342:	4934      	ldr	r1, [pc, #208]	; (13414 <ll_reset+0x170>)
   13344:	4834      	ldr	r0, [pc, #208]	; (13418 <ll_reset+0x174>)
   13346:	f44f 73c6 	mov.w	r3, #396	; 0x18c
   1334a:	f00d fb48 	bl	209de <printk>
   1334e:	4040      	eors	r0, r0
   13350:	f380 8811 	msr	BASEPRI, r0
   13354:	f04f 0003 	mov.w	r0, #3
   13358:	df02      	svc	2
		err = ll_connect_disable(&rx);
   1335a:	4668      	mov	r0, sp
   1335c:	f005 f884 	bl	18468 <ll_connect_disable>
		if (!err) {
   13360:	2800      	cmp	r0, #0
   13362:	d1ae      	bne.n	132c2 <ll_reset+0x1e>
			scan = ull_scan_is_enabled_get(0);
   13364:	f001 fb4c 	bl	14a00 <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
   13368:	4604      	mov	r4, r0
   1336a:	2800      	cmp	r0, #0
   1336c:	d036      	beq.n	133dc <ll_reset+0x138>
			scan->is_enabled = 0U;
   1336e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   13372:	2200      	movs	r2, #0
			scan->is_enabled = 0U;
   13374:	f36f 0300 	bfc	r3, #0, #1
   13378:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   1337c:	6262      	str	r2, [r4, #36]	; 0x24
	err = ull_conn_reset();
   1337e:	f002 fa9d 	bl	158bc <ull_conn_reset>
	LL_ASSERT(!err);
   13382:	2800      	cmp	r0, #0
   13384:	d0a1      	beq.n	132ca <ll_reset+0x26>
   13386:	4a22      	ldr	r2, [pc, #136]	; (13410 <ll_reset+0x16c>)
   13388:	4922      	ldr	r1, [pc, #136]	; (13414 <ll_reset+0x170>)
   1338a:	4823      	ldr	r0, [pc, #140]	; (13418 <ll_reset+0x174>)
   1338c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   13390:	f00d fb25 	bl	209de <printk>
   13394:	4040      	eors	r0, r0
   13396:	f380 8811 	msr	BASEPRI, r0
   1339a:	f04f 0003 	mov.w	r0, #3
   1339e:	df02      	svc	2
   133a0:	e793      	b.n	132ca <ll_reset+0x26>
	LL_ASSERT(!err);
   133a2:	4a1b      	ldr	r2, [pc, #108]	; (13410 <ll_reset+0x16c>)
   133a4:	491b      	ldr	r1, [pc, #108]	; (13414 <ll_reset+0x170>)
   133a6:	481c      	ldr	r0, [pc, #112]	; (13418 <ll_reset+0x174>)
   133a8:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   133ac:	f00d fb17 	bl	209de <printk>
   133b0:	4040      	eors	r0, r0
   133b2:	f380 8811 	msr	BASEPRI, r0
   133b6:	f04f 0003 	mov.w	r0, #3
   133ba:	df02      	svc	2
}
   133bc:	b006      	add	sp, #24
   133be:	bd10      	pop	{r4, pc}
		LL_ASSERT(!retval);
   133c0:	4a13      	ldr	r2, [pc, #76]	; (13410 <ll_reset+0x16c>)
   133c2:	4916      	ldr	r1, [pc, #88]	; (1341c <ll_reset+0x178>)
   133c4:	4814      	ldr	r0, [pc, #80]	; (13418 <ll_reset+0x174>)
   133c6:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
   133ca:	f00d fb08 	bl	209de <printk>
   133ce:	4040      	eors	r0, r0
   133d0:	f380 8811 	msr	BASEPRI, r0
   133d4:	f04f 0003 	mov.w	r0, #3
   133d8:	df02      	svc	2
   133da:	e793      	b.n	13304 <ll_reset+0x60>
			LL_ASSERT(scan);
   133dc:	4a0c      	ldr	r2, [pc, #48]	; (13410 <ll_reset+0x16c>)
   133de:	4910      	ldr	r1, [pc, #64]	; (13420 <ll_reset+0x17c>)
   133e0:	480d      	ldr	r0, [pc, #52]	; (13418 <ll_reset+0x174>)
   133e2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   133e6:	f00d fafa 	bl	209de <printk>
   133ea:	4040      	eors	r0, r0
   133ec:	f380 8811 	msr	BASEPRI, r0
   133f0:	f04f 0003 	mov.w	r0, #3
   133f4:	df02      	svc	2
   133f6:	e7ba      	b.n	1336e <ll_reset+0xca>
   133f8:	2000044c 	.word	0x2000044c
   133fc:	200002e8 	.word	0x200002e8
   13400:	20000328 	.word	0x20000328
   13404:	20000310 	.word	0x20000310
   13408:	200002fc 	.word	0x200002fc
   1340c:	200004a0 	.word	0x200004a0
   13410:	0002753c 	.word	0x0002753c
   13414:	00027578 	.word	0x00027578
   13418:	000272c0 	.word	0x000272c0
   1341c:	000275ac 	.word	0x000275ac
   13420:	000277d4 	.word	0x000277d4

00013424 <ll_rx_get>:
{
   13424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13428:	b085      	sub	sp, #20
   1342a:	e9cd 0100 	strd	r0, r1, [sp]
   1342e:	4c5d      	ldr	r4, [pc, #372]	; (135a4 <ll_rx_get+0x180>)
				mem_release(link, &mem_link_rx.free);
   13430:	4d5d      	ldr	r5, [pc, #372]	; (135a8 <ll_rx_get+0x184>)
   13432:	f8df 9178 	ldr.w	r9, [pc, #376]	; 135ac <ll_rx_get+0x188>
	*node_rx = NULL;
   13436:	9a00      	ldr	r2, [sp, #0]
   13438:	2300      	movs	r3, #0
   1343a:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1343c:	e9d9 0100 	ldrd	r0, r1, [r9]
   13440:	aa03      	add	r2, sp, #12
   13442:	f7fc f87b 	bl	f53c <memq_peek>
	if (link) {
   13446:	4607      	mov	r7, r0
   13448:	2800      	cmp	r0, #0
   1344a:	f000 8097 	beq.w	1357c <ll_rx_get+0x158>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1344e:	9b03      	ldr	r3, [sp, #12]
   13450:	4957      	ldr	r1, [pc, #348]	; (135b0 <ll_rx_get+0x18c>)
   13452:	781a      	ldrb	r2, [r3, #0]
   13454:	9801      	ldr	r0, [sp, #4]
   13456:	f7ff fb85 	bl	12b64 <tx_cmplt_get>
		if (!cmplt) {
   1345a:	2800      	cmp	r0, #0
   1345c:	f040 8093 	bne.w	13586 <ll_rx_get+0x162>
			f = mfifo_tx_ack.f;
   13460:	78a3      	ldrb	r3, [r4, #2]
   13462:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   13466:	78e2      	ldrb	r2, [r4, #3]
   13468:	4606      	mov	r6, r0
   1346a:	f10d 0109 	add.w	r1, sp, #9
   1346e:	f10d 000a 	add.w	r0, sp, #10
   13472:	f7ff fb77 	bl	12b64 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   13476:	ea46 0200 	orr.w	r2, r6, r0
   1347a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1347e:	d1f2      	bne.n	13466 <ll_rx_get+0x42>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   13480:	9b03      	ldr	r3, [sp, #12]
   13482:	7919      	ldrb	r1, [r3, #4]
   13484:	2903      	cmp	r1, #3
   13486:	f040 8086 	bne.w	13596 <ll_rx_get+0x172>
				(void)memq_dequeue(memq_ll_rx.tail,
   1348a:	4948      	ldr	r1, [pc, #288]	; (135ac <ll_rx_get+0x188>)
   1348c:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13490:	f7fc f85c 	bl	f54c <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   13494:	4947      	ldr	r1, [pc, #284]	; (135b4 <ll_rx_get+0x190>)
   13496:	4638      	mov	r0, r7
   13498:	f7fb fffc 	bl	f494 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1349c:	782b      	ldrb	r3, [r5, #0]
   1349e:	2b06      	cmp	r3, #6
   134a0:	d85d      	bhi.n	1355e <ll_rx_get+0x13a>
	mem_link_rx.quota_pdu += delta;
   134a2:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   134a4:	4944      	ldr	r1, [pc, #272]	; (135b8 <ll_rx_get+0x194>)
   134a6:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   134a8:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   134aa:	f7fb fff3 	bl	f494 <mem_release>
	while (mem_link_rx.quota_pdu &&
   134ae:	782b      	ldrb	r3, [r5, #0]
   134b0:	2b00      	cmp	r3, #0
   134b2:	d0c0      	beq.n	13436 <ll_rx_get+0x12>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   134b4:	4f41      	ldr	r7, [pc, #260]	; (135bc <ll_rx_get+0x198>)
		link = mem_acquire(&mem_link_rx.free);
   134b6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 135b4 <ll_rx_get+0x190>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   134ba:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   134bc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 135b8 <ll_rx_get+0x194>
	if (last == count) {
   134c0:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   134c2:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   134c4:	3601      	adds	r6, #1
   134c6:	b2f6      	uxtb	r6, r6
		last = 0U;
   134c8:	42b2      	cmp	r2, r6
   134ca:	bf08      	it	eq
   134cc:	2600      	moveq	r6, #0
	if (last == first) {
   134ce:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   134d0:	4640      	mov	r0, r8
   134d2:	d01f      	beq.n	13514 <ll_rx_get+0xf0>
   134d4:	f7fb ffc8 	bl	f468 <mem_acquire>
   134d8:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   134da:	4650      	mov	r0, sl
		if (!link) {
   134dc:	f1bb 0f00 	cmp.w	fp, #0
   134e0:	d018      	beq.n	13514 <ll_rx_get+0xf0>
		rx = mem_acquire(&mem_pdu_rx.free);
   134e2:	f7fb ffc1 	bl	f468 <mem_acquire>
		if (!rx) {
   134e6:	b188      	cbz	r0, 1350c <ll_rx_get+0xe8>
		link->mem = NULL;
   134e8:	2300      	movs	r3, #0
   134ea:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   134ee:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   134f2:	78f9      	ldrb	r1, [r7, #3]
   134f4:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   134f6:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   134f8:	fb01 7202 	mla	r2, r1, r2, r7
   134fc:	3b01      	subs	r3, #1
   134fe:	b2db      	uxtb	r3, r3
   13500:	6050      	str	r0, [r2, #4]
   13502:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13504:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   13506:	2b00      	cmp	r3, #0
   13508:	d1da      	bne.n	134c0 <ll_rx_get+0x9c>
   1350a:	e794      	b.n	13436 <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
   1350c:	4929      	ldr	r1, [pc, #164]	; (135b4 <ll_rx_get+0x190>)
   1350e:	4658      	mov	r0, fp
   13510:	f7fb ffc0 	bl	f494 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13514:	782b      	ldrb	r3, [r5, #0]
   13516:	2b00      	cmp	r3, #0
   13518:	d08d      	beq.n	13436 <ll_rx_get+0x12>
   1351a:	4f29      	ldr	r7, [pc, #164]	; (135c0 <ll_rx_get+0x19c>)
	last = last + 1;
   1351c:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   1351e:	787a      	ldrb	r2, [r7, #1]
   13520:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13522:	3601      	adds	r6, #1
   13524:	b2f6      	uxtb	r6, r6
		last = 0U;
   13526:	42b2      	cmp	r2, r6
   13528:	bf08      	it	eq
   1352a:	2600      	moveq	r6, #0
	if (last == first) {
   1352c:	429e      	cmp	r6, r3
   1352e:	d082      	beq.n	13436 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   13530:	4820      	ldr	r0, [pc, #128]	; (135b4 <ll_rx_get+0x190>)
   13532:	f7fb ff99 	bl	f468 <mem_acquire>
		if (!link) {
   13536:	4680      	mov	r8, r0
   13538:	2800      	cmp	r0, #0
   1353a:	f43f af7c 	beq.w	13436 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   1353e:	481e      	ldr	r0, [pc, #120]	; (135b8 <ll_rx_get+0x194>)
   13540:	f7fb ff92 	bl	f468 <mem_acquire>
		if (!rx) {
   13544:	b310      	cbz	r0, 1358c <ll_rx_get+0x168>
		rx->link = link;
   13546:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1354a:	78fb      	ldrb	r3, [r7, #3]
   1354c:	783a      	ldrb	r2, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1354e:	fb03 7202 	mla	r2, r3, r2, r7
	mem_link_rx.quota_pdu += delta;
   13552:	782b      	ldrb	r3, [r5, #0]
   13554:	6050      	str	r0, [r2, #4]
   13556:	3b01      	subs	r3, #1
	*last = idx; /* Commit: Update write index */
   13558:	70fe      	strb	r6, [r7, #3]
   1355a:	702b      	strb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1355c:	e76b      	b.n	13436 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1355e:	4a19      	ldr	r2, [pc, #100]	; (135c4 <ll_rx_get+0x1a0>)
   13560:	4919      	ldr	r1, [pc, #100]	; (135c8 <ll_rx_get+0x1a4>)
   13562:	481a      	ldr	r0, [pc, #104]	; (135cc <ll_rx_get+0x1a8>)
   13564:	f240 33ca 	movw	r3, #970	; 0x3ca
   13568:	f00d fa39 	bl	209de <printk>
   1356c:	4040      	eors	r0, r0
   1356e:	f380 8811 	msr	BASEPRI, r0
   13572:	f04f 0003 	mov.w	r0, #3
   13576:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   13578:	782b      	ldrb	r3, [r5, #0]
   1357a:	e792      	b.n	134a2 <ll_rx_get+0x7e>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   1357c:	78e2      	ldrb	r2, [r4, #3]
   1357e:	490c      	ldr	r1, [pc, #48]	; (135b0 <ll_rx_get+0x18c>)
   13580:	9801      	ldr	r0, [sp, #4]
   13582:	f7ff faef 	bl	12b64 <tx_cmplt_get>
}
   13586:	b005      	add	sp, #20
   13588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   1358c:	4909      	ldr	r1, [pc, #36]	; (135b4 <ll_rx_get+0x190>)
   1358e:	4640      	mov	r0, r8
   13590:	f7fb ff80 	bl	f494 <mem_release>
			break;
   13594:	e74f      	b.n	13436 <ll_rx_get+0x12>
			*node_rx = rx;
   13596:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13598:	4610      	mov	r0, r2
			*node_rx = rx;
   1359a:	600b      	str	r3, [r1, #0]
}
   1359c:	b005      	add	sp, #20
   1359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a2:	bf00      	nop
   135a4:	2000044c 	.word	0x2000044c
   135a8:	20001fe0 	.word	0x20001fe0
   135ac:	20002314 	.word	0x20002314
   135b0:	2000044e 	.word	0x2000044e
   135b4:	20001fe4 	.word	0x20001fe4
   135b8:	20002040 	.word	0x20002040
   135bc:	200002fc 	.word	0x200002fc
   135c0:	20000310 	.word	0x20000310
   135c4:	0002753c 	.word	0x0002753c
   135c8:	000275b4 	.word	0x000275b4
   135cc:	000272c0 	.word	0x000272c0

000135d0 <ll_rx_dequeue>:
{
   135d0:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   135d2:	495c      	ldr	r1, [pc, #368]	; (13744 <ll_rx_dequeue+0x174>)
{
   135d4:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   135d6:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   135d8:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   135da:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   135dc:	aa01      	add	r2, sp, #4
   135de:	f7fb ffb5 	bl	f54c <memq_dequeue>
	LL_ASSERT(link);
   135e2:	4604      	mov	r4, r0
   135e4:	2800      	cmp	r0, #0
   135e6:	d052      	beq.n	1368e <ll_rx_dequeue+0xbe>
	mem_release(link, &mem_link_rx.free);
   135e8:	4957      	ldr	r1, [pc, #348]	; (13748 <ll_rx_dequeue+0x178>)
   135ea:	4620      	mov	r0, r4
   135ec:	f7fb ff52 	bl	f494 <mem_release>
	switch (rx->type) {
   135f0:	9a01      	ldr	r2, [sp, #4]
   135f2:	7913      	ldrb	r3, [r2, #4]
   135f4:	2b10      	cmp	r3, #16
   135f6:	d80e      	bhi.n	13616 <ll_rx_dequeue+0x46>
   135f8:	e8df f003 	tbb	[pc, r3]
   135fc:	0d090d09 	.word	0x0d090d09
   13600:	0d0d0d09 	.word	0x0d0d0d09
   13604:	091c0d0d 	.word	0x091c0d0d
   13608:	09090909 	.word	0x09090909
   1360c:	09          	.byte	0x09
   1360d:	00          	.byte	0x00
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1360e:	2b00      	cmp	r3, #0
   13610:	d04b      	beq.n	136aa <ll_rx_dequeue+0xda>
}
   13612:	b002      	add	sp, #8
   13614:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   13616:	4a4d      	ldr	r2, [pc, #308]	; (1374c <ll_rx_dequeue+0x17c>)
   13618:	494d      	ldr	r1, [pc, #308]	; (13750 <ll_rx_dequeue+0x180>)
   1361a:	484e      	ldr	r0, [pc, #312]	; (13754 <ll_rx_dequeue+0x184>)
   1361c:	f44f 7342 	mov.w	r3, #776	; 0x308
   13620:	f00d f9dd 	bl	209de <printk>
   13624:	4040      	eors	r0, r0
   13626:	f380 8811 	msr	BASEPRI, r0
   1362a:	f04f 0003 	mov.w	r0, #3
   1362e:	df02      	svc	2
}
   13630:	b002      	add	sp, #8
   13632:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   13634:	7f13      	ldrb	r3, [r2, #28]
   13636:	2b3c      	cmp	r3, #60	; 0x3c
   13638:	d046      	beq.n	136c8 <ll_rx_dequeue+0xf8>
   1363a:	7f53      	ldrb	r3, [r2, #29]
   1363c:	b1f3      	cbz	r3, 1367c <ll_rx_dequeue+0xac>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1363e:	6893      	ldr	r3, [r2, #8]
   13640:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   13642:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   13646:	b128      	cbz	r0, 13654 <ll_rx_dequeue+0x84>
					adv->node_rx_cc_free = NULL;
   13648:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   1364a:	4943      	ldr	r1, [pc, #268]	; (13758 <ll_rx_dequeue+0x188>)
					adv->node_rx_cc_free = NULL;
   1364c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					mem_release(rx_free, &mem_pdu_rx.free);
   13650:	f7fb ff20 	bl	f494 <mem_release>
			adv->is_enabled = 0U;
   13654:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   13658:	f36f 0300 	bfc	r3, #0, #1
   1365c:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
			      (ull_scan_is_enabled(0) << 1)) |
   13660:	2000      	movs	r0, #0
   13662:	f001 f9e7 	bl	14a34 <ull_scan_is_enabled>
   13666:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   13668:	2000      	movs	r0, #0
   1366a:	f000 ff9d 	bl	145a8 <ull_adv_is_enabled>
			if (!bm) {
   1366e:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   13672:	d1ce      	bne.n	13612 <ll_rx_dequeue+0x42>
				ull_filter_adv_scan_state_cb(0);
   13674:	f005 fcee 	bl	19054 <ull_filter_adv_scan_state_cb>
}
   13678:	b002      	add	sp, #8
   1367a:	bd70      	pop	{r4, r5, r6, pc}
			struct ll_scan_set *scan = (void *)HDR_LLL2EVT(lll);
   1367c:	6892      	ldr	r2, [r2, #8]
   1367e:	6812      	ldr	r2, [r2, #0]
			scan->is_enabled = 0U;
   13680:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
   13684:	f363 0100 	bfi	r1, r3, #0, #1
   13688:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
   1368c:	e7e8      	b.n	13660 <ll_rx_dequeue+0x90>
	LL_ASSERT(link);
   1368e:	4a2f      	ldr	r2, [pc, #188]	; (1374c <ll_rx_dequeue+0x17c>)
   13690:	4932      	ldr	r1, [pc, #200]	; (1375c <ll_rx_dequeue+0x18c>)
   13692:	4830      	ldr	r0, [pc, #192]	; (13754 <ll_rx_dequeue+0x184>)
   13694:	f240 2336 	movw	r3, #566	; 0x236
   13698:	f00d f9a1 	bl	209de <printk>
   1369c:	4040      	eors	r0, r0
   1369e:	f380 8811 	msr	BASEPRI, r0
   136a2:	f04f 0003 	mov.w	r0, #3
   136a6:	df02      	svc	2
   136a8:	e79e      	b.n	135e8 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   136aa:	4a28      	ldr	r2, [pc, #160]	; (1374c <ll_rx_dequeue+0x17c>)
   136ac:	492c      	ldr	r1, [pc, #176]	; (13760 <ll_rx_dequeue+0x190>)
   136ae:	4829      	ldr	r0, [pc, #164]	; (13754 <ll_rx_dequeue+0x184>)
   136b0:	f44f 7341 	mov.w	r3, #772	; 0x304
   136b4:	f00d f993 	bl	209de <printk>
   136b8:	4040      	eors	r0, r0
   136ba:	f380 8811 	msr	BASEPRI, r0
   136be:	f04f 0003 	mov.w	r0, #3
   136c2:	df02      	svc	2
}
   136c4:	b002      	add	sp, #8
   136c6:	bd70      	pop	{r4, r5, r6, pc}
			struct lll_adv *lll = ftr->param;
   136c8:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   136ca:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   136cc:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   136ce:	b1ed      	cbz	r5, 1370c <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
   136d0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
				lll->conn = NULL;
   136d2:	2200      	movs	r2, #0
   136d4:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   136d6:	b163      	cbz	r3, 136f2 <ll_rx_dequeue+0x122>
   136d8:	4a1c      	ldr	r2, [pc, #112]	; (1374c <ll_rx_dequeue+0x17c>)
   136da:	4922      	ldr	r1, [pc, #136]	; (13764 <ll_rx_dequeue+0x194>)
   136dc:	481d      	ldr	r0, [pc, #116]	; (13754 <ll_rx_dequeue+0x184>)
   136de:	f240 2397 	movw	r3, #663	; 0x297
   136e2:	f00d f97c 	bl	209de <printk>
   136e6:	4040      	eors	r0, r0
   136e8:	f380 8811 	msr	BASEPRI, r0
   136ec:	f04f 0003 	mov.w	r0, #3
   136f0:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   136f2:	f105 0154 	add.w	r1, r5, #84	; 0x54
   136f6:	f105 0050 	add.w	r0, r5, #80	; 0x50
   136fa:	f7fb ff0b 	bl	f514 <memq_deinit>
				LL_ASSERT(link);
   136fe:	4606      	mov	r6, r0
   13700:	b190      	cbz	r0, 13728 <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
   13702:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   13704:	662e      	str	r6, [r5, #96]	; 0x60
				ll_conn_release(conn);
   13706:	f001 fdf7 	bl	152f8 <ll_conn_release>
   1370a:	e7a3      	b.n	13654 <ll_rx_dequeue+0x84>
				LL_ASSERT(conn_lll);
   1370c:	4a0f      	ldr	r2, [pc, #60]	; (1374c <ll_rx_dequeue+0x17c>)
   1370e:	4916      	ldr	r1, [pc, #88]	; (13768 <ll_rx_dequeue+0x198>)
   13710:	4810      	ldr	r0, [pc, #64]	; (13754 <ll_rx_dequeue+0x184>)
   13712:	f44f 7325 	mov.w	r3, #660	; 0x294
   13716:	f00d f962 	bl	209de <printk>
   1371a:	4040      	eors	r0, r0
   1371c:	f380 8811 	msr	BASEPRI, r0
   13720:	f04f 0003 	mov.w	r0, #3
   13724:	df02      	svc	2
   13726:	e7d3      	b.n	136d0 <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
   13728:	4a08      	ldr	r2, [pc, #32]	; (1374c <ll_rx_dequeue+0x17c>)
   1372a:	490c      	ldr	r1, [pc, #48]	; (1375c <ll_rx_dequeue+0x18c>)
   1372c:	4809      	ldr	r0, [pc, #36]	; (13754 <ll_rx_dequeue+0x184>)
   1372e:	f240 239a 	movw	r3, #666	; 0x29a
   13732:	f00d f954 	bl	209de <printk>
   13736:	4040      	eors	r0, r0
   13738:	f380 8811 	msr	BASEPRI, r0
   1373c:	f04f 0003 	mov.w	r0, #3
   13740:	df02      	svc	2
   13742:	e7de      	b.n	13702 <ll_rx_dequeue+0x132>
   13744:	20002314 	.word	0x20002314
   13748:	20001fe4 	.word	0x20001fe4
   1374c:	0002753c 	.word	0x0002753c
   13750:	00027358 	.word	0x00027358
   13754:	000272c0 	.word	0x000272c0
   13758:	20002040 	.word	0x20002040
   1375c:	00027854 	.word	0x00027854
   13760:	0002760c 	.word	0x0002760c
   13764:	000275f4 	.word	0x000275f4
   13768:	000275e8 	.word	0x000275e8

0001376c <ll_rx_mem_release>:
{
   1376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   13770:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   13772:	4da7      	ldr	r5, [pc, #668]	; (13a10 <ll_rx_mem_release+0x2a4>)
{
   13774:	b083      	sub	sp, #12
   13776:	4683      	mov	fp, r0
	while (rx) {
   13778:	2c00      	cmp	r4, #0
   1377a:	d045      	beq.n	13808 <ll_rx_mem_release+0x9c>
			LL_ASSERT(0);
   1377c:	4fa5      	ldr	r7, [pc, #660]	; (13a14 <ll_rx_mem_release+0x2a8>)
   1377e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 13a18 <ll_rx_mem_release+0x2ac>
   13782:	4ea6      	ldr	r6, [pc, #664]	; (13a1c <ll_rx_mem_release+0x2b0>)
		rx = rx->next;
   13784:	46a0      	mov	r8, r4
   13786:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   13788:	f898 3004 	ldrb.w	r3, [r8, #4]
   1378c:	2b10      	cmp	r3, #16
   1378e:	d86e      	bhi.n	1386e <ll_rx_mem_release+0x102>
   13790:	e8df f003 	tbb	[pc, r3]
   13794:	6d216d21 	.word	0x6d216d21
   13798:	6d6d6d21 	.word	0x6d6d6d21
   1379c:	7e096d6d 	.word	0x7e096d6d
   137a0:	21212121 	.word	0x21212121
   137a4:	21          	.byte	0x21
   137a5:	00          	.byte	0x00
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   137a6:	f898 301c 	ldrb.w	r3, [r8, #28]
   137aa:	2b3c      	cmp	r3, #60	; 0x3c
   137ac:	f000 8119 	beq.w	139e2 <ll_rx_mem_release+0x276>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   137b0:	2b02      	cmp	r3, #2
   137b2:	f000 80d8 	beq.w	13966 <ll_rx_mem_release+0x1fa>
				LL_ASSERT(!cc->status);
   137b6:	b1e3      	cbz	r3, 137f2 <ll_rx_mem_release+0x86>
   137b8:	4999      	ldr	r1, [pc, #612]	; (13a20 <ll_rx_mem_release+0x2b4>)
   137ba:	f44f 7358 	mov.w	r3, #864	; 0x360
   137be:	463a      	mov	r2, r7
   137c0:	4630      	mov	r0, r6
   137c2:	f00d f90c 	bl	209de <printk>
   137c6:	4040      	eors	r0, r0
   137c8:	f380 8811 	msr	BASEPRI, r0
   137cc:	f04f 0003 	mov.w	r0, #3
   137d0:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   137d2:	f898 3004 	ldrb.w	r3, [r8, #4]
   137d6:	b963      	cbnz	r3, 137f2 <ll_rx_mem_release+0x86>
   137d8:	4992      	ldr	r1, [pc, #584]	; (13a24 <ll_rx_mem_release+0x2b8>)
   137da:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   137de:	463a      	mov	r2, r7
   137e0:	4630      	mov	r0, r6
   137e2:	f00d f8fc 	bl	209de <printk>
   137e6:	4040      	eors	r0, r0
   137e8:	f380 8811 	msr	BASEPRI, r0
   137ec:	f04f 0003 	mov.w	r0, #3
   137f0:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   137f2:	782b      	ldrb	r3, [r5, #0]
   137f4:	2b06      	cmp	r3, #6
   137f6:	d872      	bhi.n	138de <ll_rx_mem_release+0x172>
	mem_link_rx.quota_pdu += delta;
   137f8:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   137fa:	498b      	ldr	r1, [pc, #556]	; (13a28 <ll_rx_mem_release+0x2bc>)
	mem_link_rx.quota_pdu += delta;
   137fc:	702b      	strb	r3, [r5, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   137fe:	4640      	mov	r0, r8
   13800:	f7fb fe48 	bl	f494 <mem_release>
	while (rx) {
   13804:	2c00      	cmp	r4, #0
   13806:	d1bd      	bne.n	13784 <ll_rx_mem_release+0x18>
	*node_rx = rx;
   13808:	2700      	movs	r7, #0
   1380a:	f8cb 7000 	str.w	r7, [fp]
	while (mem_link_rx.quota_pdu &&
   1380e:	782b      	ldrb	r3, [r5, #0]
   13810:	b353      	cbz	r3, 13868 <ll_rx_mem_release+0xfc>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13812:	4e86      	ldr	r6, [pc, #536]	; (13a2c <ll_rx_mem_release+0x2c0>)
		link = mem_acquire(&mem_link_rx.free);
   13814:	f8df 8218 	ldr.w	r8, [pc, #536]	; 13a30 <ll_rx_mem_release+0x2c4>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13818:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1381a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 13a28 <ll_rx_mem_release+0x2bc>
	if (last == count) {
   1381e:	7872      	ldrb	r2, [r6, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13820:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   13822:	3401      	adds	r4, #1
   13824:	b2e4      	uxtb	r4, r4
		last = 0U;
   13826:	42a2      	cmp	r2, r4
   13828:	bf08      	it	eq
   1382a:	2400      	moveq	r4, #0
	if (last == first) {
   1382c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1382e:	4640      	mov	r0, r8
   13830:	d068      	beq.n	13904 <ll_rx_mem_release+0x198>
   13832:	f7fb fe19 	bl	f468 <mem_acquire>
   13836:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13838:	4648      	mov	r0, r9
		if (!link) {
   1383a:	f1ba 0f00 	cmp.w	sl, #0
   1383e:	d061      	beq.n	13904 <ll_rx_mem_release+0x198>
		rx = mem_acquire(&mem_pdu_rx.free);
   13840:	f7fb fe12 	bl	f468 <mem_acquire>
		if (!rx) {
   13844:	2800      	cmp	r0, #0
   13846:	d059      	beq.n	138fc <ll_rx_mem_release+0x190>
		link->mem = NULL;
   13848:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   1384c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13850:	78f1      	ldrb	r1, [r6, #3]
   13852:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   13854:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13856:	fb01 6202 	mla	r2, r1, r2, r6
   1385a:	3b01      	subs	r3, #1
   1385c:	b2db      	uxtb	r3, r3
   1385e:	6050      	str	r0, [r2, #4]
   13860:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13862:	70f4      	strb	r4, [r6, #3]
	while (mem_link_rx.quota_pdu &&
   13864:	2b00      	cmp	r3, #0
   13866:	d1da      	bne.n	1381e <ll_rx_mem_release+0xb2>
}
   13868:	b003      	add	sp, #12
   1386a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   1386e:	f240 33be 	movw	r3, #958	; 0x3be
   13872:	463a      	mov	r2, r7
   13874:	4649      	mov	r1, r9
   13876:	4630      	mov	r0, r6
   13878:	f00d f8b1 	bl	209de <printk>
   1387c:	4040      	eors	r0, r0
   1387e:	f380 8811 	msr	BASEPRI, r0
   13882:	f04f 0003 	mov.w	r0, #3
   13886:	df02      	svc	2
	while (rx) {
   13888:	2c00      	cmp	r4, #0
   1388a:	f47f af7b 	bne.w	13784 <ll_rx_mem_release+0x18>
   1388e:	e7bb      	b.n	13808 <ll_rx_mem_release+0x9c>
			conn = ll_conn_get(rx_free->handle);
   13890:	f8b8 0006 	ldrh.w	r0, [r8, #6]
   13894:	f001 fd3e 	bl	15314 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   13898:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
			conn = ll_conn_get(rx_free->handle);
   1389a:	4680      	mov	r8, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1389c:	b163      	cbz	r3, 138b8 <ll_rx_mem_release+0x14c>
   1389e:	4965      	ldr	r1, [pc, #404]	; (13a34 <ll_rx_mem_release+0x2c8>)
   138a0:	f240 33b1 	movw	r3, #945	; 0x3b1
   138a4:	463a      	mov	r2, r7
   138a6:	4630      	mov	r0, r6
   138a8:	f00d f899 	bl	209de <printk>
   138ac:	4040      	eors	r0, r0
   138ae:	f380 8811 	msr	BASEPRI, r0
   138b2:	f04f 0003 	mov.w	r0, #3
   138b6:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   138b8:	f108 0170 	add.w	r1, r8, #112	; 0x70
   138bc:	f108 006c 	add.w	r0, r8, #108	; 0x6c
   138c0:	f7fb fe28 	bl	f514 <memq_deinit>
			LL_ASSERT(link);
   138c4:	4682      	mov	sl, r0
   138c6:	2800      	cmp	r0, #0
   138c8:	f000 8093 	beq.w	139f2 <ll_rx_mem_release+0x286>
			conn->lll.link_tx_free = link;
   138cc:	f8c8 a07c 	str.w	sl, [r8, #124]	; 0x7c
			ll_conn_release(conn);
   138d0:	4640      	mov	r0, r8
   138d2:	f001 fd11 	bl	152f8 <ll_conn_release>
	while (rx) {
   138d6:	2c00      	cmp	r4, #0
   138d8:	f47f af54 	bne.w	13784 <ll_rx_mem_release+0x18>
   138dc:	e794      	b.n	13808 <ll_rx_mem_release+0x9c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   138de:	4956      	ldr	r1, [pc, #344]	; (13a38 <ll_rx_mem_release+0x2cc>)
   138e0:	f240 33ca 	movw	r3, #970	; 0x3ca
   138e4:	463a      	mov	r2, r7
   138e6:	4630      	mov	r0, r6
   138e8:	f00d f879 	bl	209de <printk>
   138ec:	4040      	eors	r0, r0
   138ee:	f380 8811 	msr	BASEPRI, r0
   138f2:	f04f 0003 	mov.w	r0, #3
   138f6:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   138f8:	782b      	ldrb	r3, [r5, #0]
   138fa:	e77d      	b.n	137f8 <ll_rx_mem_release+0x8c>
			mem_release(link, &mem_link_rx.free);
   138fc:	494c      	ldr	r1, [pc, #304]	; (13a30 <ll_rx_mem_release+0x2c4>)
   138fe:	4650      	mov	r0, sl
   13900:	f7fb fdc8 	bl	f494 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   13904:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13906:	1e5f      	subs	r7, r3, #1
   13908:	b2ff      	uxtb	r7, r7
   1390a:	2b00      	cmp	r3, #0
   1390c:	d0ac      	beq.n	13868 <ll_rx_mem_release+0xfc>
   1390e:	4e4b      	ldr	r6, [pc, #300]	; (13a3c <ll_rx_mem_release+0x2d0>)
		link = mem_acquire(&mem_link_rx.free);
   13910:	f8df 811c 	ldr.w	r8, [pc, #284]	; 13a30 <ll_rx_mem_release+0x2c4>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13914:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13916:	f8df 9110 	ldr.w	r9, [pc, #272]	; 13a28 <ll_rx_mem_release+0x2bc>
	if (last == count) {
   1391a:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1391c:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   1391e:	3401      	adds	r4, #1
   13920:	b2e4      	uxtb	r4, r4
		last = 0U;
   13922:	42a2      	cmp	r2, r4
   13924:	bf08      	it	eq
   13926:	2400      	moveq	r4, #0
	if (last == first) {
   13928:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1392a:	4640      	mov	r0, r8
   1392c:	d09c      	beq.n	13868 <ll_rx_mem_release+0xfc>
   1392e:	f7fb fd9b 	bl	f468 <mem_acquire>
   13932:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13934:	4648      	mov	r0, r9
		if (!link) {
   13936:	f1ba 0f00 	cmp.w	sl, #0
   1393a:	d095      	beq.n	13868 <ll_rx_mem_release+0xfc>
		rx = mem_acquire(&mem_pdu_rx.free);
   1393c:	f7fb fd94 	bl	f468 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13940:	3f01      	subs	r7, #1
   13942:	b2ff      	uxtb	r7, r7
		if (!rx) {
   13944:	2800      	cmp	r0, #0
   13946:	f000 809b 	beq.w	13a80 <ll_rx_mem_release+0x314>
		rx->link = link;
   1394a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1394e:	78f1      	ldrb	r1, [r6, #3]
   13950:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   13952:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13954:	fb01 6202 	mla	r2, r1, r2, r6
   13958:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1395a:	2fff      	cmp	r7, #255	; 0xff
   1395c:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   1395e:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13960:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13962:	d1da      	bne.n	1391a <ll_rx_mem_release+0x1ae>
   13964:	e780      	b.n	13868 <ll_rx_mem_release+0xfc>
				struct ll_scan_set *scan =
   13966:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1396a:	f8d3 a000 	ldr.w	sl, [r3]
				conn_lll = scan->lll.conn;
   1396e:	f8da 8024 	ldr.w	r8, [sl, #36]	; 0x24
				LL_ASSERT(conn_lll);
   13972:	f1b8 0f00 	cmp.w	r8, #0
   13976:	d075      	beq.n	13a64 <ll_rx_mem_release+0x2f8>
				LL_ASSERT(!conn_lll->link_tx_free);
   13978:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
				scan->lll.conn = NULL;
   1397c:	2200      	movs	r2, #0
   1397e:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				LL_ASSERT(!conn_lll->link_tx_free);
   13982:	b163      	cbz	r3, 1399e <ll_rx_mem_release+0x232>
   13984:	492e      	ldr	r1, [pc, #184]	; (13a40 <ll_rx_mem_release+0x2d4>)
   13986:	f240 3349 	movw	r3, #841	; 0x349
   1398a:	463a      	mov	r2, r7
   1398c:	4630      	mov	r0, r6
   1398e:	f00d f826 	bl	209de <printk>
   13992:	4040      	eors	r0, r0
   13994:	f380 8811 	msr	BASEPRI, r0
   13998:	f04f 0003 	mov.w	r0, #3
   1399c:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1399e:	f108 0154 	add.w	r1, r8, #84	; 0x54
   139a2:	f108 0050 	add.w	r0, r8, #80	; 0x50
   139a6:	f7fb fdb5 	bl	f514 <memq_deinit>
				LL_ASSERT(link);
   139aa:	9001      	str	r0, [sp, #4]
   139ac:	2800      	cmp	r0, #0
   139ae:	d04b      	beq.n	13a48 <ll_rx_mem_release+0x2dc>
				conn_lll->link_tx_free = link;
   139b0:	9b01      	ldr	r3, [sp, #4]
				ll_conn_release(conn);
   139b2:	f8d8 0000 	ldr.w	r0, [r8]
				conn_lll->link_tx_free = link;
   139b6:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
				ll_conn_release(conn);
   139ba:	f001 fc9d 	bl	152f8 <ll_conn_release>
				scan->is_enabled = 0U;
   139be:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
   139c2:	f36f 0300 	bfc	r3, #0, #1
   139c6:	f88a 3048 	strb.w	r3, [sl, #72]	; 0x48
				if (!ull_adv_is_enabled_get(0))
   139ca:	2000      	movs	r0, #0
   139cc:	f000 fdde 	bl	1458c <ull_adv_is_enabled_get>
   139d0:	2800      	cmp	r0, #0
   139d2:	f47f af17 	bne.w	13804 <ll_rx_mem_release+0x98>
					ull_filter_adv_scan_state_cb(0);
   139d6:	f005 fb3d 	bl	19054 <ull_filter_adv_scan_state_cb>
	while (rx) {
   139da:	2c00      	cmp	r4, #0
   139dc:	f47f aed2 	bne.w	13784 <ll_rx_mem_release+0x18>
   139e0:	e712      	b.n	13808 <ll_rx_mem_release+0x9c>
				mem_release(rx_free, &mem_pdu_rx.free);
   139e2:	4911      	ldr	r1, [pc, #68]	; (13a28 <ll_rx_mem_release+0x2bc>)
   139e4:	4640      	mov	r0, r8
   139e6:	f7fb fd55 	bl	f494 <mem_release>
	while (rx) {
   139ea:	2c00      	cmp	r4, #0
   139ec:	f47f aeca 	bne.w	13784 <ll_rx_mem_release+0x18>
   139f0:	e70a      	b.n	13808 <ll_rx_mem_release+0x9c>
			LL_ASSERT(link);
   139f2:	4914      	ldr	r1, [pc, #80]	; (13a44 <ll_rx_mem_release+0x2d8>)
   139f4:	f44f 736d 	mov.w	r3, #948	; 0x3b4
   139f8:	463a      	mov	r2, r7
   139fa:	4630      	mov	r0, r6
   139fc:	f00c ffef 	bl	209de <printk>
   13a00:	4040      	eors	r0, r0
   13a02:	f380 8811 	msr	BASEPRI, r0
   13a06:	f04f 0003 	mov.w	r0, #3
   13a0a:	df02      	svc	2
   13a0c:	e75e      	b.n	138cc <ll_rx_mem_release+0x160>
   13a0e:	bf00      	nop
   13a10:	20001fe0 	.word	0x20001fe0
   13a14:	0002753c 	.word	0x0002753c
   13a18:	00027358 	.word	0x00027358
   13a1c:	000272c0 	.word	0x000272c0
   13a20:	0002762c 	.word	0x0002762c
   13a24:	00027638 	.word	0x00027638
   13a28:	20002040 	.word	0x20002040
   13a2c:	200002fc 	.word	0x200002fc
   13a30:	20001fe4 	.word	0x20001fe4
   13a34:	0002765c 	.word	0x0002765c
   13a38:	000275b4 	.word	0x000275b4
   13a3c:	20000310 	.word	0x20000310
   13a40:	000275f4 	.word	0x000275f4
   13a44:	00027854 	.word	0x00027854
				LL_ASSERT(link);
   13a48:	4911      	ldr	r1, [pc, #68]	; (13a90 <ll_rx_mem_release+0x324>)
   13a4a:	f44f 7353 	mov.w	r3, #844	; 0x34c
   13a4e:	463a      	mov	r2, r7
   13a50:	4630      	mov	r0, r6
   13a52:	f00c ffc4 	bl	209de <printk>
   13a56:	4040      	eors	r0, r0
   13a58:	f380 8811 	msr	BASEPRI, r0
   13a5c:	f04f 0003 	mov.w	r0, #3
   13a60:	df02      	svc	2
   13a62:	e7a5      	b.n	139b0 <ll_rx_mem_release+0x244>
				LL_ASSERT(conn_lll);
   13a64:	490b      	ldr	r1, [pc, #44]	; (13a94 <ll_rx_mem_release+0x328>)
   13a66:	f240 3346 	movw	r3, #838	; 0x346
   13a6a:	463a      	mov	r2, r7
   13a6c:	4630      	mov	r0, r6
   13a6e:	f00c ffb6 	bl	209de <printk>
   13a72:	4040      	eors	r0, r0
   13a74:	f380 8811 	msr	BASEPRI, r0
   13a78:	f04f 0003 	mov.w	r0, #3
   13a7c:	df02      	svc	2
   13a7e:	e77b      	b.n	13978 <ll_rx_mem_release+0x20c>
			mem_release(link, &mem_link_rx.free);
   13a80:	4905      	ldr	r1, [pc, #20]	; (13a98 <ll_rx_mem_release+0x32c>)
   13a82:	4650      	mov	r0, sl
}
   13a84:	b003      	add	sp, #12
   13a86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   13a8a:	f7fb bd03 	b.w	f494 <mem_release>
   13a8e:	bf00      	nop
   13a90:	00027854 	.word	0x00027854
   13a94:	000275e8 	.word	0x000275e8
   13a98:	20001fe4 	.word	0x20001fe4

00013a9c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   13a9c:	4801      	ldr	r0, [pc, #4]	; (13aa4 <ll_rx_link_alloc+0x8>)
   13a9e:	f7fb bce3 	b.w	f468 <mem_acquire>
   13aa2:	bf00      	nop
   13aa4:	20001fe4 	.word	0x20001fe4

00013aa8 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   13aa8:	4901      	ldr	r1, [pc, #4]	; (13ab0 <ll_rx_link_release+0x8>)
   13aaa:	f7fb bcf3 	b.w	f494 <mem_release>
   13aae:	bf00      	nop
   13ab0:	20001fe4 	.word	0x20001fe4

00013ab4 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   13ab4:	4801      	ldr	r0, [pc, #4]	; (13abc <ll_rx_alloc+0x8>)
   13ab6:	f7fb bcd7 	b.w	f468 <mem_acquire>
   13aba:	bf00      	nop
   13abc:	20002040 	.word	0x20002040

00013ac0 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   13ac0:	4901      	ldr	r1, [pc, #4]	; (13ac8 <ll_rx_release+0x8>)
   13ac2:	f7fb bce7 	b.w	f494 <mem_release>
   13ac6:	bf00      	nop
   13ac8:	20002040 	.word	0x20002040

00013acc <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13acc:	4b02      	ldr	r3, [pc, #8]	; (13ad8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13ace:	4a03      	ldr	r2, [pc, #12]	; (13adc <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13ad0:	78db      	ldrb	r3, [r3, #3]
   13ad2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13ad4:	f7fb bd28 	b.w	f528 <memq_enqueue>
   13ad8:	2000044c 	.word	0x2000044c
   13adc:	20002318 	.word	0x20002318

00013ae0 <ll_rx_sched>:
	k_sem_give(sem_recv);
   13ae0:	4b01      	ldr	r3, [pc, #4]	; (13ae8 <ll_rx_sched+0x8>)
   13ae2:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   13ae4:	f00b bcfc 	b.w	1f4e0 <z_impl_k_sem_give>
   13ae8:	20002324 	.word	0x20002324

00013aec <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13aec:	4b0d      	ldr	r3, [pc, #52]	; (13b24 <ll_pdu_rx_alloc_peek+0x38>)
   13aee:	789a      	ldrb	r2, [r3, #2]
   13af0:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   13af4:	4562      	cmp	r2, ip
   13af6:	d809      	bhi.n	13b0c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   13af8:	ebac 0102 	sub.w	r1, ip, r2
   13afc:	b2c9      	uxtb	r1, r1
   13afe:	4288      	cmp	r0, r1
   13b00:	d802      	bhi.n	13b08 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   13b02:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13b04:	7819      	ldrb	r1, [r3, #0]
   13b06:	d108      	bne.n	13b1a <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   13b08:	2000      	movs	r0, #0
}
   13b0a:	4770      	bx	lr
		return count - first + last;
   13b0c:	7859      	ldrb	r1, [r3, #1]
   13b0e:	1a89      	subs	r1, r1, r2
   13b10:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13b12:	b2c9      	uxtb	r1, r1
   13b14:	4288      	cmp	r0, r1
   13b16:	d8f7      	bhi.n	13b08 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13b18:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   13b1a:	fb02 3301 	mla	r3, r2, r1, r3
   13b1e:	6858      	ldr	r0, [r3, #4]
   13b20:	4770      	bx	lr
   13b22:	bf00      	nop
   13b24:	200002fc 	.word	0x200002fc

00013b28 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   13b28:	4b09      	ldr	r3, [pc, #36]	; (13b50 <ll_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   13b2a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   13b2c:	78da      	ldrb	r2, [r3, #3]
   13b2e:	7818      	ldrb	r0, [r3, #0]
   13b30:	f893 c001 	ldrb.w	ip, [r3, #1]
   13b34:	428a      	cmp	r2, r1
   13b36:	d009      	beq.n	13b4c <ll_pdu_rx_alloc+0x24>
	_first += 1U;
   13b38:	1c4a      	adds	r2, r1, #1
   13b3a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   13b3c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   13b40:	4594      	cmp	ip, r2
   13b42:	bf08      	it	eq
   13b44:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   13b46:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   13b48:	709a      	strb	r2, [r3, #2]

	return mem;
   13b4a:	4770      	bx	lr
		return NULL;
   13b4c:	2000      	movs	r0, #0
}
   13b4e:	4770      	bx	lr
   13b50:	200002fc 	.word	0x200002fc

00013b54 <ll_tx_ack_put>:
{
   13b54:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   13b56:	4a15      	ldr	r2, [pc, #84]	; (13bac <ll_tx_ack_put+0x58>)
   13b58:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   13b5a:	f892 e001 	ldrb.w	lr, [r2, #1]
   13b5e:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   13b62:	1c63      	adds	r3, r4, #1
   13b64:	b2db      	uxtb	r3, r3
		last = 0U;
   13b66:	459e      	cmp	lr, r3
   13b68:	bf08      	it	eq
   13b6a:	2300      	moveq	r3, #0
	if (last == first) {
   13b6c:	459c      	cmp	ip, r3
   13b6e:	d00c      	beq.n	13b8a <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13b70:	4696      	mov	lr, r2
   13b72:	f81e cb04 	ldrb.w	ip, [lr], #4
   13b76:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
   13b7a:	eb1e 040c 	adds.w	r4, lr, ip
   13b7e:	d004      	beq.n	13b8a <ll_tx_ack_put+0x36>
	tx->handle = handle;
   13b80:	f82e 000c 	strh.w	r0, [lr, ip]
	*last = idx; /* Commit: Update write index */
   13b84:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   13b86:	6061      	str	r1, [r4, #4]
}
   13b88:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
   13b8a:	4a09      	ldr	r2, [pc, #36]	; (13bb0 <ll_tx_ack_put+0x5c>)
   13b8c:	4909      	ldr	r1, [pc, #36]	; (13bb4 <ll_tx_ack_put+0x60>)
   13b8e:	480a      	ldr	r0, [pc, #40]	; (13bb8 <ll_tx_ack_put+0x64>)
   13b90:	f240 4314 	movw	r3, #1044	; 0x414
   13b94:	f00c ff23 	bl	209de <printk>
   13b98:	4040      	eors	r0, r0
   13b9a:	f380 8811 	msr	BASEPRI, r0
   13b9e:	f04f 0003 	mov.w	r0, #3
   13ba2:	df02      	svc	2
	tx->handle = handle;
   13ba4:	2300      	movs	r3, #0
   13ba6:	801b      	strh	r3, [r3, #0]
   13ba8:	deff      	udf	#255	; 0xff
   13baa:	bf00      	nop
   13bac:	2000044c 	.word	0x2000044c
   13bb0:	0002753c 	.word	0x0002753c
   13bb4:	00027848 	.word	0x00027848
   13bb8:	000272c0 	.word	0x000272c0

00013bbc <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   13bbc:	6008      	str	r0, [r1, #0]
   13bbe:	4801      	ldr	r0, [pc, #4]	; (13bc4 <ull_ticker_status_give+0x8>)
   13bc0:	f00b bc8e 	b.w	1f4e0 <z_impl_k_sem_give>
   13bc4:	20002328 	.word	0x20002328

00013bc8 <ull_ticker_status_take>:
{
   13bc8:	b510      	push	{r4, lr}
   13bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13bce:	460c      	mov	r4, r1
   13bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return z_impl_k_sem_take(sem, timeout);
   13bd4:	4802      	ldr	r0, [pc, #8]	; (13be0 <ull_ticker_status_take+0x18>)
   13bd6:	f00b fca9 	bl	1f52c <z_impl_k_sem_take>
	return *ret_cb;
   13bda:	6820      	ldr	r0, [r4, #0]
}
   13bdc:	bd10      	pop	{r4, pc}
   13bde:	bf00      	nop
   13be0:	20002328 	.word	0x20002328

00013be4 <ull_disable_mark>:
	if (!*m) {
   13be4:	4a03      	ldr	r2, [pc, #12]	; (13bf4 <ull_disable_mark+0x10>)
{
   13be6:	4603      	mov	r3, r0
	if (!*m) {
   13be8:	6810      	ldr	r0, [r2, #0]
   13bea:	b100      	cbz	r0, 13bee <ull_disable_mark+0xa>
}
   13bec:	4770      	bx	lr
		*m = param;
   13bee:	6013      	str	r3, [r2, #0]
   13bf0:	4618      	mov	r0, r3
}
   13bf2:	4770      	bx	lr
   13bf4:	20001f1c 	.word	0x20001f1c

00013bf8 <ull_disable_unmark>:
	if (*m && *m == param) {
   13bf8:	4a04      	ldr	r2, [pc, #16]	; (13c0c <ull_disable_unmark+0x14>)
   13bfa:	6813      	ldr	r3, [r2, #0]
   13bfc:	b123      	cbz	r3, 13c08 <ull_disable_unmark+0x10>
   13bfe:	4298      	cmp	r0, r3
		*m = NULL;
   13c00:	bf06      	itte	eq
   13c02:	2100      	moveq	r1, #0
   13c04:	6011      	streq	r1, [r2, #0]
	return NULL;
   13c06:	2300      	movne	r3, #0
}
   13c08:	4618      	mov	r0, r3
   13c0a:	4770      	bx	lr
   13c0c:	20001f1c 	.word	0x20001f1c

00013c10 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   13c10:	4b01      	ldr	r3, [pc, #4]	; (13c18 <ull_disable_mark_get+0x8>)
}
   13c12:	6818      	ldr	r0, [r3, #0]
   13c14:	4770      	bx	lr
   13c16:	bf00      	nop
   13c18:	20001f1c 	.word	0x20001f1c

00013c1c <ull_update_mark>:
	if (!*m) {
   13c1c:	4a03      	ldr	r2, [pc, #12]	; (13c2c <ull_update_mark+0x10>)
{
   13c1e:	4603      	mov	r3, r0
	if (!*m) {
   13c20:	6810      	ldr	r0, [r2, #0]
   13c22:	b100      	cbz	r0, 13c26 <ull_update_mark+0xa>
}
   13c24:	4770      	bx	lr
		*m = param;
   13c26:	6013      	str	r3, [r2, #0]
   13c28:	4618      	mov	r0, r3
}
   13c2a:	4770      	bx	lr
   13c2c:	20001f20 	.word	0x20001f20

00013c30 <ull_update_unmark>:
	if (*m && *m == param) {
   13c30:	4a04      	ldr	r2, [pc, #16]	; (13c44 <ull_update_unmark+0x14>)
   13c32:	6813      	ldr	r3, [r2, #0]
   13c34:	b123      	cbz	r3, 13c40 <ull_update_unmark+0x10>
   13c36:	4298      	cmp	r0, r3
		*m = NULL;
   13c38:	bf06      	itte	eq
   13c3a:	2100      	moveq	r1, #0
   13c3c:	6011      	streq	r1, [r2, #0]
	return NULL;
   13c3e:	2300      	movne	r3, #0
}
   13c40:	4618      	mov	r0, r3
   13c42:	4770      	bx	lr
   13c44:	20001f20 	.word	0x20001f20

00013c48 <ull_update_mark_get>:
	return mark_get(mark_update);
   13c48:	4b01      	ldr	r3, [pc, #4]	; (13c50 <ull_update_mark_get+0x8>)
}
   13c4a:	6818      	ldr	r0, [r3, #0]
   13c4c:	4770      	bx	lr
   13c4e:	bf00      	nop
   13c50:	20001f20 	.word	0x20001f20

00013c54 <ull_disable>:
{
   13c54:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   13c56:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   13c58:	f115 0f10 	cmn.w	r5, #16
{
   13c5c:	b087      	sub	sp, #28
	if (!hdr) {
   13c5e:	d00b      	beq.n	13c78 <ull_disable+0x24>
	compiler_barrier();
   13c60:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   13c62:	2201      	movs	r2, #1
   13c64:	2100      	movs	r1, #0
   13c66:	4668      	mov	r0, sp
   13c68:	f012 f88e 	bl	25d88 <z_impl_k_sem_init>
	if (!hdr->ref) {
   13c6c:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   13c6e:	4a13      	ldr	r2, [pc, #76]	; (13cbc <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   13c70:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   13c74:	616a      	str	r2, [r5, #20]
	if (!hdr->ref) {
   13c76:	b913      	cbnz	r3, 13c7e <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   13c78:	2000      	movs	r0, #0
}
   13c7a:	b007      	add	sp, #28
   13c7c:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   13c7e:	4b10      	ldr	r3, [pc, #64]	; (13cc0 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   13c80:	2200      	movs	r2, #0
   13c82:	4611      	mov	r1, r2
   13c84:	2003      	movs	r0, #3
	mfy.param = lll;
   13c86:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   13c88:	f7fb fcc2 	bl	f610 <mayfly_enqueue>
	LL_ASSERT(!ret);
   13c8c:	b940      	cbnz	r0, 13ca0 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   13c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c96:	4668      	mov	r0, sp
   13c98:	f00b fc48 	bl	1f52c <z_impl_k_sem_take>
}
   13c9c:	b007      	add	sp, #28
   13c9e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   13ca0:	4a08      	ldr	r2, [pc, #32]	; (13cc4 <ull_disable+0x70>)
   13ca2:	4909      	ldr	r1, [pc, #36]	; (13cc8 <ull_disable+0x74>)
   13ca4:	4809      	ldr	r0, [pc, #36]	; (13ccc <ull_disable+0x78>)
   13ca6:	f240 437f 	movw	r3, #1151	; 0x47f
   13caa:	f00c fe98 	bl	209de <printk>
   13cae:	4040      	eors	r0, r0
   13cb0:	f380 8811 	msr	BASEPRI, r0
   13cb4:	f04f 0003 	mov.w	r0, #3
   13cb8:	df02      	svc	2
   13cba:	e7e8      	b.n	13c8e <ull_disable+0x3a>
   13cbc:	00012b61 	.word	0x00012b61
   13cc0:	20000490 	.word	0x20000490
   13cc4:	0002753c 	.word	0x0002753c
   13cc8:	00027594 	.word	0x00027594
   13ccc:	000272c0 	.word	0x000272c0

00013cd0 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   13cd0:	4b0d      	ldr	r3, [pc, #52]	; (13d08 <ull_pdu_rx_alloc_peek+0x38>)
   13cd2:	789a      	ldrb	r2, [r3, #2]
   13cd4:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   13cd8:	4562      	cmp	r2, ip
   13cda:	d809      	bhi.n	13cf0 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   13cdc:	ebac 0102 	sub.w	r1, ip, r2
   13ce0:	b2c9      	uxtb	r1, r1
   13ce2:	4288      	cmp	r0, r1
   13ce4:	d802      	bhi.n	13cec <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   13ce6:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   13ce8:	7819      	ldrb	r1, [r3, #0]
   13cea:	d108      	bne.n	13cfe <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   13cec:	2000      	movs	r0, #0
}
   13cee:	4770      	bx	lr
		return count - first + last;
   13cf0:	7859      	ldrb	r1, [r3, #1]
   13cf2:	1a89      	subs	r1, r1, r2
   13cf4:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   13cf6:	b2c9      	uxtb	r1, r1
   13cf8:	4288      	cmp	r0, r1
   13cfa:	d8f7      	bhi.n	13cec <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   13cfc:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   13cfe:	fb02 3301 	mla	r3, r2, r1, r3
   13d02:	6858      	ldr	r0, [r3, #4]
   13d04:	4770      	bx	lr
   13d06:	bf00      	nop
   13d08:	20000310 	.word	0x20000310

00013d0c <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   13d0c:	4b09      	ldr	r3, [pc, #36]	; (13d34 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   13d0e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   13d10:	78da      	ldrb	r2, [r3, #3]
   13d12:	7818      	ldrb	r0, [r3, #0]
   13d14:	f893 c001 	ldrb.w	ip, [r3, #1]
   13d18:	428a      	cmp	r2, r1
   13d1a:	d009      	beq.n	13d30 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   13d1c:	1c4a      	adds	r2, r1, #1
   13d1e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   13d20:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   13d24:	4594      	cmp	ip, r2
   13d26:	bf08      	it	eq
   13d28:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   13d2a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   13d2c:	709a      	strb	r2, [r3, #2]
	return mem;
   13d2e:	4770      	bx	lr
		return NULL;
   13d30:	2000      	movs	r0, #0
}
   13d32:	4770      	bx	lr
   13d34:	20000310 	.word	0x20000310

00013d38 <ull_rx_put>:
{
   13d38:	b538      	push	{r3, r4, r5, lr}
   13d3a:	460c      	mov	r4, r1
   13d3c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13d3e:	f003 fdd9 	bl	178f4 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13d42:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13d44:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13d46:	4a03      	ldr	r2, [pc, #12]	; (13d54 <ull_rx_put+0x1c>)
   13d48:	4628      	mov	r0, r5
}
   13d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13d4e:	f7fb bbeb 	b.w	f528 <memq_enqueue>
   13d52:	bf00      	nop
   13d54:	20002320 	.word	0x20002320

00013d58 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   13d58:	2201      	movs	r2, #1
   13d5a:	4b02      	ldr	r3, [pc, #8]	; (13d64 <ull_rx_sched+0xc>)
   13d5c:	4611      	mov	r1, r2
   13d5e:	2000      	movs	r0, #0
   13d60:	f7fb bc56 	b.w	f610 <mayfly_enqueue>
   13d64:	20000480 	.word	0x20000480

00013d68 <ull_prepare_enqueue>:
{
   13d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   13d6c:	4e20      	ldr	r6, [pc, #128]	; (13df0 <ull_prepare_enqueue+0x88>)
{
   13d6e:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   13d72:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   13d74:	7875      	ldrb	r5, [r6, #1]
	last = last + 1;
   13d76:	f104 0e01 	add.w	lr, r4, #1
   13d7a:	fa5f fe8e 	uxtb.w	lr, lr
		last = 0U;
   13d7e:	4575      	cmp	r5, lr
   13d80:	bf08      	it	eq
   13d82:	f04f 0e00 	moveq.w	lr, #0
   13d86:	78b5      	ldrb	r5, [r6, #2]
	if (last == first) {
   13d88:	4575      	cmp	r5, lr
   13d8a:	d02d      	beq.n	13de8 <ull_prepare_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13d8c:	4635      	mov	r5, r6
   13d8e:	f815 cb04 	ldrb.w	ip, [r5], #4
   13d92:	fb1c f404 	smulbb	r4, ip, r4
	if (!e) {
   13d96:	eb15 0c04 	adds.w	ip, r5, r4
   13d9a:	d025      	beq.n	13de8 <ull_prepare_enqueue+0x80>
   13d9c:	f8d2 a000 	ldr.w	sl, [r2]
   13da0:	f8d2 9004 	ldr.w	r9, [r2, #4]
   13da4:	f8d2 8008 	ldr.w	r8, [r2, #8]
   13da8:	68d2      	ldr	r2, [r2, #12]
   13daa:	f845 a004 	str.w	sl, [r5, r4]
	e->prepare_cb = prepare_cb;
   13dae:	f8cc 3010 	str.w	r3, [ip, #16]
	e->is_resume = is_resume;
   13db2:	f89c 3020 	ldrb.w	r3, [ip, #32]
   13db6:	f8cc 200c 	str.w	r2, [ip, #12]
   13dba:	f007 0701 	and.w	r7, r7, #1
   13dbe:	f023 0303 	bic.w	r3, r3, #3
	e->prio = prio;
   13dc2:	9a08      	ldr	r2, [sp, #32]
   13dc4:	f8cc 9004 	str.w	r9, [ip, #4]
	e->is_resume = is_resume;
   13dc8:	433b      	orrs	r3, r7
   13dca:	f8cc 8008 	str.w	r8, [ip, #8]
	e->is_abort_cb = is_abort_cb;
   13dce:	f8cc 0014 	str.w	r0, [ip, #20]
	*last = idx; /* Commit: Update write index */
   13dd2:	f886 e003 	strb.w	lr, [r6, #3]
	e->abort_cb = abort_cb;
   13dd6:	f8cc 1018 	str.w	r1, [ip, #24]
	e->prio = prio;
   13dda:	f8cc 201c 	str.w	r2, [ip, #28]
	e->is_resume = is_resume;
   13dde:	f88c 3020 	strb.w	r3, [ip, #32]
	return 0;
   13de2:	2000      	movs	r0, #0
}
   13de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   13de8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   13dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13df0:	20000328 	.word	0x20000328

00013df4 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   13df4:	4b05      	ldr	r3, [pc, #20]	; (13e0c <ull_prepare_dequeue_get+0x18>)
   13df6:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   13df8:	78da      	ldrb	r2, [r3, #3]
   13dfa:	7819      	ldrb	r1, [r3, #0]
   13dfc:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   13dfe:	bf1a      	itte	ne
   13e00:	3304      	addne	r3, #4
   13e02:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   13e06:	2000      	moveq	r0, #0
}
   13e08:	4770      	bx	lr
   13e0a:	bf00      	nop
   13e0c:	20000328 	.word	0x20000328

00013e10 <ull_prepare_dequeue_iter>:
{
   13e10:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   13e12:	4b0d      	ldr	r3, [pc, #52]	; (13e48 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   13e14:	7802      	ldrb	r2, [r0, #0]
   13e16:	7859      	ldrb	r1, [r3, #1]
   13e18:	f893 c003 	ldrb.w	ip, [r3, #3]
   13e1c:	f893 e000 	ldrb.w	lr, [r3]
   13e20:	4291      	cmp	r1, r2
   13e22:	bf9c      	itt	ls
   13e24:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   13e26:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   13e28:	4594      	cmp	ip, r2
   13e2a:	d00a      	beq.n	13e42 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   13e2c:	1c53      	adds	r3, r2, #1
   13e2e:	b2db      	uxtb	r3, r3
		i = 0U;
   13e30:	4299      	cmp	r1, r3
   13e32:	bf08      	it	eq
   13e34:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   13e36:	4905      	ldr	r1, [pc, #20]	; (13e4c <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   13e38:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   13e3a:	fb02 100e 	mla	r0, r2, lr, r1
}
   13e3e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   13e42:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   13e44:	e7fb      	b.n	13e3e <ull_prepare_dequeue_iter+0x2e>
   13e46:	bf00      	nop
   13e48:	20000328 	.word	0x20000328
   13e4c:	2000032c 	.word	0x2000032c

00013e50 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   13e50:	4b06      	ldr	r3, [pc, #24]	; (13e6c <ull_event_done_extra_get+0x1c>)
   13e52:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   13e54:	78d9      	ldrb	r1, [r3, #3]
   13e56:	7818      	ldrb	r0, [r3, #0]
   13e58:	4291      	cmp	r1, r2
   13e5a:	d005      	beq.n	13e68 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   13e5c:	fb02 3300 	mla	r3, r2, r0, r3
   13e60:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   13e62:	b110      	cbz	r0, 13e6a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   13e64:	3020      	adds	r0, #32
   13e66:	4770      	bx	lr
		return NULL;
   13e68:	2000      	movs	r0, #0
}
   13e6a:	4770      	bx	lr
   13e6c:	200002e8 	.word	0x200002e8

00013e70 <ull_event_done>:
{
   13e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   13e72:	4a14      	ldr	r2, [pc, #80]	; (13ec4 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   13e74:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   13e76:	78d4      	ldrb	r4, [r2, #3]
   13e78:	7811      	ldrb	r1, [r2, #0]
   13e7a:	7855      	ldrb	r5, [r2, #1]
   13e7c:	429c      	cmp	r4, r3
   13e7e:	d01f      	beq.n	13ec0 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   13e80:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   13e84:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   13e86:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   13e88:	b2db      	uxtb	r3, r3
		_first = 0U;
   13e8a:	429d      	cmp	r5, r3
   13e8c:	bf08      	it	eq
   13e8e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13e90:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   13e92:	b19c      	cbz	r4, 13ebc <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   13e94:	2601      	movs	r6, #1
	evdone->hdr.link = NULL;
   13e96:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   13e98:	6827      	ldr	r7, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   13e9a:	7126      	strb	r6, [r4, #4]
	evdone->hdr.link = NULL;
   13e9c:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   13e9e:	61e0      	str	r0, [r4, #28]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13ea0:	f003 fd28 	bl	178f4 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13ea4:	4a08      	ldr	r2, [pc, #32]	; (13ec8 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13ea6:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13ea8:	4621      	mov	r1, r4
   13eaa:	4638      	mov	r0, r7
   13eac:	f7fb fb3c 	bl	f528 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   13eb0:	4b06      	ldr	r3, [pc, #24]	; (13ecc <ull_event_done+0x5c>)
   13eb2:	4632      	mov	r2, r6
   13eb4:	4631      	mov	r1, r6
   13eb6:	4628      	mov	r0, r5
   13eb8:	f7fb fbaa 	bl	f610 <mayfly_enqueue>
}
   13ebc:	4620      	mov	r0, r4
   13ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   13ec0:	2400      	movs	r4, #0
   13ec2:	e7fb      	b.n	13ebc <ull_event_done+0x4c>
   13ec4:	200002e8 	.word	0x200002e8
   13ec8:	20002320 	.word	0x20002320
   13ecc:	20000480 	.word	0x20000480

00013ed0 <ticker_stop_cb>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder,
			   uint16_t lazy, void *param)
{
   13ed0:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13ed2:	4c19      	ldr	r4, [pc, #100]	; (13f38 <ticker_stop_cb+0x68>)
   13ed4:	4a19      	ldr	r2, [pc, #100]	; (13f3c <ticker_stop_cb+0x6c>)
   13ed6:	1b1c      	subs	r4, r3, r4
   13ed8:	0964      	lsrs	r4, r4, #5
{
   13eda:	461d      	mov	r5, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13edc:	fba2 3404 	umull	r3, r4, r2, r4
		LL_ASSERT(!ret);
	}
#endif

	handle = ull_adv_handle_get(adv);
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13ee0:	b2e3      	uxtb	r3, r4
{
   13ee2:	b083      	sub	sp, #12
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13ee4:	b9cb      	cbnz	r3, 13f1a <ticker_stop_cb+0x4a>

	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
			  TICKER_ID_ADV_BASE + handle,
   13ee6:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   13ee8:	4b15      	ldr	r3, [pc, #84]	; (13f40 <ticker_stop_cb+0x70>)
   13eea:	9500      	str	r5, [sp, #0]
   13eec:	b2d2      	uxtb	r2, r2
   13eee:	2101      	movs	r1, #1
   13ef0:	2000      	movs	r0, #0
   13ef2:	f7fc fea3 	bl	10c3c <ticker_stop>
			  ticker_op_stop_cb, adv);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13ef6:	f030 0302 	bics.w	r3, r0, #2
   13efa:	d00c      	beq.n	13f16 <ticker_stop_cb+0x46>
   13efc:	4a11      	ldr	r2, [pc, #68]	; (13f44 <ticker_stop_cb+0x74>)
   13efe:	4912      	ldr	r1, [pc, #72]	; (13f48 <ticker_stop_cb+0x78>)
   13f00:	4812      	ldr	r0, [pc, #72]	; (13f4c <ticker_stop_cb+0x7c>)
   13f02:	f240 637f 	movw	r3, #1663	; 0x67f
   13f06:	f00c fd6a 	bl	209de <printk>
   13f0a:	4040      	eors	r0, r0
   13f0c:	f380 8811 	msr	BASEPRI, r0
   13f10:	f04f 0003 	mov.w	r0, #3
   13f14:	df02      	svc	2
		  (ret == TICKER_STATUS_BUSY));
}
   13f16:	b003      	add	sp, #12
   13f18:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13f1a:	4a0a      	ldr	r2, [pc, #40]	; (13f44 <ticker_stop_cb+0x74>)
   13f1c:	490c      	ldr	r1, [pc, #48]	; (13f50 <ticker_stop_cb+0x80>)
   13f1e:	480b      	ldr	r0, [pc, #44]	; (13f4c <ticker_stop_cb+0x7c>)
   13f20:	f240 637a 	movw	r3, #1658	; 0x67a
   13f24:	f00c fd5b 	bl	209de <printk>
   13f28:	4040      	eors	r0, r0
   13f2a:	f380 8811 	msr	BASEPRI, r0
   13f2e:	f04f 0003 	mov.w	r0, #3
   13f32:	df02      	svc	2
   13f34:	e7d7      	b.n	13ee6 <ticker_stop_cb+0x16>
   13f36:	bf00      	nop
   13f38:	200026cc 	.word	0x200026cc
   13f3c:	24924929 	.word	0x24924929
   13f40:	00014081 	.word	0x00014081
   13f44:	00027680 	.word	0x00027680
   13f48:	000276cc 	.word	0x000276cc
   13f4c:	000272c0 	.word	0x000272c0
   13f50:	000276c0 	.word	0x000276c0

00013f54 <ticker_cb>:
{
   13f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f58:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   13f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13f5e:	4295      	cmp	r5, r2
{
   13f60:	b08a      	sub	sp, #40	; 0x28
   13f62:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   13f64:	d017      	beq.n	13f96 <ticker_cb+0x42>
	return ++hdr->ref;
   13f66:	7c1b      	ldrb	r3, [r3, #16]
   13f68:	3301      	adds	r3, #1
   13f6a:	b2db      	uxtb	r3, r3
   13f6c:	4680      	mov	r8, r0
   13f6e:	460f      	mov	r7, r1
   13f70:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   13f72:	2b00      	cmp	r3, #0
   13f74:	d060      	beq.n	14038 <ticker_cb+0xe4>
		p.ticks_at_expire = ticks_at_expire;
   13f76:	4e37      	ldr	r6, [pc, #220]	; (14054 <ticker_cb+0x100>)
		mfy.param = &p;
   13f78:	4b37      	ldr	r3, [pc, #220]	; (14058 <ticker_cb+0x104>)
		p.ticks_at_expire = ticks_at_expire;
   13f7a:	f8c6 8000 	str.w	r8, [r6]
	lll = &adv->lll;
   13f7e:	f104 021c 	add.w	r2, r4, #28
		p.param = lll;
   13f82:	60f2      	str	r2, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13f84:	2200      	movs	r2, #0
   13f86:	4611      	mov	r1, r2
   13f88:	2001      	movs	r0, #1
		p.remainder = remainder;
   13f8a:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   13f8c:	8135      	strh	r5, [r6, #8]
		mfy.param = &p;
   13f8e:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13f90:	f7fb fb3e 	bl	f610 <mayfly_enqueue>
		LL_ASSERT(!ret);
   13f94:	b938      	cbnz	r0, 13fa6 <ticker_cb+0x52>
	if (!lll->is_hdcd)
   13f96:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   13f9a:	f010 0501 	ands.w	r5, r0, #1
   13f9e:	d014      	beq.n	13fca <ticker_cb+0x76>
}
   13fa0:	b00a      	add	sp, #40	; 0x28
   13fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   13fa6:	4a2d      	ldr	r2, [pc, #180]	; (1405c <ticker_cb+0x108>)
   13fa8:	492d      	ldr	r1, [pc, #180]	; (14060 <ticker_cb+0x10c>)
   13faa:	482e      	ldr	r0, [pc, #184]	; (14064 <ticker_cb+0x110>)
   13fac:	f240 6327 	movw	r3, #1575	; 0x627
   13fb0:	f00c fd15 	bl	209de <printk>
   13fb4:	4040      	eors	r0, r0
   13fb6:	f380 8811 	msr	BASEPRI, r0
   13fba:	f04f 0003 	mov.w	r0, #3
   13fbe:	df02      	svc	2
	if (!lll->is_hdcd)
   13fc0:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   13fc4:	f010 0501 	ands.w	r5, r0, #1
   13fc8:	d1ea      	bne.n	13fa0 <ticker_cb+0x4c>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   13fca:	2104      	movs	r1, #4
   13fcc:	a809      	add	r0, sp, #36	; 0x24
   13fce:	f006 fbd1 	bl	1a774 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13fd4:	4a24      	ldr	r2, [pc, #144]	; (14068 <ticker_cb+0x114>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13fd6:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13fd8:	fba2 1203 	umull	r1, r2, r2, r3
   13fdc:	1a99      	subs	r1, r3, r2
   13fde:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   13fe2:	0a12      	lsrs	r2, r2, #8
   13fe4:	f240 1147 	movw	r1, #327	; 0x147
   13fe8:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13fec:	4a1f      	ldr	r2, [pc, #124]	; (1406c <ticker_cb+0x118>)
   13fee:	4920      	ldr	r1, [pc, #128]	; (14070 <ticker_cb+0x11c>)
   13ff0:	1aa2      	subs	r2, r4, r2
   13ff2:	0952      	lsrs	r2, r2, #5
   13ff4:	fba1 1202 	umull	r1, r2, r1, r2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13ff8:	491e      	ldr	r1, [pc, #120]	; (14074 <ticker_cb+0x120>)
				    (TICKER_ID_ADV_BASE +
   13ffa:	3202      	adds	r2, #2
		random_delay += 1;
   13ffc:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13ffe:	e9cd 5104 	strd	r5, r1, [sp, #16]
   14002:	e9cd 5502 	strd	r5, r5, [sp, #8]
   14006:	e9cd 5500 	strd	r5, r5, [sp]
   1400a:	b2d2      	uxtb	r2, r2
   1400c:	2101      	movs	r1, #1
   1400e:	4628      	mov	r0, r5
		random_delay += 1;
   14010:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14012:	f7fc fdc1 	bl	10b98 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14016:	f030 0302 	bics.w	r3, r0, #2
   1401a:	d0c1      	beq.n	13fa0 <ticker_cb+0x4c>
   1401c:	4a0f      	ldr	r2, [pc, #60]	; (1405c <ticker_cb+0x108>)
   1401e:	4916      	ldr	r1, [pc, #88]	; (14078 <ticker_cb+0x124>)
   14020:	4810      	ldr	r0, [pc, #64]	; (14064 <ticker_cb+0x110>)
   14022:	f240 633d 	movw	r3, #1597	; 0x63d
   14026:	f00c fcda 	bl	209de <printk>
   1402a:	4040      	eors	r0, r0
   1402c:	f380 8811 	msr	BASEPRI, r0
   14030:	f04f 0003 	mov.w	r0, #3
   14034:	df02      	svc	2
}
   14036:	e7b3      	b.n	13fa0 <ticker_cb+0x4c>
		LL_ASSERT(ref);
   14038:	4a08      	ldr	r2, [pc, #32]	; (1405c <ticker_cb+0x108>)
   1403a:	4910      	ldr	r1, [pc, #64]	; (1407c <ticker_cb+0x128>)
   1403c:	4809      	ldr	r0, [pc, #36]	; (14064 <ticker_cb+0x110>)
   1403e:	f240 631b 	movw	r3, #1563	; 0x61b
   14042:	f00c fccc 	bl	209de <printk>
   14046:	4040      	eors	r0, r0
   14048:	f380 8811 	msr	BASEPRI, r0
   1404c:	f04f 0003 	mov.w	r0, #3
   14050:	df02      	svc	2
   14052:	e790      	b.n	13f76 <ticker_cb+0x22>
   14054:	200027b8 	.word	0x200027b8
   14058:	200004b0 	.word	0x200004b0
   1405c:	00027680 	.word	0x00027680
   14060:	00027594 	.word	0x00027594
   14064:	000272c0 	.word	0x000272c0
   14068:	90d4f121 	.word	0x90d4f121
   1406c:	200026cc 	.word	0x200026cc
   14070:	24924929 	.word	0x24924929
   14074:	000141dd 	.word	0x000141dd
   14078:	000276cc 	.word	0x000276cc
   1407c:	000276e8 	.word	0x000276e8

00014080 <ticker_op_stop_cb>:
	struct ll_adv_set *adv;
	struct ull_hdr *hdr;
	uint32_t ret;

	/* Ignore if race between thread and ULL */
	if (status != TICKER_STATUS_SUCCESS) {
   14080:	2800      	cmp	r0, #0
   14082:	d13b      	bne.n	140fc <ticker_op_stop_cb+0x7c>
{
   14084:	b538      	push	{r3, r4, r5, lr}
	}
#endif /* CONFIG_BT_HCI_MESH_EXT */

	adv = param;
	hdr = &adv->ull;
	mfy.param = &adv->lll;
   14086:	4d25      	ldr	r5, [pc, #148]	; (1411c <ticker_op_stop_cb+0x9c>)
	if (hdr->ref) {
   14088:	7c0a      	ldrb	r2, [r1, #16]
	mfy.param = &adv->lll;
   1408a:	f101 031c 	add.w	r3, r1, #28
   1408e:	460c      	mov	r4, r1
   14090:	60ab      	str	r3, [r5, #8]
	if (hdr->ref) {
   14092:	b1e2      	cbz	r2, 140ce <ticker_op_stop_cb+0x4e>
		LL_ASSERT(!hdr->disabled_cb);
   14094:	694a      	ldr	r2, [r1, #20]
   14096:	b16a      	cbz	r2, 140b4 <ticker_op_stop_cb+0x34>
   14098:	4a21      	ldr	r2, [pc, #132]	; (14120 <ticker_op_stop_cb+0xa0>)
   1409a:	4922      	ldr	r1, [pc, #136]	; (14124 <ticker_op_stop_cb+0xa4>)
   1409c:	4822      	ldr	r0, [pc, #136]	; (14128 <ticker_op_stop_cb+0xa8>)
   1409e:	f240 639d 	movw	r3, #1693	; 0x69d
   140a2:	f00c fc9c 	bl	209de <printk>
   140a6:	4040      	eors	r0, r0
   140a8:	f380 8811 	msr	BASEPRI, r0
   140ac:	f04f 0003 	mov.w	r0, #3
   140b0:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   140b2:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   140b4:	491d      	ldr	r1, [pc, #116]	; (1412c <ticker_op_stop_cb+0xac>)

		mfy.fp = lll_disable;
   140b6:	481e      	ldr	r0, [pc, #120]	; (14130 <ticker_op_stop_cb+0xb0>)
		hdr->disabled_param = mfy.param;
   140b8:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   140ba:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   140bc:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   140be:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   140c0:	4b16      	ldr	r3, [pc, #88]	; (1411c <ticker_op_stop_cb+0x9c>)
   140c2:	4611      	mov	r1, r2
   140c4:	2002      	movs	r0, #2
   140c6:	f7fb faa3 	bl	f610 <mayfly_enqueue>
				     TICKER_USER_ID_LLL, 0, &mfy);
		LL_ASSERT(!ret);
   140ca:	b9c0      	cbnz	r0, 140fe <ticker_op_stop_cb+0x7e>
		mfy.fp = disabled_cb;
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
				     TICKER_USER_ID_ULL_HIGH, 0, &mfy);
		LL_ASSERT(!ret);
	}
}
   140cc:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   140ce:	4817      	ldr	r0, [pc, #92]	; (1412c <ticker_op_stop_cb+0xac>)
   140d0:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   140d2:	462b      	mov	r3, r5
   140d4:	2101      	movs	r1, #1
   140d6:	2002      	movs	r0, #2
   140d8:	f7fb fa9a 	bl	f610 <mayfly_enqueue>
		LL_ASSERT(!ret);
   140dc:	2800      	cmp	r0, #0
   140de:	d0f5      	beq.n	140cc <ticker_op_stop_cb+0x4c>
   140e0:	4a0f      	ldr	r2, [pc, #60]	; (14120 <ticker_op_stop_cb+0xa0>)
   140e2:	4914      	ldr	r1, [pc, #80]	; (14134 <ticker_op_stop_cb+0xb4>)
   140e4:	4810      	ldr	r0, [pc, #64]	; (14128 <ticker_op_stop_cb+0xa8>)
   140e6:	f240 63a9 	movw	r3, #1705	; 0x6a9
   140ea:	f00c fc78 	bl	209de <printk>
   140ee:	4040      	eors	r0, r0
   140f0:	f380 8811 	msr	BASEPRI, r0
   140f4:	f04f 0003 	mov.w	r0, #3
   140f8:	df02      	svc	2
}
   140fa:	bd38      	pop	{r3, r4, r5, pc}
   140fc:	4770      	bx	lr
		LL_ASSERT(!ret);
   140fe:	4a08      	ldr	r2, [pc, #32]	; (14120 <ticker_op_stop_cb+0xa0>)
   14100:	490c      	ldr	r1, [pc, #48]	; (14134 <ticker_op_stop_cb+0xb4>)
   14102:	4809      	ldr	r0, [pc, #36]	; (14128 <ticker_op_stop_cb+0xa8>)
   14104:	f240 63a4 	movw	r3, #1700	; 0x6a4
   14108:	f00c fc69 	bl	209de <printk>
   1410c:	4040      	eors	r0, r0
   1410e:	f380 8811 	msr	BASEPRI, r0
   14112:	f04f 0003 	mov.w	r0, #3
   14116:	df02      	svc	2
}
   14118:	bd38      	pop	{r3, r4, r5, pc}
   1411a:	bf00      	nop
   1411c:	200004c0 	.word	0x200004c0
   14120:	00027680 	.word	0x00027680
   14124:	000276ec 	.word	0x000276ec
   14128:	000272c0 	.word	0x000272c0
   1412c:	00014139 	.word	0x00014139
   14130:	0001a805 	.word	0x0001a805
   14134:	00027594 	.word	0x00027594

00014138 <disabled_cb>:

static void disabled_cb(void *param)
{
   14138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   1413a:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   1413c:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
{
   14140:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   14142:	b1ef      	cbz	r7, 14180 <disabled_cb+0x48>
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;

	LL_ASSERT(adv->node_rx_cc_free);
   14144:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
   14148:	2300      	movs	r3, #0
   1414a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
   1414e:	b36c      	cbz	r4, 141ac <disabled_cb+0x74>
	rx = adv->node_rx_cc_free;
	adv->node_rx_cc_free = NULL;
   14150:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14152:	230a      	movs	r3, #10
	adv->node_rx_cc_free = NULL;
   14154:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14158:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1415a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1415e:	80e3      	strh	r3, [r4, #6]
__ssp_bos_icheck3(memset, void *, int)
   14160:	221e      	movs	r2, #30
   14162:	f104 001c 	add.w	r0, r4, #28
   14166:	f012 f8a4 	bl	262b2 <memset>

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1416a:	233c      	movs	r3, #60	; 0x3c
   1416c:	7723      	strb	r3, [r4, #28]

	ftr = &(rx->hdr.rx_ftr);
	ftr->param = param;
   1416e:	60a6      	str	r6, [r4, #8]

	ll_rx_put(link, rx);
   14170:	4621      	mov	r1, r4
   14172:	4638      	mov	r0, r7
   14174:	f7ff fcaa 	bl	13acc <ll_rx_put>
	ll_rx_sched();
}
   14178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1417c:	f7ff bcb0 	b.w	13ae0 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   14180:	4a12      	ldr	r2, [pc, #72]	; (141cc <disabled_cb+0x94>)
   14182:	4913      	ldr	r1, [pc, #76]	; (141d0 <disabled_cb+0x98>)
   14184:	4813      	ldr	r0, [pc, #76]	; (141d4 <disabled_cb+0x9c>)
   14186:	f240 63b7 	movw	r3, #1719	; 0x6b7
   1418a:	f00c fc28 	bl	209de <printk>
   1418e:	4040      	eors	r0, r0
   14190:	f380 8811 	msr	BASEPRI, r0
   14194:	f04f 0003 	mov.w	r0, #3
   14198:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   1419a:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
	link = adv->link_cc_free;
   1419e:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
	adv->link_cc_free = NULL;
   141a2:	2300      	movs	r3, #0
   141a4:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
   141a8:	2c00      	cmp	r4, #0
   141aa:	d1d1      	bne.n	14150 <disabled_cb+0x18>
   141ac:	4a07      	ldr	r2, [pc, #28]	; (141cc <disabled_cb+0x94>)
   141ae:	490a      	ldr	r1, [pc, #40]	; (141d8 <disabled_cb+0xa0>)
   141b0:	4808      	ldr	r0, [pc, #32]	; (141d4 <disabled_cb+0x9c>)
   141b2:	f240 63bb 	movw	r3, #1723	; 0x6bb
   141b6:	f00c fc12 	bl	209de <printk>
   141ba:	4040      	eors	r0, r0
   141bc:	f380 8811 	msr	BASEPRI, r0
   141c0:	f04f 0003 	mov.w	r0, #3
   141c4:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   141c6:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
   141ca:	e7c1      	b.n	14150 <disabled_cb+0x18>
   141cc:	00027680 	.word	0x00027680
   141d0:	00027700 	.word	0x00027700
   141d4:	000272c0 	.word	0x000272c0
   141d8:	00027714 	.word	0x00027714

000141dc <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   141dc:	b900      	cbnz	r0, 141e0 <ticker_op_update_cb+0x4>
   141de:	4770      	bx	lr
{
   141e0:	b510      	push	{r4, lr}
   141e2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   141e4:	f7ff fd14 	bl	13c10 <ull_disable_mark_get>
   141e8:	4284      	cmp	r4, r0
   141ea:	d00c      	beq.n	14206 <ticker_op_update_cb+0x2a>
   141ec:	4a06      	ldr	r2, [pc, #24]	; (14208 <ticker_op_update_cb+0x2c>)
   141ee:	4907      	ldr	r1, [pc, #28]	; (1420c <ticker_op_update_cb+0x30>)
   141f0:	4807      	ldr	r0, [pc, #28]	; (14210 <ticker_op_update_cb+0x34>)
   141f2:	f240 635e 	movw	r3, #1630	; 0x65e
   141f6:	f00c fbf2 	bl	209de <printk>
   141fa:	4040      	eors	r0, r0
   141fc:	f380 8811 	msr	BASEPRI, r0
   14200:	f04f 0003 	mov.w	r0, #3
   14204:	df02      	svc	2
}
   14206:	bd10      	pop	{r4, pc}
   14208:	00027680 	.word	0x00027680
   1420c:	0002772c 	.word	0x0002772c
   14210:	000272c0 	.word	0x000272c0

00014214 <conn_release.constprop.0>:

static void conn_release(struct ll_adv_set *adv)
   14214:	b570      	push	{r4, r5, r6, lr}
{
	struct lll_conn *lll = adv->lll.conn;
   14216:	4c1d      	ldr	r4, [pc, #116]	; (1428c <conn_release.constprop.0+0x78>)
   14218:	6a65      	ldr	r5, [r4, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   1421a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1421c:	b163      	cbz	r3, 14238 <conn_release.constprop.0+0x24>
   1421e:	4a1c      	ldr	r2, [pc, #112]	; (14290 <conn_release.constprop.0+0x7c>)
   14220:	491c      	ldr	r1, [pc, #112]	; (14294 <conn_release.constprop.0+0x80>)
   14222:	481d      	ldr	r0, [pc, #116]	; (14298 <conn_release.constprop.0+0x84>)
   14224:	f240 63d2 	movw	r3, #1746	; 0x6d2
   14228:	f00c fbd9 	bl	209de <printk>
   1422c:	4040      	eors	r0, r0
   1422e:	f380 8811 	msr	BASEPRI, r0
   14232:	f04f 0003 	mov.w	r0, #3
   14236:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   14238:	f105 0154 	add.w	r1, r5, #84	; 0x54
   1423c:	f105 0050 	add.w	r0, r5, #80	; 0x50
   14240:	f7fb f968 	bl	f514 <memq_deinit>
	LL_ASSERT(link);
   14244:	4606      	mov	r6, r0
   14246:	b190      	cbz	r0, 1426e <conn_release.constprop.0+0x5a>
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   14248:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1424a:	662e      	str	r6, [r5, #96]	; 0x60
	ll_conn_release(lll->hdr.parent);
   1424c:	f001 f854 	bl	152f8 <ll_conn_release>
	adv->lll.conn = NULL;
   14250:	2500      	movs	r5, #0

	ll_rx_release(adv->node_rx_cc_free);
   14252:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->lll.conn = NULL;
   14256:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   14258:	f7ff fc32 	bl	13ac0 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
	ll_rx_link_release(adv->link_cc_free);
   1425c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	adv->node_rx_cc_free = NULL;
   14260:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
	ll_rx_link_release(adv->link_cc_free);
   14264:	f7ff fc20 	bl	13aa8 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   14268:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
}
   1426c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   1426e:	4a08      	ldr	r2, [pc, #32]	; (14290 <conn_release.constprop.0+0x7c>)
   14270:	490a      	ldr	r1, [pc, #40]	; (1429c <conn_release.constprop.0+0x88>)
   14272:	4809      	ldr	r0, [pc, #36]	; (14298 <conn_release.constprop.0+0x84>)
   14274:	f240 63d4 	movw	r3, #1748	; 0x6d4
   14278:	f00c fbb1 	bl	209de <printk>
   1427c:	4040      	eors	r0, r0
   1427e:	f380 8811 	msr	BASEPRI, r0
   14282:	f04f 0003 	mov.w	r0, #3
   14286:	df02      	svc	2
   14288:	e7de      	b.n	14248 <conn_release.constprop.0+0x34>
   1428a:	bf00      	nop
   1428c:	200026cc 	.word	0x200026cc
   14290:	00027680 	.word	0x00027680
   14294:	0002775c 	.word	0x0002775c
   14298:	000272c0 	.word	0x000272c0
   1429c:	00027854 	.word	0x00027854

000142a0 <disable.part.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   142a0:	b530      	push	{r4, r5, lr}
			return err;
		}
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

	mark = ull_disable_mark(adv);
   142a2:	4c4f      	ldr	r4, [pc, #316]	; (143e0 <disable.part.0+0x140>)
static inline uint8_t disable(uint8_t handle)
   142a4:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   142a6:	4620      	mov	r0, r4
   142a8:	f7ff fc9c 	bl	13be4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   142ac:	4284      	cmp	r4, r0
   142ae:	d00c      	beq.n	142ca <disable.part.0+0x2a>
   142b0:	4a4c      	ldr	r2, [pc, #304]	; (143e4 <disable.part.0+0x144>)
   142b2:	494d      	ldr	r1, [pc, #308]	; (143e8 <disable.part.0+0x148>)
   142b4:	484d      	ldr	r0, [pc, #308]	; (143ec <disable.part.0+0x14c>)
   142b6:	f240 7327 	movw	r3, #1831	; 0x727
   142ba:	f00c fb90 	bl	209de <printk>
   142be:	4040      	eors	r0, r0
   142c0:	f380 8811 	msr	BASEPRI, r0
   142c4:	f04f 0003 	mov.w	r0, #3
   142c8:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.is_hdcd) {
   142ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   142ce:	07db      	lsls	r3, r3, #31
		ret_cb = TICKER_STATUS_BUSY;
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   142d0:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   142d2:	d50d      	bpl.n	142f0 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   142d4:	2102      	movs	r1, #2
   142d6:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   142d8:	4b45      	ldr	r3, [pc, #276]	; (143f0 <disable.part.0+0x150>)
   142da:	9500      	str	r5, [sp, #0]
   142dc:	2103      	movs	r1, #3
   142de:	2201      	movs	r2, #1
   142e0:	2000      	movs	r0, #0
   142e2:	f7fc fcab 	bl	10c3c <ticker_stop>
				  TICKER_USER_ID_THREAD, TICKER_ID_ADV_STOP,
				  ull_ticker_status_give, (void *)&ret_cb);
		ret = ull_ticker_status_take(ret, &ret_cb);
   142e6:	4629      	mov	r1, r5
   142e8:	f7ff fc6e 	bl	13bc8 <ull_ticker_status_take>
		if (ret) {
   142ec:	2800      	cmp	r0, #0
   142ee:	d15d      	bne.n	143ac <disable.part.0+0x10c>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}
#endif

	ret_cb = TICKER_STATUS_BUSY;
   142f0:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   142f2:	2103      	movs	r1, #3
   142f4:	4b3e      	ldr	r3, [pc, #248]	; (143f0 <disable.part.0+0x150>)
   142f6:	9500      	str	r5, [sp, #0]
   142f8:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   142fa:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   142fc:	f7fc fc9e 	bl	10c3c <ticker_stop>
			  TICKER_ID_ADV_BASE + handle,
			  ull_ticker_status_give, (void *)&ret_cb);
	ret = ull_ticker_status_take(ret, &ret_cb);
   14300:	4629      	mov	r1, r5
   14302:	f7ff fc61 	bl	13bc8 <ull_ticker_status_take>
	if (ret) {
   14306:	2800      	cmp	r0, #0
   14308:	d13b      	bne.n	14382 <disable.part.0+0xe2>
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	ret = ull_disable(&adv->lll);
   1430a:	483a      	ldr	r0, [pc, #232]	; (143f4 <disable.part.0+0x154>)
   1430c:	f7ff fca2 	bl	13c54 <ull_disable>
	LL_ASSERT(!ret);
   14310:	bb20      	cbnz	r0, 1435c <disable.part.0+0xbc>

	mark = ull_disable_unmark(adv);
   14312:	4833      	ldr	r0, [pc, #204]	; (143e0 <disable.part.0+0x140>)
   14314:	f7ff fc70 	bl	13bf8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14318:	4284      	cmp	r4, r0
   1431a:	d00c      	beq.n	14336 <disable.part.0+0x96>
   1431c:	4a31      	ldr	r2, [pc, #196]	; (143e4 <disable.part.0+0x144>)
   1431e:	4932      	ldr	r1, [pc, #200]	; (143e8 <disable.part.0+0x148>)
   14320:	4832      	ldr	r0, [pc, #200]	; (143ec <disable.part.0+0x14c>)
   14322:	f240 7349 	movw	r3, #1865	; 0x749
   14326:	f00c fb5a 	bl	209de <printk>
   1432a:	4040      	eors	r0, r0
   1432c:	f380 8811 	msr	BASEPRI, r0
   14330:	f04f 0003 	mov.w	r0, #3
   14334:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
   14336:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14338:	b10b      	cbz	r3, 1433e <disable.part.0+0x9e>
		conn_release(adv);
   1433a:	f7ff ff6b 	bl	14214 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
   1433e:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   14342:	f36f 0300 	bfc	r3, #0, #1
   14346:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6

#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   1434a:	2000      	movs	r0, #0
   1434c:	f000 fb58 	bl	14a00 <ull_scan_is_enabled_get>
   14350:	4604      	mov	r4, r0
   14352:	2800      	cmp	r0, #0
   14354:	d03f      	beq.n	143d6 <disable.part.0+0x136>
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
   14356:	2000      	movs	r0, #0
}
   14358:	b005      	add	sp, #20
   1435a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   1435c:	4a21      	ldr	r2, [pc, #132]	; (143e4 <disable.part.0+0x144>)
   1435e:	4926      	ldr	r1, [pc, #152]	; (143f8 <disable.part.0+0x158>)
   14360:	4822      	ldr	r0, [pc, #136]	; (143ec <disable.part.0+0x14c>)
   14362:	f240 7346 	movw	r3, #1862	; 0x746
   14366:	f00c fb3a 	bl	209de <printk>
   1436a:	4040      	eors	r0, r0
   1436c:	f380 8811 	msr	BASEPRI, r0
   14370:	f04f 0003 	mov.w	r0, #3
   14374:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   14376:	481a      	ldr	r0, [pc, #104]	; (143e0 <disable.part.0+0x140>)
   14378:	f7ff fc3e 	bl	13bf8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1437c:	4284      	cmp	r4, r0
   1437e:	d1cd      	bne.n	1431c <disable.part.0+0x7c>
   14380:	e7d9      	b.n	14336 <disable.part.0+0x96>
		mark = ull_disable_mark(adv);
   14382:	4817      	ldr	r0, [pc, #92]	; (143e0 <disable.part.0+0x140>)
   14384:	f7ff fc2e 	bl	13be4 <ull_disable_mark>
		LL_ASSERT(mark == adv);
   14388:	4284      	cmp	r4, r0
   1438a:	d021      	beq.n	143d0 <disable.part.0+0x130>
   1438c:	4a15      	ldr	r2, [pc, #84]	; (143e4 <disable.part.0+0x144>)
   1438e:	4916      	ldr	r1, [pc, #88]	; (143e8 <disable.part.0+0x148>)
   14390:	4816      	ldr	r0, [pc, #88]	; (143ec <disable.part.0+0x14c>)
   14392:	f44f 63e8 	mov.w	r3, #1856	; 0x740
   14396:	f00c fb22 	bl	209de <printk>
   1439a:	4040      	eors	r0, r0
   1439c:	f380 8811 	msr	BASEPRI, r0
   143a0:	f04f 0003 	mov.w	r0, #3
   143a4:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   143a6:	200c      	movs	r0, #12
}
   143a8:	b005      	add	sp, #20
   143aa:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_mark(adv);
   143ac:	480c      	ldr	r0, [pc, #48]	; (143e0 <disable.part.0+0x140>)
   143ae:	f7ff fc19 	bl	13be4 <ull_disable_mark>
			LL_ASSERT(mark == adv);
   143b2:	4284      	cmp	r4, r0
   143b4:	d00c      	beq.n	143d0 <disable.part.0+0x130>
   143b6:	4a0b      	ldr	r2, [pc, #44]	; (143e4 <disable.part.0+0x144>)
   143b8:	490b      	ldr	r1, [pc, #44]	; (143e8 <disable.part.0+0x148>)
   143ba:	480c      	ldr	r0, [pc, #48]	; (143ec <disable.part.0+0x14c>)
   143bc:	f240 7332 	movw	r3, #1842	; 0x732
   143c0:	f00c fb0d 	bl	209de <printk>
   143c4:	4040      	eors	r0, r0
   143c6:	f380 8811 	msr	BASEPRI, r0
   143ca:	f04f 0003 	mov.w	r0, #3
   143ce:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   143d0:	200c      	movs	r0, #12
}
   143d2:	b005      	add	sp, #20
   143d4:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
   143d6:	f004 fe3d 	bl	19054 <ull_filter_adv_scan_state_cb>
	return 0;
   143da:	4620      	mov	r0, r4
}
   143dc:	b005      	add	sp, #20
   143de:	bd30      	pop	{r4, r5, pc}
   143e0:	200026cc 	.word	0x200026cc
   143e4:	00027680 	.word	0x00027680
   143e8:	00027770 	.word	0x00027770
   143ec:	000272c0 	.word	0x000272c0
   143f0:	00013bbd 	.word	0x00013bbd
   143f4:	200026e8 	.word	0x200026e8
   143f8:	00027594 	.word	0x00027594

000143fc <ll_adv_params_set>:
{
   143fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   143fe:	4686      	mov	lr, r0
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14400:	484c      	ldr	r0, [pc, #304]	; (14534 <ll_adv_params_set+0x138>)
	if (!adv || adv->is_enabled) {
   14402:	4c4d      	ldr	r4, [pc, #308]	; (14538 <ll_adv_params_set+0x13c>)
{
   14404:	460f      	mov	r7, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14406:	c803      	ldmia	r0, {r0, r1}
{
   14408:	b083      	sub	sp, #12
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1440a:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
   1440c:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
{
   14410:	9d08      	ldr	r5, [sp, #32]
   14412:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   14416:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1441a:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   1441e:	f010 0001 	ands.w	r0, r0, #1
   14422:	f040 8084 	bne.w	1452e <ll_adv_params_set+0x132>
	pdu->type = pdu_adv_type[adv_type];
   14426:	f107 0108 	add.w	r1, r7, #8
   1442a:	4469      	add	r1, sp
		adv->interval = 0;
   1442c:	2f01      	cmp	r7, #1
	pdu->type = pdu_adv_type[adv_type];
   1442e:	f811 1c08 	ldrb.w	r1, [r1, #-8]
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14432:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   14436:	f00c 0c07 	and.w	ip, ip, #7
		adv->interval = 0;
   1443a:	bf08      	it	eq
   1443c:	f04f 0e00 	moveq.w	lr, #0
	adv->lll.chan_map = chan_map;
   14440:	f006 0603 	and.w	r6, r6, #3
   14444:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14448:	f011 0f0e 	tst.w	r1, #14
   1444c:	f8a4 e0d4 	strh.w	lr, [r4, #212]	; 0xd4
	adv->lll.chan_map = chan_map;
   14450:	ea4c 2c06 	orr.w	ip, ip, r6, lsl #8
   14454:	f04f 0e27 	mov.w	lr, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
   14458:	f001 060f 	and.w	r6, r1, #15
   1445c:	f04f 012d 	mov.w	r1, #45	; 0x2d
   14460:	fb1e 1e07 	smlabb	lr, lr, r7, r1
	adv->lll.chan_map = chan_map;
   14464:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   14466:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
   1446a:	f021 0102 	bic.w	r1, r1, #2
   1446e:	ea4c 0c01 	orr.w	ip, ip, r1
	pdu->type = pdu_adv_type[adv_type];
   14472:	f814 100e 	ldrb.w	r1, [r4, lr]
	adv->lll.chan_map = chan_map;
   14476:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	pdu->type = pdu_adv_type[adv_type];
   1447a:	f021 011f 	bic.w	r1, r1, #31
   1447e:	ea46 0c01 	orr.w	ip, r6, r1
	adv->own_addr_type = own_addr_type;
   14482:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14486:	bf0c      	ite	eq
   14488:	2601      	moveq	r6, #1
   1448a:	2600      	movne	r6, #0
	adv->own_addr_type = own_addr_type;
   1448c:	f362 0142 	bfi	r1, r2, #1, #2
   14490:	f366 1c45 	bfi	ip, r6, #5, #1
   14494:	f804 c00e 	strb.w	ip, [r4, lr]
   14498:	f884 10d6 	strb.w	r1, [r4, #214]	; 0xd6
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1449c:	fa5f fc81 	uxtb.w	ip, r1
   144a0:	0749      	lsls	r1, r1, #29
   144a2:	eb04 060e 	add.w	r6, r4, lr
   144a6:	d50a      	bpl.n	144be <ll_adv_params_set+0xc2>
		adv->id_addr_type = direct_addr_type;
   144a8:	4661      	mov	r1, ip
   144aa:	f363 01c3 	bfi	r1, r3, #3, #1
   144ae:	f884 10d6 	strb.w	r1, [r4, #214]	; 0xd6
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   144b2:	6829      	ldr	r1, [r5, #0]
   144b4:	f8c4 10d7 	str.w	r1, [r4, #215]	; 0xd7
   144b8:	88a9      	ldrh	r1, [r5, #4]
   144ba:	f8a4 10db 	strh.w	r1, [r4, #219]	; 0xdb
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   144be:	f814 100e 	ldrb.w	r1, [r4, lr]
   144c2:	f001 070f 	and.w	r7, r1, #15
   144c6:	2f01      	cmp	r7, #1
   144c8:	d022      	beq.n	14510 <ll_adv_params_set+0x114>
	} else if (pdu->len == 0) {
   144ca:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   144cc:	f002 0201 	and.w	r2, r2, #1
   144d0:	f362 1186 	bfi	r1, r2, #6, #1
	} else if (pdu->len == 0) {
   144d4:	b1ab      	cbz	r3, 14502 <ll_adv_params_set+0x106>
		pdu->rx_addr = 0;
   144d6:	f36f 11c7 	bfc	r1, #7, #1
   144da:	f804 100e 	strb.w	r1, [r4, lr]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   144de:	f894 507c 	ldrb.w	r5, [r4, #124]	; 0x7c
   144e2:	2327      	movs	r3, #39	; 0x27
   144e4:	217d      	movs	r1, #125	; 0x7d
   144e6:	fb13 1305 	smlabb	r3, r3, r5, r1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   144ea:	0192      	lsls	r2, r2, #6
   144ec:	f042 0204 	orr.w	r2, r2, #4
   144f0:	54e2      	strb	r2, [r4, r3]
   144f2:	441c      	add	r4, r3
	if (pdu->len == 0) {
   144f4:	7863      	ldrb	r3, [r4, #1]
   144f6:	b913      	cbnz	r3, 144fe <ll_adv_params_set+0x102>
		pdu->len = BDADDR_SIZE;
   144f8:	2206      	movs	r2, #6
   144fa:	7062      	strb	r2, [r4, #1]
	return 0;
   144fc:	4618      	mov	r0, r3
}
   144fe:	b003      	add	sp, #12
   14500:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu->rx_addr = 0;
   14502:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   14506:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   14508:	f804 100e 	strb.w	r1, [r4, lr]
		pdu->len = BDADDR_SIZE;
   1450c:	7073      	strb	r3, [r6, #1]
   1450e:	e7e6      	b.n	144de <ll_adv_params_set+0xe2>
		pdu->tx_addr = own_addr_type & 0x1;
   14510:	f002 0201 	and.w	r2, r2, #1
   14514:	f362 1186 	bfi	r1, r2, #6, #1
		pdu->rx_addr = direct_addr_type;
   14518:	f363 11c7 	bfi	r1, r3, #7, #1
   1451c:	f804 100e 	strb.w	r1, [r4, lr]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14520:	6829      	ldr	r1, [r5, #0]
   14522:	60b1      	str	r1, [r6, #8]
   14524:	88a9      	ldrh	r1, [r5, #4]
   14526:	81b1      	strh	r1, [r6, #12]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   14528:	230c      	movs	r3, #12
   1452a:	7073      	strb	r3, [r6, #1]
   1452c:	e7d7      	b.n	144de <ll_adv_params_set+0xe2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1452e:	200c      	movs	r0, #12
}
   14530:	b003      	add	sp, #12
   14532:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14534:	00026a48 	.word	0x00026a48
   14538:	200026cc 	.word	0x200026cc

0001453c <ull_adv_init>:
}
   1453c:	2000      	movs	r0, #0
   1453e:	4770      	bx	lr

00014540 <ull_adv_reset>:
{
   14540:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   14542:	4b04      	ldr	r3, [pc, #16]	; (14554 <ull_adv_reset+0x14>)
   14544:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
   14548:	07db      	lsls	r3, r3, #31
   1454a:	d501      	bpl.n	14550 <ull_adv_reset+0x10>
   1454c:	f7ff fea8 	bl	142a0 <disable.part.0>
}
   14550:	2000      	movs	r0, #0
   14552:	bd08      	pop	{r3, pc}
   14554:	200026cc 	.word	0x200026cc

00014558 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14558:	4a03      	ldr	r2, [pc, #12]	; (14568 <ull_adv_handle_get+0x10>)
   1455a:	4b04      	ldr	r3, [pc, #16]	; (1456c <ull_adv_handle_get+0x14>)
   1455c:	1a80      	subs	r0, r0, r2
   1455e:	0940      	lsrs	r0, r0, #5
   14560:	fba3 3000 	umull	r3, r0, r3, r0
}
   14564:	b280      	uxth	r0, r0
   14566:	4770      	bx	lr
   14568:	200026cc 	.word	0x200026cc
   1456c:	24924929 	.word	0x24924929

00014570 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14570:	4a04      	ldr	r2, [pc, #16]	; (14584 <ull_adv_lll_handle_get+0x14>)
   14572:	6800      	ldr	r0, [r0, #0]
   14574:	4b04      	ldr	r3, [pc, #16]	; (14588 <ull_adv_lll_handle_get+0x18>)
   14576:	1a80      	subs	r0, r0, r2
   14578:	0940      	lsrs	r0, r0, #5
   1457a:	fba3 3000 	umull	r3, r0, r3, r0
}
   1457e:	b280      	uxth	r0, r0
   14580:	4770      	bx	lr
   14582:	bf00      	nop
   14584:	200026cc 	.word	0x200026cc
   14588:	24924929 	.word	0x24924929

0001458c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1458c:	b938      	cbnz	r0, 1459e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1458e:	4805      	ldr	r0, [pc, #20]	; (145a4 <ull_adv_is_enabled_get+0x18>)
   14590:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
	return &ll_adv[handle];
   14594:	f013 0f01 	tst.w	r3, #1
   14598:	bf08      	it	eq
   1459a:	2000      	moveq	r0, #0
   1459c:	4770      	bx	lr
		return NULL;
   1459e:	2000      	movs	r0, #0
}
   145a0:	4770      	bx	lr
   145a2:	bf00      	nop
   145a4:	200026cc 	.word	0x200026cc

000145a8 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   145a8:	b928      	cbnz	r0, 145b6 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   145aa:	4b04      	ldr	r3, [pc, #16]	; (145bc <ull_adv_is_enabled+0x14>)
   145ac:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
   145b0:	f000 0001 	and.w	r0, r0, #1
   145b4:	4770      	bx	lr
   145b6:	2000      	movs	r0, #0
}
   145b8:	4770      	bx	lr
   145ba:	bf00      	nop
   145bc:	200026cc 	.word	0x200026cc

000145c0 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   145c0:	b950      	cbnz	r0, 145d8 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   145c2:	4b06      	ldr	r3, [pc, #24]	; (145dc <ull_adv_filter_pol_get+0x1c>)
   145c4:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
   145c8:	f010 0001 	ands.w	r0, r0, #1
   145cc:	d005      	beq.n	145da <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   145ce:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   145d2:	f000 0003 	and.w	r0, r0, #3
   145d6:	4770      	bx	lr
		return 0;
   145d8:	2000      	movs	r0, #0
}
   145da:	4770      	bx	lr
   145dc:	200026cc 	.word	0x200026cc

000145e0 <ull_adv_data_set>:
{
   145e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   145e4:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   145e8:	eb04 0784 	add.w	r7, r4, r4, lsl #2
   145ec:	ebc4 07c7 	rsb	r7, r4, r7, lsl #3
   145f0:	f100 0e1c 	add.w	lr, r0, #28
   145f4:	4605      	mov	r5, r0
   145f6:	f107 0011 	add.w	r0, r7, #17
   145fa:	eb0e 0c00 	add.w	ip, lr, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   145fe:	f81e 3000 	ldrb.w	r3, [lr, r0]
   14602:	f003 080f 	and.w	r8, r3, #15
   14606:	f1b8 0f01 	cmp.w	r8, #1
   1460a:	d03a      	beq.n	14682 <ull_adv_data_set+0xa2>
   1460c:	460e      	mov	r6, r1
   1460e:	4611      	mov	r1, r2
	first = pdu->first;
   14610:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
	if (first == last) {
   14614:	4294      	cmp	r4, r2
	first = pdu->first;
   14616:	fa5f f882 	uxtb.w	r8, r2
	if (first == last) {
   1461a:	d035      	beq.n	14688 <ull_adv_data_set+0xa8>
		pdu->last = first;
   1461c:	f885 802c 	strb.w	r8, [r5, #44]	; 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
   14620:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   14624:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
		if (first_latest != first) {
   14628:	4598      	cmp	r8, r3
   1462a:	d034      	beq.n	14696 <ull_adv_data_set+0xb6>
			last++;
   1462c:	3401      	adds	r4, #1
   1462e:	b2e4      	uxtb	r4, r4
			if (last == DOUBLE_BUFFER_SIZE) {
   14630:	2c02      	cmp	r4, #2
   14632:	f81e 3000 	ldrb.w	r3, [lr, r0]
   14636:	d02b      	beq.n	14690 <ull_adv_data_set+0xb0>
   14638:	2727      	movs	r7, #39	; 0x27
   1463a:	2202      	movs	r2, #2
   1463c:	fb17 2004 	smlabb	r0, r7, r4, r2
		pdu->chan_sel = prev->chan_sel;
   14640:	f3c3 1740 	ubfx	r7, r3, #5, #1
	pdu->type = prev->type;
   14644:	f3c3 0203 	ubfx	r2, r3, #0, #4
   14648:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
	pdu->tx_addr = prev->tx_addr;
   1464c:	f3c3 1780 	ubfx	r7, r3, #6, #1
	pdu->type = prev->type;
   14650:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
   14654:	f003 0380 	and.w	r3, r3, #128	; 0x80
	return (void *)pdu->pdu[last];
   14658:	f105 072b 	add.w	r7, r5, #43	; 0x2b
   1465c:	4313      	orrs	r3, r2
   1465e:	543b      	strb	r3, [r7, r0]
   14660:	4407      	add	r7, r0
   14662:	f8dc 3002 	ldr.w	r3, [ip, #2]
   14666:	f8c7 3002 	str.w	r3, [r7, #2]
   1466a:	f8bc 3006 	ldrh.w	r3, [ip, #6]
   1466e:	80fb      	strh	r3, [r7, #6]
   14670:	4632      	mov	r2, r6
   14672:	f107 0008 	add.w	r0, r7, #8
	pdu->len = BDADDR_SIZE + len;
   14676:	3606      	adds	r6, #6
   14678:	f011 fe0d 	bl	26296 <memcpy>
   1467c:	707e      	strb	r6, [r7, #1]
	pdu->last = idx;
   1467e:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
   14682:	2000      	movs	r0, #0
   14684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last++;
   14688:	3401      	adds	r4, #1
   1468a:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
   1468c:	2c02      	cmp	r4, #2
   1468e:	d1d3      	bne.n	14638 <ull_adv_data_set+0x58>
{
   14690:	2002      	movs	r0, #2
			last = 0U;
   14692:	2400      	movs	r4, #0
   14694:	e7d4      	b.n	14640 <ull_adv_data_set+0x60>
   14696:	f81e 3000 	ldrb.w	r3, [lr, r0]
   1469a:	1cb8      	adds	r0, r7, #2
   1469c:	e7d0      	b.n	14640 <ull_adv_data_set+0x60>
   1469e:	bf00      	nop

000146a0 <ll_adv_data_set>:
{
   146a0:	4603      	mov	r3, r0
   146a2:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   146a4:	4801      	ldr	r0, [pc, #4]	; (146ac <ll_adv_data_set+0xc>)
   146a6:	4619      	mov	r1, r3
   146a8:	f7ff bf9a 	b.w	145e0 <ull_adv_data_set>
   146ac:	200026cc 	.word	0x200026cc

000146b0 <ull_scan_rsp_set>:
{
   146b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146b4:	4605      	mov	r5, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   146b6:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	first = pdu->first;
   146ba:	f895 707b 	ldrb.w	r7, [r5, #123]	; 0x7b
   146be:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   146c2:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   146c6:	f105 0c1c 	add.w	ip, r5, #28
   146ca:	f100 0361 	add.w	r3, r0, #97	; 0x61
	if (first == last) {
   146ce:	42bc      	cmp	r4, r7
   146d0:	460e      	mov	r6, r1
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   146d2:	eb0c 0e03 	add.w	lr, ip, r3
   146d6:	4611      	mov	r1, r2
	if (first == last) {
   146d8:	d009      	beq.n	146ee <ull_scan_rsp_set+0x3e>
		pdu->last = first;
   146da:	fa5f f887 	uxtb.w	r8, r7
   146de:	f885 807c 	strb.w	r8, [r5, #124]	; 0x7c
   146e2:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   146e6:	f895 207b 	ldrb.w	r2, [r5, #123]	; 0x7b
		if (first_latest != first) {
   146ea:	4590      	cmp	r8, r2
   146ec:	d026      	beq.n	1473c <ull_scan_rsp_set+0x8c>
		last++;
   146ee:	3401      	adds	r4, #1
   146f0:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
   146f2:	2c02      	cmp	r4, #2
   146f4:	d024      	beq.n	14740 <ull_scan_rsp_set+0x90>
   146f6:	2027      	movs	r0, #39	; 0x27
   146f8:	2202      	movs	r2, #2
   146fa:	fb10 2004 	smlabb	r0, r0, r4, r2
	pdu->tx_addr = prev->tx_addr;
   146fe:	f81c 3003 	ldrb.w	r3, [ip, r3]
   14702:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14706:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
	return (void *)pdu->pdu[last];
   1470a:	f105 037b 	add.w	r3, r5, #123	; 0x7b
   1470e:	f04c 0c04 	orr.w	ip, ip, #4
   14712:	f803 c000 	strb.w	ip, [r3, r0]
   14716:	4418      	add	r0, r3
	pdu->len = BDADDR_SIZE + len;
   14718:	1db3      	adds	r3, r6, #6
   1471a:	7043      	strb	r3, [r0, #1]
   1471c:	f8de 3002 	ldr.w	r3, [lr, #2]
   14720:	f8c0 3002 	str.w	r3, [r0, #2]
   14724:	f8be 3006 	ldrh.w	r3, [lr, #6]
   14728:	80c3      	strh	r3, [r0, #6]
   1472a:	4632      	mov	r2, r6
   1472c:	3008      	adds	r0, #8
   1472e:	f011 fdb2 	bl	26296 <memcpy>
	pdu->last = idx;
   14732:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
}
   14736:	2000      	movs	r0, #0
   14738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1473c:	3002      	adds	r0, #2
   1473e:	e7de      	b.n	146fe <ull_scan_rsp_set+0x4e>
{
   14740:	2002      	movs	r0, #2
			last = 0U;
   14742:	2400      	movs	r4, #0
   14744:	e7db      	b.n	146fe <ull_scan_rsp_set+0x4e>
   14746:	bf00      	nop

00014748 <ll_adv_scan_rsp_set>:
{
   14748:	4603      	mov	r3, r0
   1474a:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   1474c:	4801      	ldr	r0, [pc, #4]	; (14754 <ll_adv_scan_rsp_set+0xc>)
   1474e:	4619      	mov	r1, r3
   14750:	f7ff bfae 	b.w	146b0 <ull_scan_rsp_set>
   14754:	200026cc 	.word	0x200026cc

00014758 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
		      void *param)
{
   14758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1475c:	461c      	mov	r4, r3
   1475e:	7c1b      	ldrb	r3, [r3, #16]
   14760:	3301      	adds	r3, #1
   14762:	b2db      	uxtb	r3, r3
   14764:	4680      	mov	r8, r0
   14766:	460f      	mov	r7, r1
   14768:	4616      	mov	r6, r2
   1476a:	7423      	strb	r3, [r4, #16]

	DEBUG_RADIO_PREPARE_O(1);

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   1476c:	b183      	cbz	r3, 14790 <ticker_cb+0x38>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1476e:	4d17      	ldr	r5, [pc, #92]	; (147cc <ticker_cb+0x74>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = &scan->lll;
	mfy.param = &p;
   14770:	4b17      	ldr	r3, [pc, #92]	; (147d0 <ticker_cb+0x78>)
	p.ticks_at_expire = ticks_at_expire;
   14772:	f8c5 8000 	str.w	r8, [r5]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14776:	2200      	movs	r2, #0
	p.param = &scan->lll;
   14778:	341c      	adds	r4, #28
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1477a:	4611      	mov	r1, r2
   1477c:	2001      	movs	r0, #1
	p.remainder = remainder;
   1477e:	606f      	str	r7, [r5, #4]
	p.lazy = lazy;
   14780:	812e      	strh	r6, [r5, #8]
	p.param = &scan->lll;
   14782:	60ec      	str	r4, [r5, #12]
	mfy.param = &p;
   14784:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14786:	f7fa ff43 	bl	f610 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1478a:	b978      	cbnz	r0, 147ac <ticker_cb+0x54>

	DEBUG_RADIO_PREPARE_O(1);
}
   1478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(ref);
   14790:	4a10      	ldr	r2, [pc, #64]	; (147d4 <ticker_cb+0x7c>)
   14792:	4911      	ldr	r1, [pc, #68]	; (147d8 <ticker_cb+0x80>)
   14794:	4811      	ldr	r0, [pc, #68]	; (147dc <ticker_cb+0x84>)
   14796:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   1479a:	f00c f920 	bl	209de <printk>
   1479e:	4040      	eors	r0, r0
   147a0:	f380 8811 	msr	BASEPRI, r0
   147a4:	f04f 0003 	mov.w	r0, #3
   147a8:	df02      	svc	2
   147aa:	e7e0      	b.n	1476e <ticker_cb+0x16>
	LL_ASSERT(!ret);
   147ac:	4a09      	ldr	r2, [pc, #36]	; (147d4 <ticker_cb+0x7c>)
   147ae:	490c      	ldr	r1, [pc, #48]	; (147e0 <ticker_cb+0x88>)
   147b0:	480a      	ldr	r0, [pc, #40]	; (147dc <ticker_cb+0x84>)
   147b2:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   147b6:	f00c f912 	bl	209de <printk>
   147ba:	4040      	eors	r0, r0
   147bc:	f380 8811 	msr	BASEPRI, r0
   147c0:	f04f 0003 	mov.w	r0, #3
   147c4:	df02      	svc	2
}
   147c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   147ca:	bf00      	nop
   147cc:	2000281c 	.word	0x2000281c
   147d0:	200004d0 	.word	0x200004d0
   147d4:	0002778c 	.word	0x0002778c
   147d8:	000276e8 	.word	0x000276e8
   147dc:	000272c0 	.word	0x000272c0
   147e0:	00027594 	.word	0x00027594

000147e4 <ull_scan_init>:
}
   147e4:	2000      	movs	r0, #0
   147e6:	4770      	bx	lr

000147e8 <ull_scan_disable>:
{
   147e8:	b570      	push	{r4, r5, r6, lr}
   147ea:	4605      	mov	r5, r0
   147ec:	b084      	sub	sp, #16
	mark = ull_disable_mark(scan);
   147ee:	4608      	mov	r0, r1
{
   147f0:	460c      	mov	r4, r1
	mark = ull_disable_mark(scan);
   147f2:	f7ff f9f7 	bl	13be4 <ull_disable_mark>
	LL_ASSERT(mark == scan);
   147f6:	4284      	cmp	r4, r0
   147f8:	d00c      	beq.n	14814 <ull_scan_disable+0x2c>
   147fa:	4a2f      	ldr	r2, [pc, #188]	; (148b8 <ull_scan_disable+0xd0>)
   147fc:	492f      	ldr	r1, [pc, #188]	; (148bc <ull_scan_disable+0xd4>)
   147fe:	4830      	ldr	r0, [pc, #192]	; (148c0 <ull_scan_disable+0xd8>)
   14800:	f44f 73bb 	mov.w	r3, #374	; 0x176
   14804:	f00c f8eb 	bl	209de <printk>
   14808:	4040      	eors	r0, r0
   1480a:	f380 8811 	msr	BASEPRI, r0
   1480e:	f04f 0003 	mov.w	r0, #3
   14812:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14814:	ae03      	add	r6, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   14816:	2102      	movs	r1, #2
			  TICKER_ID_SCAN_BASE + handle,
   14818:	1d2a      	adds	r2, r5, #4
	ret_cb = TICKER_STATUS_BUSY;
   1481a:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1481c:	4b29      	ldr	r3, [pc, #164]	; (148c4 <ull_scan_disable+0xdc>)
   1481e:	9600      	str	r6, [sp, #0]
   14820:	2103      	movs	r1, #3
   14822:	b2d2      	uxtb	r2, r2
   14824:	2000      	movs	r0, #0
   14826:	f7fc fa09 	bl	10c3c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1482a:	4631      	mov	r1, r6
   1482c:	f7ff f9cc 	bl	13bc8 <ull_ticker_status_take>
	if (ret) {
   14830:	bb50      	cbnz	r0, 14888 <ull_scan_disable+0xa0>
	ret = ull_disable(&scan->lll);
   14832:	f104 001c 	add.w	r0, r4, #28
   14836:	f7ff fa0d 	bl	13c54 <ull_disable>
	LL_ASSERT(!ret);
   1483a:	b9b8      	cbnz	r0, 1486c <ull_scan_disable+0x84>
	mark = ull_disable_unmark(scan);
   1483c:	4620      	mov	r0, r4
   1483e:	f7ff f9db 	bl	13bf8 <ull_disable_unmark>
	LL_ASSERT(mark == scan);
   14842:	4284      	cmp	r4, r0
   14844:	d00f      	beq.n	14866 <ull_scan_disable+0x7e>
   14846:	4a1c      	ldr	r2, [pc, #112]	; (148b8 <ull_scan_disable+0xd0>)
   14848:	491c      	ldr	r1, [pc, #112]	; (148bc <ull_scan_disable+0xd4>)
   1484a:	481d      	ldr	r0, [pc, #116]	; (148c0 <ull_scan_disable+0xd8>)
   1484c:	f44f 73c4 	mov.w	r3, #392	; 0x188
   14850:	f00c f8c5 	bl	209de <printk>
   14854:	4040      	eors	r0, r0
   14856:	f380 8811 	msr	BASEPRI, r0
   1485a:	f04f 0003 	mov.w	r0, #3
   1485e:	df02      	svc	2
	return 0;
   14860:	2000      	movs	r0, #0
}
   14862:	b004      	add	sp, #16
   14864:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   14866:	2000      	movs	r0, #0
}
   14868:	b004      	add	sp, #16
   1486a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!ret);
   1486c:	4a12      	ldr	r2, [pc, #72]	; (148b8 <ull_scan_disable+0xd0>)
   1486e:	4916      	ldr	r1, [pc, #88]	; (148c8 <ull_scan_disable+0xe0>)
   14870:	4813      	ldr	r0, [pc, #76]	; (148c0 <ull_scan_disable+0xd8>)
   14872:	f240 1385 	movw	r3, #389	; 0x185
   14876:	f00c f8b2 	bl	209de <printk>
   1487a:	4040      	eors	r0, r0
   1487c:	f380 8811 	msr	BASEPRI, r0
   14880:	f04f 0003 	mov.w	r0, #3
   14884:	df02      	svc	2
   14886:	e7d9      	b.n	1483c <ull_scan_disable+0x54>
		mark = ull_disable_unmark(scan);
   14888:	4620      	mov	r0, r4
   1488a:	f7ff f9b5 	bl	13bf8 <ull_disable_unmark>
		LL_ASSERT(mark == scan);
   1488e:	4284      	cmp	r4, r0
   14890:	d00f      	beq.n	148b2 <ull_scan_disable+0xca>
   14892:	4a09      	ldr	r2, [pc, #36]	; (148b8 <ull_scan_disable+0xd0>)
   14894:	4909      	ldr	r1, [pc, #36]	; (148bc <ull_scan_disable+0xd4>)
   14896:	480a      	ldr	r0, [pc, #40]	; (148c0 <ull_scan_disable+0xd8>)
   14898:	f240 137f 	movw	r3, #383	; 0x17f
   1489c:	f00c f89f 	bl	209de <printk>
   148a0:	4040      	eors	r0, r0
   148a2:	f380 8811 	msr	BASEPRI, r0
   148a6:	f04f 0003 	mov.w	r0, #3
   148aa:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   148ac:	200c      	movs	r0, #12
}
   148ae:	b004      	add	sp, #16
   148b0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   148b2:	200c      	movs	r0, #12
}
   148b4:	b004      	add	sp, #16
   148b6:	bd70      	pop	{r4, r5, r6, pc}
   148b8:	0002778c 	.word	0x0002778c
   148bc:	000277cc 	.word	0x000277cc
   148c0:	000272c0 	.word	0x000272c0
   148c4:	00013bbd 	.word	0x00013bbd
   148c8:	00027594 	.word	0x00027594

000148cc <ll_scan_enable>:
{
   148cc:	b538      	push	{r3, r4, r5, lr}
	if (!enable) {
   148ce:	b380      	cbz	r0, 14932 <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   148d0:	4c2d      	ldr	r4, [pc, #180]	; (14988 <ll_scan_enable+0xbc>)
   148d2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   148d6:	f013 0101 	ands.w	r1, r3, #1
   148da:	d12f      	bne.n	1493c <ll_scan_enable+0x70>
	    (scan->own_addr_type & 0x1)) {
   148dc:	f3c3 0541 	ubfx	r5, r3, #1, #2
	if ((IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) && is_coded_phy &&
   148e0:	079b      	lsls	r3, r3, #30
   148e2:	d50b      	bpl.n	148fc <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   148e4:	2001      	movs	r0, #1
   148e6:	f7fc fa4f 	bl	10d88 <ll_addr_get>
   148ea:	2106      	movs	r1, #6
   148ec:	f7fa fe02 	bl	f4f4 <mem_nz>
   148f0:	2800      	cmp	r0, #0
   148f2:	d046      	beq.n	14982 <ll_scan_enable+0xb6>
		own_addr_type = scan->own_addr_type;
   148f4:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
   148f8:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   148fc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   14900:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   14904:	f004 fbea 	bl	190dc <ull_filter_scan_update>
	lll->rpa_gen = 0;
   14908:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   1490c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   14910:	f36f 0300 	bfc	r3, #0, #1
	lll->rl_idx = FILTER_IDX_NONE;
   14914:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   14916:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   1491a:	09d3      	lsrs	r3, r2, #7
	lll->rl_idx = FILTER_IDX_NONE;
   1491c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   14920:	d002      	beq.n	14928 <ll_scan_enable+0x5c>
   14922:	3d02      	subs	r5, #2
   14924:	2d01      	cmp	r5, #1
   14926:	d922      	bls.n	1496e <ll_scan_enable+0xa2>
}
   14928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   1492c:	4816      	ldr	r0, [pc, #88]	; (14988 <ll_scan_enable+0xbc>)
   1492e:	f7ec be0b 	b.w	1548 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   14932:	4d15      	ldr	r5, [pc, #84]	; (14988 <ll_scan_enable+0xbc>)
   14934:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   14938:	07da      	lsls	r2, r3, #31
   1493a:	d402      	bmi.n	14942 <ll_scan_enable+0x76>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   1493c:	240c      	movs	r4, #12
}
   1493e:	4620      	mov	r0, r4
   14940:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   14942:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14944:	2b00      	cmp	r3, #0
   14946:	d1f9      	bne.n	1493c <ll_scan_enable+0x70>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   14948:	4629      	mov	r1, r5
   1494a:	f7ff ff4d 	bl	147e8 <ull_scan_disable>
	if (ret) {
   1494e:	4604      	mov	r4, r0
   14950:	2800      	cmp	r0, #0
   14952:	d1f4      	bne.n	1493e <ll_scan_enable+0x72>
		return ret;
	}

	scan->is_enabled = 0U;
   14954:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   14958:	f360 0300 	bfi	r3, r0, #0, #1
   1495c:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   14960:	f7ff fe14 	bl	1458c <ull_adv_is_enabled_get>
   14964:	2800      	cmp	r0, #0
   14966:	d1ea      	bne.n	1493e <ll_scan_enable+0x72>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   14968:	f004 fb74 	bl	19054 <ull_filter_adv_scan_state_cb>
   1496c:	e7e7      	b.n	1493e <ll_scan_enable+0x72>
		ull_filter_rpa_update(false);
   1496e:	2000      	movs	r0, #0
   14970:	f004 fc62 	bl	19238 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   14974:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   14978:	f043 0301 	orr.w	r3, r3, #1
   1497c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   14980:	e7d2      	b.n	14928 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   14982:	2412      	movs	r4, #18
   14984:	e7db      	b.n	1493e <ll_scan_enable+0x72>
   14986:	bf00      	nop
   14988:	200027d0 	.word	0x200027d0

0001498c <ull_scan_reset>:
{
   1498c:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   1498e:	4c0d      	ldr	r4, [pc, #52]	; (149c4 <ull_scan_reset+0x38>)
   14990:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   14994:	07db      	lsls	r3, r3, #31
   14996:	d501      	bpl.n	1499c <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   14998:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1499a:	b108      	cbz	r0, 149a0 <ull_scan_reset+0x14>
}
   1499c:	2000      	movs	r0, #0
   1499e:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   149a0:	4621      	mov	r1, r4
   149a2:	f7ff ff21 	bl	147e8 <ull_scan_disable>
	if (ret) {
   149a6:	2800      	cmp	r0, #0
   149a8:	d1f8      	bne.n	1499c <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   149aa:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   149ae:	f360 0200 	bfi	r2, r0, #0, #1
   149b2:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	if (!ull_adv_is_enabled_get(0))
   149b6:	f7ff fde9 	bl	1458c <ull_adv_is_enabled_get>
   149ba:	2800      	cmp	r0, #0
   149bc:	d1ee      	bne.n	1499c <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
   149be:	f004 fb49 	bl	19054 <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   149c2:	e7eb      	b.n	1499c <ull_scan_reset+0x10>
   149c4:	200027d0 	.word	0x200027d0

000149c8 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   149c8:	4a04      	ldr	r2, [pc, #16]	; (149dc <ull_scan_handle_get+0x14>)
   149ca:	4b05      	ldr	r3, [pc, #20]	; (149e0 <ull_scan_handle_get+0x18>)
   149cc:	1a80      	subs	r0, r0, r2
   149ce:	0880      	lsrs	r0, r0, #2
   149d0:	fba3 3000 	umull	r3, r0, r3, r0
}
   149d4:	f3c0 0047 	ubfx	r0, r0, #1, #8
   149d8:	4770      	bx	lr
   149da:	bf00      	nop
   149dc:	200027d0 	.word	0x200027d0
   149e0:	1af286bd 	.word	0x1af286bd

000149e4 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   149e4:	4a04      	ldr	r2, [pc, #16]	; (149f8 <ull_scan_lll_handle_get+0x14>)
   149e6:	6800      	ldr	r0, [r0, #0]
   149e8:	4b04      	ldr	r3, [pc, #16]	; (149fc <ull_scan_lll_handle_get+0x18>)
   149ea:	1a80      	subs	r0, r0, r2
   149ec:	0880      	lsrs	r0, r0, #2
   149ee:	fba3 3000 	umull	r3, r0, r3, r0
}
   149f2:	f3c0 0047 	ubfx	r0, r0, #1, #8
   149f6:	4770      	bx	lr
   149f8:	200027d0 	.word	0x200027d0
   149fc:	1af286bd 	.word	0x1af286bd

00014a00 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14a00:	b938      	cbnz	r0, 14a12 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   14a02:	4805      	ldr	r0, [pc, #20]	; (14a18 <ull_scan_is_enabled_get+0x18>)
   14a04:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
   14a08:	f013 0f01 	tst.w	r3, #1
   14a0c:	bf08      	it	eq
   14a0e:	2000      	moveq	r0, #0
   14a10:	4770      	bx	lr
		return NULL;
   14a12:	2000      	movs	r0, #0
}
   14a14:	4770      	bx	lr
   14a16:	bf00      	nop
   14a18:	200027d0 	.word	0x200027d0

00014a1c <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   14a1c:	4a04      	ldr	r2, [pc, #16]	; (14a30 <ull_scan_is_disabled_get+0x14>)
   14a1e:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   14a22:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   14a26:	4303      	orrs	r3, r0
}
   14a28:	bf0c      	ite	eq
   14a2a:	4610      	moveq	r0, r2
   14a2c:	2000      	movne	r0, #0
   14a2e:	4770      	bx	lr
   14a30:	200027d0 	.word	0x200027d0

00014a34 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14a34:	b988      	cbnz	r0, 14a5a <ull_scan_is_enabled+0x26>
	if (!scan || !scan->is_enabled) {
   14a36:	4a0a      	ldr	r2, [pc, #40]	; (14a60 <ull_scan_is_enabled+0x2c>)
   14a38:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   14a3c:	f013 0001 	ands.w	r0, r3, #1
   14a40:	d00c      	beq.n	14a5c <ull_scan_is_enabled+0x28>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   14a42:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? BIT(2) : 0) |
   14a46:	6a52      	ldr	r2, [r2, #36]	; 0x24
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   14a48:	f003 0301 	and.w	r3, r3, #1
   14a4c:	09c0      	lsrs	r0, r0, #7
   14a4e:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? BIT(2) : 0) |
   14a52:	b11a      	cbz	r2, 14a5c <ull_scan_is_enabled+0x28>
   14a54:	f040 0004 	orr.w	r0, r0, #4
   14a58:	4770      	bx	lr
		return 0;
   14a5a:	2000      	movs	r0, #0
}
   14a5c:	4770      	bx	lr
   14a5e:	bf00      	nop
   14a60:	200027d0 	.word	0x200027d0

00014a64 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14a64:	b950      	cbnz	r0, 14a7c <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   14a66:	4b06      	ldr	r3, [pc, #24]	; (14a80 <ull_scan_filter_pol_get+0x1c>)
   14a68:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
   14a6c:	f010 0001 	ands.w	r0, r0, #1
   14a70:	d005      	beq.n	14a7e <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   14a72:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   14a76:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   14a7a:	4770      	bx	lr
		return 0;
   14a7c:	2000      	movs	r0, #0
}
   14a7e:	4770      	bx	lr
   14a80:	200027d0 	.word	0x200027d0

00014a84 <tx_ull_dequeue>:
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14a84:	f8d0 21b8 	ldr.w	r2, [r0, #440]	; 0x1b8
{
   14a88:	4603      	mov	r3, r0
   14a8a:	b410      	push	{r4}
   14a8c:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14a8e:	b172      	cbz	r2, 14aae <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   14a90:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
   14a94:	428a      	cmp	r2, r1
   14a96:	d02b      	beq.n	14af0 <tx_ull_dequeue+0x6c>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14a98:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   14a9c:	4291      	cmp	r1, r2
   14a9e:	d01a      	beq.n	14ad6 <tx_ull_dequeue+0x52>
		conn->tx_head = conn->tx_head->next;
   14aa0:	6809      	ldr	r1, [r1, #0]
   14aa2:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
		tx->next = NULL;
   14aa6:	2200      	movs	r2, #0
}
   14aa8:	bc10      	pop	{r4}
		tx->next = NULL;
   14aaa:	6002      	str	r2, [r0, #0]
}
   14aac:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14aae:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
   14ab2:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
   14ab6:	428a      	cmp	r2, r1
   14ab8:	d025      	beq.n	14b06 <tx_ull_dequeue+0x82>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14aba:	7911      	ldrb	r1, [r2, #4]
   14abc:	f001 0103 	and.w	r1, r1, #3
   14ac0:	2903      	cmp	r1, #3
   14ac2:	d00e      	beq.n	14ae2 <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
   14ac4:	6812      	ldr	r2, [r2, #0]
   14ac6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
			conn->tx_ctrl = NULL;
   14aca:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   14acc:	e9c3 226e 	strd	r2, r2, [r3, #440]	; 0x1b8
}
   14ad0:	bc10      	pop	{r4}
		tx->next = tx;
   14ad2:	6000      	str	r0, [r0, #0]
}
   14ad4:	4770      	bx	lr
   14ad6:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   14ad8:	6809      	ldr	r1, [r1, #0]
   14ada:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
   14ade:	4611      	mov	r1, r2
   14ae0:	e7de      	b.n	14aa0 <tx_ull_dequeue+0x1c>
		    ((pdu_data_tx->llctrl.opcode !=
   14ae2:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14ae4:	2903      	cmp	r1, #3
   14ae6:	d001      	beq.n	14aec <tx_ull_dequeue+0x68>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14ae8:	290a      	cmp	r1, #10
   14aea:	d1eb      	bne.n	14ac4 <tx_ull_dequeue+0x40>
   14aec:	4611      	mov	r1, r2
   14aee:	e7d7      	b.n	14aa0 <tx_ull_dequeue+0x1c>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14af0:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		conn->tx_head = conn->tx_head->next;
   14af4:	6809      	ldr	r1, [r1, #0]
   14af6:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14afa:	4294      	cmp	r4, r2
			conn->tx_ctrl = conn->tx_head;
   14afc:	bf18      	it	ne
   14afe:	f8c3 11b8 	strne.w	r1, [r3, #440]	; 0x1b8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14b02:	d1e5      	bne.n	14ad0 <tx_ull_dequeue+0x4c>
   14b04:	e7e1      	b.n	14aca <tx_ull_dequeue+0x46>
	if (conn->tx_head == conn->tx_ctrl) {
   14b06:	2a00      	cmp	r2, #0
   14b08:	d1e6      	bne.n	14ad8 <tx_ull_dequeue+0x54>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14b0a:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
	if (conn->tx_head == conn->tx_ctrl) {
   14b0e:	4611      	mov	r1, r2
   14b10:	e7f0      	b.n	14af4 <tx_ull_dequeue+0x70>
   14b12:	bf00      	nop

00014b14 <calc_eff_time>:
	uint16_t time = PKT_US(max_octets, phy);
   14b14:	074b      	lsls	r3, r1, #29
   14b16:	d50c      	bpl.n	14b32 <calc_eff_time+0x1e>
   14b18:	0180      	lsls	r0, r0, #6
	eff_time = MIN(eff_time, default_time);
   14b1a:	f500 7074 	add.w	r0, r0, #976	; 0x3d0
   14b1e:	4290      	cmp	r0, r2
   14b20:	bf28      	it	cs
   14b22:	4610      	movcs	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b24:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   14b28:	4288      	cmp	r0, r1
   14b2a:	bf38      	it	cc
   14b2c:	4608      	movcc	r0, r1
}
   14b2e:	b280      	uxth	r0, r0
   14b30:	4770      	bx	lr
   14b32:	f001 0303 	and.w	r3, r1, #3
	uint16_t time = PKT_US(max_octets, phy);
   14b36:	300d      	adds	r0, #13
   14b38:	4418      	add	r0, r3
   14b3a:	f3c1 0140 	ubfx	r1, r1, #1, #1
   14b3e:	00c0      	lsls	r0, r0, #3
   14b40:	40c8      	lsrs	r0, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   14b42:	b280      	uxth	r0, r0
   14b44:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   14b48:	bf38      	it	cc
   14b4a:	f44f 70a4 	movcc.w	r0, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b4e:	3328      	adds	r3, #40	; 0x28
	eff_time = MIN(eff_time, default_time);
   14b50:	4290      	cmp	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	eff_time = MIN(eff_time, default_time);
   14b56:	bf28      	it	cs
   14b58:	4610      	movcs	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14b5a:	fa23 f101 	lsr.w	r1, r3, r1
   14b5e:	4288      	cmp	r0, r1
   14b60:	bf38      	it	cc
   14b62:	4608      	movcc	r0, r1
}
   14b64:	b280      	uxth	r0, r0
   14b66:	4770      	bx	lr

00014b68 <ticker_update_latency_cancel_op_cb>:
{
   14b68:	b510      	push	{r4, lr}
   14b6a:	460c      	mov	r4, r1
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   14b6c:	b930      	cbnz	r0, 14b7c <ticker_update_latency_cancel_op_cb+0x14>
	conn->slave.latency_cancel = 0U;
   14b6e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   14b72:	f36f 0341 	bfc	r3, #1, #1
   14b76:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
}
   14b7a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   14b7c:	4a09      	ldr	r2, [pc, #36]	; (14ba4 <ticker_update_latency_cancel_op_cb+0x3c>)
   14b7e:	490a      	ldr	r1, [pc, #40]	; (14ba8 <ticker_update_latency_cancel_op_cb+0x40>)
   14b80:	480a      	ldr	r0, [pc, #40]	; (14bac <ticker_update_latency_cancel_op_cb+0x44>)
   14b82:	f44f 63c9 	mov.w	r3, #1608	; 0x648
   14b86:	f00b ff2a 	bl	209de <printk>
   14b8a:	4040      	eors	r0, r0
   14b8c:	f380 8811 	msr	BASEPRI, r0
   14b90:	f04f 0003 	mov.w	r0, #3
   14b94:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   14b96:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   14b9a:	f36f 0341 	bfc	r3, #1, #1
   14b9e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
}
   14ba2:	bd10      	pop	{r4, pc}
   14ba4:	000277f0 	.word	0x000277f0
   14ba8:	00027830 	.word	0x00027830
   14bac:	000272c0 	.word	0x000272c0

00014bb0 <init_reset>:
{
   14bb0:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   14bb2:	4b15      	ldr	r3, [pc, #84]	; (14c08 <init_reset+0x58>)
   14bb4:	4815      	ldr	r0, [pc, #84]	; (14c0c <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14bb6:	4c16      	ldr	r4, [pc, #88]	; (14c10 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   14bb8:	2201      	movs	r2, #1
   14bba:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   14bbe:	f7fa fc2f 	bl	f420 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   14bc2:	4b14      	ldr	r3, [pc, #80]	; (14c14 <init_reset+0x64>)
   14bc4:	2203      	movs	r2, #3
   14bc6:	1d18      	adds	r0, r3, #4
   14bc8:	2124      	movs	r1, #36	; 0x24
   14bca:	f7fa fc29 	bl	f420 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   14bce:	4b12      	ldr	r3, [pc, #72]	; (14c18 <init_reset+0x68>)
   14bd0:	2204      	movs	r2, #4
   14bd2:	1898      	adds	r0, r3, r2
   14bd4:	2120      	movs	r1, #32
   14bd6:	f7fa fc23 	bl	f420 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   14bda:	4b10      	ldr	r3, [pc, #64]	; (14c1c <init_reset+0x6c>)
   14bdc:	2207      	movs	r2, #7
   14bde:	1d18      	adds	r0, r3, #4
   14be0:	2108      	movs	r1, #8
   14be2:	f7fa fc1d 	bl	f420 <mem_init>
	default_phy_tx |= BIT(2);
   14be6:	490e      	ldr	r1, [pc, #56]	; (14c20 <init_reset+0x70>)
	default_phy_rx |= BIT(2);
   14be8:	4a0e      	ldr	r2, [pc, #56]	; (14c24 <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14bea:	480f      	ldr	r0, [pc, #60]	; (14c28 <init_reset+0x78>)
	default_phy_tx |= BIT(2);
   14bec:	2307      	movs	r3, #7
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14bee:	f04f 0c1b 	mov.w	ip, #27
   14bf2:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= BIT(2);
   14bf6:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14bf8:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= BIT(2);
   14bfc:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14bfe:	f8a0 c000 	strh.w	ip, [r0]
}
   14c02:	2000      	movs	r0, #0
   14c04:	bd10      	pop	{r4, pc}
   14c06:	bf00      	nop
   14c08:	2000282c 	.word	0x2000282c
   14c0c:	20002830 	.word	0x20002830
   14c10:	20003634 	.word	0x20003634
   14c14:	20002a08 	.word	0x20002a08
   14c18:	20002a78 	.word	0x20002a78
   14c1c:	20002afc 	.word	0x20002afc
   14c20:	20003bc2 	.word	0x20003bc2
   14c24:	20003bc1 	.word	0x20003bc1
   14c28:	20003636 	.word	0x20003636

00014c2c <tx_lll_flush>:
{
   14c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   14c30:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14c34:	4935      	ldr	r1, [pc, #212]	; (14d0c <tx_lll_flush+0xe0>)
{
   14c36:	b083      	sub	sp, #12
   14c38:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14c3a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
   14c3e:	4640      	mov	r0, r8
   14c40:	f7fa fc44 	bl	f4cc <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14c44:	f105 0650 	add.w	r6, r5, #80	; 0x50
	lll_conn_flush(handle, lll);
   14c48:	4629      	mov	r1, r5
   14c4a:	f007 fbe1 	bl	1c410 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14c4e:	6d68      	ldr	r0, [r5, #84]	; 0x54
   14c50:	aa01      	add	r2, sp, #4
   14c52:	4631      	mov	r1, r6
   14c54:	f7fa fc7a 	bl	f54c <memq_dequeue>
	while (link) {
   14c58:	b338      	cbz	r0, 14caa <tx_lll_flush+0x7e>
   14c5a:	4c2d      	ldr	r4, [pc, #180]	; (14d10 <tx_lll_flush+0xe4>)
   14c5c:	4602      	mov	r2, r0
		lll_tx->handle = 0xFFFF;
   14c5e:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14c62:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   14c66:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   14c68:	f894 c001 	ldrb.w	ip, [r4, #1]
   14c6c:	78a0      	ldrb	r0, [r4, #2]
	last = last + 1;
   14c6e:	1c4b      	adds	r3, r1, #1
   14c70:	b2db      	uxtb	r3, r3
		last = 0U;
   14c72:	459c      	cmp	ip, r3
   14c74:	bf08      	it	eq
   14c76:	2300      	moveq	r3, #0
	if (last == first) {
   14c78:	4298      	cmp	r0, r3
   14c7a:	d036      	beq.n	14cea <tx_lll_flush+0xbe>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14c7c:	f894 c000 	ldrb.w	ip, [r4]
   14c80:	fb1c fc01 	smulbb	ip, ip, r1
		LL_ASSERT(lll_tx);
   14c84:	eb19 000c 	adds.w	r0, r9, ip
   14c88:	d02f      	beq.n	14cea <tx_lll_flush+0xbe>
		lll_tx->node = tx;
   14c8a:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   14c8c:	f829 700c 	strh.w	r7, [r9, ip]
		lll_tx->node = tx;
   14c90:	6041      	str	r1, [r0, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14c92:	6808      	ldr	r0, [r1, #0]
   14c94:	6010      	str	r0, [r2, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14c96:	6d68      	ldr	r0, [r5, #84]	; 0x54
		tx->next = link;
   14c98:	600a      	str	r2, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14c9a:	aa01      	add	r2, sp, #4
   14c9c:	4631      	mov	r1, r6
	*last = idx; /* Commit: Update write index */
   14c9e:	70e3      	strb	r3, [r4, #3]
   14ca0:	f7fa fc54 	bl	f54c <memq_dequeue>
	while (link) {
   14ca4:	4602      	mov	r2, r0
   14ca6:	2800      	cmp	r0, #0
   14ca8:	d1dd      	bne.n	14c66 <tx_lll_flush+0x3a>
	LL_ASSERT(rx->hdr.link);
   14caa:	f8d8 0134 	ldr.w	r0, [r8, #308]	; 0x134
	rx = (void *)&conn->llcp_terminate.node_rx;
   14cae:	f508 749a 	add.w	r4, r8, #308	; 0x134
	LL_ASSERT(rx->hdr.link);
   14cb2:	b150      	cbz	r0, 14cca <tx_lll_flush+0x9e>
	rx->hdr.link = NULL;
   14cb4:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   14cb6:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   14cb8:	f8c8 3134 	str.w	r3, [r8, #308]	; 0x134
	ull_rx_put(link, rx);
   14cbc:	f7ff f83c 	bl	13d38 <ull_rx_put>
	ull_rx_sched();
   14cc0:	f7ff f84a 	bl	13d58 <ull_rx_sched>
}
   14cc4:	b003      	add	sp, #12
   14cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   14cca:	4a12      	ldr	r2, [pc, #72]	; (14d14 <tx_lll_flush+0xe8>)
   14ccc:	4912      	ldr	r1, [pc, #72]	; (14d18 <tx_lll_flush+0xec>)
   14cce:	4813      	ldr	r0, [pc, #76]	; (14d1c <tx_lll_flush+0xf0>)
   14cd0:	f240 63ff 	movw	r3, #1791	; 0x6ff
   14cd4:	f00b fe83 	bl	209de <printk>
   14cd8:	4040      	eors	r0, r0
   14cda:	f380 8811 	msr	BASEPRI, r0
   14cde:	f04f 0003 	mov.w	r0, #3
   14ce2:	df02      	svc	2
	link = rx->hdr.link;
   14ce4:	f8d8 0134 	ldr.w	r0, [r8, #308]	; 0x134
   14ce8:	e7e4      	b.n	14cb4 <tx_lll_flush+0x88>
		LL_ASSERT(lll_tx);
   14cea:	4a0a      	ldr	r2, [pc, #40]	; (14d14 <tx_lll_flush+0xe8>)
   14cec:	490c      	ldr	r1, [pc, #48]	; (14d20 <tx_lll_flush+0xf4>)
   14cee:	480b      	ldr	r0, [pc, #44]	; (14d1c <tx_lll_flush+0xf0>)
   14cf0:	f240 63eb 	movw	r3, #1771	; 0x6eb
   14cf4:	f00b fe73 	bl	209de <printk>
   14cf8:	4040      	eors	r0, r0
   14cfa:	f380 8811 	msr	BASEPRI, r0
   14cfe:	f04f 0003 	mov.w	r0, #3
   14d02:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   14d04:	2300      	movs	r3, #0
   14d06:	801b      	strh	r3, [r3, #0]
   14d08:	deff      	udf	#255	; 0xff
   14d0a:	bf00      	nop
   14d0c:	20002830 	.word	0x20002830
   14d10:	200004e0 	.word	0x200004e0
   14d14:	000277f0 	.word	0x000277f0
   14d18:	0002784c 	.word	0x0002784c
   14d1c:	000272c0 	.word	0x000272c0
   14d20:	00027844 	.word	0x00027844

00014d24 <ticker_op_stop_cb>:
{
   14d24:	b510      	push	{r4, lr}
   14d26:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14d28:	b9b0      	cbnz	r0, 14d58 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   14d2a:	4b12      	ldr	r3, [pc, #72]	; (14d74 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14d2c:	2200      	movs	r2, #0
   14d2e:	4611      	mov	r1, r2
   14d30:	2002      	movs	r0, #2
	mfy.param = param;
   14d32:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14d34:	f7fa fc6c 	bl	f610 <mayfly_enqueue>
	LL_ASSERT(!retval);
   14d38:	b900      	cbnz	r0, 14d3c <ticker_op_stop_cb+0x18>
}
   14d3a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   14d3c:	4a0e      	ldr	r2, [pc, #56]	; (14d78 <ticker_op_stop_cb+0x54>)
   14d3e:	490f      	ldr	r1, [pc, #60]	; (14d7c <ticker_op_stop_cb+0x58>)
   14d40:	480f      	ldr	r0, [pc, #60]	; (14d80 <ticker_op_stop_cb+0x5c>)
   14d42:	f44f 63cf 	mov.w	r3, #1656	; 0x678
   14d46:	f00b fe4a 	bl	209de <printk>
   14d4a:	4040      	eors	r0, r0
   14d4c:	f380 8811 	msr	BASEPRI, r0
   14d50:	f04f 0003 	mov.w	r0, #3
   14d54:	df02      	svc	2
}
   14d56:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14d58:	4a07      	ldr	r2, [pc, #28]	; (14d78 <ticker_op_stop_cb+0x54>)
   14d5a:	490a      	ldr	r1, [pc, #40]	; (14d84 <ticker_op_stop_cb+0x60>)
   14d5c:	4808      	ldr	r0, [pc, #32]	; (14d80 <ticker_op_stop_cb+0x5c>)
   14d5e:	f240 6371 	movw	r3, #1649	; 0x671
   14d62:	f00b fe3c 	bl	209de <printk>
   14d66:	4040      	eors	r0, r0
   14d68:	f380 8811 	msr	BASEPRI, r0
   14d6c:	f04f 0003 	mov.w	r0, #3
   14d70:	df02      	svc	2
   14d72:	e7da      	b.n	14d2a <ticker_op_stop_cb+0x6>
   14d74:	20000548 	.word	0x20000548
   14d78:	000277f0 	.word	0x000277f0
   14d7c:	000275ac 	.word	0x000275ac
   14d80:	000272c0 	.word	0x000272c0
   14d84:	0002785c 	.word	0x0002785c

00014d88 <ticker_start_conn_op_cb>:
{
   14d88:	b510      	push	{r4, lr}
   14d8a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14d8c:	b990      	cbnz	r0, 14db4 <ticker_start_conn_op_cb+0x2c>
	void *p = ull_update_unmark(param);
   14d8e:	4620      	mov	r0, r4
   14d90:	f7fe ff4e 	bl	13c30 <ull_update_unmark>
	LL_ASSERT(p == param);
   14d94:	4284      	cmp	r4, r0
   14d96:	d00c      	beq.n	14db2 <ticker_start_conn_op_cb+0x2a>
   14d98:	4a0d      	ldr	r2, [pc, #52]	; (14dd0 <ticker_start_conn_op_cb+0x48>)
   14d9a:	490e      	ldr	r1, [pc, #56]	; (14dd4 <ticker_start_conn_op_cb+0x4c>)
   14d9c:	480e      	ldr	r0, [pc, #56]	; (14dd8 <ticker_start_conn_op_cb+0x50>)
   14d9e:	f44f 63cd 	mov.w	r3, #1640	; 0x668
   14da2:	f00b fe1c 	bl	209de <printk>
   14da6:	4040      	eors	r0, r0
   14da8:	f380 8811 	msr	BASEPRI, r0
   14dac:	f04f 0003 	mov.w	r0, #3
   14db0:	df02      	svc	2
}
   14db2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14db4:	4a06      	ldr	r2, [pc, #24]	; (14dd0 <ticker_start_conn_op_cb+0x48>)
   14db6:	4909      	ldr	r1, [pc, #36]	; (14ddc <ticker_start_conn_op_cb+0x54>)
   14db8:	4807      	ldr	r0, [pc, #28]	; (14dd8 <ticker_start_conn_op_cb+0x50>)
   14dba:	f240 6364 	movw	r3, #1636	; 0x664
   14dbe:	f00b fe0e 	bl	209de <printk>
   14dc2:	4040      	eors	r0, r0
   14dc4:	f380 8811 	msr	BASEPRI, r0
   14dc8:	f04f 0003 	mov.w	r0, #3
   14dcc:	df02      	svc	2
   14dce:	e7de      	b.n	14d8e <ticker_start_conn_op_cb+0x6>
   14dd0:	000277f0 	.word	0x000277f0
   14dd4:	00027868 	.word	0x00027868
   14dd8:	000272c0 	.word	0x000272c0
   14ddc:	0002785c 	.word	0x0002785c

00014de0 <ticker_stop_conn_op_cb>:
{
   14de0:	b510      	push	{r4, lr}
   14de2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14de4:	b990      	cbnz	r0, 14e0c <ticker_stop_conn_op_cb+0x2c>
	void *p = ull_update_mark(param);
   14de6:	4620      	mov	r0, r4
   14de8:	f7fe ff18 	bl	13c1c <ull_update_mark>
	LL_ASSERT(p == param);
   14dec:	4284      	cmp	r4, r0
   14dee:	d00c      	beq.n	14e0a <ticker_stop_conn_op_cb+0x2a>
   14df0:	4a0d      	ldr	r2, [pc, #52]	; (14e28 <ticker_stop_conn_op_cb+0x48>)
   14df2:	490e      	ldr	r1, [pc, #56]	; (14e2c <ticker_stop_conn_op_cb+0x4c>)
   14df4:	480e      	ldr	r0, [pc, #56]	; (14e30 <ticker_stop_conn_op_cb+0x50>)
   14df6:	f240 635f 	movw	r3, #1631	; 0x65f
   14dfa:	f00b fdf0 	bl	209de <printk>
   14dfe:	4040      	eors	r0, r0
   14e00:	f380 8811 	msr	BASEPRI, r0
   14e04:	f04f 0003 	mov.w	r0, #3
   14e08:	df02      	svc	2
}
   14e0a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14e0c:	4a06      	ldr	r2, [pc, #24]	; (14e28 <ticker_stop_conn_op_cb+0x48>)
   14e0e:	4909      	ldr	r1, [pc, #36]	; (14e34 <ticker_stop_conn_op_cb+0x54>)
   14e10:	4807      	ldr	r0, [pc, #28]	; (14e30 <ticker_stop_conn_op_cb+0x50>)
   14e12:	f240 635b 	movw	r3, #1627	; 0x65b
   14e16:	f00b fde2 	bl	209de <printk>
   14e1a:	4040      	eors	r0, r0
   14e1c:	f380 8811 	msr	BASEPRI, r0
   14e20:	f04f 0003 	mov.w	r0, #3
   14e24:	df02      	svc	2
   14e26:	e7de      	b.n	14de6 <ticker_stop_conn_op_cb+0x6>
   14e28:	000277f0 	.word	0x000277f0
   14e2c:	00027868 	.word	0x00027868
   14e30:	000272c0 	.word	0x000272c0
   14e34:	0002785c 	.word	0x0002785c

00014e38 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14e38:	b900      	cbnz	r0, 14e3c <ticker_update_conn_op_cb+0x4>
   14e3a:	4770      	bx	lr
{
   14e3c:	b510      	push	{r4, lr}
   14e3e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14e40:	f7fe ff02 	bl	13c48 <ull_update_mark_get>
   14e44:	4284      	cmp	r4, r0
   14e46:	d010      	beq.n	14e6a <ticker_update_conn_op_cb+0x32>
   14e48:	f7fe fee2 	bl	13c10 <ull_disable_mark_get>
   14e4c:	4284      	cmp	r4, r0
   14e4e:	d00c      	beq.n	14e6a <ticker_update_conn_op_cb+0x32>
   14e50:	4a06      	ldr	r2, [pc, #24]	; (14e6c <ticker_update_conn_op_cb+0x34>)
   14e52:	4907      	ldr	r1, [pc, #28]	; (14e70 <ticker_update_conn_op_cb+0x38>)
   14e54:	4807      	ldr	r0, [pc, #28]	; (14e74 <ticker_update_conn_op_cb+0x3c>)
   14e56:	f240 6354 	movw	r3, #1620	; 0x654
   14e5a:	f00b fdc0 	bl	209de <printk>
   14e5e:	4040      	eors	r0, r0
   14e60:	f380 8811 	msr	BASEPRI, r0
   14e64:	f04f 0003 	mov.w	r0, #3
   14e68:	df02      	svc	2
}
   14e6a:	bd10      	pop	{r4, pc}
   14e6c:	000277f0 	.word	0x000277f0
   14e70:	00027874 	.word	0x00027874
   14e74:	000272c0 	.word	0x000272c0

00014e78 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   14e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e7a:	4607      	mov	r7, r0
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14e7c:	4825      	ldr	r0, [pc, #148]	; (14f14 <reject_ext_ind_send+0x9c>)
{
   14e7e:	460c      	mov	r4, r1
   14e80:	4616      	mov	r6, r2
   14e82:	461d      	mov	r5, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14e84:	f7fa faf0 	bl	f468 <mem_acquire>
	if (!tx) {
   14e88:	2800      	cmp	r0, #0
   14e8a:	d040      	beq.n	14f0e <reject_ext_ind_send+0x96>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14e8c:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14e8e:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14e90:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   14e92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14e96:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14e98:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   14e9a:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14e9c:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   14ea0:	7245      	strb	r5, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14ea2:	7102      	strb	r2, [r0, #4]
	if (
   14ea4:	b11b      	cbz	r3, 14eae <reject_ext_ind_send+0x36>
	    !conn->llcp_enc.pause_tx &&
   14ea6:	f897 2156 	ldrb.w	r2, [r7, #342]	; 0x156
	    conn->tx_head &&
   14eaa:	0791      	lsls	r1, r2, #30
   14eac:	d50f      	bpl.n	14ece <reject_ext_ind_send+0x56>
		if (!conn->tx_ctrl) {
   14eae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
   14eb2:	b332      	cbz	r2, 14f02 <reject_ext_ind_send+0x8a>
	tx->next = conn->tx_ctrl_last->next;
   14eb4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
   14eb8:	681a      	ldr	r2, [r3, #0]
   14eba:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14ebc:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   14ebe:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   14ec0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
	if (!tx->next) {
   14ec4:	b1d3      	cbz	r3, 14efc <reject_ext_ind_send+0x84>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14ec6:	2303      	movs	r3, #3
   14ec8:	7123      	strb	r3, [r4, #4]

	return 0;
   14eca:	2000      	movs	r0, #0
}
   14ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !conn->llcp_phy.pause_tx &&
   14ece:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
   14ed2:	07d2      	lsls	r2, r2, #31
   14ed4:	d4eb      	bmi.n	14eae <reject_ext_ind_send+0x36>
		if (conn->tx_head == conn->tx_data) {
   14ed6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   14eda:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   14edc:	bf04      	itt	eq
   14ede:	681a      	ldreq	r2, [r3, #0]
   14ee0:	f8c7 21c0 	streq.w	r2, [r7, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
   14ee4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
   14ee8:	2a00      	cmp	r2, #0
   14eea:	d1e3      	bne.n	14eb4 <reject_ext_ind_send+0x3c>
			tx->next = conn->tx_head->next;
   14eec:	681a      	ldr	r2, [r3, #0]
   14eee:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   14ef0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   14ef2:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   14ef4:	e9c7 006e 	strd	r0, r0, [r7, #440]	; 0x1b8
	if (!tx->next) {
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d1e4      	bne.n	14ec6 <reject_ext_ind_send+0x4e>
		conn->tx_data_last = tx;
   14efc:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
   14f00:	e7e1      	b.n	14ec6 <reject_ext_ind_send+0x4e>
			tx->next = conn->tx_head;
   14f02:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14f04:	e9c7 006d 	strd	r0, r0, [r7, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
   14f08:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
   14f0c:	e7da      	b.n	14ec4 <reject_ext_ind_send+0x4c>
		return -ENOBUFS;
   14f0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14f14:	20002a78 	.word	0x20002a78

00014f18 <ctrl_tx_sec_enqueue>:
{
   14f18:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp_enc.pause_tx) {
   14f1a:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
   14f1e:	079a      	lsls	r2, r3, #30
{
   14f20:	4604      	mov	r4, r0
   14f22:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   14f24:	d50c      	bpl.n	14f40 <ctrl_tx_sec_enqueue+0x28>
		if (!conn->tx_ctrl) {
   14f26:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   14f2a:	2b00      	cmp	r3, #0
   14f2c:	d04e      	beq.n	14fcc <ctrl_tx_sec_enqueue+0xb4>
			tx->next = conn->tx_ctrl_last->next;
   14f2e:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   14f32:	681a      	ldr	r2, [r3, #0]
   14f34:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   14f36:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   14f38:	682b      	ldr	r3, [r5, #0]
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	d034      	beq.n	14fa8 <ctrl_tx_sec_enqueue+0x90>
}
   14f3e:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->tx_head) {
   14f40:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
   14f44:	b342      	cbz	r2, 14f98 <ctrl_tx_sec_enqueue+0x80>
			if ((conn->llcp_req != conn->llcp_ack) &&
   14f46:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   14f4a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   14f4e:	4299      	cmp	r1, r3
   14f50:	d003      	beq.n	14f5a <ctrl_tx_sec_enqueue+0x42>
   14f52:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
   14f56:	2b03      	cmp	r3, #3
   14f58:	d040      	beq.n	14fdc <ctrl_tx_sec_enqueue+0xc4>
	    !conn->llcp_phy.pause_tx &&
   14f5a:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
   14f5e:	f013 0301 	ands.w	r3, r3, #1
   14f62:	d124      	bne.n	14fae <ctrl_tx_sec_enqueue+0x96>
		if (conn->tx_head == conn->tx_data) {
   14f64:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   14f68:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   14f6a:	bf04      	itt	eq
   14f6c:	6811      	ldreq	r1, [r2, #0]
   14f6e:	f8c4 11c0 	streq.w	r1, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
   14f72:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
   14f76:	2900      	cmp	r1, #0
   14f78:	d053      	beq.n	15022 <ctrl_tx_sec_enqueue+0x10a>
			LL_ASSERT(!pause);
   14f7a:	b1e3      	cbz	r3, 14fb6 <ctrl_tx_sec_enqueue+0x9e>
   14f7c:	4a32      	ldr	r2, [pc, #200]	; (15048 <ctrl_tx_sec_enqueue+0x130>)
   14f7e:	4933      	ldr	r1, [pc, #204]	; (1504c <ctrl_tx_sec_enqueue+0x134>)
   14f80:	4833      	ldr	r0, [pc, #204]	; (15050 <ctrl_tx_sec_enqueue+0x138>)
   14f82:	f240 735a 	movw	r3, #1882	; 0x75a
   14f86:	f00b fd2a 	bl	209de <printk>
   14f8a:	4040      	eors	r0, r0
   14f8c:	f380 8811 	msr	BASEPRI, r0
   14f90:	f04f 0003 	mov.w	r0, #3
   14f94:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   14f96:	e00e      	b.n	14fb6 <ctrl_tx_sec_enqueue+0x9e>
		if (!conn->tx_ctrl) {
   14f98:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   14f9c:	b95b      	cbnz	r3, 14fb6 <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   14f9e:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   14fa0:	e9c0 116d 	strd	r1, r1, [r0, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
   14fa4:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
			conn->tx_data_last = tx;
   14fa8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   14fac:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   14fae:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   14fb2:	2b00      	cmp	r3, #0
   14fb4:	d040      	beq.n	15038 <ctrl_tx_sec_enqueue+0x120>
	tx->next = conn->tx_ctrl_last->next;
   14fb6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   14fba:	681a      	ldr	r2, [r3, #0]
   14fbc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   14fbe:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   14fc0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   14fc2:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
		if (!tx->next) {
   14fc6:	2b00      	cmp	r3, #0
   14fc8:	d1b9      	bne.n	14f3e <ctrl_tx_sec_enqueue+0x26>
   14fca:	e7ed      	b.n	14fa8 <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   14fcc:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
   14fd0:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   14fd2:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
		if (!tx->next) {
   14fd6:	2b00      	cmp	r3, #0
   14fd8:	d1b1      	bne.n	14f3e <ctrl_tx_sec_enqueue+0x26>
   14fda:	e7e5      	b.n	14fa8 <ctrl_tx_sec_enqueue+0x90>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14fdc:	7913      	ldrb	r3, [r2, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   14fde:	f003 0303 	and.w	r3, r3, #3
   14fe2:	2b03      	cmp	r3, #3
   14fe4:	d1b9      	bne.n	14f5a <ctrl_tx_sec_enqueue+0x42>
			    ((pdu_data_tx->llctrl.opcode ==
   14fe6:	79d3      	ldrb	r3, [r2, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14fe8:	2b03      	cmp	r3, #3
   14fea:	d001      	beq.n	14ff0 <ctrl_tx_sec_enqueue+0xd8>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   14fec:	2b0a      	cmp	r3, #10
   14fee:	d1b4      	bne.n	14f5a <ctrl_tx_sec_enqueue+0x42>
	    !conn->llcp_phy.pause_tx &&
   14ff0:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
   14ff4:	07db      	lsls	r3, r3, #31
   14ff6:	d525      	bpl.n	15044 <ctrl_tx_sec_enqueue+0x12c>
		if (!conn->tx_ctrl) {
   14ff8:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   14ffc:	b16b      	cbz	r3, 1501a <ctrl_tx_sec_enqueue+0x102>
			LL_ASSERT(!pause);
   14ffe:	4a12      	ldr	r2, [pc, #72]	; (15048 <ctrl_tx_sec_enqueue+0x130>)
   15000:	4912      	ldr	r1, [pc, #72]	; (1504c <ctrl_tx_sec_enqueue+0x134>)
   15002:	4813      	ldr	r0, [pc, #76]	; (15050 <ctrl_tx_sec_enqueue+0x138>)
   15004:	f240 736c 	movw	r3, #1900	; 0x76c
   15008:	f00b fce9 	bl	209de <printk>
   1500c:	4040      	eors	r0, r0
   1500e:	f380 8811 	msr	BASEPRI, r0
   15012:	f04f 0003 	mov.w	r0, #3
   15016:	df02      	svc	2
   15018:	e7cd      	b.n	14fb6 <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   1501a:	602a      	str	r2, [r5, #0]
			conn->tx_head = tx;
   1501c:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
}
   15020:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head->next;
   15022:	6811      	ldr	r1, [r2, #0]
   15024:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   15026:	6015      	str	r5, [r2, #0]
			if (!pause) {
   15028:	2b00      	cmp	r3, #0
   1502a:	d185      	bne.n	14f38 <ctrl_tx_sec_enqueue+0x20>
	if (!tx->next) {
   1502c:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   1502e:	e9c4 556e 	strd	r5, r5, [r4, #440]	; 0x1b8
		if (!tx->next) {
   15032:	2b00      	cmp	r3, #0
   15034:	d183      	bne.n	14f3e <ctrl_tx_sec_enqueue+0x26>
   15036:	e7b7      	b.n	14fa8 <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   15038:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   1503a:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
   1503e:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
}
   15042:	bd38      	pop	{r3, r4, r5, pc}
				pause = true;
   15044:	2301      	movs	r3, #1
   15046:	e78d      	b.n	14f64 <ctrl_tx_sec_enqueue+0x4c>
   15048:	000277f0 	.word	0x000277f0
   1504c:	000278c8 	.word	0x000278c8
   15050:	000272c0 	.word	0x000272c0

00015054 <feature_rsp_send>:
{
   15054:	b570      	push	{r4, r5, r6, lr}
   15056:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15058:	4822      	ldr	r0, [pc, #136]	; (150e4 <feature_rsp_send+0x90>)
{
   1505a:	460c      	mov	r4, r1
   1505c:	4616      	mov	r6, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1505e:	f7fa fa03 	bl	f468 <mem_acquire>
	if (!tx) {
   15062:	2800      	cmp	r0, #0
   15064:	d03a      	beq.n	150dc <feature_rsp_send+0x88>
	       (features[1] << 8) | (features[2] << 16);
   15066:	79b3      	ldrb	r3, [r6, #6]
   15068:	7972      	ldrb	r2, [r6, #5]
   1506a:	041b      	lsls	r3, r3, #16
   1506c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15070:	7932      	ldrb	r2, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   15072:	4313      	orrs	r3, r2
   15074:	4a1c      	ldr	r2, [pc, #112]	; (150e8 <feature_rsp_send+0x94>)
   15076:	4601      	mov	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   15078:	f8d5 0120 	ldr.w	r0, [r5, #288]	; 0x120
	       (features[1] << 8) | (features[2] << 16);
   1507c:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1507e:	4003      	ands	r3, r0
   15080:	f3c3 0310 	ubfx	r3, r3, #0, #17
   15084:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
	       (features[1] << 8) | (features[2] << 16);
   15088:	79b3      	ldrb	r3, [r6, #6]
   1508a:	7970      	ldrb	r0, [r6, #5]
   1508c:	041b      	lsls	r3, r3, #16
   1508e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15092:	7930      	ldrb	r0, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   15094:	4303      	orrs	r3, r0
   15096:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   15098:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
	feat &= LL_FEAT_BIT_MASK;
   1509c:	f3c3 0310 	ubfx	r3, r3, #0, #17
	conn->llcp_feature.features_peer =
   150a0:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
	conn->common.fex_valid = 1U;
   150a4:	f042 0201 	orr.w	r2, r2, #1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   150a8:	790b      	ldrb	r3, [r1, #4]
	conn->common.fex_valid = 1U;
   150aa:	f885 20e0 	strb.w	r2, [r5, #224]	; 0xe0
__ssp_bos_icheck3(memset, void *, int)
   150ae:	2600      	movs	r6, #0
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   150b0:	2209      	movs	r2, #9
   150b2:	608e      	str	r6, [r1, #8]
   150b4:	714a      	strb	r2, [r1, #5]
   150b6:	60ce      	str	r6, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   150b8:	f043 0303 	orr.w	r3, r3, #3
   150bc:	710b      	strb	r3, [r1, #4]
	feat_result &= 0xFF;
   150be:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
	dst[0] = val;
   150c2:	720b      	strb	r3, [r1, #8]
	dst[1] = val >> 8;
   150c4:	2349      	movs	r3, #73	; 0x49
   150c6:	724b      	strb	r3, [r1, #9]
	dst[2] = val >> 16;
   150c8:	2301      	movs	r3, #1
   150ca:	728b      	strb	r3, [r1, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   150cc:	4628      	mov	r0, r5
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   150ce:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   150d0:	f7ff ff22 	bl	14f18 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   150d4:	2303      	movs	r3, #3
   150d6:	7123      	strb	r3, [r4, #4]
	return 0;
   150d8:	4630      	mov	r0, r6
}
   150da:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   150dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   150e0:	bd70      	pop	{r4, r5, r6, pc}
   150e2:	bf00      	nop
   150e4:	20002a78 	.word	0x20002a78
   150e8:	fffe30d0 	.word	0xfffe30d0

000150ec <event_len_prep>:
{
   150ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   150ee:	f890 319e 	ldrb.w	r3, [r0, #414]	; 0x19e
   150f2:	f003 0207 	and.w	r2, r3, #7
{
   150f6:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   150f8:	2a06      	cmp	r2, #6
   150fa:	f200 80df 	bhi.w	152bc <event_len_prep+0x1d0>
   150fe:	e8df f002 	tbb	[pc, r2]
   15102:	5304      	.short	0x5304
   15104:	54545353 	.word	0x54545353
   15108:	53          	.byte	0x53
   15109:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1510a:	4873      	ldr	r0, [pc, #460]	; (152d8 <event_len_prep+0x1ec>)
   1510c:	f7fa f9ac 	bl	f468 <mem_acquire>
		if (!tx) {
   15110:	2800      	cmp	r0, #0
   15112:	d049      	beq.n	151a8 <event_len_prep+0xbc>
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15114:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
		conn->default_tx_time = conn->llcp_length.tx_time;
   15118:	f8b4 31a6 	ldrh.w	r3, [r4, #422]	; 0x1a6
   1511c:	f8a4 30dc 	strh.w	r3, [r4, #220]	; 0xdc
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15120:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15124:	f894 119e 	ldrb.w	r1, [r4, #414]	; 0x19e
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15128:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1512a:	2501      	movs	r5, #1
   1512c:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15130:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15134:	f884 119e 	strb.w	r1, [r4, #414]	; 0x19e
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15138:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   1513a:	2309      	movs	r3, #9
   1513c:	7143      	strb	r3, [r0, #5]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1513e:	231b      	movs	r3, #27
   15140:	7203      	strb	r3, [r0, #8]
	if (!conn->common.fex_valid ||
   15142:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   15146:	8182      	strh	r2, [r0, #12]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   15148:	2114      	movs	r1, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1514a:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1514c:	71c1      	strb	r1, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1514e:	7242      	strb	r2, [r0, #9]
	if (!conn->common.fex_valid ||
   15150:	07de      	lsls	r6, r3, #31
   15152:	f8b4 20dc 	ldrh.w	r2, [r4, #220]	; 0xdc
   15156:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1515a:	d501      	bpl.n	15160 <event_len_prep+0x74>
   1515c:	050d      	lsls	r5, r1, #20
   1515e:	d479      	bmi.n	15254 <event_len_prep+0x168>
   15160:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15164:	4611      	mov	r1, r2
	    conn->tx_head &&
   15166:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1516a:	8141      	strh	r1, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1516c:	81c2      	strh	r2, [r0, #14]
	if (
   1516e:	b143      	cbz	r3, 15182 <event_len_prep+0x96>
	    !conn->llcp_enc.pause_tx &&
   15170:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
   15174:	0791      	lsls	r1, r2, #30
   15176:	d404      	bmi.n	15182 <event_len_prep+0x96>
	    !conn->llcp_phy.pause_tx &&
   15178:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
   1517c:	07d2      	lsls	r2, r2, #31
   1517e:	f140 8084 	bpl.w	1528a <event_len_prep+0x19e>
		if (!conn->tx_ctrl) {
   15182:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   15186:	2a00      	cmp	r2, #0
   15188:	f000 8092 	beq.w	152b0 <event_len_prep+0x1c4>
	tx->next = conn->tx_ctrl_last->next;
   1518c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   15190:	681a      	ldr	r2, [r3, #0]
   15192:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15194:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15196:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   15198:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
   1519c:	2b00      	cmp	r3, #0
   1519e:	d056      	beq.n	1524e <event_len_prep+0x162>
		conn->procedure_expire = conn->procedure_reload;
   151a0:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   151a4:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
}
   151a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   151aa:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   151ae:	f8b0 c1a0 	ldrh.w	ip, [r0, #416]	; 0x1a0
		lll->max_rx_time = conn->llcp_length.rx_time;
   151b2:	f8b0 11a4 	ldrh.w	r1, [r0, #420]	; 0x1a4
		tx_octets = conn->llcp_length.tx_octets;
   151b6:	f8b0 71a2 	ldrh.w	r7, [r0, #418]	; 0x1a2
		uint16_t tx_time = conn->llcp_length.tx_time;
   151ba:	f8b0 61a6 	ldrh.w	r6, [r0, #422]	; 0x1a6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   151be:	f8a0 c062 	strh.w	ip, [r0, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   151c2:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   151c4:	f8a0 1066 	strh.w	r1, [r0, #102]	; 0x66
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   151c8:	d024      	beq.n	15214 <event_len_prep+0x128>
			conn->llcp_length.state =
   151ca:	2206      	movs	r2, #6
   151cc:	f362 0302 	bfi	r3, r2, #0, #3
   151d0:	f880 319e 	strb.w	r3, [r0, #414]	; 0x19e
		rx = conn->llcp_rx;
   151d4:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
		LL_ASSERT(rx && rx->hdr.link);
   151d8:	b335      	cbz	r5, 15228 <event_len_prep+0x13c>
   151da:	6828      	ldr	r0, [r5, #0]
   151dc:	b320      	cbz	r0, 15228 <event_len_prep+0x13c>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   151de:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   151e0:	6842      	ldr	r2, [r0, #4]
   151e2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   151e6:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   151ea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   151ec:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   151ee:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   151f0:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   151f2:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   151f4:	2202      	movs	r2, #2
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   151f6:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   151f8:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   151fa:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   151fe:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   15200:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   15202:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15204:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15206:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   15208:	f7fe fc60 	bl	13acc <ll_rx_put>
}
   1520c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   15210:	f7fe bc66 	b.w	13ae0 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   15214:	f8b0 21a8 	ldrh.w	r2, [r0, #424]	; 0x1a8
   15218:	bb4a      	cbnz	r2, 1526e <event_len_prep+0x182>
				conn->llcp_length.ack = conn->llcp_length.req;
   1521a:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
				conn->procedure_expire = 0U;
   1521e:	f8a0 20d0 	strh.w	r2, [r0, #208]	; 0xd0
				conn->llcp_length.ack = conn->llcp_length.req;
   15222:	f880 319d 	strb.w	r3, [r0, #413]	; 0x19d
				conn->procedure_expire = 0U;
   15226:	e7d5      	b.n	151d4 <event_len_prep+0xe8>
		LL_ASSERT(rx && rx->hdr.link);
   15228:	4a2c      	ldr	r2, [pc, #176]	; (152dc <event_len_prep+0x1f0>)
   1522a:	492d      	ldr	r1, [pc, #180]	; (152e0 <event_len_prep+0x1f4>)
   1522c:	482d      	ldr	r0, [pc, #180]	; (152e4 <event_len_prep+0x1f8>)
   1522e:	f640 43f8 	movw	r3, #3320	; 0xcf8
   15232:	f00b fbd4 	bl	209de <printk>
   15236:	4040      	eors	r0, r0
   15238:	f380 8811 	msr	BASEPRI, r0
   1523c:	f04f 0003 	mov.w	r0, #3
   15240:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   15242:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15244:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15248:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
   1524c:	e7c7      	b.n	151de <event_len_prep+0xf2>
		conn->tx_data_last = tx;
   1524e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   15252:	e7a5      	b.n	151a0 <event_len_prep+0xb4>
	tx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, tx_time);
   15254:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
   15258:	bf28      	it	cs
   1525a:	f44f 6229 	movcs.w	r2, #2704	; 0xa90
   1525e:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
   15262:	bf38      	it	cc
   15264:	f44f 72a4 	movcc.w	r2, #328	; 0x148
   15268:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   1526c:	e77b      	b.n	15166 <event_len_prep+0x7a>
				conn->llcp_length.tx_octets =
   1526e:	f8a0 21a2 	strh.w	r2, [r0, #418]	; 0x1a2
				conn->llcp_length.cache.tx_octets = 0;
   15272:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15274:	f362 0302 	bfi	r3, r2, #0, #3
   15278:	f880 319e 	strb.w	r3, [r0, #414]	; 0x19e
				conn->llcp_length.tx_time =
   1527c:	f8b0 31aa 	ldrh.w	r3, [r0, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   15280:	f8a0 21a8 	strh.w	r2, [r0, #424]	; 0x1a8
				conn->llcp_length.tx_time =
   15284:	f8a0 31a6 	strh.w	r3, [r0, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15288:	e7a4      	b.n	151d4 <event_len_prep+0xe8>
		if (conn->tx_head == conn->tx_data) {
   1528a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1528e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15290:	bf04      	itt	eq
   15292:	681a      	ldreq	r2, [r3, #0]
   15294:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
   15298:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   1529c:	2a00      	cmp	r2, #0
   1529e:	f47f af75 	bne.w	1518c <event_len_prep+0xa0>
			tx->next = conn->tx_head->next;
   152a2:	681a      	ldr	r2, [r3, #0]
   152a4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   152a6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   152a8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   152aa:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
   152ae:	e775      	b.n	1519c <event_len_prep+0xb0>
			tx->next = conn->tx_head;
   152b0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   152b2:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
   152b6:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
   152ba:	e76f      	b.n	1519c <event_len_prep+0xb0>
		LL_ASSERT(0);
   152bc:	4a07      	ldr	r2, [pc, #28]	; (152dc <event_len_prep+0x1f0>)
   152be:	490a      	ldr	r1, [pc, #40]	; (152e8 <event_len_prep+0x1fc>)
   152c0:	4808      	ldr	r0, [pc, #32]	; (152e4 <event_len_prep+0x1f8>)
   152c2:	f44f 6352 	mov.w	r3, #3360	; 0xd20
   152c6:	f00b fb8a 	bl	209de <printk>
   152ca:	4040      	eors	r0, r0
   152cc:	f380 8811 	msr	BASEPRI, r0
   152d0:	f04f 0003 	mov.w	r0, #3
   152d4:	df02      	svc	2
}
   152d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152d8:	20002a78 	.word	0x20002a78
   152dc:	000277f0 	.word	0x000277f0
   152e0:	000278d0 	.word	0x000278d0
   152e4:	000272c0 	.word	0x000272c0
   152e8:	00027358 	.word	0x00027358

000152ec <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   152ec:	4801      	ldr	r0, [pc, #4]	; (152f4 <ll_conn_acquire+0x8>)
   152ee:	f7fa b8bb 	b.w	f468 <mem_acquire>
   152f2:	bf00      	nop
   152f4:	2000282c 	.word	0x2000282c

000152f8 <ll_conn_release>:
	mem_release(conn, &conn_free);
   152f8:	4901      	ldr	r1, [pc, #4]	; (15300 <ll_conn_release+0x8>)
   152fa:	f7fa b8cb 	b.w	f494 <mem_release>
   152fe:	bf00      	nop
   15300:	2000282c 	.word	0x2000282c

00015304 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15304:	4902      	ldr	r1, [pc, #8]	; (15310 <ll_conn_handle_get+0xc>)
   15306:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
   1530a:	f7fa b8df 	b.w	f4cc <mem_index_get>
   1530e:	bf00      	nop
   15310:	20002830 	.word	0x20002830

00015314 <ll_conn_get>:
{
   15314:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15316:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1531a:	4801      	ldr	r0, [pc, #4]	; (15320 <ll_conn_get+0xc>)
   1531c:	f7fa b8d2 	b.w	f4c4 <mem_get>
   15320:	20002830 	.word	0x20002830

00015324 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15324:	b958      	cbnz	r0, 1533e <ll_connected_get+0x1a>
{
   15326:	b508      	push	{r3, lr}
   15328:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1532a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1532e:	4805      	ldr	r0, [pc, #20]	; (15344 <ll_connected_get+0x20>)
   15330:	f7fa f8c8 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   15334:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15336:	b903      	cbnz	r3, 1533a <ll_connected_get+0x16>
}
   15338:	bd08      	pop	{r3, pc}
		return NULL;
   1533a:	2000      	movs	r0, #0
}
   1533c:	bd08      	pop	{r3, pc}
		return NULL;
   1533e:	2000      	movs	r0, #0
}
   15340:	4770      	bx	lr
   15342:	bf00      	nop
   15344:	20002830 	.word	0x20002830

00015348 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   15348:	4801      	ldr	r0, [pc, #4]	; (15350 <ll_tx_mem_acquire+0x8>)
   1534a:	f7fa b88d 	b.w	f468 <mem_acquire>
   1534e:	bf00      	nop
   15350:	20002a08 	.word	0x20002a08

00015354 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   15354:	4901      	ldr	r1, [pc, #4]	; (1535c <ll_tx_mem_release+0x8>)
   15356:	f7fa b89d 	b.w	f494 <mem_release>
   1535a:	bf00      	nop
   1535c:	20002a08 	.word	0x20002a08

00015360 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15360:	2800      	cmp	r0, #0
   15362:	d15f      	bne.n	15424 <ll_tx_mem_enqueue+0xc4>
{
   15364:	b530      	push	{r4, r5, lr}
   15366:	4602      	mov	r2, r0
   15368:	b089      	sub	sp, #36	; 0x24
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1536a:	4830      	ldr	r0, [pc, #192]	; (1542c <ll_tx_mem_enqueue+0xcc>)
   1536c:	460c      	mov	r4, r1
   1536e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   15372:	f7fa f8a7 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   15376:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   15378:	2d00      	cmp	r5, #0
   1537a:	d14b      	bne.n	15414 <ll_tx_mem_enqueue+0xb4>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1537c:	4a2c      	ldr	r2, [pc, #176]	; (15430 <ll_tx_mem_enqueue+0xd0>)
   1537e:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   15380:	f892 e001 	ldrb.w	lr, [r2, #1]
   15384:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   15388:	1c4b      	adds	r3, r1, #1
   1538a:	b2db      	uxtb	r3, r3
		last = 0U;
   1538c:	459e      	cmp	lr, r3
   1538e:	bf08      	it	eq
   15390:	2300      	moveq	r3, #0
	if (last == first) {
   15392:	459c      	cmp	ip, r3
   15394:	d042      	beq.n	1541c <ll_tx_mem_enqueue+0xbc>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15396:	4696      	mov	lr, r2
   15398:	f81e cb04 	ldrb.w	ip, [lr], #4
   1539c:	fb1c fc01 	smulbb	ip, ip, r1
	if (!lll_tx) {
   153a0:	eb1e 010c 	adds.w	r1, lr, ip
   153a4:	d03a      	beq.n	1541c <ll_tx_mem_enqueue+0xbc>
	lll_tx->handle = handle;
   153a6:	f82e 500c 	strh.w	r5, [lr, ip]
	lll_tx->node = tx;
   153aa:	604c      	str	r4, [r1, #4]
	if (conn->lll.role && conn->lll.latency_event &&
   153ac:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	*last = idx; /* Commit: Update write index */
   153b0:	70d3      	strb	r3, [r2, #3]
   153b2:	2900      	cmp	r1, #0
   153b4:	db02      	blt.n	153bc <ll_tx_mem_enqueue+0x5c>
	return 0;
   153b6:	2000      	movs	r0, #0
}
   153b8:	b009      	add	sp, #36	; 0x24
   153ba:	bd30      	pop	{r4, r5, pc}
	if (conn->lll.role && conn->lll.latency_event &&
   153bc:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   153be:	2b00      	cmp	r3, #0
   153c0:	d0f9      	beq.n	153b6 <ll_tx_mem_enqueue+0x56>
	    !conn->slave.latency_cancel) {
   153c2:	f890 30e0 	ldrb.w	r3, [r0, #224]	; 0xe0
	if (conn->lll.role && conn->lll.latency_event &&
   153c6:	f013 0402 	ands.w	r4, r3, #2
   153ca:	d1f4      	bne.n	153b6 <ll_tx_mem_enqueue+0x56>
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   153cc:	4919      	ldr	r1, [pc, #100]	; (15434 <ll_tx_mem_enqueue+0xd4>)
		conn->slave.latency_cancel = 1U;
   153ce:	f043 0302 	orr.w	r3, r3, #2
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   153d2:	2201      	movs	r2, #1
		conn->slave.latency_cancel = 1U;
   153d4:	f880 30e0 	strb.w	r3, [r0, #224]	; 0xe0
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   153d8:	e9cd 1005 	strd	r1, r0, [sp, #20]
   153dc:	e9cd 2403 	strd	r2, r4, [sp, #12]
   153e0:	4623      	mov	r3, r4
   153e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   153e6:	9400      	str	r4, [sp, #0]
   153e8:	2205      	movs	r2, #5
   153ea:	2103      	movs	r1, #3
   153ec:	4620      	mov	r0, r4
   153ee:	f7fb fbd3 	bl	10b98 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   153f2:	f030 0302 	bics.w	r3, r0, #2
   153f6:	d0de      	beq.n	153b6 <ll_tx_mem_enqueue+0x56>
   153f8:	4a0f      	ldr	r2, [pc, #60]	; (15438 <ll_tx_mem_enqueue+0xd8>)
   153fa:	4910      	ldr	r1, [pc, #64]	; (1543c <ll_tx_mem_enqueue+0xdc>)
   153fc:	4810      	ldr	r0, [pc, #64]	; (15440 <ll_tx_mem_enqueue+0xe0>)
   153fe:	23fd      	movs	r3, #253	; 0xfd
   15400:	f00b faed 	bl	209de <printk>
   15404:	4040      	eors	r0, r0
   15406:	f380 8811 	msr	BASEPRI, r0
   1540a:	f04f 0003 	mov.w	r0, #3
   1540e:	df02      	svc	2
	return 0;
   15410:	4620      	mov	r0, r4
   15412:	e7d1      	b.n	153b8 <ll_tx_mem_enqueue+0x58>
		return -EINVAL;
   15414:	f06f 0015 	mvn.w	r0, #21
}
   15418:	b009      	add	sp, #36	; 0x24
   1541a:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   1541c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   15420:	b009      	add	sp, #36	; 0x24
   15422:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   15424:	f06f 0015 	mvn.w	r0, #21
}
   15428:	4770      	bx	lr
   1542a:	bf00      	nop
   1542c:	20002830 	.word	0x20002830
   15430:	20000524 	.word	0x20000524
   15434:	00014b69 	.word	0x00014b69
   15438:	000277f0 	.word	0x000277f0
   1543c:	000278e4 	.word	0x000278e4
   15440:	000272c0 	.word	0x000272c0

00015444 <ll_conn_update>:
{
   15444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15448:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1544c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   15450:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   15454:	2800      	cmp	r0, #0
   15456:	d151      	bne.n	154fc <ll_conn_update+0xb8>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15458:	460c      	mov	r4, r1
   1545a:	4615      	mov	r5, r2
   1545c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   15460:	4602      	mov	r2, r0
   15462:	483c      	ldr	r0, [pc, #240]	; (15554 <ll_conn_update+0x110>)
   15464:	461e      	mov	r6, r3
   15466:	f7fa f82d 	bl	f4c4 <mem_get>
   1546a:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   1546c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1546e:	2800      	cmp	r0, #0
   15470:	d144      	bne.n	154fc <ll_conn_update+0xb8>
	if (!cmd) {
   15472:	bb1c      	cbnz	r4, 154bc <ll_conn_update+0x78>
		if (!conn->llcp_conn_param.disabled &&
   15474:	f89c 3176 	ldrb.w	r3, [ip, #374]	; 0x176
   15478:	06d9      	lsls	r1, r3, #27
   1547a:	d446      	bmi.n	1550a <ll_conn_update+0xc6>
		    (!conn->common.fex_valid ||
   1547c:	f89c 30e0 	ldrb.w	r3, [ip, #224]	; 0xe0
		if (!conn->llcp_conn_param.disabled &&
   15480:	07da      	lsls	r2, r3, #31
   15482:	d43e      	bmi.n	15502 <ll_conn_update+0xbe>
			if (conn->llcp_conn_param.req !=
   15484:	f89c 2174 	ldrb.w	r2, [ip, #372]	; 0x174
   15488:	f89c 3175 	ldrb.w	r3, [ip, #373]	; 0x175
   1548c:	4293      	cmp	r3, r2
   1548e:	d132      	bne.n	154f6 <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   15490:	f8bc 2176 	ldrh.w	r2, [ip, #374]	; 0x176
			conn->llcp_conn_param.interval_min = interval_min;
   15494:	f8ac 6178 	strh.w	r6, [ip, #376]	; 0x178
			conn->llcp_conn_param.state = cmd;
   15498:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   1549c:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   1549e:	f042 0208 	orr.w	r2, r2, #8
   154a2:	f8ac 2176 	strh.w	r2, [ip, #374]	; 0x176
			conn->llcp_conn_param.req++;
   154a6:	f88c 3174 	strb.w	r3, [ip, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   154aa:	f8ac 917a 	strh.w	r9, [ip, #378]	; 0x17a
			conn->llcp_conn_param.latency = latency;
   154ae:	f8ac 817c 	strh.w	r8, [ip, #380]	; 0x17c
			conn->llcp_conn_param.timeout = timeout;
   154b2:	f8ac 717e 	strh.w	r7, [ip, #382]	; 0x17e
	return 0;
   154b6:	2000      	movs	r0, #0
}
   154b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   154bc:	3c01      	subs	r4, #1
		if (cmd) {
   154be:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   154c2:	d0df      	beq.n	15484 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   154c4:	f89c 2174 	ldrb.w	r2, [ip, #372]	; 0x174
   154c8:	f89c 3175 	ldrb.w	r3, [ip, #373]	; 0x175
   154cc:	429a      	cmp	r2, r3
   154ce:	d012      	beq.n	154f6 <ll_conn_update+0xb2>
			    (conn->llcp_conn_param.state !=
   154d0:	f89c 3176 	ldrb.w	r3, [ip, #374]	; 0x176
			     conn->llcp_conn_param.ack) ||
   154d4:	f003 0207 	and.w	r2, r3, #7
   154d8:	2a03      	cmp	r2, #3
   154da:	d10c      	bne.n	154f6 <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
   154dc:	f004 0407 	and.w	r4, r4, #7
   154e0:	f023 030f 	bic.w	r3, r3, #15
   154e4:	f044 0408 	orr.w	r4, r4, #8
   154e8:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   154ea:	f88c 5177 	strb.w	r5, [ip, #375]	; 0x177
			conn->llcp_conn_param.state = cmd;
   154ee:	f88c 4176 	strb.w	r4, [ip, #374]	; 0x176
}
   154f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   154f6:	200c      	movs	r0, #12
}
   154f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   154fc:	2002      	movs	r0, #2
}
   154fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   15502:	f8dc 3120 	ldr.w	r3, [ip, #288]	; 0x120
		    (!conn->common.fex_valid ||
   15506:	079b      	lsls	r3, r3, #30
   15508:	d4bc      	bmi.n	15484 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1550a:	f99c 303d 	ldrsb.w	r3, [ip, #61]	; 0x3d
   1550e:	2b00      	cmp	r3, #0
   15510:	db1e      	blt.n	15550 <ll_conn_update+0x10c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   15512:	f89c 2108 	ldrb.w	r2, [ip, #264]	; 0x108
   15516:	f89c 3109 	ldrb.w	r3, [ip, #265]	; 0x109
   1551a:	4293      	cmp	r3, r2
   1551c:	d1eb      	bne.n	154f6 <ll_conn_update+0xb2>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1551e:	f89c 210a 	ldrb.w	r2, [ip, #266]	; 0x10a
		conn->llcp_cu.interval = interval_max;
   15522:	f8ac 910c 	strh.w	r9, [ip, #268]	; 0x10c
		conn->llcp_cu.req++;
   15526:	3301      	adds	r3, #1
   15528:	f88c 3108 	strb.w	r3, [ip, #264]	; 0x108
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1552c:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.win_size = 1U;
   15530:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15532:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   15536:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   15538:	f88c 3118 	strb.w	r3, [ip, #280]	; 0x118
		conn->llcp_cu.latency = latency;
   1553c:	f8ac 810e 	strh.w	r8, [ip, #270]	; 0x10e
		conn->llcp_cu.timeout = timeout;
   15540:	f8ac 7110 	strh.w	r7, [ip, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15544:	f88c 210a 	strb.w	r2, [ip, #266]	; 0x10a
		conn->llcp_cu.win_offset_us = 0U;
   15548:	f8cc 0114 	str.w	r0, [ip, #276]	; 0x114
}
   1554c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15550:	201a      	movs	r0, #26
   15552:	e7d1      	b.n	154f8 <ll_conn_update+0xb4>
   15554:	20002830 	.word	0x20002830

00015558 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15558:	b9c8      	cbnz	r0, 1558e <ll_chm_get+0x36>
{
   1555a:	b538      	push	{r3, r4, r5, lr}
   1555c:	4602      	mov	r2, r0
   1555e:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15560:	480c      	ldr	r0, [pc, #48]	; (15594 <ll_chm_get+0x3c>)
   15562:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   15566:	f7f9 ffad 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   1556a:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1556c:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1556e:	b965      	cbnz	r5, 1558a <ll_chm_get+0x32>
		memcpy(chm, conn->lll.data_chan_map,
   15570:	f100 0238 	add.w	r2, r0, #56	; 0x38
		conn->chm_updated = 0U;
   15574:	f883 51c8 	strb.w	r5, [r3, #456]	; 0x1c8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15578:	6811      	ldr	r1, [r2, #0]
   1557a:	6021      	str	r1, [r4, #0]
   1557c:	7911      	ldrb	r1, [r2, #4]
   1557e:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   15580:	f893 01c8 	ldrb.w	r0, [r3, #456]	; 0x1c8
   15584:	2800      	cmp	r0, #0
   15586:	d1f5      	bne.n	15574 <ll_chm_get+0x1c>
}
   15588:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1558a:	2002      	movs	r0, #2
}
   1558c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1558e:	2002      	movs	r0, #2
}
   15590:	4770      	bx	lr
   15592:	bf00      	nop
   15594:	20002830 	.word	0x20002830

00015598 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15598:	b9a0      	cbnz	r0, 155c4 <ll_terminate_ind_send+0x2c>
{
   1559a:	b510      	push	{r4, lr}
   1559c:	4602      	mov	r2, r0
   1559e:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   155a0:	4809      	ldr	r0, [pc, #36]	; (155c8 <ll_terminate_ind_send+0x30>)
   155a2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   155a6:	f7f9 ff8d 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   155aa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   155ac:	b943      	cbnz	r3, 155c0 <ll_terminate_ind_send+0x28>
	conn->llcp_terminate.req++;
   155ae:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
	conn->llcp_terminate.reason_own = reason;
   155b2:	f880 4132 	strb.w	r4, [r0, #306]	; 0x132
	conn->llcp_terminate.req++;
   155b6:	3201      	adds	r2, #1
   155b8:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	return 0;
   155bc:	4618      	mov	r0, r3
}
   155be:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155c0:	2002      	movs	r0, #2
}
   155c2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155c4:	2002      	movs	r0, #2
}
   155c6:	4770      	bx	lr
   155c8:	20002830 	.word	0x20002830

000155cc <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   155cc:	b9b0      	cbnz	r0, 155fc <ll_feature_req_send+0x30>
{
   155ce:	b508      	push	{r3, lr}
   155d0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   155d2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   155d6:	480a      	ldr	r0, [pc, #40]	; (15600 <ll_feature_req_send+0x34>)
   155d8:	f7f9 ff74 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   155dc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   155de:	b95b      	cbnz	r3, 155f8 <ll_feature_req_send+0x2c>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   155e0:	f890 211d 	ldrb.w	r2, [r0, #285]	; 0x11d
   155e4:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
   155e8:	428a      	cmp	r2, r1
	conn->llcp_feature.req++;
   155ea:	bf05      	ittet	eq
   155ec:	3201      	addeq	r2, #1
   155ee:	f880 211c 	strbeq.w	r2, [r0, #284]	; 0x11c
		return BT_HCI_ERR_CMD_DISALLOWED;
   155f2:	200c      	movne	r0, #12
	return 0;
   155f4:	4618      	moveq	r0, r3
}
   155f6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155f8:	2002      	movs	r0, #2
}
   155fa:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155fc:	2002      	movs	r0, #2
}
   155fe:	4770      	bx	lr
   15600:	20002830 	.word	0x20002830

00015604 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15604:	b9b0      	cbnz	r0, 15634 <ll_version_ind_send+0x30>
{
   15606:	b508      	push	{r3, lr}
   15608:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1560a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1560e:	480a      	ldr	r0, [pc, #40]	; (15638 <ll_version_ind_send+0x34>)
   15610:	f7f9 ff58 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   15614:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15616:	b95b      	cbnz	r3, 15630 <ll_version_ind_send+0x2c>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   15618:	f890 2129 	ldrb.w	r2, [r0, #297]	; 0x129
   1561c:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
   15620:	428a      	cmp	r2, r1
	conn->llcp_version.req++;
   15622:	bf05      	ittet	eq
   15624:	3201      	addeq	r2, #1
   15626:	f880 2128 	strbeq.w	r2, [r0, #296]	; 0x128
		return BT_HCI_ERR_CMD_DISALLOWED;
   1562a:	200c      	movne	r0, #12
	return 0;
   1562c:	4618      	moveq	r0, r3
}
   1562e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15630:	2002      	movs	r0, #2
}
   15632:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15634:	2002      	movs	r0, #2
}
   15636:	4770      	bx	lr
   15638:	20002830 	.word	0x20002830

0001563c <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1563c:	2800      	cmp	r0, #0
   1563e:	d143      	bne.n	156c8 <ll_length_req_send+0x8c>
{
   15640:	b538      	push	{r3, r4, r5, lr}
   15642:	460d      	mov	r5, r1
   15644:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15646:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1564a:	4602      	mov	r2, r0
   1564c:	481f      	ldr	r0, [pc, #124]	; (156cc <ll_length_req_send+0x90>)
   1564e:	f7f9 ff39 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   15652:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15654:	bba3      	cbnz	r3, 156c0 <ll_length_req_send+0x84>
	if (conn->llcp_length.disabled ||
   15656:	f890 319e 	ldrb.w	r3, [r0, #414]	; 0x19e
   1565a:	071a      	lsls	r2, r3, #28
   1565c:	d42e      	bmi.n	156bc <ll_length_req_send+0x80>
	    (conn->common.fex_valid &&
   1565e:	f890 20e0 	ldrb.w	r2, [r0, #224]	; 0xe0
	if (conn->llcp_length.disabled ||
   15662:	07d1      	lsls	r1, r2, #31
   15664:	d503      	bpl.n	1566e <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   15666:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
	    (conn->common.fex_valid &&
   1566a:	0692      	lsls	r2, r2, #26
   1566c:	d526      	bpl.n	156bc <ll_length_req_send+0x80>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1566e:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
   15672:	f890 219d 	ldrb.w	r2, [r0, #413]	; 0x19d
   15676:	428a      	cmp	r2, r1
   15678:	d011      	beq.n	1569e <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   1567a:	f003 0307 	and.w	r3, r3, #7
   1567e:	2b03      	cmp	r3, #3
   15680:	d004      	beq.n	1568c <ll_length_req_send+0x50>
   15682:	3303      	adds	r3, #3
   15684:	f003 0307 	and.w	r3, r3, #7
   15688:	2b01      	cmp	r3, #1
   1568a:	d81b      	bhi.n	156c4 <ll_length_req_send+0x88>
			if (!conn->llcp_length.cache.tx_octets) {
   1568c:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
   15690:	b9c3      	cbnz	r3, 156c4 <ll_length_req_send+0x88>
				conn->llcp_length.cache.tx_octets = tx_octets;
   15692:	f8a0 51a8 	strh.w	r5, [r0, #424]	; 0x1a8
				conn->llcp_length.cache.tx_time = tx_time;
   15696:	f8a0 41aa 	strh.w	r4, [r0, #426]	; 0x1aa
				return 0;
   1569a:	4618      	mov	r0, r3
}
   1569c:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1569e:	f890 319e 	ldrb.w	r3, [r0, #414]	; 0x19e
	conn->llcp_length.tx_octets = tx_octets;
   156a2:	f8a0 51a2 	strh.w	r5, [r0, #418]	; 0x1a2
	conn->llcp_length.req++;
   156a6:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   156a8:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   156ac:	f880 219c 	strb.w	r2, [r0, #412]	; 0x19c
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   156b0:	f880 319e 	strb.w	r3, [r0, #414]	; 0x19e
	conn->llcp_length.tx_time = tx_time;
   156b4:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
	return 0;
   156b8:	2000      	movs	r0, #0
}
   156ba:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   156bc:	201a      	movs	r0, #26
}
   156be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   156c0:	2002      	movs	r0, #2
}
   156c2:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   156c4:	200c      	movs	r0, #12
}
   156c6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   156c8:	2002      	movs	r0, #2
}
   156ca:	4770      	bx	lr
   156cc:	20002830 	.word	0x20002830

000156d0 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   156d0:	4a03      	ldr	r2, [pc, #12]	; (156e0 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   156d2:	4b04      	ldr	r3, [pc, #16]	; (156e4 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   156d4:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   156d6:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   156d8:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   156da:	800b      	strh	r3, [r1, #0]
}
   156dc:	4770      	bx	lr
   156de:	bf00      	nop
   156e0:	20003634 	.word	0x20003634
   156e4:	20003636 	.word	0x20003636

000156e8 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   156e8:	4a02      	ldr	r2, [pc, #8]	; (156f4 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   156ea:	4b03      	ldr	r3, [pc, #12]	; (156f8 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   156ec:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   156ee:	8019      	strh	r1, [r3, #0]
}
   156f0:	2000      	movs	r0, #0
   156f2:	4770      	bx	lr
   156f4:	20003634 	.word	0x20003634
   156f8:	20003636 	.word	0x20003636

000156fc <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   156fc:	f04f 0c1b 	mov.w	ip, #27
   15700:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15704:	f44f 6029 	mov.w	r0, #2704	; 0xa90
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15708:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1570c:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1570e:	8018      	strh	r0, [r3, #0]
}
   15710:	4770      	bx	lr
   15712:	bf00      	nop

00015714 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15714:	b9c0      	cbnz	r0, 15748 <ll_phy_get+0x34>
{
   15716:	b538      	push	{r3, r4, r5, lr}
   15718:	460d      	mov	r5, r1
   1571a:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1571c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   15720:	4602      	mov	r2, r0
   15722:	480a      	ldr	r0, [pc, #40]	; (1574c <ll_phy_get+0x38>)
   15724:	f7f9 fece 	bl	f4c4 <mem_get>
   15728:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1572a:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1572c:	b950      	cbnz	r0, 15744 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1572e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   15732:	f3c2 0202 	ubfx	r2, r2, #0, #3
   15736:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   15738:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1573c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15740:	7023      	strb	r3, [r4, #0]
}
   15742:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15744:	2002      	movs	r0, #2
}
   15746:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15748:	2002      	movs	r0, #2
}
   1574a:	4770      	bx	lr
   1574c:	20002830 	.word	0x20002830

00015750 <ll_phy_default_set>:
	default_phy_tx = tx;
   15750:	4a02      	ldr	r2, [pc, #8]	; (1575c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   15752:	4b03      	ldr	r3, [pc, #12]	; (15760 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   15754:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   15756:	7019      	strb	r1, [r3, #0]
}
   15758:	2000      	movs	r0, #0
   1575a:	4770      	bx	lr
   1575c:	20003bc2 	.word	0x20003bc2
   15760:	20003bc1 	.word	0x20003bc1

00015764 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15764:	2800      	cmp	r0, #0
   15766:	d146      	bne.n	157f6 <ll_phy_req_send+0x92>
{
   15768:	b570      	push	{r4, r5, r6, lr}
   1576a:	460c      	mov	r4, r1
   1576c:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1576e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   15772:	4602      	mov	r2, r0
   15774:	4821      	ldr	r0, [pc, #132]	; (157fc <ll_phy_req_send+0x98>)
   15776:	461e      	mov	r6, r3
   15778:	f7f9 fea4 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   1577c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1577e:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   15780:	bbbb      	cbnz	r3, 157f2 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   15782:	f890 01af 	ldrb.w	r0, [r0, #431]	; 0x1af
   15786:	f010 0008 	ands.w	r0, r0, #8
   1578a:	d130      	bne.n	157ee <ll_phy_req_send+0x8a>
	    (conn->common.fex_valid &&
   1578c:	f89c 30e0 	ldrb.w	r3, [ip, #224]	; 0xe0
	if (conn->llcp_phy.disabled ||
   15790:	07db      	lsls	r3, r3, #31
   15792:	d504      	bpl.n	1579e <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   15794:	f8dc 3120 	ldr.w	r3, [ip, #288]	; 0x120
   15798:	f413 6f10 	tst.w	r3, #2304	; 0x900
   1579c:	d027      	beq.n	157ee <ll_phy_req_send+0x8a>
	if ((conn->llcp_req != conn->llcp_ack) ||
   1579e:	f89c 20ec 	ldrb.w	r2, [ip, #236]	; 0xec
   157a2:	f89c 30ed 	ldrb.w	r3, [ip, #237]	; 0xed
   157a6:	429a      	cmp	r2, r3
   157a8:	d11f      	bne.n	157ea <ll_phy_req_send+0x86>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   157aa:	f89c 31ac 	ldrb.w	r3, [ip, #428]	; 0x1ac
	if ((conn->llcp_req != conn->llcp_ack) ||
   157ae:	f89c 21ad 	ldrb.w	r2, [ip, #429]	; 0x1ad
   157b2:	429a      	cmp	r2, r3
   157b4:	d119      	bne.n	157ea <ll_phy_req_send+0x86>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   157b6:	f004 0407 	and.w	r4, r4, #7
   157ba:	f8bc 11ae 	ldrh.w	r1, [ip, #430]	; 0x1ae
   157be:	00a3      	lsls	r3, r4, #2
   157c0:	f443 6480 	orr.w	r4, r3, #1024	; 0x400
   157c4:	f006 0307 	and.w	r3, r6, #7
   157c8:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   157cc:	f005 0501 	and.w	r5, r5, #1
   157d0:	f421 61df 	bic.w	r1, r1, #1784	; 0x6f8
   157d4:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
	conn->llcp_phy.req++;
   157d8:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   157da:	f021 0107 	bic.w	r1, r1, #7
   157de:	430b      	orrs	r3, r1
	conn->llcp_phy.req++;
   157e0:	f88c 21ac 	strb.w	r2, [ip, #428]	; 0x1ac
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   157e4:	f8ac 31ae 	strh.w	r3, [ip, #430]	; 0x1ae
}
   157e8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   157ea:	200c      	movs	r0, #12
}
   157ec:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   157ee:	201a      	movs	r0, #26
}
   157f0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   157f2:	2002      	movs	r0, #2
}
   157f4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   157f6:	2002      	movs	r0, #2
}
   157f8:	4770      	bx	lr
   157fa:	bf00      	nop
   157fc:	20002830 	.word	0x20002830

00015800 <ll_rssi_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15800:	b980      	cbnz	r0, 15824 <ll_rssi_get+0x24>
{
   15802:	b510      	push	{r4, lr}
   15804:	4602      	mov	r2, r0
   15806:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15808:	4807      	ldr	r0, [pc, #28]	; (15828 <ll_rssi_get+0x28>)
   1580a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1580e:	f7f9 fe59 	bl	f4c4 <mem_get>
   15812:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   15814:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15816:	b918      	cbnz	r0, 15820 <ll_rssi_get+0x20>
	*rssi = conn->lll.rssi_latest;
   15818:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
   1581c:	7023      	strb	r3, [r4, #0]
}
   1581e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15820:	2002      	movs	r0, #2
}
   15822:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15824:	2002      	movs	r0, #2
}
   15826:	4770      	bx	lr
   15828:	20002830 	.word	0x20002830

0001582c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1582c:	b9d8      	cbnz	r0, 15866 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1582e:	4602      	mov	r2, r0
{
   15830:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15832:	480e      	ldr	r0, [pc, #56]	; (1586c <ll_apto_get+0x40>)
   15834:	460c      	mov	r4, r1
   15836:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1583a:	f7f9 fe43 	bl	f4c4 <mem_get>
   1583e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   15840:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15842:	b970      	cbnz	r0, 15862 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   15844:	f8b2 30d6 	ldrh.w	r3, [r2, #214]	; 0xd6
   15848:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   1584a:	fb02 f303 	mul.w	r3, r2, r3
   1584e:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   15852:	4a07      	ldr	r2, [pc, #28]	; (15870 <ll_apto_get+0x44>)
   15854:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15858:	fba2 2303 	umull	r2, r3, r2, r3
   1585c:	099b      	lsrs	r3, r3, #6
   1585e:	8023      	strh	r3, [r4, #0]
}
   15860:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15862:	2002      	movs	r0, #2
}
   15864:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15866:	2002      	movs	r0, #2
}
   15868:	4770      	bx	lr
   1586a:	bf00      	nop
   1586c:	20002830 	.word	0x20002830
   15870:	10624dd3 	.word	0x10624dd3

00015874 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15874:	b9e0      	cbnz	r0, 158b0 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15876:	4602      	mov	r2, r0
{
   15878:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1587a:	480e      	ldr	r0, [pc, #56]	; (158b4 <ll_apto_set+0x40>)
   1587c:	460c      	mov	r4, r1
   1587e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   15882:	f7f9 fe1f 	bl	f4c4 <mem_get>
   15886:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   15888:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1588a:	b978      	cbnz	r0, 158ac <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1588c:	f8b2 c02e 	ldrh.w	ip, [r2, #46]	; 0x2e
   15890:	f240 43e2 	movw	r3, #1250	; 0x4e2
   15894:	fb03 fc0c 	mul.w	ip, r3, ip
   15898:	f242 7310 	movw	r3, #10000	; 0x2710
   1589c:	fb03 c304 	mla	r3, r3, r4, ip
   158a0:	3b01      	subs	r3, #1
   158a2:	fbb3 f3fc 	udiv	r3, r3, ip
   158a6:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
}
   158aa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158ac:	2002      	movs	r0, #2
}
   158ae:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158b0:	2002      	movs	r0, #2
}
   158b2:	4770      	bx	lr
   158b4:	20002830 	.word	0x20002830

000158b8 <ull_conn_init>:
	err = init_reset();
   158b8:	f7ff b97a 	b.w	14bb0 <init_reset>

000158bc <ull_conn_reset>:
{
   158bc:	b530      	push	{r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   158be:	2200      	movs	r2, #0
{
   158c0:	b085      	sub	sp, #20
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   158c2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   158c6:	482b      	ldr	r0, [pc, #172]	; (15974 <ull_conn_reset+0xb8>)
   158c8:	f7f9 fdfc 	bl	f4c4 <mem_get>
   158cc:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   158ce:	f7fe f989 	bl	13be4 <ull_disable_mark>
	LL_ASSERT(mark == conn);
   158d2:	4284      	cmp	r4, r0
   158d4:	d00c      	beq.n	158f0 <ull_conn_reset+0x34>
   158d6:	4a28      	ldr	r2, [pc, #160]	; (15978 <ull_conn_reset+0xbc>)
   158d8:	4928      	ldr	r1, [pc, #160]	; (1597c <ull_conn_reset+0xc0>)
   158da:	4829      	ldr	r0, [pc, #164]	; (15980 <ull_conn_reset+0xc4>)
   158dc:	f240 6385 	movw	r3, #1669	; 0x685
   158e0:	f00b f87d 	bl	209de <printk>
   158e4:	4040      	eors	r0, r0
   158e6:	f380 8811 	msr	BASEPRI, r0
   158ea:	f04f 0003 	mov.w	r0, #3
   158ee:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   158f0:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   158f2:	2102      	movs	r1, #2
   158f4:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   158f6:	4b23      	ldr	r3, [pc, #140]	; (15984 <ull_conn_reset+0xc8>)
   158f8:	9500      	str	r5, [sp, #0]
   158fa:	2103      	movs	r1, #3
   158fc:	2205      	movs	r2, #5
   158fe:	2000      	movs	r0, #0
   15900:	f7fb f99c 	bl	10c3c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   15904:	4629      	mov	r1, r5
   15906:	f7fe f95f 	bl	13bc8 <ull_ticker_status_take>
	if (!ret) {
   1590a:	b1f0      	cbz	r0, 1594a <ull_conn_reset+0x8e>
	conn->lll.link_tx_free = NULL;
   1590c:	2300      	movs	r3, #0
   1590e:	67e3      	str	r3, [r4, #124]	; 0x7c
	mark = ull_disable_unmark(conn);
   15910:	4620      	mov	r0, r4
   15912:	f7fe f971 	bl	13bf8 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   15916:	4284      	cmp	r4, r0
   15918:	d00c      	beq.n	15934 <ull_conn_reset+0x78>
   1591a:	4a17      	ldr	r2, [pc, #92]	; (15978 <ull_conn_reset+0xbc>)
   1591c:	4917      	ldr	r1, [pc, #92]	; (1597c <ull_conn_reset+0xc0>)
   1591e:	4818      	ldr	r0, [pc, #96]	; (15980 <ull_conn_reset+0xc4>)
   15920:	f240 6394 	movw	r3, #1684	; 0x694
   15924:	f00b f85b 	bl	209de <printk>
   15928:	4040      	eors	r0, r0
   1592a:	f380 8811 	msr	BASEPRI, r0
   1592e:	f04f 0003 	mov.w	r0, #3
   15932:	df02      	svc	2
	MFIFO_INIT(conn_ack);
   15934:	4914      	ldr	r1, [pc, #80]	; (15988 <ull_conn_reset+0xcc>)
	MFIFO_INIT(conn_tx);
   15936:	4815      	ldr	r0, [pc, #84]	; (1598c <ull_conn_reset+0xd0>)
	conn_upd_curr = NULL;
   15938:	4a15      	ldr	r2, [pc, #84]	; (15990 <ull_conn_reset+0xd4>)
	MFIFO_INIT(conn_tx);
   1593a:	2300      	movs	r3, #0
   1593c:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   1593e:	804b      	strh	r3, [r1, #2]
	conn_upd_curr = NULL;
   15940:	6013      	str	r3, [r2, #0]
	err = init_reset();
   15942:	f7ff f935 	bl	14bb0 <init_reset>
}
   15946:	b005      	add	sp, #20
   15948:	bd30      	pop	{r4, r5, pc}
		ret = ull_disable(&conn->lll);
   1594a:	f104 001c 	add.w	r0, r4, #28
   1594e:	f7fe f981 	bl	13c54 <ull_disable>
		LL_ASSERT(!ret);
   15952:	2800      	cmp	r0, #0
   15954:	d0da      	beq.n	1590c <ull_conn_reset+0x50>
   15956:	4a08      	ldr	r2, [pc, #32]	; (15978 <ull_conn_reset+0xbc>)
   15958:	490e      	ldr	r1, [pc, #56]	; (15994 <ull_conn_reset+0xd8>)
   1595a:	4809      	ldr	r0, [pc, #36]	; (15980 <ull_conn_reset+0xc4>)
   1595c:	f240 638e 	movw	r3, #1678	; 0x68e
   15960:	f00b f83d 	bl	209de <printk>
   15964:	4040      	eors	r0, r0
   15966:	f380 8811 	msr	BASEPRI, r0
   1596a:	f04f 0003 	mov.w	r0, #3
   1596e:	df02      	svc	2
   15970:	e7cc      	b.n	1590c <ull_conn_reset+0x50>
   15972:	bf00      	nop
   15974:	20002830 	.word	0x20002830
   15978:	000277f0 	.word	0x000277f0
   1597c:	00027914 	.word	0x00027914
   15980:	000272c0 	.word	0x000272c0
   15984:	00013bbd 	.word	0x00013bbd
   15988:	200004e0 	.word	0x200004e0
   1598c:	20000524 	.word	0x20000524
   15990:	200029fc 	.word	0x200029fc
   15994:	00027594 	.word	0x00027594

00015998 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   15998:	4b01      	ldr	r3, [pc, #4]	; (159a0 <ull_conn_default_tx_octets_get+0x8>)
}
   1599a:	8818      	ldrh	r0, [r3, #0]
   1599c:	4770      	bx	lr
   1599e:	bf00      	nop
   159a0:	20003634 	.word	0x20003634

000159a4 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   159a4:	4b01      	ldr	r3, [pc, #4]	; (159ac <ull_conn_default_tx_time_get+0x8>)
}
   159a6:	8818      	ldrh	r0, [r3, #0]
   159a8:	4770      	bx	lr
   159aa:	bf00      	nop
   159ac:	20003636 	.word	0x20003636

000159b0 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   159b0:	4b01      	ldr	r3, [pc, #4]	; (159b8 <ull_conn_default_phy_tx_get+0x8>)
}
   159b2:	7818      	ldrb	r0, [r3, #0]
   159b4:	4770      	bx	lr
   159b6:	bf00      	nop
   159b8:	20003bc2 	.word	0x20003bc2

000159bc <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   159bc:	4b01      	ldr	r3, [pc, #4]	; (159c4 <ull_conn_default_phy_rx_get+0x8>)
}
   159be:	7818      	ldrb	r0, [r3, #0]
   159c0:	4770      	bx	lr
   159c2:	bf00      	nop
   159c4:	20003bc1 	.word	0x20003bc1

000159c8 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   159c8:	688b      	ldr	r3, [r1, #8]
   159ca:	689b      	ldr	r3, [r3, #8]
	switch (lll->role) {
   159cc:	f893 c021 	ldrb.w	ip, [r3, #33]	; 0x21
   159d0:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
	ftr = &(rx->rx_ftr);
   159d4:	f101 0208 	add.w	r2, r1, #8
	switch (lll->role) {
   159d8:	d001      	beq.n	159de <ull_conn_setup+0x16>
		ull_slave_setup(link, rx, ftr, lll);
   159da:	f7ed bc8d 	b.w	32f8 <ull_slave_setup>
		ull_master_setup(link, rx, ftr, lll);
   159de:	f7ed bec7 	b.w	3770 <ull_master_setup>
   159e2:	bf00      	nop

000159e4 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   159e4:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   159e6:	88da      	ldrh	r2, [r3, #6]
   159e8:	2a00      	cmp	r2, #0
   159ea:	f040 80c7 	bne.w	15b7c <ull_conn_rx+0x198>
{
   159ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159f2:	460f      	mov	r7, r1
   159f4:	b085      	sub	sp, #20
   159f6:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   159f8:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   159fc:	48af      	ldr	r0, [pc, #700]	; (15cbc <ull_conn_rx+0x2d8>)
   159fe:	f7f9 fd61 	bl	f4c4 <mem_get>
   15a02:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   15a04:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15a06:	2800      	cmp	r0, #0
   15a08:	f040 80b1 	bne.w	15b6e <ull_conn_rx+0x18a>
	pdu_rx = (void *)(*rx)->pdu;
   15a0c:	683d      	ldr	r5, [r7, #0]
	switch (pdu_rx->ll_id) {
   15a0e:	7f2a      	ldrb	r2, [r5, #28]
   15a10:	f002 0203 	and.w	r2, r2, #3
   15a14:	2a03      	cmp	r2, #3
   15a16:	d12a      	bne.n	15a6e <ull_conn_rx+0x8a>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   15a18:	f894 c156 	ldrb.w	ip, [r4, #342]	; 0x156
	opcode = pdu_rx->llctrl.opcode;
   15a1c:	f895 801f 	ldrb.w	r8, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   15a20:	f01c 0f01 	tst.w	ip, #1
   15a24:	d03d      	beq.n	15aa2 <ull_conn_rx+0xbe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   15a26:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15a2a:	2b00      	cmp	r3, #0
   15a2c:	f2c0 80aa 	blt.w	15b84 <ull_conn_rx+0x1a0>
	return (!conn->lll.role &&
   15a30:	f01c 0f04 	tst.w	ip, #4
   15a34:	f040 80d7 	bne.w	15be6 <ull_conn_rx+0x202>
		((!conn->llcp_enc.refresh &&
   15a38:	f1b8 0f02 	cmp.w	r8, #2
   15a3c:	f000 8324 	beq.w	16088 <ull_conn_rx+0x6a4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15a40:	f1b8 0f05 	cmp.w	r8, #5
   15a44:	f000 850c 	beq.w	16460 <ull_conn_rx+0xa7c>
   15a48:	f1b8 0f06 	cmp.w	r8, #6
   15a4c:	f000 8618 	beq.w	16680 <ull_conn_rx+0xc9c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15a50:	f1b8 0f0d 	cmp.w	r8, #13
   15a54:	f000 829c 	beq.w	15f90 <ull_conn_rx+0x5ac>
   15a58:	f1b8 0f11 	cmp.w	r8, #17
   15a5c:	f000 82da 	beq.w	16014 <ull_conn_rx+0x630>
		conn->llcp_terminate.reason_peer =
   15a60:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a62:	2303      	movs	r3, #3
		conn->llcp_terminate.reason_peer =
   15a64:	f884 2133 	strb.w	r2, [r4, #307]	; 0x133

		return 0;
   15a68:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a6a:	712b      	strb	r3, [r5, #4]
		return 0;
   15a6c:	e00a      	b.n	15a84 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   15a6e:	b962      	cbnz	r2, 15a8a <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   15a70:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
   15a74:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_peer =
   15a76:	bf44      	itt	mi
   15a78:	233d      	movmi	r3, #61	; 0x3d
   15a7a:	f884 3133 	strbmi.w	r3, [r4, #307]	; 0x133
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a7e:	2303      	movs	r3, #3
   15a80:	712b      	strb	r3, [r5, #4]
	return 0;
   15a82:	2000      	movs	r0, #0
}
   15a84:	b005      	add	sp, #20
   15a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   15a8a:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
   15a8e:	07d2      	lsls	r2, r2, #31
   15a90:	d5f7      	bpl.n	15a82 <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_peer =
   15a92:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a94:	2203      	movs	r2, #3
			conn->llcp_terminate.reason_peer =
   15a96:	f884 1133 	strb.w	r1, [r4, #307]	; 0x133
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a9a:	712a      	strb	r2, [r5, #4]
}
   15a9c:	b005      	add	sp, #20
   15a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   15aa2:	f105 021c 	add.w	r2, r5, #28
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   15aa6:	f1b8 0f19 	cmp.w	r8, #25
   15aaa:	d820      	bhi.n	15aee <ull_conn_rx+0x10a>
   15aac:	e8df f018 	tbh	[pc, r8, lsl #1]
   15ab0:	019301c6 	.word	0x019301c6
   15ab4:	001a02ec 	.word	0x001a02ec
   15ab8:	04d304cc 	.word	0x04d304cc
   15abc:	049e0503 	.word	0x049e0503
   15ac0:	041c04c5 	.word	0x041c04c5
   15ac4:	04f20452 	.word	0x04f20452
   15ac8:	02700283 	.word	0x02700283
   15acc:	036a0379 	.word	0x036a0379
   15ad0:	02b20389 	.word	0x02b20389
   15ad4:	016f017a 	.word	0x016f017a
   15ad8:	010a010a 	.word	0x010a010a
   15adc:	032d013e 	.word	0x032d013e
   15ae0:	02f80233 	.word	0x02f80233
		terminate_ind_recv(conn, *rx, pdu_rx);
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   15ae4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15ae8:	2b00      	cmp	r3, #0
   15aea:	f2c0 80ab 	blt.w	15c44 <ull_conn_rx+0x260>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15aee:	4874      	ldr	r0, [pc, #464]	; (15cc0 <ull_conn_rx+0x2dc>)
   15af0:	f7f9 fcba 	bl	f468 <mem_acquire>
	if (!tx) {
   15af4:	2800      	cmp	r0, #0
   15af6:	f000 86c0 	beq.w	1687a <ull_conn_rx+0xe96>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15afa:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   15afc:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15b00:	f043 0303 	orr.w	r3, r3, #3
   15b04:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15b06:	2302      	movs	r3, #2
   15b08:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   15b0a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15b0e:	2207      	movs	r2, #7
   15b10:	71c2      	strb	r2, [r0, #7]
	if (
   15b12:	b1e3      	cbz	r3, 15b4e <ull_conn_rx+0x16a>
	    !conn->llcp_enc.pause_tx &&
   15b14:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	    conn->tx_head &&
   15b18:	0796      	lsls	r6, r2, #30
   15b1a:	d418      	bmi.n	15b4e <ull_conn_rx+0x16a>
	    !conn->llcp_phy.pause_tx &&
   15b1c:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
   15b20:	07d1      	lsls	r1, r2, #31
   15b22:	d414      	bmi.n	15b4e <ull_conn_rx+0x16a>
		if (conn->tx_head == conn->tx_data) {
   15b24:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   15b28:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15b2a:	bf04      	itt	eq
   15b2c:	681a      	ldreq	r2, [r3, #0]
   15b2e:	f8c4 21c0 	streq.w	r2, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
   15b32:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   15b36:	b97a      	cbnz	r2, 15b58 <ull_conn_rx+0x174>
			tx->next = conn->tx_head->next;
   15b38:	681a      	ldr	r2, [r3, #0]
   15b3a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15b3c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15b3e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15b40:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   15b44:	2b00      	cmp	r3, #0
   15b46:	d19a      	bne.n	15a7e <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   15b48:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15b4c:	e797      	b.n	15a7e <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   15b4e:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   15b52:	2a00      	cmp	r2, #0
   15b54:	f000 856b 	beq.w	1662e <ull_conn_rx+0xc4a>
	tx->next = conn->tx_ctrl_last->next;
   15b58:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   15b5c:	681a      	ldr	r2, [r3, #0]
   15b5e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15b60:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15b62:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   15b64:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
   15b68:	2b00      	cmp	r3, #0
   15b6a:	d188      	bne.n	15a7e <ull_conn_rx+0x9a>
   15b6c:	e7ec      	b.n	15b48 <ull_conn_rx+0x164>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15b6e:	683b      	ldr	r3, [r7, #0]
   15b70:	2203      	movs	r2, #3
		return 0;
   15b72:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15b74:	711a      	strb	r2, [r3, #4]
}
   15b76:	b005      	add	sp, #20
   15b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15b7c:	2203      	movs	r2, #3
   15b7e:	711a      	strb	r2, [r3, #4]
		return 0;
   15b80:	2000      	movs	r0, #0
}
   15b82:	4770      	bx	lr
	       (conn->lll.role &&
   15b84:	f01c 0f04 	tst.w	ip, #4
   15b88:	d151      	bne.n	15c2e <ull_conn_rx+0x24a>
		((!conn->llcp_enc.refresh &&
   15b8a:	f1b8 0f07 	cmp.w	r8, #7
   15b8e:	f000 842d 	beq.w	163ec <ull_conn_rx+0xa08>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   15b92:	f1b8 0f02 	cmp.w	r8, #2
   15b96:	f000 8277 	beq.w	16088 <ull_conn_rx+0x6a4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15b9a:	f1b8 0f06 	cmp.w	r8, #6
   15b9e:	f47f af57 	bne.w	15a50 <ull_conn_rx+0x6c>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;

		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   15ba2:	7f6b      	ldrb	r3, [r5, #29]
   15ba4:	2b01      	cmp	r3, #1
   15ba6:	d1a2      	bne.n	15aee <ull_conn_rx+0x10a>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (conn->lll.role) {
#if !defined(CONFIG_BT_CTLR_FAST_ENC)
			if ((conn->llcp_req != conn->llcp_ack) &&
   15ba8:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   15bac:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15bb0:	4293      	cmp	r3, r2
   15bb2:	f001 8178 	beq.w	16ea6 <ull_conn_rx+0x14c2>
   15bb6:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   15bba:	2b03      	cmp	r3, #3
   15bbc:	d197      	bne.n	15aee <ull_conn_rx+0x10a>
			    (conn->llcp_type != LLCP_ENCRYPTION)) {
				goto ull_conn_rx_unknown_rsp_send;
			}

			/* start enc rsp to be scheduled in slave  prepare */
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15bbe:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   15bc2:	f36f 0301 	bfc	r3, #0, #2
   15bc6:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
			conn->llcp_enc.pause_rx = 0U;
			conn->llcp_enc.pause_tx = 0U;
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (conn->llcp_enc.refresh) {
   15bca:	f01c 0f04 	tst.w	ip, #4
   15bce:	d005      	beq.n	15bdc <ull_conn_rx+0x1f8>
			conn->llcp_enc.refresh = 0U;
   15bd0:	f36f 0c82 	bfc	ip, #2, #1

			/* key refresh event */
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15bd4:	230d      	movs	r3, #13
			conn->llcp_enc.refresh = 0U;
   15bd6:	f884 c156 	strb.w	ip, [r4, #342]	; 0x156
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15bda:	712b      	strb	r3, [r5, #4]
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   15bdc:	2300      	movs	r3, #0
   15bde:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	int nack = 0;
   15be2:	4618      	mov	r0, r3
		break;
   15be4:	e74e      	b.n	15a84 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   15be6:	f1b8 0f02 	cmp.w	r8, #2
   15bea:	f000 824d 	beq.w	16088 <ull_conn_rx+0x6a4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15bee:	f1b8 0f0b 	cmp.w	r8, #11
   15bf2:	f000 8526 	beq.w	16642 <ull_conn_rx+0xc5e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15bf6:	f1b8 0f04 	cmp.w	r8, #4
   15bfa:	f47f af21 	bne.w	15a40 <ull_conn_rx+0x5c>
		if (conn->lll.role ||
   15bfe:	7f6b      	ldrb	r3, [r5, #29]
   15c00:	2b0d      	cmp	r3, #13
   15c02:	f47f af74 	bne.w	15aee <ull_conn_rx+0x10a>
   15c06:	6a2b      	ldr	r3, [r5, #32]
   15c08:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   15c0a:	f8c4 20fe 	str.w	r2, [r4, #254]	; 0xfe
   15c0e:	f8c4 30fa 	str.w	r3, [r4, #250]	; 0xfa
   15c12:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		conn->llcp_enc.pause_rx = 1U;
   15c14:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
   15c18:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c1c:	683a      	ldr	r2, [r7, #0]
		conn->llcp_enc.pause_rx = 1U;
   15c1e:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c22:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
   15c24:	f884 3156 	strb.w	r3, [r4, #342]	; 0x156
	int nack = 0;
   15c28:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c2a:	7111      	strb	r1, [r2, #4]
		break;
   15c2c:	e72a      	b.n	15a84 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   15c2e:	f1b8 0f02 	cmp.w	r8, #2
   15c32:	f000 8229 	beq.w	16088 <ull_conn_rx+0x6a4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15c36:	f1b8 0f0b 	cmp.w	r8, #11
   15c3a:	f000 851c 	beq.w	16676 <ull_conn_rx+0xc92>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15c3e:	f1b8 0f03 	cmp.w	r8, #3
   15c42:	d1aa      	bne.n	15b9a <ull_conn_rx+0x1b6>
		if (!conn->lll.role ||
   15c44:	7f6b      	ldrb	r3, [r5, #29]
   15c46:	2b17      	cmp	r3, #23
   15c48:	f47f af51 	bne.w	15aee <ull_conn_rx+0x10a>
   15c4c:	6a2b      	ldr	r3, [r5, #32]
   15c4e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   15c50:	f8c4 215d 	str.w	r2, [r4, #349]	; 0x15d
   15c54:	f8c4 3159 	str.w	r3, [r4, #345]	; 0x159
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   15c58:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   15c5c:	f884 3157 	strb.w	r3, [r4, #343]	; 0x157
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   15c60:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   15c64:	f884 3158 	strb.w	r3, [r4, #344]	; 0x158
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15c68:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c6c:	6839      	ldr	r1, [r7, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15c6e:	2201      	movs	r2, #1
   15c70:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c74:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15c76:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c7a:	710a      	strb	r2, [r1, #4]
		conn->llcp_ack -= 2U;
   15c7c:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
		conn->llcp_type = LLCP_ENCRYPTION;
   15c80:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
		conn->llcp_ack -= 2U;
   15c84:	3b02      	subs	r3, #2
   15c86:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
   15c8a:	f8d5 102a 	ldr.w	r1, [r5, #42]	; 0x2a
   15c8e:	f8d5 202e 	ldr.w	r2, [r5, #46]	; 0x2e
		conn->llcp_enc.pause_rx = 1U;
   15c92:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
   15c96:	f8c4 20f6 	str.w	r2, [r4, #246]	; 0xf6
   15c9a:	f8c4 10f2 	str.w	r1, [r4, #242]	; 0xf2
   15c9e:	f8d5 1032 	ldr.w	r1, [r5, #50]	; 0x32
		conn->procedure_expire = conn->procedure_reload;
   15ca2:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
   15ca6:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
		conn->llcp_enc.pause_rx = 1U;
   15caa:	f043 0301 	orr.w	r3, r3, #1
   15cae:	f884 3156 	strb.w	r3, [r4, #342]	; 0x156
		conn->procedure_expire = conn->procedure_reload;
   15cb2:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
	int nack = 0;
   15cb6:	2000      	movs	r0, #0
		break;
   15cb8:	e6e4      	b.n	15a84 <ull_conn_rx+0xa0>
   15cba:	bf00      	nop
   15cbc:	20002830 	.word	0x20002830
   15cc0:	20002a78 	.word	0x20002a78

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   15cc4:	7f6b      	ldrb	r3, [r5, #29]
   15cc6:	2b09      	cmp	r3, #9
   15cc8:	f47f af11 	bne.w	15aee <ull_conn_rx+0x10a>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   15ccc:	f1b8 0f14 	cmp.w	r8, #20
   15cd0:	f000 8513 	beq.w	166fa <ull_conn_rx+0xd16>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15cd4:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
	if (/* Local idle, and Peer request then complete the Peer procedure
   15cd8:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
	eff_rx_octets = conn->lll.max_rx_octets;
   15cdc:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
	eff_tx_octets = conn->lll.max_tx_octets;
   15ce0:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	eff_rx_time = conn->lll.max_rx_time;
   15ce4:	f8b4 a066 	ldrh.w	sl, [r4, #102]	; 0x66
	eff_tx_time = conn->lll.max_tx_time;
   15ce8:	f8b4 b064 	ldrh.w	fp, [r4, #100]	; 0x64
	eff_rx_octets = conn->lll.max_rx_octets;
   15cec:	9202      	str	r2, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   15cee:	428b      	cmp	r3, r1
   15cf0:	f001 80f8 	beq.w	16ee4 <ull_conn_rx+0x1500>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   15cf4:	f894 219e 	ldrb.w	r2, [r4, #414]	; 0x19e
	struct node_tx *tx = NULL;
   15cf8:	2300      	movs	r3, #0
	       tx) ||
   15cfa:	f002 0207 	and.w	r2, r2, #7
   15cfe:	2a02      	cmp	r2, #2
   15d00:	f000 8512 	beq.w	16728 <ull_conn_rx+0xd44>
   15d04:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   15d08:	f1b8 0f15 	cmp.w	r8, #21
   15d0c:	f43f aeb9 	beq.w	15a82 <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   15d10:	4618      	mov	r0, r3
   15d12:	49db      	ldr	r1, [pc, #876]	; (16080 <ull_conn_rx+0x69c>)
   15d14:	f7f9 fbbe 	bl	f494 <mem_release>
			if (conn->llcp_length.state ==
   15d18:	f894 319e 	ldrb.w	r3, [r4, #414]	; 0x19e
   15d1c:	f003 0307 	and.w	r3, r3, #7
   15d20:	2b04      	cmp	r3, #4
   15d22:	f47f aeae 	bne.w	15a82 <ull_conn_rx+0x9e>
				return -EBUSY;
   15d26:	f06f 000f 	mvn.w	r0, #15
   15d2a:	e6ab      	b.n	15a84 <ull_conn_rx+0xa0>
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

#if defined(CONFIG_BT_CTLR_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   15d2c:	7f6b      	ldrb	r3, [r5, #29]
   15d2e:	2b03      	cmp	r3, #3
   15d30:	f47f aedd 	bne.w	15aee <ull_conn_rx+0x10a>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (!conn->lll.role) {
   15d34:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15d38:	2b00      	cmp	r3, #0
   15d3a:	f2c0 85c7 	blt.w	168cc <ull_conn_rx+0xee8>
			if ((conn->llcp_phy.ack !=
   15d3e:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
			     conn->llcp_phy.req) &&
   15d42:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
			if ((conn->llcp_phy.ack !=
   15d46:	428a      	cmp	r2, r1
   15d48:	d007      	beq.n	15d5a <ull_conn_rx+0x376>
			    ((conn->llcp_phy.state ==
			      LLCP_PHY_STATE_ACK_WAIT) ||
			     (conn->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
   15d4a:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
   15d4e:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   15d52:	3b01      	subs	r3, #1
   15d54:	2b02      	cmp	r3, #2
   15d56:	f240 87d2 	bls.w	16cfe <ull_conn_rx+0x131a>
				nack = reject_ext_ind_send(conn, *rx,
					PDU_DATA_LLCTRL_TYPE_PHY_REQ,
					BT_HCI_ERR_LL_PROC_COLLISION);
#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
#if defined(CONFIG_BT_CTLR_LE_ENC)
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   15d5a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15d5e:	f894 00ed 	ldrb.w	r0, [r4, #237]	; 0xed
   15d62:	1a1b      	subs	r3, r3, r0
   15d64:	f003 0303 	and.w	r3, r3, #3
   15d68:	2b02      	cmp	r3, #2
   15d6a:	f000 8724 	beq.w	16bb6 <ull_conn_rx+0x11d2>
				      0x03) == 0x02) &&
				    (conn->llcp_type !=
				     LLCP_ENCRYPTION)) ||
   15d6e:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
   15d72:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   15d76:	4298      	cmp	r0, r3
   15d78:	f000 87c4 	beq.w	16d04 <ull_conn_rx+0x1320>
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   15d7c:	232a      	movs	r3, #42	; 0x2a
   15d7e:	2216      	movs	r2, #22
   15d80:	4629      	mov	r1, r5
   15d82:	4620      	mov	r0, r4
}
   15d84:	b005      	add	sp, #20
   15d86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   15d8a:	f7ff b875 	b.w	14e78 <reject_ext_ind_send>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   15d8e:	7f6b      	ldrb	r3, [r5, #29]
   15d90:	2b01      	cmp	r3, #1
   15d92:	f47f aeac 	bne.w	15aee <ull_conn_rx+0x10a>
		conn->procedure_expire = 0U;
   15d96:	2300      	movs	r3, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15d98:	2203      	movs	r2, #3
		conn->procedure_expire = 0U;
   15d9a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	int nack = 0;
   15d9e:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15da0:	712a      	strb	r2, [r5, #4]
		break;
   15da2:	e66f      	b.n	15a84 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   15da4:	7f6e      	ldrb	r6, [r5, #29]
   15da6:	2e01      	cmp	r6, #1
   15da8:	f47f aea1 	bne.w	15aee <ull_conn_rx+0x10a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15dac:	48b4      	ldr	r0, [pc, #720]	; (16080 <ull_conn_rx+0x69c>)
   15dae:	f7f9 fb5b 	bl	f468 <mem_acquire>
	if (!tx) {
   15db2:	4601      	mov	r1, r0
   15db4:	2800      	cmp	r0, #0
   15db6:	f000 8560 	beq.w	1687a <ull_conn_rx+0xe96>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15dba:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   15dbc:	7146      	strb	r6, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15dbe:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   15dc2:	2213      	movs	r2, #19
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15dc4:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   15dc6:	71c2      	strb	r2, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   15dc8:	4620      	mov	r0, r4
   15dca:	f7ff f8a5 	bl	14f18 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15dce:	2303      	movs	r3, #3
   15dd0:	712b      	strb	r3, [r5, #4]
	return 0;
   15dd2:	2000      	movs	r0, #0
   15dd4:	e656      	b.n	15a84 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   15dd6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15dda:	2b00      	cmp	r3, #0
   15ddc:	f6bf ae87 	bge.w	15aee <ull_conn_rx+0x10a>
   15de0:	7f6b      	ldrb	r3, [r5, #29]
   15de2:	2b08      	cmp	r3, #8
   15de4:	f47f ae83 	bne.w	15aee <ull_conn_rx+0x10a>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   15de8:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   15dec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   15dee:	1acb      	subs	r3, r1, r3
   15df0:	041f      	lsls	r7, r3, #16
   15df2:	f100 87ce 	bmi.w	16d92 <ull_conn_rx+0x13ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   15df6:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   15dfa:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15dfe:	1a9b      	subs	r3, r3, r2
   15e00:	f003 0303 	and.w	r3, r3, #3
   15e04:	2b02      	cmp	r3, #2
   15e06:	f001 804a 	beq.w	16e9e <ull_conn_rx+0x14ba>
   15e0a:	6a2b      	ldr	r3, [r5, #32]
   15e0c:	f8c4 30f1 	str.w	r3, [r4, #241]	; 0xf1
   15e10:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   15e14:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn->llcp.chan_map.initiate = 0U;
   15e18:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
	conn->llcp.chan_map.instant = instant;
   15e1c:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
	conn->llcp.chan_map.initiate = 0U;
   15e20:	f36f 0300 	bfc	r3, #0, #1
   15e24:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	conn->llcp_ack -= 2U;
   15e28:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_CHAN_MAP;
   15e2a:	2102      	movs	r1, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15e2c:	2303      	movs	r3, #3
	conn->llcp_type = LLCP_CHAN_MAP;
   15e2e:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
	conn->llcp_ack -= 2U;
   15e32:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	int nack = 0;
   15e36:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15e38:	712b      	strb	r3, [r5, #4]
		if (err) {
   15e3a:	e623      	b.n	15a84 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   15e3c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15e40:	2b00      	cmp	r3, #0
   15e42:	f6bf ae54 	bge.w	15aee <ull_conn_rx+0x10a>
   15e46:	7f6b      	ldrb	r3, [r5, #29]
   15e48:	2b0c      	cmp	r3, #12
   15e4a:	f47f ae50 	bne.w	15aee <ull_conn_rx+0x10a>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   15e4e:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   15e52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   15e54:	1acb      	subs	r3, r1, r3
   15e56:	041b      	lsls	r3, r3, #16
   15e58:	f100 879b 	bmi.w	16d92 <ull_conn_rx+0x13ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   15e5c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15e60:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   15e64:	1a9b      	subs	r3, r3, r2
   15e66:	f003 0303 	and.w	r3, r3, #3
   15e6a:	2b02      	cmp	r3, #2
   15e6c:	f001 8017 	beq.w	16e9e <ull_conn_rx+0x14ba>
	if (!conn_upd_curr) {
   15e70:	4b84      	ldr	r3, [pc, #528]	; (16084 <ull_conn_rx+0x6a0>)
   15e72:	681a      	ldr	r2, [r3, #0]
   15e74:	2a00      	cmp	r2, #0
   15e76:	f001 8024 	beq.w	16ec2 <ull_conn_rx+0x14de>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   15e7a:	f895 3020 	ldrb.w	r3, [r5, #32]
   15e7e:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   15e82:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   15e86:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15e8a:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   15e8e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   15e92:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   15e96:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   15e9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   15e9e:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   15ea2:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   15ea6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   15eaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   15eae:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15eb2:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15eb6:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
   15eba:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   15ebe:	f8a4 10f0 	strh.w	r1, [r4, #240]	; 0xf0
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15ec2:	f023 0307 	bic.w	r3, r3, #7
   15ec6:	f043 0304 	orr.w	r3, r3, #4
   15eca:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
	conn->llcp_cu.ack--;
   15ece:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15ed2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   15ed6:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
	conn->llcp_cu.ack--;
   15eda:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   15edc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	conn->llcp_cu.ack--;
   15ee0:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	link->mem = conn->llcp_rx;
   15ee4:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   15ee6:	683a      	ldr	r2, [r7, #0]
   15ee8:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   15eea:	683a      	ldr	r2, [r7, #0]
   15eec:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
	*rx = NULL;
   15ef0:	2300      	movs	r3, #0
   15ef2:	603b      	str	r3, [r7, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15ef4:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
   15ef8:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   15efc:	4293      	cmp	r3, r2
   15efe:	f43f ae6d 	beq.w	15bdc <ull_conn_rx+0x1f8>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   15f02:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15f06:	f003 0307 	and.w	r3, r3, #7
   15f0a:	2b04      	cmp	r3, #4
   15f0c:	f47f ae66 	bne.w	15bdc <ull_conn_rx+0x1f8>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15f10:	f884 2175 	strb.w	r2, [r4, #373]	; 0x175
		if (err) {
   15f14:	e662      	b.n	15bdc <ull_conn_rx+0x1f8>

	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   15f16:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15f1a:	2b00      	cmp	r3, #0
   15f1c:	f6bf ade7 	bge.w	15aee <ull_conn_rx+0x10a>
   15f20:	7f6b      	ldrb	r3, [r5, #29]
   15f22:	2b05      	cmp	r3, #5
   15f24:	f47f ade3 	bne.w	15aee <ull_conn_rx+0x10a>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   15f28:	f895 1020 	ldrb.w	r1, [r5, #32]
   15f2c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   15f30:	ea41 0003 	orr.w	r0, r1, r3
   15f34:	f010 0007 	ands.w	r0, r0, #7
   15f38:	f040 8666 	bne.w	16c08 <ull_conn_rx+0x1224>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   15f3c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   15f40:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   15f44:	4293      	cmp	r3, r2
   15f46:	f43f ad9a 	beq.w	15a7e <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   15f4a:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   15f4e:	f003 0303 	and.w	r3, r3, #3
   15f52:	2b02      	cmp	r3, #2
   15f54:	f47f ad93 	bne.w	15a7e <ull_conn_rx+0x9a>
		conn->llcp_phy.pause_tx = 0U;
   15f58:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15f5c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15f60:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
		conn->procedure_expire = 0U;
   15f64:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
		conn->llcp_phy.pause_tx = 0U;
   15f68:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15f6c:	4611      	mov	r1, r2
   15f6e:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   15f72:	f884 31af 	strb.w	r3, [r4, #431]	; 0x1af
		if (!conn->llcp_phy.cmd) {
   15f76:	f013 0304 	ands.w	r3, r3, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15f7a:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
   15f7e:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   15f82:	f041 8072 	bne.w	1706a <ull_conn_rx+0x1686>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15f86:	683a      	ldr	r2, [r7, #0]
   15f88:	2103      	movs	r1, #3
   15f8a:	7111      	strb	r1, [r2, #4]
	int nack = 0;
   15f8c:	4618      	mov	r0, r3
   15f8e:	e579      	b.n	15a84 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   15f90:	7f6b      	ldrb	r3, [r5, #29]
   15f92:	2b02      	cmp	r3, #2
   15f94:	f47f adab 	bne.w	15aee <ull_conn_rx+0x10a>
		conn->llcp_enc.pause_rx = 0U;
   15f98:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
		conn->llcp_ack = conn->llcp_req;
   15f9c:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
   15fa0:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
		conn->procedure_expire = 0U;
   15fa4:	2300      	movs	r3, #0
		conn->llcp_enc.pause_rx = 0U;
   15fa6:	f022 0203 	bic.w	r2, r2, #3
   15faa:	f884 2156 	strb.w	r2, [r4, #342]	; 0x156
		conn->procedure_expire = 0U;
   15fae:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	int nack = 0;
   15fb2:	4618      	mov	r0, r3
		break;
   15fb4:	e566      	b.n	15a84 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   15fb6:	7f6e      	ldrb	r6, [r5, #29]
   15fb8:	2e06      	cmp	r6, #6
   15fba:	f47f ad98 	bne.w	15aee <ull_conn_rx+0x10a>
	if (!conn->llcp_version.tx) {
   15fbe:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
   15fc2:	07da      	lsls	r2, r3, #31
   15fc4:	f140 8549 	bpl.w	16a5a <ull_conn_rx+0x1076>
	} else if (!conn->llcp_version.rx) {
   15fc8:	f013 0302 	ands.w	r3, r3, #2
   15fcc:	f47f ad57 	bne.w	15a7e <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   15fd0:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
   15fd4:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
		conn->procedure_expire = 0U;
   15fd8:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	conn->llcp_version.version_number = v->version_number;
   15fdc:	f895 3020 	ldrb.w	r3, [r5, #32]
   15fe0:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   15fe4:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   15fe8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   15fec:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   15ff0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15ff4:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
		sys_le16_to_cpu(v->sub_version_number);
   15ff8:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   15ffc:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   16000:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   16004:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   16008:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
	conn->llcp_version.rx = 1U;
   1600c:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
	return 0;
   16010:	2000      	movs	r0, #0
   16012:	e537      	b.n	15a84 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   16014:	7f6b      	ldrb	r3, [r5, #29]
   16016:	2b03      	cmp	r3, #3
   16018:	f47f ad69 	bne.w	15aee <ull_conn_rx+0x10a>
	switch (rej_ext_ind->reject_opcode) {
   1601c:	f895 3020 	ldrb.w	r3, [r5, #32]
   16020:	3b03      	subs	r3, #3
   16022:	2b13      	cmp	r3, #19
   16024:	f63f ad2b 	bhi.w	15a7e <ull_conn_rx+0x9a>
   16028:	a201      	add	r2, pc, #4	; (adr r2, 16030 <ull_conn_rx+0x64c>)
   1602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1602e:	bf00      	nop
   16030:	000165ef 	.word	0x000165ef
   16034:	00015a7f 	.word	0x00015a7f
   16038:	00015a7f 	.word	0x00015a7f
   1603c:	00015a7f 	.word	0x00015a7f
   16040:	00015a7f 	.word	0x00015a7f
   16044:	00015a7f 	.word	0x00015a7f
   16048:	00015a7f 	.word	0x00015a7f
   1604c:	00015a7f 	.word	0x00015a7f
   16050:	00015a7f 	.word	0x00015a7f
   16054:	00015a7f 	.word	0x00015a7f
   16058:	00015a7f 	.word	0x00015a7f
   1605c:	00015a7f 	.word	0x00015a7f
   16060:	00016589 	.word	0x00016589
   16064:	00015a7f 	.word	0x00015a7f
   16068:	00015a7f 	.word	0x00015a7f
   1606c:	00015a7f 	.word	0x00015a7f
   16070:	00015a7f 	.word	0x00015a7f
   16074:	0001654b 	.word	0x0001654b
   16078:	00015a7f 	.word	0x00015a7f
   1607c:	000164e5 	.word	0x000164e5
   16080:	20002a78 	.word	0x20002a78
   16084:	200029fc 	.word	0x200029fc
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   16088:	7f6b      	ldrb	r3, [r5, #29]
   1608a:	2b02      	cmp	r3, #2
   1608c:	f47f ad2f 	bne.w	15aee <ull_conn_rx+0x10a>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   16090:	f895 2020 	ldrb.w	r2, [r5, #32]
   16094:	f884 2133 	strb.w	r2, [r4, #307]	; 0x133
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16098:	2303      	movs	r3, #3
	int nack = 0;
   1609a:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1609c:	712b      	strb	r3, [r5, #4]
}
   1609e:	e4f1      	b.n	15a84 <ull_conn_rx+0xa0>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   160a0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   160a4:	2b00      	cmp	r3, #0
   160a6:	f6ff ad22 	blt.w	15aee <ull_conn_rx+0x10a>
   160aa:	7f6e      	ldrb	r6, [r5, #29]
   160ac:	2e03      	cmp	r6, #3
   160ae:	f47f ad1e 	bne.w	15aee <ull_conn_rx+0x10a>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   160b2:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
					 conn->lll.phy_rx))) {
   160b6:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
			if (!(p->phys & (conn->lll.phy_tx |
   160ba:	f895 2020 	ldrb.w	r2, [r5, #32]
   160be:	430b      	orrs	r3, r1
   160c0:	f003 0307 	and.w	r3, r3, #7
   160c4:	4213      	tst	r3, r2
   160c6:	f43f acdc 	beq.w	15a82 <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   160ca:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   160ce:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   160d2:	1a9b      	subs	r3, r3, r2
   160d4:	f003 0303 	and.w	r3, r3, #3
   160d8:	2b02      	cmp	r3, #2
   160da:	f43f acd2 	beq.w	15a82 <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   160de:	f104 00f1 	add.w	r0, r4, #241	; 0xf1
   160e2:	f002 faf5 	bl	186d0 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   160e6:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
			conn->llcp.chan_map.initiate = 1U;
   160ea:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
			conn->llcp_ack -= 2U;
   160ee:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   160f0:	2102      	movs	r1, #2
   160f2:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
			conn->llcp_ack -= 2U;
   160f6:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   160fa:	683a      	ldr	r2, [r7, #0]
			conn->llcp.chan_map.initiate = 1U;
   160fc:	f043 0301 	orr.w	r3, r3, #1
   16100:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	int nack = 0;
   16104:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16106:	7116      	strb	r6, [r2, #4]

		break;
   16108:	e4bc      	b.n	15a84 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   1610a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1610e:	2b00      	cmp	r3, #0
   16110:	f6ff aced 	blt.w	15aee <ull_conn_rx+0x10a>
   16114:	7f6b      	ldrb	r3, [r5, #29]
   16116:	2b03      	cmp	r3, #3
   16118:	f47f ace9 	bne.w	15aee <ull_conn_rx+0x10a>
		if (!conn->lll.role &&
   1611c:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   16120:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   16124:	429a      	cmp	r2, r3
   16126:	f43f acaa 	beq.w	15a7e <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1612a:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1612e:	f002 0303 	and.w	r3, r2, #3
   16132:	2b02      	cmp	r3, #2
   16134:	f47f aca3 	bne.w	15a7e <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   16138:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1613c:	f3c2 0182 	ubfx	r1, r2, #2, #3
   16140:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   16142:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16146:	009b      	lsls	r3, r3, #2
   16148:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   1614c:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16150:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16154:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   16158:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1615c:	d002      	beq.n	16164 <ull_conn_rx+0x780>
   1615e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   16162:	d105      	bne.n	16170 <ull_conn_rx+0x78c>
				conn->llcp_phy.tx = 0;
   16164:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
   16168:	f003 0303 	and.w	r3, r3, #3
   1616c:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_phy.pause_tx = 1U;
   16170:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
			conn->procedure_expire = 0U;
   16174:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   16176:	f043 0301 	orr.w	r3, r3, #1
   1617a:	f884 31af 	strb.w	r3, [r4, #431]	; 0x1af
			conn->procedure_expire = 0U;
   1617e:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16182:	e47c      	b.n	15a7e <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   16184:	7f6b      	ldrb	r3, [r5, #29]
   16186:	2b18      	cmp	r3, #24
   16188:	f47f acb1 	bne.w	15aee <ull_conn_rx+0x10a>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1618c:	4ed2      	ldr	r6, [pc, #840]	; (164d8 <ull_conn_rx+0xaf4>)
   1618e:	6833      	ldr	r3, [r6, #0]
   16190:	2b00      	cmp	r3, #0
   16192:	f000 8286 	beq.w	166a2 <ull_conn_rx+0xcbe>
   16196:	429c      	cmp	r4, r3
   16198:	f000 8283 	beq.w	166a2 <ull_conn_rx+0xcbe>
			nack = reject_ext_ind_send(conn, *rx,
   1619c:	2320      	movs	r3, #32
   1619e:	220f      	movs	r2, #15
   161a0:	e5ee      	b.n	15d80 <ull_conn_rx+0x39c>
		if (conn->lll.role ||
   161a2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   161a6:	2b00      	cmp	r3, #0
   161a8:	f6ff aca1 	blt.w	15aee <ull_conn_rx+0x10a>
   161ac:	7f6b      	ldrb	r3, [r5, #29]
   161ae:	2b09      	cmp	r3, #9
   161b0:	f47f ac9d 	bne.w	15aee <ull_conn_rx+0x10a>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   161b4:	4629      	mov	r1, r5
   161b6:	4620      	mov	r0, r4
}
   161b8:	b005      	add	sp, #20
   161ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   161be:	f7fe bf49 	b.w	15054 <feature_rsp_send>
		if (conn->lll.role ||
   161c2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   161c6:	2b00      	cmp	r3, #0
   161c8:	f6ff ac91 	blt.w	15aee <ull_conn_rx+0x10a>
   161cc:	7f6b      	ldrb	r3, [r5, #29]
   161ce:	2b18      	cmp	r3, #24
   161d0:	f47f ac8d 	bne.w	15aee <ull_conn_rx+0x10a>
		if (!conn->lll.role &&
   161d4:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
   161d8:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
   161dc:	429a      	cmp	r2, r3
   161de:	f43f ac4e 	beq.w	15a7e <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   161e2:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		     conn->llcp_conn_param.ack) &&
   161e6:	f003 0307 	and.w	r3, r3, #7
   161ea:	2b04      	cmp	r3, #4
   161ec:	f47f ac47 	bne.w	15a7e <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   161f0:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   161f4:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < 6) ||
   161f8:	2b05      	cmp	r3, #5
   161fa:	f240 857c 	bls.w	16cf6 <ull_conn_rx+0x1312>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   161fe:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   16200:	b2ba      	uxth	r2, r7
			if ((interval_min < 6) ||
   16202:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   16206:	f200 8576 	bhi.w	16cf6 <ull_conn_rx+0x1312>
			    (interval_max > 3200) ||
   1620a:	4293      	cmp	r3, r2
   1620c:	f200 8573 	bhi.w	16cf6 <ull_conn_rx+0x1312>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16210:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   16212:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   16214:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   16218:	f080 856d 	bcs.w	16cf6 <ull_conn_rx+0x1312>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1621c:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   1621e:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   16222:	f1ae 010a 	sub.w	r1, lr, #10
   16226:	f640 4876 	movw	r8, #3190	; 0xc76
   1622a:	b289      	uxth	r1, r1
   1622c:	4541      	cmp	r1, r8
   1622e:	f200 8562 	bhi.w	16cf6 <ull_conn_rx+0x1312>
			     ((latency + 1) * interval_max)) ||
   16232:	3301      	adds	r3, #1
   16234:	b29b      	uxth	r3, r3
   16236:	fb02 f303 	mul.w	r3, r2, r3
			    (timeout < 10) || (timeout > 3200) ||
   1623a:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   1623e:	f080 855a 	bcs.w	16cf6 <ull_conn_rx+0x1312>
			     ((latency + 1) * interval_max)) ||
   16242:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   16246:	428a      	cmp	r2, r1
   16248:	f0c0 8555 	bcc.w	16cf6 <ull_conn_rx+0x1312>
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1624c:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
			conn->llcp_conn_param.interval_min = interval_min;
   16250:	f8a4 c178 	strh.w	ip, [r4, #376]	; 0x178
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16254:	2301      	movs	r3, #1
   16256:	f363 0202 	bfi	r2, r3, #0, #3
			conn->procedure_expire = 0U;
   1625a:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   1625c:	f8a4 717a 	strh.w	r7, [r4, #378]	; 0x17a
			conn->llcp_conn_param.latency =	latency;
   16260:	f8a4 617c 	strh.w	r6, [r4, #380]	; 0x17c
			conn->llcp_conn_param.timeout =	timeout;
   16264:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
			conn->llcp_conn_param.preferred_periodicity =
   16268:	f884 1180 	strb.w	r1, [r4, #384]	; 0x180
			conn->procedure_expire = 0U;
   1626c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16270:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   16274:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   16278:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1627c:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset0);
   16280:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   16284:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   16288:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   1628c:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset1);
   16290:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   16294:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   16298:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   1629c:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset2);
   162a0:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   162a4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   162a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   162ac:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset3);
   162b0:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   162b4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   162b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   162bc:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
				sys_le16_to_cpu(cpr->offset4);
   162c0:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   162c4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   162c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   162cc:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
				sys_le16_to_cpu(cpr->offset5);
   162d0:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   162d4:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   162d8:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
				sys_le16_to_cpu(cpr->offset5);
   162dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   162e0:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   162e4:	f7ff bbcb 	b.w	15a7e <ull_conn_rx+0x9a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   162e8:	7f6b      	ldrb	r3, [r5, #29]
   162ea:	2b09      	cmp	r3, #9
   162ec:	f47f abff 	bne.w	15aee <ull_conn_rx+0x10a>
	       (features[1] << 8) | (features[2] << 16);
   162f0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   162f4:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   162f8:	f895 2020 	ldrb.w	r2, [r5, #32]
	       (features[1] << 8) | (features[2] << 16);
   162fc:	4877      	ldr	r0, [pc, #476]	; (164dc <ull_conn_rx+0xaf8>)
   162fe:	041b      	lsls	r3, r3, #16
   16300:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16304:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16306:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	       (features[1] << 8) | (features[2] << 16);
   1630a:	4303      	orrs	r3, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1630c:	4013      	ands	r3, r2
   1630e:	f3c3 0310 	ubfx	r3, r3, #0, #17
   16312:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	       (features[1] << 8) | (features[2] << 16);
   16316:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1631a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1631e:	f895 3020 	ldrb.w	r3, [r5, #32]
	       (features[1] << 8) | (features[2] << 16);
   16322:	0412      	lsls	r2, r2, #16
   16324:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16328:	431a      	orrs	r2, r3
	conn->common.fex_valid = 1U;
   1632a:	f894 10e0 	ldrb.w	r1, [r4, #224]	; 0xe0
	       (features[1] << 8) | (features[2] << 16);
   1632e:	4302      	orrs	r2, r0
	conn->procedure_expire = 0U;
   16330:	2300      	movs	r3, #0
	conn->llcp_feature.ack = conn->llcp_feature.req;
   16332:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
   16336:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	feat &= LL_FEAT_BIT_MASK;
   1633a:	f3c2 0210 	ubfx	r2, r2, #0, #17
	conn->common.fex_valid = 1U;
   1633e:	f041 0101 	orr.w	r1, r1, #1
	conn->llcp_feature.features_peer =
   16342:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
	conn->common.fex_valid = 1U;
   16346:	f884 10e0 	strb.w	r1, [r4, #224]	; 0xe0
	conn->procedure_expire = 0U;
   1634a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	int nack = 0;
   1634e:	4618      	mov	r0, r3
}
   16350:	f7ff bb98 	b.w	15a84 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   16354:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16358:	2b00      	cmp	r3, #0
   1635a:	f6bf abc8 	bge.w	15aee <ull_conn_rx+0x10a>
   1635e:	7f6e      	ldrb	r6, [r5, #29]
   16360:	2e01      	cmp	r6, #1
   16362:	f47f abc4 	bne.w	15aee <ull_conn_rx+0x10a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16366:	485e      	ldr	r0, [pc, #376]	; (164e0 <ull_conn_rx+0xafc>)
   16368:	f7f9 f87e 	bl	f468 <mem_acquire>
		if (!tx) {
   1636c:	2800      	cmp	r0, #0
   1636e:	f000 8284 	beq.w	1687a <ull_conn_rx+0xe96>
	conn->llcp_enc.pause_rx = 1U;
   16372:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
   16376:	f022 0205 	bic.w	r2, r2, #5
   1637a:	f042 0205 	orr.w	r2, r2, #5
   1637e:	f884 2156 	strb.w	r2, [r4, #342]	; 0x156
	conn->lll.enc_rx = 0;
   16382:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
   16386:	f36f 02c3 	bfc	r2, #3, #1
   1638a:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1638e:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16390:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16392:	f042 0203 	orr.w	r2, r2, #3
   16396:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   16398:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1639c:	210b      	movs	r1, #11
   1639e:	71c1      	strb	r1, [r0, #7]
	if (
   163a0:	2a00      	cmp	r2, #0
   163a2:	f000 8173 	beq.w	1668c <ull_conn_rx+0xca8>
	    !conn->llcp_enc.pause_tx &&
   163a6:	f894 1156 	ldrb.w	r1, [r4, #342]	; 0x156
	    conn->tx_head &&
   163aa:	078e      	lsls	r6, r1, #30
   163ac:	f100 816e 	bmi.w	1668c <ull_conn_rx+0xca8>
	    !conn->llcp_phy.pause_tx &&
   163b0:	f894 11af 	ldrb.w	r1, [r4, #431]	; 0x1af
   163b4:	07c9      	lsls	r1, r1, #31
   163b6:	f100 8169 	bmi.w	1668c <ull_conn_rx+0xca8>
		if (conn->tx_head == conn->tx_data) {
   163ba:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   163be:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   163c0:	bf04      	itt	eq
   163c2:	6811      	ldreq	r1, [r2, #0]
   163c4:	f8c4 11c0 	streq.w	r1, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
   163c8:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
   163cc:	2900      	cmp	r1, #0
   163ce:	f000 8642 	beq.w	17056 <ull_conn_rx+0x1672>
	tx->next = conn->tx_ctrl_last->next;
   163d2:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   163d6:	6811      	ldr	r1, [r2, #0]
   163d8:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   163da:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   163dc:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
   163e0:	6802      	ldr	r2, [r0, #0]
   163e2:	2a00      	cmp	r2, #0
   163e4:	f47f ab4b 	bne.w	15a7e <ull_conn_rx+0x9a>
   163e8:	f7ff bbae 	b.w	15b48 <ull_conn_rx+0x164>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   163ec:	7f6b      	ldrb	r3, [r5, #29]
   163ee:	2b02      	cmp	r3, #2
   163f0:	f47f ab7d 	bne.w	15aee <ull_conn_rx+0x10a>
		} else if ((conn->llcp_conn_param.ack !=
   163f4:	f894 2175 	ldrb.w	r2, [r4, #373]	; 0x175
   163f8:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   163fc:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   163fe:	f895 2020 	ldrb.w	r2, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   16402:	d002      	beq.n	1640a <ull_conn_rx+0xa26>
			    conn->llcp_conn_param.req) &&
   16404:	2a0f      	cmp	r2, #15
   16406:	f000 82db 	beq.w	169c0 <ull_conn_rx+0xfdc>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1640a:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   1640e:	f894 119d 	ldrb.w	r1, [r4, #413]	; 0x19d
   16412:	4299      	cmp	r1, r3
   16414:	d002      	beq.n	1641c <ull_conn_rx+0xa38>
   16416:	2a14      	cmp	r2, #20
   16418:	f000 83df 	beq.w	16bda <ull_conn_rx+0x11f6>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   1641c:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   16420:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   16424:	428b      	cmp	r3, r1
   16426:	d002      	beq.n	1642e <ull_conn_rx+0xa4a>
   16428:	2a16      	cmp	r2, #22
   1642a:	f000 84ba 	beq.w	16da2 <ull_conn_rx+0x13be>
			switch (llctrl->unknown_rsp.type) {
   1642e:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16430:	bf04      	itt	eq
   16432:	2303      	moveq	r3, #3
   16434:	712b      	strbeq	r3, [r5, #4]
				break;
   16436:	f7ff bbd1 	b.w	15bdc <ull_conn_rx+0x1f8>
		if (!conn->lll.role ||
   1643a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1643e:	2b00      	cmp	r3, #0
   16440:	f6ff aeb4 	blt.w	161ac <ull_conn_rx+0x7c8>
   16444:	f7ff bb53 	b.w	15aee <ull_conn_rx+0x10a>
		if (conn->lll.role ||
   16448:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1644c:	2b00      	cmp	r3, #0
   1644e:	f6bf abd6 	bge.w	15bfe <ull_conn_rx+0x21a>
   16452:	f7ff bb4c 	b.w	15aee <ull_conn_rx+0x10a>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   16456:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1645a:	2b00      	cmp	r3, #0
   1645c:	f6ff ab47 	blt.w	15aee <ull_conn_rx+0x10a>
   16460:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   16464:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   16468:	429a      	cmp	r2, r3
   1646a:	f43f ab40 	beq.w	15aee <ull_conn_rx+0x10a>
   1646e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   16472:	2b03      	cmp	r3, #3
   16474:	f47f ab3b 	bne.w	15aee <ull_conn_rx+0x10a>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   16478:	7f6a      	ldrb	r2, [r5, #29]
   1647a:	2a01      	cmp	r2, #1
   1647c:	f47f ab37 	bne.w	15aee <ull_conn_rx+0x10a>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16480:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   16484:	f36f 0201 	bfc	r2, #0, #2
   16488:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
	int nack = 0;
   1648c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1648e:	712b      	strb	r3, [r5, #4]
		break;
   16490:	f7ff baf8 	b.w	15a84 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16494:	7f6b      	ldrb	r3, [r5, #29]
   16496:	2b01      	cmp	r3, #1
   16498:	f47f ab29 	bne.w	15aee <ull_conn_rx+0x10a>
	} else if (!conn->lll.role) {
   1649c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   164a0:	2b00      	cmp	r3, #0
   164a2:	f280 80d2 	bge.w	1664a <ull_conn_rx+0xc66>
		conn->lll.enc_tx = 0;
   164a6:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
   164aa:	f36f 1304 	bfc	r3, #4, #1
   164ae:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
		goto pause_enc_rsp_send_exit;
   164b2:	f7ff bae4 	b.w	15a7e <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   164b6:	7f6b      	ldrb	r3, [r5, #29]
   164b8:	2b01      	cmp	r3, #1
   164ba:	f47f ab18 	bne.w	15aee <ull_conn_rx+0x10a>
		if (conn->lll.role) {
   164be:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   164c2:	2b00      	cmp	r3, #0
   164c4:	f6ff ab70 	blt.w	15ba8 <ull_conn_rx+0x1c4>
			conn->llcp_enc.pause_rx = 0U;
   164c8:	f894 c156 	ldrb.w	ip, [r4, #342]	; 0x156
   164cc:	f02c 0c03 	bic.w	ip, ip, #3
   164d0:	f884 c156 	strb.w	ip, [r4, #342]	; 0x156
   164d4:	f7ff bb79 	b.w	15bca <ull_conn_rx+0x1e6>
   164d8:	200029fc 	.word	0x200029fc
   164dc:	fffe30d0 	.word	0xfffe30d0
   164e0:	20002a78 	.word	0x20002a78
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   164e4:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   164e8:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   164ec:	428b      	cmp	r3, r1
   164ee:	f43f aac6 	beq.w	15a7e <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   164f2:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   164f6:	2a23      	cmp	r2, #35	; 0x23
   164f8:	d012      	beq.n	16520 <ull_conn_rx+0xb3c>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   164fa:	f884 11ad 	strb.w	r1, [r4, #429]	; 0x1ad
		conn->llcp_phy.pause_tx = 0U;
   164fe:	f894 11af 	ldrb.w	r1, [r4, #431]	; 0x1af
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16502:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
		conn->llcp_phy.pause_tx = 0U;
   16506:	f36f 0100 	bfc	r1, #0, #1
   1650a:	f884 11af 	strb.w	r1, [r4, #431]	; 0x1af
		conn->procedure_expire = 0U;
   1650e:	2100      	movs	r1, #0
   16510:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16514:	f3c3 0102 	ubfx	r1, r3, #0, #3
   16518:	f361 1306 	bfi	r3, r1, #4, #3
   1651c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	if (!conn->llcp_phy.cmd) {
   16520:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
   16524:	0759      	lsls	r1, r3, #29
   16526:	f57f aaaa 	bpl.w	15a7e <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1652a:	2310      	movs	r3, #16
   1652c:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1652e:	772a      	strb	r2, [r5, #28]
	p->tx = conn->lll.phy_tx;
   16530:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   16534:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16538:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   1653a:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
   1653e:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   16542:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   16544:	77ab      	strb	r3, [r5, #30]
	if (err) {
   16546:	f7ff ba9d 	b.w	15a84 <ull_conn_rx+0xa0>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1654a:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
   1654e:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
   16552:	4293      	cmp	r3, r2
   16554:	f43f aa93 	beq.w	15a7e <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   16558:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1655a:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   1655c:	f884 219d 	strb.w	r2, [r4, #413]	; 0x19d
	conn->procedure_expire = 0U;
   16560:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16564:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16566:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1656a:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1656e:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16570:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16572:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16576:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   16578:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
   1657c:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1657e:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16580:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   16582:	4618      	mov	r0, r3
   16584:	f7ff ba7e 	b.w	15a84 <ull_conn_rx+0xa0>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16588:	f894 2175 	ldrb.w	r2, [r4, #373]	; 0x175
   1658c:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   16590:	429a      	cmp	r2, r3
   16592:	f43f aa74 	beq.w	15a7e <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   16596:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1659a:	2a00      	cmp	r2, #0
   1659c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   165a0:	f2c0 857d 	blt.w	1709e <ull_conn_rx+0x16ba>
   165a4:	2a1a      	cmp	r2, #26
   165a6:	f000 85a6 	beq.w	170f6 <ull_conn_rx+0x1712>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   165aa:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   165ae:	f002 0107 	and.w	r1, r2, #7
   165b2:	2904      	cmp	r1, #4
   165b4:	f000 8582 	beq.w	170bc <ull_conn_rx+0x16d8>
	if (!conn->llcp_conn_param.cmd) {
   165b8:	0713      	lsls	r3, r2, #28
   165ba:	f57f aa60 	bpl.w	15a7e <ull_conn_rx+0x9a>
	cu->status = rej_ext_ind->error_code;
   165be:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   165c2:	772b      	strb	r3, [r5, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   165c4:	220c      	movs	r2, #12
   165c6:	712a      	strb	r2, [r5, #4]
	cu->interval = lll->interval;
   165c8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   165ca:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	cu->latency = lll->latency;
   165ce:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   165d0:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   165d2:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   165d4:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   165d8:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   165dc:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   165de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   165e2:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   165e6:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   165e8:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   165ea:	f7ff ba4b 	b.w	15a84 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   165ee:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
   165f2:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   165f6:	428b      	cmp	r3, r1
   165f8:	f43f aa41 	beq.w	15a7e <ull_conn_rx+0x9a>
   165fc:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   16600:	2b03      	cmp	r3, #3
   16602:	f47f aa3c 	bne.w	15a7e <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   16606:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
	conn->llcp_ack = conn->llcp_req;
   1660a:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
	conn->procedure_expire = 0U;
   1660e:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   16610:	f022 0203 	bic.w	r2, r2, #3
   16614:	f884 2156 	strb.w	r2, [r4, #342]	; 0x156
	conn->procedure_expire = 0U;
   16618:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   1661c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   16620:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16624:	210d      	movs	r1, #13
   16626:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   16628:	4618      	mov	r0, r3
   1662a:	f7ff ba2b 	b.w	15a84 <ull_conn_rx+0xa0>
			tx->next = conn->tx_head;
   1662e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16630:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
   16634:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
	if (!tx->next) {
   16638:	2b00      	cmp	r3, #0
   1663a:	f47f aa20 	bne.w	15a7e <ull_conn_rx+0x9a>
   1663e:	f7ff ba83 	b.w	15b48 <ull_conn_rx+0x164>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16642:	7f6b      	ldrb	r3, [r5, #29]
   16644:	2b01      	cmp	r3, #1
   16646:	f47f aa52 	bne.w	15aee <ull_conn_rx+0x10a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1664a:	489c      	ldr	r0, [pc, #624]	; (168bc <ull_conn_rx+0xed8>)
   1664c:	f7f8 ff0c 	bl	f468 <mem_acquire>
		if (!tx) {
   16650:	2800      	cmp	r0, #0
   16652:	f000 8112 	beq.w	1687a <ull_conn_rx+0xe96>
	conn->llcp_enc.pause_rx = 1U;
   16656:	f894 1156 	ldrb.w	r1, [r4, #342]	; 0x156
	conn->lll.enc_rx = 0;
   1665a:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
	conn->llcp_enc.pause_rx = 1U;
   1665e:	f041 0101 	orr.w	r1, r1, #1
	conn->lll.enc_rx = 0;
   16662:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_enc.pause_rx = 1U;
   16666:	f884 1156 	strb.w	r1, [r4, #342]	; 0x156
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1666a:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   1666c:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16670:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16672:	7141      	strb	r1, [r0, #5]
   16674:	e68d      	b.n	16392 <ull_conn_rx+0x9ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16676:	7f6b      	ldrb	r3, [r5, #29]
   16678:	2b01      	cmp	r3, #1
   1667a:	f47f aa38 	bne.w	15aee <ull_conn_rx+0x10a>
   1667e:	e712      	b.n	164a6 <ull_conn_rx+0xac2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16680:	7f6b      	ldrb	r3, [r5, #29]
   16682:	2b01      	cmp	r3, #1
   16684:	f43f af20 	beq.w	164c8 <ull_conn_rx+0xae4>
   16688:	f7ff ba31 	b.w	15aee <ull_conn_rx+0x10a>
		if (!conn->tx_ctrl) {
   1668c:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
   16690:	2900      	cmp	r1, #0
   16692:	f47f ae9e 	bne.w	163d2 <ull_conn_rx+0x9ee>
			tx->next = conn->tx_head;
   16696:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   16698:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
   1669c:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
   166a0:	e69e      	b.n	163e0 <ull_conn_rx+0x9fc>
		if (!conn->lll.role) {
   166a2:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   166a6:	2a00      	cmp	r2, #0
   166a8:	f2c0 80eb 	blt.w	16882 <ull_conn_rx+0xe9e>
					conn->llcp_conn_param.ack) &&
   166ac:	f894 2175 	ldrb.w	r2, [r4, #373]	; 0x175
   166b0:	9201      	str	r2, [sp, #4]
   166b2:	4611      	mov	r1, r2
			if ((conn->llcp_conn_param.req !=
   166b4:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
   166b8:	428a      	cmp	r2, r1
   166ba:	d009      	beq.n	166d0 <ull_conn_rx+0xcec>
			    ((conn->llcp_conn_param.state ==
   166bc:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
					conn->llcp_conn_param.ack) &&
   166c0:	f012 0207 	ands.w	r2, r2, #7
   166c4:	f000 8293 	beq.w	16bee <ull_conn_rx+0x120a>
			      LLCP_CPR_STATE_REQ) ||
   166c8:	3a04      	subs	r2, #4
   166ca:	2a01      	cmp	r2, #1
   166cc:	f240 828f 	bls.w	16bee <ull_conn_rx+0x120a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   166d0:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   166d4:	f894 10ed 	ldrb.w	r1, [r4, #237]	; 0xed
   166d8:	1a52      	subs	r2, r2, r1
   166da:	f002 0203 	and.w	r2, r2, #3
   166de:	2a02      	cmp	r2, #2
   166e0:	f000 8413 	beq.w	16f0a <ull_conn_rx+0x1526>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   166e4:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   166e8:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   166ec:	4291      	cmp	r1, r2
   166ee:	f000 8413 	beq.w	16f18 <ull_conn_rx+0x1534>
				nack = reject_ext_ind_send(conn, *rx,
   166f2:	232a      	movs	r3, #42	; 0x2a
   166f4:	220f      	movs	r2, #15
   166f6:	f7ff bb43 	b.w	15d80 <ull_conn_rx+0x39c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   166fa:	4870      	ldr	r0, [pc, #448]	; (168bc <ull_conn_rx+0xed8>)
   166fc:	f7f8 feb4 	bl	f468 <mem_acquire>
		if (!tx) {
   16700:	4603      	mov	r3, r0
   16702:	2800      	cmp	r0, #0
   16704:	f000 80b9 	beq.w	1687a <ull_conn_rx+0xe96>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16708:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
   1670c:	f894 219d 	ldrb.w	r2, [r4, #413]	; 0x19d
	eff_rx_octets = conn->lll.max_rx_octets;
   16710:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
	eff_tx_octets = conn->lll.max_tx_octets;
   16714:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	eff_rx_time = conn->lll.max_rx_time;
   16718:	f8b4 a066 	ldrh.w	sl, [r4, #102]	; 0x66
	eff_tx_time = conn->lll.max_tx_time;
   1671c:	f8b4 b064 	ldrh.w	fp, [r4, #100]	; 0x64
	eff_rx_octets = conn->lll.max_rx_octets;
   16720:	9002      	str	r0, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   16722:	4291      	cmp	r1, r2
   16724:	f040 8552 	bne.w	171cc <ull_conn_rx+0x17e8>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   16728:	8c2a      	ldrh	r2, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1672a:	2a1a      	cmp	r2, #26
   1672c:	f240 82e1 	bls.w	16cf2 <ull_conn_rx+0x130e>
			eff_tx_octets = MIN(max_rx_octets,
   16730:	f8b4 c0da 	ldrh.w	ip, [r4, #218]	; 0xda
   16734:	4594      	cmp	ip, r2
   16736:	bf28      	it	cs
   16738:	4694      	movcs	ip, r2
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1673a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	if (!conn->common.fex_valid ||
   1673c:	f894 80e0 	ldrb.w	r8, [r4, #224]	; 0xe0
			eff_rx_octets = MIN(max_tx_octets,
   16740:	f8dd e008 	ldr.w	lr, [sp, #8]
   16744:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   16748:	2a1b      	cmp	r2, #27
   1674a:	bf28      	it	cs
   1674c:	f04f 0e1b 	movcs.w	lr, #27
	if (!conn->common.fex_valid ||
   16750:	f018 0f01 	tst.w	r8, #1
   16754:	f8b4 20dc 	ldrh.w	r2, [r4, #220]	; 0xdc
   16758:	f000 82c3 	beq.w	16ce2 <ull_conn_rx+0x12fe>
   1675c:	f410 6f00 	tst.w	r0, #2048	; 0x800
   16760:	f000 83b5 	beq.w	16ece <ull_conn_rx+0x14ea>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   16764:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
   16768:	bf28      	it	cs
   1676a:	f44f 6229 	movcs.w	r2, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   1676e:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   16772:	f44f 6029 	mov.w	r0, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   16776:	bf38      	it	cc
   16778:	f44f 72a4 	movcc.w	r2, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   1677c:	9001      	str	r0, [sp, #4]
		lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   1677e:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   16782:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   16784:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
   16788:	f0c0 82b1 	bcc.w	16cee <ull_conn_rx+0x130a>
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1678c:	4590      	cmp	r8, r2
   1678e:	bf28      	it	cs
   16790:	4690      	movcs	r8, r2
			eff_tx_time = MAX(eff_tx_time,
   16792:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   16796:	f8cd 800c 	str.w	r8, [sp, #12]
			eff_tx_time = MAX(eff_tx_time,
   1679a:	f002 0807 	and.w	r8, r2, #7
   1679e:	0752      	lsls	r2, r2, #29
   167a0:	f100 8392 	bmi.w	16ec8 <ull_conn_rx+0x14e4>
   167a4:	f108 0228 	add.w	r2, r8, #40	; 0x28
   167a8:	00d2      	lsls	r2, r2, #3
   167aa:	ea4f 0868 	mov.w	r8, r8, asr #1
   167ae:	fa22 f808 	lsr.w	r8, r2, r8
   167b2:	9a03      	ldr	r2, [sp, #12]
   167b4:	4542      	cmp	r2, r8
   167b6:	bf38      	it	cc
   167b8:	4642      	movcc	r2, r8
   167ba:	b292      	uxth	r2, r2
		if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   167bc:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   167c0:	4680      	mov	r8, r0
   167c2:	f0c0 8292 	bcc.w	16cea <ull_conn_rx+0x1306>
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   167c6:	9801      	ldr	r0, [sp, #4]
   167c8:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   167cc:	bf38      	it	cc
   167ce:	f44f 70a4 	movcc.w	r0, #328	; 0x148
   167d2:	4580      	cmp	r8, r0
   167d4:	bf28      	it	cs
   167d6:	4680      	movcs	r8, r0
			eff_rx_time = MAX(eff_rx_time,
   167d8:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   167dc:	f8cd 8004 	str.w	r8, [sp, #4]
			eff_rx_time = MAX(eff_rx_time,
   167e0:	f000 0807 	and.w	r8, r0, #7
   167e4:	0740      	lsls	r0, r0, #29
   167e6:	f100 837a 	bmi.w	16ede <ull_conn_rx+0x14fa>
   167ea:	f108 0028 	add.w	r0, r8, #40	; 0x28
   167ee:	00c0      	lsls	r0, r0, #3
   167f0:	ea4f 0868 	mov.w	r8, r8, asr #1
   167f4:	fa20 f808 	lsr.w	r8, r0, r8
   167f8:	9801      	ldr	r0, [sp, #4]
   167fa:	4540      	cmp	r0, r8
   167fc:	bf38      	it	cc
   167fe:	4640      	movcc	r0, r8
   16800:	b280      	uxth	r0, r0
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   16802:	f8dd 8008 	ldr.w	r8, [sp, #8]
   16806:	45c6      	cmp	lr, r8
   16808:	f000 82ef 	beq.w	16dea <ull_conn_rx+0x1406>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1680c:	3901      	subs	r1, #1
   1680e:	f884 119d 	strb.w	r1, [r4, #413]	; 0x19d
			conn->llcp_length.rx_octets = eff_rx_octets;
   16812:	f8a4 e1a0 	strh.w	lr, [r4, #416]	; 0x1a0
			conn->llcp_length.tx_octets = eff_tx_octets;
   16816:	f8a4 c1a2 	strh.w	ip, [r4, #418]	; 0x1a2
			conn->llcp_length.rx_time = eff_rx_time;
   1681a:	f8a4 01a4 	strh.w	r0, [r4, #420]	; 0x1a4
			conn->llcp_length.tx_time = eff_tx_time;
   1681e:	f8a4 21a6 	strh.w	r2, [r4, #422]	; 0x1a6
			if (tx) {
   16822:	2b00      	cmp	r3, #0
   16824:	f000 8365 	beq.w	16ef2 <ull_conn_rx+0x150e>
				conn->llcp_length.state =
   16828:	f894 119e 	ldrb.w	r1, [r4, #414]	; 0x19e
   1682c:	2505      	movs	r5, #5
   1682e:	f365 0102 	bfi	r1, r5, #0, #3
   16832:	f884 119e 	strb.w	r1, [r4, #414]	; 0x19e
			link->mem = conn->llcp_rx;
   16836:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1683a:	6071      	str	r1, [r6, #4]
			(*rx)->hdr.link = link;
   1683c:	6839      	ldr	r1, [r7, #0]
   1683e:	600e      	str	r6, [r1, #0]
			conn->llcp_rx = *rx;
   16840:	6839      	ldr	r1, [r7, #0]
   16842:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
			*rx = NULL;
   16846:	2100      	movs	r1, #0
   16848:	6039      	str	r1, [r7, #0]
	if (tx) {
   1684a:	2b00      	cmp	r3, #0
   1684c:	f43f a919 	beq.w	15a82 <ull_conn_rx+0x9e>
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16850:	81da      	strh	r2, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16852:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16854:	8158      	strh	r0, [r3, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16856:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   1685a:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1685c:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1685e:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16860:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   16862:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   16866:	f8a3 c00c 	strh.w	ip, [r3, #12]
	ctrl_tx_sec_enqueue(conn, tx);
   1686a:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1686c:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1686e:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16870:	f7fe fb52 	bl	14f18 <ctrl_tx_sec_enqueue>
	return 0;
   16874:	2000      	movs	r0, #0
}
   16876:	f7ff b905 	b.w	15a84 <ull_conn_rx+0xa0>
			return -ENOBUFS;
   1687a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1687e:	f7ff b901 	b.w	15a84 <ull_conn_rx+0xa0>
			    conn->llcp_conn_param.ack) ||
   16882:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
		} else if ((conn->llcp_conn_param.req ==
   16886:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
   1688a:	4282      	cmp	r2, r0
   1688c:	f000 810b 	beq.w	16aa6 <ull_conn_rx+0x10c2>
			    conn->llcp_conn_param.ack) ||
   16890:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   16894:	0797      	lsls	r7, r2, #30
   16896:	f000 8106 	beq.w	16aa6 <ull_conn_rx+0x10c2>
			LL_ASSERT(0);
   1689a:	4a09      	ldr	r2, [pc, #36]	; (168c0 <ull_conn_rx+0xedc>)
   1689c:	4909      	ldr	r1, [pc, #36]	; (168c4 <ull_conn_rx+0xee0>)
   1689e:	480a      	ldr	r0, [pc, #40]	; (168c8 <ull_conn_rx+0xee4>)
   168a0:	f241 6366 	movw	r3, #5734	; 0x1666
   168a4:	f00a f89b 	bl	209de <printk>
   168a8:	4040      	eors	r0, r0
   168aa:	f380 8811 	msr	BASEPRI, r0
   168ae:	f04f 0003 	mov.w	r0, #3
   168b2:	df02      	svc	2
	int nack = 0;
   168b4:	2000      	movs	r0, #0
   168b6:	f7ff b8e5 	b.w	15a84 <ull_conn_rx+0xa0>
   168ba:	bf00      	nop
   168bc:	20002a78 	.word	0x20002a78
   168c0:	000277f0 	.word	0x000277f0
   168c4:	00027358 	.word	0x00027358
   168c8:	000272c0 	.word	0x000272c0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   168cc:	48ca      	ldr	r0, [pc, #808]	; (16bf8 <ull_conn_rx+0x1214>)
   168ce:	f7f8 fdcb 	bl	f468 <mem_acquire>
	if (!tx) {
   168d2:	4602      	mov	r2, r0
   168d4:	2800      	cmp	r0, #0
   168d6:	d0d0      	beq.n	1687a <ull_conn_rx+0xe96>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   168d8:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
   168dc:	2102      	movs	r1, #2
   168de:	f361 0301 	bfi	r3, r1, #0, #2
   168e2:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
	if (conn->llcp_phy.ack ==
   168e6:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   168ea:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   168ee:	428b      	cmp	r3, r1
   168f0:	d118      	bne.n	16924 <ull_conn_rx+0xf40>
		conn->llcp_phy.ack--;
   168f2:	3b01      	subs	r3, #1
			conn->phy_pref_rx;
   168f4:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
		conn->llcp_phy.ack--;
   168f8:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
		conn->llcp_phy.tx =
   168fc:	f8b4 31ae 	ldrh.w	r3, [r4, #430]	; 0x1ae
   16900:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   16904:	f000 0307 	and.w	r3, r0, #7
   16908:	009b      	lsls	r3, r3, #2
   1690a:	f3c0 1002 	ubfx	r0, r0, #4, #3
   1690e:	f021 0104 	bic.w	r1, r1, #4
   16912:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   16916:	430b      	orrs	r3, r1
		conn->procedure_expire =
   16918:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
		conn->llcp_phy.tx =
   1691c:	f8a4 31ae 	strh.w	r3, [r4, #430]	; 0x1ae
		conn->procedure_expire =
   16920:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
	conn->llcp_phy.rx &= p->tx_phys;
   16924:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
   16928:	f895 3020 	ldrb.w	r3, [r5, #32]
   1692c:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   16930:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   16934:	f3c1 0682 	ubfx	r6, r1, #2, #3
   16938:	4033      	ands	r3, r6
   1693a:	009b      	lsls	r3, r3, #2
   1693c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   16940:	f001 0103 	and.w	r1, r1, #3
   16944:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16946:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   16948:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1694c:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1694e:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16952:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16954:	4603      	mov	r3, r0
   16956:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1695a:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   1695c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16960:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16964:	2617      	movs	r6, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16966:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1696a:	71d6      	strb	r6, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1696c:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1696e:	7111      	strb	r1, [r2, #4]
	if (
   16970:	2b00      	cmp	r3, #0
   16972:	f000 8127 	beq.w	16bc4 <ull_conn_rx+0x11e0>
	    !conn->llcp_enc.pause_tx &&
   16976:	f894 1156 	ldrb.w	r1, [r4, #342]	; 0x156
	    conn->tx_head &&
   1697a:	0788      	lsls	r0, r1, #30
   1697c:	f100 8122 	bmi.w	16bc4 <ull_conn_rx+0x11e0>
	    !conn->llcp_phy.pause_tx &&
   16980:	f894 11af 	ldrb.w	r1, [r4, #431]	; 0x1af
   16984:	07c9      	lsls	r1, r1, #31
   16986:	f100 811d 	bmi.w	16bc4 <ull_conn_rx+0x11e0>
		if (conn->tx_head == conn->tx_data) {
   1698a:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   1698e:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   16990:	bf04      	itt	eq
   16992:	6819      	ldreq	r1, [r3, #0]
   16994:	f8c4 11c0 	streq.w	r1, [r4, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
   16998:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
   1699c:	2900      	cmp	r1, #0
   1699e:	f000 8387 	beq.w	170b0 <ull_conn_rx+0x16cc>
	tx->next = conn->tx_ctrl_last->next;
   169a2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   169a6:	6819      	ldr	r1, [r3, #0]
   169a8:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   169aa:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   169ac:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	if (!tx->next) {
   169b0:	6813      	ldr	r3, [r2, #0]
   169b2:	2b00      	cmp	r3, #0
   169b4:	f47f a863 	bne.w	15a7e <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   169b8:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   169bc:	f7ff b85f 	b.w	15a7e <ull_conn_rx+0x9a>
			conn->llcp_conn_param.disabled = 1U;
   169c0:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   169c4:	f042 0210 	orr.w	r2, r2, #16
   169c8:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
			if (!conn->lll.role) {
   169cc:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   169d0:	2a00      	cmp	r2, #0
   169d2:	f2c0 8230 	blt.w	16e36 <ull_conn_rx+0x1452>
				LL_ASSERT(conn->llcp_cu.req ==
   169d6:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   169da:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
   169de:	429a      	cmp	r2, r3
   169e0:	d00e      	beq.n	16a00 <ull_conn_rx+0x101c>
   169e2:	4a86      	ldr	r2, [pc, #536]	; (16bfc <ull_conn_rx+0x1218>)
   169e4:	4986      	ldr	r1, [pc, #536]	; (16c00 <ull_conn_rx+0x121c>)
   169e6:	4887      	ldr	r0, [pc, #540]	; (16c04 <ull_conn_rx+0x1220>)
   169e8:	f241 63ea 	movw	r3, #5866	; 0x16ea
   169ec:	f009 fff7 	bl	209de <printk>
   169f0:	4040      	eors	r0, r0
   169f2:	f380 8811 	msr	BASEPRI, r0
   169f6:	f04f 0003 	mov.w	r0, #3
   169fa:	df02      	svc	2
   169fc:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
				conn->llcp_conn_param.state =
   16a00:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
				conn->llcp_cu.interval =
   16a04:	f8b4 617a 	ldrh.w	r6, [r4, #378]	; 0x17a
				conn->llcp_conn_param.state =
   16a08:	2205      	movs	r2, #5
   16a0a:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_cu.ack--;
   16a0e:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   16a10:	2201      	movs	r2, #1
				conn->llcp_cu.ack--;
   16a12:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
				conn->llcp_cu.win_size = 1U;
   16a16:	f884 2118 	strb.w	r2, [r4, #280]	; 0x118
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a1a:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16a1e:	683d      	ldr	r5, [r7, #0]
				conn->llcp_cu.interval =
   16a20:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   16a24:	f3c1 02c0 	ubfx	r2, r1, #3, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a28:	0092      	lsls	r2, r2, #2
   16a2a:	f023 0307 	bic.w	r3, r3, #7
   16a2e:	f042 0201 	orr.w	r2, r2, #1
   16a32:	431a      	orrs	r2, r3
				conn->llcp_cu.latency =
   16a34:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   16a38:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a3c:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
				conn->llcp_cu.timeout =
   16a40:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
				conn->llcp_conn_param.state =
   16a44:	f884 1176 	strb.w	r1, [r4, #374]	; 0x176
				conn->llcp_cu.win_offset_us = 0U;
   16a48:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16a4a:	2203      	movs	r2, #3
				conn->llcp_cu.win_offset_us = 0U;
   16a4c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
				conn->llcp_cu.timeout =
   16a50:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16a54:	712a      	strb	r2, [r5, #4]
				break;
   16a56:	f7ff b815 	b.w	15a84 <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16a5a:	4867      	ldr	r0, [pc, #412]	; (16bf8 <ull_conn_rx+0x1214>)
   16a5c:	f7f8 fd04 	bl	f468 <mem_acquire>
		if (!tx) {
   16a60:	4601      	mov	r1, r0
   16a62:	2800      	cmp	r0, #0
   16a64:	f43f af09 	beq.w	1687a <ull_conn_rx+0xe96>
		conn->llcp_version.tx = 1U;
   16a68:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
   16a6c:	f043 0301 	orr.w	r3, r3, #1
   16a70:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16a74:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16a76:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16a78:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   16a7a:	220b      	movs	r2, #11
   16a7c:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16a7e:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16a82:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16a86:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16a88:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   16a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16a8e:	2205      	movs	r2, #5
		v->sub_version_number =
   16a90:	72c3      	strb	r3, [r0, #11]
   16a92:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   16a94:	7146      	strb	r6, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16a96:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   16a98:	4620      	mov	r0, r4
   16a9a:	f7fe fa3d 	bl	14f18 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16a9e:	2303      	movs	r3, #3
   16aa0:	712b      	strb	r3, [r5, #4]
   16aa2:	f7ff ba9b 	b.w	15fdc <ull_conn_rx+0x5f8>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16aa6:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   16aaa:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < 6) ||
   16aae:	2a05      	cmp	r2, #5
   16ab0:	d97d      	bls.n	16bae <ull_conn_rx+0x11ca>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16ab2:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   16ab6:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < 6) ||
   16aba:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   16abe:	d876      	bhi.n	16bae <ull_conn_rx+0x11ca>
			    (interval_max > 3200) ||
   16ac0:	428a      	cmp	r2, r1
   16ac2:	d874      	bhi.n	16bae <ull_conn_rx+0x11ca>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16ac4:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   16ac8:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   16acc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   16ad0:	d26d      	bcs.n	16bae <ull_conn_rx+0x11ca>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16ad2:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   16ad6:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   16ada:	f1a2 070a 	sub.w	r7, r2, #10
   16ade:	f640 4b76 	movw	fp, #3190	; 0xc76
   16ae2:	b2bf      	uxth	r7, r7
   16ae4:	455f      	cmp	r7, fp
   16ae6:	d862      	bhi.n	16bae <ull_conn_rx+0x11ca>
			     ((latency + 1) * interval_max)) ||
   16ae8:	f10c 0701 	add.w	r7, ip, #1
   16aec:	b2bf      	uxth	r7, r7
   16aee:	fb01 f707 	mul.w	r7, r1, r7
			    (timeout < 10) || (timeout > 3200) ||
   16af2:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   16af6:	d25a      	bcs.n	16bae <ull_conn_rx+0x11ca>
			     ((latency + 1) * interval_max)) ||
   16af8:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   16afc:	4559      	cmp	r1, fp
   16afe:	d356      	bcc.n	16bae <ull_conn_rx+0x11ca>
			conn->llcp_conn_param.interval_min = interval_min;
   16b00:	f8a4 a178 	strh.w	sl, [r4, #376]	; 0x178
			conn->llcp_conn_param.interval_max = interval_max;
   16b04:	f8a4 917a 	strh.w	r9, [r4, #378]	; 0x17a
			conn->llcp_conn_param.latency =	latency;
   16b08:	f8a4 817c 	strh.w	r8, [r4, #380]	; 0x17c
			conn->llcp_conn_param.timeout =	timeout;
   16b0c:	f8a4 e17e 	strh.w	lr, [r4, #382]	; 0x17e
			conn->llcp_conn_param.preferred_periodicity =
   16b10:	f884 b180 	strb.w	fp, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16b14:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   16b18:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   16b1c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   16b20:	f8a4 7182 	strh.w	r7, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset0);
   16b24:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   16b28:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   16b2c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   16b30:	f8a4 7184 	strh.w	r7, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset1);
   16b34:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   16b38:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   16b3c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   16b40:	f8a4 7186 	strh.w	r7, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset2);
   16b44:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   16b48:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   16b4c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   16b50:	f8a4 7188 	strh.w	r7, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset3);
   16b54:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   16b58:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   16b5c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   16b60:	f8a4 718a 	strh.w	r7, [r4, #394]	; 0x18a
				sys_le16_to_cpu(cpr->offset4);
   16b64:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   16b68:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   16b6c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   16b70:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
				sys_le16_to_cpu(cpr->offset5);
   16b74:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   16b78:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   16b7c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   16b80:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
			     lll->interval) ||
   16b84:	8de7      	ldrh	r7, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   16b86:	42b9      	cmp	r1, r7
   16b88:	f000 8300 	beq.w	1718c <ull_conn_rx+0x17a8>
				conn->llcp_conn_param.state =
   16b8c:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   16b90:	2103      	movs	r1, #3
   16b92:	f361 0202 	bfi	r2, r1, #0, #3
   16b96:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
			conn->llcp_conn_param.ack--;
   16b9a:	3801      	subs	r0, #1
   16b9c:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
			if (!conn_upd_curr) {
   16ba0:	2b00      	cmp	r3, #0
   16ba2:	f47e af6e 	bne.w	15a82 <ull_conn_rx+0x9e>
				conn_upd_curr = conn;
   16ba6:	6034      	str	r4, [r6, #0]
	int nack = 0;
   16ba8:	4618      	mov	r0, r3
   16baa:	f7fe bf6b 	b.w	15a84 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   16bae:	231e      	movs	r3, #30
   16bb0:	220f      	movs	r2, #15
   16bb2:	f7ff b8e5 	b.w	15d80 <ull_conn_rx+0x39c>
				      0x03) == 0x02) &&
   16bb6:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   16bba:	2b03      	cmp	r3, #3
   16bbc:	f47f a8de 	bne.w	15d7c <ull_conn_rx+0x398>
   16bc0:	f7ff b8d5 	b.w	15d6e <ull_conn_rx+0x38a>
		if (!conn->tx_ctrl) {
   16bc4:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
   16bc8:	2900      	cmp	r1, #0
   16bca:	f47f aeea 	bne.w	169a2 <ull_conn_rx+0xfbe>
			tx->next = conn->tx_head;
   16bce:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   16bd0:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
   16bd4:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
   16bd8:	e6ea      	b.n	169b0 <ull_conn_rx+0xfcc>
			conn->llcp_length.disabled = 1U;
   16bda:	f894 219e 	ldrb.w	r2, [r4, #414]	; 0x19e
			conn->llcp_length.ack = conn->llcp_length.req;
   16bde:	f884 319d 	strb.w	r3, [r4, #413]	; 0x19d
			conn->llcp_length.disabled = 1U;
   16be2:	f042 0308 	orr.w	r3, r2, #8
   16be6:	f884 319e 	strb.w	r3, [r4, #414]	; 0x19e
			conn->llcp_length.ack = conn->llcp_length.req;
   16bea:	f7fe bff7 	b.w	15bdc <ull_conn_rx+0x1f8>
				nack = reject_ext_ind_send(conn, *rx,
   16bee:	2323      	movs	r3, #35	; 0x23
   16bf0:	220f      	movs	r2, #15
   16bf2:	f7ff b8c5 	b.w	15d80 <ull_conn_rx+0x39c>
   16bf6:	bf00      	nop
   16bf8:	20002a78 	.word	0x20002a78
   16bfc:	000277f0 	.word	0x000277f0
   16c00:	00027924 	.word	0x00027924
   16c04:	000272c0 	.word	0x000272c0
	instant = sys_le16_to_cpu(ind->instant);
   16c08:	8c68      	ldrh	r0, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16c0a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   16c0c:	1a82      	subs	r2, r0, r2
   16c0e:	0412      	lsls	r2, r2, #16
   16c10:	f100 80bf 	bmi.w	16d92 <ull_conn_rx+0x13ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16c14:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   16c18:	f894 c0ed 	ldrb.w	ip, [r4, #237]	; 0xed
   16c1c:	eba2 020c 	sub.w	r2, r2, ip
   16c20:	f002 0203 	and.w	r2, r2, #3
   16c24:	2a02      	cmp	r2, #2
   16c26:	f000 813a 	beq.w	16e9e <ull_conn_rx+0x14ba>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16c2a:	f894 51ac 	ldrb.w	r5, [r4, #428]	; 0x1ac
   16c2e:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   16c32:	42aa      	cmp	r2, r5
   16c34:	d018      	beq.n	16c68 <ull_conn_rx+0x1284>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   16c36:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16c3a:	f002 0203 	and.w	r2, r2, #3
   16c3e:	2a02      	cmp	r2, #2
   16c40:	d112      	bne.n	16c68 <ull_conn_rx+0x1284>
		conn->llcp_phy.pause_tx = 0U;
   16c42:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16c46:	f884 51ad 	strb.w	r5, [r4, #429]	; 0x1ad
		conn->llcp_phy.pause_tx = 0U;
   16c4a:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c4e:	f894 50f0 	ldrb.w	r5, [r4, #240]	; 0xf0
		conn->llcp_phy.pause_tx = 0U;
   16c52:	f884 21af 	strb.w	r2, [r4, #431]	; 0x1af
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c56:	f3c2 0280 	ubfx	r2, r2, #2, #1
   16c5a:	f362 0541 	bfi	r5, r2, #1, #1
		conn->procedure_expire = 0U;
   16c5e:	2200      	movs	r2, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c60:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
		conn->procedure_expire = 0U;
   16c64:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
	conn->llcp.phy_upd_ind.initiate = 0U;
   16c68:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
	conn->llcp.phy_upd_ind.instant = instant;
   16c6c:	f8a4 00f2 	strh.w	r0, [r4, #242]	; 0xf2
	conn->llcp.phy_upd_ind.initiate = 0U;
   16c70:	009b      	lsls	r3, r3, #2
   16c72:	f003 031c 	and.w	r3, r3, #28
   16c76:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16c7a:	f002 0202 	and.w	r2, r2, #2
   16c7e:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   16c80:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	conn->llcp.phy_upd_ind.initiate = 0U;
   16c84:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	link->mem = conn->llcp_rx;
   16c88:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   16c8a:	683a      	ldr	r2, [r7, #0]
   16c8c:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   16c8e:	683a      	ldr	r2, [r7, #0]
   16c90:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
	*rx = NULL;
   16c94:	2300      	movs	r3, #0
   16c96:	603b      	str	r3, [r7, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   16c98:	f7fc ff46 	bl	13b28 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   16c9c:	4605      	mov	r5, r0
   16c9e:	2800      	cmp	r0, #0
   16ca0:	f000 81ef 	beq.w	17082 <ull_conn_rx+0x169e>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   16ca4:	682b      	ldr	r3, [r5, #0]
   16ca6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   16caa:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   16cac:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
	if (conn->llcp.phy_upd_ind.tx) {
   16cb0:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
	conn->llcp_rx = rx_dle;
   16cb4:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	conn->llcp_type = LLCP_PHY_UPD;
   16cb8:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   16cba:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   16cbc:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   16cc0:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
	conn->llcp_ack -= 2U;
   16cc4:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (conn->llcp.phy_upd_ind.tx) {
   16cc8:	f43e aedb 	beq.w	15a82 <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16ccc:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   16cd0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16cd4:	f363 1206 	bfi	r2, r3, #4, #3
   16cd8:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
	int nack = 0;
   16cdc:	2000      	movs	r0, #0
   16cde:	f7fe bed1 	b.w	15a84 <ull_conn_rx+0xa0>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   16ce2:	f44f 72a4 	mov.w	r2, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   16ce6:	9201      	str	r2, [sp, #4]
   16ce8:	e549      	b.n	1677e <ull_conn_rx+0xd9a>
   16cea:	4650      	mov	r0, sl
   16cec:	e589      	b.n	16802 <ull_conn_rx+0xe1e>
   16cee:	465a      	mov	r2, fp
   16cf0:	e564      	b.n	167bc <ull_conn_rx+0xdd8>
   16cf2:	46cc      	mov	ip, r9
   16cf4:	e521      	b.n	1673a <ull_conn_rx+0xd56>
				nack = reject_ext_ind_send(conn, *rx,
   16cf6:	231e      	movs	r3, #30
   16cf8:	2210      	movs	r2, #16
   16cfa:	f7ff b841 	b.w	15d80 <ull_conn_rx+0x39c>
				nack = reject_ext_ind_send(conn, *rx,
   16cfe:	2323      	movs	r3, #35	; 0x23
   16d00:	f7ff b83d 	b.w	15d7e <ull_conn_rx+0x39a>
				conn->llcp_phy.state =
   16d04:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
				if (conn->llcp_phy.ack ==
   16d08:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
   16d0a:	f043 0303 	orr.w	r3, r3, #3
   16d0e:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
				if (conn->llcp_phy.ack ==
   16d12:	d114      	bne.n	16d3e <ull_conn_rx+0x135a>
						conn->phy_pref_rx;
   16d14:	f894 31b0 	ldrb.w	r3, [r4, #432]	; 0x1b0
					conn->llcp_phy.tx =
   16d18:	f3c3 1102 	ubfx	r1, r3, #4, #3
   16d1c:	f003 0307 	and.w	r3, r3, #7
   16d20:	009b      	lsls	r3, r3, #2
   16d22:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16d26:	f8b4 11ae 	ldrh.w	r1, [r4, #430]	; 0x1ae
					conn->llcp_phy.ack--;
   16d2a:	3a01      	subs	r2, #1
   16d2c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
					conn->llcp_phy.tx =
   16d30:	f421 629f 	bic.w	r2, r1, #1272	; 0x4f8
   16d34:	f022 0204 	bic.w	r2, r2, #4
   16d38:	4313      	orrs	r3, r2
   16d3a:	f8a4 31ae 	strh.w	r3, [r4, #430]	; 0x1ae
				conn->llcp_phy.rx &= p->tx_phys;
   16d3e:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
   16d42:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   16d46:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   16d4a:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   16d4e:	f003 0203 	and.w	r2, r3, #3
   16d52:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   16d56:	4003      	ands	r3, r0
   16d58:	009b      	lsls	r3, r3, #2
   16d5a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16d5e:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16d60:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   16d64:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16d68:	d002      	beq.n	16d70 <ull_conn_rx+0x138c>
   16d6a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   16d6e:	d105      	bne.n	16d7c <ull_conn_rx+0x1398>
					conn->llcp_phy.tx = 0;
   16d70:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
   16d74:	f003 0303 	and.w	r3, r3, #3
   16d78:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
				conn->llcp_phy.pause_tx = 1U;
   16d7c:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16d80:	2203      	movs	r2, #3
				conn->llcp_phy.pause_tx = 1U;
   16d82:	f043 0301 	orr.w	r3, r3, #1
   16d86:	f884 31af 	strb.w	r3, [r4, #431]	; 0x1af
	int nack = 0;
   16d8a:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16d8c:	712a      	strb	r2, [r5, #4]
   16d8e:	f7fe be79 	b.w	15a84 <ull_conn_rx+0xa0>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16d92:	2303      	movs	r3, #3
   16d94:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   16d96:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   16d98:	f884 3133 	strb.w	r3, [r4, #307]	; 0x133
	int nack = 0;
   16d9c:	2000      	movs	r0, #0
   16d9e:	f7fe be71 	b.w	15a84 <ull_conn_rx+0xa0>
			lll->phy_tx_time = lll->phy_tx;
   16da2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
			conn->llcp_phy.pause_tx = 0U;
   16da6:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
			conn->llcp_phy.ack = conn->llcp_phy.req;
   16daa:	f884 11ad 	strb.w	r1, [r4, #429]	; 0x1ad
			conn->llcp_phy.pause_tx = 0U;
   16dae:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   16db2:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   16db4:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   16db8:	f362 1106 	bfi	r1, r2, #4, #3
   16dbc:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
			if (conn->llcp_phy.cmd) {
   16dc0:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   16dc4:	f884 31af 	strb.w	r3, [r4, #431]	; 0x1af
			lll->phy_tx_time = lll->phy_tx;
   16dc8:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16dcc:	683b      	ldr	r3, [r7, #0]
			if (conn->llcp_phy.cmd) {
   16dce:	f000 808c 	beq.w	16eea <ull_conn_rx+0x1506>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16dd2:	2110      	movs	r1, #16
   16dd4:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   16dd6:	2300      	movs	r3, #0
   16dd8:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   16dda:	776a      	strb	r2, [r5, #29]
				p->rx = lll->phy_rx;
   16ddc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
   16de0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16de4:	77ab      	strb	r3, [r5, #30]
   16de6:	f7fe bef9 	b.w	15bdc <ull_conn_rx+0x1f8>
			conn->procedure_expire = 0U;
   16dea:	2600      	movs	r6, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16dec:	45cc      	cmp	ip, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   16dee:	f884 119d 	strb.w	r1, [r4, #413]	; 0x19d
			conn->procedure_expire = 0U;
   16df2:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16df6:	f000 8123 	beq.w	17040 <ull_conn_rx+0x165c>
			conn->lll.max_rx_time = eff_rx_time;
   16dfa:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
			if (tx) {
   16dfe:	2b00      	cmp	r3, #0
   16e00:	f000 8119 	beq.w	17036 <ull_conn_rx+0x1652>
					(conn->llcp_length.req - 1);
   16e04:	3901      	subs	r1, #1
				conn->llcp_length.ack =
   16e06:	f884 119d 	strb.w	r1, [r4, #413]	; 0x19d
				conn->llcp_length.state =
   16e0a:	f894 119e 	ldrb.w	r1, [r4, #414]	; 0x19e
				conn->llcp_length.rx_octets = eff_rx_octets;
   16e0e:	f8a4 e1a0 	strh.w	lr, [r4, #416]	; 0x1a0
				conn->llcp_length.state =
   16e12:	2603      	movs	r6, #3
   16e14:	f366 0102 	bfi	r1, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   16e18:	f8a4 c1a2 	strh.w	ip, [r4, #418]	; 0x1a2
				conn->llcp_length.rx_time = eff_rx_time;
   16e1c:	f8a4 01a4 	strh.w	r0, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time = eff_tx_time;
   16e20:	f8a4 21a6 	strh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state =
   16e24:	f884 119e 	strb.w	r1, [r4, #414]	; 0x19e
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   16e28:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   16e2c:	f8a5 c024 	strh.w	ip, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16e30:	8468      	strh	r0, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16e32:	84ea      	strh	r2, [r5, #38]	; 0x26
   16e34:	e509      	b.n	1684a <ull_conn_rx+0xe66>
			LL_ASSERT(conn_upd_curr == conn);
   16e36:	4ecf      	ldr	r6, [pc, #828]	; (17174 <ull_conn_rx+0x1790>)
   16e38:	6832      	ldr	r2, [r6, #0]
   16e3a:	4294      	cmp	r4, r2
   16e3c:	d00e      	beq.n	16e5c <ull_conn_rx+0x1478>
   16e3e:	4ace      	ldr	r2, [pc, #824]	; (17178 <ull_conn_rx+0x1794>)
   16e40:	49ce      	ldr	r1, [pc, #824]	; (1717c <ull_conn_rx+0x1798>)
   16e42:	48cf      	ldr	r0, [pc, #828]	; (17180 <ull_conn_rx+0x179c>)
   16e44:	f241 7302 	movw	r3, #5890	; 0x1702
   16e48:	f009 fdc9 	bl	209de <printk>
   16e4c:	4040      	eors	r0, r0
   16e4e:	f380 8811 	msr	BASEPRI, r0
   16e52:	f04f 0003 	mov.w	r0, #3
   16e56:	df02      	svc	2
   16e58:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16e5c:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
			if (!conn->llcp_conn_param.cmd) {
   16e60:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	conn_upd_curr = NULL;
   16e64:	2200      	movs	r2, #0
			if (!conn->llcp_conn_param.cmd) {
   16e66:	f013 0308 	ands.w	r3, r3, #8
	conn_upd_curr = NULL;
   16e6a:	6032      	str	r2, [r6, #0]
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16e6c:	683a      	ldr	r2, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   16e6e:	f43f a88b 	beq.w	15f88 <ull_conn_rx+0x5a4>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16e72:	210c      	movs	r1, #12
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16e74:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16e76:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16e78:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   16e7a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   16e7c:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
			cu->latency = lll->latency;
   16e80:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   16e82:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   16e84:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   16e88:	227d      	movs	r2, #125	; 0x7d
   16e8a:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   16e8e:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   16e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16e94:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   16e98:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   16e9a:	f7fe be9f 	b.w	15bdc <ull_conn_rx+0x1f8>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16e9e:	2303      	movs	r3, #3
   16ea0:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   16ea2:	232a      	movs	r3, #42	; 0x2a
   16ea4:	e778      	b.n	16d98 <ull_conn_rx+0x13b4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16ea6:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   16eaa:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_ack -= 2U;
   16eae:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16eb0:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
				conn->llcp_type = LLCP_ENCRYPTION;
   16eb4:	2203      	movs	r2, #3
   16eb6:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
				conn->llcp_ack -= 2U;
   16eba:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
   16ebe:	f7fe be84 	b.w	15bca <ull_conn_rx+0x1e6>
		conn_upd_curr = conn;
   16ec2:	601c      	str	r4, [r3, #0]
   16ec4:	f7fe bfd9 	b.w	15e7a <ull_conn_rx+0x496>
			eff_tx_time = MAX(eff_tx_time,
   16ec8:	f44f 6829 	mov.w	r8, #2704	; 0xa90
   16ecc:	e471      	b.n	167b2 <ull_conn_rx+0xdce>
	    (!feature_coded_phy && !feature_phy_2m)) {
   16ece:	05c0      	lsls	r0, r0, #23
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   16ed0:	f44f 72a4 	mov.w	r2, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
   16ed4:	f140 80c6 	bpl.w	17064 <ull_conn_rx+0x1680>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
   16ed8:	20a8      	movs	r0, #168	; 0xa8
   16eda:	9001      	str	r0, [sp, #4]
   16edc:	e44f      	b.n	1677e <ull_conn_rx+0xd9a>
			eff_rx_time = MAX(eff_rx_time,
   16ede:	f44f 6829 	mov.w	r8, #2704	; 0xa90
   16ee2:	e489      	b.n	167f8 <ull_conn_rx+0xe14>
	struct node_tx *tx = NULL;
   16ee4:	2300      	movs	r3, #0
   16ee6:	f7fe bf0f 	b.w	15d08 <ull_conn_rx+0x324>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16eea:	2203      	movs	r2, #3
   16eec:	711a      	strb	r2, [r3, #4]
   16eee:	f7fe be75 	b.w	15bdc <ull_conn_rx+0x1f8>
				conn->llcp_length.state =
   16ef2:	f894 119e 	ldrb.w	r1, [r4, #414]	; 0x19e
				conn->lll.max_tx_octets = eff_tx_octets;
   16ef6:	f8a4 c060 	strh.w	ip, [r4, #96]	; 0x60
				conn->llcp_length.state =
   16efa:	2504      	movs	r5, #4
   16efc:	f365 0102 	bfi	r1, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   16f00:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
				conn->llcp_length.state =
   16f04:	f884 119e 	strb.w	r1, [r4, #414]	; 0x19e
   16f08:	e495      	b.n	16836 <ull_conn_rx+0xe52>
				      0x03) == 0x02) &&
   16f0a:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   16f0e:	2a03      	cmp	r2, #3
   16f10:	f47f abef 	bne.w	166f2 <ull_conn_rx+0xd0e>
   16f14:	f7ff bbe6 	b.w	166e4 <ull_conn_rx+0xd00>
				uint16_t interval_min =
   16f18:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   16f1c:	fa1f f289 	uxth.w	r2, r9
				if ((interval_min < 6) ||
   16f20:	2a05      	cmp	r2, #5
   16f22:	f67f ae44 	bls.w	16bae <ull_conn_rx+0x11ca>
				uint16_t interval_max =
   16f26:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   16f2a:	fa1f f188 	uxth.w	r1, r8
				if ((interval_min < 6) ||
   16f2e:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   16f32:	f63f ae3c 	bhi.w	16bae <ull_conn_rx+0x11ca>
				    (interval_max > 3200) ||
   16f36:	428a      	cmp	r2, r1
   16f38:	f63f ae39 	bhi.w	16bae <ull_conn_rx+0x11ca>
				uint16_t latency =
   16f3c:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   16f3e:	b2b8      	uxth	r0, r7
				    (interval_min > interval_max) ||
   16f40:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   16f44:	f4bf ae33 	bcs.w	16bae <ull_conn_rx+0x11ca>
				uint16_t timeout =
   16f48:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   16f4c:	fa1f f28e 	uxth.w	r2, lr
				    (latency > 499) ||
   16f50:	f1a2 0a0a 	sub.w	sl, r2, #10
   16f54:	f640 4b76 	movw	fp, #3190	; 0xc76
   16f58:	fa1f fa8a 	uxth.w	sl, sl
   16f5c:	45da      	cmp	sl, fp
   16f5e:	f63f ae26 	bhi.w	16bae <ull_conn_rx+0x11ca>
				     ((latency + 1) * interval_max)) ||
   16f62:	f100 0a01 	add.w	sl, r0, #1
   16f66:	fa1f fa8a 	uxth.w	sl, sl
   16f6a:	fb01 fa0a 	mul.w	sl, r1, sl
				    (timeout > 3200) ||
   16f6e:	ebba 0f82 	cmp.w	sl, r2, lsl #2
   16f72:	f4bf ae1c 	bcs.w	16bae <ull_conn_rx+0x11ca>
				     ((latency + 1) * interval_max)) ||
   16f76:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   16f7a:	4559      	cmp	r1, fp
   16f7c:	f4ff ae17 	bcc.w	16bae <ull_conn_rx+0x11ca>
				conn->llcp_conn_param.interval_min =
   16f80:	f8a4 9178 	strh.w	r9, [r4, #376]	; 0x178
				conn->llcp_conn_param.interval_max =
   16f84:	f8a4 817a 	strh.w	r8, [r4, #378]	; 0x17a
				conn->llcp_conn_param.latency =	latency;
   16f88:	f8a4 717c 	strh.w	r7, [r4, #380]	; 0x17c
				conn->llcp_conn_param.timeout =	timeout;
   16f8c:	f8a4 e17e 	strh.w	lr, [r4, #382]	; 0x17e
				conn->llcp_conn_param.preferred_periodicity =
   16f90:	f884 b180 	strb.w	fp, [r4, #384]	; 0x180
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   16f94:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   16f98:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   16f9c:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   16fa0:	f8a4 7182 	strh.w	r7, [r4, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset0);
   16fa4:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   16fa8:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   16fac:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   16fb0:	f8a4 7184 	strh.w	r7, [r4, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset1);
   16fb4:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   16fb8:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   16fbc:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   16fc0:	f8a4 7186 	strh.w	r7, [r4, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset2);
   16fc4:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   16fc8:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   16fcc:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   16fd0:	f8a4 7188 	strh.w	r7, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset3);
   16fd4:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   16fd8:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   16fdc:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   16fe0:	f8a4 718a 	strh.w	r7, [r4, #394]	; 0x18a
					sys_le16_to_cpu(cpr->offset4);
   16fe4:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   16fe8:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   16fec:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   16ff0:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
					sys_le16_to_cpu(cpr->offset5);
   16ff4:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   16ff8:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   16ffc:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
				conn->llcp_conn_param.offset5 =
   17000:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				     lll->interval) ||
   17004:	8de7      	ldrh	r7, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   17006:	42b9      	cmp	r1, r7
   17008:	f000 80ee 	beq.w	171e8 <ull_conn_rx+0x1804>
					if (conn->llcp_enc.pause_tx) {
   1700c:	f01c 0f02 	tst.w	ip, #2
						conn->llcp_conn_param.state =
   17010:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
					if (conn->llcp_enc.pause_tx) {
   17014:	f000 80e2 	beq.w	171dc <ull_conn_rx+0x17f8>
						conn->llcp_conn_param.state =
   17018:	2102      	movs	r1, #2
   1701a:	f361 0202 	bfi	r2, r1, #0, #3
   1701e:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17022:	2203      	movs	r2, #3
   17024:	712a      	strb	r2, [r5, #4]
				conn->llcp_conn_param.ack--;
   17026:	9a01      	ldr	r2, [sp, #4]
   17028:	3a01      	subs	r2, #1
   1702a:	f884 2175 	strb.w	r2, [r4, #373]	; 0x175
				if (!conn_upd_curr) {
   1702e:	2b00      	cmp	r3, #0
   17030:	f47e ad27 	bne.w	15a82 <ull_conn_rx+0x9e>
   17034:	e5b7      	b.n	16ba6 <ull_conn_rx+0x11c2>
				conn->lll.max_tx_octets = eff_tx_octets;
   17036:	f8a4 c060 	strh.w	ip, [r4, #96]	; 0x60
				conn->lll.max_tx_time = eff_tx_time;
   1703a:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
   1703e:	e6f3      	b.n	16e28 <ull_conn_rx+0x1444>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17040:	455a      	cmp	r2, fp
   17042:	f47f aeda 	bne.w	16dfa <ull_conn_rx+0x1416>
			    eff_rx_time == conn->lll.max_rx_time &&
   17046:	4550      	cmp	r0, sl
   17048:	f47f aed7 	bne.w	16dfa <ull_conn_rx+0x1416>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1704c:	6839      	ldr	r1, [r7, #0]
   1704e:	2503      	movs	r5, #3
   17050:	710d      	strb	r5, [r1, #4]
				goto send_length_resp;
   17052:	f7ff bbfa 	b.w	1684a <ull_conn_rx+0xe66>
			tx->next = conn->tx_head->next;
   17056:	6811      	ldr	r1, [r2, #0]
   17058:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1705a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1705c:	e9c4 006e 	strd	r0, r0, [r4, #440]	; 0x1b8
   17060:	f7ff b9be 	b.w	163e0 <ull_conn_rx+0x9fc>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   17064:	9201      	str	r2, [sp, #4]
   17066:	f7ff bb8a 	b.w	1677e <ull_conn_rx+0xd9a>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1706a:	683b      	ldr	r3, [r7, #0]
   1706c:	2110      	movs	r1, #16
   1706e:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   17070:	7728      	strb	r0, [r5, #28]
		p->tx = conn->lll.phy_tx;
   17072:	776a      	strb	r2, [r5, #29]
		p->rx = conn->lll.phy_rx;
   17074:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
   17078:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1707c:	77ab      	strb	r3, [r5, #30]
		if (err) {
   1707e:	f7fe bd01 	b.w	15a84 <ull_conn_rx+0xa0>
	LL_ASSERT(rx_dle);
   17082:	4a3d      	ldr	r2, [pc, #244]	; (17178 <ull_conn_rx+0x1794>)
   17084:	493f      	ldr	r1, [pc, #252]	; (17184 <ull_conn_rx+0x17a0>)
   17086:	483e      	ldr	r0, [pc, #248]	; (17180 <ull_conn_rx+0x179c>)
   17088:	f241 3325 	movw	r3, #4901	; 0x1325
   1708c:	f009 fca7 	bl	209de <printk>
   17090:	4040      	eors	r0, r0
   17092:	f380 8811 	msr	BASEPRI, r0
   17096:	f04f 0003 	mov.w	r0, #3
   1709a:	df02      	svc	2
   1709c:	e602      	b.n	16ca4 <ull_conn_rx+0x12c0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1709e:	2a23      	cmp	r2, #35	; 0x23
   170a0:	f43f aa83 	beq.w	165aa <ull_conn_rx+0xbc6>
			conn->slave.ticks_to_offset =
   170a4:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
   170a8:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
   170ac:	f7ff ba7d 	b.w	165aa <ull_conn_rx+0xbc6>
			tx->next = conn->tx_head->next;
   170b0:	6819      	ldr	r1, [r3, #0]
   170b2:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   170b4:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   170b6:	e9c4 226e 	strd	r2, r2, [r4, #440]	; 0x1b8
   170ba:	e479      	b.n	169b0 <ull_conn_rx+0xfcc>
		LL_ASSERT(conn_upd_curr == conn);
   170bc:	4e2d      	ldr	r6, [pc, #180]	; (17174 <ull_conn_rx+0x1790>)
   170be:	6831      	ldr	r1, [r6, #0]
   170c0:	428c      	cmp	r4, r1
   170c2:	d010      	beq.n	170e6 <ull_conn_rx+0x1702>
   170c4:	4a2c      	ldr	r2, [pc, #176]	; (17178 <ull_conn_rx+0x1794>)
   170c6:	492d      	ldr	r1, [pc, #180]	; (1717c <ull_conn_rx+0x1798>)
   170c8:	482d      	ldr	r0, [pc, #180]	; (17180 <ull_conn_rx+0x179c>)
   170ca:	f241 03ad 	movw	r3, #4269	; 0x10ad
   170ce:	f009 fc86 	bl	209de <printk>
   170d2:	4040      	eors	r0, r0
   170d4:	f380 8811 	msr	BASEPRI, r0
   170d8:	f04f 0003 	mov.w	r0, #3
   170dc:	df02      	svc	2
   170de:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   170e2:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   170e6:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
	conn_upd_curr = NULL;
   170ea:	2300      	movs	r3, #0
   170ec:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   170ee:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   170f2:	f7ff ba61 	b.w	165b8 <ull_conn_rx+0xbd4>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   170f6:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   170fa:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
   170fe:	429a      	cmp	r2, r3
   17100:	d00e      	beq.n	17120 <ull_conn_rx+0x173c>
   17102:	4a1d      	ldr	r2, [pc, #116]	; (17178 <ull_conn_rx+0x1794>)
   17104:	4920      	ldr	r1, [pc, #128]	; (17188 <ull_conn_rx+0x17a4>)
   17106:	481e      	ldr	r0, [pc, #120]	; (17180 <ull_conn_rx+0x179c>)
   17108:	f241 0392 	movw	r3, #4242	; 0x1092
   1710c:	f009 fc67 	bl	209de <printk>
   17110:	4040      	eors	r0, r0
   17112:	f380 8811 	msr	BASEPRI, r0
   17116:	f04f 0003 	mov.w	r0, #3
   1711a:	df02      	svc	2
   1711c:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17120:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   17124:	2105      	movs	r1, #5
   17126:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   1712a:	3b01      	subs	r3, #1
   1712c:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17130:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17134:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17138:	f894 210a 	ldrb.w	r2, [r4, #266]	; 0x10a
		conn->llcp_cu.win_size = 1U;
   1713c:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1713e:	009b      	lsls	r3, r3, #2
   17140:	430b      	orrs	r3, r1
   17142:	f022 0207 	bic.w	r2, r2, #7
   17146:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   17148:	f884 1118 	strb.w	r1, [r4, #280]	; 0x118
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1714c:	f8b4 217c 	ldrh.w	r2, [r4, #380]	; 0x17c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17150:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17154:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
		conn->llcp_cu.win_offset_us = 0U;
   17158:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1715a:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
		conn->llcp_cu.win_offset_us = 0U;
   1715e:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17162:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17166:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1716a:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
	if (err) {
   1716e:	f7fe bc86 	b.w	15a7e <ull_conn_rx+0x9a>
   17172:	bf00      	nop
   17174:	200029fc 	.word	0x200029fc
   17178:	000277f0 	.word	0x000277f0
   1717c:	0002794c 	.word	0x0002794c
   17180:	000272c0 	.word	0x000272c0
   17184:	00027964 	.word	0x00027964
   17188:	00027924 	.word	0x00027924
			     lll->interval) ||
   1718c:	8e27      	ldrh	r7, [r4, #48]	; 0x30
   1718e:	4567      	cmp	r7, ip
   17190:	f47f acfc 	bne.w	16b8c <ull_conn_rx+0x11a8>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17194:	f240 47e2 	movw	r7, #1250	; 0x4e2
   17198:	fb07 f101 	mul.w	r1, r7, r1
   1719c:	f242 7710 	movw	r7, #10000	; 0x2710
   171a0:	fb07 1202 	mla	r2, r7, r2, r1
   171a4:	3a01      	subs	r2, #1
   171a6:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   171aa:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
   171ae:	b292      	uxth	r2, r2
   171b0:	4291      	cmp	r1, r2
   171b2:	f47f aceb 	bne.w	16b8c <ull_conn_rx+0x11a8>
				conn->llcp_conn_param.state =
   171b6:	f8b4 2176 	ldrh.w	r2, [r4, #374]	; 0x176
   171ba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   171be:	f042 0201 	orr.w	r2, r2, #1
   171c2:	f8a4 2176 	strh.w	r2, [r4, #374]	; 0x176
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   171c6:	2203      	movs	r2, #3
   171c8:	712a      	strb	r2, [r5, #4]
   171ca:	e4e6      	b.n	16b9a <ull_conn_rx+0x11b6>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   171cc:	f894 219e 	ldrb.w	r2, [r4, #414]	; 0x19e
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   171d0:	f012 0f06 	tst.w	r2, #6
   171d4:	f43f aaa8 	beq.w	16728 <ull_conn_rx+0xd44>
   171d8:	f7fe bd8f 	b.w	15cfa <ull_conn_rx+0x316>
						conn->llcp_conn_param.state =
   171dc:	2103      	movs	r1, #3
   171de:	f361 0202 	bfi	r2, r1, #0, #3
   171e2:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
   171e6:	e71e      	b.n	17026 <ull_conn_rx+0x1642>
				     lll->interval) ||
   171e8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   171ea:	4281      	cmp	r1, r0
   171ec:	f47f af0e 	bne.w	1700c <ull_conn_rx+0x1628>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171f0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   171f4:	fb07 f101 	mul.w	r1, r7, r1
   171f8:	f242 7010 	movw	r0, #10000	; 0x2710
   171fc:	fb00 1202 	mla	r2, r0, r2, r1
   17200:	3a01      	subs	r2, #1
   17202:	fbb2 f2f1 	udiv	r2, r2, r1
				     lll->latency) ||
   17206:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
   1720a:	b292      	uxth	r2, r2
   1720c:	4291      	cmp	r1, r2
   1720e:	f47f aefd 	bne.w	1700c <ull_conn_rx+0x1628>
					conn->llcp_conn_param.state =
   17212:	f8b4 2176 	ldrh.w	r2, [r4, #374]	; 0x176
   17216:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1721a:	f042 0201 	orr.w	r2, r2, #1
   1721e:	f8a4 2176 	strh.w	r2, [r4, #374]	; 0x176
					(*rx)->hdr.type =
   17222:	2203      	movs	r2, #3
   17224:	712a      	strb	r2, [r5, #4]
   17226:	e6fe      	b.n	17026 <ull_conn_rx+0x1642>

00017228 <ull_conn_tx_demux>:
{
   17228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1722c:	4f24      	ldr	r7, [pc, #144]	; (172c0 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1722e:	4e25      	ldr	r6, [pc, #148]	; (172c4 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   17230:	78fa      	ldrb	r2, [r7, #3]
{
   17232:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   17234:	1d3d      	adds	r5, r7, #4
   17236:	e021      	b.n	1727c <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17238:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1723c:	4630      	mov	r0, r6
   1723e:	f7f8 f941 	bl	f4c4 <mem_get>
	if (conn->lll.handle != handle) {
   17242:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   17244:	bb32      	cbnz	r2, 17294 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   17246:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1724a:	f8d0 11c0 	ldr.w	r1, [r0, #448]	; 0x1c0
			tx->next = NULL;
   1724e:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   17250:	b359      	cbz	r1, 172aa <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   17252:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
   17256:	b102      	cbz	r2, 1725a <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   17258:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1725a:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
		MFIFO_DEQUEUE(conn_tx);
   1725e:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   17260:	78bb      	ldrb	r3, [r7, #2]
   17262:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   17264:	429a      	cmp	r2, r3
   17266:	d005      	beq.n	17274 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   17268:	3301      	adds	r3, #1
   1726a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1726c:	4299      	cmp	r1, r3
   1726e:	bf08      	it	eq
   17270:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17272:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   17274:	3c01      	subs	r4, #1
   17276:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1727a:	d01f      	beq.n	172bc <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1727c:	78bb      	ldrb	r3, [r7, #2]
   1727e:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   17280:	4293      	cmp	r3, r2
   17282:	d01b      	beq.n	172bc <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   17284:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   17288:	eb15 0803 	adds.w	r8, r5, r3
   1728c:	d016      	beq.n	172bc <ull_conn_tx_demux+0x94>
	if (handle >= CONFIG_BT_MAX_CONN) {
   1728e:	5aea      	ldrh	r2, [r5, r3]
   17290:	2a00      	cmp	r2, #0
   17292:	d0d1      	beq.n	17238 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   17294:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   17298:	790b      	ldrb	r3, [r1, #4]
   1729a:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   1729e:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   172a2:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   172a4:	f7fc fc56 	bl	13b54 <ll_tx_ack_put>
   172a8:	e7d9      	b.n	1725e <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   172aa:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
				conn->tx_data = tx;
   172ae:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
				if (!conn->tx_head) {
   172b2:	2a00      	cmp	r2, #0
   172b4:	d1cd      	bne.n	17252 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   172b6:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
			if (conn->tx_data_last) {
   172ba:	e7ce      	b.n	1725a <ull_conn_tx_demux+0x32>
}
   172bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   172c0:	20000524 	.word	0x20000524
   172c4:	20002830 	.word	0x20002830

000172c8 <conn_cleanup>:
{
   172c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   172cc:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
	rx->hdr.handle = conn->lll.handle;
   172d0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   172d2:	f8a0 213a 	strh.w	r2, [r0, #314]	; 0x13a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   172d6:	230b      	movs	r3, #11
{
   172d8:	b083      	sub	sp, #12
   172da:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   172dc:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   172e0:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
	*((uint8_t *)rx->pdu) = reason;
   172e4:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
	while (rx) {
   172e8:	b144      	cbz	r4, 172fc <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   172ea:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   172ec:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   172ee:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   172f0:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   172f2:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   172f4:	f7fc fbea 	bl	13acc <ll_rx_put>
	while (rx) {
   172f8:	2c00      	cmp	r4, #0
   172fa:	d1f7      	bne.n	172ec <conn_cleanup+0x24>
	while (conn->tx_head) {
   172fc:	f8d6 11b4 	ldr.w	r1, [r6, #436]	; 0x1b4
   17300:	b381      	cbz	r1, 17364 <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   17302:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 173ac <conn_cleanup+0xe4>
		LL_ASSERT(link);
   17306:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 173b0 <conn_cleanup+0xe8>
   1730a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 173b4 <conn_cleanup+0xec>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1730e:	f106 0770 	add.w	r7, r6, #112	; 0x70
   17312:	e007      	b.n	17324 <conn_cleanup+0x5c>
   17314:	4629      	mov	r1, r5
   17316:	463a      	mov	r2, r7
   17318:	4620      	mov	r0, r4
   1731a:	f7f8 f905 	bl	f528 <memq_enqueue>
	while (conn->tx_head) {
   1731e:	f8d6 11b4 	ldr.w	r1, [r6, #436]	; 0x1b4
   17322:	b1f9      	cbz	r1, 17364 <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17324:	4630      	mov	r0, r6
   17326:	f7fd fbad 	bl	14a84 <tx_ull_dequeue>
   1732a:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   1732c:	4640      	mov	r0, r8
   1732e:	f7f8 f89b 	bl	f468 <mem_acquire>
		LL_ASSERT(link);
   17332:	4604      	mov	r4, r0
   17334:	2800      	cmp	r0, #0
   17336:	d1ed      	bne.n	17314 <conn_cleanup+0x4c>
   17338:	481f      	ldr	r0, [pc, #124]	; (173b8 <conn_cleanup+0xf0>)
   1733a:	f240 63d3 	movw	r3, #1747	; 0x6d3
   1733e:	4652      	mov	r2, sl
   17340:	4649      	mov	r1, r9
   17342:	f009 fb4c 	bl	209de <printk>
   17346:	4040      	eors	r0, r0
   17348:	f380 8811 	msr	BASEPRI, r0
   1734c:	f04f 0003 	mov.w	r0, #3
   17350:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   17352:	4629      	mov	r1, r5
   17354:	463a      	mov	r2, r7
   17356:	4620      	mov	r0, r4
   17358:	f7f8 f8e6 	bl	f528 <memq_enqueue>
	while (conn->tx_head) {
   1735c:	f8d6 11b4 	ldr.w	r1, [r6, #436]	; 0x1b4
   17360:	2900      	cmp	r1, #0
   17362:	d1df      	bne.n	17324 <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
   17364:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   17366:	4b15      	ldr	r3, [pc, #84]	; (173bc <conn_cleanup+0xf4>)
   17368:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   1736c:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1736e:	b2d2      	uxtb	r2, r2
   17370:	2101      	movs	r1, #1
   17372:	2000      	movs	r0, #0
   17374:	f7f9 fc62 	bl	10c3c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17378:	f030 0302 	bics.w	r3, r0, #2
   1737c:	d00c      	beq.n	17398 <conn_cleanup+0xd0>
   1737e:	4a0c      	ldr	r2, [pc, #48]	; (173b0 <conn_cleanup+0xe8>)
   17380:	490f      	ldr	r1, [pc, #60]	; (173c0 <conn_cleanup+0xf8>)
   17382:	480d      	ldr	r0, [pc, #52]	; (173b8 <conn_cleanup+0xf0>)
   17384:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
   17388:	f009 fb29 	bl	209de <printk>
   1738c:	4040      	eors	r0, r0
   1738e:	f380 8811 	msr	BASEPRI, r0
   17392:	f04f 0003 	mov.w	r0, #3
   17396:	df02      	svc	2
	lll->handle = 0xFFFF;
   17398:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1739c:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   1739e:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   173a0:	b003      	add	sp, #12
   173a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   173a6:	f7ff bf3f 	b.w	17228 <ull_conn_tx_demux>
   173aa:	bf00      	nop
   173ac:	20002afc 	.word	0x20002afc
   173b0:	000277f0 	.word	0x000277f0
   173b4:	00027854 	.word	0x00027854
   173b8:	000272c0 	.word	0x000272c0
   173bc:	00014d25 	.word	0x00014d25
   173c0:	000278e4 	.word	0x000278e4

000173c4 <ull_conn_done>:
{
   173c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   173c8:	69c6      	ldr	r6, [r0, #28]
	if (lll->handle == 0xFFFF) {
   173ca:	8bb2      	ldrh	r2, [r6, #28]
   173cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   173d0:	429a      	cmp	r2, r3
{
   173d2:	b08a      	sub	sp, #40	; 0x28
	if (lll->handle == 0xFFFF) {
   173d4:	d050      	beq.n	17478 <ull_conn_done+0xb4>
	switch (done->extra.mic_state) {
   173d6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   173da:	68f4      	ldr	r4, [r6, #12]
	switch (done->extra.mic_state) {
   173dc:	2b01      	cmp	r3, #1
   173de:	4605      	mov	r5, r0
   173e0:	f000 8146 	beq.w	17670 <ull_conn_done+0x2ac>
   173e4:	2b02      	cmp	r3, #2
   173e6:	f000 811b 	beq.w	17620 <ull_conn_done+0x25c>
   173ea:	2b00      	cmp	r3, #0
   173ec:	f000 8121 	beq.w	17632 <ull_conn_done+0x26e>
	reason_peer = conn->llcp_terminate.reason_peer;
   173f0:	f894 1133 	ldrb.w	r1, [r4, #307]	; 0x133
	if (reason_peer && (
   173f4:	2900      	cmp	r1, #0
   173f6:	f040 80b8 	bne.w	1756a <ull_conn_done+0x1a6>
	latency_event = lll->latency_event;
   173fa:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
	if (done->extra.trx_cnt) {
   173fc:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   173fe:	f107 0801 	add.w	r8, r7, #1
	ticks_drift_minus = 0U;
   17402:	e9cd 1108 	strd	r1, r1, [sp, #32]
	elapsed_event = latency_event + 1;
   17406:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   1740a:	b3c3      	cbz	r3, 1747e <ull_conn_done+0xba>
		} else if (lll->role) {
   1740c:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   17410:	2b00      	cmp	r3, #0
   17412:	f2c0 813d 	blt.w	17690 <ull_conn_done+0x2cc>
	if (done->extra.crc_valid) {
   17416:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   1741a:	2200      	movs	r2, #0
   1741c:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (done->extra.crc_valid) {
   17420:	bb93      	cbnz	r3, 17488 <ull_conn_done+0xc4>
		if (!conn->supervision_expire) {
   17422:	f8b4 50cc 	ldrh.w	r5, [r4, #204]	; 0xcc
   17426:	b925      	cbnz	r5, 17432 <ull_conn_done+0x6e>
			conn->supervision_expire = conn->supervision_reload;
   17428:	f8b4 50ca 	ldrh.w	r5, [r4, #202]	; 0xca
   1742c:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
	if (conn->supervision_expire) {
   17430:	b36d      	cbz	r5, 1748e <ull_conn_done+0xca>
		if (conn->supervision_expire > elapsed_event) {
   17432:	4545      	cmp	r5, r8
   17434:	d91c      	bls.n	17470 <ull_conn_done+0xac>
			conn->supervision_expire -= elapsed_event;
   17436:	eba5 0508 	sub.w	r5, r5, r8
   1743a:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
   1743c:	2b06      	cmp	r3, #6
			lll->latency_event = 0;
   1743e:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
   17442:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
			lll->latency_event = 0;
   17446:	84b5      	strh	r5, [r6, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   17448:	f240 8118 	bls.w	1767c <ull_conn_done+0x2b8>
			else if (lll->role) {
   1744c:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   17450:	42ab      	cmp	r3, r5
   17452:	da1c      	bge.n	1748e <ull_conn_done+0xca>
				if (latency_event) {
   17454:	2f00      	cmp	r7, #0
   17456:	f040 8111 	bne.w	1767c <ull_conn_done+0x2b8>
					force = conn->slave.force & 0x01;
   1745a:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
					conn->slave.force >>= 1;
   1745e:	086b      	lsrs	r3, r5, #1
					if (force) {
   17460:	f015 0501 	ands.w	r5, r5, #1
						conn->slave.force |= BIT(31);
   17464:	bf18      	it	ne
   17466:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   1746a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   1746e:	e00e      	b.n	1748e <ull_conn_done+0xca>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   17470:	2108      	movs	r1, #8
   17472:	4620      	mov	r0, r4
   17474:	f7ff ff28 	bl	172c8 <conn_cleanup>
}
   17478:	b00a      	add	sp, #40	; 0x28
   1747a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   1747e:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   17482:	2b00      	cmp	r3, #0
   17484:	f000 808c 	beq.w	175a0 <ull_conn_done+0x1dc>
		conn->supervision_expire = 0U;
   17488:	2500      	movs	r5, #0
   1748a:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
	if (conn->procedure_expire != 0U) {
   1748e:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   17492:	b133      	cbz	r3, 174a2 <ull_conn_done+0xde>
		if (conn->procedure_expire > elapsed_event) {
   17494:	4543      	cmp	r3, r8
   17496:	f240 8106 	bls.w	176a6 <ull_conn_done+0x2e2>
			conn->procedure_expire -= elapsed_event;
   1749a:	eba3 0308 	sub.w	r3, r3, r8
   1749e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->apto_expire != 0U) {
   174a2:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   174a6:	b133      	cbz	r3, 174b6 <ull_conn_done+0xf2>
		if (conn->apto_expire > elapsed_event) {
   174a8:	4543      	cmp	r3, r8
   174aa:	f240 80a7 	bls.w	175fc <ull_conn_done+0x238>
			conn->apto_expire -= elapsed_event;
   174ae:	eba3 0308 	sub.w	r3, r3, r8
   174b2:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
	if (conn->appto_expire != 0U) {
   174b6:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   174ba:	b1ab      	cbz	r3, 174e8 <ull_conn_done+0x124>
		if (conn->appto_expire > elapsed_event) {
   174bc:	4543      	cmp	r3, r8
   174be:	f200 8083 	bhi.w	175c8 <ull_conn_done+0x204>
			conn->appto_expire = 0U;
   174c2:	2300      	movs	r3, #0
   174c4:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
			if ((conn->procedure_expire == 0U) &&
   174c8:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   174cc:	b963      	cbnz	r3, 174e8 <ull_conn_done+0x124>
			    (conn->llcp_req == conn->llcp_ack)) {
   174ce:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   174d2:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
			if ((conn->procedure_expire == 0U) &&
   174d6:	4293      	cmp	r3, r2
   174d8:	d10a      	bne.n	174f0 <ull_conn_done+0x12c>
				conn->llcp_ack -= 2U;
   174da:	3b02      	subs	r3, #2
   174dc:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
				conn->llcp_type = LLCP_PING;
   174e0:	2305      	movs	r3, #5
   174e2:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   174e6:	e008      	b.n	174fa <ull_conn_done+0x136>
			    (conn->llcp_req == conn->llcp_ack)) {
   174e8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   174ec:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   174f0:	1a9b      	subs	r3, r3, r2
   174f2:	f003 0303 	and.w	r3, r3, #3
   174f6:	2b02      	cmp	r3, #2
   174f8:	d073      	beq.n	175e2 <ull_conn_done+0x21e>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   174fa:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   174fe:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
   17502:	429a      	cmp	r2, r3
   17504:	f000 80bc 	beq.w	17680 <ull_conn_done+0x2bc>
		lll->latency_event = 0;
   17508:	2200      	movs	r2, #0
   1750a:	84b2      	strh	r2, [r6, #36]	; 0x24
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   1750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   1750e:	b90d      	cbnz	r5, 17514 <ull_conn_done+0x150>
   17510:	4297      	cmp	r7, r2
   17512:	d06c      	beq.n	175ee <ull_conn_done+0x22a>
		lazy = lll->latency_event + 1;
   17514:	3201      	adds	r2, #1
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   17516:	9c08      	ldr	r4, [sp, #32]
		lazy = lll->latency_event + 1;
   17518:	b291      	uxth	r1, r2
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   1751a:	b90b      	cbnz	r3, 17520 <ull_conn_done+0x15c>
   1751c:	2c00      	cmp	r4, #0
   1751e:	d04e      	beq.n	175be <ull_conn_done+0x1fa>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   17520:	8bb2      	ldrh	r2, [r6, #28]
		struct ll_conn *conn = lll->hdr.parent;
   17522:	68f6      	ldr	r6, [r6, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   17524:	9400      	str	r4, [sp, #0]
   17526:	2000      	movs	r0, #0
   17528:	4c70      	ldr	r4, [pc, #448]	; (176ec <ull_conn_done+0x328>)
   1752a:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1752c:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1752e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   17532:	9504      	str	r5, [sp, #16]
   17534:	9606      	str	r6, [sp, #24]
   17536:	b2d2      	uxtb	r2, r2
   17538:	2101      	movs	r1, #1
   1753a:	9405      	str	r4, [sp, #20]
   1753c:	f7f9 fb2c 	bl	10b98 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17540:	f030 0302 	bics.w	r3, r0, #2
   17544:	d098      	beq.n	17478 <ull_conn_done+0xb4>
   17546:	f7fc fb63 	bl	13c10 <ull_disable_mark_get>
   1754a:	4286      	cmp	r6, r0
   1754c:	d094      	beq.n	17478 <ull_conn_done+0xb4>
   1754e:	4a68      	ldr	r2, [pc, #416]	; (176f0 <ull_conn_done+0x32c>)
   17550:	4968      	ldr	r1, [pc, #416]	; (176f4 <ull_conn_done+0x330>)
   17552:	4869      	ldr	r0, [pc, #420]	; (176f8 <ull_conn_done+0x334>)
   17554:	f240 43d2 	movw	r3, #1234	; 0x4d2
   17558:	f009 fa41 	bl	209de <printk>
   1755c:	4040      	eors	r0, r0
   1755e:	f380 8811 	msr	BASEPRI, r0
   17562:	f04f 0003 	mov.w	r0, #3
   17566:	df02      	svc	2
   17568:	e786      	b.n	17478 <ull_conn_done+0xb4>
	if (reason_peer && (
   1756a:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   1756e:	2b00      	cmp	r3, #0
   17570:	db59      	blt.n	17626 <ull_conn_done+0x262>
			    lll->role ||
   17572:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   17576:	f013 0202 	ands.w	r2, r3, #2
   1757a:	d154      	bne.n	17626 <ull_conn_done+0x262>
			    conn->master.terminate_ack ||
   1757c:	293d      	cmp	r1, #61	; 0x3d
   1757e:	d052      	beq.n	17626 <ull_conn_done+0x262>
	latency_event = lll->latency_event;
   17580:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
	ticks_drift_minus = 0U;
   17582:	e9cd 2208 	strd	r2, r2, [sp, #32]
	if (done->extra.trx_cnt) {
   17586:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   17588:	f107 0801 	add.w	r8, r7, #1
   1758c:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   17590:	2a00      	cmp	r2, #0
   17592:	f43f af74 	beq.w	1747e <ull_conn_done+0xba>
			conn->master.terminate_ack = 1;
   17596:	f043 0302 	orr.w	r3, r3, #2
   1759a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   1759e:	e73a      	b.n	17416 <ull_conn_done+0x52>
	else if (conn->connect_expire) {
   175a0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   175a4:	2b00      	cmp	r3, #0
   175a6:	f43f af3c 	beq.w	17422 <ull_conn_done+0x5e>
		if (conn->connect_expire > elapsed_event) {
   175aa:	4543      	cmp	r3, r8
   175ac:	f240 8084 	bls.w	176b8 <ull_conn_done+0x2f4>
			conn->connect_expire -= elapsed_event;
   175b0:	eba3 0308 	sub.w	r3, r3, r8
	if (conn->supervision_expire) {
   175b4:	f8b4 50cc 	ldrh.w	r5, [r4, #204]	; 0xcc
			conn->connect_expire -= elapsed_event;
   175b8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   175bc:	e738      	b.n	17430 <ull_conn_done+0x6c>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   175be:	2900      	cmp	r1, #0
   175c0:	d1ae      	bne.n	17520 <ull_conn_done+0x15c>
	    (lazy != 0U) || (force != 0U)) {
   175c2:	2d00      	cmp	r5, #0
   175c4:	d1ac      	bne.n	17520 <ull_conn_done+0x15c>
   175c6:	e757      	b.n	17478 <ull_conn_done+0xb4>
			conn->appto_expire -= elapsed_event;
   175c8:	eba3 0308 	sub.w	r3, r3, r8
			    (conn->llcp_req == conn->llcp_ack)) {
   175cc:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
			conn->appto_expire -= elapsed_event;
   175d0:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
			    (conn->llcp_req == conn->llcp_ack)) {
   175d4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   175d8:	1a9b      	subs	r3, r3, r2
   175da:	f003 0303 	and.w	r3, r3, #3
   175de:	2b02      	cmp	r3, #2
   175e0:	d18b      	bne.n	174fa <ull_conn_done+0x136>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   175e2:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   175e6:	3b01      	subs	r3, #1
   175e8:	2b01      	cmp	r3, #1
   175ea:	d886      	bhi.n	174fa <ull_conn_done+0x136>
   175ec:	e78c      	b.n	17508 <ull_conn_done+0x144>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   175ee:	9c08      	ldr	r4, [sp, #32]
   175f0:	b913      	cbnz	r3, 175f8 <ull_conn_done+0x234>
   175f2:	2c00      	cmp	r4, #0
   175f4:	f43f af40 	beq.w	17478 <ull_conn_done+0xb4>
	lazy = 0U;
   175f8:	4629      	mov	r1, r5
   175fa:	e791      	b.n	17520 <ull_conn_done+0x15c>
			rx = ll_pdu_rx_alloc();
   175fc:	f7fc fa94 	bl	13b28 <ll_pdu_rx_alloc>
			if (rx) {
   17600:	4601      	mov	r1, r0
   17602:	2800      	cmp	r0, #0
   17604:	d054      	beq.n	176b0 <ull_conn_done+0x2ec>
				rx->handle = lll->handle;
   17606:	8bb3      	ldrh	r3, [r6, #28]
				conn->apto_expire = 0U;
   17608:	2200      	movs	r2, #0
   1760a:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
				rx->handle = lll->handle;
   1760e:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   17610:	230e      	movs	r3, #14
   17612:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   17614:	6800      	ldr	r0, [r0, #0]
   17616:	f7fc fa59 	bl	13acc <ll_rx_put>
				ll_rx_sched();
   1761a:	f7fc fa61 	bl	13ae0 <ll_rx_sched>
   1761e:	e74a      	b.n	174b6 <ull_conn_done+0xf2>
		conn->llcp_terminate.reason_peer =
   17620:	213d      	movs	r1, #61	; 0x3d
   17622:	f884 1133 	strb.w	r1, [r4, #307]	; 0x133
		conn_cleanup(conn, reason_peer);
   17626:	4620      	mov	r0, r4
}
   17628:	b00a      	add	sp, #40	; 0x28
   1762a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_peer);
   1762e:	f7ff be4b 	b.w	172c8 <conn_cleanup>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   17632:	f896 3072 	ldrb.w	r3, [r6, #114]	; 0x72
   17636:	0719      	lsls	r1, r3, #28
   17638:	d404      	bmi.n	17644 <ull_conn_done+0x280>
   1763a:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
   1763e:	07da      	lsls	r2, r3, #31
   17640:	f57f aed6 	bpl.w	173f0 <ull_conn_done+0x2c>
					    (lll->latency + 6)) ?
   17644:	8c33      	ldrh	r3, [r6, #32]
			appto_reload_new = (conn->apto_reload >
   17646:	f8b4 20d6 	ldrh.w	r2, [r4, #214]	; 0xd6
					    (lll->latency + 6)) ?
   1764a:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   1764c:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   1764e:	bfc4      	itt	gt
   17650:	1ad3      	subgt	r3, r2, r3
   17652:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   17654:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
			appto_reload_new = (conn->apto_reload >
   17658:	bfcc      	ite	gt
   1765a:	b29b      	uxthgt	r3, r3
   1765c:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1765e:	4299      	cmp	r1, r3
   17660:	d010      	beq.n	17684 <ull_conn_done+0x2c0>
				conn->appto_reload = appto_reload_new;
   17662:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
				conn->appto_expire = conn->appto_reload;
   17666:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				conn->apto_expire = conn->apto_reload;
   1766a:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
   1766e:	e6bf      	b.n	173f0 <ull_conn_done+0x2c>
		conn->appto_expire = conn->apto_expire = 0U;
   17670:	2300      	movs	r3, #0
   17672:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
   17676:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
		break;
   1767a:	e6b9      	b.n	173f0 <ull_conn_done+0x2c>
					force = 1U;
   1767c:	2501      	movs	r5, #1
   1767e:	e706      	b.n	1748e <ull_conn_done+0xca>
	if ((force) || (latency_event != lll->latency_event)) {
   17680:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   17682:	e743      	b.n	1750c <ull_conn_done+0x148>
			if (conn->apto_expire == 0U) {
   17684:	f8b4 10d8 	ldrh.w	r1, [r4, #216]	; 0xd8
   17688:	2900      	cmp	r1, #0
   1768a:	f47f aeb1 	bne.w	173f0 <ull_conn_done+0x2c>
   1768e:	e7ea      	b.n	17666 <ull_conn_done+0x2a2>
			ull_slave_done(done, &ticks_drift_plus,
   17690:	aa08      	add	r2, sp, #32
   17692:	a909      	add	r1, sp, #36	; 0x24
   17694:	4628      	mov	r0, r5
   17696:	f7ec f823 	bl	36e0 <ull_slave_done>
			if (!conn->tx_head) {
   1769a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
   1769e:	b183      	cbz	r3, 176c2 <ull_conn_done+0x2fe>
				lll->latency_event = 0;
   176a0:	2300      	movs	r3, #0
   176a2:	84b3      	strh	r3, [r6, #36]	; 0x24
   176a4:	e6b7      	b.n	17416 <ull_conn_done+0x52>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   176a6:	2122      	movs	r1, #34	; 0x22
   176a8:	4620      	mov	r0, r4
   176aa:	f7ff fe0d 	bl	172c8 <conn_cleanup>
			return;
   176ae:	e6e3      	b.n	17478 <ull_conn_done+0xb4>
				conn->apto_expire = 1U;
   176b0:	2301      	movs	r3, #1
   176b2:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
   176b6:	e6fe      	b.n	174b6 <ull_conn_done+0xf2>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   176b8:	213e      	movs	r1, #62	; 0x3e
   176ba:	4620      	mov	r0, r4
   176bc:	f7ff fe04 	bl	172c8 <conn_cleanup>
			return;
   176c0:	e6da      	b.n	17478 <ull_conn_done+0xb4>
				ull_conn_tx_demux(UINT8_MAX);
   176c2:	20ff      	movs	r0, #255	; 0xff
   176c4:	f7ff fdb0 	bl	17228 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   176c8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   176cc:	2a00      	cmp	r2, #0
   176ce:	d1e7      	bne.n	176a0 <ull_conn_done+0x2dc>
   176d0:	e9d6 0117 	ldrd	r0, r1, [r6, #92]	; 0x5c
   176d4:	f7f7 ff32 	bl	f53c <memq_peek>
   176d8:	2800      	cmp	r0, #0
   176da:	d1e1      	bne.n	176a0 <ull_conn_done+0x2dc>
			} else if (lll->slave.latency_enabled) {
   176dc:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
   176e0:	07db      	lsls	r3, r3, #31
   176e2:	f57f ae98 	bpl.w	17416 <ull_conn_done+0x52>
				lll->latency_event = lll->latency;
   176e6:	8c33      	ldrh	r3, [r6, #32]
   176e8:	84b3      	strh	r3, [r6, #36]	; 0x24
   176ea:	e694      	b.n	17416 <ull_conn_done+0x52>
   176ec:	00014e39 	.word	0x00014e39
   176f0:	000277f0 	.word	0x000277f0
   176f4:	00027988 	.word	0x00027988
   176f8:	000272c0 	.word	0x000272c0

000176fc <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   176fc:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
   17700:	2b00      	cmp	r3, #0
   17702:	f000 80e7 	beq.w	178d4 <ull_conn_tx_lll_enqueue+0x1d8>
   17706:	3901      	subs	r1, #1
{
   17708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1770c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 178d8 <ull_conn_tx_lll_enqueue+0x1dc>
		LL_ASSERT(link);
   17710:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 178dc <ull_conn_tx_lll_enqueue+0x1e0>
   17714:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 178e0 <ull_conn_tx_lll_enqueue+0x1e4>
   17718:	4604      	mov	r4, r0
   1771a:	b2cd      	uxtb	r5, r1
   1771c:	e012      	b.n	17744 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1771e:	4640      	mov	r0, r8
   17720:	f7f7 fea2 	bl	f468 <mem_acquire>
		LL_ASSERT(link);
   17724:	4607      	mov	r7, r0
   17726:	2800      	cmp	r0, #0
   17728:	d066      	beq.n	177f8 <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1772a:	f104 0270 	add.w	r2, r4, #112	; 0x70
   1772e:	4631      	mov	r1, r6
   17730:	4638      	mov	r0, r7
   17732:	f7f7 fef9 	bl	f528 <memq_enqueue>
	while (conn->tx_head &&
   17736:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
   1773a:	3d01      	subs	r5, #1
   1773c:	b2ed      	uxtb	r5, r5
   1773e:	2b00      	cmp	r3, #0
   17740:	f000 8082 	beq.w	17848 <ull_conn_tx_lll_enqueue+0x14c>
		 !conn->llcp_phy.pause_tx &&
   17744:	f894 21af 	ldrb.w	r2, [r4, #431]	; 0x1af
	while (conn->tx_head &&
   17748:	07d1      	lsls	r1, r2, #31
   1774a:	d403      	bmi.n	17754 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   1774c:	f894 2156 	ldrb.w	r2, [r4, #342]	; 0x156
		 !conn->llcp_phy.pause_tx &&
   17750:	0792      	lsls	r2, r2, #30
   17752:	d55f      	bpl.n	17814 <ull_conn_tx_lll_enqueue+0x118>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   17754:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   17758:	4293      	cmp	r3, r2
   1775a:	d175      	bne.n	17848 <ull_conn_tx_lll_enqueue+0x14c>
   1775c:	2dff      	cmp	r5, #255	; 0xff
   1775e:	d073      	beq.n	17848 <ull_conn_tx_lll_enqueue+0x14c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17760:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   17764:	4620      	mov	r0, r4
   17766:	f7fd f98d 	bl	14a84 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1776a:	7903      	ldrb	r3, [r0, #4]
   1776c:	f003 0303 	and.w	r3, r3, #3
   17770:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17772:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   17774:	d1d3      	bne.n	1771e <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   17776:	79c3      	ldrb	r3, [r0, #7]
   17778:	3b03      	subs	r3, #3
   1777a:	2b14      	cmp	r3, #20
   1777c:	d8cf      	bhi.n	1771e <ull_conn_tx_lll_enqueue+0x22>
   1777e:	a201      	add	r2, pc, #4	; (adr r2, 17784 <ull_conn_tx_lll_enqueue+0x88>)
   17780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17784:	000177e1 	.word	0x000177e1
   17788:	000177e1 	.word	0x000177e1
   1778c:	0001771f 	.word	0x0001771f
   17790:	0001771f 	.word	0x0001771f
   17794:	0001771f 	.word	0x0001771f
   17798:	0001771f 	.word	0x0001771f
   1779c:	0001771f 	.word	0x0001771f
   177a0:	000177e1 	.word	0x000177e1
   177a4:	000177d9 	.word	0x000177d9
   177a8:	0001771f 	.word	0x0001771f
   177ac:	0001771f 	.word	0x0001771f
   177b0:	0001771f 	.word	0x0001771f
   177b4:	0001771f 	.word	0x0001771f
   177b8:	0001771f 	.word	0x0001771f
   177bc:	0001771f 	.word	0x0001771f
   177c0:	0001771f 	.word	0x0001771f
   177c4:	0001771f 	.word	0x0001771f
   177c8:	0001771f 	.word	0x0001771f
   177cc:	0001771f 	.word	0x0001771f
   177d0:	0001784d 	.word	0x0001784d
   177d4:	0001784d 	.word	0x0001784d
		if (!conn->lll.role) {
   177d8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   177dc:	2b00      	cmp	r3, #0
   177de:	da9e      	bge.n	1771e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   177e0:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
   177e4:	f043 0302 	orr.w	r3, r3, #2
   177e8:	f884 3156 	strb.w	r3, [r4, #342]	; 0x156
		link = mem_acquire(&mem_link_tx.free);
   177ec:	4640      	mov	r0, r8
   177ee:	f7f7 fe3b 	bl	f468 <mem_acquire>
		LL_ASSERT(link);
   177f2:	4607      	mov	r7, r0
   177f4:	2800      	cmp	r0, #0
   177f6:	d198      	bne.n	1772a <ull_conn_tx_lll_enqueue+0x2e>
   177f8:	483a      	ldr	r0, [pc, #232]	; (178e4 <ull_conn_tx_lll_enqueue+0x1e8>)
   177fa:	f240 534e 	movw	r3, #1358	; 0x54e
   177fe:	4652      	mov	r2, sl
   17800:	4649      	mov	r1, r9
   17802:	f009 f8ec 	bl	209de <printk>
   17806:	4040      	eors	r0, r0
   17808:	f380 8811 	msr	BASEPRI, r0
   1780c:	f04f 0003 	mov.w	r0, #3
   17810:	df02      	svc	2
   17812:	e78a      	b.n	1772a <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   17814:	791a      	ldrb	r2, [r3, #4]
   17816:	f002 0203 	and.w	r2, r2, #3
   1781a:	2a03      	cmp	r2, #3
   1781c:	d19e      	bne.n	1775c <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   1781e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   17820:	2a03      	cmp	r2, #3
   17822:	d001      	beq.n	17828 <ull_conn_tx_lll_enqueue+0x12c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   17824:	2a0a      	cmp	r2, #10
   17826:	d199      	bne.n	1775c <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   17828:	f894 10ed 	ldrb.w	r1, [r4, #237]	; 0xed
   1782c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   17830:	428a      	cmp	r2, r1
   17832:	d012      	beq.n	1785a <ull_conn_tx_lll_enqueue+0x15e>
   17834:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   17838:	2a03      	cmp	r2, #3
   1783a:	d08f      	beq.n	1775c <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1783c:	681a      	ldr	r2, [r3, #0]
   1783e:	b11a      	cbz	r2, 17848 <ull_conn_tx_lll_enqueue+0x14c>
   17840:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
   17844:	428a      	cmp	r2, r1
   17846:	d034      	beq.n	178b2 <ull_conn_tx_lll_enqueue+0x1b6>
}
   17848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   1784c:	f894 31af 	ldrb.w	r3, [r4, #431]	; 0x1af
   17850:	f043 0301 	orr.w	r3, r3, #1
   17854:	f884 31af 	strb.w	r3, [r4, #431]	; 0x1af
		break;
   17858:	e761      	b.n	1771e <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   1785a:	f894 011d 	ldrb.w	r0, [r4, #285]	; 0x11d
   1785e:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   17862:	4288      	cmp	r0, r1
   17864:	d1ea      	bne.n	1783c <ull_conn_tx_lll_enqueue+0x140>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   17866:	f894 0129 	ldrb.w	r0, [r4, #297]	; 0x129
   1786a:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
   1786e:	4288      	cmp	r0, r1
   17870:	d1e4      	bne.n	1783c <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   17872:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
   17876:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   1787a:	4288      	cmp	r0, r1
   1787c:	d1de      	bne.n	1783c <ull_conn_tx_lll_enqueue+0x140>
		       conn->llcp_conn_param.req) ||
   1787e:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
   17882:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
   17886:	4288      	cmp	r0, r1
   17888:	d1d8      	bne.n	1783c <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1788a:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   1788e:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   17892:	4288      	cmp	r0, r1
   17894:	d1d2      	bne.n	1783c <ull_conn_tx_lll_enqueue+0x140>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   17896:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
			conn->llcp_ack -= 2U;
   1789a:	3a02      	subs	r2, #2
   1789c:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   178a0:	2201      	movs	r2, #1
   178a2:	f362 0301 	bfi	r3, r2, #0, #2
   178a6:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
			conn->llcp_type = LLCP_ENCRYPTION;
   178aa:	2303      	movs	r3, #3
   178ac:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			conn->llcp_ack -= 2U;
   178b0:	e754      	b.n	1775c <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   178b2:	f8c4 21b4 	str.w	r2, [r4, #436]	; 0x1b4
				tx->next = conn->tx_ctrl_last->next;
   178b6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   178ba:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   178be:	6810      	ldr	r0, [r2, #0]
   178c0:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   178c2:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   178c4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
				if (!conn->tx_data_last) {
   178c8:	2900      	cmp	r1, #0
   178ca:	f47f af47 	bne.w	1775c <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   178ce:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   178d2:	e743      	b.n	1775c <ull_conn_tx_lll_enqueue+0x60>
   178d4:	4770      	bx	lr
   178d6:	bf00      	nop
   178d8:	20002afc 	.word	0x20002afc
   178dc:	000277f0 	.word	0x000277f0
   178e0:	00027854 	.word	0x00027854
   178e4:	000272c0 	.word	0x000272c0

000178e8 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   178e8:	4901      	ldr	r1, [pc, #4]	; (178f0 <ull_conn_link_tx_release+0x8>)
   178ea:	f7f7 bdd3 	b.w	f494 <mem_release>
   178ee:	bf00      	nop
   178f0:	20002afc 	.word	0x20002afc

000178f4 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   178f4:	4b01      	ldr	r3, [pc, #4]	; (178fc <ull_conn_ack_last_idx_get+0x8>)
}
   178f6:	78d8      	ldrb	r0, [r3, #3]
   178f8:	4770      	bx	lr
   178fa:	bf00      	nop
   178fc:	200004e0 	.word	0x200004e0

00017900 <ull_conn_ack_peek>:
{
   17900:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   17902:	4b0c      	ldr	r3, [pc, #48]	; (17934 <ull_conn_ack_peek+0x34>)
   17904:	f893 c002 	ldrb.w	ip, [r3, #2]
   17908:	78dc      	ldrb	r4, [r3, #3]
   1790a:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1790c:	45a4      	cmp	ip, r4
   1790e:	d00f      	beq.n	17930 <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   17910:	fb1c fc05 	smulbb	ip, ip, r5
   17914:	3304      	adds	r3, #4
	if (!lll_tx) {
   17916:	4686      	mov	lr, r0
   17918:	eb13 000c 	adds.w	r0, r3, ip
   1791c:	d007      	beq.n	1792e <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   1791e:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   17922:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   17926:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   17928:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1792a:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1792c:	6818      	ldr	r0, [r3, #0]
}
   1792e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   17930:	2000      	movs	r0, #0
}
   17932:	bd30      	pop	{r4, r5, pc}
   17934:	200004e0 	.word	0x200004e0

00017938 <ull_conn_ack_by_last_peek>:
{
   17938:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1793a:	4b0c      	ldr	r3, [pc, #48]	; (1796c <ull_conn_ack_by_last_peek+0x34>)
   1793c:	f893 c002 	ldrb.w	ip, [r3, #2]
   17940:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   17944:	4584      	cmp	ip, r0
   17946:	d00e      	beq.n	17966 <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   17948:	3304      	adds	r3, #4
   1794a:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   1794e:	eb13 000c 	adds.w	r0, r3, ip
   17952:	d006      	beq.n	17962 <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   17954:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   17958:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   1795a:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   1795e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   17960:	6818      	ldr	r0, [r3, #0]
}
   17962:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   17966:	2000      	movs	r0, #0
   17968:	e7fb      	b.n	17962 <ull_conn_ack_by_last_peek+0x2a>
   1796a:	bf00      	nop
   1796c:	200004e0 	.word	0x200004e0

00017970 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   17970:	4b09      	ldr	r3, [pc, #36]	; (17998 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   17972:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   17974:	78da      	ldrb	r2, [r3, #3]
   17976:	7818      	ldrb	r0, [r3, #0]
   17978:	f893 c001 	ldrb.w	ip, [r3, #1]
   1797c:	428a      	cmp	r2, r1
   1797e:	d009      	beq.n	17994 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   17980:	1c4a      	adds	r2, r1, #1
   17982:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   17984:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   17988:	4594      	cmp	ip, r2
   1798a:	bf08      	it	eq
   1798c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1798e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   17990:	709a      	strb	r2, [r3, #2]
	return mem;
   17992:	4770      	bx	lr
		return NULL;
   17994:	2000      	movs	r0, #0
}
   17996:	4770      	bx	lr
   17998:	200004e0 	.word	0x200004e0

0001799c <ull_conn_lll_ack_enqueue>:
{
   1799c:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1799e:	4a15      	ldr	r2, [pc, #84]	; (179f4 <ull_conn_lll_ack_enqueue+0x58>)
   179a0:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   179a2:	f892 e001 	ldrb.w	lr, [r2, #1]
   179a6:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   179aa:	1c63      	adds	r3, r4, #1
   179ac:	b2db      	uxtb	r3, r3
		last = 0U;
   179ae:	459e      	cmp	lr, r3
   179b0:	bf08      	it	eq
   179b2:	2300      	moveq	r3, #0
	if (last == first) {
   179b4:	459c      	cmp	ip, r3
   179b6:	d00c      	beq.n	179d2 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   179b8:	4696      	mov	lr, r2
   179ba:	f81e cb04 	ldrb.w	ip, [lr], #4
   179be:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   179c2:	eb1e 040c 	adds.w	r4, lr, ip
   179c6:	d004      	beq.n	179d2 <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   179c8:	f82e 000c 	strh.w	r0, [lr, ip]
	*last = idx; /* Commit: Update write index */
   179cc:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   179ce:	6061      	str	r1, [r4, #4]
}
   179d0:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   179d2:	4a09      	ldr	r2, [pc, #36]	; (179f8 <ull_conn_lll_ack_enqueue+0x5c>)
   179d4:	4909      	ldr	r1, [pc, #36]	; (179fc <ull_conn_lll_ack_enqueue+0x60>)
   179d6:	480a      	ldr	r0, [pc, #40]	; (17a00 <ull_conn_lll_ack_enqueue+0x64>)
   179d8:	f240 538c 	movw	r3, #1420	; 0x58c
   179dc:	f008 ffff 	bl	209de <printk>
   179e0:	4040      	eors	r0, r0
   179e2:	f380 8811 	msr	BASEPRI, r0
   179e6:	f04f 0003 	mov.w	r0, #3
   179ea:	df02      	svc	2
	lll_tx->handle = handle;
   179ec:	2300      	movs	r3, #0
   179ee:	801b      	strh	r3, [r3, #0]
   179f0:	deff      	udf	#255	; 0xff
   179f2:	bf00      	nop
   179f4:	200004e0 	.word	0x200004e0
   179f8:	000277f0 	.word	0x000277f0
   179fc:	00027844 	.word	0x00027844
   17a00:	000272c0 	.word	0x000272c0

00017a04 <ull_conn_tx_ack>:
{
   17a04:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   17a06:	7953      	ldrb	r3, [r2, #5]
{
   17a08:	b083      	sub	sp, #12
   17a0a:	4614      	mov	r4, r2
   17a0c:	4605      	mov	r5, r0
   17a0e:	460f      	mov	r7, r1
	LL_ASSERT(pdu_tx->len);
   17a10:	2b00      	cmp	r3, #0
   17a12:	d034      	beq.n	17a7e <ull_conn_tx_ack+0x7a>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   17a14:	7923      	ldrb	r3, [r4, #4]
   17a16:	f003 0203 	and.w	r2, r3, #3
   17a1a:	2a03      	cmp	r2, #3
   17a1c:	d016      	beq.n	17a4c <ull_conn_tx_ack+0x48>
	} else if (handle != 0xFFFF) {
   17a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17a22:	4295      	cmp	r5, r2
   17a24:	d10a      	bne.n	17a3c <ull_conn_tx_ack+0x38>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   17a26:	f36f 0301 	bfc	r3, #0, #2
   17a2a:	7123      	strb	r3, [r4, #4]
	struct ll_conn *conn = NULL;
   17a2c:	2600      	movs	r6, #0
	ll_tx_ack_put(handle, tx);
   17a2e:	4621      	mov	r1, r4
   17a30:	4628      	mov	r0, r5
   17a32:	f7fc f88f 	bl	13b54 <ll_tx_ack_put>
}
   17a36:	4630      	mov	r0, r6
   17a38:	b003      	add	sp, #12
   17a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17a3c:	48bd      	ldr	r0, [pc, #756]	; (17d34 <ull_conn_tx_ack+0x330>)
   17a3e:	462a      	mov	r2, r5
   17a40:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   17a44:	f7f7 fd3e 	bl	f4c4 <mem_get>
   17a48:	4606      	mov	r6, r0
   17a4a:	e7f0      	b.n	17a2e <ull_conn_tx_ack+0x2a>
		if (handle != 0xFFFF) {
   17a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17a50:	429d      	cmp	r5, r3
   17a52:	d122      	bne.n	17a9a <ull_conn_tx_ack+0x96>
	struct ll_conn *conn = NULL;
   17a54:	2600      	movs	r6, #0
		if (link->next == (void *)tx) {
   17a56:	6838      	ldr	r0, [r7, #0]
   17a58:	4284      	cmp	r4, r0
   17a5a:	f000 8097 	beq.w	17b8c <ull_conn_tx_ack+0x188>
			LL_ASSERT(!link->next);
   17a5e:	2800      	cmp	r0, #0
   17a60:	d0e5      	beq.n	17a2e <ull_conn_tx_ack+0x2a>
   17a62:	4ab5      	ldr	r2, [pc, #724]	; (17d38 <ull_conn_tx_ack+0x334>)
   17a64:	49b5      	ldr	r1, [pc, #724]	; (17d3c <ull_conn_tx_ack+0x338>)
   17a66:	48b6      	ldr	r0, [pc, #728]	; (17d40 <ull_conn_tx_ack+0x33c>)
   17a68:	f240 53ae 	movw	r3, #1454	; 0x5ae
   17a6c:	f008 ffb7 	bl	209de <printk>
   17a70:	4040      	eors	r0, r0
   17a72:	f380 8811 	msr	BASEPRI, r0
   17a76:	f04f 0003 	mov.w	r0, #3
   17a7a:	df02      	svc	2
   17a7c:	e7d7      	b.n	17a2e <ull_conn_tx_ack+0x2a>
	LL_ASSERT(pdu_tx->len);
   17a7e:	4aae      	ldr	r2, [pc, #696]	; (17d38 <ull_conn_tx_ack+0x334>)
   17a80:	49b0      	ldr	r1, [pc, #704]	; (17d44 <ull_conn_tx_ack+0x340>)
   17a82:	48af      	ldr	r0, [pc, #700]	; (17d40 <ull_conn_tx_ack+0x33c>)
   17a84:	f240 539b 	movw	r3, #1435	; 0x59b
   17a88:	f008 ffa9 	bl	209de <printk>
   17a8c:	4040      	eors	r0, r0
   17a8e:	f380 8811 	msr	BASEPRI, r0
   17a92:	f04f 0003 	mov.w	r0, #3
   17a96:	df02      	svc	2
   17a98:	e7bc      	b.n	17a14 <ull_conn_tx_ack+0x10>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17a9a:	48a6      	ldr	r0, [pc, #664]	; (17d34 <ull_conn_tx_ack+0x330>)
   17a9c:	462a      	mov	r2, r5
   17a9e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   17aa2:	f7f7 fd0f 	bl	f4c4 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   17aa6:	79e3      	ldrb	r3, [r4, #7]
   17aa8:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17aaa:	4606      	mov	r6, r0
	switch (pdu_tx->llctrl.opcode) {
   17aac:	2b16      	cmp	r3, #22
   17aae:	d871      	bhi.n	17b94 <ull_conn_tx_ack+0x190>
   17ab0:	e8df f013 	tbh	[pc, r3, lsl #1]
   17ab4:	00ce00f8 	.word	0x00ce00f8
   17ab8:	00700087 	.word	0x00700087
   17abc:	00700070 	.word	0x00700070
   17ac0:	00700070 	.word	0x00700070
   17ac4:	001700e9 	.word	0x001700e9
   17ac8:	00920070 	.word	0x00920070
   17acc:	00700070 	.word	0x00700070
   17ad0:	008e0070 	.word	0x008e0070
   17ad4:	00700070 	.word	0x00700070
   17ad8:	009c00f0 	.word	0x009c00f0
   17adc:	007c0075 	.word	0x007c0075
   17ae0:	00c3      	.short	0x00c3
		if (!conn->lll.role) {
   17ae2:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   17ae6:	2b00      	cmp	r3, #0
   17ae8:	db6b      	blt.n	17bc2 <ull_conn_tx_ack+0x1be>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17aea:	7923      	ldrb	r3, [r4, #4]
   17aec:	f043 0303 	orr.w	r3, r3, #3
   17af0:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17af2:	2217      	movs	r2, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17af4:	2303      	movs	r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17af6:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17af8:	71e3      	strb	r3, [r4, #7]
   17afa:	f8d0 3159 	ldr.w	r3, [r0, #345]	; 0x159
   17afe:	f8d0 215d 	ldr.w	r2, [r0, #349]	; 0x15d
   17b02:	60e2      	str	r2, [r4, #12]
   17b04:	60a3      	str	r3, [r4, #8]
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   17b06:	f890 3157 	ldrb.w	r3, [r0, #343]	; 0x157
   17b0a:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   17b0c:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
   17b10:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   17b12:	210c      	movs	r1, #12
   17b14:	f104 0012 	add.w	r0, r4, #18
   17b18:	f002 fe18 	bl	1a74c <lll_csrand_isr_get>
	    conn->tx_head &&
   17b1c:	f8d6 31b4 	ldr.w	r3, [r6, #436]	; 0x1b4
	if (
   17b20:	2b00      	cmp	r3, #0
   17b22:	f000 80d9 	beq.w	17cd8 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_enc.pause_tx &&
   17b26:	f896 2156 	ldrb.w	r2, [r6, #342]	; 0x156
	    conn->tx_head &&
   17b2a:	0791      	lsls	r1, r2, #30
   17b2c:	f100 80d4 	bmi.w	17cd8 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_phy.pause_tx &&
   17b30:	f896 21af 	ldrb.w	r2, [r6, #431]	; 0x1af
   17b34:	07d2      	lsls	r2, r2, #31
   17b36:	f100 80cf 	bmi.w	17cd8 <ull_conn_tx_ack+0x2d4>
		if (conn->tx_head == conn->tx_data) {
   17b3a:	f8d6 21c0 	ldr.w	r2, [r6, #448]	; 0x1c0
   17b3e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17b40:	bf04      	itt	eq
   17b42:	681a      	ldreq	r2, [r3, #0]
   17b44:	f8c6 21c0 	streq.w	r2, [r6, #448]	; 0x1c0
		if (!conn->tx_ctrl) {
   17b48:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
   17b4c:	2a00      	cmp	r2, #0
   17b4e:	f000 80e9 	beq.w	17d24 <ull_conn_tx_ack+0x320>
	tx->next = conn->tx_ctrl_last->next;
   17b52:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
   17b56:	681a      	ldr	r2, [r3, #0]
   17b58:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   17b5a:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   17b5c:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   17b5e:	f8c6 41bc 	str.w	r4, [r6, #444]	; 0x1bc
	if (!tx->next) {
   17b62:	2b00      	cmp	r3, #0
   17b64:	f000 80c3 	beq.w	17cee <ull_conn_tx_ack+0x2ea>
		if (link->next == (void *)tx) {
   17b68:	683b      	ldr	r3, [r7, #0]
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	f47f af63 	bne.w	17a36 <ull_conn_tx_ack+0x32>
			LL_ASSERT(link->next);
   17b70:	4a71      	ldr	r2, [pc, #452]	; (17d38 <ull_conn_tx_ack+0x334>)
   17b72:	4975      	ldr	r1, [pc, #468]	; (17d48 <ull_conn_tx_ack+0x344>)
   17b74:	4872      	ldr	r0, [pc, #456]	; (17d40 <ull_conn_tx_ack+0x33c>)
   17b76:	f240 53a7 	movw	r3, #1447	; 0x5a7
   17b7a:	f008 ff30 	bl	209de <printk>
   17b7e:	4040      	eors	r0, r0
   17b80:	f380 8811 	msr	BASEPRI, r0
   17b84:	f04f 0003 	mov.w	r0, #3
   17b88:	df02      	svc	2
   17b8a:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   17b8c:	496f      	ldr	r1, [pc, #444]	; (17d4c <ull_conn_tx_ack+0x348>)
   17b8e:	f7f7 fc81 	bl	f494 <mem_release>
			return conn;
   17b92:	e750      	b.n	17a36 <ull_conn_tx_ack+0x32>
		if (link->next == (void *)tx) {
   17b94:	6838      	ldr	r0, [r7, #0]
   17b96:	42a0      	cmp	r0, r4
   17b98:	f47f af61 	bne.w	17a5e <ull_conn_tx_ack+0x5a>
   17b9c:	e7f6      	b.n	17b8c <ull_conn_tx_ack+0x188>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17b9e:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   17ba2:	2202      	movs	r2, #2
   17ba4:	f362 0301 	bfi	r3, r2, #0, #2
   17ba8:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		if (conn->lll.role) {
   17bac:	f996 303d 	ldrsb.w	r3, [r6, #61]	; 0x3d
   17bb0:	2b00      	cmp	r3, #0
   17bb2:	db7e      	blt.n	17cb2 <ull_conn_tx_ack+0x2ae>
		conn->llcp_phy.pause_tx = 0U;
   17bb4:	f896 31af 	ldrb.w	r3, [r6, #431]	; 0x1af
   17bb8:	f36f 0300 	bfc	r3, #0, #1
   17bbc:	f886 31af 	strb.w	r3, [r6, #431]	; 0x1af
		break;
   17bc0:	e749      	b.n	17a56 <ull_conn_tx_ack+0x52>
			conn->llcp_enc.pause_tx = 1U;
   17bc2:	f896 3156 	ldrb.w	r3, [r6, #342]	; 0x156
   17bc6:	f043 0302 	orr.w	r3, r3, #2
   17bca:	f886 3156 	strb.w	r3, [r6, #342]	; 0x156
   17bce:	e742      	b.n	17a56 <ull_conn_tx_ack+0x52>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   17bd0:	7a23      	ldrb	r3, [r4, #8]
   17bd2:	2b03      	cmp	r3, #3
   17bd4:	f47f af3f 	bne.w	17a56 <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_rx = 0U;
   17bd8:	f896 3156 	ldrb.w	r3, [r6, #342]	; 0x156
   17bdc:	f023 0303 	bic.w	r3, r3, #3
   17be0:	f886 3156 	strb.w	r3, [r6, #342]	; 0x156
		conn->procedure_expire = 0U;
   17be4:	2300      	movs	r3, #0
   17be6:	f8a6 30d0 	strh.w	r3, [r6, #208]	; 0xd0
		break;
   17bea:	e734      	b.n	17a56 <ull_conn_tx_ack+0x52>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   17bec:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
   17bf0:	f890 319d 	ldrb.w	r3, [r0, #413]	; 0x19d
   17bf4:	428b      	cmp	r3, r1
   17bf6:	f43f af2e 	beq.w	17a56 <ull_conn_tx_ack+0x52>
			switch (conn->llcp_length.state) {
   17bfa:	f890 219e 	ldrb.w	r2, [r0, #414]	; 0x19e
   17bfe:	f002 0307 	and.w	r3, r2, #7
   17c02:	2b03      	cmp	r3, #3
   17c04:	d004      	beq.n	17c10 <ull_conn_tx_ack+0x20c>
   17c06:	3303      	adds	r3, #3
   17c08:	f003 0307 	and.w	r3, r3, #7
   17c0c:	2b01      	cmp	r3, #1
   17c0e:	d8c1      	bhi.n	17b94 <ull_conn_tx_ack+0x190>
				conn->lll.max_tx_octets =
   17c10:	f8b6 31a2 	ldrh.w	r3, [r6, #418]	; 0x1a2
   17c14:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
				conn->lll.max_tx_time =
   17c18:	f8b6 31a6 	ldrh.w	r3, [r6, #422]	; 0x1a6
   17c1c:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
				if (conn->llcp_length.state ==
   17c20:	f002 0307 	and.w	r3, r2, #7
   17c24:	2b05      	cmp	r3, #5
   17c26:	d077      	beq.n	17d18 <ull_conn_tx_ack+0x314>
				if (!conn->llcp_length.cache.tx_octets) {
   17c28:	f8b6 31a8 	ldrh.w	r3, [r6, #424]	; 0x1a8
   17c2c:	2b00      	cmp	r3, #0
   17c2e:	d165      	bne.n	17cfc <ull_conn_tx_ack+0x2f8>
					conn->llcp_length.ack =
   17c30:	f886 119d 	strb.w	r1, [r6, #413]	; 0x19d
					conn->procedure_expire = 0U;
   17c34:	f8a6 30d0 	strh.w	r3, [r6, #208]	; 0xd0
					break;
   17c38:	e70d      	b.n	17a56 <ull_conn_tx_ack+0x52>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17c3a:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   17c3e:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
   17c42:	f3c3 0382 	ubfx	r3, r3, #2, #3
			lll->phy_tx_time = phy_tx_time[phys];
   17c46:	f363 1206 	bfi	r2, r3, #4, #3
   17c4a:	f886 2068 	strb.w	r2, [r6, #104]	; 0x68
   17c4e:	e7b1      	b.n	17bb4 <ull_conn_tx_ack+0x1b0>
   17c50:	f8d4 3012 	ldr.w	r3, [r4, #18]
   17c54:	f8d4 2016 	ldr.w	r2, [r4, #22]
   17c58:	f8c0 20f6 	str.w	r2, [r0, #246]	; 0xf6
   17c5c:	f8c0 30f2 	str.w	r3, [r0, #242]	; 0xf2
   17c60:	f8d4 301a 	ldr.w	r3, [r4, #26]
   17c64:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
		conn->llcp_enc.pause_tx = 1U;
   17c68:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
   17c6c:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
   17c70:	f886 3156 	strb.w	r3, [r6, #342]	; 0x156
		conn->procedure_expire = conn->procedure_reload;
   17c74:	f8b6 30ce 	ldrh.w	r3, [r6, #206]	; 0xce
   17c78:	f8a6 30d0 	strh.w	r3, [r6, #208]	; 0xd0
		conn->llcp_enc.ack = conn->llcp_enc.req;
   17c7c:	f896 3154 	ldrb.w	r3, [r6, #340]	; 0x154
   17c80:	f886 3155 	strb.w	r3, [r6, #341]	; 0x155
		break;
   17c84:	e6e7      	b.n	17a56 <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_tx = 1U;
   17c86:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
   17c8a:	f023 0306 	bic.w	r3, r3, #6
   17c8e:	f043 0306 	orr.w	r3, r3, #6
   17c92:	e7ed      	b.n	17c70 <ull_conn_tx_ack+0x26c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   17c94:	f890 319e 	ldrb.w	r3, [r0, #414]	; 0x19e
   17c98:	2202      	movs	r2, #2
   17c9a:	f362 0302 	bfi	r3, r2, #0, #3
   17c9e:	f880 319e 	strb.w	r3, [r0, #414]	; 0x19e
		break;
   17ca2:	e6d8      	b.n	17a56 <ull_conn_tx_ack+0x52>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   17ca4:	7a21      	ldrb	r1, [r4, #8]
   17ca6:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   17ca8:	bf08      	it	eq
   17caa:	2116      	moveq	r1, #22
   17cac:	f7ff fb0c 	bl	172c8 <conn_cleanup>
	break;
   17cb0:	e6d1      	b.n	17a56 <ull_conn_tx_ack+0x52>
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17cb2:	4b27      	ldr	r3, [pc, #156]	; (17d50 <ull_conn_tx_ack+0x34c>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   17cb4:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17cb8:	e893 0003 	ldmia.w	r3, {r0, r1}
   17cbc:	ab02      	add	r3, sp, #8
   17cbe:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   17cc2:	f896 31ae 	ldrb.w	r3, [r6, #430]	; 0x1ae
   17cc6:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   17cca:	f003 0307 	and.w	r3, r3, #7
   17cce:	3308      	adds	r3, #8
   17cd0:	446b      	add	r3, sp
   17cd2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   17cd6:	e7b6      	b.n	17c46 <ull_conn_tx_ack+0x242>
		if (!conn->tx_ctrl) {
   17cd8:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
   17cdc:	2a00      	cmp	r2, #0
   17cde:	f47f af38 	bne.w	17b52 <ull_conn_tx_ack+0x14e>
			tx->next = conn->tx_head;
   17ce2:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   17ce4:	e9c6 446d 	strd	r4, r4, [r6, #436]	; 0x1b4
				conn->tx_ctrl_last = tx;
   17ce8:	f8c6 41bc 	str.w	r4, [r6, #444]	; 0x1bc
   17cec:	e739      	b.n	17b62 <ull_conn_tx_ack+0x15e>
		if (link->next == (void *)tx) {
   17cee:	683b      	ldr	r3, [r7, #0]
		conn->tx_data_last = tx;
   17cf0:	f8c6 41c4 	str.w	r4, [r6, #452]	; 0x1c4
		if (link->next == (void *)tx) {
   17cf4:	2b00      	cmp	r3, #0
   17cf6:	f47f ae9e 	bne.w	17a36 <ull_conn_tx_ack+0x32>
   17cfa:	e739      	b.n	17b70 <ull_conn_tx_ack+0x16c>
				conn->llcp_length.tx_octets =
   17cfc:	f8a6 31a2 	strh.w	r3, [r6, #418]	; 0x1a2
				conn->llcp_length.cache.tx_octets = 0;
   17d00:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17d02:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   17d06:	f8a6 31a8 	strh.w	r3, [r6, #424]	; 0x1a8
				conn->llcp_length.tx_time =
   17d0a:	f8b6 31aa 	ldrh.w	r3, [r6, #426]	; 0x1aa
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17d0e:	f886 219e 	strb.w	r2, [r6, #414]	; 0x19e
				conn->llcp_length.tx_time =
   17d12:	f8a6 31a6 	strh.w	r3, [r6, #422]	; 0x1a6
				break;
   17d16:	e69e      	b.n	17a56 <ull_conn_tx_ack+0x52>
					conn->llcp_length.state =
   17d18:	2304      	movs	r3, #4
   17d1a:	f363 0202 	bfi	r2, r3, #0, #3
   17d1e:	f886 219e 	strb.w	r2, [r6, #414]	; 0x19e
					break;
   17d22:	e698      	b.n	17a56 <ull_conn_tx_ack+0x52>
			tx->next = conn->tx_head->next;
   17d24:	681a      	ldr	r2, [r3, #0]
   17d26:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   17d28:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   17d2a:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   17d2c:	e9c6 446e 	strd	r4, r4, [r6, #440]	; 0x1b8
   17d30:	e717      	b.n	17b62 <ull_conn_tx_ack+0x15e>
   17d32:	bf00      	nop
   17d34:	20002830 	.word	0x20002830
   17d38:	000277f0 	.word	0x000277f0
   17d3c:	000279f0 	.word	0x000279f0
   17d40:	000272c0 	.word	0x000272c0
   17d44:	000279e4 	.word	0x000279e4
   17d48:	000279fc 	.word	0x000279fc
   17d4c:	20002a78 	.word	0x20002a78
   17d50:	00027a08 	.word	0x00027a08

00017d54 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   17d54:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   17d58:	f890 20ec 	ldrb.w	r2, [r0, #236]	; 0xec
   17d5c:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   17d5e:	bf03      	ittte	eq
   17d60:	3301      	addeq	r3, #1
   17d62:	f880 30ec 	strbeq.w	r3, [r0, #236]	; 0xec
	return 0;
   17d66:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   17d68:	200c      	movne	r0, #12
}
   17d6a:	4770      	bx	lr

00017d6c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   17d6c:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   17d70:	f3c2 1302 	ubfx	r3, r2, #4, #3
   17d74:	2b02      	cmp	r3, #2
   17d76:	d012      	beq.n	17d9e <ull_conn_lll_max_tx_octets_get+0x32>
   17d78:	2b04      	cmp	r3, #4
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   17d7a:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
	switch (lll->phy_tx_time) {
   17d7e:	d014      	beq.n	17daa <ull_conn_lll_max_tx_octets_get+0x3e>
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   17d80:	08db      	lsrs	r3, r3, #3
   17d82:	3b0a      	subs	r3, #10
   17d84:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   17d86:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
	return max_tx_octets;
   17d8a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
	if (lll->enc_tx) {
   17d8e:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   17d90:	bf44      	itt	mi
   17d92:	3b04      	submi	r3, #4
   17d94:	b29b      	uxthmi	r3, r3
}
   17d96:	4298      	cmp	r0, r3
   17d98:	bf28      	it	cs
   17d9a:	4618      	movcs	r0, r3
   17d9c:	4770      	bx	lr
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   17d9e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   17da2:	089b      	lsrs	r3, r3, #2
   17da4:	3b0b      	subs	r3, #11
   17da6:	b29b      	uxth	r3, r3
		break;
   17da8:	e7ed      	b.n	17d86 <ull_conn_lll_max_tx_octets_get+0x1a>
		if (lll->phy_flags & 0x01) {
   17daa:	0711      	lsls	r1, r2, #28
			max_tx_octets = ((lll->max_tx_time - 592) >>
   17dac:	bf4b      	itete	mi
   17dae:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
			max_tx_octets = ((lll->max_tx_time - 430) >>
   17db2:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
			max_tx_octets = ((lll->max_tx_time - 592) >>
   17db6:	119b      	asrmi	r3, r3, #6
			max_tx_octets = ((lll->max_tx_time - 430) >>
   17db8:	111b      	asrpl	r3, r3, #4
					  4) - 2;
   17dba:	3b02      	subs	r3, #2
			max_tx_octets = ((lll->max_tx_time - 430) >>
   17dbc:	b29b      	uxth	r3, r3
   17dbe:	e7e2      	b.n	17d86 <ull_conn_lll_max_tx_octets_get+0x1a>

00017dc0 <ull_conn_upd_curr_reset>:
	conn_upd_curr = NULL;
   17dc0:	4b01      	ldr	r3, [pc, #4]	; (17dc8 <ull_conn_upd_curr_reset+0x8>)
   17dc2:	2200      	movs	r2, #0
   17dc4:	601a      	str	r2, [r3, #0]
}
   17dc6:	4770      	bx	lr
   17dc8:	200029fc 	.word	0x200029fc

00017dcc <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17dcc:	b900      	cbnz	r0, 17dd0 <ticker_op_cb+0x4>
   17dce:	4770      	bx	lr
{
   17dd0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17dd2:	4a07      	ldr	r2, [pc, #28]	; (17df0 <ticker_op_cb+0x24>)
   17dd4:	4907      	ldr	r1, [pc, #28]	; (17df4 <ticker_op_cb+0x28>)
   17dd6:	4808      	ldr	r0, [pc, #32]	; (17df8 <ticker_op_cb+0x2c>)
   17dd8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   17ddc:	f008 fdff 	bl	209de <printk>
   17de0:	4040      	eors	r0, r0
   17de2:	f380 8811 	msr	BASEPRI, r0
   17de6:	f04f 0003 	mov.w	r0, #3
   17dea:	df02      	svc	2
}
   17dec:	bd08      	pop	{r3, pc}
   17dee:	bf00      	nop
   17df0:	00027a28 	.word	0x00027a28
   17df4:	0002785c 	.word	0x0002785c
   17df8:	000272c0 	.word	0x000272c0

00017dfc <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17dfc:	2801      	cmp	r0, #1
   17dfe:	d000      	beq.n	17e02 <ticker_op_stop_adv_cb+0x6>
   17e00:	4770      	bx	lr
{
   17e02:	b510      	push	{r4, lr}
   17e04:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17e06:	f7fb ff03 	bl	13c10 <ull_disable_mark_get>
   17e0a:	4284      	cmp	r4, r0
   17e0c:	d00c      	beq.n	17e28 <ticker_op_stop_adv_cb+0x2c>
   17e0e:	4a07      	ldr	r2, [pc, #28]	; (17e2c <ticker_op_stop_adv_cb+0x30>)
   17e10:	4907      	ldr	r1, [pc, #28]	; (17e30 <ticker_op_stop_adv_cb+0x34>)
   17e12:	4808      	ldr	r0, [pc, #32]	; (17e34 <ticker_op_stop_adv_cb+0x38>)
   17e14:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
   17e18:	f008 fde1 	bl	209de <printk>
   17e1c:	4040      	eors	r0, r0
   17e1e:	f380 8811 	msr	BASEPRI, r0
   17e22:	f04f 0003 	mov.w	r0, #3
   17e26:	df02      	svc	2
}
   17e28:	bd10      	pop	{r4, pc}
   17e2a:	bf00      	nop
   17e2c:	00027a28 	.word	0x00027a28
   17e30:	00027a6c 	.word	0x00027a6c
   17e34:	000272c0 	.word	0x000272c0

00017e38 <ull_slave_ticker_cb>:
{
   17e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e3a:	4605      	mov	r5, r0
   17e3c:	460f      	mov	r7, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17e3e:	4601      	mov	r1, r0
   17e40:	4618      	mov	r0, r3
{
   17e42:	461c      	mov	r4, r3
   17e44:	4616      	mov	r6, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17e46:	f7e9 fc3f 	bl	16c8 <ull_conn_llcp>
		if (ret) {
   17e4a:	2800      	cmp	r0, #0
   17e4c:	d138      	bne.n	17ec0 <ull_slave_ticker_cb+0x88>
   17e4e:	7c23      	ldrb	r3, [r4, #16]
   17e50:	3301      	adds	r3, #1
   17e52:	b2db      	uxtb	r3, r3
   17e54:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   17e56:	b32b      	cbz	r3, 17ea4 <ull_slave_ticker_cb+0x6c>
	p.ticks_at_expire = ticks_at_expire;
   17e58:	481a      	ldr	r0, [pc, #104]	; (17ec4 <ull_slave_ticker_cb+0x8c>)
	mfy.param = &p;
   17e5a:	4b1b      	ldr	r3, [pc, #108]	; (17ec8 <ull_slave_ticker_cb+0x90>)
	p.ticks_at_expire = ticks_at_expire;
   17e5c:	6005      	str	r5, [r0, #0]
	p.param = &conn->lll;
   17e5e:	f104 021c 	add.w	r2, r4, #28
   17e62:	60c2      	str	r2, [r0, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17e64:	2200      	movs	r2, #0
	p.remainder = remainder;
   17e66:	6047      	str	r7, [r0, #4]
	p.lazy = lazy;
   17e68:	8106      	strh	r6, [r0, #8]
	mfy.param = &p;
   17e6a:	6098      	str	r0, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17e6c:	4611      	mov	r1, r2
   17e6e:	2001      	movs	r0, #1
   17e70:	f7f7 fbce 	bl	f610 <mayfly_enqueue>
	LL_ASSERT(!err);
   17e74:	b940      	cbnz	r0, 17e88 <ull_slave_ticker_cb+0x50>
	ull_conn_tx_demux(UINT8_MAX);
   17e76:	20ff      	movs	r0, #255	; 0xff
   17e78:	f7ff f9d6 	bl	17228 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17e7c:	4620      	mov	r0, r4
   17e7e:	21ff      	movs	r1, #255	; 0xff
}
   17e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17e84:	f7ff bc3a 	b.w	176fc <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
   17e88:	4a10      	ldr	r2, [pc, #64]	; (17ecc <ull_slave_ticker_cb+0x94>)
   17e8a:	4911      	ldr	r1, [pc, #68]	; (17ed0 <ull_slave_ticker_cb+0x98>)
   17e8c:	4811      	ldr	r0, [pc, #68]	; (17ed4 <ull_slave_ticker_cb+0x9c>)
   17e8e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   17e92:	f008 fda4 	bl	209de <printk>
   17e96:	4040      	eors	r0, r0
   17e98:	f380 8811 	msr	BASEPRI, r0
   17e9c:	f04f 0003 	mov.w	r0, #3
   17ea0:	df02      	svc	2
   17ea2:	e7e8      	b.n	17e76 <ull_slave_ticker_cb+0x3e>
	LL_ASSERT(ref);
   17ea4:	4a09      	ldr	r2, [pc, #36]	; (17ecc <ull_slave_ticker_cb+0x94>)
   17ea6:	490c      	ldr	r1, [pc, #48]	; (17ed8 <ull_slave_ticker_cb+0xa0>)
   17ea8:	480a      	ldr	r0, [pc, #40]	; (17ed4 <ull_slave_ticker_cb+0x9c>)
   17eaa:	f44f 73c8 	mov.w	r3, #400	; 0x190
   17eae:	f008 fd96 	bl	209de <printk>
   17eb2:	4040      	eors	r0, r0
   17eb4:	f380 8811 	msr	BASEPRI, r0
   17eb8:	f04f 0003 	mov.w	r0, #3
   17ebc:	df02      	svc	2
   17ebe:	e7cb      	b.n	17e58 <ull_slave_ticker_cb+0x20>
}
   17ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ec2:	bf00      	nop
   17ec4:	20002b50 	.word	0x20002b50
   17ec8:	20000578 	.word	0x20000578
   17ecc:	00027a28 	.word	0x00027a28
   17ed0:	00027578 	.word	0x00027578
   17ed4:	000272c0 	.word	0x000272c0
   17ed8:	000276e8 	.word	0x000276e8

00017edc <ll_start_enc_req_send>:
{
   17edc:	b538      	push	{r3, r4, r5, lr}
   17ede:	460c      	mov	r4, r1
   17ee0:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   17ee2:	f7fd fa1f 	bl	15324 <ll_connected_get>
	if (!conn) {
   17ee6:	2800      	cmp	r0, #0
   17ee8:	d048      	beq.n	17f7c <ll_start_enc_req_send+0xa0>
	if (error_code) {
   17eea:	4603      	mov	r3, r0
   17eec:	b9fc      	cbnz	r4, 17f2e <ll_start_enc_req_send+0x52>
		if ((conn->llcp_req == conn->llcp_ack) ||
   17eee:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   17ef2:	f890 20ed 	ldrb.w	r2, [r0, #237]	; 0xed
   17ef6:	4291      	cmp	r1, r2
   17ef8:	d037      	beq.n	17f6a <ll_start_enc_req_send+0x8e>
   17efa:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
   17efe:	2a03      	cmp	r2, #3
   17f00:	d133      	bne.n	17f6a <ll_start_enc_req_send+0x8e>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   17f02:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
   17f06:	f8d5 e000 	ldr.w	lr, [r5]
   17f0a:	f8d5 c004 	ldr.w	ip, [r5, #4]
   17f0e:	68a9      	ldr	r1, [r5, #8]
	return 0;
   17f10:	4620      	mov	r0, r4
   17f12:	68ec      	ldr	r4, [r5, #12]
   17f14:	f8c3 416d 	str.w	r4, [r3, #365]	; 0x16d
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   17f18:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   17f1c:	f8c3 e161 	str.w	lr, [r3, #353]	; 0x161
   17f20:	f8c3 c165 	str.w	ip, [r3, #357]	; 0x165
   17f24:	f8c3 1169 	str.w	r1, [r3, #361]	; 0x169
   17f28:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
}
   17f2c:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->llcp_enc.refresh == 0U) {
   17f2e:	f890 0156 	ldrb.w	r0, [r0, #342]	; 0x156
   17f32:	f010 0004 	ands.w	r0, r0, #4
   17f36:	d112      	bne.n	17f5e <ll_start_enc_req_send+0x82>
			if ((conn->llcp_req == conn->llcp_ack) ||
   17f38:	f893 10ec 	ldrb.w	r1, [r3, #236]	; 0xec
   17f3c:	f893 20ed 	ldrb.w	r2, [r3, #237]	; 0xed
   17f40:	4291      	cmp	r1, r2
   17f42:	d012      	beq.n	17f6a <ll_start_enc_req_send+0x8e>
   17f44:	f893 20ee 	ldrb.w	r2, [r3, #238]	; 0xee
   17f48:	2a03      	cmp	r2, #3
   17f4a:	d10e      	bne.n	17f6a <ll_start_enc_req_send+0x8e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   17f4c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
			conn->llcp.encryption.error_code = error_code;
   17f50:	f883 40f1 	strb.w	r4, [r3, #241]	; 0xf1
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   17f54:	f360 0201 	bfi	r2, r0, #0, #2
   17f58:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
   17f5c:	bd38      	pop	{r3, r4, r5, pc}
			    conn->llcp_terminate.req) {
   17f5e:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
			if (conn->llcp_terminate.ack !=
   17f62:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
   17f66:	428a      	cmp	r2, r1
   17f68:	d001      	beq.n	17f6e <ll_start_enc_req_send+0x92>
				return BT_HCI_ERR_CMD_DISALLOWED;
   17f6a:	200c      	movs	r0, #12
}
   17f6c:	bd38      	pop	{r3, r4, r5, pc}
			conn->llcp_terminate.req++;
   17f6e:	3201      	adds	r2, #1
			conn->llcp_terminate.reason_own = error_code;
   17f70:	f883 4132 	strb.w	r4, [r3, #306]	; 0x132
			conn->llcp_terminate.req++;
   17f74:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	return 0;
   17f78:	2000      	movs	r0, #0
}
   17f7a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17f7c:	2002      	movs	r0, #2
}
   17f7e:	bd38      	pop	{r3, r4, r5, pc}

00017f80 <ticker_op_stop_scan_cb>:
}

static void ticker_op_stop_scan_cb(uint32_t status, void *params)
{
	/* TODO: */
}
   17f80:	4770      	bx	lr
   17f82:	bf00      	nop

00017f84 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *params)
{
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17f84:	b900      	cbnz	r0, 17f88 <ticker_op_cb+0x4>
   17f86:	4770      	bx	lr
{
   17f88:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17f8a:	4a07      	ldr	r2, [pc, #28]	; (17fa8 <ticker_op_cb+0x24>)
   17f8c:	4907      	ldr	r1, [pc, #28]	; (17fac <ticker_op_cb+0x28>)
   17f8e:	4808      	ldr	r0, [pc, #32]	; (17fb0 <ticker_op_cb+0x2c>)
   17f90:	f44f 7347 	mov.w	r3, #796	; 0x31c
   17f94:	f008 fd23 	bl	209de <printk>
   17f98:	4040      	eors	r0, r0
   17f9a:	f380 8811 	msr	BASEPRI, r0
   17f9e:	f04f 0003 	mov.w	r0, #3
   17fa2:	df02      	svc	2
}
   17fa4:	bd08      	pop	{r3, pc}
   17fa6:	bf00      	nop
   17fa8:	00027ab0 	.word	0x00027ab0
   17fac:	0002785c 	.word	0x0002785c
   17fb0:	000272c0 	.word	0x000272c0

00017fb4 <ull_master_ticker_cb>:
{
   17fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fb6:	4605      	mov	r5, r0
   17fb8:	460f      	mov	r7, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17fba:	4601      	mov	r1, r0
   17fbc:	4618      	mov	r0, r3
{
   17fbe:	461c      	mov	r4, r3
   17fc0:	4616      	mov	r6, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17fc2:	f7e9 fb81 	bl	16c8 <ull_conn_llcp>
		if (ret) {
   17fc6:	2800      	cmp	r0, #0
   17fc8:	d13f      	bne.n	1804a <ull_master_ticker_cb+0x96>
   17fca:	7c23      	ldrb	r3, [r4, #16]
   17fcc:	3301      	adds	r3, #1
   17fce:	b2db      	uxtb	r3, r3
   17fd0:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   17fd2:	b363      	cbz	r3, 1802e <ull_master_ticker_cb+0x7a>
	ull_conn_tx_demux(1);
   17fd4:	2001      	movs	r0, #1
   17fd6:	f7ff f927 	bl	17228 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 1);
   17fda:	2101      	movs	r1, #1
   17fdc:	4620      	mov	r0, r4
   17fde:	f7ff fb8d 	bl	176fc <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   17fe2:	481a      	ldr	r0, [pc, #104]	; (1804c <ull_master_ticker_cb+0x98>)
	mfy.param = &p;
   17fe4:	4b1a      	ldr	r3, [pc, #104]	; (18050 <ull_master_ticker_cb+0x9c>)
	p.ticks_at_expire = ticks_at_expire;
   17fe6:	6005      	str	r5, [r0, #0]
	p.param = &conn->lll;
   17fe8:	f104 021c 	add.w	r2, r4, #28
   17fec:	60c2      	str	r2, [r0, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17fee:	2200      	movs	r2, #0
	p.remainder = remainder;
   17ff0:	6047      	str	r7, [r0, #4]
	p.lazy = lazy;
   17ff2:	8106      	strh	r6, [r0, #8]
	mfy.param = &p;
   17ff4:	6098      	str	r0, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17ff6:	4611      	mov	r1, r2
   17ff8:	2001      	movs	r0, #1
   17ffa:	f7f7 fb09 	bl	f610 <mayfly_enqueue>
	LL_ASSERT(!err);
   17ffe:	b940      	cbnz	r0, 18012 <ull_master_ticker_cb+0x5e>
	ull_conn_tx_demux(UINT8_MAX);
   18000:	20ff      	movs	r0, #255	; 0xff
   18002:	f7ff f911 	bl	17228 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   18006:	4620      	mov	r0, r4
   18008:	21ff      	movs	r1, #255	; 0xff
}
   1800a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1800e:	f7ff bb75 	b.w	176fc <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
   18012:	4a10      	ldr	r2, [pc, #64]	; (18054 <ull_master_ticker_cb+0xa0>)
   18014:	4910      	ldr	r1, [pc, #64]	; (18058 <ull_master_ticker_cb+0xa4>)
   18016:	4811      	ldr	r0, [pc, #68]	; (1805c <ull_master_ticker_cb+0xa8>)
   18018:	f44f 7342 	mov.w	r3, #776	; 0x308
   1801c:	f008 fcdf 	bl	209de <printk>
   18020:	4040      	eors	r0, r0
   18022:	f380 8811 	msr	BASEPRI, r0
   18026:	f04f 0003 	mov.w	r0, #3
   1802a:	df02      	svc	2
   1802c:	e7e8      	b.n	18000 <ull_master_ticker_cb+0x4c>
	LL_ASSERT(ref);
   1802e:	4a09      	ldr	r2, [pc, #36]	; (18054 <ull_master_ticker_cb+0xa0>)
   18030:	490b      	ldr	r1, [pc, #44]	; (18060 <ull_master_ticker_cb+0xac>)
   18032:	480a      	ldr	r0, [pc, #40]	; (1805c <ull_master_ticker_cb+0xa8>)
   18034:	f240 23f6 	movw	r3, #758	; 0x2f6
   18038:	f008 fcd1 	bl	209de <printk>
   1803c:	4040      	eors	r0, r0
   1803e:	f380 8811 	msr	BASEPRI, r0
   18042:	f04f 0003 	mov.w	r0, #3
   18046:	df02      	svc	2
   18048:	e7c4      	b.n	17fd4 <ull_master_ticker_cb+0x20>
}
   1804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1804c:	20002b68 	.word	0x20002b68
   18050:	20000588 	.word	0x20000588
   18054:	00027ab0 	.word	0x00027ab0
   18058:	00027578 	.word	0x00027578
   1805c:	000272c0 	.word	0x000272c0
   18060:	000276e8 	.word	0x000276e8

00018064 <ll_create_connection>:
{
   18064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18068:	b089      	sub	sp, #36	; 0x24
   1806a:	4680      	mov	r8, r0
   1806c:	9302      	str	r3, [sp, #8]
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   1806e:	2000      	movs	r0, #0
{
   18070:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   18074:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   18078:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
   1807c:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
   18080:	9303      	str	r3, [sp, #12]
   18082:	4689      	mov	r9, r1
   18084:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   18086:	f7fc fcc9 	bl	14a1c <ull_scan_is_disabled_get>
	if (!scan) {
   1808a:	2800      	cmp	r0, #0
   1808c:	f000 819e 	beq.w	183cc <ll_create_connection+0x368>
	if (lll->conn) {
   18090:	6a41      	ldr	r1, [r0, #36]	; 0x24
   18092:	4605      	mov	r5, r0
   18094:	b371      	cbz	r1, 180f4 <ll_create_connection+0x90>
	ull_filter_scan_update(filter_policy);
   18096:	4630      	mov	r0, r6
   18098:	f001 f820 	bl	190dc <ull_filter_scan_update>
	lll->rl_idx = FILTER_IDX_NONE;
   1809c:	23ff      	movs	r3, #255	; 0xff
   1809e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	lll->rpa_gen = 0;
   180a2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   180a6:	f36f 0300 	bfc	r3, #0, #1
   180aa:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   180ae:	b1ae      	cbz	r6, 180dc <ll_create_connection+0x78>
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   180b0:	f1aa 0302 	sub.w	r3, sl, #2
   180b4:	2b01      	cmp	r3, #1
   180b6:	f240 8153 	bls.w	18360 <ll_create_connection+0x2fc>
	scan->own_addr_type = own_addr_type;
   180ba:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   180be:	f36a 0342 	bfi	r3, sl, #1, #2
   180c2:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	err = lll_clock_wait();
   180c6:	f002 fd5f 	bl	1ab88 <lll_clock_wait>
	if (err) {
   180ca:	2800      	cmp	r0, #0
   180cc:	f040 8154 	bne.w	18378 <ll_create_connection+0x314>
	return ull_scan_enable(scan);
   180d0:	4628      	mov	r0, r5
   180d2:	f7e9 fa39 	bl	1548 <ull_scan_enable>
}
   180d6:	b009      	add	sp, #36	; 0x24
   180d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   180dc:	f001 fd42 	bl	19b64 <ull_filter_lll_rl_enabled>
   180e0:	2800      	cmp	r0, #0
   180e2:	d0e5      	beq.n	180b0 <ll_create_connection+0x4c>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   180e4:	9912      	ldr	r1, [sp, #72]	; 0x48
   180e6:	9802      	ldr	r0, [sp, #8]
   180e8:	4632      	mov	r2, r6
   180ea:	f001 f9e1 	bl	194b0 <ull_filter_rl_find>
   180ee:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   180f2:	e7dd      	b.n	180b0 <ll_create_connection+0x4c>
	link = ll_rx_link_alloc();
   180f4:	9105      	str	r1, [sp, #20]
   180f6:	f7fb fcd1 	bl	13a9c <ll_rx_link_alloc>
	if (!link) {
   180fa:	9004      	str	r0, [sp, #16]
   180fc:	2800      	cmp	r0, #0
   180fe:	f000 817a 	beq.w	183f6 <ll_create_connection+0x392>
	conn = ll_conn_acquire();
   18102:	f7fd f8f3 	bl	152ec <ll_conn_acquire>
	if (!conn) {
   18106:	9905      	ldr	r1, [sp, #20]
   18108:	4604      	mov	r4, r0
   1810a:	2800      	cmp	r0, #0
   1810c:	f000 8175 	beq.w	183fa <ll_create_connection+0x396>
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   18110:	4642      	mov	r2, r8
   18112:	464b      	mov	r3, r9
   18114:	f105 001c 	add.w	r0, r5, #28
   18118:	9600      	str	r6, [sp, #0]
   1811a:	9105      	str	r1, [sp, #20]
   1811c:	f7e9 f9ec 	bl	14f8 <ull_scan_params_set>
	lll->adv_addr_type = peer_addr_type;
   18120:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   18124:	9a02      	ldr	r2, [sp, #8]
	lll->conn_ticks_slot = 0; /* TODO: */
   18126:	9905      	ldr	r1, [sp, #20]
	lll->adv_addr_type = peer_addr_type;
   18128:	f362 1345 	bfi	r3, r2, #5, #1
   1812c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   18130:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18132:	681b      	ldr	r3, [r3, #0]
   18134:	f8c5 303b 	str.w	r3, [r5, #59]	; 0x3b
   18138:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1813a:	889b      	ldrh	r3, [r3, #4]
   1813c:	f8a5 303f 	strh.w	r3, [r5, #63]	; 0x3f
	lll->conn_ticks_slot = 0; /* TODO: */
   18140:	62a9      	str	r1, [r5, #40]	; 0x28
	lll->conn_timeout = timeout;
   18142:	862f      	strh	r7, [r5, #48]	; 0x30
	err = util_aa_le32(conn_lll->access_addr);
   18144:	f104 0024 	add.w	r0, r4, #36	; 0x24
   18148:	f7f7 fb72 	bl	f830 <util_aa_le32>
	conn_lll = &conn->lll;
   1814c:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
   18150:	2800      	cmp	r0, #0
   18152:	f040 813f 	bne.w	183d4 <ll_create_connection+0x370>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   18156:	2103      	movs	r1, #3
   18158:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1815c:	f002 fae8 	bl	1a730 <lll_csrand_get>
	conn_lll->latency = latency;
   18160:	9b03      	ldr	r3, [sp, #12]
	if (!conn_lll->link_tx_free) {
   18162:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	conn_lll->latency = latency;
   18164:	8623      	strh	r3, [r4, #48]	; 0x30
	conn_lll->handle = 0xFFFF;
   18166:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->interval = interval;
   1816a:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->handle = 0xFFFF;
   1816e:	85a3      	strh	r3, [r4, #44]	; 0x2c
	if (!conn_lll->link_tx_free) {
   18170:	2800      	cmp	r0, #0
   18172:	f000 813c 	beq.w	183ee <ll_create_connection+0x38a>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   18176:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   1817a:	f104 0270 	add.w	r2, r4, #112	; 0x70
   1817e:	f7f7 f9c5 	bl	f50c <memq_init>
	conn_lll->phy_tx = BIT(0);
   18182:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   18186:	4aad      	ldr	r2, [pc, #692]	; (1843c <ll_create_connection+0x3d8>)
	conn_lll->phy_tx = BIT(0);
   18188:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   1818c:	f023 0307 	bic.w	r3, r3, #7
   18190:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   18194:	f043 0301 	orr.w	r3, r3, #1
   18198:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	conn_lll->sn = 0;
   1819c:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
   181a0:	f023 0307 	bic.w	r3, r3, #7
   181a4:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   181a8:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
	conn_lll->link_tx_free = NULL;
   181ac:	f04f 0900 	mov.w	r9, #0
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   181b0:	e9c4 3218 	strd	r3, r2, [r4, #96]	; 0x60
	conn_lll->rssi_latest = 0x7F;
   181b4:	237f      	movs	r3, #127	; 0x7f
   181b6:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
	conn_lll->link_tx_free = NULL;
   181ba:	f8c4 907c 	str.w	r9, [r4, #124]	; 0x7c
	conn_lll->packet_tx_head_len = 0;
   181be:	f8a4 9080 	strh.w	r9, [r4, #128]	; 0x80
	conn_lll->latency_prepare = 0;
   181c2:	f8a4 9032 	strh.w	r9, [r4, #50]	; 0x32
	conn_lll->latency_event = 0;
   181c6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   181ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   181ce:	f000 fa7f 	bl	186d0 <ull_chan_map_get>
   181d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   181d6:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
   181da:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   181dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	lll_csrand_get(&hop, sizeof(uint8_t));
   181e0:	f10d 001f 	add.w	r0, sp, #31
   181e4:	f002 faa4 	bl	1a730 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   181e8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   181ec:	4b94      	ldr	r3, [pc, #592]	; (18440 <ll_create_connection+0x3dc>)
	conn_lll->data_chan_use = 0;
   181ee:	f884 903f 	strb.w	r9, [r4, #63]	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
   181f2:	fba3 1302 	umull	r1, r3, r3, r2
   181f6:	08db      	lsrs	r3, r3, #3
   181f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   181fc:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
   18200:	3305      	adds	r3, #5
	conn_interval_us = (uint32_t)interval * 1250U;
   18202:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->data_chan_hop = 5 + (hop % 12);
   18206:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	conn_lll->data_chan_sel = 0;
   1820a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   1820e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
	conn->supervision_expire = 0U;
   18210:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
	conn_interval_us = (uint32_t)interval * 1250U;
   18214:	fb02 fb0b 	mul.w	fp, r2, fp
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   18218:	4a8a      	ldr	r2, [pc, #552]	; (18444 <ll_create_connection+0x3e0>)
	conn->procedure_expire = 0U;
   1821a:	f8a4 90d0 	strh.w	r9, [r4, #208]	; 0xd0
	conn_lll->data_chan_sel = 0;
   1821e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   18222:	445a      	add	r2, fp
	conn_lll->data_chan_sel = 0;
   18224:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   18228:	fbb2 f2fb 	udiv	r2, r2, fp
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   1822c:	4b86      	ldr	r3, [pc, #536]	; (18448 <ll_create_connection+0x3e4>)
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   1822e:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->connect_expire = 6U;
   18232:	2206      	movs	r2, #6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   18234:	f242 7010 	movw	r0, #10000	; 0x2710
	conn->connect_expire = 6U;
   18238:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1823c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   18240:	fb00 2207 	mla	r2, r0, r7, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   18244:	445b      	add	r3, fp
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   18246:	1d88      	adds	r0, r1, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   18248:	fbb3 f3fb 	udiv	r3, r3, fp
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1824c:	fbb2 fbfb 	udiv	fp, r2, fp
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   18250:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   18252:	4282      	cmp	r2, r0
	conn->apto_expire = 0U;
   18254:	f8a4 90d8 	strh.w	r9, [r4, #216]	; 0xd8
	conn->appto_expire = 0U;
   18258:	f8a4 90d4 	strh.w	r9, [r4, #212]	; 0xd4
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1825c:	f8a4 b0ca 	strh.w	fp, [r4, #202]	; 0xca
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   18260:	f8a4 20d6 	strh.w	r2, [r4, #214]	; 0xd6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   18264:	dd02      	ble.n	1826c <ll_create_connection+0x208>
			     (conn->apto_reload - (conn_lll->latency + 6)) :
   18266:	1a52      	subs	r2, r2, r1
   18268:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   1826a:	b292      	uxth	r2, r2
	conn->llcp_terminate.node_rx.hdr.link = link;
   1826c:	9b04      	ldr	r3, [sp, #16]
   1826e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 0U;
   18272:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   18276:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
	conn->common.fex_valid = 0U;
   1827a:	f023 0303 	bic.w	r3, r3, #3
   1827e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   18282:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
	conn->llcp_conn_param.disabled = 0U;
   18286:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   1828a:	f023 0303 	bic.w	r3, r3, #3
   1828e:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   18292:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
   18296:	f023 0318 	bic.w	r3, r3, #24
   1829a:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   1829e:	f894 3156 	ldrb.w	r3, [r4, #342]	; 0x156
   182a2:	f023 0307 	bic.w	r3, r3, #7
   182a6:	f884 3156 	strb.w	r3, [r4, #342]	; 0x156
	conn->llcp_length.disabled = 0U;
   182aa:	f894 319e 	ldrb.w	r3, [r4, #414]	; 0x19e
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   182ae:	f04f 0900 	mov.w	r9, #0
	conn->llcp_length.disabled = 0U;
   182b2:	f369 03c3 	bfi	r3, r9, #3, #1
	conn->llcp_conn_param.disabled = 0U;
   182b6:	f369 1204 	bfi	r2, r9, #4, #1
	conn->llcp_length.disabled = 0U;
   182ba:	f884 319e 	strb.w	r3, [r4, #414]	; 0x19e
	conn->llcp_feature.features_conn = LL_FEAT;
   182be:	4b63      	ldr	r3, [pc, #396]	; (1844c <ll_create_connection+0x3e8>)
	conn->llcp_conn_param.disabled = 0U;
   182c0:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->llcp_feature.features_conn = LL_FEAT;
   182c4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   182c8:	f8a4 90ec 	strh.w	r9, [r4, #236]	; 0xec
   182cc:	f884 90ee 	strb.w	r9, [r4, #238]	; 0xee
	conn->llcp_rx = NULL;
   182d0:	f8c4 9104 	str.w	r9, [r4, #260]	; 0x104
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   182d4:	f8a4 9108 	strh.w	r9, [r4, #264]	; 0x108
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   182d8:	f8a4 911c 	strh.w	r9, [r4, #284]	; 0x11c
	conn->llcp_feature.features_peer = 0;
   182dc:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   182e0:	f8a4 9128 	strh.w	r9, [r4, #296]	; 0x128
	conn->llcp_terminate.reason_peer = 0U;
   182e4:	f884 9133 	strb.w	r9, [r4, #307]	; 0x133
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   182e8:	f8a4 9154 	strh.w	r9, [r4, #340]	; 0x154
	conn->llcp_conn_param.req = 0U;
   182ec:	f8a4 9174 	strh.w	r9, [r4, #372]	; 0x174
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   182f0:	f8a4 919c 	strh.w	r9, [r4, #412]	; 0x19c
	conn->llcp_length.cache.tx_octets = 0U;
   182f4:	f8a4 91a8 	strh.w	r9, [r4, #424]	; 0x1a8
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   182f8:	f7fd fb4e 	bl	15998 <ull_conn_default_tx_octets_get>
   182fc:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
	conn->default_tx_time = ull_conn_default_tx_time_get();
   18300:	f7fd fb50 	bl	159a4 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   18304:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
   18308:	4b51      	ldr	r3, [pc, #324]	; (18450 <ll_create_connection+0x3ec>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   1830a:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   1830e:	4013      	ands	r3, r2
   18310:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   18314:	f7fd fb4c 	bl	159b0 <ull_conn_default_phy_tx_get>
   18318:	f894 31b0 	ldrb.w	r3, [r4, #432]	; 0x1b0
   1831c:	f360 0302 	bfi	r3, r0, #0, #3
   18320:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   18324:	f7fd fb4a 	bl	159bc <ull_conn_default_phy_rx_get>
	conn->phy_pref_flags = 0U;
   18328:	f894 21b0 	ldrb.w	r2, [r4, #432]	; 0x1b0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   1832c:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
	conn->phy_pref_flags = 0U;
   18330:	0103      	lsls	r3, r0, #4
   18332:	f003 0370 	and.w	r3, r3, #112	; 0x70
   18336:	f022 0278 	bic.w	r2, r2, #120	; 0x78
   1833a:	4313      	orrs	r3, r2
   1833c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
	conn->tx_data = conn->tx_data_last = 0;
   18340:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   18344:	e9c4 996e 	strd	r9, r9, [r4, #440]	; 0x1b8
	lll->conn = conn_lll;
   18348:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
	hdr->is_stop = 0U;
   1834c:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->parent = parent;
   18350:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
   18352:	f369 0300 	bfi	r3, r9, #0, #1
	hdr->disabled_cb = hdr->disabled_param = NULL;
   18356:	e9c4 9905 	strd	r9, r9, [r4, #20]
   1835a:	f884 3020 	strb.w	r3, [r4, #32]
}
   1835e:	e69a      	b.n	18096 <ll_create_connection+0x32>
		ull_filter_rpa_update(false);
   18360:	2000      	movs	r0, #0
   18362:	f000 ff69 	bl	19238 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   18366:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1836a:	f043 0301 	orr.w	r3, r3, #1
		own_addr_type &= 0x1;
   1836e:	f00a 0a01 	and.w	sl, sl, #1
		lll->rpa_gen = 1;
   18372:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   18376:	e6a0      	b.n	180ba <ll_create_connection+0x56>

static inline void conn_release(struct ll_scan_set *scan)
{
	struct lll_conn *lll = scan->lll.conn;
   18378:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	struct node_rx_pdu *cc;
	struct ll_conn *conn;
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   1837a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1837c:	b163      	cbz	r3, 18398 <ll_create_connection+0x334>
   1837e:	4a35      	ldr	r2, [pc, #212]	; (18454 <ll_create_connection+0x3f0>)
   18380:	4935      	ldr	r1, [pc, #212]	; (18458 <ll_create_connection+0x3f4>)
   18382:	4836      	ldr	r0, [pc, #216]	; (1845c <ll_create_connection+0x3f8>)
   18384:	f240 3326 	movw	r3, #806	; 0x326
   18388:	f008 fb29 	bl	209de <printk>
   1838c:	4040      	eors	r0, r0
   1838e:	f380 8811 	msr	BASEPRI, r0
   18392:	f04f 0003 	mov.w	r0, #3
   18396:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   18398:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1839c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   183a0:	f7f7 f8b8 	bl	f514 <memq_deinit>
	LL_ASSERT(link);
   183a4:	4606      	mov	r6, r0
   183a6:	2800      	cmp	r0, #0
   183a8:	d03a      	beq.n	18420 <ll_create_connection+0x3bc>
	lll->link_tx_free = link;

	conn = (void *)HDR_LLL2EVT(lll);
   183aa:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   183ac:	6626      	str	r6, [r4, #96]	; 0x60

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   183ae:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
	LL_ASSERT(link);
   183b2:	b33c      	cbz	r4, 18404 <ll_create_connection+0x3a0>

	ll_rx_link_release(link);
   183b4:	4620      	mov	r0, r4
   183b6:	f7fb fb77 	bl	13aa8 <ll_rx_link_release>

	ll_conn_release(conn);
   183ba:	4638      	mov	r0, r7
   183bc:	f7fc ff9c 	bl	152f8 <ll_conn_release>
	scan->lll.conn = NULL;
   183c0:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   183c2:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   183c4:	626b      	str	r3, [r5, #36]	; 0x24
}
   183c6:	b009      	add	sp, #36	; 0x24
   183c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   183cc:	200c      	movs	r0, #12
}
   183ce:	b009      	add	sp, #36	; 0x24
   183d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   183d4:	4a1f      	ldr	r2, [pc, #124]	; (18454 <ll_create_connection+0x3f0>)
   183d6:	4922      	ldr	r1, [pc, #136]	; (18460 <ll_create_connection+0x3fc>)
   183d8:	4820      	ldr	r0, [pc, #128]	; (1845c <ll_create_connection+0x3f8>)
   183da:	2398      	movs	r3, #152	; 0x98
   183dc:	f008 faff 	bl	209de <printk>
   183e0:	4040      	eors	r0, r0
   183e2:	f380 8811 	msr	BASEPRI, r0
   183e6:	f04f 0003 	mov.w	r0, #3
   183ea:	df02      	svc	2
   183ec:	e6b3      	b.n	18156 <ll_create_connection+0xf2>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   183ee:	f104 0074 	add.w	r0, r4, #116	; 0x74
   183f2:	67e0      	str	r0, [r4, #124]	; 0x7c
   183f4:	e6bf      	b.n	18176 <ll_create_connection+0x112>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   183f6:	2007      	movs	r0, #7
   183f8:	e66d      	b.n	180d6 <ll_create_connection+0x72>
		ll_rx_link_release(link);
   183fa:	9804      	ldr	r0, [sp, #16]
   183fc:	f7fb fb54 	bl	13aa8 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18400:	2007      	movs	r0, #7
   18402:	e668      	b.n	180d6 <ll_create_connection+0x72>
	LL_ASSERT(link);
   18404:	4a13      	ldr	r2, [pc, #76]	; (18454 <ll_create_connection+0x3f0>)
   18406:	4917      	ldr	r1, [pc, #92]	; (18464 <ll_create_connection+0x400>)
   18408:	4814      	ldr	r0, [pc, #80]	; (1845c <ll_create_connection+0x3f8>)
   1840a:	f240 332f 	movw	r3, #815	; 0x32f
   1840e:	f008 fae6 	bl	209de <printk>
   18412:	4040      	eors	r0, r0
   18414:	f380 8811 	msr	BASEPRI, r0
   18418:	f04f 0003 	mov.w	r0, #3
   1841c:	df02      	svc	2
   1841e:	e7c9      	b.n	183b4 <ll_create_connection+0x350>
	LL_ASSERT(link);
   18420:	4a0c      	ldr	r2, [pc, #48]	; (18454 <ll_create_connection+0x3f0>)
   18422:	4910      	ldr	r1, [pc, #64]	; (18464 <ll_create_connection+0x400>)
   18424:	480d      	ldr	r0, [pc, #52]	; (1845c <ll_create_connection+0x3f8>)
   18426:	f44f 734a 	mov.w	r3, #808	; 0x328
   1842a:	f008 fad8 	bl	209de <printk>
   1842e:	4040      	eors	r0, r0
   18430:	f380 8811 	msr	BASEPRI, r0
   18434:	f04f 0003 	mov.w	r0, #3
   18438:	df02      	svc	2
   1843a:	e7b6      	b.n	183aa <ll_create_connection+0x346>
   1843c:	01480148 	.word	0x01480148
   18440:	aaaaaaab 	.word	0xaaaaaaab
   18444:	026259ff 	.word	0x026259ff
   18448:	01c9c37f 	.word	0x01c9c37f
   1844c:	000149ff 	.word	0x000149ff
   18450:	f6ff0000 	.word	0xf6ff0000
   18454:	00027ab0 	.word	0x00027ab0
   18458:	0002775c 	.word	0x0002775c
   1845c:	000272c0 	.word	0x000272c0
   18460:	00027578 	.word	0x00027578
   18464:	00027854 	.word	0x00027854

00018468 <ll_connect_disable>:
{
   18468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1846c:	4607      	mov	r7, r0
	scan = ull_scan_is_enabled_get(0);
   1846e:	2000      	movs	r0, #0
   18470:	f7fc fac6 	bl	14a00 <ull_scan_is_enabled_get>
	if (!scan) {
   18474:	b328      	cbz	r0, 184c2 <ll_connect_disable+0x5a>
	conn_lll = scan->lll.conn;
   18476:	6a46      	ldr	r6, [r0, #36]	; 0x24
	if (!conn_lll) {
   18478:	4604      	mov	r4, r0
   1847a:	b316      	cbz	r6, 184c2 <ll_connect_disable+0x5a>
	status = ull_scan_disable(0, scan);
   1847c:	4601      	mov	r1, r0
   1847e:	2000      	movs	r0, #0
   18480:	f7fc f9b2 	bl	147e8 <ull_scan_disable>
	if (!status) {
   18484:	4605      	mov	r5, r0
   18486:	b9c8      	cbnz	r0, 184bc <ll_connect_disable+0x54>
		struct ll_conn *conn = (void *)HDR_LLL2EVT(conn_lll);
   18488:	6836      	ldr	r6, [r6, #0]
		link = cc->hdr.link;
   1848a:	f8d6 8134 	ldr.w	r8, [r6, #308]	; 0x134
		cc = (void *)&conn->llcp_terminate.node_rx;
   1848e:	f506 799a 	add.w	r9, r6, #308	; 0x134
		LL_ASSERT(link);
   18492:	f1b8 0f00 	cmp.w	r8, #0
   18496:	d018      	beq.n	184ca <ll_connect_disable+0x62>
		ll_rx_link_release(link);
   18498:	4640      	mov	r0, r8
   1849a:	f7fb fb05 	bl	13aa8 <ll_rx_link_release>
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
   1849e:	230a      	movs	r3, #10
   184a0:	f886 3138 	strb.w	r3, [r6, #312]	; 0x138
		cc->hdr.handle = 0xffff;
   184a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   184a8:	f8a6 313a 	strh.w	r3, [r6, #314]	; 0x13a
		ftr->param = &scan->lll;
   184ac:	341c      	adds	r4, #28
		*((uint8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   184ae:	2302      	movs	r3, #2
		ftr->param = &scan->lll;
   184b0:	f8c6 413c 	str.w	r4, [r6, #316]	; 0x13c
		*((uint8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
   184b4:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		*rx = cc;
   184b8:	f8c7 9000 	str.w	r9, [r7]
}
   184bc:	4628      	mov	r0, r5
   184be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   184c2:	250c      	movs	r5, #12
}
   184c4:	4628      	mov	r0, r5
   184c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   184ca:	4a07      	ldr	r2, [pc, #28]	; (184e8 <ll_connect_disable+0x80>)
   184cc:	4907      	ldr	r1, [pc, #28]	; (184ec <ll_connect_disable+0x84>)
   184ce:	4808      	ldr	r0, [pc, #32]	; (184f0 <ll_connect_disable+0x88>)
   184d0:	f44f 73c9 	mov.w	r3, #402	; 0x192
   184d4:	f008 fa83 	bl	209de <printk>
   184d8:	4040      	eors	r0, r0
   184da:	f380 8811 	msr	BASEPRI, r0
   184de:	f04f 0003 	mov.w	r0, #3
   184e2:	df02      	svc	2
   184e4:	e7d8      	b.n	18498 <ll_connect_disable+0x30>
   184e6:	bf00      	nop
   184e8:	00027ab0 	.word	0x00027ab0
   184ec:	00027854 	.word	0x00027854
   184f0:	000272c0 	.word	0x000272c0

000184f4 <ll_chm_update>:
{
   184f4:	b538      	push	{r3, r4, r5, lr}
   184f6:	4605      	mov	r5, r0
	ull_chan_map_set(chm);
   184f8:	f000 f8f8 	bl	186ec <ull_chan_map_set>
		conn = ll_connected_get(handle);
   184fc:	2000      	movs	r0, #0
   184fe:	f7fc ff11 	bl	15324 <ll_connected_get>
		if (!conn || conn->lll.role) {
   18502:	4604      	mov	r4, r0
   18504:	b1d8      	cbz	r0, 1853e <ll_chm_update+0x4a>
   18506:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1850a:	2b00      	cmp	r3, #0
   1850c:	db17      	blt.n	1853e <ll_chm_update+0x4a>
		ret = ull_conn_llcp_req(conn);
   1850e:	f7ff fc21 	bl	17d54 <ull_conn_llcp_req>
		if (ret) {
   18512:	b998      	cbnz	r0, 1853c <ll_chm_update+0x48>
   18514:	6829      	ldr	r1, [r5, #0]
		conn->llcp.chan_map.initiate = 1U;
   18516:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
		conn->llcp_req++;
   1851a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1851e:	f8c4 10f1 	str.w	r1, [r4, #241]	; 0xf1
   18522:	792d      	ldrb	r5, [r5, #4]
   18524:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
		conn->llcp.chan_map.initiate = 1U;
   18528:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1852c:	2102      	movs	r1, #2
		conn->llcp_req++;
   1852e:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   18530:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
		conn->llcp_type = LLCP_CHAN_MAP;
   18534:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
		conn->llcp_req++;
   18538:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   1853c:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1853e:	2000      	movs	r0, #0
}
   18540:	bd38      	pop	{r3, r4, r5, pc}
   18542:	bf00      	nop

00018544 <ll_enc_req_send>:
{
   18544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18548:	4680      	mov	r8, r0
   1854a:	460f      	mov	r7, r1
   1854c:	4691      	mov	r9, r2
   1854e:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   18550:	f7fc fee8 	bl	15324 <ll_connected_get>
	if (!conn) {
   18554:	2800      	cmp	r0, #0
   18556:	d06c      	beq.n	18632 <ll_enc_req_send+0xee>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   18558:	f890 2154 	ldrb.w	r2, [r0, #340]	; 0x154
   1855c:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
   18560:	429a      	cmp	r2, r3
   18562:	4604      	mov	r4, r0
   18564:	d149      	bne.n	185fa <ll_enc_req_send+0xb6>
   18566:	f890 20ec 	ldrb.w	r2, [r0, #236]	; 0xec
   1856a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   1856e:	429a      	cmp	r2, r3
   18570:	d003      	beq.n	1857a <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   18572:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
   18576:	2b03      	cmp	r3, #3
   18578:	d03f      	beq.n	185fa <ll_enc_req_send+0xb6>
	tx = ll_tx_mem_acquire();
   1857a:	f7fc fee5 	bl	15348 <ll_tx_mem_acquire>
	if (tx) {
   1857e:	4605      	mov	r5, r0
   18580:	b3d8      	cbz	r0, 185fa <ll_enc_req_send+0xb6>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   18582:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
   18586:	f8d6 c000 	ldr.w	ip, [r6]
   1858a:	6871      	ldr	r1, [r6, #4]
   1858c:	68b2      	ldr	r2, [r6, #8]
   1858e:	68f6      	ldr	r6, [r6, #12]
   18590:	f8c4 616d 	str.w	r6, [r4, #365]	; 0x16d
   18594:	f013 0318 	ands.w	r3, r3, #24
   18598:	f8c4 c161 	str.w	ip, [r4, #353]	; 0x161
   1859c:	f8c4 1165 	str.w	r1, [r4, #357]	; 0x165
   185a0:	f8c4 2169 	str.w	r2, [r4, #361]	; 0x169
   185a4:	d12c      	bne.n	18600 <ll_enc_req_send+0xbc>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   185a6:	7903      	ldrb	r3, [r0, #4]
   185a8:	f043 0303 	orr.w	r3, r3, #3
   185ac:	7103      	strb	r3, [r0, #4]
			pdu_data_tx->len =
   185ae:	2317      	movs	r3, #23
   185b0:	7143      	strb	r3, [r0, #5]
			pdu_data_tx->llctrl.opcode =
   185b2:	2303      	movs	r3, #3
   185b4:	71c3      	strb	r3, [r0, #7]
   185b6:	683b      	ldr	r3, [r7, #0]
   185b8:	687a      	ldr	r2, [r7, #4]
   185ba:	60c2      	str	r2, [r0, #12]
   185bc:	6083      	str	r3, [r0, #8]
			enc_req->ediv[0] = ediv[0];
   185be:	f899 3000 	ldrb.w	r3, [r9]
   185c2:	7403      	strb	r3, [r0, #16]
			enc_req->ediv[1] = ediv[1];
   185c4:	f899 3001 	ldrb.w	r3, [r9, #1]
   185c8:	7443      	strb	r3, [r0, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   185ca:	2108      	movs	r1, #8
   185cc:	3012      	adds	r0, #18
   185ce:	f002 f8af 	bl	1a730 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   185d2:	2104      	movs	r1, #4
   185d4:	f105 001a 	add.w	r0, r5, #26
   185d8:	f002 f8aa 	bl	1a730 <lll_csrand_get>
		if (ll_tx_mem_enqueue(handle, tx)) {
   185dc:	4629      	mov	r1, r5
   185de:	4640      	mov	r0, r8
   185e0:	f7fc febe 	bl	15360 <ll_tx_mem_enqueue>
   185e4:	b930      	cbnz	r0, 185f4 <ll_enc_req_send+0xb0>
		conn->llcp_enc.req++;
   185e6:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   185ea:	3301      	adds	r3, #1
   185ec:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
}
   185f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   185f4:	4628      	mov	r0, r5
   185f6:	f7fc fead 	bl	15354 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   185fa:	200c      	movs	r0, #12
}
   185fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   18600:	2b18      	cmp	r3, #24
   18602:	d1f8      	bne.n	185f6 <ll_enc_req_send+0xb2>
   18604:	683b      	ldr	r3, [r7, #0]
   18606:	687a      	ldr	r2, [r7, #4]
   18608:	f8c4 215d 	str.w	r2, [r4, #349]	; 0x15d
   1860c:	f8c4 3159 	str.w	r3, [r4, #345]	; 0x159
			conn->llcp_enc.ediv[0] = ediv[0];
   18610:	f899 3000 	ldrb.w	r3, [r9]
   18614:	f884 3157 	strb.w	r3, [r4, #343]	; 0x157
			conn->llcp_enc.ediv[1] = ediv[1];
   18618:	f899 3001 	ldrb.w	r3, [r9, #1]
   1861c:	f884 3158 	strb.w	r3, [r4, #344]	; 0x158
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18620:	7903      	ldrb	r3, [r0, #4]
   18622:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18626:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18628:	7103      	strb	r3, [r0, #4]
			pdu_data_tx->llctrl.opcode =
   1862a:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1862c:	7142      	strb	r2, [r0, #5]
			pdu_data_tx->llctrl.opcode =
   1862e:	71c3      	strb	r3, [r0, #7]
   18630:	e7d4      	b.n	185dc <ll_enc_req_send+0x98>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18632:	2002      	movs	r0, #2
}
   18634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018638 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   18638:	6008      	str	r0, [r1, #0]
}
   1863a:	4770      	bx	lr

0001863c <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   1863c:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1863e:	6802      	ldr	r2, [r0, #0]
	struct evt_hdr *conn_evt = HDR_LLL2EVT(lll->conn);
   18640:	6899      	ldr	r1, [r3, #8]
{
   18642:	b410      	push	{r4}
			      (ticks_slot_overhead + conn_evt->ticks_slot),
   18644:	680c      	ldr	r4, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   18646:	8a48      	ldrh	r0, [r1, #18]
   18648:	68e1      	ldr	r1, [r4, #12]
}
   1864a:	bc10      	pop	{r4}
	after_mstr_offset_get(lll->conn->interval,
   1864c:	3310      	adds	r3, #16
   1864e:	f7eb bbc7 	b.w	3de0 <after_mstr_offset_get>
   18652:	bf00      	nop

00018654 <ull_sched_mfy_win_offset_use>:
{
   18654:	b510      	push	{r4, lr}
   18656:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   18658:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
   1865c:	68c1      	ldr	r1, [r0, #12]
   1865e:	f500 738a 	add.w	r3, r0, #276	; 0x114
   18662:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
   18664:	f7eb fbbc 	bl	3de0 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / 1250;
   18668:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1866c:	4905      	ldr	r1, [pc, #20]	; (18684 <ull_sched_mfy_win_offset_use+0x30>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   1866e:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
	win_offset = conn->llcp_cu.win_offset_us / 1250;
   18672:	fba1 1303 	umull	r1, r3, r1, r3
   18676:	0a9b      	lsrs	r3, r3, #10
	dst[1] = val >> 8;
   18678:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   1867c:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   1867e:	7051      	strb	r1, [r2, #1]
}
   18680:	bd10      	pop	{r4, pc}
   18682:	bf00      	nop
   18684:	d1b71759 	.word	0xd1b71759

00018688 <ull_sched_mfy_free_win_offset_calc>:
{
   18688:	b500      	push	{lr}
	if (conn->lll.role) {
   1868a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1868e:	f8d0 c190 	ldr.w	ip, [r0, #400]	; 0x190
{
   18692:	b085      	sub	sp, #20
	uint32_t ticks_to_offset_default = 0U;
   18694:	2100      	movs	r1, #0
	if (conn->lll.role) {
   18696:	428b      	cmp	r3, r1
	uint8_t offset_max = 6U;
   18698:	f04f 0206 	mov.w	r2, #6
		conn->llcp_conn_param.ticks_to_offset_next =
   1869c:	bfb8      	it	lt
   1869e:	f8d0 30e8 	ldrlt.w	r3, [r0, #232]	; 0xe8
	uint32_t ticks_to_offset_default = 0U;
   186a2:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   186a4:	f10d 010b 	add.w	r1, sp, #11
	uint8_t offset_max = 6U;
   186a8:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   186ac:	e9cd 1c00 	strd	r1, ip, [sp]
		conn->llcp_conn_param.ticks_to_offset_next =
   186b0:	bfbc      	itt	lt
   186b2:	f8c0 3198 	strlt.w	r3, [r0, #408]	; 0x198
		ticks_to_offset_next =
   186b6:	f500 72cc 	addlt.w	r2, r0, #408	; 0x198
	win_offset_calc(conn, 0, ticks_to_offset_next,
   186ba:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
	ticks_to_offset_next = &ticks_to_offset_default;
   186be:	bfa8      	it	ge
   186c0:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   186c2:	2100      	movs	r1, #0
   186c4:	f7eb f97c 	bl	39c0 <win_offset_calc.constprop.0>
}
   186c8:	b005      	add	sp, #20
   186ca:	f85d fb04 	ldr.w	pc, [sp], #4
   186ce:	bf00      	nop

000186d0 <ull_chan_map_get>:
	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
	memcpy(chan_map, map, sizeof(map));
   186d0:	4a04      	ldr	r2, [pc, #16]	; (186e4 <ull_chan_map_get+0x14>)

	return count;
   186d2:	4905      	ldr	r1, [pc, #20]	; (186e8 <ull_chan_map_get+0x18>)
{
   186d4:	4603      	mov	r3, r0
   186d6:	6810      	ldr	r0, [r2, #0]
   186d8:	6018      	str	r0, [r3, #0]
   186da:	7912      	ldrb	r2, [r2, #4]
}
   186dc:	7808      	ldrb	r0, [r1, #0]
   186de:	711a      	strb	r2, [r3, #4]
   186e0:	4770      	bx	lr
   186e2:	bf00      	nop
   186e4:	20000598 	.word	0x20000598
   186e8:	20000e5c 	.word	0x20000e5c

000186ec <ull_chan_map_set>:

void ull_chan_map_set(uint8_t const *const chan_map)
{
   186ec:	b508      	push	{r3, lr}
   186ee:	4a06      	ldr	r2, [pc, #24]	; (18708 <ull_chan_map_set+0x1c>)
   186f0:	4603      	mov	r3, r0
   186f2:	6800      	ldr	r0, [r0, #0]
   186f4:	6010      	str	r0, [r2, #0]
   186f6:	791b      	ldrb	r3, [r3, #4]
   186f8:	7113      	strb	r3, [r2, #4]
	memcpy(map, chan_map, sizeof(map));
	count = util_ones_count_get(map, sizeof(map));
   186fa:	2105      	movs	r1, #5
   186fc:	4610      	mov	r0, r2
   186fe:	f7f7 f87f 	bl	f800 <util_ones_count_get>
   18702:	4b02      	ldr	r3, [pc, #8]	; (1870c <ull_chan_map_set+0x20>)
   18704:	7018      	strb	r0, [r3, #0]
}
   18706:	bd08      	pop	{r3, pc}
   18708:	20000598 	.word	0x20000598
   1870c:	20000e5c 	.word	0x20000e5c

00018710 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   18710:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   18712:	fb02 1c01 	mla	ip, r2, r1, r1
   18716:	7802      	ldrb	r2, [r0, #0]
   18718:	491c      	ldr	r1, [pc, #112]	; (1878c <lll_chan_sel_1+0x7c>)
{
   1871a:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1871e:	4494      	add	ip, r2
   18720:	fb81 210c 	smull	r2, r1, r1, ip
   18724:	4461      	add	r1, ip
   18726:	1149      	asrs	r1, r1, #5
   18728:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1872c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   18730:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   18732:	ebac 0101 	sub.w	r1, ip, r1
   18736:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   18738:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1873a:	08c4      	lsrs	r4, r0, #3
   1873c:	f001 0107 	and.w	r1, r1, #7
   18740:	f813 c004 	ldrb.w	ip, [r3, r4]
   18744:	fa4c f101 	asr.w	r1, ip, r1
   18748:	f011 0101 	ands.w	r1, r1, #1
   1874c:	d11d      	bne.n	1878a <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1874e:	fbb0 f2f5 	udiv	r2, r0, r5
   18752:	fb05 0212 	mls	r2, r5, r2, r0
   18756:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   18758:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   1875c:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1875e:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   18760:	f100 0c08 	add.w	ip, r0, #8
   18764:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   18768:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1876c:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   18770:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   18774:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   18778:	d002      	beq.n	18780 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1877a:	b132      	cbz	r2, 1878a <lll_chan_sel_1+0x7a>
				chan_index--;
   1877c:	3a01      	subs	r2, #1
   1877e:	b2d2      	uxtb	r2, r2
			chan_next++;
   18780:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   18782:	4584      	cmp	ip, r0
   18784:	d1f2      	bne.n	1876c <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   18786:	45a6      	cmp	lr, r4
   18788:	d1ea      	bne.n	18760 <lll_chan_sel_1+0x50>
}
   1878a:	bd30      	pop	{r4, r5, pc}
   1878c:	dd67c8a7 	.word	0xdd67c8a7

00018790 <lll_chan_sel_2>:
{
   18790:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   18792:	4d2f      	ldr	r5, [pc, #188]	; (18850 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   18794:	4c2f      	ldr	r4, [pc, #188]	; (18854 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   18796:	4048      	eors	r0, r1
   18798:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1879c:	0a07      	lsrs	r7, r0, #8
   1879e:	b2c0      	uxtb	r0, r0
   187a0:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   187a4:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   187a8:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   187ac:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   187b0:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   187b4:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   187b8:	433e      	orrs	r6, r7
   187ba:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   187be:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   187c2:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   187c6:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   187ca:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   187ce:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   187d0:	f3c0 4007 	ubfx	r0, r0, #16, #8
   187d4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   187d8:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   187dc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   187e0:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   187e2:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   187e6:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   187e8:	d1d8      	bne.n	1879c <lll_chan_sel_2+0xc>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   187ea:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   187ec:	481a      	ldr	r0, [pc, #104]	; (18858 <lll_chan_sel_2+0xc8>)
   187ee:	fba0 4001 	umull	r4, r0, r0, r1
   187f2:	1a0c      	subs	r4, r1, r0
   187f4:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   187f8:	0940      	lsrs	r0, r0, #5
   187fa:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   187fe:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   18802:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18804:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   18808:	f000 0507 	and.w	r5, r0, #7
   1880c:	5d14      	ldrb	r4, [r2, r4]
   1880e:	412c      	asrs	r4, r5
   18810:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   18812:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18814:	d41a      	bmi.n	1884c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   18816:	fb01 f303 	mul.w	r3, r1, r3
   1881a:	1e56      	subs	r6, r2, #1
   1881c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   18820:	3204      	adds	r2, #4
	chan_next = 0U;
   18822:	4660      	mov	r0, ip
		bite = *chan_map;
   18824:	f100 0508 	add.w	r5, r0, #8
   18828:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1882c:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   1882e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   18832:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   18836:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1883a:	d002      	beq.n	18842 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1883c:	b133      	cbz	r3, 1884c <lll_chan_sel_2+0xbc>
				chan_index--;
   1883e:	3b01      	subs	r3, #1
   18840:	b2db      	uxtb	r3, r3
			chan_next++;
   18842:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   18844:	42a8      	cmp	r0, r5
   18846:	d1f2      	bne.n	1882e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   18848:	42b2      	cmp	r2, r6
   1884a:	d1eb      	bne.n	18824 <lll_chan_sel_2+0x94>
}
   1884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1884e:	bf00      	nop
   18850:	00022110 	.word	0x00022110
   18854:	00088440 	.word	0x00088440
   18858:	bacf914d 	.word	0xbacf914d

0001885c <rl_update>:
static void rl_update(void)
{
	uint8_t i;

	/* Populate filter from rl peers */
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1885c:	491a      	ldr	r1, [pc, #104]	; (188c8 <rl_update+0x6c>)
   1885e:	481b      	ldr	r0, [pc, #108]	; (188cc <rl_update+0x70>)
{
   18860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18864:	2300      	movs	r3, #0
   18866:	1e46      	subs	r6, r0, #1
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   18868:	f1a1 0c02 	sub.w	ip, r1, #2
   1886c:	2701      	movs	r7, #1
   1886e:	e006      	b.n	1887e <rl_update+0x22>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18870:	3301      	adds	r3, #1
   18872:	2b08      	cmp	r3, #8
   18874:	f101 0106 	add.w	r1, r1, #6
   18878:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1887c:	d022      	beq.n	188c4 <rl_update+0x68>
		if (rl[i].taken) {
   1887e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   18882:	f816 2032 	ldrb.w	r2, [r6, r2, lsl #3]
   18886:	07d4      	lsls	r4, r2, #31
   18888:	d5f2      	bpl.n	18870 <rl_update+0x14>
	filter->enable_bitmask |= BIT(index);
   1888a:	f89c 5000 	ldrb.w	r5, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1888e:	f89c e001 	ldrb.w	lr, [ip, #1]
   18892:	f8d0 8000 	ldr.w	r8, [r0]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   18896:	f3c2 1280 	ubfx	r2, r2, #6, #1
	filter->enable_bitmask |= BIT(index);
   1889a:	fa07 f403 	lsl.w	r4, r7, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1889e:	409a      	lsls	r2, r3
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   188a0:	3301      	adds	r3, #1
	filter->enable_bitmask |= BIT(index);
   188a2:	432c      	orrs	r4, r5
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   188a4:	ea4e 0202 	orr.w	r2, lr, r2
   188a8:	8885      	ldrh	r5, [r0, #4]
   188aa:	808d      	strh	r5, [r1, #4]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   188ac:	2b08      	cmp	r3, #8
	filter->enable_bitmask |= BIT(index);
   188ae:	f88c 4000 	strb.w	r4, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   188b2:	f88c 2001 	strb.w	r2, [ip, #1]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   188b6:	f101 0106 	add.w	r1, r1, #6
   188ba:	f841 8c06 	str.w	r8, [r1, #-6]
   188be:	f100 0028 	add.w	r0, r0, #40	; 0x28
   188c2:	d1dc      	bne.n	1887e <rl_update+0x22>
}
   188c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   188c8:	20002d72 	.word	0x20002d72
   188cc:	20002c31 	.word	0x20002c31

000188d0 <wl_update>:
	for (i = 0U; i < WL_SIZE; i++) {
   188d0:	4820      	ldr	r0, [pc, #128]	; (18954 <wl_update+0x84>)
   188d2:	4a21      	ldr	r2, [pc, #132]	; (18958 <wl_update+0x88>)
{
   188d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   188d8:	4f20      	ldr	r7, [pc, #128]	; (1895c <wl_update+0x8c>)
   188da:	f8df 8084 	ldr.w	r8, [pc, #132]	; 18960 <wl_update+0x90>
{
   188de:	2300      	movs	r3, #0
   188e0:	1e95      	subs	r5, r2, #2
	filter->enable_bitmask |= BIT(index);
   188e2:	f1a0 0c02 	sub.w	ip, r0, #2
   188e6:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   188e8:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
   188ec:	07c9      	lsls	r1, r1, #31
	filter->enable_bitmask |= BIT(index);
   188ee:	fa06 f903 	lsl.w	r9, r6, r3
		if (!wl[i].taken) {
   188f2:	d526      	bpl.n	18942 <wl_update+0x72>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   188f4:	7839      	ldrb	r1, [r7, #0]
   188f6:	b159      	cbz	r1, 18910 <wl_update+0x40>
		j = wl[i].rl_idx;
   188f8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   188fc:	2907      	cmp	r1, #7
   188fe:	eb01 0481 	add.w	r4, r1, r1, lsl #2
   18902:	d805      	bhi.n	18910 <wl_update+0x40>
   18904:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
   18908:	074c      	lsls	r4, r1, #29
   1890a:	d501      	bpl.n	18910 <wl_update+0x40>
   1890c:	06c9      	lsls	r1, r1, #27
   1890e:	d518      	bpl.n	18942 <wl_update+0x72>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18910:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18914:	f89c e001 	ldrb.w	lr, [ip, #1]
	filter->enable_bitmask |= BIT(index);
   18918:	f89c 4000 	ldrb.w	r4, [ip]
   1891c:	f8d2 a000 	ldr.w	sl, [r2]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18920:	f3c1 0140 	ubfx	r1, r1, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18924:	4099      	lsls	r1, r3
   18926:	ea4e 0101 	orr.w	r1, lr, r1
	filter->enable_bitmask |= BIT(index);
   1892a:	ea44 0409 	orr.w	r4, r4, r9
   1892e:	f8b2 e004 	ldrh.w	lr, [r2, #4]
   18932:	f88c 4000 	strb.w	r4, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18936:	f88c 1001 	strb.w	r1, [ip, #1]
   1893a:	f8a0 e004 	strh.w	lr, [r0, #4]
   1893e:	f8c0 a000 	str.w	sl, [r0]
	for (i = 0U; i < WL_SIZE; i++) {
   18942:	3301      	adds	r3, #1
   18944:	2b08      	cmp	r3, #8
   18946:	f100 0006 	add.w	r0, r0, #6
   1894a:	f102 0208 	add.w	r2, r2, #8
   1894e:	d1cb      	bne.n	188e8 <wl_update+0x18>
}
   18950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18954:	20002dea 	.word	0x20002dea
   18958:	20002daa 	.word	0x20002daa
   1895c:	20003bc4 	.word	0x20003bc4
   18960:	20002c30 	.word	0x20002c30

00018964 <ll_wl_size_get>:
}
   18964:	2008      	movs	r0, #8
   18966:	4770      	bx	lr

00018968 <ll_wl_clear>:
{
   18968:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1896a:	2000      	movs	r0, #0
   1896c:	f7fb fe28 	bl	145c0 <ull_adv_filter_pol_get>
   18970:	bb00      	cbnz	r0, 189b4 <ll_wl_clear+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   18972:	f7fc f877 	bl	14a64 <ull_scan_filter_pol_get>
   18976:	f010 0001 	ands.w	r0, r0, #1
   1897a:	d11b      	bne.n	189b4 <ll_wl_clear+0x4c>
   1897c:	4a0e      	ldr	r2, [pc, #56]	; (189b8 <ll_wl_clear+0x50>)
			rl[j].wl = 0U;
   1897e:	4c0f      	ldr	r4, [pc, #60]	; (189bc <ll_wl_clear+0x54>)
		uint8_t j = wl[i].rl_idx;
   18980:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   18984:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18986:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   18988:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1898c:	d805      	bhi.n	1899a <ll_wl_clear+0x32>
			rl[j].wl = 0U;
   1898e:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   18992:	f36f 1345 	bfc	r3, #5, #1
   18996:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   1899a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1899e:	f36f 0300 	bfc	r3, #0, #1
   189a2:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   189a6:	3001      	adds	r0, #1
   189a8:	2808      	cmp	r0, #8
   189aa:	d1e9      	bne.n	18980 <ll_wl_clear+0x18>
	wl_anon = 0U;
   189ac:	4b04      	ldr	r3, [pc, #16]	; (189c0 <ll_wl_clear+0x58>)
   189ae:	2000      	movs	r0, #0
   189b0:	7018      	strb	r0, [r3, #0]
}
   189b2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   189b4:	200c      	movs	r0, #12
}
   189b6:	bd10      	pop	{r4, pc}
   189b8:	20002da8 	.word	0x20002da8
   189bc:	20002c30 	.word	0x20002c30
   189c0:	20003bc5 	.word	0x20003bc5

000189c4 <ll_wl_add>:
{
   189c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189c8:	4607      	mov	r7, r0
   189ca:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   189cc:	2000      	movs	r0, #0
   189ce:	f7fb fdf7 	bl	145c0 <ull_adv_filter_pol_get>
   189d2:	2800      	cmp	r0, #0
   189d4:	d172      	bne.n	18abc <ll_wl_add+0xf8>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   189d6:	f7fc f845 	bl	14a64 <ull_scan_filter_pol_get>
   189da:	f010 0401 	ands.w	r4, r0, #1
   189de:	d16d      	bne.n	18abc <ll_wl_add+0xf8>
	if (addr->type == ADDR_TYPE_ANON) {
   189e0:	f897 a000 	ldrb.w	sl, [r7]
   189e4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   189e8:	d06c      	beq.n	18ac4 <ll_wl_add+0x100>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   189ea:	4e44      	ldr	r6, [pc, #272]	; (18afc <ll_wl_add+0x138>)
   189ec:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   189f0:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   189f4:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   189f8:	4625      	mov	r5, r4
   189fa:	f1a6 0802 	sub.w	r8, r6, #2
   189fe:	e009      	b.n	18a14 <ll_wl_add+0x50>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18a00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   18a04:	d101      	bne.n	18a0a <ll_wl_add+0x46>
			*free = i;
   18a06:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < WL_SIZE; i++) {
   18a0a:	3501      	adds	r5, #1
   18a0c:	2d08      	cmp	r5, #8
   18a0e:	f106 0608 	add.w	r6, r6, #8
   18a12:	d017      	beq.n	18a44 <ll_wl_add+0x80>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18a14:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18a18:	07d8      	lsls	r0, r3, #31
   18a1a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   18a1e:	d5ef      	bpl.n	18a00 <ll_wl_add+0x3c>
   18a20:	4552      	cmp	r2, sl
   18a22:	d1f2      	bne.n	18a0a <ll_wl_add+0x46>
   18a24:	2206      	movs	r2, #6
   18a26:	4630      	mov	r0, r6
   18a28:	4659      	mov	r1, fp
   18a2a:	f00d fc24 	bl	26276 <memcmp>
   18a2e:	2800      	cmp	r0, #0
   18a30:	d041      	beq.n	18ab6 <ll_wl_add+0xf2>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18a32:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18a36:	07d9      	lsls	r1, r3, #31
   18a38:	d5e2      	bpl.n	18a00 <ll_wl_add+0x3c>
	for (i = 0; i < WL_SIZE; i++) {
   18a3a:	3501      	adds	r5, #1
   18a3c:	2d08      	cmp	r5, #8
   18a3e:	f106 0608 	add.w	r6, r6, #8
   18a42:	d1e7      	bne.n	18a14 <ll_wl_add+0x50>
	} else if (j >= ARRAY_SIZE(wl)) {
   18a44:	f1b9 0f07 	cmp.w	r9, #7
   18a48:	d843      	bhi.n	18ad2 <ll_wl_add+0x10e>
	wl[i].id_addr_type = id_addr->type & 0x1;
   18a4a:	783a      	ldrb	r2, [r7, #0]
   18a4c:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   18a50:	4e2b      	ldr	r6, [pc, #172]	; (18b00 <ll_wl_add+0x13c>)
   18a52:	f362 0341 	bfi	r3, r2, #1, #1
   18a56:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   18a5a:	2302      	movs	r3, #2
   18a5c:	fb15 3509 	smlabb	r5, r5, r9, r3
   18a60:	f8d7 3001 	ldr.w	r3, [r7, #1]
   18a64:	f848 3005 	str.w	r3, [r8, r5]
   18a68:	4445      	add	r5, r8
   18a6a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   18a6e:	80ab      	strh	r3, [r5, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18a70:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18a72:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18a74:	f003 0301 	and.w	r3, r3, #1
   18a78:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   18a7c:	fa5f fa84 	uxtb.w	sl, r4
   18a80:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   18a84:	f3c2 1180 	ubfx	r1, r2, #6, #1
   18a88:	07d2      	lsls	r2, r2, #31
   18a8a:	f104 0401 	add.w	r4, r4, #1
   18a8e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   18a92:	d501      	bpl.n	18a98 <ll_wl_add+0xd4>
   18a94:	4299      	cmp	r1, r3
   18a96:	d01e      	beq.n	18ad6 <ll_wl_add+0x112>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18a98:	2c08      	cmp	r4, #8
   18a9a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   18a9e:	d1eb      	bne.n	18a78 <ll_wl_add+0xb4>
		wl[i].rl_idx = FILTER_IDX_NONE;
   18aa0:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   18aa4:	22ff      	movs	r2, #255	; 0xff
   18aa6:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   18aa8:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   18aac:	f043 0301 	orr.w	r3, r3, #1
   18ab0:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   18ab4:	2000      	movs	r0, #0
}
   18ab6:	b003      	add	sp, #12
   18ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18abc:	200c      	movs	r0, #12
}
   18abe:	b003      	add	sp, #12
   18ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   18ac4:	4b0f      	ldr	r3, [pc, #60]	; (18b04 <ll_wl_add+0x140>)
   18ac6:	2201      	movs	r2, #1
		return 0;
   18ac8:	4620      	mov	r0, r4
		wl_anon = 1U;
   18aca:	701a      	strb	r2, [r3, #0]
}
   18acc:	b003      	add	sp, #12
   18ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ad2:	2007      	movs	r0, #7
	return wl_add(addr);
   18ad4:	e7ef      	b.n	18ab6 <ll_wl_add+0xf2>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18ad6:	4630      	mov	r0, r6
   18ad8:	2206      	movs	r2, #6
   18ada:	4659      	mov	r1, fp
   18adc:	9301      	str	r3, [sp, #4]
   18ade:	f00d fbca 	bl	26276 <memcmp>
   18ae2:	9b01      	ldr	r3, [sp, #4]
   18ae4:	2800      	cmp	r0, #0
   18ae6:	d1d7      	bne.n	18a98 <ll_wl_add+0xd4>
		rl[j].wl = 1U;
   18ae8:	5d7b      	ldrb	r3, [r7, r5]
   18aea:	f043 0320 	orr.w	r3, r3, #32
   18aee:	557b      	strb	r3, [r7, r5]
		wl[i].rl_idx = j;
   18af0:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   18af4:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   18af8:	e7d6      	b.n	18aa8 <ll_wl_add+0xe4>
   18afa:	bf00      	nop
   18afc:	20002daa 	.word	0x20002daa
   18b00:	20002c31 	.word	0x20002c31
   18b04:	20003bc5 	.word	0x20003bc5

00018b08 <ll_wl_remove>:
{
   18b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b0c:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   18b0e:	2000      	movs	r0, #0
   18b10:	f7fb fd56 	bl	145c0 <ull_adv_filter_pol_get>
   18b14:	b9f0      	cbnz	r0, 18b54 <ll_wl_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   18b16:	f7fb ffa5 	bl	14a64 <ull_scan_filter_pol_get>
   18b1a:	f010 0401 	ands.w	r4, r0, #1
   18b1e:	d119      	bne.n	18b54 <ll_wl_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   18b20:	f895 8000 	ldrb.w	r8, [r5]
   18b24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   18b28:	d035      	beq.n	18b96 <ll_wl_remove+0x8e>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   18b2a:	4f1d      	ldr	r7, [pc, #116]	; (18ba0 <ll_wl_remove+0x98>)
   18b2c:	3501      	adds	r5, #1
	for (i = 0; i < WL_SIZE; i++) {
   18b2e:	1ebe      	subs	r6, r7, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18b30:	f008 0801 	and.w	r8, r8, #1
   18b34:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   18b38:	f3c3 0240 	ubfx	r2, r3, #1, #1
   18b3c:	07db      	lsls	r3, r3, #31
   18b3e:	d501      	bpl.n	18b44 <ll_wl_remove+0x3c>
   18b40:	4542      	cmp	r2, r8
   18b42:	d00a      	beq.n	18b5a <ll_wl_remove+0x52>
	for (i = 0; i < WL_SIZE; i++) {
   18b44:	3401      	adds	r4, #1
   18b46:	2c08      	cmp	r4, #8
   18b48:	f107 0708 	add.w	r7, r7, #8
   18b4c:	d1f2      	bne.n	18b34 <ll_wl_remove+0x2c>
   18b4e:	2002      	movs	r0, #2
}
   18b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18b54:	200c      	movs	r0, #12
}
   18b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18b5a:	2206      	movs	r2, #6
   18b5c:	4638      	mov	r0, r7
   18b5e:	4629      	mov	r1, r5
   18b60:	f00d fb89 	bl	26276 <memcmp>
   18b64:	2800      	cmp	r0, #0
   18b66:	d1ed      	bne.n	18b44 <ll_wl_remove+0x3c>
		uint8_t j = wl[i].rl_idx;
   18b68:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
   18b6c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18b6e:	2b07      	cmp	r3, #7
   18b70:	d808      	bhi.n	18b84 <ll_wl_remove+0x7c>
			rl[j].wl = 0U;
   18b72:	4a0c      	ldr	r2, [pc, #48]	; (18ba4 <ll_wl_remove+0x9c>)
   18b74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18b78:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   18b7c:	f360 1145 	bfi	r1, r0, #5, #1
   18b80:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   18b84:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   18b88:	f36f 0300 	bfc	r3, #0, #1
   18b8c:	f806 3034 	strb.w	r3, [r6, r4, lsl #3]
		return 0;
   18b90:	2000      	movs	r0, #0
}
   18b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   18b96:	4b04      	ldr	r3, [pc, #16]	; (18ba8 <ll_wl_remove+0xa0>)
   18b98:	701c      	strb	r4, [r3, #0]
		return 0;
   18b9a:	4620      	mov	r0, r4
}
   18b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ba0:	20002daa 	.word	0x20002daa
   18ba4:	20002c30 	.word	0x20002c30
   18ba8:	20003bc5 	.word	0x20003bc5

00018bac <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18bac:	2807      	cmp	r0, #7
{
   18bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18bb2:	4604      	mov	r4, r0
   18bb4:	460f      	mov	r7, r1
   18bb6:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18bb8:	d819      	bhi.n	18bee <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   18bba:	4e1a      	ldr	r6, [pc, #104]	; (18c24 <ll_rl_id_addr_get+0x78>)
   18bbc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18bc0:	ea4f 0884 	mov.w	r8, r4, lsl #2
   18bc4:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   18bc8:	07db      	lsls	r3, r3, #31
   18bca:	d51d      	bpl.n	18c08 <ll_rl_id_addr_get+0x5c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   18bcc:	44a0      	add	r8, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   18bce:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   18bd0:	f816 3038 	ldrb.w	r3, [r6, r8, lsl #3]
   18bd4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18bd8:	703b      	strb	r3, [r7, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   18bda:	2301      	movs	r3, #1
   18bdc:	fb10 3404 	smlabb	r4, r0, r4, r3
   18be0:	1933      	adds	r3, r6, r4
   18be2:	5932      	ldr	r2, [r6, r4]
   18be4:	602a      	str	r2, [r5, #0]
   18be6:	889b      	ldrh	r3, [r3, #4]
   18be8:	80ab      	strh	r3, [r5, #4]
}
   18bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18bee:	4a0e      	ldr	r2, [pc, #56]	; (18c28 <ll_rl_id_addr_get+0x7c>)
   18bf0:	490e      	ldr	r1, [pc, #56]	; (18c2c <ll_rl_id_addr_get+0x80>)
   18bf2:	480f      	ldr	r0, [pc, #60]	; (18c30 <ll_rl_id_addr_get+0x84>)
   18bf4:	23e9      	movs	r3, #233	; 0xe9
   18bf6:	f007 fef2 	bl	209de <printk>
   18bfa:	4040      	eors	r0, r0
   18bfc:	f380 8811 	msr	BASEPRI, r0
   18c00:	f04f 0003 	mov.w	r0, #3
   18c04:	df02      	svc	2
   18c06:	e7d8      	b.n	18bba <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   18c08:	4a07      	ldr	r2, [pc, #28]	; (18c28 <ll_rl_id_addr_get+0x7c>)
   18c0a:	490a      	ldr	r1, [pc, #40]	; (18c34 <ll_rl_id_addr_get+0x88>)
   18c0c:	4808      	ldr	r0, [pc, #32]	; (18c30 <ll_rl_id_addr_get+0x84>)
   18c0e:	23ea      	movs	r3, #234	; 0xea
   18c10:	f007 fee5 	bl	209de <printk>
   18c14:	4040      	eors	r0, r0
   18c16:	f380 8811 	msr	BASEPRI, r0
   18c1a:	f04f 0003 	mov.w	r0, #3
   18c1e:	df02      	svc	2
   18c20:	e7d4      	b.n	18bcc <ll_rl_id_addr_get+0x20>
   18c22:	bf00      	nop
   18c24:	20002c30 	.word	0x20002c30
   18c28:	00027b80 	.word	0x00027b80
   18c2c:	00027bc4 	.word	0x00027bc4
   18c30:	000272c0 	.word	0x000272c0
   18c34:	00027bd0 	.word	0x00027bd0

00018c38 <ll_rl_size_get>:
   18c38:	2008      	movs	r0, #8
   18c3a:	4770      	bx	lr

00018c3c <ll_rl_clear>:
{
   18c3c:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18c3e:	2000      	movs	r0, #0
   18c40:	f7fb fcb2 	bl	145a8 <ull_adv_is_enabled>
		? 0 : 1;
   18c44:	b108      	cbz	r0, 18c4a <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18c46:	200c      	movs	r0, #12
}
   18c48:	bd10      	pop	{r4, pc}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18c4a:	f7fb fef3 	bl	14a34 <ull_scan_is_enabled>
		? 0 : 1;
   18c4e:	2800      	cmp	r0, #0
   18c50:	d1f9      	bne.n	18c46 <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   18c52:	4b19      	ldr	r3, [pc, #100]	; (18cb8 <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   18c54:	4c19      	ldr	r4, [pc, #100]	; (18cbc <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   18c56:	7819      	ldrb	r1, [r3, #0]
   18c58:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   18c5c:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   18c5e:	f360 0100 	bfi	r1, r0, #0, #1
   18c62:	f360 0200 	bfi	r2, r0, #0, #1
   18c66:	7019      	strb	r1, [r3, #0]
   18c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   18c6c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   18c70:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   18c74:	f360 0100 	bfi	r1, r0, #0, #1
   18c78:	f360 0200 	bfi	r2, r0, #0, #1
   18c7c:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   18c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   18c84:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   18c88:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   18c8c:	f360 0100 	bfi	r1, r0, #0, #1
   18c90:	f360 0200 	bfi	r2, r0, #0, #1
   18c94:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   18c98:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   18c9c:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   18ca0:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   18ca4:	f360 0100 	bfi	r1, r0, #0, #1
   18ca8:	f360 0200 	bfi	r2, r0, #0, #1
   18cac:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   18cb0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   18cb4:	bd10      	pop	{r4, pc}
   18cb6:	bf00      	nop
   18cb8:	20002c30 	.word	0x20002c30
   18cbc:	20003bc3 	.word	0x20003bc3

00018cc0 <ll_rl_remove>:
{
   18cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cc4:	b083      	sub	sp, #12
   18cc6:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18cc8:	2000      	movs	r0, #0
{
   18cca:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18ccc:	f7fb fc6c 	bl	145a8 <ull_adv_is_enabled>
		? 0 : 1;
   18cd0:	b118      	cbz	r0, 18cda <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18cd2:	200c      	movs	r0, #12
}
   18cd4:	b003      	add	sp, #12
   18cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18cda:	f7fb feab 	bl	14a34 <ull_scan_is_enabled>
		? 0 : 1;
   18cde:	4682      	mov	sl, r0
   18ce0:	2800      	cmp	r0, #0
   18ce2:	d1f6      	bne.n	18cd2 <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18ce4:	f8dd b000 	ldr.w	fp, [sp]
   18ce8:	f8df 8114 	ldr.w	r8, [pc, #276]	; 18e00 <ll_rl_remove+0x140>
   18cec:	f81b 3b01 	ldrb.w	r3, [fp], #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18cf0:	f003 0301 	and.w	r3, r3, #1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18cf4:	4604      	mov	r4, r0
   18cf6:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   18cfa:	461f      	mov	r7, r3
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18cfc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18d00:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
   18d04:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   18d08:	f3c3 1280 	ubfx	r2, r3, #6, #1
   18d0c:	07db      	lsls	r3, r3, #31
   18d0e:	ea4f 0984 	mov.w	r9, r4, lsl #2
   18d12:	d501      	bpl.n	18d18 <ll_rl_remove+0x58>
   18d14:	42ba      	cmp	r2, r7
   18d16:	d008      	beq.n	18d2a <ll_rl_remove+0x6a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18d18:	3401      	adds	r4, #1
   18d1a:	2c08      	cmp	r4, #8
   18d1c:	f108 0828 	add.w	r8, r8, #40	; 0x28
   18d20:	d1ec      	bne.n	18cfc <ll_rl_remove+0x3c>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18d22:	2002      	movs	r0, #2
}
   18d24:	b003      	add	sp, #12
   18d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18d2a:	4640      	mov	r0, r8
   18d2c:	2206      	movs	r2, #6
   18d2e:	4659      	mov	r1, fp
   18d30:	f00d faa1 	bl	26276 <memcmp>
   18d34:	2800      	cmp	r0, #0
   18d36:	d1ef      	bne.n	18d18 <ll_rl_remove+0x58>
		if (rl[i].pirk) {
   18d38:	782b      	ldrb	r3, [r5, #0]
   18d3a:	075b      	lsls	r3, r3, #29
   18d3c:	4607      	mov	r7, r0
   18d3e:	d52e      	bpl.n	18d9e <ll_rl_remove+0xde>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18d40:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 18e04 <ll_rl_remove+0x144>
   18d44:	f898 c000 	ldrb.w	ip, [r8]
   18d48:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   18d4c:	f01c 0eff 	ands.w	lr, ip, #255	; 0xff
   18d50:	d023      	beq.n	18d9a <ll_rl_remove+0xda>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18d52:	7de9      	ldrb	r1, [r5, #23]
   18d54:	9101      	str	r1, [sp, #4]
			if (pj && pi != pj) {
   18d56:	4571      	cmp	r1, lr
   18d58:	d01f      	beq.n	18d9a <ll_rl_remove+0xda>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   18d5a:	4a2b      	ldr	r2, [pc, #172]	; (18e08 <ll_rl_remove+0x148>)
   18d5c:	eb02 130e 	add.w	r3, r2, lr, lsl #4
   18d60:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   18d64:	4615      	mov	r5, r2
   18d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   18d68:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   18d6c:	4d27      	ldr	r5, [pc, #156]	; (18e0c <ll_rl_remove+0x14c>)
					if (rl[k].taken && rl[k].pirk &&
   18d6e:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
   18d72:	fa5f f18a 	uxtb.w	r1, sl
   18d76:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   18d7a:	07d0      	lsls	r0, r2, #31
   18d7c:	f10a 0a01 	add.w	sl, sl, #1
   18d80:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   18d84:	d504      	bpl.n	18d90 <ll_rl_remove+0xd0>
   18d86:	0750      	lsls	r0, r2, #29
   18d88:	d502      	bpl.n	18d90 <ll_rl_remove+0xd0>
   18d8a:	7dea      	ldrb	r2, [r5, #23]
   18d8c:	4572      	cmp	r2, lr
   18d8e:	d032      	beq.n	18df6 <ll_rl_remove+0x136>
				for (k = 0U;
   18d90:	f1ba 0f08 	cmp.w	sl, #8
   18d94:	f105 0528 	add.w	r5, r5, #40	; 0x28
   18d98:	d1e9      	bne.n	18d6e <ll_rl_remove+0xae>
			peer_irk_count--;
   18d9a:	f888 c000 	strb.w	ip, [r8]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   18d9e:	9b00      	ldr	r3, [sp, #0]
   18da0:	4d1b      	ldr	r5, [pc, #108]	; (18e10 <ll_rl_remove+0x150>)
   18da2:	f893 a000 	ldrb.w	sl, [r3]
	for (i = 0; i < WL_SIZE; i++) {
   18da6:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18daa:	f00a 0a01 	and.w	sl, sl, #1
   18dae:	f818 3037 	ldrb.w	r3, [r8, r7, lsl #3]
   18db2:	07d9      	lsls	r1, r3, #31
   18db4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   18db8:	d501      	bpl.n	18dbe <ll_rl_remove+0xfe>
   18dba:	4552      	cmp	r2, sl
   18dbc:	d00f      	beq.n	18dde <ll_rl_remove+0x11e>
	for (i = 0; i < WL_SIZE; i++) {
   18dbe:	3701      	adds	r7, #1
   18dc0:	2f08      	cmp	r7, #8
   18dc2:	f105 0508 	add.w	r5, r5, #8
   18dc6:	d1f2      	bne.n	18dae <ll_rl_remove+0xee>
		rl[i].taken = 0U;
   18dc8:	444c      	add	r4, r9
		return 0;
   18dca:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   18dcc:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   18dd0:	f36f 0300 	bfc	r3, #0, #1
   18dd4:	f806 3034 	strb.w	r3, [r6, r4, lsl #3]
}
   18dd8:	b003      	add	sp, #12
   18dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18dde:	2206      	movs	r2, #6
   18de0:	4628      	mov	r0, r5
   18de2:	4659      	mov	r1, fp
   18de4:	f00d fa47 	bl	26276 <memcmp>
   18de8:	2800      	cmp	r0, #0
   18dea:	d1e8      	bne.n	18dbe <ll_rl_remove+0xfe>
			wl[j].rl_idx = FILTER_IDX_NONE;
   18dec:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
   18df0:	23ff      	movs	r3, #255	; 0xff
   18df2:	707b      	strb	r3, [r7, #1]
   18df4:	e7e8      	b.n	18dc8 <ll_rl_remove+0x108>
						rl[k].pirk_idx = pi;
   18df6:	9a01      	ldr	r2, [sp, #4]
   18df8:	75da      	strb	r2, [r3, #23]
						peer_irk_rl_ids[pi] = k;
   18dfa:	4b06      	ldr	r3, [pc, #24]	; (18e14 <ll_rl_remove+0x154>)
   18dfc:	5499      	strb	r1, [r3, r2]
						break;
   18dfe:	e7cc      	b.n	18d9a <ll_rl_remove+0xda>
   18e00:	20002c31 	.word	0x20002c31
   18e04:	20003bc3 	.word	0x20003bc3
   18e08:	20002bb0 	.word	0x20002bb0
   18e0c:	20002c30 	.word	0x20002c30
   18e10:	20002daa 	.word	0x20002daa
   18e14:	20002ba8 	.word	0x20002ba8

00018e18 <ll_rl_crpa_set>:
{
   18e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   18e1c:	795c      	ldrb	r4, [r3, #5]
   18e1e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   18e22:	2c40      	cmp	r4, #64	; 0x40
   18e24:	d001      	beq.n	18e2a <ll_rl_crpa_set+0x12>
}
   18e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   18e2a:	461e      	mov	r6, r3
   18e2c:	460f      	mov	r7, r1
   18e2e:	b301      	cbz	r1, 18e72 <ll_rl_crpa_set+0x5a>
   18e30:	f8df 9068 	ldr.w	r9, [pc, #104]	; 18e9c <ll_rl_crpa_set+0x84>
   18e34:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18e36:	f000 0a01 	and.w	sl, r0, #1
   18e3a:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   18e3e:	e003      	b.n	18e48 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18e40:	2c08      	cmp	r4, #8
   18e42:	f109 0928 	add.w	r9, r9, #40	; 0x28
   18e46:	d0ee      	beq.n	18e26 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18e48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18e4c:	4625      	mov	r5, r4
   18e4e:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   18e52:	07d1      	lsls	r1, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18e54:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18e58:	f3c2 1380 	ubfx	r3, r2, #6, #1
   18e5c:	d5f0      	bpl.n	18e40 <ll_rl_crpa_set+0x28>
   18e5e:	4553      	cmp	r3, sl
   18e60:	d1ee      	bne.n	18e40 <ll_rl_crpa_set+0x28>
   18e62:	4648      	mov	r0, r9
   18e64:	2206      	movs	r2, #6
   18e66:	4639      	mov	r1, r7
   18e68:	f00d fa05 	bl	26276 <memcmp>
   18e6c:	2800      	cmp	r0, #0
   18e6e:	d1e7      	bne.n	18e40 <ll_rl_crpa_set+0x28>
   18e70:	e004      	b.n	18e7c <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   18e72:	2a07      	cmp	r2, #7
   18e74:	d8d7      	bhi.n	18e26 <ll_rl_crpa_set+0xe>
   18e76:	f8df 8028 	ldr.w	r8, [pc, #40]	; 18ea0 <ll_rl_crpa_set+0x88>
   18e7a:	4615      	mov	r5, r2
   18e7c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   18e80:	00eb      	lsls	r3, r5, #3
   18e82:	f818 2035 	ldrb.w	r2, [r8, r5, lsl #3]
   18e86:	07d2      	lsls	r2, r2, #31
   18e88:	d5cd      	bpl.n	18e26 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18e8a:	3318      	adds	r3, #24
   18e8c:	6830      	ldr	r0, [r6, #0]
   18e8e:	f848 0003 	str.w	r0, [r8, r3]
   18e92:	4498      	add	r8, r3
   18e94:	88b3      	ldrh	r3, [r6, #4]
   18e96:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   18e9a:	e7c4      	b.n	18e26 <ll_rl_crpa_set+0xe>
   18e9c:	20002c31 	.word	0x20002c31
   18ea0:	20002c30 	.word	0x20002c30

00018ea4 <ll_rl_crpa_get>:
{
   18ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18ea8:	4682      	mov	sl, r0
   18eaa:	4e1a      	ldr	r6, [pc, #104]	; (18f14 <ll_rl_crpa_get+0x70>)
   18eac:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   18eb0:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18eb2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18eb4:	f008 0801 	and.w	r8, r8, #1
   18eb8:	1e77      	subs	r7, r6, #1
   18eba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18ebe:	00d5      	lsls	r5, r2, #3
   18ec0:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   18ec4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   18ec8:	07db      	lsls	r3, r3, #31
   18eca:	f104 0401 	add.w	r4, r4, #1
   18ece:	d501      	bpl.n	18ed4 <ll_rl_crpa_get+0x30>
   18ed0:	4542      	cmp	r2, r8
   18ed2:	d006      	beq.n	18ee2 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18ed4:	2c08      	cmp	r4, #8
   18ed6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   18eda:	d1ee      	bne.n	18eba <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18edc:	2002      	movs	r0, #2
}
   18ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18ee2:	4630      	mov	r0, r6
   18ee4:	2206      	movs	r2, #6
   18ee6:	4651      	mov	r1, sl
   18ee8:	f00d f9c5 	bl	26276 <memcmp>
   18eec:	4683      	mov	fp, r0
   18eee:	2800      	cmp	r0, #0
   18ef0:	d1f0      	bne.n	18ed4 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   18ef2:	3518      	adds	r5, #24
   18ef4:	197c      	adds	r4, r7, r5
   18ef6:	2106      	movs	r1, #6
   18ef8:	4620      	mov	r0, r4
   18efa:	f7f6 fafb 	bl	f4f4 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   18efe:	2800      	cmp	r0, #0
   18f00:	d0ec      	beq.n	18edc <ll_rl_crpa_get+0x38>
   18f02:	5978      	ldr	r0, [r7, r5]
   18f04:	f8c9 0000 	str.w	r0, [r9]
   18f08:	88a3      	ldrh	r3, [r4, #4]
   18f0a:	f8a9 3004 	strh.w	r3, [r9, #4]
		return 0;
   18f0e:	4658      	mov	r0, fp
}
   18f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f14:	20002c31 	.word	0x20002c31

00018f18 <ll_rl_lrpa_get>:
{
   18f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18f1c:	4681      	mov	r9, r0
   18f1e:	4e16      	ldr	r6, [pc, #88]	; (18f78 <ll_rl_lrpa_get+0x60>)
   18f20:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   18f24:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18f26:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18f28:	f008 0801 	and.w	r8, r8, #1
   18f2c:	1e77      	subs	r7, r6, #1
   18f2e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18f32:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   18f36:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   18f3a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   18f3e:	07db      	lsls	r3, r3, #31
   18f40:	f104 0401 	add.w	r4, r4, #1
   18f44:	d501      	bpl.n	18f4a <ll_rl_lrpa_get+0x32>
   18f46:	4542      	cmp	r2, r8
   18f48:	d006      	beq.n	18f58 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18f4a:	2c08      	cmp	r4, #8
   18f4c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   18f50:	d1ed      	bne.n	18f2e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18f52:	2002      	movs	r0, #2
}
   18f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18f58:	4630      	mov	r0, r6
   18f5a:	2206      	movs	r2, #6
   18f5c:	4649      	mov	r1, r9
   18f5e:	f00d f98a 	bl	26276 <memcmp>
   18f62:	2800      	cmp	r0, #0
   18f64:	d1f1      	bne.n	18f4a <ll_rl_lrpa_get+0x32>
   18f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18f68:	681a      	ldr	r2, [r3, #0]
   18f6a:	f8ca 2000 	str.w	r2, [sl]
   18f6e:	889b      	ldrh	r3, [r3, #4]
   18f70:	f8aa 3004 	strh.w	r3, [sl, #4]
}
   18f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18f78:	20002c31 	.word	0x20002c31

00018f7c <ll_rl_enable>:
{
   18f7c:	b510      	push	{r4, lr}
   18f7e:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18f80:	2000      	movs	r0, #0
   18f82:	f7fb fb11 	bl	145a8 <ull_adv_is_enabled>
		? 0 : 1;
   18f86:	b108      	cbz	r0, 18f8c <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18f88:	200c      	movs	r0, #12
}
   18f8a:	bd10      	pop	{r4, pc}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18f8c:	f7fb fd52 	bl	14a34 <ull_scan_is_enabled>
		? 0 : 1;
   18f90:	2800      	cmp	r0, #0
   18f92:	d1f9      	bne.n	18f88 <ll_rl_enable+0xc>
	switch (enable) {
   18f94:	b134      	cbz	r4, 18fa4 <ll_rl_enable+0x28>
   18f96:	2c01      	cmp	r4, #1
   18f98:	d102      	bne.n	18fa0 <ll_rl_enable+0x24>
		rl_enable = 1U;
   18f9a:	4b04      	ldr	r3, [pc, #16]	; (18fac <ll_rl_enable+0x30>)
   18f9c:	701c      	strb	r4, [r3, #0]
}
   18f9e:	bd10      	pop	{r4, pc}
	switch (enable) {
   18fa0:	2012      	movs	r0, #18
}
   18fa2:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   18fa4:	4b01      	ldr	r3, [pc, #4]	; (18fac <ll_rl_enable+0x30>)
   18fa6:	701c      	strb	r4, [r3, #0]
	return 0;
   18fa8:	4620      	mov	r0, r4
}
   18faa:	bd10      	pop	{r4, pc}
   18fac:	20003bc4 	.word	0x20003bc4

00018fb0 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   18fb0:	4b03      	ldr	r3, [pc, #12]	; (18fc0 <ll_rl_timeout_set+0x10>)
   18fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18fb6:	fb02 f000 	mul.w	r0, r2, r0
   18fba:	6018      	str	r0, [r3, #0]
}
   18fbc:	4770      	bx	lr
   18fbe:	bf00      	nop
   18fc0:	20002da4 	.word	0x20002da4

00018fc4 <ll_priv_mode_set>:
{
   18fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18fc8:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18fca:	2000      	movs	r0, #0
{
   18fcc:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18fce:	f7fb faeb 	bl	145a8 <ull_adv_is_enabled>
		? 0 : 1;
   18fd2:	b110      	cbz	r0, 18fda <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18fd4:	200c      	movs	r0, #12
}
   18fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18fda:	f7fb fd2b 	bl	14a34 <ull_scan_is_enabled>
		? 0 : 1;
   18fde:	4604      	mov	r4, r0
   18fe0:	2800      	cmp	r0, #0
   18fe2:	d1f7      	bne.n	18fd4 <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18fe4:	4e1a      	ldr	r6, [pc, #104]	; (19050 <ll_priv_mode_set+0x8c>)
   18fe6:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18fea:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18fec:	f009 0901 	and.w	r9, r9, #1
   18ff0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18ff4:	00d5      	lsls	r5, r2, #3
   18ff6:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   18ffa:	f3c3 1280 	ubfx	r2, r3, #6, #1
   18ffe:	07db      	lsls	r3, r3, #31
   19000:	f104 0401 	add.w	r4, r4, #1
   19004:	d501      	bpl.n	1900a <ll_priv_mode_set+0x46>
   19006:	454a      	cmp	r2, r9
   19008:	d006      	beq.n	19018 <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1900a:	2c08      	cmp	r4, #8
   1900c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19010:	d1ee      	bne.n	18ff0 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19012:	2002      	movs	r0, #2
}
   19014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19018:	4630      	mov	r0, r6
   1901a:	2206      	movs	r2, #6
   1901c:	4651      	mov	r1, sl
   1901e:	f00d f92a 	bl	26276 <memcmp>
   19022:	2800      	cmp	r0, #0
   19024:	d1f1      	bne.n	1900a <ll_priv_mode_set+0x46>
		switch (mode) {
   19026:	f1b8 0f00 	cmp.w	r8, #0
   1902a:	d00b      	beq.n	19044 <ll_priv_mode_set+0x80>
   1902c:	f1b8 0f01 	cmp.w	r8, #1
   19030:	d105      	bne.n	1903e <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   19032:	5d7b      	ldrb	r3, [r7, r5]
   19034:	f043 0310 	orr.w	r3, r3, #16
   19038:	557b      	strb	r3, [r7, r5]
}
   1903a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1903e:	2012      	movs	r0, #18
}
   19040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   19044:	5d7b      	ldrb	r3, [r7, r5]
   19046:	f368 1304 	bfi	r3, r8, #4, #1
   1904a:	557b      	strb	r3, [r7, r5]
	return 0;
   1904c:	4640      	mov	r0, r8
			break;
   1904e:	e7c2      	b.n	18fd6 <ll_priv_mode_set+0x12>
   19050:	20002c31 	.word	0x20002c31

00019054 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   19054:	b1b0      	cbz	r0, 19084 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   19056:	4a0d      	ldr	r2, [pc, #52]	; (1908c <ull_filter_adv_scan_state_cb+0x38>)
   19058:	6812      	ldr	r2, [r2, #0]
{
   1905a:	b510      	push	{r4, lr}
   1905c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19060:	f240 30e7 	movw	r0, #999	; 0x3e7
   19064:	2100      	movs	r1, #0
   19066:	fbe2 0103 	umlal	r0, r1, r2, r3
   1906a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1906e:	2300      	movs	r3, #0
   19070:	f7e7 fb6a 	bl	748 <__aeabi_uldivmod>
}
   19074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19078:	4602      	mov	r2, r0
   1907a:	460b      	mov	r3, r1
   1907c:	4804      	ldr	r0, [pc, #16]	; (19090 <ull_filter_adv_scan_state_cb+0x3c>)
   1907e:	4905      	ldr	r1, [pc, #20]	; (19094 <ull_filter_adv_scan_state_cb+0x40>)
   19080:	f006 bb72 	b.w	1f768 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   19084:	4803      	ldr	r0, [pc, #12]	; (19094 <ull_filter_adv_scan_state_cb+0x40>)
   19086:	f00c bf0a 	b.w	25e9e <k_delayed_work_cancel>
   1908a:	bf00      	nop
   1908c:	20002da4 	.word	0x20002da4
   19090:	20001940 	.word	0x20001940
   19094:	20001778 	.word	0x20001778

00019098 <ull_filter_adv_update>:
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   19098:	4a0d      	ldr	r2, [pc, #52]	; (190d0 <ull_filter_adv_update+0x38>)
{
   1909a:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1909c:	2300      	movs	r3, #0
   1909e:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   190a0:	b970      	cbnz	r0, 190c0 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   190a2:	4b0c      	ldr	r3, [pc, #48]	; (190d4 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   190a4:	4a0c      	ldr	r2, [pc, #48]	; (190d8 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   190a6:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   190a8:	2000      	movs	r0, #0
   190aa:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   190ac:	b903      	cbnz	r3, 190b0 <ull_filter_adv_update+0x18>
}
   190ae:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   190b0:	f7fb fcc0 	bl	14a34 <ull_scan_is_enabled>
	if (rl_enable &&
   190b4:	2800      	cmp	r0, #0
   190b6:	d1fa      	bne.n	190ae <ull_filter_adv_update+0x16>
}
   190b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   190bc:	f7ff bbce 	b.w	1885c <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   190c0:	4618      	mov	r0, r3
   190c2:	f7fb fccf 	bl	14a64 <ull_scan_filter_pol_get>
	if (adv_fp &&
   190c6:	07c3      	lsls	r3, r0, #31
   190c8:	d4eb      	bmi.n	190a2 <ull_filter_adv_update+0xa>
		wl_update();
   190ca:	f7ff fc01 	bl	188d0 <wl_update>
   190ce:	e7e8      	b.n	190a2 <ull_filter_adv_update+0xa>
   190d0:	20002de8 	.word	0x20002de8
   190d4:	20003bc4 	.word	0x20003bc4
   190d8:	20002d70 	.word	0x20002d70

000190dc <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   190dc:	4a0e      	ldr	r2, [pc, #56]	; (19118 <ull_filter_scan_update+0x3c>)
{
   190de:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   190e0:	2300      	movs	r3, #0
   190e2:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   190e4:	07c2      	lsls	r2, r0, #31
   190e6:	d40e      	bmi.n	19106 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   190e8:	4b0c      	ldr	r3, [pc, #48]	; (1911c <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   190ea:	4a0d      	ldr	r2, [pc, #52]	; (19120 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   190ec:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   190ee:	2000      	movs	r0, #0
   190f0:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   190f2:	b903      	cbnz	r3, 190f6 <ull_filter_scan_update+0x1a>
}
   190f4:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   190f6:	f7fb fa57 	bl	145a8 <ull_adv_is_enabled>
	if (rl_enable &&
   190fa:	2800      	cmp	r0, #0
   190fc:	d1fa      	bne.n	190f4 <ull_filter_scan_update+0x18>
}
   190fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   19102:	f7ff bbab 	b.w	1885c <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   19106:	4618      	mov	r0, r3
   19108:	f7fb fa5a 	bl	145c0 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   1910c:	2800      	cmp	r0, #0
   1910e:	d1eb      	bne.n	190e8 <ull_filter_scan_update+0xc>
		wl_update();
   19110:	f7ff fbde 	bl	188d0 <wl_update>
   19114:	e7e8      	b.n	190e8 <ull_filter_scan_update+0xc>
   19116:	bf00      	nop
   19118:	20002de8 	.word	0x20002de8
   1911c:	20003bc4 	.word	0x20003bc4
   19120:	20002d70 	.word	0x20002d70

00019124 <ull_filter_adv_pdu_update>:
{
   19124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx = adv->lll.rl_idx;
   19128:	f890 802a 	ldrb.w	r8, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1912c:	f1b8 0f07 	cmp.w	r8, #7
{
   19130:	4606      	mov	r6, r0
   19132:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   19134:	f101 0502 	add.w	r5, r1, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19138:	d846      	bhi.n	191c8 <ull_filter_adv_pdu_update+0xa4>
   1913a:	4f3b      	ldr	r7, [pc, #236]	; (19228 <ull_filter_adv_pdu_update+0x104>)
   1913c:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   19140:	ea4f 0988 	mov.w	r9, r8, lsl #2
   19144:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19148:	0719      	lsls	r1, r3, #28
   1914a:	d52b      	bpl.n	191a4 <ull_filter_adv_pdu_update+0x80>
		LL_ASSERT(rl[idx].rpas_ready);
   1914c:	079a      	lsls	r2, r3, #30
   1914e:	d55d      	bpl.n	1920c <ull_filter_adv_pdu_update+0xe8>
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19150:	eb09 0308 	add.w	r3, r9, r8
   19154:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   19158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		pdu->tx_addr = 1;
   1915a:	7823      	ldrb	r3, [r4, #0]
   1915c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19160:	7023      	strb	r3, [r4, #0]
   19162:	6813      	ldr	r3, [r2, #0]
   19164:	f8c4 3002 	str.w	r3, [r4, #2]
   19168:	8893      	ldrh	r3, [r2, #4]
   1916a:	80ab      	strh	r3, [r5, #4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1916c:	7823      	ldrb	r3, [r4, #0]
   1916e:	f003 030f 	and.w	r3, r3, #15
   19172:	2b01      	cmp	r3, #1
   19174:	d126      	bne.n	191c4 <ull_filter_adv_pdu_update+0xa0>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19176:	44c1      	add	r9, r8
   19178:	f817 3039 	ldrb.w	r3, [r7, r9, lsl #3]
   1917c:	075b      	lsls	r3, r3, #29
   1917e:	d533      	bpl.n	191e8 <ull_filter_adv_pdu_update+0xc4>
			pdu->rx_addr = 1;
   19180:	7823      	ldrb	r3, [r4, #0]
   19182:	4622      	mov	r2, r4
   19184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19188:	f802 3b08 	strb.w	r3, [r2], #8
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1918c:	211e      	movs	r1, #30
   1918e:	2328      	movs	r3, #40	; 0x28
   19190:	fb13 1808 	smlabb	r8, r3, r8, r1
   19194:	eb07 0308 	add.w	r3, r7, r8
   19198:	f857 1008 	ldr.w	r1, [r7, r8]
   1919c:	60a1      	str	r1, [r4, #8]
   1919e:	889b      	ldrh	r3, [r3, #4]
   191a0:	8093      	strh	r3, [r2, #4]
   191a2:	e00f      	b.n	191c4 <ull_filter_adv_pdu_update+0xa0>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   191a4:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   191a8:	7823      	ldrb	r3, [r4, #0]
   191aa:	f3c0 0040 	ubfx	r0, r0, #1, #1
   191ae:	f360 1386 	bfi	r3, r0, #6, #1
   191b2:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   191b4:	4629      	mov	r1, r5
   191b6:	f7f7 fde7 	bl	10d88 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   191ba:	7823      	ldrb	r3, [r4, #0]
   191bc:	f003 030f 	and.w	r3, r3, #15
   191c0:	2b01      	cmp	r3, #1
   191c2:	d0d8      	beq.n	19176 <ull_filter_adv_pdu_update+0x52>
}
   191c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = adv->own_addr_type & 0x1;
   191c8:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   191cc:	780b      	ldrb	r3, [r1, #0]
   191ce:	f3c0 0040 	ubfx	r0, r0, #1, #1
   191d2:	f360 1386 	bfi	r3, r0, #6, #1
   191d6:	700b      	strb	r3, [r1, #0]
			ll_addr_get(pdu->tx_addr, adva);
   191d8:	4629      	mov	r1, r5
   191da:	f7f7 fdd5 	bl	10d88 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   191de:	7823      	ldrb	r3, [r4, #0]
   191e0:	f003 030f 	and.w	r3, r3, #15
   191e4:	2b01      	cmp	r3, #1
   191e6:	d1ed      	bne.n	191c4 <ull_filter_adv_pdu_update+0xa0>
			pdu->rx_addr = adv->id_addr_type;
   191e8:	f896 20d6 	ldrb.w	r2, [r6, #214]	; 0xd6
   191ec:	7821      	ldrb	r1, [r4, #0]
   191ee:	4623      	mov	r3, r4
   191f0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   191f4:	f362 11c7 	bfi	r1, r2, #7, #1
   191f8:	f803 1b08 	strb.w	r1, [r3], #8
   191fc:	f8d6 20d7 	ldr.w	r2, [r6, #215]	; 0xd7
   19200:	60a2      	str	r2, [r4, #8]
   19202:	f8b6 20db 	ldrh.w	r2, [r6, #219]	; 0xdb
   19206:	809a      	strh	r2, [r3, #4]
}
   19208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   1920c:	4a07      	ldr	r2, [pc, #28]	; (1922c <ull_filter_adv_pdu_update+0x108>)
   1920e:	4908      	ldr	r1, [pc, #32]	; (19230 <ull_filter_adv_pdu_update+0x10c>)
   19210:	4808      	ldr	r0, [pc, #32]	; (19234 <ull_filter_adv_pdu_update+0x110>)
   19212:	f44f 7313 	mov.w	r3, #588	; 0x24c
   19216:	f007 fbe2 	bl	209de <printk>
   1921a:	4040      	eors	r0, r0
   1921c:	f380 8811 	msr	BASEPRI, r0
   19220:	f04f 0003 	mov.w	r0, #3
   19224:	df02      	svc	2
   19226:	e793      	b.n	19150 <ull_filter_adv_pdu_update+0x2c>
   19228:	20002c30 	.word	0x20002c30
   1922c:	00027b80 	.word	0x00027b80
   19230:	00027be4 	.word	0x00027be4
   19234:	000272c0 	.word	0x000272c0

00019238 <ull_filter_rpa_update>:
{
   19238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1923c:	4683      	mov	fp, r0
   1923e:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   19240:	f00c fe86 	bl	25f50 <z_impl_k_uptime_ticks>
   19244:	014b      	lsls	r3, r1, #5
   19246:	0142      	lsls	r2, r0, #5
   19248:	1a12      	subs	r2, r2, r0
   1924a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1924e:	eb63 0301 	sbc.w	r3, r3, r1
   19252:	009b      	lsls	r3, r3, #2
   19254:	ea4f 0982 	mov.w	r9, r2, lsl #2
   19258:	eb19 0900 	adds.w	r9, r9, r0
   1925c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   19260:	eb41 0103 	adc.w	r1, r1, r3
   19264:	00cb      	lsls	r3, r1, #3
   19266:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1926a:	0bd9      	lsrs	r1, r3, #15
   1926c:	f3c9 3910 	ubfx	r9, r9, #12, #17
   19270:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   19274:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   19276:	f1bb 0f00 	cmp.w	fp, #0
   1927a:	d117      	bne.n	192ac <ull_filter_rpa_update+0x74>
   1927c:	4a74      	ldr	r2, [pc, #464]	; (19450 <ull_filter_rpa_update+0x218>)
   1927e:	e9d2 3200 	ldrd	r3, r2, [r2]
   19282:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   19286:	bf08      	it	eq
   19288:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1928c:	d00e      	beq.n	192ac <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1928e:	ebb9 0303 	subs.w	r3, r9, r3
   19292:	eb61 0202 	sbc.w	r2, r1, r2
   19296:	496f      	ldr	r1, [pc, #444]	; (19454 <ull_filter_rpa_update+0x21c>)
   19298:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   1929a:	428b      	cmp	r3, r1
   1929c:	f172 0300 	sbcs.w	r3, r2, #0
   192a0:	bfac      	ite	ge
   192a2:	f04f 0a01 	movge.w	sl, #1
   192a6:	f04f 0a00 	movlt.w	sl, #0
   192aa:	e001      	b.n	192b0 <ull_filter_rpa_update+0x78>
   192ac:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   192b0:	4e69      	ldr	r6, [pc, #420]	; (19458 <ull_filter_rpa_update+0x220>)
   192b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1945c <ull_filter_rpa_update+0x224>
	bool all = timeout || (rpa_last_ms == -1) ||
   192b6:	2400      	movs	r4, #0
   192b8:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   192bc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   192c0:	00a5      	lsls	r5, r4, #2
   192c2:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   192c6:	07da      	lsls	r2, r3, #31
   192c8:	d515      	bpl.n	192f6 <ull_filter_rpa_update+0xbe>
   192ca:	f1ba 0f00 	cmp.w	sl, #0
   192ce:	d101      	bne.n	192d4 <ull_filter_rpa_update+0x9c>
   192d0:	0798      	lsls	r0, r3, #30
   192d2:	d410      	bmi.n	192f6 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   192d4:	192b      	adds	r3, r5, r4
   192d6:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   192da:	0759      	lsls	r1, r3, #29
   192dc:	d431      	bmi.n	19342 <ull_filter_rpa_update+0x10a>
			if (rl[i].lirk) {
   192de:	192b      	adds	r3, r5, r4
   192e0:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   192e4:	071a      	lsls	r2, r3, #28
   192e6:	d41b      	bmi.n	19320 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   192e8:	4425      	add	r5, r4
   192ea:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   192ee:	f043 0302 	orr.w	r3, r3, #2
   192f2:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   192f6:	3401      	adds	r4, #1
   192f8:	2c08      	cmp	r4, #8
   192fa:	f108 0806 	add.w	r8, r8, #6
   192fe:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19302:	d1db      	bne.n	192bc <ull_filter_rpa_update+0x84>
	if (all) {
   19304:	f1ba 0f00 	cmp.w	sl, #0
   19308:	d004      	beq.n	19314 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1930a:	4b51      	ldr	r3, [pc, #324]	; (19450 <ull_filter_rpa_update+0x218>)
   1930c:	9a01      	ldr	r2, [sp, #4]
   1930e:	f8c3 9000 	str.w	r9, [r3]
   19312:	605a      	str	r2, [r3, #4]
	if (timeout) {
   19314:	f1bb 0f00 	cmp.w	fp, #0
   19318:	d137      	bne.n	1938a <ull_filter_rpa_update+0x152>
}
   1931a:	b007      	add	sp, #28
   1931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   19320:	a902      	add	r1, sp, #8
   19322:	f1a6 0017 	sub.w	r0, r6, #23
   19326:	f009 fc09 	bl	22b3c <bt_rpa_create>
				LL_ASSERT(!err);
   1932a:	2800      	cmp	r0, #0
   1932c:	d17c      	bne.n	19428 <ull_filter_rpa_update+0x1f0>
   1932e:	9802      	ldr	r0, [sp, #8]
   19330:	f8bd 300c 	ldrh.w	r3, [sp, #12]
				rl[i].local_rpa = &local_rpas[i];
   19334:	f8c6 8006 	str.w	r8, [r6, #6]
   19338:	f8c8 0000 	str.w	r0, [r8]
   1933c:	f8a8 3004 	strh.w	r3, [r8, #4]
   19340:	e7d2      	b.n	192e8 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   19342:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   19346:	4a46      	ldr	r2, [pc, #280]	; (19460 <ull_filter_rpa_update+0x228>)
   19348:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1934c:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1934e:	f10d 0307 	add.w	r3, sp, #7
   19352:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   19356:	f812 1901 	ldrb.w	r1, [r2], #-1
   1935a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1935e:	4283      	cmp	r3, r0
   19360:	d1f9      	bne.n	19356 <ull_filter_rpa_update+0x11e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   19362:	4631      	mov	r1, r6
   19364:	a802      	add	r0, sp, #8
   19366:	f009 fbe9 	bl	22b3c <bt_rpa_create>
				LL_ASSERT(!err);
   1936a:	2800      	cmp	r0, #0
   1936c:	d0b7      	beq.n	192de <ull_filter_rpa_update+0xa6>
   1936e:	4a3d      	ldr	r2, [pc, #244]	; (19464 <ull_filter_rpa_update+0x22c>)
   19370:	493d      	ldr	r1, [pc, #244]	; (19468 <ull_filter_rpa_update+0x230>)
   19372:	483e      	ldr	r0, [pc, #248]	; (1946c <ull_filter_rpa_update+0x234>)
   19374:	f240 2316 	movw	r3, #534	; 0x216
   19378:	f007 fb31 	bl	209de <printk>
   1937c:	4040      	eors	r0, r0
   1937e:	f380 8811 	msr	BASEPRI, r0
   19382:	f04f 0003 	mov.w	r0, #3
   19386:	df02      	svc	2
   19388:	e7a9      	b.n	192de <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   1938a:	2000      	movs	r0, #0
   1938c:	f7fb f8fe 	bl	1458c <ull_adv_is_enabled_get>
		if (adv) {
   19390:	4604      	mov	r4, r0
   19392:	2800      	cmp	r0, #0
   19394:	d0c1      	beq.n	1931a <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19396:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
   1939a:	075b      	lsls	r3, r3, #29
   1939c:	d5bd      	bpl.n	1931a <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1939e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   193a2:	2b07      	cmp	r3, #7
   193a4:	d8b9      	bhi.n	1931a <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   193a6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
   193aa:	f100 011c 	add.w	r1, r0, #28
   193ae:	eb05 0285 	add.w	r2, r5, r5, lsl #2
	first = pdu->first;
   193b2:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
   193b6:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   193ba:	f102 0311 	add.w	r3, r2, #17
	if (first == last) {
   193be:	4285      	cmp	r5, r0
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   193c0:	eb01 0603 	add.w	r6, r1, r3
	first = pdu->first;
   193c4:	b2c7      	uxtb	r7, r0
	if (first == last) {
   193c6:	d007      	beq.n	193d8 <ull_filter_rpa_update+0x1a0>
		pdu->last = first;
   193c8:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
   193cc:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   193d0:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
		if (first_latest != first) {
   193d4:	4287      	cmp	r7, r0
   193d6:	d038      	beq.n	1944a <ull_filter_rpa_update+0x212>
		last++;
   193d8:	3501      	adds	r5, #1
   193da:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   193dc:	2d02      	cmp	r5, #2
   193de:	d031      	beq.n	19444 <ull_filter_rpa_update+0x20c>
   193e0:	2227      	movs	r2, #39	; 0x27
   193e2:	2002      	movs	r0, #2
   193e4:	fb12 0205 	smlabb	r2, r2, r5, r0
		pdu->chan_sel = prev->chan_sel;
   193e8:	5ccb      	ldrb	r3, [r1, r3]
	return (void *)pdu->pdu[last];
   193ea:	f104 072b 	add.w	r7, r4, #43	; 0x2b
   193ee:	f3c3 1140 	ubfx	r1, r3, #5, #1
	pdu->type = prev->type;
   193f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
   193f6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   193fa:	5cb9      	ldrb	r1, [r7, r2]
   193fc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
   19400:	430b      	orrs	r3, r1
   19402:	54bb      	strb	r3, [r7, r2]
   19404:	4417      	add	r7, r2
	ull_filter_adv_pdu_update(adv, pdu);
   19406:	4639      	mov	r1, r7
   19408:	4620      	mov	r0, r4
   1940a:	f7ff fe8b 	bl	19124 <ull_filter_adv_pdu_update>
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   1940e:	7872      	ldrb	r2, [r6, #1]
   19410:	f106 0108 	add.w	r1, r6, #8
   19414:	3a06      	subs	r2, #6
   19416:	f107 0008 	add.w	r0, r7, #8
   1941a:	f00c ff3c 	bl	26296 <memcpy>
	pdu->len = prev->len;
   1941e:	7873      	ldrb	r3, [r6, #1]
   19420:	707b      	strb	r3, [r7, #1]
	pdu->last = idx;
   19422:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
   19426:	e778      	b.n	1931a <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   19428:	4a0e      	ldr	r2, [pc, #56]	; (19464 <ull_filter_rpa_update+0x22c>)
   1942a:	490f      	ldr	r1, [pc, #60]	; (19468 <ull_filter_rpa_update+0x230>)
   1942c:	480f      	ldr	r0, [pc, #60]	; (1946c <ull_filter_rpa_update+0x234>)
   1942e:	f240 2323 	movw	r3, #547	; 0x223
   19432:	f007 fad4 	bl	209de <printk>
   19436:	4040      	eors	r0, r0
   19438:	f380 8811 	msr	BASEPRI, r0
   1943c:	f04f 0003 	mov.w	r0, #3
   19440:	df02      	svc	2
   19442:	e774      	b.n	1932e <ull_filter_rpa_update+0xf6>
	bool all = timeout || (rpa_last_ms == -1) ||
   19444:	2202      	movs	r2, #2
			last = 0U;
   19446:	2500      	movs	r5, #0
   19448:	e7ce      	b.n	193e8 <ull_filter_rpa_update+0x1b0>
   1944a:	3202      	adds	r2, #2
   1944c:	e7cc      	b.n	193e8 <ull_filter_rpa_update+0x1b0>
   1944e:	bf00      	nop
   19450:	20001770 	.word	0x20001770
   19454:	20002da4 	.word	0x20002da4
   19458:	20002c4e 	.word	0x20002c4e
   1945c:	20002b78 	.word	0x20002b78
   19460:	20002bb0 	.word	0x20002bb0
   19464:	00027b80 	.word	0x00027b80
   19468:	00027578 	.word	0x00027578
   1946c:	000272c0 	.word	0x000272c0

00019470 <rpa_timeout>:
{
   19470:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   19472:	2001      	movs	r0, #1
   19474:	f7ff fee0 	bl	19238 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   19478:	4a0a      	ldr	r2, [pc, #40]	; (194a4 <rpa_timeout+0x34>)
   1947a:	6812      	ldr	r2, [r2, #0]
   1947c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19480:	f240 30e7 	movw	r0, #999	; 0x3e7
   19484:	2100      	movs	r1, #0
   19486:	fbe2 0103 	umlal	r0, r1, r2, r3
   1948a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1948e:	2300      	movs	r3, #0
   19490:	f7e7 f95a 	bl	748 <__aeabi_uldivmod>
}
   19494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19498:	4602      	mov	r2, r0
   1949a:	460b      	mov	r3, r1
   1949c:	4802      	ldr	r0, [pc, #8]	; (194a8 <rpa_timeout+0x38>)
   1949e:	4903      	ldr	r1, [pc, #12]	; (194ac <rpa_timeout+0x3c>)
   194a0:	f006 b962 	b.w	1f768 <k_delayed_work_submit_to_queue>
   194a4:	20002da4 	.word	0x20002da4
   194a8:	20001940 	.word	0x20001940
   194ac:	20001778 	.word	0x20001778

000194b0 <ull_filter_rl_find>:
{
   194b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194b4:	468b      	mov	fp, r1
	if (free) {
   194b6:	4617      	mov	r7, r2
   194b8:	b10a      	cbz	r2, 194be <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   194ba:	23ff      	movs	r3, #255	; 0xff
   194bc:	7013      	strb	r3, [r2, #0]
   194be:	4d1b      	ldr	r5, [pc, #108]	; (1952c <ull_filter_rl_find+0x7c>)
{
   194c0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   194c2:	f000 0a01 	and.w	sl, r0, #1
   194c6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   194ca:	e006      	b.n	194da <ull_filter_rl_find+0x2a>
   194cc:	4552      	cmp	r2, sl
   194ce:	d01f      	beq.n	19510 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   194d0:	3401      	adds	r4, #1
   194d2:	2c08      	cmp	r4, #8
   194d4:	f105 0528 	add.w	r5, r5, #40	; 0x28
   194d8:	d015      	beq.n	19506 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   194da:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   194de:	fa5f f884 	uxtb.w	r8, r4
   194e2:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   194e6:	07d9      	lsls	r1, r3, #31
   194e8:	f3c3 1280 	ubfx	r2, r3, #6, #1
   194ec:	d4ee      	bmi.n	194cc <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   194ee:	2f00      	cmp	r7, #0
   194f0:	d0ee      	beq.n	194d0 <ull_filter_rl_find+0x20>
   194f2:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   194f4:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   194f6:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   194f8:	bf08      	it	eq
   194fa:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   194fe:	2c08      	cmp	r4, #8
   19500:	f105 0528 	add.w	r5, r5, #40	; 0x28
   19504:	d1e9      	bne.n	194da <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   19506:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1950a:	4640      	mov	r0, r8
   1950c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19510:	4628      	mov	r0, r5
   19512:	2206      	movs	r2, #6
   19514:	4659      	mov	r1, fp
   19516:	f00c feae 	bl	26276 <memcmp>
   1951a:	2800      	cmp	r0, #0
   1951c:	d0f5      	beq.n	1950a <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1951e:	2f00      	cmp	r7, #0
   19520:	d0d6      	beq.n	194d0 <ull_filter_rl_find+0x20>
   19522:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   19526:	07db      	lsls	r3, r3, #31
   19528:	d4d2      	bmi.n	194d0 <ull_filter_rl_find+0x20>
   1952a:	e7e2      	b.n	194f2 <ull_filter_rl_find+0x42>
   1952c:	20002c31 	.word	0x20002c31

00019530 <ll_rl_add>:
{
   19530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19534:	4680      	mov	r8, r0
   19536:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19538:	2000      	movs	r0, #0
{
   1953a:	460e      	mov	r6, r1
   1953c:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1953e:	f7fb f833 	bl	145a8 <ull_adv_is_enabled>
		? 0 : 1;
   19542:	b118      	cbz	r0, 1954c <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19544:	200c      	movs	r0, #12
}
   19546:	b005      	add	sp, #20
   19548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   1954c:	4604      	mov	r4, r0
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   1954e:	f7fb fa71 	bl	14a34 <ull_scan_is_enabled>
		? 0 : 1;
   19552:	2800      	cmp	r0, #0
   19554:	d1f6      	bne.n	19544 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   19556:	46c2      	mov	sl, r8
   19558:	f10d 020f 	add.w	r2, sp, #15
   1955c:	f81a 0b01 	ldrb.w	r0, [sl], #1
   19560:	4651      	mov	r1, sl
   19562:	f7ff ffa5 	bl	194b0 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19566:	2807      	cmp	r0, #7
   19568:	f240 80b8 	bls.w	196dc <ll_rl_add+0x1ac>
	} else if (j >= ARRAY_SIZE(rl)) {
   1956c:	f89d 700f 	ldrb.w	r7, [sp, #15]
   19570:	2f07      	cmp	r7, #7
   19572:	f200 80af 	bhi.w	196d4 <ll_rl_add+0x1a4>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19576:	eb07 0287 	add.w	r2, r7, r7, lsl #2
   1957a:	00d2      	lsls	r2, r2, #3
   1957c:	4d59      	ldr	r5, [pc, #356]	; (196e4 <ll_rl_add+0x1b4>)
   1957e:	f8d8 1001 	ldr.w	r1, [r8, #1]
   19582:	9201      	str	r2, [sp, #4]
   19584:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   19586:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1958a:	50e9      	str	r1, [r5, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1958c:	442b      	add	r3, r5
   1958e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
   19592:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   19594:	f898 3000 	ldrb.w	r3, [r8]
   19598:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1959c:	9200      	str	r2, [sp, #0]
   1959e:	f363 1186 	bfi	r1, r3, #6, #1
   195a2:	54a9      	strb	r1, [r5, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   195a4:	4630      	mov	r0, r6
   195a6:	2110      	movs	r1, #16
   195a8:	f7f5 ffa4 	bl	f4f4 <mem_nz>
   195ac:	9b00      	ldr	r3, [sp, #0]
   195ae:	5ce9      	ldrb	r1, [r5, r3]
   195b0:	f360 0182 	bfi	r1, r0, #2, #1
   195b4:	54e9      	strb	r1, [r5, r3]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   195b6:	4648      	mov	r0, r9
   195b8:	2110      	movs	r1, #16
   195ba:	f7f5 ff9b 	bl	f4f4 <mem_nz>
   195be:	9b00      	ldr	r3, [sp, #0]
	if (rl[i].pirk) {
   195c0:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   195c2:	5ce9      	ldrb	r1, [r5, r3]
   195c4:	f000 0001 	and.w	r0, r0, #1
   195c8:	f360 01c3 	bfi	r1, r0, #3, #1
	if (rl[i].pirk) {
   195cc:	f011 0f04 	tst.w	r1, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   195d0:	54e9      	strb	r1, [r5, r3]
	rl[i].id_addr_type = id_addr->type & 0x1;
   195d2:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
   195d6:	ea4f 0387 	mov.w	r3, r7, lsl #2
	if (rl[i].pirk) {
   195da:	d01b      	beq.n	19614 <ll_rl_add+0xe4>
		rl[i].pirk_idx = peer_irk_count;
   195dc:	f8df c108 	ldr.w	ip, [pc, #264]	; 196e8 <ll_rl_add+0x1b8>
		peer_irk_rl_ids[peer_irk_count] = i;
   195e0:	f8df e108 	ldr.w	lr, [pc, #264]	; 196ec <ll_rl_add+0x1bc>
		rl[i].pirk_idx = peer_irk_count;
   195e4:	f89c 1000 	ldrb.w	r1, [ip]
   195e8:	f88b 1017 	strb.w	r1, [fp, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   195ec:	f80e 7001 	strb.w	r7, [lr, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   195f0:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 196f0 <ll_rl_add+0x1c0>
   195f4:	eb0e 1e01 	add.w	lr, lr, r1, lsl #4
   195f8:	3101      	adds	r1, #1
   195fa:	f88c 1000 	strb.w	r1, [ip]
	psrc += length - 1;
   195fe:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   19602:	f106 0c0f 	add.w	ip, r6, #15
	for (; length > 0; length--) {
   19606:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   19608:	f81c 1901 	ldrb.w	r1, [ip], #-1
   1960c:	f80e 1f01 	strb.w	r1, [lr, #1]!
	for (; length > 0; length--) {
   19610:	45b4      	cmp	ip, r6
   19612:	d1f9      	bne.n	19608 <ll_rl_add+0xd8>
	if (rl[i].lirk) {
   19614:	2800      	cmp	r0, #0
   19616:	d145      	bne.n	196a4 <ll_rl_add+0x174>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   19618:	3218      	adds	r2, #24
__ssp_bos_icheck3(memset, void *, int)
   1961a:	2100      	movs	r1, #0
   1961c:	50a9      	str	r1, [r5, r2]
   1961e:	442a      	add	r2, r5
   19620:	4e34      	ldr	r6, [pc, #208]	; (196f4 <ll_rl_add+0x1c4>)
   19622:	8091      	strh	r1, [r2, #4]
	rl[i].dev = 0U;
   19624:	19da      	adds	r2, r3, r7
	rl[i].rpas_ready = 0U;
   19626:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1962a:	f021 0112 	bic.w	r1, r1, #18
   1962e:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19632:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   19636:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1963a:	f009 0901 	and.w	r9, r9, #1
   1963e:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   19642:	f3c2 0140 	ubfx	r1, r2, #1, #1
   19646:	07d2      	lsls	r2, r2, #31
   19648:	d501      	bpl.n	1964e <ll_rl_add+0x11e>
   1964a:	4549      	cmp	r1, r9
   1964c:	d016      	beq.n	1967c <ll_rl_add+0x14c>
	for (i = 0; i < WL_SIZE; i++) {
   1964e:	3401      	adds	r4, #1
   19650:	2c08      	cmp	r4, #8
   19652:	f106 0608 	add.w	r6, r6, #8
   19656:	d1f2      	bne.n	1963e <ll_rl_add+0x10e>
		rl[i].wl = 0U;
   19658:	19da      	adds	r2, r3, r7
   1965a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1965e:	f36f 1145 	bfc	r1, #5, #1
   19662:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   19666:	443b      	add	r3, r7
	return 0;
   19668:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1966a:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1966e:	f042 0201 	orr.w	r2, r2, #1
   19672:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   19676:	b005      	add	sp, #20
   19678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1967c:	2206      	movs	r2, #6
   1967e:	4630      	mov	r0, r6
   19680:	4651      	mov	r1, sl
   19682:	9300      	str	r3, [sp, #0]
   19684:	f00c fdf7 	bl	26276 <memcmp>
   19688:	9b00      	ldr	r3, [sp, #0]
   1968a:	2800      	cmp	r0, #0
   1968c:	d1df      	bne.n	1964e <ll_rl_add+0x11e>
		rl[i].wl = 1U;
   1968e:	19da      	adds	r2, r3, r7
		wl[j].rl_idx = i;
   19690:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   19694:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   19698:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   1969a:	f041 0120 	orr.w	r1, r1, #32
   1969e:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   196a2:	e7e0      	b.n	19666 <ll_rl_add+0x136>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   196a4:	1dd6      	adds	r6, r2, #7
   196a6:	19a8      	adds	r0, r5, r6
		rl[i].local_rpa = NULL;
   196a8:	19d9      	adds	r1, r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   196aa:	f8d9 b000 	ldr.w	fp, [r9]
   196ae:	f8d9 e004 	ldr.w	lr, [r9, #4]
   196b2:	f8d9 c008 	ldr.w	ip, [r9, #8]
   196b6:	f8d9 900c 	ldr.w	r9, [r9, #12]
   196ba:	f845 b006 	str.w	fp, [r5, r6]
   196be:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   196c2:	f8c0 e004 	str.w	lr, [r0, #4]
   196c6:	f8c0 c008 	str.w	ip, [r0, #8]
   196ca:	f8c0 900c 	str.w	r9, [r0, #12]
   196ce:	2000      	movs	r0, #0
   196d0:	6248      	str	r0, [r1, #36]	; 0x24
   196d2:	e7a1      	b.n	19618 <ll_rl_add+0xe8>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   196d4:	2007      	movs	r0, #7
}
   196d6:	b005      	add	sp, #20
   196d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   196dc:	2012      	movs	r0, #18
}
   196de:	b005      	add	sp, #20
   196e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196e4:	20002c30 	.word	0x20002c30
   196e8:	20003bc3 	.word	0x20003bc3
   196ec:	20002ba8 	.word	0x20002ba8
   196f0:	20002bb0 	.word	0x20002bb0
   196f4:	20002daa 	.word	0x20002daa

000196f8 <ull_filter_reset>:
	wl_anon = 0U;
   196f8:	4a31      	ldr	r2, [pc, #196]	; (197c0 <ull_filter_reset+0xc8>)
   196fa:	4932      	ldr	r1, [pc, #200]	; (197c4 <ull_filter_reset+0xcc>)
{
   196fc:	b4d0      	push	{r4, r6, r7}
	wl_anon = 0U;
   196fe:	2300      	movs	r3, #0
   19700:	4c31      	ldr	r4, [pc, #196]	; (197c8 <ull_filter_reset+0xd0>)
   19702:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   19704:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   19708:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1970a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1970c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19710:	d805      	bhi.n	1971e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   19712:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   19716:	f36f 1245 	bfc	r2, #5, #1
   1971a:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		wl[i].taken = 0U;
   1971e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   19722:	f36f 0200 	bfc	r2, #0, #1
   19726:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1972a:	3301      	adds	r3, #1
   1972c:	2b08      	cmp	r3, #8
   1972e:	d1e9      	bne.n	19704 <ull_filter_reset+0xc>
	rl_enable = 0U;
   19730:	4a26      	ldr	r2, [pc, #152]	; (197cc <ull_filter_reset+0xd4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   19732:	4c27      	ldr	r4, [pc, #156]	; (197d0 <ull_filter_reset+0xd8>)
	rl_enable = 0U;
   19734:	2300      	movs	r3, #0
   19736:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   19738:	780a      	ldrb	r2, [r1, #0]
   1973a:	f363 0200 	bfi	r2, r3, #0, #1
   1973e:	700a      	strb	r2, [r1, #0]
   19740:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   19744:	f363 0200 	bfi	r2, r3, #0, #1
   19748:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   1974c:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   19750:	f363 0200 	bfi	r2, r3, #0, #1
   19754:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   19758:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1975c:	f363 0200 	bfi	r2, r3, #0, #1
   19760:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   19764:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   19768:	f363 0200 	bfi	r2, r3, #0, #1
   1976c:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   19770:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   19774:	f363 0200 	bfi	r2, r3, #0, #1
   19778:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   1977c:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   19780:	f363 0200 	bfi	r2, r3, #0, #1
   19784:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   19788:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   1978c:	f363 0200 	bfi	r2, r3, #0, #1
   19790:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   19794:	4a0f      	ldr	r2, [pc, #60]	; (197d4 <ull_filter_reset+0xdc>)
   19796:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   19798:	4b0f      	ldr	r3, [pc, #60]	; (197d8 <ull_filter_reset+0xe0>)
   1979a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1979e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   197a2:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   197a6:	4b0d      	ldr	r3, [pc, #52]	; (197dc <ull_filter_reset+0xe4>)
   197a8:	6023      	str	r3, [r4, #0]
	if (init) {
   197aa:	b120      	cbz	r0, 197b6 <ull_filter_reset+0xbe>
}
   197ac:	bcd0      	pop	{r4, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   197ae:	490c      	ldr	r1, [pc, #48]	; (197e0 <ull_filter_reset+0xe8>)
   197b0:	480c      	ldr	r0, [pc, #48]	; (197e4 <ull_filter_reset+0xec>)
   197b2:	f00c bb6c 	b.w	25e8e <k_delayed_work_init>
}
   197b6:	bcd0      	pop	{r4, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   197b8:	480a      	ldr	r0, [pc, #40]	; (197e4 <ull_filter_reset+0xec>)
   197ba:	f00c bb70 	b.w	25e9e <k_delayed_work_cancel>
   197be:	bf00      	nop
   197c0:	20003bc5 	.word	0x20003bc5
   197c4:	20002c30 	.word	0x20002c30
   197c8:	20002da8 	.word	0x20002da8
   197cc:	20003bc4 	.word	0x20003bc4
   197d0:	20002da4 	.word	0x20002da4
   197d4:	20003bc3 	.word	0x20003bc3
   197d8:	20001770 	.word	0x20001770
   197dc:	000dbba0 	.word	0x000dbba0
   197e0:	00019471 	.word	0x00019471
   197e4:	20001778 	.word	0x20001778

000197e8 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   197e8:	2807      	cmp	r0, #7
   197ea:	d807      	bhi.n	197fc <ull_filter_lll_lrpa_used+0x14>
   197ec:	4b04      	ldr	r3, [pc, #16]	; (19800 <ull_filter_lll_lrpa_used+0x18>)
   197ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   197f2:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   197f6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   197fa:	4770      	bx	lr
   197fc:	2000      	movs	r0, #0
}
   197fe:	4770      	bx	lr
   19800:	20002c30 	.word	0x20002c30

00019804 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   19804:	2807      	cmp	r0, #7
   19806:	d812      	bhi.n	1982e <ull_filter_lll_lrpa_get+0x2a>
   19808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1980c:	4a09      	ldr	r2, [pc, #36]	; (19834 <ull_filter_lll_lrpa_get+0x30>)
   1980e:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   19812:	f013 0f08 	tst.w	r3, #8
   19816:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   1981a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1981e:	d007      	beq.n	19830 <ull_filter_lll_lrpa_get+0x2c>
   19820:	f3c3 0040 	ubfx	r0, r3, #1, #1
   19824:	079b      	lsls	r3, r3, #30
   19826:	d503      	bpl.n	19830 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   19828:	440a      	add	r2, r1
   1982a:	6a50      	ldr	r0, [r2, #36]	; 0x24
   1982c:	4770      	bx	lr
		return NULL;
   1982e:	2000      	movs	r0, #0
}
   19830:	4770      	bx	lr
   19832:	bf00      	nop
   19834:	20002c30 	.word	0x20002c30

00019838 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   19838:	4b02      	ldr	r3, [pc, #8]	; (19844 <ull_filter_lll_irks_get+0xc>)
   1983a:	781b      	ldrb	r3, [r3, #0]
   1983c:	7003      	strb	r3, [r0, #0]
}
   1983e:	4802      	ldr	r0, [pc, #8]	; (19848 <ull_filter_lll_irks_get+0x10>)
   19840:	4770      	bx	lr
   19842:	bf00      	nop
   19844:	20003bc3 	.word	0x20003bc3
   19848:	20002bb0 	.word	0x20002bb0

0001984c <ull_filter_lll_rl_idx>:
{
   1984c:	b538      	push	{r3, r4, r5, lr}
   1984e:	460c      	mov	r4, r1
	if (whitelist) {
   19850:	b150      	cbz	r0, 19868 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   19852:	2907      	cmp	r1, #7
   19854:	d822      	bhi.n	1989c <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
   19856:	4d2a      	ldr	r5, [pc, #168]	; (19900 <ull_filter_lll_rl_idx+0xb4>)
   19858:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1985c:	07da      	lsls	r2, r3, #31
   1985e:	d52f      	bpl.n	198c0 <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
   19860:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   19864:	7860      	ldrb	r0, [r4, #1]
}
   19866:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   19868:	2907      	cmp	r1, #7
   1986a:	d83a      	bhi.n	198e2 <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   1986c:	4b25      	ldr	r3, [pc, #148]	; (19904 <ull_filter_lll_rl_idx+0xb8>)
   1986e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19872:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   19876:	07db      	lsls	r3, r3, #31
   19878:	d501      	bpl.n	1987e <ull_filter_lll_rl_idx+0x32>
   1987a:	4620      	mov	r0, r4
}
   1987c:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   1987e:	4a22      	ldr	r2, [pc, #136]	; (19908 <ull_filter_lll_rl_idx+0xbc>)
   19880:	4922      	ldr	r1, [pc, #136]	; (1990c <ull_filter_lll_rl_idx+0xc0>)
   19882:	4823      	ldr	r0, [pc, #140]	; (19910 <ull_filter_lll_rl_idx+0xc4>)
   19884:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   19888:	f007 f8a9 	bl	209de <printk>
   1988c:	4040      	eors	r0, r0
   1988e:	f380 8811 	msr	BASEPRI, r0
   19892:	f04f 0003 	mov.w	r0, #3
   19896:	df02      	svc	2
   19898:	4620      	mov	r0, r4
}
   1989a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1989c:	4a1a      	ldr	r2, [pc, #104]	; (19908 <ull_filter_lll_rl_idx+0xbc>)
   1989e:	491d      	ldr	r1, [pc, #116]	; (19914 <ull_filter_lll_rl_idx+0xc8>)
   198a0:	481b      	ldr	r0, [pc, #108]	; (19910 <ull_filter_lll_rl_idx+0xc4>)
   198a2:	f240 23b6 	movw	r3, #694	; 0x2b6
   198a6:	f007 f89a 	bl	209de <printk>
   198aa:	4040      	eors	r0, r0
   198ac:	f380 8811 	msr	BASEPRI, r0
   198b0:	f04f 0003 	mov.w	r0, #3
   198b4:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   198b6:	4d12      	ldr	r5, [pc, #72]	; (19900 <ull_filter_lll_rl_idx+0xb4>)
   198b8:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   198bc:	07da      	lsls	r2, r3, #31
   198be:	d4cf      	bmi.n	19860 <ull_filter_lll_rl_idx+0x14>
   198c0:	4a11      	ldr	r2, [pc, #68]	; (19908 <ull_filter_lll_rl_idx+0xbc>)
   198c2:	4915      	ldr	r1, [pc, #84]	; (19918 <ull_filter_lll_rl_idx+0xcc>)
   198c4:	4812      	ldr	r0, [pc, #72]	; (19910 <ull_filter_lll_rl_idx+0xc4>)
   198c6:	f240 23b7 	movw	r3, #695	; 0x2b7
   198ca:	f007 f888 	bl	209de <printk>
   198ce:	4040      	eors	r0, r0
   198d0:	f380 8811 	msr	BASEPRI, r0
   198d4:	f04f 0003 	mov.w	r0, #3
   198d8:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
   198da:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   198de:	7860      	ldrb	r0, [r4, #1]
   198e0:	e7c1      	b.n	19866 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   198e2:	4a09      	ldr	r2, [pc, #36]	; (19908 <ull_filter_lll_rl_idx+0xbc>)
   198e4:	490d      	ldr	r1, [pc, #52]	; (1991c <ull_filter_lll_rl_idx+0xd0>)
   198e6:	480a      	ldr	r0, [pc, #40]	; (19910 <ull_filter_lll_rl_idx+0xc4>)
   198e8:	f240 23ba 	movw	r3, #698	; 0x2ba
   198ec:	f007 f877 	bl	209de <printk>
   198f0:	4040      	eors	r0, r0
   198f2:	f380 8811 	msr	BASEPRI, r0
   198f6:	f04f 0003 	mov.w	r0, #3
   198fa:	df02      	svc	2
   198fc:	e7b6      	b.n	1986c <ull_filter_lll_rl_idx+0x20>
   198fe:	bf00      	nop
   19900:	20002da8 	.word	0x20002da8
   19904:	20002c30 	.word	0x20002c30
   19908:	00027b80 	.word	0x00027b80
   1990c:	00027d58 	.word	0x00027d58
   19910:	000272c0 	.word	0x000272c0
   19914:	00027bf8 	.word	0x00027bf8
   19918:	00027c9c 	.word	0x00027c9c
   1991c:	00027cb4 	.word	0x00027cb4

00019920 <ull_filter_lll_rl_irk_idx>:
{
   19920:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19922:	4b20      	ldr	r3, [pc, #128]	; (199a4 <ull_filter_lll_rl_irk_idx+0x84>)
   19924:	781b      	ldrb	r3, [r3, #0]
   19926:	4283      	cmp	r3, r0
{
   19928:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1992a:	d90c      	bls.n	19946 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1992c:	4b1e      	ldr	r3, [pc, #120]	; (199a8 <ull_filter_lll_rl_irk_idx+0x88>)
   1992e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19930:	2c07      	cmp	r4, #7
   19932:	d819      	bhi.n	19968 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   19934:	4b1d      	ldr	r3, [pc, #116]	; (199ac <ull_filter_lll_rl_irk_idx+0x8c>)
   19936:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1993a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1993e:	07db      	lsls	r3, r3, #31
   19940:	d520      	bpl.n	19984 <ull_filter_lll_rl_irk_idx+0x64>
}
   19942:	4620      	mov	r0, r4
   19944:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19946:	4a1a      	ldr	r2, [pc, #104]	; (199b0 <ull_filter_lll_rl_irk_idx+0x90>)
   19948:	491a      	ldr	r1, [pc, #104]	; (199b4 <ull_filter_lll_rl_irk_idx+0x94>)
   1994a:	481b      	ldr	r0, [pc, #108]	; (199b8 <ull_filter_lll_rl_irk_idx+0x98>)
   1994c:	f240 23c6 	movw	r3, #710	; 0x2c6
   19950:	f007 f845 	bl	209de <printk>
   19954:	4040      	eors	r0, r0
   19956:	f380 8811 	msr	BASEPRI, r0
   1995a:	f04f 0003 	mov.w	r0, #3
   1995e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   19960:	4b11      	ldr	r3, [pc, #68]	; (199a8 <ull_filter_lll_rl_irk_idx+0x88>)
   19962:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19964:	2c07      	cmp	r4, #7
   19966:	d9e5      	bls.n	19934 <ull_filter_lll_rl_irk_idx+0x14>
   19968:	4a11      	ldr	r2, [pc, #68]	; (199b0 <ull_filter_lll_rl_irk_idx+0x90>)
   1996a:	4914      	ldr	r1, [pc, #80]	; (199bc <ull_filter_lll_rl_irk_idx+0x9c>)
   1996c:	4812      	ldr	r0, [pc, #72]	; (199b8 <ull_filter_lll_rl_irk_idx+0x98>)
   1996e:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   19972:	f007 f834 	bl	209de <printk>
   19976:	4040      	eors	r0, r0
   19978:	f380 8811 	msr	BASEPRI, r0
   1997c:	f04f 0003 	mov.w	r0, #3
   19980:	df02      	svc	2
   19982:	e7d7      	b.n	19934 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   19984:	4a0a      	ldr	r2, [pc, #40]	; (199b0 <ull_filter_lll_rl_irk_idx+0x90>)
   19986:	490e      	ldr	r1, [pc, #56]	; (199c0 <ull_filter_lll_rl_irk_idx+0xa0>)
   19988:	480b      	ldr	r0, [pc, #44]	; (199b8 <ull_filter_lll_rl_irk_idx+0x98>)
   1998a:	f240 23c9 	movw	r3, #713	; 0x2c9
   1998e:	f007 f826 	bl	209de <printk>
   19992:	4040      	eors	r0, r0
   19994:	f380 8811 	msr	BASEPRI, r0
   19998:	f04f 0003 	mov.w	r0, #3
   1999c:	df02      	svc	2
}
   1999e:	4620      	mov	r0, r4
   199a0:	bd10      	pop	{r4, pc}
   199a2:	bf00      	nop
   199a4:	20003bc3 	.word	0x20003bc3
   199a8:	20002ba8 	.word	0x20002ba8
   199ac:	20002c30 	.word	0x20002c30
   199b0:	00027b80 	.word	0x00027b80
   199b4:	00027d64 	.word	0x00027d64
   199b8:	000272c0 	.word	0x000272c0
   199bc:	00027d84 	.word	0x00027d84
   199c0:	00027d58 	.word	0x00027d58

000199c4 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   199c4:	2807      	cmp	r0, #7
   199c6:	d823      	bhi.n	19a10 <ull_filter_lll_irk_whitelisted+0x4c>
{
   199c8:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   199ca:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   199ce:	4e11      	ldr	r6, [pc, #68]	; (19a14 <ull_filter_lll_irk_whitelisted+0x50>)
   199d0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   199d4:	07db      	lsls	r3, r3, #31
   199d6:	4604      	mov	r4, r0
   199d8:	ea4f 0580 	mov.w	r5, r0, lsl #2
   199dc:	d505      	bpl.n	199ea <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   199de:	442c      	add	r4, r5
   199e0:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   199e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   199e8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   199ea:	4a0b      	ldr	r2, [pc, #44]	; (19a18 <ull_filter_lll_irk_whitelisted+0x54>)
   199ec:	490b      	ldr	r1, [pc, #44]	; (19a1c <ull_filter_lll_irk_whitelisted+0x58>)
   199ee:	480c      	ldr	r0, [pc, #48]	; (19a20 <ull_filter_lll_irk_whitelisted+0x5c>)
   199f0:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   199f4:	f006 fff3 	bl	209de <printk>
   199f8:	4040      	eors	r0, r0
   199fa:	f380 8811 	msr	BASEPRI, r0
   199fe:	f04f 0003 	mov.w	r0, #3
   19a02:	df02      	svc	2
	return rl[rl_idx].wl;
   19a04:	442c      	add	r4, r5
   19a06:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   19a0a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   19a0e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   19a10:	2000      	movs	r0, #0
}
   19a12:	4770      	bx	lr
   19a14:	20002c30 	.word	0x20002c30
   19a18:	00027b80 	.word	0x00027b80
   19a1c:	00027bd0 	.word	0x00027bd0
   19a20:	000272c0 	.word	0x000272c0

00019a24 <ull_filter_lll_get>:
		return &wl_filter;
   19a24:	4a03      	ldr	r2, [pc, #12]	; (19a34 <ull_filter_lll_get+0x10>)
   19a26:	4b04      	ldr	r3, [pc, #16]	; (19a38 <ull_filter_lll_get+0x14>)
}
   19a28:	2800      	cmp	r0, #0
   19a2a:	bf0c      	ite	eq
   19a2c:	4610      	moveq	r0, r2
   19a2e:	4618      	movne	r0, r3
   19a30:	4770      	bx	lr
   19a32:	bf00      	nop
   19a34:	20002d70 	.word	0x20002d70
   19a38:	20002de8 	.word	0x20002de8

00019a3c <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19a3c:	4b14      	ldr	r3, [pc, #80]	; (19a90 <ull_filter_lll_rl_idx_allowed+0x54>)
   19a3e:	781b      	ldrb	r3, [r3, #0]
   19a40:	b19b      	cbz	r3, 19a6a <ull_filter_lll_rl_idx_allowed+0x2e>
   19a42:	2907      	cmp	r1, #7
{
   19a44:	b570      	push	{r4, r5, r6, lr}
   19a46:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19a48:	d80d      	bhi.n	19a66 <ull_filter_lll_rl_idx_allowed+0x2a>
   19a4a:	b960      	cbnz	r0, 19a66 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   19a4c:	4e11      	ldr	r6, [pc, #68]	; (19a94 <ull_filter_lll_rl_idx_allowed+0x58>)
   19a4e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   19a52:	008d      	lsls	r5, r1, #2
   19a54:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   19a58:	07da      	lsls	r2, r3, #31
   19a5a:	d50b      	bpl.n	19a74 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19a5c:	442c      	add	r4, r5
   19a5e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   19a62:	0743      	lsls	r3, r0, #29
   19a64:	d403      	bmi.n	19a6e <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   19a66:	2001      	movs	r0, #1
}
   19a68:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   19a6a:	2001      	movs	r0, #1
}
   19a6c:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19a6e:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   19a72:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   19a74:	4a08      	ldr	r2, [pc, #32]	; (19a98 <ull_filter_lll_rl_idx_allowed+0x5c>)
   19a76:	4909      	ldr	r1, [pc, #36]	; (19a9c <ull_filter_lll_rl_idx_allowed+0x60>)
   19a78:	4809      	ldr	r0, [pc, #36]	; (19aa0 <ull_filter_lll_rl_idx_allowed+0x64>)
   19a7a:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   19a7e:	f006 ffae 	bl	209de <printk>
   19a82:	4040      	eors	r0, r0
   19a84:	f380 8811 	msr	BASEPRI, r0
   19a88:	f04f 0003 	mov.w	r0, #3
   19a8c:	df02      	svc	2
   19a8e:	e7e5      	b.n	19a5c <ull_filter_lll_rl_idx_allowed+0x20>
   19a90:	20003bc4 	.word	0x20003bc4
   19a94:	20002c30 	.word	0x20002c30
   19a98:	00027b80 	.word	0x00027b80
   19a9c:	00027bd0 	.word	0x00027bd0
   19aa0:	000272c0 	.word	0x000272c0

00019aa4 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19aa4:	4b1c      	ldr	r3, [pc, #112]	; (19b18 <ull_filter_lll_rl_addr_allowed+0x74>)
   19aa6:	781b      	ldrb	r3, [r3, #0]
   19aa8:	b1f3      	cbz	r3, 19ae8 <ull_filter_lll_rl_addr_allowed+0x44>
   19aaa:	7813      	ldrb	r3, [r2, #0]
   19aac:	2bff      	cmp	r3, #255	; 0xff
   19aae:	d11b      	bne.n	19ae8 <ull_filter_lll_rl_addr_allowed+0x44>
{
   19ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ab4:	4d19      	ldr	r5, [pc, #100]	; (19b1c <ull_filter_lll_rl_addr_allowed+0x78>)
   19ab6:	4604      	mov	r4, r0
   19ab8:	46ae      	mov	lr, r5
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19aba:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19abc:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   19ac0:	b2df      	uxtb	r7, r3
   19ac2:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   19ac6:	f01c 0001 	ands.w	r0, ip, #1
   19aca:	ea4f 0683 	mov.w	r6, r3, lsl #2
   19ace:	d003      	beq.n	19ad8 <ull_filter_lll_rl_addr_allowed+0x34>
   19ad0:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   19ad4:	45a4      	cmp	ip, r4
   19ad6:	d009      	beq.n	19aec <ull_filter_lll_rl_addr_allowed+0x48>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19ad8:	3301      	adds	r3, #1
   19ada:	2b08      	cmp	r3, #8
   19adc:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   19ae0:	d1ec      	bne.n	19abc <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   19ae2:	2001      	movs	r0, #1
}
   19ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   19ae8:	2001      	movs	r0, #1
}
   19aea:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   19aec:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19af0:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   19af2:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   19af6:	f81c af01 	ldrb.w	sl, [ip, #1]!
   19afa:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   19afe:	45ca      	cmp	sl, r9
   19b00:	d1ea      	bne.n	19ad8 <ull_filter_lll_rl_addr_allowed+0x34>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   19b02:	45dc      	cmp	ip, fp
   19b04:	d1f7      	bne.n	19af6 <ull_filter_lll_rl_addr_allowed+0x52>
				return !rl[i].pirk || rl[i].dev;
   19b06:	4433      	add	r3, r6
				*rl_idx = i;
   19b08:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   19b0a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   19b0e:	075a      	lsls	r2, r3, #29
   19b10:	d5e8      	bpl.n	19ae4 <ull_filter_lll_rl_addr_allowed+0x40>
   19b12:	f3c3 1000 	ubfx	r0, r3, #4, #1
   19b16:	e7e5      	b.n	19ae4 <ull_filter_lll_rl_addr_allowed+0x40>
   19b18:	20003bc4 	.word	0x20003bc4
   19b1c:	20002c30 	.word	0x20002c30

00019b20 <ull_filter_lll_rl_addr_resolve>:
{
   19b20:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19b22:	4b0e      	ldr	r3, [pc, #56]	; (19b5c <ull_filter_lll_rl_addr_resolve+0x3c>)
   19b24:	781c      	ldrb	r4, [r3, #0]
   19b26:	b17c      	cbz	r4, 19b48 <ull_filter_lll_rl_addr_resolve+0x28>
   19b28:	2a07      	cmp	r2, #7
   19b2a:	d80d      	bhi.n	19b48 <ull_filter_lll_rl_addr_resolve+0x28>
   19b2c:	4c0c      	ldr	r4, [pc, #48]	; (19b60 <ull_filter_lll_rl_addr_resolve+0x40>)
   19b2e:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   19b32:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   19b36:	f01c 0f08 	tst.w	ip, #8
   19b3a:	d005      	beq.n	19b48 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   19b3c:	b120      	cbz	r0, 19b48 <ull_filter_lll_rl_addr_resolve+0x28>
   19b3e:	794b      	ldrb	r3, [r1, #5]
   19b40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19b44:	2b40      	cmp	r3, #64	; 0x40
   19b46:	d002      	beq.n	19b4e <ull_filter_lll_rl_addr_resolve+0x2e>
}
   19b48:	2000      	movs	r0, #0
   19b4a:	bc10      	pop	{r4}
   19b4c:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19b4e:	2028      	movs	r0, #40	; 0x28
   19b50:	fb00 4002 	mla	r0, r0, r2, r4
   19b54:	3007      	adds	r0, #7
}
   19b56:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19b58:	f008 bfdd 	b.w	22b16 <bt_rpa_irk_matches>
   19b5c:	20003bc4 	.word	0x20003bc4
   19b60:	20002c30 	.word	0x20002c30

00019b64 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   19b64:	4b02      	ldr	r3, [pc, #8]	; (19b70 <ull_filter_lll_rl_enabled+0xc>)
   19b66:	7818      	ldrb	r0, [r3, #0]
}
   19b68:	3800      	subs	r0, #0
   19b6a:	bf18      	it	ne
   19b6c:	2001      	movne	r0, #1
   19b6e:	4770      	bx	lr
   19b70:	20003bc4 	.word	0x20003bc4

00019b74 <ull_afh_conn_chm_remap>:
void ull_afh_conn_chm_remap(struct k_work* item)
{
	// retrieve afh_process struct around this work
	struct ull_afh_process* afh = CONTAINER_OF(item, struct ull_afh_process, remap_fn);
	// call technique-specific implementation
	conn_chm_remap(afh->handle, &afh->measurements_queue);
   19b74:	f100 010c 	add.w	r1, r0, #12
   19b78:	f830 0c04 	ldrh.w	r0, [r0, #-4]
   19b7c:	f000 bad6 	b.w	1a12c <conn_chm_remap>

00019b80 <ull_afh_init>:
{
   19b80:	b508      	push	{r3, lr}
		afh_conn_process[i].handle = 0xFFFF;
   19b82:	4a07      	ldr	r2, [pc, #28]	; (19ba0 <ull_afh_init+0x20>)
	k_work_q_start(&ull_afh_workqueue_q, afh_workqueue_stack,
   19b84:	4807      	ldr	r0, [pc, #28]	; (19ba4 <ull_afh_init+0x24>)
   19b86:	4908      	ldr	r1, [pc, #32]	; (19ba8 <ull_afh_init+0x28>)
		afh_conn_process[i].handle = 0xFFFF;
   19b88:	f64f 7cff 	movw	ip, #65535	; 0xffff
   19b8c:	f8a2 c000 	strh.w	ip, [r2]
	k_work_q_start(&ull_afh_workqueue_q, afh_workqueue_stack,
   19b90:	230a      	movs	r3, #10
   19b92:	f44f 7280 	mov.w	r2, #256	; 0x100
   19b96:	f005 fdc1 	bl	1f71c <k_work_q_start>
}
   19b9a:	2000      	movs	r0, #0
   19b9c:	bd08      	pop	{r3, pc}
   19b9e:	bf00      	nop
   19ba0:	20002e1c 	.word	0x20002e1c
   19ba4:	200017a8 	.word	0x200017a8
   19ba8:	20004ea0 	.word	0x20004ea0

00019bac <ull_afh_conn_init>:
{
   19bac:	b510      	push	{r4, lr}
	afh_conn_process[i].handle = handle;
   19bae:	4b06      	ldr	r3, [pc, #24]	; (19bc8 <ull_afh_conn_init+0x1c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   19bb0:	4a06      	ldr	r2, [pc, #24]	; (19bcc <ull_afh_conn_init+0x20>)
   19bb2:	8018      	strh	r0, [r3, #0]
	afh_conn_process[i].measurements_queue.next_write = 0;
   19bb4:	2400      	movs	r4, #0
   19bb6:	e9c3 4201 	strd	r4, r2, [r3, #4]
   19bba:	f8c3 4190 	str.w	r4, [r3, #400]	; 0x190
   19bbe:	60dc      	str	r4, [r3, #12]
	afh_algo_init(handle);
   19bc0:	f000 f8b2 	bl	19d28 <afh_algo_init>
}
   19bc4:	4620      	mov	r0, r4
   19bc6:	bd10      	pop	{r4, pc}
   19bc8:	20002e1c 	.word	0x20002e1c
   19bcc:	00019b75 	.word	0x00019b75

00019bd0 <ull_afh_conn_chm_update>:
{
   19bd0:	b538      	push	{r3, r4, r5, lr}
   19bd2:	4605      	mov	r5, r0
	conn = ll_connected_get(handle);
   19bd4:	4608      	mov	r0, r1
   19bd6:	f7fb fba5 	bl	15324 <ll_connected_get>
	if (!conn || conn->lll.role) {
   19bda:	b1e0      	cbz	r0, 19c16 <ull_afh_conn_chm_update+0x46>
   19bdc:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   19be0:	2b00      	cmp	r3, #0
   19be2:	4604      	mov	r4, r0
   19be4:	db17      	blt.n	19c16 <ull_afh_conn_chm_update+0x46>
	ret = ull_conn_llcp_req(conn);
   19be6:	f7fe f8b5 	bl	17d54 <ull_conn_llcp_req>
	if (ret) {
   19bea:	b9b0      	cbnz	r0, 19c1a <ull_afh_conn_chm_update+0x4a>
   19bec:	682b      	ldr	r3, [r5, #0]
   19bee:	f8c4 30f1 	str.w	r3, [r4, #241]	; 0xf1
   19bf2:	792b      	ldrb	r3, [r5, #4]
   19bf4:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	conn->llcp_req++;
   19bf8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp.chan_map.initiate = 1U;
   19bfc:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
	conn->llcp_type = LLCP_CHAN_MAP;
   19c00:	2102      	movs	r1, #2
	conn->llcp_req++;
   19c02:	3301      	adds	r3, #1
	conn->llcp.chan_map.initiate = 1U;
   19c04:	f042 0201 	orr.w	r2, r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   19c08:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
	conn->llcp_req++;
   19c0c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	conn->llcp.chan_map.initiate = 1U;
   19c10:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
}
   19c14:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   19c16:	2001      	movs	r0, #1
}
   19c18:	bd38      	pop	{r3, r4, r5, pc}
		return ret;
   19c1a:	b240      	sxtb	r0, r0
}
   19c1c:	bd38      	pop	{r3, r4, r5, pc}
   19c1e:	bf00      	nop

00019c20 <ull_afh_chm_equals>:
}


bool ull_afh_chm_equals(uint8_t *chm_1, uint8_t *chm_2)
{
	for (int i = 0; i < 5; i++) {
   19c20:	1e43      	subs	r3, r0, #1
   19c22:	3901      	subs	r1, #1
   19c24:	3004      	adds	r0, #4
		if (chm_1[i] != chm_2[i]) {
   19c26:	f813 cf01 	ldrb.w	ip, [r3, #1]!
   19c2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   19c2e:	4594      	cmp	ip, r2
   19c30:	d103      	bne.n	19c3a <ull_afh_chm_equals+0x1a>
	for (int i = 0; i < 5; i++) {
   19c32:	4283      	cmp	r3, r0
   19c34:	d1f7      	bne.n	19c26 <ull_afh_chm_equals+0x6>
			return false;
		}
	}
	return true;
   19c36:	2001      	movs	r0, #1
   19c38:	4770      	bx	lr
			return false;
   19c3a:	2000      	movs	r0, #0
}
   19c3c:	4770      	bx	lr
   19c3e:	bf00      	nop

00019c40 <ull_afh_measurement_queue_get>:
	q->next_write = (q->next_write+1)%BT_AFH_MEASUREMENT_QUEUE_SIZE;
	return 0;
}

int8_t ull_afh_measurement_queue_get(struct ull_afh_measurement_queue* q, struct ull_afh_measurement* ev) {
	if (!q->has_new_data) {
   19c40:	f890 3182 	ldrb.w	r3, [r0, #386]	; 0x182
   19c44:	b34b      	cbz	r3, 19c9a <ull_afh_measurement_queue_get+0x5a>
int8_t ull_afh_measurement_queue_get(struct ull_afh_measurement_queue* q, struct ull_afh_measurement* ev) {
   19c46:	b500      	push	{lr}
		return -ENODATA;
	}
	// avoid concurrency
	do {
		q->isr_has_modified = false;
   19c48:	f04f 0e00 	mov.w	lr, #0
		memcpy(ev, &q->queue[q->next_read], sizeof(struct ull_afh_measurement));
   19c4c:	f890 3181 	ldrb.w	r3, [r0, #385]	; 0x181
		q->isr_has_modified = false;
   19c50:	f880 e183 	strb.w	lr, [r0, #387]	; 0x183
		memcpy(ev, &q->queue[q->next_read], sizeof(struct ull_afh_measurement));
   19c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19c58:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   19c5c:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
   19c60:	6853      	ldr	r3, [r2, #4]
   19c62:	6892      	ldr	r2, [r2, #8]
   19c64:	608a      	str	r2, [r1, #8]
   19c66:	f8c1 c000 	str.w	ip, [r1]
   19c6a:	604b      	str	r3, [r1, #4]
	} while (q->isr_has_modified);
   19c6c:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   19c70:	2b00      	cmp	r3, #0
   19c72:	d1eb      	bne.n	19c4c <ull_afh_measurement_queue_get+0xc>
	// We managed to read one value, move next_read by one
	// Todo what happens if concurrency here?
	q->next_read = (q->next_read+1)%BT_AFH_MEASUREMENT_QUEUE_SIZE;
   19c74:	f890 2181 	ldrb.w	r2, [r0, #385]	; 0x181
		if (q->next_read==q->next_write) {
   19c78:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
	q->next_read = (q->next_read+1)%BT_AFH_MEASUREMENT_QUEUE_SIZE;
   19c7c:	3201      	adds	r2, #1
   19c7e:	f002 021f 	and.w	r2, r2, #31
		if (q->next_read==q->next_write) {
   19c82:	4291      	cmp	r1, r2
	q->next_read = (q->next_read+1)%BT_AFH_MEASUREMENT_QUEUE_SIZE;
   19c84:	f880 2181 	strb.w	r2, [r0, #385]	; 0x181
		if (q->next_read==q->next_write) {
   19c88:	d002      	beq.n	19c90 <ull_afh_measurement_queue_get+0x50>
			q->has_new_data = false;
	}
	return 0;
   19c8a:	4618      	mov	r0, r3
}
   19c8c:	f85d fb04 	ldr.w	pc, [sp], #4
			q->has_new_data = false;
   19c90:	f880 3182 	strb.w	r3, [r0, #386]	; 0x182
	return 0;
   19c94:	4618      	mov	r0, r3
}
   19c96:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODATA;
   19c9a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   19c9e:	4770      	bx	lr

00019ca0 <lll_afh_conn_isr>:
	return 0;
}

// Called by lower layer after each event, as ISR
int8_t lll_afh_conn_isr(uint16_t handle, struct ull_afh_measurement* data)
{
   19ca0:	b538      	push	{r3, r4, r5, lr}
	// todo this is O(n) but we are in ISR
	uint8_t id = CONFIG_BT_MAX_CONN;
	for (uint16_t i=0;i<CONFIG_BT_MAX_CONN;++i) {
		if (afh_conn_process[i].handle == handle) {
   19ca2:	4c1e      	ldr	r4, [pc, #120]	; (19d1c <lll_afh_conn_isr+0x7c>)
   19ca4:	8823      	ldrh	r3, [r4, #0]
   19ca6:	4283      	cmp	r3, r0
   19ca8:	d001      	beq.n	19cae <lll_afh_conn_isr+0xe>
			break;
		}
	}
	// Ensure that we run AFH for this connection
	if (id>=CONFIG_BT_MAX_CONN) {
		return 1;
   19caa:	2001      	movs	r0, #1
	if (call_cnt%8==0) {
		call_cnt = 0;
		k_work_submit_to_queue(&ull_afh_workqueue_q, &afh_conn_process[id].remap_fn);
	}
	return 0;
}
   19cac:	bd38      	pop	{r3, r4, r5, pc}
	ull_afh_measurement_queue_put(&afh_conn_process[id].measurements_queue, data);
   19cae:	460a      	mov	r2, r1
	memcpy(&q->queue[q->next_write], data, sizeof(struct ull_afh_measurement));
   19cb0:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
	q->has_new_data = true;
   19cb4:	f240 1101 	movw	r1, #257	; 0x101
   19cb8:	f8a4 1192 	strh.w	r1, [r4, #402]	; 0x192
	memcpy(&q->queue[q->next_write], data, sizeof(struct ull_afh_measurement));
   19cbc:	210c      	movs	r1, #12
   19cbe:	6810      	ldr	r0, [r2, #0]
   19cc0:	fb01 4303 	mla	r3, r1, r3, r4
   19cc4:	6851      	ldr	r1, [r2, #4]
   19cc6:	6892      	ldr	r2, [r2, #8]
   19cc8:	3310      	adds	r3, #16
   19cca:	c307      	stmia	r3!, {r0, r1, r2}
	if (call_cnt%8==0) {
   19ccc:	4914      	ldr	r1, [pc, #80]	; (19d20 <lll_afh_conn_isr+0x80>)
	q->next_write = (q->next_write+1)%BT_AFH_MEASUREMENT_QUEUE_SIZE;
   19cce:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
	if (call_cnt%8==0) {
   19cd2:	880a      	ldrh	r2, [r1, #0]
	q->next_write = (q->next_write+1)%BT_AFH_MEASUREMENT_QUEUE_SIZE;
   19cd4:	3301      	adds	r3, #1
   19cd6:	f003 031f 	and.w	r3, r3, #31
   19cda:	f884 3190 	strb.w	r3, [r4, #400]	; 0x190
	if (call_cnt%8==0) {
   19cde:	0753      	lsls	r3, r2, #29
   19ce0:	f002 0007 	and.w	r0, r2, #7
   19ce4:	d001      	beq.n	19cea <lll_afh_conn_isr+0x4a>
	return 0;
   19ce6:	2000      	movs	r0, #0
}
   19ce8:	bd38      	pop	{r3, r4, r5, pc}
		call_cnt = 0;
   19cea:	8008      	strh	r0, [r1, #0]
   19cec:	f104 030c 	add.w	r3, r4, #12
   19cf0:	f3bf 8f5b 	dmb	ish
   19cf4:	e853 0f00 	ldrex	r0, [r3]
   19cf8:	f040 0201 	orr.w	r2, r0, #1
   19cfc:	e843 2100 	strex	r1, r2, [r3]
   19d00:	2900      	cmp	r1, #0
   19d02:	d1f7      	bne.n	19cf4 <lll_afh_conn_isr+0x54>
   19d04:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   19d08:	f010 0501 	ands.w	r5, r0, #1
   19d0c:	d1eb      	bne.n	19ce6 <lll_afh_conn_isr+0x46>
		k_queue_append(&work_q->queue, work);
   19d0e:	4805      	ldr	r0, [pc, #20]	; (19d24 <lll_afh_conn_isr+0x84>)
   19d10:	1d21      	adds	r1, r4, #4
   19d12:	f00b fed8 	bl	25ac6 <k_queue_append>
	return 0;
   19d16:	4628      	mov	r0, r5
}
   19d18:	bd38      	pop	{r3, r4, r5, pc}
   19d1a:	bf00      	nop
   19d1c:	20002e1c 	.word	0x20002e1c
   19d20:	20003638 	.word	0x20003638
   19d24:	200017a8 	.word	0x200017a8

00019d28 <afh_algo_init>:
		static float channel_leaky_losses[37] = {0.0f};
		/* overall score given to channels */
		static float explo_score[37] = {0.0f};
		static float chan_score[37] = {0.0f};

		void afh_algo_init(uint16_t handle) {
   19d28:	b508      	push	{r3, lr}
   19d2a:	4910      	ldr	r1, [pc, #64]	; (19d6c <afh_algo_init+0x44>)
   19d2c:	4810      	ldr	r0, [pc, #64]	; (19d70 <afh_algo_init+0x48>)
   19d2e:	f201 3c9d 	addw	ip, r1, #925	; 0x39d
			uint8_t i,j;
			for (i=0;i<37;++i) {
				/* initialize sliding window */
				for (j=0;j<WINDOW_SIZE;++j) {
					sw_channel_pdr[i][j] = 1;
   19d32:	2201      	movs	r2, #1
				for (j=0;j<WINDOW_SIZE;++j) {
   19d34:	f1a0 0314 	sub.w	r3, r0, #20
					sw_channel_pdr[i][j] = 1;
   19d38:	f803 2f01 	strb.w	r2, [r3, #1]!
				for (j=0;j<WINDOW_SIZE;++j) {
   19d3c:	4283      	cmp	r3, r0
   19d3e:	d1fb      	bne.n	19d38 <afh_algo_init+0x10>
   19d40:	f1a1 0319 	sub.w	r3, r1, #25
				}
				for (j=0;j<LONGTERM_WINDOW_SIZE;++j) {
					longterm_sw_channel_pdr[i][j] = 1;
   19d44:	f803 2b01 	strb.w	r2, [r3], #1
				for (j=0;j<LONGTERM_WINDOW_SIZE;++j) {
   19d48:	428b      	cmp	r3, r1
   19d4a:	d1fb      	bne.n	19d44 <afh_algo_init+0x1c>
			for (i=0;i<37;++i) {
   19d4c:	f103 0119 	add.w	r1, r3, #25
   19d50:	4561      	cmp	r1, ip
   19d52:	f100 0014 	add.w	r0, r0, #20
   19d56:	d1ed      	bne.n	19d34 <afh_algo_init+0xc>
				}
			}
			memset(channel_last_use_counter, 0, 37*sizeof(uint8_t));
   19d58:	4806      	ldr	r0, [pc, #24]	; (19d74 <afh_algo_init+0x4c>)
   19d5a:	2225      	movs	r2, #37	; 0x25
   19d5c:	2100      	movs	r1, #0
   19d5e:	f00c faa8 	bl	262b2 <memset>
			printk("Starting AFH Kiel\n");
		}
   19d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			printk("Starting AFH Kiel\n");
   19d66:	4804      	ldr	r0, [pc, #16]	; (19d78 <afh_algo_init+0x50>)
   19d68:	f006 be39 	b.w	209de <printk>
   19d6c:	20000605 	.word	0x20000605
   19d70:	2000099f 	.word	0x2000099f
   19d74:	200005a0 	.word	0x200005a0
   19d78:	00027da8 	.word	0x00027da8

00019d7c <afh_sysname_update_pdr>:

		/* update channel PDR after connection event */ 
		void afh_sysname_update_pdr(uint8_t used_channel, uint8_t status) {
   19d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d80:	4603      	mov	r3, r0
			sw_channel_pdr[used_channel][sw_channel_idx[used_channel]] = status;
			sw_channel_idx[used_channel] = (sw_channel_idx[used_channel]+1)%WINDOW_SIZE;
			longterm_sw_channel_pdr[used_channel][longterm_sw_channel_idx[used_channel]] = status;
   19d82:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 19e48 <afh_sysname_update_pdr+0xcc>
			longterm_sw_channel_idx[used_channel] = (longterm_sw_channel_idx[used_channel]+1)%LONGTERM_WINDOW_SIZE;
   19d86:	4a31      	ldr	r2, [pc, #196]	; (19e4c <afh_sysname_update_pdr+0xd0>)
			longterm_sw_channel_pdr[used_channel][longterm_sw_channel_idx[used_channel]] = status;
   19d88:	f81e 4003 	ldrb.w	r4, [lr, r3]
			sw_channel_pdr[used_channel][sw_channel_idx[used_channel]] = status;
   19d8c:	4d30      	ldr	r5, [pc, #192]	; (19e50 <afh_sysname_update_pdr+0xd4>)
			sw_channel_idx[used_channel] = (sw_channel_idx[used_channel]+1)%WINDOW_SIZE;
   19d8e:	4e31      	ldr	r6, [pc, #196]	; (19e54 <afh_sysname_update_pdr+0xd8>)
			sw_channel_pdr[used_channel][sw_channel_idx[used_channel]] = status;
   19d90:	5c28      	ldrb	r0, [r5, r0]
   19d92:	4f31      	ldr	r7, [pc, #196]	; (19e58 <afh_sysname_update_pdr+0xdc>)
			longterm_sw_channel_idx[used_channel] = (longterm_sw_channel_idx[used_channel]+1)%LONGTERM_WINDOW_SIZE;
   19d94:	f104 0c01 	add.w	ip, r4, #1
   19d98:	fba2 820c 	umull	r8, r2, r2, ip
   19d9c:	08d2      	lsrs	r2, r2, #3
   19d9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19da2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19da6:	ebac 0202 	sub.w	r2, ip, r2
			sw_channel_idx[used_channel] = (sw_channel_idx[used_channel]+1)%WINDOW_SIZE;
   19daa:	f100 0c01 	add.w	ip, r0, #1
			longterm_sw_channel_idx[used_channel] = (longterm_sw_channel_idx[used_channel]+1)%LONGTERM_WINDOW_SIZE;
   19dae:	f80e 2003 	strb.w	r2, [lr, r3]
			sw_channel_idx[used_channel] = (sw_channel_idx[used_channel]+1)%WINDOW_SIZE;
   19db2:	fba6 620c 	umull	r6, r2, r6, ip
   19db6:	0912      	lsrs	r2, r2, #4
   19db8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19dbc:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
   19dc0:	54ea      	strb	r2, [r5, r3]
			sw_channel_pdr[used_channel][sw_channel_idx[used_channel]] = status;
   19dc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			longterm_sw_channel_pdr[used_channel][longterm_sw_channel_idx[used_channel]] = status;
   19dc6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19dca:	4e24      	ldr	r6, [pc, #144]	; (19e5c <afh_sysname_update_pdr+0xe0>)
   19dcc:	4d24      	ldr	r5, [pc, #144]	; (19e60 <afh_sysname_update_pdr+0xe4>)
			sw_channel_pdr[used_channel][sw_channel_idx[used_channel]] = status;
   19dce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   19dd2:	f105 0824 	add.w	r8, r5, #36	; 0x24
   19dd6:	5419      	strb	r1, [r3, r0]
			longterm_sw_channel_pdr[used_channel][longterm_sw_channel_idx[used_channel]] = status;
   19dd8:	18b3      	adds	r3, r6, r2
			uint8_t ws_idx, ch_idx;
			// recompute long-term pdr within sliding window
			memset(&sw_channel_pdr_sum, 0, 37*sizeof(uint8_t));
   19dda:	4822      	ldr	r0, [pc, #136]	; (19e64 <afh_sysname_update_pdr+0xe8>)
			longterm_sw_channel_pdr[used_channel][longterm_sw_channel_idx[used_channel]] = status;
   19ddc:	5519      	strb	r1, [r3, r4]
			memset(&sw_channel_pdr_sum, 0, 37*sizeof(uint8_t));
   19dde:	2225      	movs	r2, #37	; 0x25
   19de0:	2100      	movs	r1, #0
   19de2:	f00c fa66 	bl	262b2 <memset>
			memset(&longterm_sw_channel_pdr_sum, 0, 37*sizeof(uint8_t));
   19de6:	4c1f      	ldr	r4, [pc, #124]	; (19e64 <afh_sysname_update_pdr+0xe8>)
   19de8:	481d      	ldr	r0, [pc, #116]	; (19e60 <afh_sysname_update_pdr+0xe4>)
   19dea:	2225      	movs	r2, #37	; 0x25
   19dec:	2100      	movs	r1, #0
   19dee:	f00c fa60 	bl	262b2 <memset>
   19df2:	2000      	movs	r0, #0
		void afh_sysname_update_pdr(uint8_t used_channel, uint8_t status) {
   19df4:	46b4      	mov	ip, r6
   19df6:	46be      	mov	lr, r7
   19df8:	2301      	movs	r3, #1
   19dfa:	e00d      	b.n	19e18 <afh_sysname_update_pdr+0x9c>
			for (ch_idx=0;ch_idx<37;++ch_idx) {
				for (ws_idx=0;ws_idx<LONGTERM_WINDOW_SIZE;++ws_idx) {
					if (ws_idx<WINDOW_SIZE) {
						sw_channel_pdr_sum[ch_idx] += sw_channel_pdr[ch_idx][ws_idx];
   19dfc:	7822      	ldrb	r2, [r4, #0]
   19dfe:	f89e 9000 	ldrb.w	r9, [lr]
					}
					longterm_sw_channel_pdr_sum[ch_idx] += longterm_sw_channel_pdr[ch_idx][ws_idx];
   19e02:	4401      	add	r1, r0
						sw_channel_pdr_sum[ch_idx] += sw_channel_pdr[ch_idx][ws_idx];
   19e04:	444a      	add	r2, r9
					longterm_sw_channel_pdr_sum[ch_idx] += longterm_sw_channel_pdr[ch_idx][ws_idx];
   19e06:	b2c8      	uxtb	r0, r1
						sw_channel_pdr_sum[ch_idx] += sw_channel_pdr[ch_idx][ws_idx];
   19e08:	7022      	strb	r2, [r4, #0]
					longterm_sw_channel_pdr_sum[ch_idx] += longterm_sw_channel_pdr[ch_idx][ws_idx];
   19e0a:	7028      	strb	r0, [r5, #0]
				for (ws_idx=0;ws_idx<LONGTERM_WINDOW_SIZE;++ws_idx) {
   19e0c:	3301      	adds	r3, #1
   19e0e:	b2db      	uxtb	r3, r3
   19e10:	f10e 0e01 	add.w	lr, lr, #1
   19e14:	f10c 0c01 	add.w	ip, ip, #1
					if (ws_idx<WINDOW_SIZE) {
   19e18:	1e5a      	subs	r2, r3, #1
   19e1a:	2a13      	cmp	r2, #19
					longterm_sw_channel_pdr_sum[ch_idx] += longterm_sw_channel_pdr[ch_idx][ws_idx];
   19e1c:	f89c 1000 	ldrb.w	r1, [ip]
					if (ws_idx<WINDOW_SIZE) {
   19e20:	d9ec      	bls.n	19dfc <afh_sysname_update_pdr+0x80>
					longterm_sw_channel_pdr_sum[ch_idx] += longterm_sw_channel_pdr[ch_idx][ws_idx];
   19e22:	4401      	add	r1, r0
   19e24:	b2c8      	uxtb	r0, r1
				for (ws_idx=0;ws_idx<LONGTERM_WINDOW_SIZE;++ws_idx) {
   19e26:	2b19      	cmp	r3, #25
					longterm_sw_channel_pdr_sum[ch_idx] += longterm_sw_channel_pdr[ch_idx][ws_idx];
   19e28:	7028      	strb	r0, [r5, #0]
				for (ws_idx=0;ws_idx<LONGTERM_WINDOW_SIZE;++ws_idx) {
   19e2a:	d1ef      	bne.n	19e0c <afh_sysname_update_pdr+0x90>
			for (ch_idx=0;ch_idx<37;++ch_idx) {
   19e2c:	4545      	cmp	r5, r8
   19e2e:	f107 0714 	add.w	r7, r7, #20
   19e32:	f106 0619 	add.w	r6, r6, #25
   19e36:	f104 0401 	add.w	r4, r4, #1
   19e3a:	d002      	beq.n	19e42 <afh_sysname_update_pdr+0xc6>
					longterm_sw_channel_pdr_sum[ch_idx] += longterm_sw_channel_pdr[ch_idx][ws_idx];
   19e3c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   19e40:	e7d8      	b.n	19df4 <afh_sysname_update_pdr+0x78>
				}
			}
		}
   19e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19e46:	bf00      	nop
   19e48:	20003204 	.word	0x20003204
   19e4c:	51eb851f 	.word	0x51eb851f
   19e50:	20003254 	.word	0x20003254
   19e54:	cccccccd 	.word	0xcccccccd
   19e58:	2000098c 	.word	0x2000098c
   19e5c:	200005ec 	.word	0x200005ec
   19e60:	2000322c 	.word	0x2000322c
   19e64:	2000327c 	.word	0x2000327c

00019e68 <afh_sysname_update_leaky_losses>:
				channel_exploration_score[i] = cnt/EXCLUSION_PERIOD;
			}
		}

		/* update nearby-channel unstability after treaing ALL logged connection events */ 
		void afh_sysname_update_leaky_losses() {
   19e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19e6c:	4c1f      	ldr	r4, [pc, #124]	; (19eec <afh_sysname_update_leaky_losses+0x84>)
   19e6e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 19ef0 <afh_sysname_update_leaky_losses+0x88>
			// long-term PDR sum has been recomputed earlier in afh_sysname_update_exploration
			uint8_t i;
			for (i=1;i<36;++i) {
				channel_leaky_losses[i] = ((float)(longterm_sw_channel_pdr_sum[i-1]+longterm_sw_channel_pdr_sum[i+1])) / ((float) 2*LONGTERM_WINDOW_SIZE);
   19e72:	f8df 8080 	ldr.w	r8, [pc, #128]	; 19ef4 <afh_sysname_update_leaky_losses+0x8c>
				channel_leaky_losses[i] = - (1.0 - channel_leaky_losses[i]);
   19e76:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
   19e7a:	464d      	mov	r5, r9
   19e7c:	f104 0623 	add.w	r6, r4, #35	; 0x23
				channel_leaky_losses[i] = ((float)(longterm_sw_channel_pdr_sum[i-1]+longterm_sw_channel_pdr_sum[i+1])) / ((float) 2*LONGTERM_WINDOW_SIZE);
   19e80:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   19e84:	78a3      	ldrb	r3, [r4, #2]
   19e86:	4418      	add	r0, r3
   19e88:	f7e6 fa44 	bl	314 <__aeabi_i2f>
   19e8c:	4641      	mov	r1, r8
   19e8e:	f7e6 fb49 	bl	524 <__aeabi_fdiv>
   19e92:	4601      	mov	r1, r0
				channel_leaky_losses[i] = - (1.0 - channel_leaky_losses[i]);
   19e94:	4638      	mov	r0, r7
   19e96:	f7e6 f987 	bl	1a8 <__aeabi_fsub>
			for (i=1;i<36;++i) {
   19e9a:	42a6      	cmp	r6, r4
				channel_leaky_losses[i] = - (1.0 - channel_leaky_losses[i]);
   19e9c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   19ea0:	f845 0f04 	str.w	r0, [r5, #4]!
			for (i=1;i<36;++i) {
   19ea4:	d1ec      	bne.n	19e80 <afh_sysname_update_leaky_losses+0x18>
			}
			channel_leaky_losses[0] = ((float)longterm_sw_channel_pdr_sum[1]) / ((float)LONGTERM_WINDOW_SIZE);
   19ea6:	4c14      	ldr	r4, [pc, #80]	; (19ef8 <afh_sysname_update_leaky_losses+0x90>)
   19ea8:	7860      	ldrb	r0, [r4, #1]
   19eaa:	f7e6 fa2f 	bl	30c <__aeabi_ui2f>
   19eae:	4913      	ldr	r1, [pc, #76]	; (19efc <afh_sysname_update_leaky_losses+0x94>)
   19eb0:	f7e6 fb38 	bl	524 <__aeabi_fdiv>
   19eb4:	4601      	mov	r1, r0
			channel_leaky_losses[0] = - (1.0 - channel_leaky_losses[0]);
   19eb6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   19eba:	f7e6 f975 	bl	1a8 <__aeabi_fsub>
   19ebe:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
			channel_leaky_losses[36] = ((float)longterm_sw_channel_pdr_sum[35]) / ((float)LONGTERM_WINDOW_SIZE);
   19ec2:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
			channel_leaky_losses[0] = - (1.0 - channel_leaky_losses[0]);
   19ec6:	f8c9 3000 	str.w	r3, [r9]
			channel_leaky_losses[36] = ((float)longterm_sw_channel_pdr_sum[35]) / ((float)LONGTERM_WINDOW_SIZE);
   19eca:	f7e6 fa1f 	bl	30c <__aeabi_ui2f>
   19ece:	490b      	ldr	r1, [pc, #44]	; (19efc <afh_sysname_update_leaky_losses+0x94>)
   19ed0:	f7e6 fb28 	bl	524 <__aeabi_fdiv>
   19ed4:	4601      	mov	r1, r0
			channel_leaky_losses[36] = - (1.0 - channel_leaky_losses[36]);
   19ed6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   19eda:	f7e6 f965 	bl	1a8 <__aeabi_fsub>
   19ede:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   19ee2:	f8c9 0090 	str.w	r0, [r9, #144]	; 0x90
		}
   19ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19eea:	bf00      	nop
   19eec:	2000322b 	.word	0x2000322b
   19ef0:	200030d8 	.word	0x200030d8
   19ef4:	42480000 	.word	0x42480000
   19ef8:	2000322c 	.word	0x2000322c
   19efc:	41c80000 	.word	0x41c80000

00019f00 <afh_sysname_exclude_channels>:


		void afh_sysname_exclude_channels(uint8_t chm[]) {
   19f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f04:	b083      	sub	sp, #12
			/* We exclude channels that had at least two losses over the last 10 events */
			uint8_t i;
			/* reset desired chan map */
			uint8_t to_keep[5] = {0};
   19f06:	2400      	movs	r4, #0
   19f08:	f8df 9068 	ldr.w	r9, [pc, #104]	; 19f74 <afh_sysname_exclude_channels+0x74>
			/* include all channels with required score */
			float pdr;
			for (i=0;i<37;++i) {
				pdr = ((float)sw_channel_pdr_sum[i])/((float)WINDOW_SIZE);
   19f0c:	4e1a      	ldr	r6, [pc, #104]	; (19f78 <afh_sysname_exclude_channels+0x78>)
				if (pdr >= EXCLUSION_THRESHOLD) {
   19f0e:	4d1b      	ldr	r5, [pc, #108]	; (19f7c <afh_sysname_exclude_channels+0x7c>)
			uint8_t to_keep[5] = {0};
   19f10:	9400      	str	r4, [sp, #0]
		void afh_sysname_exclude_channels(uint8_t chm[]) {
   19f12:	4680      	mov	r8, r0
			uint8_t to_keep[5] = {0};
   19f14:	f88d 4004 	strb.w	r4, [sp, #4]
					to_keep[i>>3] |= 1 << (0x07 & i);
   19f18:	2701      	movs	r7, #1
				pdr = ((float)sw_channel_pdr_sum[i])/((float)WINDOW_SIZE);
   19f1a:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   19f1e:	f7e6 f9f5 	bl	30c <__aeabi_ui2f>
   19f22:	4631      	mov	r1, r6
   19f24:	f7e6 fafe 	bl	524 <__aeabi_fdiv>
				if (pdr >= EXCLUSION_THRESHOLD) {
   19f28:	4629      	mov	r1, r5
   19f2a:	f7e6 fbf9 	bl	720 <__aeabi_fcmpge>
					to_keep[i>>3] |= 1 << (0x07 & i);
   19f2e:	ab02      	add	r3, sp, #8
			for (i=0;i<37;++i) {
   19f30:	1c62      	adds	r2, r4, #1
					to_keep[i>>3] |= 1 << (0x07 & i);
   19f32:	eb03 01d4 	add.w	r1, r3, r4, lsr #3
   19f36:	f004 0307 	and.w	r3, r4, #7
			for (i=0;i<37;++i) {
   19f3a:	b2d4      	uxtb	r4, r2
				if (pdr >= EXCLUSION_THRESHOLD) {
   19f3c:	b130      	cbz	r0, 19f4c <afh_sysname_exclude_channels+0x4c>
					to_keep[i>>3] |= 1 << (0x07 & i);
   19f3e:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   19f42:	fa07 f303 	lsl.w	r3, r7, r3
   19f46:	4313      	orrs	r3, r2
   19f48:	f801 3c08 	strb.w	r3, [r1, #-8]
			for (i=0;i<37;++i) {
   19f4c:	2c25      	cmp	r4, #37	; 0x25
   19f4e:	d1e4      	bne.n	19f1a <afh_sysname_exclude_channels+0x1a>
   19f50:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   19f54:	4669      	mov	r1, sp
   19f56:	f108 0804 	add.w	r8, r8, #4
				} 
			}
			// exclude channels from channel map
			for (i=0;i<5;++i) {
				chm[i] &= to_keep[i];
   19f5a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   19f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
			for (i=0;i<5;++i) {
   19f62:	4543      	cmp	r3, r8
				chm[i] &= to_keep[i];
   19f64:	ea02 0204 	and.w	r2, r2, r4
   19f68:	701a      	strb	r2, [r3, #0]
			for (i=0;i<5;++i) {
   19f6a:	d1f6      	bne.n	19f5a <afh_sysname_exclude_channels+0x5a>
			}
			return;
		}
   19f6c:	b003      	add	sp, #12
   19f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19f72:	bf00      	nop
   19f74:	2000327b 	.word	0x2000327b
   19f78:	41a00000 	.word	0x41a00000
   19f7c:	3f733333 	.word	0x3f733333

00019f80 <afh_sysname_explore_channels>:

		void afh_sysname_explore_channels(uint8_t chm[]) {
   19f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f84:	4d22      	ldr	r5, [pc, #136]	; (1a010 <afh_sysname_explore_channels+0x90>)
   19f86:	4c23      	ldr	r4, [pc, #140]	; (1a014 <afh_sysname_explore_channels+0x94>)
   19f88:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1a018 <afh_sysname_explore_channels+0x98>
   19f8c:	b083      	sub	sp, #12
   19f8e:	4607      	mov	r7, r0
   19f90:	f105 0994 	add.w	r9, r5, #148	; 0x94
   19f94:	4626      	mov	r6, r4
			uint8_t i;
			/* Compute new inclusion score */
			for (i=0;i<37;++i) {
				explo_score[i] = channel_exploration_score[i] + 2*channel_leaky_losses[i];
   19f96:	f858 1f04 	ldr.w	r1, [r8, #4]!
   19f9a:	4608      	mov	r0, r1
   19f9c:	f7e6 f906 	bl	1ac <__addsf3>
   19fa0:	f855 1f04 	ldr.w	r1, [r5, #4]!
   19fa4:	f7e6 f902 	bl	1ac <__addsf3>
			for (i=0;i<37;++i) {
   19fa8:	454d      	cmp	r5, r9
				explo_score[i] = channel_exploration_score[i] + 2*channel_leaky_losses[i];
   19faa:	f846 0f04 	str.w	r0, [r6, #4]!
			for (i=0;i<37;++i) {
   19fae:	d1f2      	bne.n	19f96 <afh_sysname_explore_channels+0x16>
			}
			/* reset desired chan map */
			uint8_t to_explore[5] = {0};
   19fb0:	2300      	movs	r3, #0
   19fb2:	4d1a      	ldr	r5, [pc, #104]	; (1a01c <afh_sysname_explore_channels+0x9c>)
   19fb4:	9300      	str	r3, [sp, #0]
   19fb6:	f88d 3004 	strb.w	r3, [sp, #4]
   19fba:	4699      	mov	r9, r3
			/* include all channels with required score */
			for (i=0;i<37;++i) {
				if (explo_score[i] >= INCLUSION_THRESHOLD) {
   19fbc:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
				// 	if ( (chm[i>>3]&(1<<(0x07&i)))==0 && last_update_cnt > 6) {
				// 		LOG_DBG("leaky: %i, %i, %i\n", i,
				// 										EXCLUSION_PERIOD * (1<<(LONGTERM_WINDOW_SIZE+1-longterm_sw_channel_pdr_sum[i])),
				// 										channel_last_use_counter[i]);
				// }
					to_explore[i>>3] |= 1 << (0x07 & i);
   19fc0:	2601      	movs	r6, #1
				if (explo_score[i] >= INCLUSION_THRESHOLD) {
   19fc2:	f854 0f04 	ldr.w	r0, [r4, #4]!
   19fc6:	4641      	mov	r1, r8
   19fc8:	f7e6 fbaa 	bl	720 <__aeabi_fcmpge>
			for (i=0;i<37;++i) {
   19fcc:	fa5f f389 	uxtb.w	r3, r9
					to_explore[i>>3] |= 1 << (0x07 & i);
   19fd0:	aa02      	add	r2, sp, #8
   19fd2:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
			for (i=0;i<37;++i) {
   19fd6:	f109 0901 	add.w	r9, r9, #1
					to_explore[i>>3] |= 1 << (0x07 & i);
   19fda:	f003 0307 	and.w	r3, r3, #7
				if (explo_score[i] >= INCLUSION_THRESHOLD) {
   19fde:	b130      	cbz	r0, 19fee <afh_sysname_explore_channels+0x6e>
					to_explore[i>>3] |= 1 << (0x07 & i);
   19fe0:	f812 1c08 	ldrb.w	r1, [r2, #-8]
   19fe4:	fa06 f303 	lsl.w	r3, r6, r3
   19fe8:	430b      	orrs	r3, r1
   19fea:	f802 3c08 	strb.w	r3, [r2, #-8]
			for (i=0;i<37;++i) {
   19fee:	42ac      	cmp	r4, r5
   19ff0:	d1e7      	bne.n	19fc2 <afh_sysname_explore_channels+0x42>
   19ff2:	1e7b      	subs	r3, r7, #1
   19ff4:	4669      	mov	r1, sp
   19ff6:	3704      	adds	r7, #4
				}
			}
			for (i=0;i<5;++i) {
				chm[i] |= to_explore[i];
   19ff8:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   19ffc:	f811 2b01 	ldrb.w	r2, [r1], #1
			for (i=0;i<5;++i) {
   1a000:	42bb      	cmp	r3, r7
				chm[i] |= to_explore[i];
   1a002:	ea42 0204 	orr.w	r2, r2, r4
   1a006:	701a      	strb	r2, [r3, #0]
			for (i=0;i<5;++i) {
   1a008:	d1f6      	bne.n	19ff8 <afh_sysname_explore_channels+0x78>
			}
			return;
		}
   1a00a:	b003      	add	sp, #12
   1a00c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a010:	20003040 	.word	0x20003040
   1a014:	2000316c 	.word	0x2000316c
   1a018:	200030d4 	.word	0x200030d4
   1a01c:	20003200 	.word	0x20003200

0001a020 <afh_sysname_ensure_min_channels>:

		void afh_sysname_ensure_min_channels(uint8_t chm[]) {
   1a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a024:	b085      	sub	sp, #20
   1a026:	2600      	movs	r6, #0
   1a028:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   1a02c:	4605      	mov	r5, r0
   1a02e:	3004      	adds	r0, #4
			/* ensure that at least MIN_CHANNELS are selected */
			uint8_t cnt,i,j=0;
			uint8_t to_keep[5] = {0};
   1a030:	9602      	str	r6, [sp, #8]
   1a032:	f88d 600c 	strb.w	r6, [sp, #12]
			for (i=0;i<5;++i) {
   1a036:	9001      	str	r0, [sp, #4]
			uint8_t to_keep[5] = {0};
   1a038:	4641      	mov	r1, r8
				cnt += bit_count(chm[i]);
   1a03a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
static uint8_t bit_count(uint8_t u) { return (u - (u >> 1) - (u >> 2) - (u >> 3) - (u >> 4) - (u >> 5) - (u >> 6) - (u >> 7)); }
   1a03e:	eba2 0352 	sub.w	r3, r2, r2, lsr #1
   1a042:	eba3 0392 	sub.w	r3, r3, r2, lsr #2
   1a046:	eba3 03d2 	sub.w	r3, r3, r2, lsr #3
   1a04a:	eba3 1312 	sub.w	r3, r3, r2, lsr #4
   1a04e:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
   1a052:	eba3 1392 	sub.w	r3, r3, r2, lsr #6
   1a056:	eba3 13d2 	sub.w	r3, r3, r2, lsr #7
				cnt += bit_count(chm[i]);
   1a05a:	441e      	add	r6, r3
			for (i=0;i<5;++i) {
   1a05c:	4288      	cmp	r0, r1
				cnt += bit_count(chm[i]);
   1a05e:	b2f6      	uxtb	r6, r6
			for (i=0;i<5;++i) {
   1a060:	d1eb      	bne.n	1a03a <afh_sysname_ensure_min_channels+0x1a>
			}
			if (cnt >= MIN_NUM_CHANNELS) {
   1a062:	2e09      	cmp	r6, #9
   1a064:	d854      	bhi.n	1a110 <afh_sysname_ensure_min_channels+0xf0>
   1a066:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1a118 <afh_sysname_ensure_min_channels+0xf8>
				return;
			}
			/* find channels with highest score */
			for (i=0;i<37;++i) {
				// score = pdr (+ explo?)
				chan_score[i] = ((float)(longterm_sw_channel_pdr_sum[i]))/((float)LONGTERM_WINDOW_SIZE);
   1a06a:	4f2c      	ldr	r7, [pc, #176]	; (1a11c <afh_sysname_ensure_min_channels+0xfc>)
			if (cnt >= MIN_NUM_CHANNELS) {
   1a06c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1a120 <afh_sysname_ensure_min_channels+0x100>
				// if channel is already selected
				if (chm[i>>3]&(1<<(0x07&i))) {
					chan_score[i] = 0;
   1a070:	f04f 0b00 	mov.w	fp, #0
			for (i=0;i<37;++i) {
   1a074:	2400      	movs	r4, #0
				chan_score[i] = ((float)(longterm_sw_channel_pdr_sum[i]))/((float)LONGTERM_WINDOW_SIZE);
   1a076:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   1a07a:	f7e6 f947 	bl	30c <__aeabi_ui2f>
   1a07e:	4639      	mov	r1, r7
   1a080:	f7e6 fa50 	bl	524 <__aeabi_fdiv>
				if (chm[i>>3]&(1<<(0x07&i))) {
   1a084:	08e3      	lsrs	r3, r4, #3
				chan_score[i] = ((float)(longterm_sw_channel_pdr_sum[i]))/((float)LONGTERM_WINDOW_SIZE);
   1a086:	f84a 0f04 	str.w	r0, [sl, #4]!
				if (chm[i>>3]&(1<<(0x07&i))) {
   1a08a:	5ceb      	ldrb	r3, [r5, r3]
   1a08c:	f004 0207 	and.w	r2, r4, #7
   1a090:	4113      	asrs	r3, r2
			for (i=0;i<37;++i) {
   1a092:	3401      	adds	r4, #1
				if (chm[i>>3]&(1<<(0x07&i))) {
   1a094:	07db      	lsls	r3, r3, #31
			for (i=0;i<37;++i) {
   1a096:	b2e4      	uxtb	r4, r4
					chan_score[i] = 0;
   1a098:	bf48      	it	mi
   1a09a:	f8ca b000 	strmi.w	fp, [sl]
			for (i=0;i<37;++i) {
   1a09e:	2c25      	cmp	r4, #37	; 0x25
   1a0a0:	d1e9      	bne.n	1a076 <afh_sysname_ensure_min_channels+0x56>
				}
			}
			float best_score = -1.0f;
			uint8_t best_chan = 0;
			for (j=0;j<MIN_NUM_CHANNELS-cnt;j++) {
   1a0a2:	f1c6 060a 	rsb	r6, r6, #10
   1a0a6:	2700      	movs	r7, #0
   1a0a8:	2400      	movs	r4, #0
   1a0aa:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1a120 <afh_sysname_ensure_min_channels+0x100>
				best_score = -1.0f;
   1a0ae:	f8df b074 	ldr.w	fp, [pc, #116]	; 1a124 <afh_sysname_ensure_min_channels+0x104>
				best_chan = 0;
   1a0b2:	46a2      	mov	sl, r4
				for (i=0;i<37;i++) {
					if (chan_score[i] > best_score) {
   1a0b4:	f859 5f04 	ldr.w	r5, [r9, #4]!
   1a0b8:	4659      	mov	r1, fp
   1a0ba:	4628      	mov	r0, r5
   1a0bc:	f7e6 fb3a 	bl	734 <__aeabi_fcmpgt>
   1a0c0:	b2e3      	uxtb	r3, r4
				for (i=0;i<37;i++) {
   1a0c2:	3401      	adds	r4, #1
					if (chan_score[i] > best_score) {
   1a0c4:	b108      	cbz	r0, 1a0ca <afh_sysname_ensure_min_channels+0xaa>
   1a0c6:	469a      	mov	sl, r3
						best_score = chan_score[i];
   1a0c8:	46ab      	mov	fp, r5
				for (i=0;i<37;i++) {
   1a0ca:	2c25      	cmp	r4, #37	; 0x25
   1a0cc:	d1f2      	bne.n	1a0b4 <afh_sysname_ensure_min_channels+0x94>
						best_chan = i;
					}
				}
			to_keep[best_chan>>3] |= 1 << (0x07 & best_chan);
			chan_score[best_chan] = 0.0f;
   1a0ce:	4916      	ldr	r1, [pc, #88]	; (1a128 <afh_sysname_ensure_min_channels+0x108>)
			to_keep[best_chan>>3] |= 1 << (0x07 & best_chan);
   1a0d0:	ab04      	add	r3, sp, #16
   1a0d2:	eb03 02da 	add.w	r2, r3, sl, lsr #3
			chan_score[best_chan] = 0.0f;
   1a0d6:	2000      	movs	r0, #0
   1a0d8:	f841 002a 	str.w	r0, [r1, sl, lsl #2]
			to_keep[best_chan>>3] |= 1 << (0x07 & best_chan);
   1a0dc:	f00a 0307 	and.w	r3, sl, #7
   1a0e0:	2101      	movs	r1, #1
   1a0e2:	fa01 f303 	lsl.w	r3, r1, r3
			for (j=0;j<MIN_NUM_CHANNELS-cnt;j++) {
   1a0e6:	440f      	add	r7, r1
			to_keep[best_chan>>3] |= 1 << (0x07 & best_chan);
   1a0e8:	f812 1c08 	ldrb.w	r1, [r2, #-8]
			for (j=0;j<MIN_NUM_CHANNELS-cnt;j++) {
   1a0ec:	b2ff      	uxtb	r7, r7
			to_keep[best_chan>>3] |= 1 << (0x07 & best_chan);
   1a0ee:	430b      	orrs	r3, r1
			for (j=0;j<MIN_NUM_CHANNELS-cnt;j++) {
   1a0f0:	42b7      	cmp	r7, r6
			to_keep[best_chan>>3] |= 1 << (0x07 & best_chan);
   1a0f2:	f802 3c08 	strb.w	r3, [r2, #-8]
			for (j=0;j<MIN_NUM_CHANNELS-cnt;j++) {
   1a0f6:	dbd7      	blt.n	1a0a8 <afh_sysname_ensure_min_channels+0x88>
   1a0f8:	9801      	ldr	r0, [sp, #4]
   1a0fa:	aa02      	add	r2, sp, #8
			}
			for (i=0;i<5;++i) {
				chm[i] |= to_keep[i];
   1a0fc:	f818 1f01 	ldrb.w	r1, [r8, #1]!
   1a100:	f812 3b01 	ldrb.w	r3, [r2], #1
			for (i=0;i<5;++i) {
   1a104:	4540      	cmp	r0, r8
				chm[i] |= to_keep[i];
   1a106:	ea43 0301 	orr.w	r3, r3, r1
   1a10a:	f888 3000 	strb.w	r3, [r8]
			for (i=0;i<5;++i) {
   1a10e:	d1f5      	bne.n	1a0fc <afh_sysname_ensure_min_channels+0xdc>
			}
		}
   1a110:	b005      	add	sp, #20
   1a112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a116:	bf00      	nop
   1a118:	2000322b 	.word	0x2000322b
   1a11c:	41c80000 	.word	0x41c80000
   1a120:	20002fac 	.word	0x20002fac
   1a124:	bf800000 	.word	0xbf800000
   1a128:	20002fb0 	.word	0x20002fb0

0001a12c <conn_chm_remap>:

		/* main function - parse logged AFH measurements, compute new channel map and request change to stack */
		void conn_chm_remap(uint16_t handle, struct ull_afh_measurement_queue* measures) {
   1a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a130:	b091      	sub	sp, #68	; 0x44
   1a132:	460f      	mov	r7, r1
   1a134:	9000      	str	r0, [sp, #0]
			/* Read from FIFO queue for last events */
			struct ull_afh_measurement measure;
			uint8_t parsed_one_event = 0;
			/* Important! An AFH measure represents one measure (i.e., rssi of one RX, or success/failure of one RX/TX */
			/* We can have more than one AFH measure per connection event! */
			struct ll_conn *conn = ll_conn_get(handle);
   1a136:	f7fb f8ed 	bl	15314 <ll_conn_get>
   1a13a:	4606      	mov	r6, r0
			uint8_t* curr_chm = (uint8_t *)&conn->lll.data_chan_map[0];
			uint8_t new_chm[5] = {0};
			memcpy(&new_chm, curr_chm, 5*sizeof(uint8_t));
   1a13c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   1a140:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1a142:	9301      	str	r3, [sp, #4]
   1a144:	9002      	str	r0, [sp, #8]
   1a146:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   1a14a:	f88d 300c 	strb.w	r3, [sp, #12]
			int err = ull_afh_measurement_queue_get(measures, &measure);
   1a14e:	a904      	add	r1, sp, #16
   1a150:	4638      	mov	r0, r7
   1a152:	f7ff fd75 	bl	19c40 <ull_afh_measurement_queue_get>
			while (!err) {
   1a156:	2800      	cmp	r0, #0
   1a158:	f040 808f 	bne.w	1a27a <conn_chm_remap+0x14e>
   1a15c:	4b5f      	ldr	r3, [pc, #380]	; (1a2dc <conn_chm_remap+0x1b0>)
   1a15e:	4a60      	ldr	r2, [pc, #384]	; (1a2e0 <conn_chm_remap+0x1b4>)
			channel_last_use_counter[used_channel] = 0;
   1a160:	f8df a180 	ldr.w	sl, [pc, #384]	; 1a2e4 <conn_chm_remap+0x1b8>
   1a164:	4d60      	ldr	r5, [pc, #384]	; (1a2e8 <conn_chm_remap+0x1bc>)
					afh_sysname_update_exploration(ev.channel, ev.pdr);
					parsed_one_event = 1;
					#if LOG_STORAGE
						log_write_line(ev.event_counter, ev.channel, ev.pdr, curr_chm);
					#else
					LOG_DBG("e: %u c: %u m: 0x%02x%02x%02x%02x%02x p: %u \n", ev.event_counter,
   1a166:	f8df b184 	ldr.w	fp, [pc, #388]	; 1a2ec <conn_chm_remap+0x1c0>
   1a16a:	eba3 0902 	sub.w	r9, r3, r2
   1a16e:	4680      	mov	r8, r0
   1a170:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   1a174:	f10a 0448 	add.w	r4, sl, #72	; 0x48
				if (measure.event_counter != ev.event_counter) {
   1a178:	882b      	ldrh	r3, [r5, #0]
   1a17a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1a17e:	429a      	cmp	r2, r3
   1a180:	d033      	beq.n	1a1ea <conn_chm_remap+0xbe>
					afh_sysname_update_pdr(ev.channel, ev.pdr);
   1a182:	78e9      	ldrb	r1, [r5, #3]
   1a184:	78a8      	ldrb	r0, [r5, #2]
   1a186:	f7ff fdf9 	bl	19d7c <afh_sysname_update_pdr>
					afh_sysname_update_exploration(ev.channel, ev.pdr);
   1a18a:	78a9      	ldrb	r1, [r5, #2]
   1a18c:	78e8      	ldrb	r0, [r5, #3]
			channel_last_use_counter[used_channel] = 0;
   1a18e:	2300      	movs	r3, #0
   1a190:	f82a 3011 	strh.w	r3, [sl, r1, lsl #1]
   1a194:	4b56      	ldr	r3, [pc, #344]	; (1a2f0 <conn_chm_remap+0x1c4>)
				channel_last_use_counter[i] +=1;
   1a196:	f833 2f02 	ldrh.w	r2, [r3, #2]!
   1a19a:	3201      	adds	r2, #1
			for (i=0;i<37;++i) {
   1a19c:	42a3      	cmp	r3, r4
				channel_last_use_counter[i] +=1;
   1a19e:	801a      	strh	r2, [r3, #0]
			for (i=0;i<37;++i) {
   1a1a0:	d1f9      	bne.n	1a196 <conn_chm_remap+0x6a>
					LOG_DBG("e: %u c: %u m: 0x%02x%02x%02x%02x%02x p: %u \n", ev.event_counter,
   1a1a2:	882a      	ldrh	r2, [r5, #0]
   1a1a4:	9208      	str	r2, [sp, #32]
   1a1a6:	f896 203c 	ldrb.w	r2, [r6, #60]	; 0x3c
   1a1aa:	920a      	str	r2, [sp, #40]	; 0x28
   1a1ac:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
   1a1b0:	920b      	str	r2, [sp, #44]	; 0x2c
   1a1b2:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   1a1b6:	920c      	str	r2, [sp, #48]	; 0x30
   1a1b8:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   1a1bc:	920d      	str	r2, [sp, #52]	; 0x34
   1a1be:	ea4f 1389 	mov.w	r3, r9, lsl #6
   1a1c2:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   1a1c6:	9109      	str	r1, [sp, #36]	; 0x24
   1a1c8:	900f      	str	r0, [sp, #60]	; 0x3c
   1a1ca:	f043 0304 	orr.w	r3, r3, #4
   1a1ce:	920e      	str	r2, [sp, #56]	; 0x38
   1a1d0:	4848      	ldr	r0, [pc, #288]	; (1a2f4 <conn_chm_remap+0x1c8>)
   1a1d2:	f8cd b01c 	str.w	fp, [sp, #28]
   1a1d6:	2209      	movs	r2, #9
   1a1d8:	a907      	add	r1, sp, #28
   1a1da:	f006 ffaf 	bl	2113c <log_n>
																				  ev.channel,
																				  curr_chm[4],curr_chm[3],curr_chm[2],curr_chm[1],curr_chm[0],
																				  ev.pdr);
					#endif /* LOG_STORAGE */
					/* Prepare for next connection event */
					memset(&ev, 0, sizeof(struct sysname_event));
   1a1de:	2300      	movs	r3, #0
   1a1e0:	70eb      	strb	r3, [r5, #3]
				}
				/* save event data into ev */
				ev.event_counter = measure.event_counter;
   1a1e2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
					parsed_one_event = 1;
   1a1e6:	f04f 0801 	mov.w	r8, #1
				ev.event_counter = measure.event_counter;
   1a1ea:	802b      	strh	r3, [r5, #0]
				ev.channel = measure.channel;
   1a1ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1a1f0:	70ab      	strb	r3, [r5, #2]
				if (measure.type == BT_AFH_MEASUREMENT_TX) {
   1a1f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1a1f6:	2b02      	cmp	r3, #2
					ev.pdr = measure.data;
   1a1f8:	bf04      	itt	eq
   1a1fa:	f8bd 3016 	ldrheq.w	r3, [sp, #22]
   1a1fe:	70eb      	strbeq	r3, [r5, #3]
				}
				err = ull_afh_measurement_queue_get(measures, &measure);
   1a200:	a904      	add	r1, sp, #16
   1a202:	4638      	mov	r0, r7
   1a204:	f7ff fd1c 	bl	19c40 <ull_afh_measurement_queue_get>
			while (!err) {
   1a208:	2800      	cmp	r0, #0
   1a20a:	d0b5      	beq.n	1a178 <conn_chm_remap+0x4c>
			} /* end while new afh measurement */
			if (!parsed_one_event) {
   1a20c:	f1b8 0f00 	cmp.w	r8, #0
   1a210:	d033      	beq.n	1a27a <conn_chm_remap+0x14e>
   1a212:	4d39      	ldr	r5, [pc, #228]	; (1a2f8 <conn_chm_remap+0x1cc>)
   1a214:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1a2f0 <conn_chm_remap+0x1c4>
   1a218:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 1a2fc <conn_chm_remap+0x1d0>
				channel_exploration_score[i] = cnt/EXCLUSION_PERIOD;
   1a21c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 1a300 <conn_chm_remap+0x1d4>
   1a220:	f105 0725 	add.w	r7, r5, #37	; 0x25
				timeout = (float) (1<<(LONGTERM_WINDOW_SIZE+1-longterm_sw_channel_pdr_sum[i]));
   1a224:	2601      	movs	r6, #1
				cnt = (float) channel_last_use_counter[i];
   1a226:	f83a 0f02 	ldrh.w	r0, [sl, #2]!
   1a22a:	f7e6 f86f 	bl	30c <__aeabi_ui2f>
				timeout = (float) (1<<(LONGTERM_WINDOW_SIZE+1-longterm_sw_channel_pdr_sum[i]));
   1a22e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
				cnt = (float) channel_last_use_counter[i];
   1a232:	4604      	mov	r4, r0
				timeout = (float) (1<<(LONGTERM_WINDOW_SIZE+1-longterm_sw_channel_pdr_sum[i]));
   1a234:	f1c3 001a 	rsb	r0, r3, #26
   1a238:	fa06 f000 	lsl.w	r0, r6, r0
   1a23c:	f7e6 f86a 	bl	314 <__aeabi_i2f>
   1a240:	4601      	mov	r1, r0
				cnt = cnt/timeout;
   1a242:	4620      	mov	r0, r4
   1a244:	f7e6 f96e 	bl	524 <__aeabi_fdiv>
				channel_exploration_score[i] = cnt/EXCLUSION_PERIOD;
   1a248:	4641      	mov	r1, r8
   1a24a:	f7e6 f96b 	bl	524 <__aeabi_fdiv>
			for (i=0;i<37;++i) {
   1a24e:	42bd      	cmp	r5, r7
				channel_exploration_score[i] = cnt/EXCLUSION_PERIOD;
   1a250:	f849 0f04 	str.w	r0, [r9, #4]!
			for (i=0;i<37;++i) {
   1a254:	d1e7      	bne.n	1a226 <conn_chm_remap+0xfa>
				return;
			}
			/* compute new explorations score */
			afh_sysname_compute_exploration_score();
			/* apply leaky losses update */
			afh_sysname_update_leaky_losses();
   1a256:	f7ff fe07 	bl	19e68 <afh_sysname_update_leaky_losses>
			/* exclude bad channels */
			afh_sysname_exclude_channels(new_chm);
   1a25a:	a802      	add	r0, sp, #8
   1a25c:	f7ff fe50 	bl	19f00 <afh_sysname_exclude_channels>
			/* explore channels */
			afh_sysname_explore_channels(new_chm);
			/* ensure enough channels are available */
			afh_sysname_ensure_min_channels(new_chm);

			if (last_update_cnt > 6) {
   1a260:	4d28      	ldr	r5, [pc, #160]	; (1a304 <conn_chm_remap+0x1d8>)
			afh_sysname_explore_channels(new_chm);
   1a262:	a802      	add	r0, sp, #8
   1a264:	f7ff fe8c 	bl	19f80 <afh_sysname_explore_channels>
			afh_sysname_ensure_min_channels(new_chm);
   1a268:	a802      	add	r0, sp, #8
   1a26a:	f7ff fed9 	bl	1a020 <afh_sysname_ensure_min_channels>
			if (last_update_cnt > 6) {
   1a26e:	882b      	ldrh	r3, [r5, #0]
   1a270:	2b06      	cmp	r3, #6
   1a272:	d805      	bhi.n	1a280 <conn_chm_remap+0x154>
						}
					}
					
				}
			}
			last_update_cnt++;
   1a274:	3301      	adds	r3, #1
   1a276:	b29b      	uxth	r3, r3
   1a278:	802b      	strh	r3, [r5, #0]
			// t2 = k_cycle_get_32();
			// LOG_DBG("exec: %u\n",t2-t1);
		}
   1a27a:	b011      	add	sp, #68	; 0x44
   1a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (!ull_afh_chm_equals(curr_chm, (uint8_t *)&new_chm)) {
   1a280:	9801      	ldr	r0, [sp, #4]
   1a282:	a902      	add	r1, sp, #8
   1a284:	f7ff fccc 	bl	19c20 <ull_afh_chm_equals>
   1a288:	4604      	mov	r4, r0
   1a28a:	b118      	cbz	r0, 1a294 <conn_chm_remap+0x168>
			last_update_cnt++;
   1a28c:	882b      	ldrh	r3, [r5, #0]
   1a28e:	3301      	adds	r3, #1
   1a290:	b29b      	uxth	r3, r3
   1a292:	e7f1      	b.n	1a278 <conn_chm_remap+0x14c>
					ull_afh_conn_chm_update((uint8_t *)&new_chm, handle);
   1a294:	9900      	ldr	r1, [sp, #0]
   1a296:	a802      	add	r0, sp, #8
   1a298:	f7ff fc9a 	bl	19bd0 <ull_afh_conn_chm_update>
					for (i=0;i<37;++i) {
   1a29c:	4a1a      	ldr	r2, [pc, #104]	; (1a308 <conn_chm_remap+0x1dc>)
					last_update_cnt = 0;
   1a29e:	4620      	mov	r0, r4
								sw_channel_pdr[i][j] = 1;
   1a2a0:	2101      	movs	r1, #1
   1a2a2:	e004      	b.n	1a2ae <conn_chm_remap+0x182>
					for (i=0;i<37;++i) {
   1a2a4:	3001      	adds	r0, #1
   1a2a6:	2825      	cmp	r0, #37	; 0x25
   1a2a8:	f102 0214 	add.w	r2, r2, #20
   1a2ac:	d014      	beq.n	1a2d8 <conn_chm_remap+0x1ac>
						if ((new_chm[i>>3]&(1<<(0x07 & i))) == 0) {
   1a2ae:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1a2b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1a2b6:	eb0d 0403 	add.w	r4, sp, r3
   1a2ba:	f000 0307 	and.w	r3, r0, #7
   1a2be:	f814 4c38 	ldrb.w	r4, [r4, #-56]
   1a2c2:	fa44 f303 	asr.w	r3, r4, r3
   1a2c6:	07db      	lsls	r3, r3, #31
   1a2c8:	d4ec      	bmi.n	1a2a4 <conn_chm_remap+0x178>
   1a2ca:	f1a2 0314 	sub.w	r3, r2, #20
								sw_channel_pdr[i][j] = 1;
   1a2ce:	f803 1f01 	strb.w	r1, [r3, #1]!
							for (j=0;j<WINDOW_SIZE;++j) {
   1a2d2:	429a      	cmp	r2, r3
   1a2d4:	d1fb      	bne.n	1a2ce <conn_chm_remap+0x1a2>
   1a2d6:	e7e5      	b.n	1a2a4 <conn_chm_remap+0x178>
   1a2d8:	2301      	movs	r3, #1
   1a2da:	e7cd      	b.n	1a278 <conn_chm_remap+0x14c>
   1a2dc:	00026830 	.word	0x00026830
   1a2e0:	00026828 	.word	0x00026828
   1a2e4:	200005a0 	.word	0x200005a0
   1a2e8:	2000316c 	.word	0x2000316c
   1a2ec:	00027df0 	.word	0x00027df0
   1a2f0:	2000059e 	.word	0x2000059e
   1a2f4:	00027dbc 	.word	0x00027dbc
   1a2f8:	2000322b 	.word	0x2000322b
   1a2fc:	20003040 	.word	0x20003040
   1a300:	43480000 	.word	0x43480000
   1a304:	2000363a 	.word	0x2000363a
   1a308:	2000099f 	.word	0x2000099f

0001a30c <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a30c:	4668      	mov	r0, sp
   1a30e:	f020 0107 	bic.w	r1, r0, #7
   1a312:	468d      	mov	sp, r1
   1a314:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   1a316:	f002 fc6f 	bl	1cbf8 <isr_radio>

	ISR_DIRECT_PM();
   1a31a:	f7ec fa31 	bl	6780 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1a31e:	f7ec fd2d 	bl	6d7c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a322:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1a326:	4685      	mov	sp, r0
   1a328:	4770      	bx	lr
   1a32a:	bf00      	nop

0001a32c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1a32c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1a32e:	4b09      	ldr	r3, [pc, #36]	; (1a354 <rtc0_nrf5_isr+0x28>)
   1a330:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a334:	b93a      	cbnz	r2, 1a346 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1a336:	2001      	movs	r0, #1
   1a338:	f7f5 f9be 	bl	f6b8 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   1a33c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1a340:	2002      	movs	r0, #2
   1a342:	f7f5 b9b9 	b.w	f6b8 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1a346:	2000      	movs	r0, #0
   1a348:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1a34c:	f7f6 fb9a 	bl	10a84 <ticker_trigger>
   1a350:	e7f1      	b.n	1a336 <rtc0_nrf5_isr+0xa>
   1a352:	bf00      	nop
   1a354:	4000b000 	.word	0x4000b000

0001a358 <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(const void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   1a358:	2000      	movs	r0, #0
   1a35a:	f7f5 b9ad 	b.w	f6b8 <mayfly_run>
   1a35e:	bf00      	nop

0001a360 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   1a360:	f002 bd86 	b.w	1ce70 <radio_status_reset>

0001a364 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a364:	2801      	cmp	r0, #1
   1a366:	d800      	bhi.n	1a36a <ticker_stop_op_cb+0x6>
   1a368:	4770      	bx	lr
{
   1a36a:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a36c:	4a06      	ldr	r2, [pc, #24]	; (1a388 <ticker_stop_op_cb+0x24>)
   1a36e:	4907      	ldr	r1, [pc, #28]	; (1a38c <ticker_stop_op_cb+0x28>)
   1a370:	4807      	ldr	r0, [pc, #28]	; (1a390 <ticker_stop_op_cb+0x2c>)
   1a372:	f44f 731b 	mov.w	r3, #620	; 0x26c
   1a376:	f006 fb32 	bl	209de <printk>
   1a37a:	4040      	eors	r0, r0
   1a37c:	f380 8811 	msr	BASEPRI, r0
   1a380:	f04f 0003 	mov.w	r0, #3
   1a384:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1a386:	bd08      	pop	{r3, pc}
   1a388:	00027e00 	.word	0x00027e00
   1a38c:	00027e48 	.word	0x00027e48
   1a390:	000272c0 	.word	0x000272c0

0001a394 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a394:	2801      	cmp	r0, #1
   1a396:	d800      	bhi.n	1a39a <ticker_start_op_cb+0x6>
   1a398:	4770      	bx	lr
{
   1a39a:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a39c:	4a06      	ldr	r2, [pc, #24]	; (1a3b8 <ticker_start_op_cb+0x24>)
   1a39e:	4907      	ldr	r1, [pc, #28]	; (1a3bc <ticker_start_op_cb+0x28>)
   1a3a0:	4807      	ldr	r0, [pc, #28]	; (1a3c0 <ticker_start_op_cb+0x2c>)
   1a3a2:	f240 2377 	movw	r3, #631	; 0x277
   1a3a6:	f006 fb1a 	bl	209de <printk>
   1a3aa:	4040      	eors	r0, r0
   1a3ac:	f380 8811 	msr	BASEPRI, r0
   1a3b0:	f04f 0003 	mov.w	r0, #3
   1a3b4:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1a3b6:	bd08      	pop	{r3, pc}
   1a3b8:	00027e00 	.word	0x00027e00
   1a3bc:	00027e48 	.word	0x00027e48
   1a3c0:	000272c0 	.word	0x000272c0

0001a3c4 <preempt_ticker_cb>:
{
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a3c4:	2200      	movs	r2, #0
{
   1a3c6:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a3c8:	4611      	mov	r1, r2
   1a3ca:	4b0a      	ldr	r3, [pc, #40]	; (1a3f4 <preempt_ticker_cb+0x30>)
   1a3cc:	2001      	movs	r0, #1
   1a3ce:	f7f5 f91f 	bl	f610 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1a3d2:	b900      	cbnz	r0, 1a3d6 <preempt_ticker_cb+0x12>
}
   1a3d4:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1a3d6:	4a08      	ldr	r2, [pc, #32]	; (1a3f8 <preempt_ticker_cb+0x34>)
   1a3d8:	4908      	ldr	r1, [pc, #32]	; (1a3fc <preempt_ticker_cb+0x38>)
   1a3da:	4809      	ldr	r0, [pc, #36]	; (1a400 <preempt_ticker_cb+0x3c>)
   1a3dc:	f240 23a3 	movw	r3, #675	; 0x2a3
   1a3e0:	f006 fafd 	bl	209de <printk>
   1a3e4:	4040      	eors	r0, r0
   1a3e6:	f380 8811 	msr	BASEPRI, r0
   1a3ea:	f04f 0003 	mov.w	r0, #3
   1a3ee:	df02      	svc	2
}
   1a3f0:	bd08      	pop	{r3, pc}
   1a3f2:	bf00      	nop
   1a3f4:	20000c70 	.word	0x20000c70
   1a3f8:	00027e00 	.word	0x00027e00
   1a3fc:	00027594 	.word	0x00027594
   1a400:	000272c0 	.word	0x000272c0

0001a404 <preempt_ticker_start.isra.0>:
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a404:	b530      	push	{r4, r5, lr}
	evt = HDR_LLL2EVT(prepare_param->param);
   1a406:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a408:	4c16      	ldr	r4, [pc, #88]	; (1a464 <preempt_ticker_start.isra.0+0x60>)
   1a40a:	4917      	ldr	r1, [pc, #92]	; (1a468 <preempt_ticker_start.isra.0+0x64>)
   1a40c:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a40e:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a410:	e9cd 4207 	strd	r4, r2, [sp, #28]
   1a414:	e9cd 1205 	strd	r1, r2, [sp, #20]
   1a418:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1a41c:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1a420:	e9d3 5400 	ldrd	r5, r4, [r3]
   1a424:	6899      	ldr	r1, [r3, #8]
   1a426:	42a5      	cmp	r5, r4
   1a428:	bf2c      	ite	cs
   1a42a:	ebc1 0105 	rsbcs	r1, r1, r5
   1a42e:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a432:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a434:	9100      	str	r1, [sp, #0]
   1a436:	4610      	mov	r0, r2
   1a438:	4611      	mov	r1, r2
   1a43a:	f7f6 fb91 	bl	10b60 <ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a43e:	2802      	cmp	r0, #2
   1a440:	d801      	bhi.n	1a446 <preempt_ticker_start.isra.0+0x42>
}
   1a442:	b00b      	add	sp, #44	; 0x2c
   1a444:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a446:	4a09      	ldr	r2, [pc, #36]	; (1a46c <preempt_ticker_start.isra.0+0x68>)
   1a448:	4909      	ldr	r1, [pc, #36]	; (1a470 <preempt_ticker_start.isra.0+0x6c>)
   1a44a:	480a      	ldr	r0, [pc, #40]	; (1a474 <preempt_ticker_start.isra.0+0x70>)
   1a44c:	f240 2395 	movw	r3, #661	; 0x295
   1a450:	f006 fac5 	bl	209de <printk>
   1a454:	4040      	eors	r0, r0
   1a456:	f380 8811 	msr	BASEPRI, r0
   1a45a:	f04f 0003 	mov.w	r0, #3
   1a45e:	df02      	svc	2
}
   1a460:	b00b      	add	sp, #44	; 0x2c
   1a462:	bd30      	pop	{r4, r5, pc}
   1a464:	0001a395 	.word	0x0001a395
   1a468:	0001a3c5 	.word	0x0001a3c5
   1a46c:	00027e00 	.word	0x00027e00
   1a470:	00027e68 	.word	0x00027e68
   1a474:	000272c0 	.word	0x000272c0

0001a478 <preempt>:

static void preempt(void *param)
{
   1a478:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	uint8_t idx = UINT8_MAX;
	int resume_prio;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1a47a:	4e4c      	ldr	r6, [pc, #304]	; (1a5ac <preempt+0x134>)
{
   1a47c:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
   1a47e:	f7f9 fcb9 	bl	13df4 <ull_prepare_dequeue_get>
	if (!event.curr.abort_cb || !event.curr.param) {
   1a482:	68b3      	ldr	r3, [r6, #8]
	uint8_t idx = UINT8_MAX;
   1a484:	22ff      	movs	r2, #255	; 0xff
   1a486:	f88d 200e 	strb.w	r2, [sp, #14]
	if (!event.curr.abort_cb || !event.curr.param) {
   1a48a:	b19b      	cbz	r3, 1a4b4 <preempt+0x3c>
   1a48c:	6833      	ldr	r3, [r6, #0]
   1a48e:	b18b      	cbz	r3, 1a4b4 <preempt+0x3c>
		return;
	}

	next = ull_prepare_dequeue_iter(&idx);
   1a490:	f10d 000e 	add.w	r0, sp, #14
   1a494:	f7f9 fcbc 	bl	13e10 <ull_prepare_dequeue_iter>
	if (!next) {
   1a498:	4604      	mov	r4, r0
   1a49a:	b158      	cbz	r0, 1a4b4 <preempt+0x3c>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1a49c:	f894 3020 	ldrb.w	r3, [r4, #32]
   1a4a0:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1a4a4:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   1a4a8:	d006      	beq.n	1a4b8 <preempt+0x40>
		next = ull_prepare_dequeue_iter(&idx);
   1a4aa:	f7f9 fcb1 	bl	13e10 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1a4ae:	4604      	mov	r4, r0
   1a4b0:	2800      	cmp	r0, #0
   1a4b2:	d1f3      	bne.n	1a49c <preempt+0x24>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   1a4b4:	b00b      	add	sp, #44	; 0x2c
   1a4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1a4b8:	ab05      	add	r3, sp, #20
   1a4ba:	e9d6 2700 	ldrd	r2, r7, [r6]
   1a4be:	69e1      	ldr	r1, [r4, #28]
   1a4c0:	68e0      	ldr	r0, [r4, #12]
   1a4c2:	9300      	str	r3, [sp, #0]
   1a4c4:	ab04      	add	r3, sp, #16
   1a4c6:	47b8      	blx	r7
	if (!ret) {
   1a4c8:	4607      	mov	r7, r0
   1a4ca:	2800      	cmp	r0, #0
   1a4cc:	d062      	beq.n	1a594 <preempt+0x11c>
	event.curr.abort_cb(NULL, event.curr.param);
   1a4ce:	68b3      	ldr	r3, [r6, #8]
   1a4d0:	6831      	ldr	r1, [r6, #0]
   1a4d2:	4628      	mov	r0, r5
   1a4d4:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1a4d6:	f117 0f0b 	cmn.w	r7, #11
   1a4da:	d01a      	beq.n	1a512 <preempt+0x9a>
		LL_ASSERT(ret == -ECANCELED);
   1a4dc:	378c      	adds	r7, #140	; 0x8c
   1a4de:	d011      	beq.n	1a504 <preempt+0x8c>
   1a4e0:	4a33      	ldr	r2, [pc, #204]	; (1a5b0 <preempt+0x138>)
   1a4e2:	4934      	ldr	r1, [pc, #208]	; (1a5b4 <preempt+0x13c>)
   1a4e4:	4834      	ldr	r0, [pc, #208]	; (1a5b8 <preempt+0x140>)
   1a4e6:	f240 23df 	movw	r3, #735	; 0x2df
   1a4ea:	f006 fa78 	bl	209de <printk>
   1a4ee:	4040      	eors	r0, r0
   1a4f0:	f380 8811 	msr	BASEPRI, r0
   1a4f4:	f04f 0003 	mov.w	r0, #3
   1a4f8:	df02      	svc	2
   1a4fa:	e003      	b.n	1a504 <preempt+0x8c>
	} while (next->is_aborted || next->is_resume);
   1a4fc:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a500:	079b      	lsls	r3, r3, #30
   1a502:	d041      	beq.n	1a588 <preempt+0x110>
		next = ull_prepare_dequeue_iter(&idx);
   1a504:	f10d 000e 	add.w	r0, sp, #14
   1a508:	f7f9 fc82 	bl	13e10 <ull_prepare_dequeue_iter>
		if (!next) {
   1a50c:	2800      	cmp	r0, #0
   1a50e:	d1f5      	bne.n	1a4fc <preempt+0x84>
   1a510:	e7d0      	b.n	1a4b4 <preempt+0x3c>
		uint8_t iter_idx = UINT8_MAX;
   1a512:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1a514:	f10d 000f 	add.w	r0, sp, #15
		uint8_t iter_idx = UINT8_MAX;
   1a518:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1a51c:	f7f9 fc78 	bl	13e10 <ull_prepare_dequeue_iter>
		while (iter) {
   1a520:	bb48      	cbnz	r0, 1a576 <preempt+0xfe>
	prepare_param.param = event.curr.param;
   1a522:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   1a524:	9905      	ldr	r1, [sp, #20]
	prepare_param.param = event.curr.param;
   1a526:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a528:	2301      	movs	r3, #1
	event.curr.param = NULL;
   1a52a:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a52c:	9301      	str	r3, [sp, #4]
   1a52e:	9100      	str	r1, [sp, #0]
	event.curr.param = NULL;
   1a530:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a532:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1a536:	9b04      	ldr	r3, [sp, #16]
   1a538:	aa06      	add	r2, sp, #24
   1a53a:	f7f9 fc15 	bl	13d68 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1a53e:	2800      	cmp	r0, #0
   1a540:	d0e0      	beq.n	1a504 <preempt+0x8c>
   1a542:	4a1b      	ldr	r2, [pc, #108]	; (1a5b0 <preempt+0x138>)
   1a544:	491d      	ldr	r1, [pc, #116]	; (1a5bc <preempt+0x144>)
   1a546:	481c      	ldr	r0, [pc, #112]	; (1a5b8 <preempt+0x140>)
   1a548:	f240 23dd 	movw	r3, #733	; 0x2dd
   1a54c:	f006 fa47 	bl	209de <printk>
   1a550:	4040      	eors	r0, r0
   1a552:	f380 8811 	msr	BASEPRI, r0
   1a556:	f04f 0003 	mov.w	r0, #3
   1a55a:	df02      	svc	2
   1a55c:	e7d2      	b.n	1a504 <preempt+0x8c>
				iter->is_aborted = 1;
   1a55e:	f043 0302 	orr.w	r3, r3, #2
				iter->abort_cb(&iter->prepare_param,
   1a562:	6982      	ldr	r2, [r0, #24]
				iter->is_aborted = 1;
   1a564:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1a568:	4790      	blx	r2
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1a56a:	f10d 000f 	add.w	r0, sp, #15
   1a56e:	f7f9 fc4f 	bl	13e10 <ull_prepare_dequeue_iter>
		while (iter) {
   1a572:	2800      	cmp	r0, #0
   1a574:	d0d5      	beq.n	1a522 <preempt+0xaa>
			if (!iter->is_aborted &&
   1a576:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a57a:	079a      	lsls	r2, r3, #30
   1a57c:	d4f5      	bmi.n	1a56a <preempt+0xf2>
			    event.curr.param == iter->prepare_param.param) {
   1a57e:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1a580:	6831      	ldr	r1, [r6, #0]
   1a582:	4291      	cmp	r1, r2
   1a584:	d1f1      	bne.n	1a56a <preempt+0xf2>
   1a586:	e7ea      	b.n	1a55e <preempt+0xe6>
	preempt_ticker_start(&next->prepare_param);
   1a588:	68c1      	ldr	r1, [r0, #12]
   1a58a:	6800      	ldr	r0, [r0, #0]
   1a58c:	f7ff ff3a 	bl	1a404 <preempt_ticker_start.isra.0>
}
   1a590:	b00b      	add	sp, #44	; 0x2c
   1a592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1a594:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1a598:	69a2      	ldr	r2, [r4, #24]
   1a59a:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1a59c:	f043 0302 	orr.w	r3, r3, #2
   1a5a0:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1a5a4:	4620      	mov	r0, r4
   1a5a6:	4790      	blx	r2
		goto preempt_next;
   1a5a8:	e7ac      	b.n	1a504 <preempt+0x8c>
   1a5aa:	bf00      	nop
   1a5ac:	200032a8 	.word	0x200032a8
   1a5b0:	00027e00 	.word	0x00027e00
   1a5b4:	00027e90 	.word	0x00027e90
   1a5b8:	000272c0 	.word	0x000272c0
   1a5bc:	00027594 	.word	0x00027594

0001a5c0 <prepare>:
{
   1a5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a5c4:	b085      	sub	sp, #20
   1a5c6:	4604      	mov	r4, r0
   1a5c8:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1a5ca:	f10d 000f 	add.w	r0, sp, #15
	uint8_t idx = UINT8_MAX;
   1a5ce:	23ff      	movs	r3, #255	; 0xff
{
   1a5d0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1a5d4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	uint8_t idx = UINT8_MAX;
   1a5d8:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1a5dc:	460d      	mov	r5, r1
   1a5de:	4616      	mov	r6, r2
	p = ull_prepare_dequeue_iter(&idx);
   1a5e0:	f7f9 fc16 	bl	13e10 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1a5e4:	b918      	cbnz	r0, 1a5ee <prepare+0x2e>
   1a5e6:	e01e      	b.n	1a626 <prepare+0x66>
		p = ull_prepare_dequeue_iter(&idx);
   1a5e8:	f7f9 fc12 	bl	13e10 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1a5ec:	b1d8      	cbz	r0, 1a626 <prepare+0x66>
   1a5ee:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a5f2:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1a5f4:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1a5f8:	d1f6      	bne.n	1a5e8 <prepare+0x28>
	if (event.curr.abort_cb || (p && is_resume)) {
   1a5fa:	4b2e      	ldr	r3, [pc, #184]	; (1a6b4 <prepare+0xf4>)
   1a5fc:	689a      	ldr	r2, [r3, #8]
   1a5fe:	b9aa      	cbnz	r2, 1a62c <prepare+0x6c>
   1a600:	f1b9 0f00 	cmp.w	r9, #0
   1a604:	d036      	beq.n	1a674 <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1a606:	2201      	movs	r2, #1
   1a608:	9201      	str	r2, [sp, #4]
   1a60a:	9700      	str	r7, [sp, #0]
   1a60c:	4633      	mov	r3, r6
   1a60e:	4629      	mov	r1, r5
   1a610:	4620      	mov	r0, r4
   1a612:	4642      	mov	r2, r8
   1a614:	f7f9 fba8 	bl	13d68 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1a618:	b9d8      	cbnz	r0, 1a652 <prepare+0x92>
		return -EINPROGRESS;
   1a61a:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1a61e:	4620      	mov	r0, r4
   1a620:	b005      	add	sp, #20
   1a622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   1a626:	4b23      	ldr	r3, [pc, #140]	; (1a6b4 <prepare+0xf4>)
   1a628:	689a      	ldr	r2, [r3, #8]
   1a62a:	b31a      	cbz	r2, 1a674 <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1a62c:	e9cd 7900 	strd	r7, r9, [sp]
   1a630:	4633      	mov	r3, r6
   1a632:	4629      	mov	r1, r5
   1a634:	4620      	mov	r0, r4
   1a636:	4642      	mov	r2, r8
   1a638:	f7f9 fb96 	bl	13d68 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1a63c:	b948      	cbnz	r0, 1a652 <prepare+0x92>
		if (is_resume) {
   1a63e:	f1b9 0f00 	cmp.w	r9, #0
   1a642:	d1ea      	bne.n	1a61a <prepare+0x5a>
		preempt_ticker_start(prepare_param);
   1a644:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1a648:	f8d8 0000 	ldr.w	r0, [r8]
   1a64c:	f7ff feda 	bl	1a404 <preempt_ticker_start.isra.0>
   1a650:	e7e3      	b.n	1a61a <prepare+0x5a>
		LL_ASSERT(!err);
   1a652:	4a19      	ldr	r2, [pc, #100]	; (1a6b8 <prepare+0xf8>)
   1a654:	4919      	ldr	r1, [pc, #100]	; (1a6bc <prepare+0xfc>)
   1a656:	481a      	ldr	r0, [pc, #104]	; (1a6c0 <prepare+0x100>)
   1a658:	f240 2311 	movw	r3, #529	; 0x211
   1a65c:	f006 f9bf 	bl	209de <printk>
   1a660:	4040      	eors	r0, r0
   1a662:	f380 8811 	msr	BASEPRI, r0
   1a666:	f04f 0003 	mov.w	r0, #3
   1a66a:	df02      	svc	2
		if (is_resume) {
   1a66c:	f1b9 0f00 	cmp.w	r9, #0
   1a670:	d1d3      	bne.n	1a61a <prepare+0x5a>
   1a672:	e7e7      	b.n	1a644 <prepare+0x84>
	event.curr.param = prepare_param->param;
   1a674:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1a678:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   1a67a:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   1a67e:	4640      	mov	r0, r8
   1a680:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a682:	2200      	movs	r2, #0
   1a684:	4b0f      	ldr	r3, [pc, #60]	; (1a6c4 <prepare+0x104>)
   1a686:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   1a688:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a68a:	4611      	mov	r1, r2
   1a68c:	4610      	mov	r0, r2
   1a68e:	f7f6 fad5 	bl	10c3c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a692:	2802      	cmp	r0, #2
   1a694:	d9c3      	bls.n	1a61e <prepare+0x5e>
   1a696:	4a08      	ldr	r2, [pc, #32]	; (1a6b8 <prepare+0xf8>)
   1a698:	490b      	ldr	r1, [pc, #44]	; (1a6c8 <prepare+0x108>)
   1a69a:	4809      	ldr	r0, [pc, #36]	; (1a6c0 <prepare+0x100>)
   1a69c:	f240 234b 	movw	r3, #587	; 0x24b
   1a6a0:	f006 f99d 	bl	209de <printk>
   1a6a4:	4040      	eors	r0, r0
   1a6a6:	f380 8811 	msr	BASEPRI, r0
   1a6aa:	f04f 0003 	mov.w	r0, #3
   1a6ae:	df02      	svc	2
   1a6b0:	e7b5      	b.n	1a61e <prepare+0x5e>
   1a6b2:	bf00      	nop
   1a6b4:	200032a8 	.word	0x200032a8
   1a6b8:	00027e00 	.word	0x00027e00
   1a6bc:	00027578 	.word	0x00027578
   1a6c0:	000272c0 	.word	0x000272c0
   1a6c4:	0001a365 	.word	0x0001a365
   1a6c8:	00027e68 	.word	0x00027e68

0001a6cc <lll_init>:
{
   1a6cc:	b510      	push	{r4, lr}
   1a6ce:	4815      	ldr	r0, [pc, #84]	; (1a724 <lll_init+0x58>)
   1a6d0:	f004 f8ba 	bl	1e848 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a6d4:	4b14      	ldr	r3, [pc, #80]	; (1a728 <lll_init+0x5c>)
   1a6d6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1a6d8:	b300      	cbz	r0, 1a71c <lll_init+0x50>
	event.curr.abort_cb = NULL;
   1a6da:	4b14      	ldr	r3, [pc, #80]	; (1a72c <lll_init+0x60>)
   1a6dc:	2400      	movs	r4, #0
   1a6de:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1a6e0:	f000 fa42 	bl	1ab68 <lll_clock_init>
	if (err < 0) {
   1a6e4:	2800      	cmp	r0, #0
   1a6e6:	db18      	blt.n	1a71a <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1a6e8:	2001      	movs	r0, #1
   1a6ea:	4622      	mov	r2, r4
   1a6ec:	4621      	mov	r1, r4
   1a6ee:	f7ec f82f 	bl	6750 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1a6f2:	4622      	mov	r2, r4
   1a6f4:	4621      	mov	r1, r4
   1a6f6:	200b      	movs	r0, #11
   1a6f8:	f7ec f82a 	bl	6750 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1a6fc:	4622      	mov	r2, r4
   1a6fe:	4621      	mov	r1, r4
   1a700:	2018      	movs	r0, #24
   1a702:	f7ec f825 	bl	6750 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1a706:	2001      	movs	r0, #1
   1a708:	f7eb fff0 	bl	66ec <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1a70c:	200b      	movs	r0, #11
   1a70e:	f7eb ffed 	bl	66ec <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1a712:	2018      	movs	r0, #24
   1a714:	f7eb ffea 	bl	66ec <arch_irq_enable>
	return 0;
   1a718:	4620      	mov	r0, r4
}
   1a71a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1a71c:	f06f 0012 	mvn.w	r0, #18
}
   1a720:	bd10      	pop	{r4, pc}
   1a722:	bf00      	nop
   1a724:	00027e9c 	.word	0x00027e9c
   1a728:	200032a4 	.word	0x200032a4
   1a72c:	200032a8 	.word	0x200032a8

0001a730 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1a730:	4a05      	ldr	r2, [pc, #20]	; (1a748 <lll_csrand_get+0x18>)
{
   1a732:	b410      	push	{r4}
   1a734:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1a736:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1a738:	6884      	ldr	r4, [r0, #8]
   1a73a:	6824      	ldr	r4, [r4, #0]
   1a73c:	b28a      	uxth	r2, r1
   1a73e:	4619      	mov	r1, r3
   1a740:	4623      	mov	r3, r4
}
   1a742:	bc10      	pop	{r4}
   1a744:	4718      	bx	r3
   1a746:	bf00      	nop
   1a748:	200032a4 	.word	0x200032a4

0001a74c <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1a74c:	4b08      	ldr	r3, [pc, #32]	; (1a770 <lll_csrand_isr_get+0x24>)
{
   1a74e:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1a750:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a752:	68ab      	ldr	r3, [r5, #8]
   1a754:	685c      	ldr	r4, [r3, #4]
   1a756:	b13c      	cbz	r4, 1a768 <lll_csrand_isr_get+0x1c>
   1a758:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a75a:	46a4      	mov	ip, r4
   1a75c:	4601      	mov	r1, r0
   1a75e:	b292      	uxth	r2, r2
   1a760:	4628      	mov	r0, r5
   1a762:	2300      	movs	r3, #0
}
   1a764:	bc30      	pop	{r4, r5}
   1a766:	4760      	bx	ip
   1a768:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a76c:	bc30      	pop	{r4, r5}
   1a76e:	4770      	bx	lr
   1a770:	200032a4 	.word	0x200032a4

0001a774 <lll_rand_isr_get>:
   1a774:	4b08      	ldr	r3, [pc, #32]	; (1a798 <lll_rand_isr_get+0x24>)
   1a776:	b430      	push	{r4, r5}
   1a778:	681d      	ldr	r5, [r3, #0]
   1a77a:	68ab      	ldr	r3, [r5, #8]
   1a77c:	685c      	ldr	r4, [r3, #4]
   1a77e:	b13c      	cbz	r4, 1a790 <lll_rand_isr_get+0x1c>
   1a780:	460a      	mov	r2, r1
   1a782:	46a4      	mov	ip, r4
   1a784:	4601      	mov	r1, r0
   1a786:	b292      	uxth	r2, r2
   1a788:	4628      	mov	r0, r5
   1a78a:	2300      	movs	r3, #0
   1a78c:	bc30      	pop	{r4, r5}
   1a78e:	4760      	bx	ip
   1a790:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a794:	bc30      	pop	{r4, r5}
   1a796:	4770      	bx	lr
   1a798:	200032a4 	.word	0x200032a4

0001a79c <lll_reset>:
}
   1a79c:	2000      	movs	r0, #0
   1a79e:	4770      	bx	lr

0001a7a0 <lll_prepare>:
{
   1a7a0:	b510      	push	{r4, lr}
   1a7a2:	b082      	sub	sp, #8
   1a7a4:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1a7a6:	9400      	str	r4, [sp, #0]
   1a7a8:	2400      	movs	r4, #0
   1a7aa:	9401      	str	r4, [sp, #4]
   1a7ac:	f7ff ff08 	bl	1a5c0 <prepare>
}
   1a7b0:	b002      	add	sp, #8
   1a7b2:	bd10      	pop	{r4, pc}

0001a7b4 <lll_resume>:
{
   1a7b4:	b510      	push	{r4, lr}
   1a7b6:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1a7b8:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   1a7ba:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1a7be:	69c3      	ldr	r3, [r0, #28]
   1a7c0:	6902      	ldr	r2, [r0, #16]
   1a7c2:	f004 0401 	and.w	r4, r4, #1
   1a7c6:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1a7ca:	9401      	str	r4, [sp, #4]
   1a7cc:	f7ff fef8 	bl	1a5c0 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1a7d0:	b108      	cbz	r0, 1a7d6 <lll_resume+0x22>
   1a7d2:	3077      	adds	r0, #119	; 0x77
   1a7d4:	d101      	bne.n	1a7da <lll_resume+0x26>
}
   1a7d6:	b002      	add	sp, #8
   1a7d8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1a7da:	4a07      	ldr	r2, [pc, #28]	; (1a7f8 <lll_resume+0x44>)
   1a7dc:	4907      	ldr	r1, [pc, #28]	; (1a7fc <lll_resume+0x48>)
   1a7de:	4808      	ldr	r0, [pc, #32]	; (1a800 <lll_resume+0x4c>)
   1a7e0:	23e4      	movs	r3, #228	; 0xe4
   1a7e2:	f006 f8fc 	bl	209de <printk>
   1a7e6:	4040      	eors	r0, r0
   1a7e8:	f380 8811 	msr	BASEPRI, r0
   1a7ec:	f04f 0003 	mov.w	r0, #3
   1a7f0:	df02      	svc	2
}
   1a7f2:	b002      	add	sp, #8
   1a7f4:	bd10      	pop	{r4, pc}
   1a7f6:	bf00      	nop
   1a7f8:	00027e00 	.word	0x00027e00
   1a7fc:	00027ea0 	.word	0x00027ea0
   1a800:	000272c0 	.word	0x000272c0

0001a804 <lll_disable>:
{
   1a804:	b510      	push	{r4, lr}
	if (!param || (param == event.curr.param)) {
   1a806:	4604      	mov	r4, r0
{
   1a808:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
   1a80a:	2800      	cmp	r0, #0
   1a80c:	d033      	beq.n	1a876 <lll_disable+0x72>
   1a80e:	4b25      	ldr	r3, [pc, #148]	; (1a8a4 <lll_disable+0xa0>)
   1a810:	681a      	ldr	r2, [r3, #0]
   1a812:	4282      	cmp	r2, r0
   1a814:	d029      	beq.n	1a86a <lll_disable+0x66>
		uint8_t idx = UINT8_MAX;
   1a816:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1a818:	f10d 0007 	add.w	r0, sp, #7
		uint8_t idx = UINT8_MAX;
   1a81c:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1a820:	f7f9 faf6 	bl	13e10 <ull_prepare_dequeue_iter>
		while (next) {
   1a824:	b940      	cbnz	r0, 1a838 <lll_disable+0x34>
   1a826:	e01c      	b.n	1a862 <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
   1a828:	68c3      	ldr	r3, [r0, #12]
   1a82a:	42a3      	cmp	r3, r4
   1a82c:	d01b      	beq.n	1a866 <lll_disable+0x62>
			next = ull_prepare_dequeue_iter(&idx);
   1a82e:	f10d 0007 	add.w	r0, sp, #7
   1a832:	f7f9 faed 	bl	13e10 <ull_prepare_dequeue_iter>
		while (next) {
   1a836:	b1a0      	cbz	r0, 1a862 <lll_disable+0x5e>
			if (!next->is_aborted &&
   1a838:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a83c:	079b      	lsls	r3, r3, #30
   1a83e:	d4f6      	bmi.n	1a82e <lll_disable+0x2a>
   1a840:	2c00      	cmp	r4, #0
   1a842:	d1f1      	bne.n	1a828 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   1a844:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   1a846:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1a84a:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1a84c:	f043 0302 	orr.w	r3, r3, #2
   1a850:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1a854:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1a856:	f10d 0007 	add.w	r0, sp, #7
   1a85a:	f7f9 fad9 	bl	13e10 <ull_prepare_dequeue_iter>
		while (next) {
   1a85e:	2800      	cmp	r0, #0
   1a860:	d1ea      	bne.n	1a838 <lll_disable+0x34>
}
   1a862:	b002      	add	sp, #8
   1a864:	bd10      	pop	{r4, pc}
   1a866:	4621      	mov	r1, r4
   1a868:	e7ed      	b.n	1a846 <lll_disable+0x42>
		if (event.curr.abort_cb && event.curr.param) {
   1a86a:	689b      	ldr	r3, [r3, #8]
   1a86c:	b16b      	cbz	r3, 1a88a <lll_disable+0x86>
   1a86e:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1a870:	2000      	movs	r0, #0
   1a872:	4798      	blx	r3
   1a874:	e7cf      	b.n	1a816 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1a876:	4a0b      	ldr	r2, [pc, #44]	; (1a8a4 <lll_disable+0xa0>)
   1a878:	6893      	ldr	r3, [r2, #8]
   1a87a:	2b00      	cmp	r3, #0
   1a87c:	d0cb      	beq.n	1a816 <lll_disable+0x12>
   1a87e:	6811      	ldr	r1, [r2, #0]
   1a880:	2900      	cmp	r1, #0
   1a882:	d0c8      	beq.n	1a816 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1a884:	2000      	movs	r0, #0
   1a886:	4798      	blx	r3
   1a888:	e7c5      	b.n	1a816 <lll_disable+0x12>
			LL_ASSERT(!param);
   1a88a:	4a07      	ldr	r2, [pc, #28]	; (1a8a8 <lll_disable+0xa4>)
   1a88c:	4907      	ldr	r1, [pc, #28]	; (1a8ac <lll_disable+0xa8>)
   1a88e:	4808      	ldr	r0, [pc, #32]	; (1a8b0 <lll_disable+0xac>)
   1a890:	23ee      	movs	r3, #238	; 0xee
   1a892:	f006 f8a4 	bl	209de <printk>
   1a896:	4040      	eors	r0, r0
   1a898:	f380 8811 	msr	BASEPRI, r0
   1a89c:	f04f 0003 	mov.w	r0, #3
   1a8a0:	df02      	svc	2
   1a8a2:	e7b8      	b.n	1a816 <lll_disable+0x12>
   1a8a4:	200032a8 	.word	0x200032a8
   1a8a8:	00027e00 	.word	0x00027e00
   1a8ac:	00027eb4 	.word	0x00027eb4
   1a8b0:	000272c0 	.word	0x000272c0

0001a8b4 <lll_prepare_done>:
}
   1a8b4:	2000      	movs	r0, #0
   1a8b6:	4770      	bx	lr

0001a8b8 <lll_done>:
{
   1a8b8:	b510      	push	{r4, lr}
   1a8ba:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
   1a8bc:	f7f9 fa9a 	bl	13df4 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1a8c0:	b13c      	cbz	r4, 1a8d2 <lll_done+0x1a>
   1a8c2:	b320      	cbz	r0, 1a90e <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1a8c4:	6820      	ldr	r0, [r4, #0]
   1a8c6:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1a8c8:	f7f9 fad2 	bl	13e70 <ull_event_done>
	LL_ASSERT(evdone);
   1a8cc:	b180      	cbz	r0, 1a8f0 <lll_done+0x38>
}
   1a8ce:	2000      	movs	r0, #0
   1a8d0:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1a8d2:	4c1d      	ldr	r4, [pc, #116]	; (1a948 <lll_done+0x90>)
   1a8d4:	68a3      	ldr	r3, [r4, #8]
   1a8d6:	b343      	cbz	r3, 1a92a <lll_done+0x72>
		param = event.curr.param;
   1a8d8:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1a8da:	2300      	movs	r3, #0
   1a8dc:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1a8de:	6023      	str	r3, [r4, #0]
		if (param) {
   1a8e0:	2800      	cmp	r0, #0
   1a8e2:	d0f1      	beq.n	1a8c8 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1a8e4:	6800      	ldr	r0, [r0, #0]
   1a8e6:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1a8e8:	f7f9 fac2 	bl	13e70 <ull_event_done>
	LL_ASSERT(evdone);
   1a8ec:	2800      	cmp	r0, #0
   1a8ee:	d1ee      	bne.n	1a8ce <lll_done+0x16>
   1a8f0:	4a16      	ldr	r2, [pc, #88]	; (1a94c <lll_done+0x94>)
   1a8f2:	4917      	ldr	r1, [pc, #92]	; (1a950 <lll_done+0x98>)
   1a8f4:	4817      	ldr	r0, [pc, #92]	; (1a954 <lll_done+0x9c>)
   1a8f6:	f44f 739e 	mov.w	r3, #316	; 0x13c
   1a8fa:	f006 f870 	bl	209de <printk>
   1a8fe:	4040      	eors	r0, r0
   1a900:	f380 8811 	msr	BASEPRI, r0
   1a904:	f04f 0003 	mov.w	r0, #3
   1a908:	df02      	svc	2
}
   1a90a:	2000      	movs	r0, #0
   1a90c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1a90e:	4a0f      	ldr	r2, [pc, #60]	; (1a94c <lll_done+0x94>)
   1a910:	4911      	ldr	r1, [pc, #68]	; (1a958 <lll_done+0xa0>)
   1a912:	4810      	ldr	r0, [pc, #64]	; (1a954 <lll_done+0x9c>)
   1a914:	f240 131f 	movw	r3, #287	; 0x11f
   1a918:	f006 f861 	bl	209de <printk>
   1a91c:	4040      	eors	r0, r0
   1a91e:	f380 8811 	msr	BASEPRI, r0
   1a922:	f04f 0003 	mov.w	r0, #3
   1a926:	df02      	svc	2
   1a928:	e7cc      	b.n	1a8c4 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1a92a:	4a08      	ldr	r2, [pc, #32]	; (1a94c <lll_done+0x94>)
   1a92c:	490b      	ldr	r1, [pc, #44]	; (1a95c <lll_done+0xa4>)
   1a92e:	4809      	ldr	r0, [pc, #36]	; (1a954 <lll_done+0x9c>)
   1a930:	f44f 7392 	mov.w	r3, #292	; 0x124
   1a934:	f006 f853 	bl	209de <printk>
   1a938:	4040      	eors	r0, r0
   1a93a:	f380 8811 	msr	BASEPRI, r0
   1a93e:	f04f 0003 	mov.w	r0, #3
   1a942:	df02      	svc	2
   1a944:	e7c8      	b.n	1a8d8 <lll_done+0x20>
   1a946:	bf00      	nop
   1a948:	200032a8 	.word	0x200032a8
   1a94c:	00027e00 	.word	0x00027e00
   1a950:	00027ee0 	.word	0x00027ee0
   1a954:	000272c0 	.word	0x000272c0
   1a958:	00027ebc 	.word	0x00027ebc
   1a95c:	00027ecc 	.word	0x00027ecc

0001a960 <lll_is_done>:
	return !event.curr.abort_cb;
   1a960:	4b02      	ldr	r3, [pc, #8]	; (1a96c <lll_is_done+0xc>)
   1a962:	6898      	ldr	r0, [r3, #8]
}
   1a964:	fab0 f080 	clz	r0, r0
   1a968:	0940      	lsrs	r0, r0, #5
   1a96a:	4770      	bx	lr
   1a96c:	200032a8 	.word	0x200032a8

0001a970 <lll_is_abort_cb>:
}
   1a970:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1a974:	4770      	bx	lr
   1a976:	bf00      	nop

0001a978 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1a978:	6803      	ldr	r3, [r0, #0]
   1a97a:	2b00      	cmp	r3, #0
		return MAX(evt->ticks_active_to_start,
   1a97c:	bfb4      	ite	lt
   1a97e:	e9d0 0301 	ldrdlt	r0, r3, [r0, #4]
		return MAX(evt->ticks_active_to_start,
   1a982:	6840      	ldrge	r0, [r0, #4]
   1a984:	4298      	cmp	r0, r3
   1a986:	bf38      	it	cc
   1a988:	4618      	movcc	r0, r3
}
   1a98a:	4770      	bx	lr

0001a98c <lll_preempt_calc>:
{
   1a98c:	b510      	push	{r4, lr}
   1a98e:	4614      	mov	r4, r2
	uint32_t ticks_now = ticker_ticks_now_get();
   1a990:	f7f6 f9f4 	bl	10d7c <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1a994:	4621      	mov	r1, r4
   1a996:	f7f6 f9f3 	bl	10d80 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1a99a:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1a99c:	0203      	lsls	r3, r0, #8
   1a99e:	d404      	bmi.n	1a9aa <lll_preempt_calc+0x1e>
   1a9a0:	2809      	cmp	r0, #9
   1a9a2:	bf94      	ite	ls
   1a9a4:	2000      	movls	r0, #0
   1a9a6:	2001      	movhi	r0, #1
}
   1a9a8:	bd10      	pop	{r4, pc}
	return 0;
   1a9aa:	2000      	movs	r0, #0
}
   1a9ac:	bd10      	pop	{r4, pc}
   1a9ae:	bf00      	nop

0001a9b0 <lll_chan_set>:
	switch (chan) {
   1a9b0:	2826      	cmp	r0, #38	; 0x26
{
   1a9b2:	b510      	push	{r4, lr}
   1a9b4:	4604      	mov	r4, r0
	switch (chan) {
   1a9b6:	d01c      	beq.n	1a9f2 <lll_chan_set+0x42>
   1a9b8:	2827      	cmp	r0, #39	; 0x27
   1a9ba:	d012      	beq.n	1a9e2 <lll_chan_set+0x32>
   1a9bc:	2825      	cmp	r0, #37	; 0x25
   1a9be:	d008      	beq.n	1a9d2 <lll_chan_set+0x22>
		if (chan < 11) {
   1a9c0:	280a      	cmp	r0, #10
   1a9c2:	d91e      	bls.n	1aa02 <lll_chan_set+0x52>
		} else if (chan < 40) {
   1a9c4:	2827      	cmp	r0, #39	; 0x27
   1a9c6:	d821      	bhi.n	1aa0c <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1a9c8:	3003      	adds	r0, #3
   1a9ca:	0040      	lsls	r0, r0, #1
   1a9cc:	f002 f9a4 	bl	1cd18 <radio_freq_chan_set>
   1a9d0:	e002      	b.n	1a9d8 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1a9d2:	2002      	movs	r0, #2
   1a9d4:	f002 f9a0 	bl	1cd18 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a9d8:	4620      	mov	r0, r4
}
   1a9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a9de:	f002 b9a1 	b.w	1cd24 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1a9e2:	2050      	movs	r0, #80	; 0x50
   1a9e4:	f002 f998 	bl	1cd18 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a9e8:	4620      	mov	r0, r4
}
   1a9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a9ee:	f002 b999 	b.w	1cd24 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1a9f2:	201a      	movs	r0, #26
   1a9f4:	f002 f990 	bl	1cd18 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a9f8:	4620      	mov	r0, r4
}
   1a9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a9fe:	f002 b991 	b.w	1cd24 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1aa02:	3002      	adds	r0, #2
   1aa04:	0040      	lsls	r0, r0, #1
   1aa06:	f002 f987 	bl	1cd18 <radio_freq_chan_set>
   1aa0a:	e7e5      	b.n	1a9d8 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1aa0c:	4a06      	ldr	r2, [pc, #24]	; (1aa28 <lll_chan_set+0x78>)
   1aa0e:	4907      	ldr	r1, [pc, #28]	; (1aa2c <lll_chan_set+0x7c>)
   1aa10:	4807      	ldr	r0, [pc, #28]	; (1aa30 <lll_chan_set+0x80>)
   1aa12:	f44f 73c3 	mov.w	r3, #390	; 0x186
   1aa16:	f005 ffe2 	bl	209de <printk>
   1aa1a:	4040      	eors	r0, r0
   1aa1c:	f380 8811 	msr	BASEPRI, r0
   1aa20:	f04f 0003 	mov.w	r0, #3
   1aa24:	df02      	svc	2
   1aa26:	e7d7      	b.n	1a9d8 <lll_chan_set+0x28>
   1aa28:	00027e00 	.word	0x00027e00
   1aa2c:	00027358 	.word	0x00027358
   1aa30:	000272c0 	.word	0x000272c0

0001aa34 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1aa34:	f002 b9e0 	b.w	1cdf8 <radio_tx_ready_delay_get>

0001aa38 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1aa38:	f002 b9ea 	b.w	1ce10 <radio_rx_ready_delay_get>

0001aa3c <lll_isr_tx_status_reset>:
{
   1aa3c:	b508      	push	{r3, lr}
	radio_status_reset();
   1aa3e:	f002 fa17 	bl	1ce70 <radio_status_reset>
}
   1aa42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1aa46:	f002 bae3 	b.w	1d010 <radio_tmr_status_reset>
   1aa4a:	bf00      	nop

0001aa4c <lll_isr_rx_status_reset>:
{
   1aa4c:	b508      	push	{r3, lr}
	radio_status_reset();
   1aa4e:	f002 fa0f 	bl	1ce70 <radio_status_reset>
	radio_tmr_status_reset();
   1aa52:	f002 fadd 	bl	1d010 <radio_tmr_status_reset>
}
   1aa56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1aa5a:	f002 ba85 	b.w	1cf68 <radio_rssi_status_reset>
   1aa5e:	bf00      	nop

0001aa60 <lll_isr_status_reset>:
{
   1aa60:	b508      	push	{r3, lr}
	radio_status_reset();
   1aa62:	f002 fa05 	bl	1ce70 <radio_status_reset>
	radio_tmr_status_reset();
   1aa66:	f002 fad3 	bl	1d010 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1aa6a:	f002 fab9 	bl	1cfe0 <radio_filter_status_reset>
	radio_ar_status_reset();
   1aa6e:	f002 fccb 	bl	1d408 <radio_ar_status_reset>
}
   1aa72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1aa76:	f002 ba77 	b.w	1cf68 <radio_rssi_status_reset>
   1aa7a:	bf00      	nop

0001aa7c <lll_isr_cleanup>:
{
   1aa7c:	b508      	push	{r3, lr}
   1aa7e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1aa80:	4815      	ldr	r0, [pc, #84]	; (1aad8 <lll_isr_cleanup+0x5c>)
   1aa82:	f002 f8c9 	bl	1cc18 <radio_isr_set>
	if (!radio_is_idle()) {
   1aa86:	f002 fa13 	bl	1ceb0 <radio_is_idle>
   1aa8a:	b150      	cbz	r0, 1aaa2 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1aa8c:	f002 fb7e 	bl	1d18c <radio_tmr_stop>
	err = lll_hfclock_off();
   1aa90:	f000 f89c 	bl	1abcc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1aa94:	2800      	cmp	r0, #0
   1aa96:	db0c      	blt.n	1aab2 <lll_isr_cleanup+0x36>
}
   1aa98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1aa9c:	2000      	movs	r0, #0
   1aa9e:	f7ff bf0b 	b.w	1a8b8 <lll_done>
		radio_disable();
   1aaa2:	f002 f9d1 	bl	1ce48 <radio_disable>
	radio_tmr_stop();
   1aaa6:	f002 fb71 	bl	1d18c <radio_tmr_stop>
	err = lll_hfclock_off();
   1aaaa:	f000 f88f 	bl	1abcc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1aaae:	2800      	cmp	r0, #0
   1aab0:	daf2      	bge.n	1aa98 <lll_isr_cleanup+0x1c>
   1aab2:	4a0a      	ldr	r2, [pc, #40]	; (1aadc <lll_isr_cleanup+0x60>)
   1aab4:	490a      	ldr	r1, [pc, #40]	; (1aae0 <lll_isr_cleanup+0x64>)
   1aab6:	480b      	ldr	r0, [pc, #44]	; (1aae4 <lll_isr_cleanup+0x68>)
   1aab8:	f240 13e9 	movw	r3, #489	; 0x1e9
   1aabc:	f005 ff8f 	bl	209de <printk>
   1aac0:	4040      	eors	r0, r0
   1aac2:	f380 8811 	msr	BASEPRI, r0
   1aac6:	f04f 0003 	mov.w	r0, #3
   1aaca:	df02      	svc	2
	lll_done(NULL);
   1aacc:	2000      	movs	r0, #0
}
   1aace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1aad2:	f7ff bef1 	b.w	1a8b8 <lll_done>
   1aad6:	bf00      	nop
   1aad8:	0001a361 	.word	0x0001a361
   1aadc:	00027e00 	.word	0x00027e00
   1aae0:	00027ee8 	.word	0x00027ee8
   1aae4:	000272c0 	.word	0x000272c0

0001aae8 <lll_isr_abort>:
{
   1aae8:	b510      	push	{r4, lr}
   1aaea:	4604      	mov	r4, r0
	radio_status_reset();
   1aaec:	f002 f9c0 	bl	1ce70 <radio_status_reset>
	radio_tmr_status_reset();
   1aaf0:	f002 fa8e 	bl	1d010 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1aaf4:	f002 fa74 	bl	1cfe0 <radio_filter_status_reset>
	radio_ar_status_reset();
   1aaf8:	f002 fc86 	bl	1d408 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1aafc:	f002 fa34 	bl	1cf68 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1ab00:	4620      	mov	r0, r4
}
   1ab02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1ab06:	f7ff bfb9 	b.w	1aa7c <lll_isr_cleanup>
   1ab0a:	bf00      	nop

0001ab0c <clock_ready>:
	z_impl_k_sem_give(sem);
   1ab0c:	f101 0010 	add.w	r0, r1, #16
   1ab10:	f004 bce6 	b.w	1f4e0 <z_impl_k_sem_give>

0001ab14 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1ab14:	b570      	push	{r4, r5, r6, lr}
   1ab16:	4605      	mov	r5, r0
   1ab18:	b08a      	sub	sp, #40	; 0x28
   1ab1a:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ab1c:	2201      	movs	r2, #1
   1ab1e:	2100      	movs	r1, #0
   1ab20:	a804      	add	r0, sp, #16
   1ab22:	f00b f931 	bl	25d88 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1ab26:	4b0f      	ldr	r3, [pc, #60]	; (1ab64 <blocking_on+0x50>)
   1ab28:	9301      	str	r3, [sp, #4]
   1ab2a:	2600      	movs	r6, #0
   1ab2c:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1ab2e:	4669      	mov	r1, sp
   1ab30:	4628      	mov	r0, r5
   1ab32:	9603      	str	r6, [sp, #12]
   1ab34:	9302      	str	r3, [sp, #8]
   1ab36:	f005 ffce 	bl	20ad6 <onoff_request>
	if (err < 0) {
   1ab3a:	2800      	cmp	r0, #0
   1ab3c:	db10      	blt.n	1ab60 <blocking_on+0x4c>
   1ab3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ab42:	4631      	mov	r1, r6
   1ab44:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ab48:	fbe4 0103 	umlal	r0, r1, r4, r3
   1ab4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ab50:	2300      	movs	r3, #0
   1ab52:	f7e5 fdf9 	bl	748 <__aeabi_uldivmod>
   1ab56:	4602      	mov	r2, r0
   1ab58:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1ab5a:	a804      	add	r0, sp, #16
   1ab5c:	f004 fce6 	bl	1f52c <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1ab60:	b00a      	add	sp, #40	; 0x28
   1ab62:	bd70      	pop	{r4, r5, r6, pc}
   1ab64:	0001ab0d 	.word	0x0001ab0d

0001ab68 <lll_clock_init>:

int lll_clock_init(void)
{
   1ab68:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1ab6a:	2001      	movs	r0, #1
   1ab6c:	f7eb fa7e 	bl	606c <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1ab70:	4904      	ldr	r1, [pc, #16]	; (1ab84 <lll_clock_init+0x1c>)
   1ab72:	2300      	movs	r3, #0
   1ab74:	2401      	movs	r4, #1
   1ab76:	608c      	str	r4, [r1, #8]
   1ab78:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1ab7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ab7e:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1ab80:	f005 bfa9 	b.w	20ad6 <onoff_request>
   1ab84:	200032c0 	.word	0x200032c0

0001ab88 <lll_clock_wait>:

int lll_clock_wait(void)
{
   1ab88:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1ab8a:	2001      	movs	r0, #1
   1ab8c:	f7eb fa6e 	bl	606c <z_nrf_clock_control_get_onoff>

	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
}
   1ab90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1ab94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1ab98:	f7ff bfbc 	b.w	1ab14 <blocking_on>

0001ab9c <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1ab9c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ab9e:	4b0a      	ldr	r3, [pc, #40]	; (1abc8 <lll_hfclock_on+0x2c>)
   1aba0:	f3bf 8f5b 	dmb	ish
   1aba4:	e853 2f00 	ldrex	r2, [r3]
   1aba8:	1c51      	adds	r1, r2, #1
   1abaa:	e843 1000 	strex	r0, r1, [r3]
   1abae:	2800      	cmp	r0, #0
   1abb0:	d1f8      	bne.n	1aba4 <lll_hfclock_on+0x8>
   1abb2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1abb6:	2a00      	cmp	r2, #0
   1abb8:	dd01      	ble.n	1abbe <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1abba:	2000      	movs	r0, #0
   1abbc:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1abbe:	f7eb fa5d 	bl	607c <z_nrf_clock_bt_ctlr_hf_request>
}
   1abc2:	2000      	movs	r0, #0
   1abc4:	bd08      	pop	{r3, pc}
   1abc6:	bf00      	nop
   1abc8:	200032bc 	.word	0x200032bc

0001abcc <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1abcc:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1abce:	4b0d      	ldr	r3, [pc, #52]	; (1ac04 <lll_hfclock_off+0x38>)
   1abd0:	681a      	ldr	r2, [r3, #0]
   1abd2:	2a00      	cmp	r2, #0
   1abd4:	dd12      	ble.n	1abfc <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1abd6:	f3bf 8f5b 	dmb	ish
   1abda:	e853 2f00 	ldrex	r2, [r3]
   1abde:	1e51      	subs	r1, r2, #1
   1abe0:	e843 1000 	strex	r0, r1, [r3]
   1abe4:	2800      	cmp	r0, #0
   1abe6:	d1f8      	bne.n	1abda <lll_hfclock_off+0xe>
   1abe8:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1abec:	2a01      	cmp	r2, #1
   1abee:	dd01      	ble.n	1abf4 <lll_hfclock_off+0x28>
		return 0;
   1abf0:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1abf2:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1abf4:	f7eb fa58 	bl	60a8 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1abf8:	2000      	movs	r0, #0
}
   1abfa:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1abfc:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1ac00:	bd08      	pop	{r3, pc}
   1ac02:	bf00      	nop
   1ac04:	200032bc 	.word	0x200032bc

0001ac08 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1ac08:	b510      	push	{r4, lr}
   1ac0a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1ac0c:	f7ff ff28 	bl	1aa60 <lll_isr_status_reset>

	radio_filter_disable();
   1ac10:	f002 f9dc 	bl	1cfcc <radio_filter_disable>

	lll_isr_cleanup(param);
   1ac14:	4620      	mov	r0, r4
}
   1ac16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1ac1a:	f7ff bf2f 	b.w	1aa7c <lll_isr_cleanup>
   1ac1e:	bf00      	nop

0001ac20 <isr_tx>:
{
   1ac20:	b530      	push	{r4, r5, lr}
   1ac22:	b083      	sub	sp, #12
   1ac24:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1ac26:	f7ff ff09 	bl	1aa3c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1ac2a:	2096      	movs	r0, #150	; 0x96
   1ac2c:	f002 fa00 	bl	1d030 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1ac30:	2300      	movs	r3, #0
   1ac32:	461a      	mov	r2, r3
   1ac34:	4619      	mov	r1, r3
   1ac36:	4618      	mov	r0, r3
   1ac38:	f002 f96e 	bl	1cf18 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1ac3c:	f002 f95c 	bl	1cef8 <radio_pkt_scratch_get>
   1ac40:	f002 f8ce 	bl	1cde0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1ac44:	f002 f920 	bl	1ce88 <radio_is_ready>
   1ac48:	b9f0      	cbnz	r0, 1ac88 <isr_tx+0x68>
	radio_isr_set(isr_rx, param);
   1ac4a:	481f      	ldr	r0, [pc, #124]	; (1acc8 <isr_tx+0xa8>)
   1ac4c:	4621      	mov	r1, r4
   1ac4e:	f001 ffe3 	bl	1cc18 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1ac52:	f7fe ff87 	bl	19b64 <ull_filter_lll_rl_enabled>
   1ac56:	bb60      	cbnz	r0, 1acb2 <isr_tx+0x92>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1ac58:	f002 faec 	bl	1d234 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1ac5c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1ac5e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1ac60:	4608      	mov	r0, r1
   1ac62:	f002 f8d7 	bl	1ce14 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1ac66:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1ac68:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1ac6a:	4608      	mov	r0, r1
   1ac6c:	f002 f8ce 	bl	1ce0c <radio_tx_chain_delay_get>
   1ac70:	442c      	add	r4, r5
   1ac72:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1ac74:	1a20      	subs	r0, r4, r0
   1ac76:	f002 fa95 	bl	1d1a4 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   1ac7a:	f002 facd 	bl	1d218 <radio_tmr_end_capture>
}
   1ac7e:	b003      	add	sp, #12
   1ac80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_rssi_measure();
   1ac84:	f002 b960 	b.w	1cf48 <radio_rssi_measure>
	LL_ASSERT(!radio_is_ready());
   1ac88:	4a10      	ldr	r2, [pc, #64]	; (1accc <isr_tx+0xac>)
   1ac8a:	4911      	ldr	r1, [pc, #68]	; (1acd0 <isr_tx+0xb0>)
   1ac8c:	4811      	ldr	r0, [pc, #68]	; (1acd4 <isr_tx+0xb4>)
   1ac8e:	f240 1381 	movw	r3, #385	; 0x181
   1ac92:	f005 fea4 	bl	209de <printk>
   1ac96:	4040      	eors	r0, r0
   1ac98:	f380 8811 	msr	BASEPRI, r0
   1ac9c:	f04f 0003 	mov.w	r0, #3
   1aca0:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1aca2:	4809      	ldr	r0, [pc, #36]	; (1acc8 <isr_tx+0xa8>)
   1aca4:	4621      	mov	r1, r4
   1aca6:	f001 ffb7 	bl	1cc18 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1acaa:	f7fe ff5b 	bl	19b64 <ull_filter_lll_rl_enabled>
   1acae:	2800      	cmp	r0, #0
   1acb0:	d0d2      	beq.n	1ac58 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1acb2:	f10d 0007 	add.w	r0, sp, #7
   1acb6:	f7fe fdbf 	bl	19838 <ull_filter_lll_irks_get>
   1acba:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1acbc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1acc0:	f002 fb68 	bl	1d394 <radio_ar_configure>
   1acc4:	e7c8      	b.n	1ac58 <isr_tx+0x38>
   1acc6:	bf00      	nop
   1acc8:	0001b15d 	.word	0x0001b15d
   1accc:	00027f14 	.word	0x00027f14
   1acd0:	00027f60 	.word	0x00027f60
   1acd4:	000272c0 	.word	0x000272c0

0001acd8 <is_abort_cb>:
	if (next != curr) {
   1acd8:	4282      	cmp	r2, r0
{
   1acda:	b508      	push	{r3, lr}
	if (next != curr) {
   1acdc:	d011      	beq.n	1ad02 <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1acde:	7b12      	ldrb	r2, [r2, #12]
   1ace0:	07d2      	lsls	r2, r2, #31
   1ace2:	d402      	bmi.n	1acea <is_abort_cb+0x12>
			return -ECANCELED;
   1ace4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1ace8:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1acea:	4914      	ldr	r1, [pc, #80]	; (1ad3c <is_abort_cb+0x64>)
   1acec:	6019      	str	r1, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1acee:	9b02      	ldr	r3, [sp, #8]
   1acf0:	2200      	movs	r2, #0
   1acf2:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1acf4:	f7ff ff52 	bl	1ab9c <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1acf8:	2800      	cmp	r0, #0
   1acfa:	db0f      	blt.n	1ad1c <is_abort_cb+0x44>
   1acfc:	f06f 000a 	mvn.w	r0, #10
}
   1ad00:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1ad02:	7bd3      	ldrb	r3, [r2, #15]
   1ad04:	2127      	movs	r1, #39	; 0x27
   1ad06:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ad0a:	7c53      	ldrb	r3, [r2, #17]
   1ad0c:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1ad10:	2b01      	cmp	r3, #1
   1ad12:	bf14      	ite	ne
   1ad14:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1ad18:	2000      	moveq	r0, #0
}
   1ad1a:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1ad1c:	4a08      	ldr	r2, [pc, #32]	; (1ad40 <is_abort_cb+0x68>)
   1ad1e:	4909      	ldr	r1, [pc, #36]	; (1ad44 <is_abort_cb+0x6c>)
   1ad20:	4809      	ldr	r0, [pc, #36]	; (1ad48 <is_abort_cb+0x70>)
   1ad22:	f240 1345 	movw	r3, #325	; 0x145
   1ad26:	f005 fe5a 	bl	209de <printk>
   1ad2a:	4040      	eors	r0, r0
   1ad2c:	f380 8811 	msr	BASEPRI, r0
   1ad30:	f04f 0003 	mov.w	r0, #3
   1ad34:	df02      	svc	2
   1ad36:	f06f 000a 	mvn.w	r0, #10
}
   1ad3a:	bd08      	pop	{r3, pc}
   1ad3c:	0001b045 	.word	0x0001b045
   1ad40:	00027f14 	.word	0x00027f14
   1ad44:	00027ee8 	.word	0x00027ee8
   1ad48:	000272c0 	.word	0x000272c0

0001ad4c <abort_cb>:
{
   1ad4c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1ad4e:	b1d8      	cbz	r0, 1ad88 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1ad50:	460c      	mov	r4, r1
   1ad52:	f7ff ff3b 	bl	1abcc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1ad56:	2800      	cmp	r0, #0
   1ad58:	db04      	blt.n	1ad64 <abort_cb+0x18>
	lll_done(param);
   1ad5a:	4620      	mov	r0, r4
}
   1ad5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1ad60:	f7ff bdaa 	b.w	1a8b8 <lll_done>
	LL_ASSERT(err >= 0);
   1ad64:	4a0c      	ldr	r2, [pc, #48]	; (1ad98 <abort_cb+0x4c>)
   1ad66:	490d      	ldr	r1, [pc, #52]	; (1ad9c <abort_cb+0x50>)
   1ad68:	480d      	ldr	r0, [pc, #52]	; (1ada0 <abort_cb+0x54>)
   1ad6a:	f240 136b 	movw	r3, #363	; 0x16b
   1ad6e:	f005 fe36 	bl	209de <printk>
   1ad72:	4040      	eors	r0, r0
   1ad74:	f380 8811 	msr	BASEPRI, r0
   1ad78:	f04f 0003 	mov.w	r0, #3
   1ad7c:	df02      	svc	2
	lll_done(param);
   1ad7e:	4620      	mov	r0, r4
}
   1ad80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1ad84:	f7ff bd98 	b.w	1a8b8 <lll_done>
		radio_isr_set(isr_abort, param);
   1ad88:	4806      	ldr	r0, [pc, #24]	; (1ada4 <abort_cb+0x58>)
   1ad8a:	f001 ff45 	bl	1cc18 <radio_isr_set>
}
   1ad8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1ad92:	f002 b859 	b.w	1ce48 <radio_disable>
   1ad96:	bf00      	nop
   1ad98:	00027f14 	.word	0x00027f14
   1ad9c:	00027ee8 	.word	0x00027ee8
   1ada0:	000272c0 	.word	0x000272c0
   1ada4:	0001ac09 	.word	0x0001ac09

0001ada8 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t upd = 0U;
	uint8_t chan;

	chan = find_lsb_set(lll->chan_map_curr);
   1ada8:	7b03      	ldrb	r3, [r0, #12]
   1adaa:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1adae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1adb2:	2b00      	cmp	r3, #0
   1adb4:	4604      	mov	r4, r0
   1adb6:	fa93 f0a3 	rbit	r0, r3
   1adba:	fab0 f080 	clz	r0, r0
   1adbe:	bf08      	it	eq
   1adc0:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1adc4:	1c45      	adds	r5, r0, #1
   1adc6:	d053      	beq.n	1ae70 <chan_prepare.isra.0+0xc8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1adc8:	7b22      	ldrb	r2, [r4, #12]
   1adca:	1e59      	subs	r1, r3, #1
   1adcc:	400b      	ands	r3, r1
   1adce:	f363 1206 	bfi	r2, r3, #4, #3
   1add2:	7322      	strb	r2, [r4, #12]

	lll_chan_set(36 + chan);
   1add4:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1add8:	f7ff fdea 	bl	1a9b0 <lll_chan_set>
	first = pdu->first;
   1addc:	7be2      	ldrb	r2, [r4, #15]
	if (first != pdu->last) {
   1adde:	7c21      	ldrb	r1, [r4, #16]
   1ade0:	428a      	cmp	r2, r1
	first = pdu->first;
   1ade2:	b2d3      	uxtb	r3, r2
	if (first != pdu->last) {
   1ade4:	d03e      	beq.n	1ae64 <chan_prepare.isra.0+0xbc>
		first += 1U;
   1ade6:	3301      	adds	r3, #1
   1ade8:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1adea:	2b02      	cmp	r3, #2
   1adec:	d037      	beq.n	1ae5e <chan_prepare.isra.0+0xb6>
   1adee:	2527      	movs	r5, #39	; 0x27
   1adf0:	2202      	movs	r2, #2
   1adf2:	fb15 2503 	smlabb	r5, r5, r3, r2
		pdu->first = first;
   1adf6:	73e3      	strb	r3, [r4, #15]
		*is_modified = 1U;
   1adf8:	2701      	movs	r7, #1
	return (void *)pdu->pdu[first];
   1adfa:	f104 080f 	add.w	r8, r4, #15
   1adfe:	eb08 0605 	add.w	r6, r8, r5

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1ae02:	4630      	mov	r0, r6
   1ae04:	f001 fff2 	bl	1cdec <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1ae08:	f818 3005 	ldrb.w	r3, [r8, r5]
   1ae0c:	f003 030f 	and.w	r3, r3, #15
   1ae10:	2b02      	cmp	r3, #2
   1ae12:	d045      	beq.n	1aea0 <chan_prepare.isra.0+0xf8>
	first = pdu->first;
   1ae14:	f894 105f 	ldrb.w	r1, [r4, #95]	; 0x5f
	if (first != pdu->last) {
   1ae18:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1ae1c:	428b      	cmp	r3, r1
	first = pdu->first;
   1ae1e:	b2ca      	uxtb	r2, r1
	if (first != pdu->last) {
   1ae20:	d037      	beq.n	1ae92 <chan_prepare.isra.0+0xea>
		first += 1U;
   1ae22:	3201      	adds	r2, #1
   1ae24:	b2d2      	uxtb	r2, r2
		if (first == DOUBLE_BUFFER_SIZE) {
   1ae26:	2a02      	cmp	r2, #2
   1ae28:	d042      	beq.n	1aeb0 <chan_prepare.isra.0+0x108>
   1ae2a:	2327      	movs	r3, #39	; 0x27
   1ae2c:	2102      	movs	r1, #2
   1ae2e:	fb13 1102 	smlabb	r1, r3, r2, r1
		pdu->first = first;
   1ae32:	4623      	mov	r3, r4
   1ae34:	f803 2f5f 	strb.w	r2, [r3, #95]!
	return (void *)pdu->pdu[first];
   1ae38:	440b      	add	r3, r1
   1ae3a:	f8d6 2002 	ldr.w	r2, [r6, #2]
   1ae3e:	f8c3 2002 	str.w	r2, [r3, #2]
   1ae42:	88f2      	ldrh	r2, [r6, #6]
   1ae44:	80da      	strh	r2, [r3, #6]
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1ae46:	4621      	mov	r1, r4
   1ae48:	481b      	ldr	r0, [pc, #108]	; (1aeb8 <chan_prepare.isra.0+0x110>)
   1ae4a:	f001 fee5 	bl	1cc18 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1ae4e:	2096      	movs	r0, #150	; 0x96
   1ae50:	f002 f8ee 	bl	1d030 <radio_tmr_tifs_set>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1ae54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_switch_complete_and_rx(0);
   1ae58:	2000      	movs	r0, #0
   1ae5a:	f002 b851 	b.w	1cf00 <radio_switch_complete_and_rx>
   1ae5e:	461d      	mov	r5, r3
			first = 0U;
   1ae60:	2300      	movs	r3, #0
   1ae62:	e7c8      	b.n	1adf6 <chan_prepare.isra.0+0x4e>
   1ae64:	2527      	movs	r5, #39	; 0x27
   1ae66:	2202      	movs	r2, #2
   1ae68:	fb15 2503 	smlabb	r5, r5, r3, r2
	uint8_t upd = 0U;
   1ae6c:	2700      	movs	r7, #0
   1ae6e:	e7c4      	b.n	1adfa <chan_prepare.isra.0+0x52>
	LL_ASSERT(chan);
   1ae70:	4a12      	ldr	r2, [pc, #72]	; (1aebc <chan_prepare.isra.0+0x114>)
   1ae72:	4913      	ldr	r1, [pc, #76]	; (1aec0 <chan_prepare.isra.0+0x118>)
   1ae74:	4813      	ldr	r0, [pc, #76]	; (1aec4 <chan_prepare.isra.0+0x11c>)
   1ae76:	f240 237a 	movw	r3, #634	; 0x27a
   1ae7a:	f005 fdb0 	bl	209de <printk>
   1ae7e:	4040      	eors	r0, r0
   1ae80:	f380 8811 	msr	BASEPRI, r0
   1ae84:	f04f 0003 	mov.w	r0, #3
   1ae88:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1ae8a:	7b23      	ldrb	r3, [r4, #12]
   1ae8c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1ae90:	e79a      	b.n	1adc8 <chan_prepare.isra.0+0x20>
		if (upd) {
   1ae92:	2f00      	cmp	r7, #0
   1ae94:	d0d7      	beq.n	1ae46 <chan_prepare.isra.0+0x9e>
	return (void *)pdu->pdu[first];
   1ae96:	2227      	movs	r2, #39	; 0x27
   1ae98:	fb02 4303 	mla	r3, r2, r3, r4
   1ae9c:	3361      	adds	r3, #97	; 0x61
   1ae9e:	e7cc      	b.n	1ae3a <chan_prepare.isra.0+0x92>
		radio_isr_set(isr_done, lll);
   1aea0:	4621      	mov	r1, r4
   1aea2:	4809      	ldr	r0, [pc, #36]	; (1aec8 <chan_prepare.isra.0+0x120>)
   1aea4:	f001 feb8 	bl	1cc18 <radio_isr_set>
}
   1aea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_switch_complete_and_disable();
   1aeac:	f002 b83e 	b.w	1cf2c <radio_switch_complete_and_disable>
   1aeb0:	4611      	mov	r1, r2
			first = 0U;
   1aeb2:	2200      	movs	r2, #0
   1aeb4:	e7bd      	b.n	1ae32 <chan_prepare.isra.0+0x8a>
   1aeb6:	bf00      	nop
   1aeb8:	0001ac21 	.word	0x0001ac21
   1aebc:	00027f14 	.word	0x00027f14
   1aec0:	00027b78 	.word	0x00027b78
   1aec4:	000272c0 	.word	0x000272c0
   1aec8:	0001aecd 	.word	0x0001aecd

0001aecc <isr_done>:
{
   1aecc:	b510      	push	{r4, lr}
   1aece:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1aed0:	f7ff fdc6 	bl	1aa60 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1aed4:	7b23      	ldrb	r3, [r4, #12]
   1aed6:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1aeda:	2a01      	cmp	r2, #1
   1aedc:	d105      	bne.n	1aeea <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1aede:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1aee2:	f362 1306 	bfi	r3, r2, #4, #3
   1aee6:	7323      	strb	r3, [r4, #12]
	if (lll->chan_map_curr) {
   1aee8:	b2db      	uxtb	r3, r3
   1aeea:	f013 0f70 	tst.w	r3, #112	; 0x70
   1aeee:	d106      	bne.n	1aefe <isr_done+0x32>
	radio_filter_disable();
   1aef0:	f002 f86c 	bl	1cfcc <radio_filter_disable>
	lll_isr_cleanup(param);
   1aef4:	4620      	mov	r0, r4
}
   1aef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1aefa:	f7ff bdbf 	b.w	1aa7c <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1aefe:	4620      	mov	r0, r4
   1af00:	f7ff ff52 	bl	1ada8 <chan_prepare.isra.0>
		radio_tx_enable();
   1af04:	f001 ff9a 	bl	1ce3c <radio_tx_enable>
}
   1af08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1af0c:	f002 b984 	b.w	1d218 <radio_tmr_end_capture>

0001af10 <prepare_cb>:
{
   1af10:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
   1af12:	68c5      	ldr	r5, [r0, #12]
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1af14:	4b44      	ldr	r3, [pc, #272]	; (1b028 <prepare_cb+0x118>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1af16:	792c      	ldrb	r4, [r5, #4]
{
   1af18:	b083      	sub	sp, #12
	if (lll_is_stop(lll)) {
   1af1a:	f014 0401 	ands.w	r4, r4, #1
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1af1e:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
   1af20:	d153      	bne.n	1afca <prepare_cb+0xba>
	radio_reset();
   1af22:	4606      	mov	r6, r0
   1af24:	f001 fe98 	bl	1cc58 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1af28:	4620      	mov	r0, r4
   1af2a:	f001 feef 	bl	1cd0c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1af2e:	4621      	mov	r1, r4
   1af30:	4620      	mov	r0, r4
   1af32:	f001 feb7 	bl	1cca4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1af36:	4622      	mov	r2, r4
   1af38:	2125      	movs	r1, #37	; 0x25
   1af3a:	2008      	movs	r0, #8
   1af3c:	f001 ff1c 	bl	1cd78 <radio_pkt_configure>
	radio_aa_set((uint8_t *)&aa);
   1af40:	a801      	add	r0, sp, #4
   1af42:	f001 ff01 	bl	1cd48 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1af46:	4939      	ldr	r1, [pc, #228]	; (1b02c <prepare_cb+0x11c>)
   1af48:	f240 605b 	movw	r0, #1627	; 0x65b
   1af4c:	f001 ffba 	bl	1cec4 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1af50:	7b2b      	ldrb	r3, [r5, #12]
   1af52:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1af56:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   1af5a:	4628      	mov	r0, r5
	lll->chan_map_curr = lll->chan_map;
   1af5c:	732b      	strb	r3, [r5, #12]
	pdu = chan_prepare(lll);
   1af5e:	f7ff ff23 	bl	1ada8 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1af62:	f7fe fdff 	bl	19b64 <ull_filter_lll_rl_enabled>
   1af66:	bb18      	cbnz	r0, 1afb0 <prepare_cb+0xa0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1af68:	7b6b      	ldrb	r3, [r5, #13]
   1af6a:	079b      	lsls	r3, r3, #30
   1af6c:	d14c      	bne.n	1b008 <prepare_cb+0xf8>
	evt = HDR_LLL2EVT(lll);
   1af6e:	682f      	ldr	r7, [r5, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   1af70:	6834      	ldr	r4, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1af72:	4638      	mov	r0, r7
   1af74:	f7ff fd00 	bl	1a978 <lll_evt_offset_get>
   1af78:	4404      	add	r4, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1af7a:	6872      	ldr	r2, [r6, #4]
   1af7c:	f104 0109 	add.w	r1, r4, #9
   1af80:	2001      	movs	r0, #1
   1af82:	f002 f861 	bl	1d048 <radio_tmr_start>
	radio_tmr_end_capture();
   1af86:	f002 f947 	bl	1d218 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1af8a:	4628      	mov	r0, r5
   1af8c:	f7f9 faf0 	bl	14570 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1af90:	1c81      	adds	r1, r0, #2
   1af92:	4622      	mov	r2, r4
   1af94:	b2c9      	uxtb	r1, r1
   1af96:	4638      	mov	r0, r7
   1af98:	f7ff fcf8 	bl	1a98c <lll_preempt_calc>
   1af9c:	b1f8      	cbz	r0, 1afde <prepare_cb+0xce>
		radio_isr_set(isr_abort, lll);
   1af9e:	4824      	ldr	r0, [pc, #144]	; (1b030 <prepare_cb+0x120>)
   1afa0:	4629      	mov	r1, r5
   1afa2:	f001 fe39 	bl	1cc18 <radio_isr_set>
		radio_disable();
   1afa6:	f001 ff4f 	bl	1ce48 <radio_disable>
}
   1afaa:	2000      	movs	r0, #0
   1afac:	b003      	add	sp, #12
   1afae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1afb0:	7b68      	ldrb	r0, [r5, #13]
   1afb2:	f010 0003 	ands.w	r0, r0, #3
   1afb6:	bf18      	it	ne
   1afb8:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1afba:	f7fe fd33 	bl	19a24 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1afbe:	7841      	ldrb	r1, [r0, #1]
   1afc0:	1c82      	adds	r2, r0, #2
   1afc2:	7800      	ldrb	r0, [r0, #0]
   1afc4:	f001 ffe2 	bl	1cf8c <radio_filter_configure>
   1afc8:	e7d1      	b.n	1af6e <prepare_cb+0x5e>
		err = lll_hfclock_off();
   1afca:	f7ff fdff 	bl	1abcc <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1afce:	2800      	cmp	r0, #0
   1afd0:	db1c      	blt.n	1b00c <prepare_cb+0xfc>
		lll_done(NULL);
   1afd2:	2000      	movs	r0, #0
   1afd4:	f7ff fc70 	bl	1a8b8 <lll_done>
}
   1afd8:	2000      	movs	r0, #0
   1afda:	b003      	add	sp, #12
   1afdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = lll_prepare_done(lll);
   1afde:	4628      	mov	r0, r5
   1afe0:	f7ff fc68 	bl	1a8b4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1afe4:	2800      	cmp	r0, #0
   1afe6:	d0e0      	beq.n	1afaa <prepare_cb+0x9a>
   1afe8:	4a12      	ldr	r2, [pc, #72]	; (1b034 <prepare_cb+0x124>)
   1afea:	4913      	ldr	r1, [pc, #76]	; (1b038 <prepare_cb+0x128>)
   1afec:	4813      	ldr	r0, [pc, #76]	; (1b03c <prepare_cb+0x12c>)
   1afee:	f240 131b 	movw	r3, #283	; 0x11b
   1aff2:	f005 fcf4 	bl	209de <printk>
   1aff6:	4040      	eors	r0, r0
   1aff8:	f380 8811 	msr	BASEPRI, r0
   1affc:	f04f 0003 	mov.w	r0, #3
   1b000:	df02      	svc	2
}
   1b002:	2000      	movs	r0, #0
   1b004:	b003      	add	sp, #12
   1b006:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b008:	2001      	movs	r0, #1
   1b00a:	e7d6      	b.n	1afba <prepare_cb+0xaa>
		LL_ASSERT(err >= 0);
   1b00c:	4a09      	ldr	r2, [pc, #36]	; (1b034 <prepare_cb+0x124>)
   1b00e:	490c      	ldr	r1, [pc, #48]	; (1b040 <prepare_cb+0x130>)
   1b010:	480a      	ldr	r0, [pc, #40]	; (1b03c <prepare_cb+0x12c>)
   1b012:	23be      	movs	r3, #190	; 0xbe
   1b014:	f005 fce3 	bl	209de <printk>
   1b018:	4040      	eors	r0, r0
   1b01a:	f380 8811 	msr	BASEPRI, r0
   1b01e:	f04f 0003 	mov.w	r0, #3
   1b022:	df02      	svc	2
   1b024:	e7d5      	b.n	1afd2 <prepare_cb+0xc2>
   1b026:	bf00      	nop
   1b028:	8e89bed6 	.word	0x8e89bed6
   1b02c:	00555555 	.word	0x00555555
   1b030:	0001ac09 	.word	0x0001ac09
   1b034:	00027f14 	.word	0x00027f14
   1b038:	00027594 	.word	0x00027594
   1b03c:	000272c0 	.word	0x000272c0
   1b040:	00027ee8 	.word	0x00027ee8

0001b044 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1b044:	68c3      	ldr	r3, [r0, #12]
{
   1b046:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1b048:	681e      	ldr	r6, [r3, #0]
{
   1b04a:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b04c:	f7f5 fe96 	bl	10d7c <ticker_ticks_now_get>
   1b050:	4605      	mov	r5, r0
   1b052:	4630      	mov	r0, r6
   1b054:	f7ff fc90 	bl	1a978 <lll_evt_offset_get>
	p->remainder = 0;
   1b058:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b05a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1b05c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1b060:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1b062:	4620      	mov	r0, r4
}
   1b064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1b068:	f7ff bf52 	b.w	1af10 <prepare_cb>

0001b06c <lll_adv_init>:
}
   1b06c:	2000      	movs	r0, #0
   1b06e:	4770      	bx	lr

0001b070 <lll_adv_reset>:
   1b070:	2000      	movs	r0, #0
   1b072:	4770      	bx	lr

0001b074 <lll_adv_prepare>:
{
   1b074:	b510      	push	{r4, lr}
   1b076:	b082      	sub	sp, #8
   1b078:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b07a:	f7ff fd8f 	bl	1ab9c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b07e:	2800      	cmp	r0, #0
   1b080:	db19      	blt.n	1b0b6 <lll_adv_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1b082:	4a13      	ldr	r2, [pc, #76]	; (1b0d0 <lll_adv_prepare+0x5c>)
   1b084:	4913      	ldr	r1, [pc, #76]	; (1b0d4 <lll_adv_prepare+0x60>)
   1b086:	4814      	ldr	r0, [pc, #80]	; (1b0d8 <lll_adv_prepare+0x64>)
   1b088:	9400      	str	r4, [sp, #0]
   1b08a:	2300      	movs	r3, #0
   1b08c:	f7ff fb88 	bl	1a7a0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b090:	b108      	cbz	r0, 1b096 <lll_adv_prepare+0x22>
   1b092:	3077      	adds	r0, #119	; 0x77
   1b094:	d101      	bne.n	1b09a <lll_adv_prepare+0x26>
}
   1b096:	b002      	add	sp, #8
   1b098:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b09a:	4a10      	ldr	r2, [pc, #64]	; (1b0dc <lll_adv_prepare+0x68>)
   1b09c:	4910      	ldr	r1, [pc, #64]	; (1b0e0 <lll_adv_prepare+0x6c>)
   1b09e:	4811      	ldr	r0, [pc, #68]	; (1b0e4 <lll_adv_prepare+0x70>)
   1b0a0:	236b      	movs	r3, #107	; 0x6b
   1b0a2:	f005 fc9c 	bl	209de <printk>
   1b0a6:	4040      	eors	r0, r0
   1b0a8:	f380 8811 	msr	BASEPRI, r0
   1b0ac:	f04f 0003 	mov.w	r0, #3
   1b0b0:	df02      	svc	2
}
   1b0b2:	b002      	add	sp, #8
   1b0b4:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1b0b6:	4a09      	ldr	r2, [pc, #36]	; (1b0dc <lll_adv_prepare+0x68>)
   1b0b8:	490b      	ldr	r1, [pc, #44]	; (1b0e8 <lll_adv_prepare+0x74>)
   1b0ba:	480a      	ldr	r0, [pc, #40]	; (1b0e4 <lll_adv_prepare+0x70>)
   1b0bc:	2368      	movs	r3, #104	; 0x68
   1b0be:	f005 fc8e 	bl	209de <printk>
   1b0c2:	4040      	eors	r0, r0
   1b0c4:	f380 8811 	msr	BASEPRI, r0
   1b0c8:	f04f 0003 	mov.w	r0, #3
   1b0cc:	df02      	svc	2
   1b0ce:	e7d8      	b.n	1b082 <lll_adv_prepare+0xe>
   1b0d0:	0001af11 	.word	0x0001af11
   1b0d4:	0001ad4d 	.word	0x0001ad4d
   1b0d8:	0001acd9 	.word	0x0001acd9
   1b0dc:	00027f14 	.word	0x00027f14
   1b0e0:	00027f74 	.word	0x00027f74
   1b0e4:	000272c0 	.word	0x000272c0
   1b0e8:	00027ee8 	.word	0x00027ee8

0001b0ec <lll_adv_scan_req_check>:
{
   1b0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1b0f0:	f890 c00d 	ldrb.w	ip, [r0, #13]
{
   1b0f4:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b0f8:	f01c 0f01 	tst.w	ip, #1
{
   1b0fc:	460f      	mov	r7, r1
   1b0fe:	4616      	mov	r6, r2
   1b100:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b102:	d009      	beq.n	1b118 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   1b104:	f1b8 0f00 	cmp.w	r8, #0
   1b108:	d016      	beq.n	1b138 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1b10a:	783b      	ldrb	r3, [r7, #0]
   1b10c:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1b110:	d019      	beq.n	1b146 <lll_adv_scan_req_check+0x5a>
{
   1b112:	2000      	movs	r0, #0
}
   1b114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b118:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1b11a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1b11e:	9a07      	ldr	r2, [sp, #28]
   1b120:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b124:	f7fe fcbe 	bl	19aa4 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1b128:	2800      	cmp	r0, #0
   1b12a:	d1ee      	bne.n	1b10a <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   1b12c:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1b12e:	07db      	lsls	r3, r3, #31
   1b130:	d5ef      	bpl.n	1b112 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   1b132:	f1b8 0f00 	cmp.w	r8, #0
   1b136:	d1e8      	bne.n	1b10a <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b138:	9b07      	ldr	r3, [sp, #28]
   1b13a:	7818      	ldrb	r0, [r3, #0]
   1b13c:	f7fe fc42 	bl	199c4 <ull_filter_lll_irk_whitelisted>
   1b140:	2800      	cmp	r0, #0
   1b142:	d1e2      	bne.n	1b10a <lll_adv_scan_req_check+0x1e>
   1b144:	e7e5      	b.n	1b112 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1b146:	2206      	movs	r2, #6
   1b148:	f107 0108 	add.w	r1, r7, #8
   1b14c:	4628      	mov	r0, r5
   1b14e:	f00b f892 	bl	26276 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1b152:	fab0 f080 	clz	r0, r0
   1b156:	0940      	lsrs	r0, r0, #5
}
   1b158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b15c <isr_rx>:
{
   1b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b160:	b087      	sub	sp, #28
   1b162:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1b164:	f001 fe9a 	bl	1ce9c <radio_is_done>
	if (trx_done) {
   1b168:	b2c0      	uxtb	r0, r0
   1b16a:	b950      	cbnz	r0, 1b182 <isr_rx+0x26>
	lll_isr_status_reset();
   1b16c:	f7ff fc78 	bl	1aa60 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1b170:	48bc      	ldr	r0, [pc, #752]	; (1b464 <isr_rx+0x308>)
   1b172:	4629      	mov	r1, r5
   1b174:	f001 fd50 	bl	1cc18 <radio_isr_set>
}
   1b178:	b007      	add	sp, #28
   1b17a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   1b17e:	f001 be63 	b.w	1ce48 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1b182:	f001 feab 	bl	1cedc <radio_crc_is_valid>
   1b186:	4604      	mov	r4, r0
		devmatch_ok = radio_filter_has_match();
   1b188:	f001 ff32 	bl	1cff0 <radio_filter_has_match>
   1b18c:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   1b18e:	f001 ff39 	bl	1d004 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1b192:	f002 f945 	bl	1d420 <radio_ar_has_match>
   1b196:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1b198:	f002 f930 	bl	1d3fc <radio_ar_match_get>
   1b19c:	4681      	mov	r9, r0
		rssi_ready = radio_rssi_is_ready();
   1b19e:	f001 feeb 	bl	1cf78 <radio_rssi_is_ready>
	if (crc_ok) {
   1b1a2:	b2e4      	uxtb	r4, r4
		rssi_ready = radio_rssi_is_ready();
   1b1a4:	4680      	mov	r8, r0
	lll_isr_status_reset();
   1b1a6:	f7ff fc5b 	bl	1aa60 <lll_isr_status_reset>
	if (crc_ok) {
   1b1aa:	2c00      	cmp	r4, #0
   1b1ac:	d0e0      	beq.n	1b170 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1b1ae:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1b1b2:	f040 809b 	bne.w	1b2ec <isr_rx+0x190>
   1b1b6:	20ff      	movs	r0, #255	; 0xff
   1b1b8:	f88d 0017 	strb.w	r0, [sp, #23]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1b1bc:	f001 fe9c 	bl	1cef8 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1b1c0:	7beb      	ldrb	r3, [r5, #15]
   1b1c2:	4604      	mov	r4, r0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b1c4:	7800      	ldrb	r0, [r0, #0]
   1b1c6:	f04f 0a27 	mov.w	sl, #39	; 0x27
   1b1ca:	f04f 0911 	mov.w	r9, #17
   1b1ce:	fb0a 9903 	mla	r9, sl, r3, r9
   1b1d2:	f000 020f 	and.w	r2, r0, #15
   1b1d6:	eb05 0b09 	add.w	fp, r5, r9
   1b1da:	2a03      	cmp	r2, #3
		devmatch_ok = radio_filter_has_match();
   1b1dc:	b2ff      	uxtb	r7, r7
	addr = pdu_adv->adv_ind.addr;
   1b1de:	f10b 0302 	add.w	r3, fp, #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b1e2:	f000 8099 	beq.w	1b318 <isr_rx+0x1bc>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1b1e6:	2a05      	cmp	r2, #5
   1b1e8:	d1c2      	bne.n	1b170 <isr_rx+0x14>
   1b1ea:	7862      	ldrb	r2, [r4, #1]
   1b1ec:	2a22      	cmp	r2, #34	; 0x22
   1b1ee:	d1bf      	bne.n	1b170 <isr_rx+0x14>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, uint8_t devmatch_ok,
				   uint8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b1f0:	f815 2009 	ldrb.w	r2, [r5, r9]
   1b1f4:	f002 020f 	and.w	r2, r2, #15
   1b1f8:	2a01      	cmp	r2, #1
   1b1fa:	f000 80d8 	beq.w	1b3ae <isr_rx+0x252>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   1b1fe:	7b6a      	ldrb	r2, [r5, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b200:	0791      	lsls	r1, r2, #30
   1b202:	d578      	bpl.n	1b2f6 <isr_rx+0x19a>
		(((lll->filter_policy & 0x02) != 0) &&
   1b204:	2f00      	cmp	r7, #0
   1b206:	f000 80c8 	beq.w	1b39a <isr_rx+0x23e>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   1b20a:	f815 2009 	ldrb.w	r2, [r5, r9]
   1b20e:	7820      	ldrb	r0, [r4, #0]
   1b210:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1b214:	ebb1 1fd0 	cmp.w	r1, r0, lsr #7
   1b218:	d1aa      	bne.n	1b170 <isr_rx+0x14>
   1b21a:	f002 020f 	and.w	r2, r2, #15
   1b21e:	2a01      	cmp	r2, #1
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1b220:	f104 0708 	add.w	r7, r4, #8
	return (adv->tx_addr == ci->rx_addr) &&
   1b224:	f000 80f2 	beq.w	1b40c <isr_rx+0x2b0>
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1b228:	4639      	mov	r1, r7
   1b22a:	4618      	mov	r0, r3
   1b22c:	2206      	movs	r2, #6
   1b22e:	f00b f822 	bl	26276 <memcmp>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1b232:	2800      	cmp	r0, #0
   1b234:	d19c      	bne.n	1b170 <isr_rx+0x14>
				   &rl_idx) &&
   1b236:	68ab      	ldr	r3, [r5, #8]
   1b238:	2b00      	cmp	r3, #0
   1b23a:	d099      	beq.n	1b170 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1b23c:	2004      	movs	r0, #4
   1b23e:	f7f8 fd47 	bl	13cd0 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1b242:	2800      	cmp	r0, #0
   1b244:	d094      	beq.n	1b170 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1b246:	4888      	ldr	r0, [pc, #544]	; (1b468 <isr_rx+0x30c>)
   1b248:	4629      	mov	r1, r5
   1b24a:	f001 fce5 	bl	1cc18 <radio_isr_set>
		radio_disable();
   1b24e:	f001 fdfb 	bl	1ce48 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1b252:	f001 fe19 	bl	1ce88 <radio_is_ready>
   1b256:	2800      	cmp	r0, #0
   1b258:	f040 8091 	bne.w	1b37e <isr_rx+0x222>
		if (rssi_ready) {
   1b25c:	fa5f f088 	uxtb.w	r0, r8
   1b260:	2800      	cmp	r0, #0
   1b262:	f040 8086 	bne.w	1b372 <isr_rx+0x216>
	int ret = !!hdr->is_stop;
   1b266:	792b      	ldrb	r3, [r5, #4]
	hdr->is_stop = 1U;
   1b268:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1b26c:	07db      	lsls	r3, r3, #31
   1b26e:	712a      	strb	r2, [r5, #4]
   1b270:	d471      	bmi.n	1b356 <isr_rx+0x1fa>
		rx = ull_pdu_rx_alloc();
   1b272:	f7f8 fd4b 	bl	13d0c <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b276:	220a      	movs	r2, #10
   1b278:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   1b27a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b27e:	80c2      	strh	r2, [r0, #6]
		rx = ull_pdu_rx_alloc();
   1b280:	4607      	mov	r7, r0
   1b282:	4623      	mov	r3, r4
   1b284:	f100 021c 	add.w	r2, r0, #28
   1b288:	f104 0e20 	add.w	lr, r4, #32
   1b28c:	681c      	ldr	r4, [r3, #0]
   1b28e:	6858      	ldr	r0, [r3, #4]
   1b290:	6899      	ldr	r1, [r3, #8]
   1b292:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1b296:	f8c2 c00c 	str.w	ip, [r2, #12]
   1b29a:	3310      	adds	r3, #16
   1b29c:	4573      	cmp	r3, lr
   1b29e:	6014      	str	r4, [r2, #0]
   1b2a0:	6050      	str	r0, [r2, #4]
   1b2a2:	6091      	str	r1, [r2, #8]
   1b2a4:	f102 0210 	add.w	r2, r2, #16
   1b2a8:	d1f0      	bne.n	1b28c <isr_rx+0x130>
   1b2aa:	681b      	ldr	r3, [r3, #0]
   1b2ac:	6013      	str	r3, [r2, #0]
		ftr->param = lll;
   1b2ae:	60bd      	str	r5, [r7, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1b2b0:	f001 ff66 	bl	1d180 <radio_tmr_start_get>
   1b2b4:	6138      	str	r0, [r7, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1b2b6:	f001 ffb7 	bl	1d228 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1b2ba:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1b2bc:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1b2be:	4608      	mov	r0, r1
   1b2c0:	f001 fda4 	bl	1ce0c <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1b2c4:	1a24      	subs	r4, r4, r0
   1b2c6:	617c      	str	r4, [r7, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1b2c8:	2e00      	cmp	r6, #0
   1b2ca:	d042      	beq.n	1b352 <isr_rx+0x1f6>
   1b2cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1b2d0:	76bb      	strb	r3, [r7, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1b2d2:	f7f8 fd1b 	bl	13d0c <ull_pdu_rx_alloc>
   1b2d6:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   1b2d8:	4639      	mov	r1, r7
   1b2da:	6838      	ldr	r0, [r7, #0]
			ftr->extra = ull_pdu_rx_alloc();
   1b2dc:	60fb      	str	r3, [r7, #12]
		ull_rx_put(rx->hdr.link, rx);
   1b2de:	f7f8 fd2b 	bl	13d38 <ull_rx_put>
		ull_rx_sched();
   1b2e2:	f7f8 fd39 	bl	13d58 <ull_rx_sched>
}
   1b2e6:	b007      	add	sp, #28
   1b2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1b2ec:	fa5f f089 	uxtb.w	r0, r9
   1b2f0:	f7fe fb16 	bl	19920 <ull_filter_lll_rl_irk_idx>
   1b2f4:	e760      	b.n	1b1b8 <isr_rx+0x5c>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1b2f6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b2fa:	f10d 0217 	add.w	r2, sp, #23
   1b2fe:	1ca1      	adds	r1, r4, #2
   1b300:	9303      	str	r3, [sp, #12]
   1b302:	f7fe fbcf 	bl	19aa4 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1b306:	9b03      	ldr	r3, [sp, #12]
   1b308:	2800      	cmp	r0, #0
   1b30a:	f47f af7e 	bne.w	1b20a <isr_rx+0xae>
		(((lll->filter_policy & 0x02) != 0) &&
   1b30e:	7b6a      	ldrb	r2, [r5, #13]
						rl_idx)) ||
   1b310:	0792      	lsls	r2, r2, #30
   1b312:	f57f af2d 	bpl.w	1b170 <isr_rx+0x14>
   1b316:	e775      	b.n	1b204 <isr_rx+0xa8>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b318:	7862      	ldrb	r2, [r4, #1]
   1b31a:	2a0c      	cmp	r2, #12
   1b31c:	f47f af28 	bne.w	1b170 <isr_rx+0x14>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1b320:	f815 2009 	ldrb.w	r2, [r5, r9]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1b324:	f002 010f 	and.w	r1, r2, #15
   1b328:	2901      	cmp	r1, #1
   1b32a:	f43f af21 	beq.w	1b170 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1b32e:	f10d 0117 	add.w	r1, sp, #23
   1b332:	9101      	str	r1, [sp, #4]
   1b334:	9700      	str	r7, [sp, #0]
   1b336:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1b33a:	4621      	mov	r1, r4
   1b33c:	4628      	mov	r0, r5
   1b33e:	9303      	str	r3, [sp, #12]
   1b340:	f7ff fed4 	bl	1b0ec <lll_adv_scan_req_check>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1b344:	2800      	cmp	r0, #0
   1b346:	d16c      	bne.n	1b422 <isr_rx+0x2c6>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1b348:	7820      	ldrb	r0, [r4, #0]
   1b34a:	9b03      	ldr	r3, [sp, #12]
   1b34c:	f000 020f 	and.w	r2, r0, #15
   1b350:	e749      	b.n	1b1e6 <isr_rx+0x8a>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1b352:	23ff      	movs	r3, #255	; 0xff
   1b354:	e7bc      	b.n	1b2d0 <isr_rx+0x174>
		LL_ASSERT(!ret);
   1b356:	4a45      	ldr	r2, [pc, #276]	; (1b46c <isr_rx+0x310>)
   1b358:	4945      	ldr	r1, [pc, #276]	; (1b470 <isr_rx+0x314>)
   1b35a:	4846      	ldr	r0, [pc, #280]	; (1b474 <isr_rx+0x318>)
   1b35c:	f44f 7344 	mov.w	r3, #784	; 0x310
   1b360:	f005 fb3d 	bl	209de <printk>
   1b364:	4040      	eors	r0, r0
   1b366:	f380 8811 	msr	BASEPRI, r0
   1b36a:	f04f 0003 	mov.w	r0, #3
   1b36e:	df02      	svc	2
   1b370:	e77f      	b.n	1b272 <isr_rx+0x116>
			lll->conn->rssi_latest =  radio_rssi_get();
   1b372:	f001 fdf3 	bl	1cf5c <radio_rssi_get>
   1b376:	68ab      	ldr	r3, [r5, #8]
   1b378:	f883 00a9 	strb.w	r0, [r3, #169]	; 0xa9
   1b37c:	e773      	b.n	1b266 <isr_rx+0x10a>
		LL_ASSERT(!radio_is_ready());
   1b37e:	4a3b      	ldr	r2, [pc, #236]	; (1b46c <isr_rx+0x310>)
   1b380:	493d      	ldr	r1, [pc, #244]	; (1b478 <isr_rx+0x31c>)
   1b382:	483c      	ldr	r0, [pc, #240]	; (1b474 <isr_rx+0x318>)
   1b384:	f240 3302 	movw	r3, #770	; 0x302
   1b388:	f005 fb29 	bl	209de <printk>
   1b38c:	4040      	eors	r0, r0
   1b38e:	f380 8811 	msr	BASEPRI, r0
   1b392:	f04f 0003 	mov.w	r0, #3
   1b396:	df02      	svc	2
   1b398:	e760      	b.n	1b25c <isr_rx+0x100>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b39a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1b39e:	9303      	str	r3, [sp, #12]
   1b3a0:	f7fe fb10 	bl	199c4 <ull_filter_lll_irk_whitelisted>
   1b3a4:	9b03      	ldr	r3, [sp, #12]
   1b3a6:	2800      	cmp	r0, #0
   1b3a8:	f47f af2f 	bne.w	1b20a <isr_rx+0xae>
   1b3ac:	e6e0      	b.n	1b170 <isr_rx+0x14>
						      ci->connect_ind.init_addr,
   1b3ae:	1ca7      	adds	r7, r4, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1b3b0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b3b4:	f10d 0217 	add.w	r2, sp, #23
   1b3b8:	4639      	mov	r1, r7
   1b3ba:	9303      	str	r3, [sp, #12]
   1b3bc:	f7fe fb72 	bl	19aa4 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   1b3c0:	9b03      	ldr	r3, [sp, #12]
   1b3c2:	2800      	cmp	r0, #0
   1b3c4:	f43f aed4 	beq.w	1b170 <isr_rx+0x14>
	return (adv->tx_addr == ci->rx_addr) &&
   1b3c8:	f815 2009 	ldrb.w	r2, [r5, r9]
   1b3cc:	7820      	ldrb	r0, [r4, #0]
   1b3ce:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1b3d2:	ebb1 1fd0 	cmp.w	r1, r0, lsr #7
   1b3d6:	f47f aecb 	bne.w	1b170 <isr_rx+0x14>
   1b3da:	f002 020f 	and.w	r2, r2, #15
   1b3de:	2a01      	cmp	r2, #1
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1b3e0:	f104 0a08 	add.w	sl, r4, #8
	return (adv->tx_addr == ci->rx_addr) &&
   1b3e4:	d05d      	beq.n	1b4a2 <isr_rx+0x346>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1b3e6:	4651      	mov	r1, sl
   1b3e8:	4618      	mov	r0, r3
   1b3ea:	2206      	movs	r2, #6
   1b3ec:	f00a ff43 	bl	26276 <memcmp>
			 BDADDR_SIZE)) ||
   1b3f0:	2800      	cmp	r0, #0
   1b3f2:	f47f aebd 	bne.w	1b170 <isr_rx+0x14>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   1b3f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1b3fa:	2bff      	cmp	r3, #255	; 0xff
   1b3fc:	d03e      	beq.n	1b47c <isr_rx+0x320>
   1b3fe:	7baa      	ldrb	r2, [r5, #14]
   1b400:	2aff      	cmp	r2, #255	; 0xff
   1b402:	d03b      	beq.n	1b47c <isr_rx+0x320>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1b404:	4293      	cmp	r3, r2
   1b406:	f43f af16 	beq.w	1b236 <isr_rx+0xda>
   1b40a:	e6b1      	b.n	1b170 <isr_rx+0x14>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1b40c:	4618      	mov	r0, r3
   1b40e:	2206      	movs	r2, #6
   1b410:	4639      	mov	r1, r7
   1b412:	9303      	str	r3, [sp, #12]
   1b414:	f00a ff2f 	bl	26276 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1b418:	9b03      	ldr	r3, [sp, #12]
   1b41a:	2800      	cmp	r0, #0
   1b41c:	f43f af0b 	beq.w	1b236 <isr_rx+0xda>
   1b420:	e702      	b.n	1b228 <isr_rx+0xcc>
		radio_isr_set(isr_done, lll);
   1b422:	4810      	ldr	r0, [pc, #64]	; (1b464 <isr_rx+0x308>)
   1b424:	4629      	mov	r1, r5
   1b426:	f001 fbf7 	bl	1cc18 <radio_isr_set>
		radio_switch_complete_and_disable();
   1b42a:	f001 fd7f 	bl	1cf2c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1b42e:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
   1b432:	fb0a 5000 	mla	r0, sl, r0, r5
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1b436:	3061      	adds	r0, #97	; 0x61
   1b438:	f001 fcd8 	bl	1cdec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1b43c:	f001 fd24 	bl	1ce88 <radio_is_ready>
   1b440:	2800      	cmp	r0, #0
   1b442:	f43f af50 	beq.w	1b2e6 <isr_rx+0x18a>
   1b446:	4a09      	ldr	r2, [pc, #36]	; (1b46c <isr_rx+0x310>)
   1b448:	490b      	ldr	r1, [pc, #44]	; (1b478 <isr_rx+0x31c>)
   1b44a:	480a      	ldr	r0, [pc, #40]	; (1b474 <isr_rx+0x318>)
   1b44c:	f240 23c5 	movw	r3, #709	; 0x2c5
   1b450:	f005 fac5 	bl	209de <printk>
   1b454:	4040      	eors	r0, r0
   1b456:	f380 8811 	msr	BASEPRI, r0
   1b45a:	f04f 0003 	mov.w	r0, #3
   1b45e:	df02      	svc	2
		if (!err) {
   1b460:	e741      	b.n	1b2e6 <isr_rx+0x18a>
   1b462:	bf00      	nop
   1b464:	0001aecd 	.word	0x0001aecd
   1b468:	0001ac09 	.word	0x0001ac09
   1b46c:	00027f14 	.word	0x00027f14
   1b470:	00027594 	.word	0x00027594
   1b474:	000272c0 	.word	0x000272c0
   1b478:	00027f60 	.word	0x00027f60
	return (adv->rx_addr == ci->tx_addr) &&
   1b47c:	7823      	ldrb	r3, [r4, #0]
   1b47e:	f815 2009 	ldrb.w	r2, [r5, r9]
   1b482:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b486:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1b48a:	f47f ae71 	bne.w	1b170 <isr_rx+0x14>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1b48e:	4639      	mov	r1, r7
   1b490:	f10b 0008 	add.w	r0, fp, #8
   1b494:	2206      	movs	r2, #6
   1b496:	f00a feee 	bl	26276 <memcmp>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1b49a:	2800      	cmp	r0, #0
   1b49c:	f43f aecb 	beq.w	1b236 <isr_rx+0xda>
   1b4a0:	e666      	b.n	1b170 <isr_rx+0x14>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1b4a2:	2206      	movs	r2, #6
   1b4a4:	4651      	mov	r1, sl
   1b4a6:	4618      	mov	r0, r3
   1b4a8:	9303      	str	r3, [sp, #12]
   1b4aa:	f00a fee4 	bl	26276 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1b4ae:	2800      	cmp	r0, #0
   1b4b0:	d0a1      	beq.n	1b3f6 <isr_rx+0x29a>
   1b4b2:	9b03      	ldr	r3, [sp, #12]
   1b4b4:	e797      	b.n	1b3e6 <isr_rx+0x28a>
   1b4b6:	bf00      	nop

0001b4b8 <ticker_stop_cb>:
{
   1b4b8:	b508      	push	{r3, lr}
	radio_isr_set(isr_cleanup, param);
   1b4ba:	4619      	mov	r1, r3
   1b4bc:	4803      	ldr	r0, [pc, #12]	; (1b4cc <ticker_stop_cb+0x14>)
   1b4be:	f001 fbab 	bl	1cc18 <radio_isr_set>
}
   1b4c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1b4c6:	f001 bcbf 	b.w	1ce48 <radio_disable>
   1b4ca:	bf00      	nop
   1b4cc:	0001b9f5 	.word	0x0001b9f5

0001b4d0 <prepare_cb>:
{
   1b4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_scan *lll = p->param;
   1b4d2:	68c4      	ldr	r4, [r0, #12]
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1b4d4:	4b83      	ldr	r3, [pc, #524]	; (1b6e4 <prepare_cb+0x214>)
   1b4d6:	7925      	ldrb	r5, [r4, #4]
{
   1b4d8:	b08d      	sub	sp, #52	; 0x34
	if (lll_is_stop(lll)) {
   1b4da:	f015 0501 	ands.w	r5, r5, #1
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1b4de:	930b      	str	r3, [sp, #44]	; 0x2c
	if (lll_is_stop(lll)) {
   1b4e0:	f040 8089 	bne.w	1b5f6 <prepare_cb+0x126>
	lll->state = 0U;
   1b4e4:	7da3      	ldrb	r3, [r4, #22]
   1b4e6:	f365 0300 	bfi	r3, r5, #0, #1
   1b4ea:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1b4ec:	4606      	mov	r6, r0
   1b4ee:	f001 fbb3 	bl	1cc58 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1b4f2:	4628      	mov	r0, r5
   1b4f4:	f001 fc0a 	bl	1cd0c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1b4f8:	4629      	mov	r1, r5
   1b4fa:	4628      	mov	r0, r5
   1b4fc:	f001 fbd2 	bl	1cca4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1b500:	462a      	mov	r2, r5
   1b502:	2125      	movs	r1, #37	; 0x25
   1b504:	2008      	movs	r0, #8
   1b506:	f001 fc37 	bl	1cd78 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b50a:	2001      	movs	r0, #1
   1b50c:	f7f8 fbe0 	bl	13cd0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b510:	4605      	mov	r5, r0
   1b512:	2800      	cmp	r0, #0
   1b514:	f000 80cb 	beq.w	1b6ae <prepare_cb+0x1de>
	radio_pkt_rx_set(node_rx->pdu);
   1b518:	f105 001c 	add.w	r0, r5, #28
   1b51c:	f001 fc60 	bl	1cde0 <radio_pkt_rx_set>
	radio_aa_set((uint8_t *)&aa);
   1b520:	a80b      	add	r0, sp, #44	; 0x2c
   1b522:	f001 fc11 	bl	1cd48 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b526:	4970      	ldr	r1, [pc, #448]	; (1b6e8 <prepare_cb+0x218>)
   1b528:	f240 605b 	movw	r0, #1627	; 0x65b
   1b52c:	f001 fcca 	bl	1cec4 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1b530:	7da0      	ldrb	r0, [r4, #22]
   1b532:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1b536:	3025      	adds	r0, #37	; 0x25
   1b538:	f7ff fa3a 	bl	1a9b0 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1b53c:	4621      	mov	r1, r4
   1b53e:	486b      	ldr	r0, [pc, #428]	; (1b6ec <prepare_cb+0x21c>)
   1b540:	f001 fb6a 	bl	1cc18 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b544:	2096      	movs	r0, #150	; 0x96
   1b546:	f001 fd73 	bl	1d030 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b54a:	2300      	movs	r3, #0
   1b54c:	461a      	mov	r2, r3
   1b54e:	4619      	mov	r1, r3
   1b550:	4618      	mov	r0, r3
   1b552:	f001 fce1 	bl	1cf18 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1b556:	f7fe fb05 	bl	19b64 <ull_filter_lll_rl_enabled>
   1b55a:	2800      	cmp	r0, #0
   1b55c:	d135      	bne.n	1b5ca <prepare_cb+0xfa>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1b55e:	7da3      	ldrb	r3, [r4, #22]
   1b560:	f013 0f18 	tst.w	r3, #24
   1b564:	f040 808a 	bne.w	1b67c <prepare_cb+0x1ac>
	evt = HDR_LLL2EVT(lll);
   1b568:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1b56a:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1b56c:	4638      	mov	r0, r7
   1b56e:	f7ff fa03 	bl	1a978 <lll_evt_offset_get>
   1b572:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1b574:	6872      	ldr	r2, [r6, #4]
   1b576:	f105 0109 	add.w	r1, r5, #9
   1b57a:	2000      	movs	r0, #0
   1b57c:	f001 fd64 	bl	1d048 <radio_tmr_start>
	radio_tmr_end_capture();
   1b580:	f001 fe4a 	bl	1d218 <radio_tmr_end_capture>
	radio_rssi_measure();
   1b584:	f001 fce0 	bl	1cf48 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1b588:	4620      	mov	r0, r4
   1b58a:	f7f9 fa2b 	bl	149e4 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1b58e:	1d01      	adds	r1, r0, #4
   1b590:	b2c9      	uxtb	r1, r1
   1b592:	4638      	mov	r0, r7
   1b594:	462a      	mov	r2, r5
   1b596:	f7ff f9f9 	bl	1a98c <lll_preempt_calc>
   1b59a:	4601      	mov	r1, r0
   1b59c:	2800      	cmp	r0, #0
   1b59e:	d134      	bne.n	1b60a <prepare_cb+0x13a>
		if (lll->ticks_window) {
   1b5a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b5a2:	2b00      	cmp	r3, #0
   1b5a4:	d148      	bne.n	1b638 <prepare_cb+0x168>
		if (lll->conn) {
   1b5a6:	68a3      	ldr	r3, [r4, #8]
   1b5a8:	b13b      	cbz	r3, 1b5ba <prepare_cb+0xea>
			mfy_after_mstr_offset_get.param = p;
   1b5aa:	4b51      	ldr	r3, [pc, #324]	; (1b6f0 <prepare_cb+0x220>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1b5ac:	2201      	movs	r2, #1
   1b5ae:	2102      	movs	r1, #2
   1b5b0:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1b5b2:	609e      	str	r6, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1b5b4:	f7f4 f82c 	bl	f610 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1b5b8:	bb80      	cbnz	r0, 1b61c <prepare_cb+0x14c>
		ret = lll_prepare_done(lll);
   1b5ba:	4620      	mov	r0, r4
   1b5bc:	f7ff f97a 	bl	1a8b4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1b5c0:	2800      	cmp	r0, #0
   1b5c2:	d164      	bne.n	1b68e <prepare_cb+0x1be>
}
   1b5c4:	2000      	movs	r0, #0
   1b5c6:	b00d      	add	sp, #52	; 0x34
   1b5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   1b5ca:	7da0      	ldrb	r0, [r4, #22]
   1b5cc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1b5d0:	f7fe fa28 	bl	19a24 <ull_filter_lll_get>
   1b5d4:	4605      	mov	r5, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b5d6:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1b5da:	f7fe f92d 	bl	19838 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1b5de:	7869      	ldrb	r1, [r5, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b5e0:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   1b5e2:	1caa      	adds	r2, r5, #2
   1b5e4:	7828      	ldrb	r0, [r5, #0]
   1b5e6:	f001 fcd1 	bl	1cf8c <radio_filter_configure>
		radio_ar_configure(count, irks);
   1b5ea:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1b5ee:	4639      	mov	r1, r7
   1b5f0:	f001 fed0 	bl	1d394 <radio_ar_configure>
   1b5f4:	e7b8      	b.n	1b568 <prepare_cb+0x98>
		err = lll_hfclock_off();
   1b5f6:	f7ff fae9 	bl	1abcc <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1b5fa:	2800      	cmp	r0, #0
   1b5fc:	db64      	blt.n	1b6c8 <prepare_cb+0x1f8>
		lll_done(NULL);
   1b5fe:	2000      	movs	r0, #0
   1b600:	f7ff f95a 	bl	1a8b8 <lll_done>
}
   1b604:	2000      	movs	r0, #0
   1b606:	b00d      	add	sp, #52	; 0x34
   1b608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1b60a:	483a      	ldr	r0, [pc, #232]	; (1b6f4 <prepare_cb+0x224>)
   1b60c:	4621      	mov	r1, r4
   1b60e:	f001 fb03 	bl	1cc18 <radio_isr_set>
		radio_disable();
   1b612:	f001 fc19 	bl	1ce48 <radio_disable>
}
   1b616:	2000      	movs	r0, #0
   1b618:	b00d      	add	sp, #52	; 0x34
   1b61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(!retval);
   1b61c:	4a36      	ldr	r2, [pc, #216]	; (1b6f8 <prepare_cb+0x228>)
   1b61e:	4937      	ldr	r1, [pc, #220]	; (1b6fc <prepare_cb+0x22c>)
   1b620:	4837      	ldr	r0, [pc, #220]	; (1b700 <prepare_cb+0x230>)
   1b622:	f240 1319 	movw	r3, #281	; 0x119
   1b626:	f005 f9da 	bl	209de <printk>
   1b62a:	4040      	eors	r0, r0
   1b62c:	f380 8811 	msr	BASEPRI, r0
   1b630:	f04f 0003 	mov.w	r0, #3
   1b634:	df02      	svc	2
   1b636:	e7c0      	b.n	1b5ba <prepare_cb+0xea>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1b638:	4a32      	ldr	r2, [pc, #200]	; (1b704 <prepare_cb+0x234>)
   1b63a:	9207      	str	r2, [sp, #28]
   1b63c:	4a32      	ldr	r2, [pc, #200]	; (1b708 <prepare_cb+0x238>)
   1b63e:	9205      	str	r2, [sp, #20]
   1b640:	f44f 7282 	mov.w	r2, #260	; 0x104
   1b644:	9300      	str	r3, [sp, #0]
   1b646:	9208      	str	r2, [sp, #32]
   1b648:	462b      	mov	r3, r5
   1b64a:	e9cd 0003 	strd	r0, r0, [sp, #12]
   1b64e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b652:	9406      	str	r4, [sp, #24]
   1b654:	2203      	movs	r2, #3
   1b656:	f7f5 fa83 	bl	10b60 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b65a:	f030 0302 	bics.w	r3, r0, #2
   1b65e:	d0a2      	beq.n	1b5a6 <prepare_cb+0xd6>
   1b660:	4a25      	ldr	r2, [pc, #148]	; (1b6f8 <prepare_cb+0x228>)
   1b662:	492a      	ldr	r1, [pc, #168]	; (1b70c <prepare_cb+0x23c>)
   1b664:	4826      	ldr	r0, [pc, #152]	; (1b700 <prepare_cb+0x230>)
   1b666:	f240 1305 	movw	r3, #261	; 0x105
   1b66a:	f005 f9b8 	bl	209de <printk>
   1b66e:	4040      	eors	r0, r0
   1b670:	f380 8811 	msr	BASEPRI, r0
   1b674:	f04f 0003 	mov.w	r0, #3
   1b678:	df02      	svc	2
   1b67a:	e794      	b.n	1b5a6 <prepare_cb+0xd6>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b67c:	2001      	movs	r0, #1
   1b67e:	f7fe f9d1 	bl	19a24 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1b682:	7841      	ldrb	r1, [r0, #1]
   1b684:	1c82      	adds	r2, r0, #2
   1b686:	7800      	ldrb	r0, [r0, #0]
   1b688:	f001 fc80 	bl	1cf8c <radio_filter_configure>
   1b68c:	e76c      	b.n	1b568 <prepare_cb+0x98>
		LL_ASSERT(!ret);
   1b68e:	4a1a      	ldr	r2, [pc, #104]	; (1b6f8 <prepare_cb+0x228>)
   1b690:	491f      	ldr	r1, [pc, #124]	; (1b710 <prepare_cb+0x240>)
   1b692:	481b      	ldr	r0, [pc, #108]	; (1b700 <prepare_cb+0x230>)
   1b694:	f44f 738f 	mov.w	r3, #286	; 0x11e
   1b698:	f005 f9a1 	bl	209de <printk>
   1b69c:	4040      	eors	r0, r0
   1b69e:	f380 8811 	msr	BASEPRI, r0
   1b6a2:	f04f 0003 	mov.w	r0, #3
   1b6a6:	df02      	svc	2
}
   1b6a8:	2000      	movs	r0, #0
   1b6aa:	b00d      	add	sp, #52	; 0x34
   1b6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LL_ASSERT(node_rx);
   1b6ae:	4a12      	ldr	r2, [pc, #72]	; (1b6f8 <prepare_cb+0x228>)
   1b6b0:	4918      	ldr	r1, [pc, #96]	; (1b714 <prepare_cb+0x244>)
   1b6b2:	4813      	ldr	r0, [pc, #76]	; (1b700 <prepare_cb+0x230>)
   1b6b4:	23a9      	movs	r3, #169	; 0xa9
   1b6b6:	f005 f992 	bl	209de <printk>
   1b6ba:	4040      	eors	r0, r0
   1b6bc:	f380 8811 	msr	BASEPRI, r0
   1b6c0:	f04f 0003 	mov.w	r0, #3
   1b6c4:	df02      	svc	2
   1b6c6:	e727      	b.n	1b518 <prepare_cb+0x48>
		LL_ASSERT(err >= 0);
   1b6c8:	4a0b      	ldr	r2, [pc, #44]	; (1b6f8 <prepare_cb+0x228>)
   1b6ca:	4913      	ldr	r1, [pc, #76]	; (1b718 <prepare_cb+0x248>)
   1b6cc:	480c      	ldr	r0, [pc, #48]	; (1b700 <prepare_cb+0x230>)
   1b6ce:	238b      	movs	r3, #139	; 0x8b
   1b6d0:	f005 f985 	bl	209de <printk>
   1b6d4:	4040      	eors	r0, r0
   1b6d6:	f380 8811 	msr	BASEPRI, r0
   1b6da:	f04f 0003 	mov.w	r0, #3
   1b6de:	df02      	svc	2
   1b6e0:	e78d      	b.n	1b5fe <prepare_cb+0x12e>
   1b6e2:	bf00      	nop
   1b6e4:	8e89bed6 	.word	0x8e89bed6
   1b6e8:	00555555 	.word	0x00555555
   1b6ec:	00003f99 	.word	0x00003f99
   1b6f0:	20000c80 	.word	0x20000c80
   1b6f4:	0001ba79 	.word	0x0001ba79
   1b6f8:	00027f98 	.word	0x00027f98
   1b6fc:	000275ac 	.word	0x000275ac
   1b700:	000272c0 	.word	0x000272c0
   1b704:	0001b8dd 	.word	0x0001b8dd
   1b708:	0001b4b9 	.word	0x0001b4b9
   1b70c:	000276cc 	.word	0x000276cc
   1b710:	00027594 	.word	0x00027594
   1b714:	00027fe4 	.word	0x00027fe4
   1b718:	00027ee8 	.word	0x00027ee8

0001b71c <isr_common_done>:
{
   1b71c:	b530      	push	{r4, r5, lr}
   1b71e:	b083      	sub	sp, #12
   1b720:	4605      	mov	r5, r0
	lll_isr_status_reset();
   1b722:	f7ff f99d 	bl	1aa60 <lll_isr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b726:	2096      	movs	r0, #150	; 0x96
   1b728:	f001 fc82 	bl	1d030 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b72c:	2300      	movs	r3, #0
   1b72e:	4618      	mov	r0, r3
   1b730:	461a      	mov	r2, r3
   1b732:	4619      	mov	r1, r3
   1b734:	f001 fbf0 	bl	1cf18 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b738:	2001      	movs	r0, #1
   1b73a:	f7f8 fac9 	bl	13cd0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b73e:	4604      	mov	r4, r0
   1b740:	b1c8      	cbz	r0, 1b776 <isr_common_done+0x5a>
	radio_pkt_rx_set(node_rx->pdu);
   1b742:	f104 001c 	add.w	r0, r4, #28
   1b746:	f001 fb4b 	bl	1cde0 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1b74a:	f7fe fa0b 	bl	19b64 <ull_filter_lll_rl_enabled>
   1b74e:	b940      	cbnz	r0, 1b762 <isr_common_done+0x46>
	radio_rssi_measure();
   1b750:	f001 fbfa 	bl	1cf48 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1b754:	480f      	ldr	r0, [pc, #60]	; (1b794 <isr_common_done+0x78>)
   1b756:	4629      	mov	r1, r5
}
   1b758:	b003      	add	sp, #12
   1b75a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1b75e:	f001 ba5b 	b.w	1cc18 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b762:	f10d 0007 	add.w	r0, sp, #7
   1b766:	f7fe f867 	bl	19838 <ull_filter_lll_irks_get>
   1b76a:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1b76c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b770:	f001 fe10 	bl	1d394 <radio_ar_configure>
   1b774:	e7ec      	b.n	1b750 <isr_common_done+0x34>
	LL_ASSERT(node_rx);
   1b776:	4a08      	ldr	r2, [pc, #32]	; (1b798 <isr_common_done+0x7c>)
   1b778:	4908      	ldr	r1, [pc, #32]	; (1b79c <isr_common_done+0x80>)
   1b77a:	4809      	ldr	r0, [pc, #36]	; (1b7a0 <isr_common_done+0x84>)
   1b77c:	f240 13fb 	movw	r3, #507	; 0x1fb
   1b780:	f005 f92d 	bl	209de <printk>
   1b784:	4040      	eors	r0, r0
   1b786:	f380 8811 	msr	BASEPRI, r0
   1b78a:	f04f 0003 	mov.w	r0, #3
   1b78e:	df02      	svc	2
   1b790:	e7d7      	b.n	1b742 <isr_common_done+0x26>
   1b792:	bf00      	nop
   1b794:	00003f99 	.word	0x00003f99
   1b798:	00027f98 	.word	0x00027f98
   1b79c:	00027fe4 	.word	0x00027fe4
   1b7a0:	000272c0 	.word	0x000272c0

0001b7a4 <isr_done>:
{
   1b7a4:	b510      	push	{r4, lr}
   1b7a6:	4604      	mov	r4, r0
	isr_common_done(param);
   1b7a8:	f7ff ffb8 	bl	1b71c <isr_common_done>
	lll->state = 0U;
   1b7ac:	7da3      	ldrb	r3, [r4, #22]
   1b7ae:	f36f 0300 	bfc	r3, #0, #1
   1b7b2:	75a3      	strb	r3, [r4, #22]
	radio_rx_enable();
   1b7b4:	f001 fb3c 	bl	1ce30 <radio_rx_enable>
}
   1b7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   1b7bc:	f001 bd2c 	b.w	1d218 <radio_tmr_end_capture>

0001b7c0 <isr_tx>:
{
   1b7c0:	b570      	push	{r4, r5, r6, lr}
   1b7c2:	b082      	sub	sp, #8
   1b7c4:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1b7c6:	f7ff f939 	bl	1aa3c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b7ca:	2096      	movs	r0, #150	; 0x96
   1b7cc:	f001 fc30 	bl	1d030 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b7d0:	2300      	movs	r3, #0
   1b7d2:	4618      	mov	r0, r3
   1b7d4:	461a      	mov	r2, r3
   1b7d6:	4619      	mov	r1, r3
   1b7d8:	f001 fb9e 	bl	1cf18 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b7dc:	2001      	movs	r0, #1
   1b7de:	f7f8 fa77 	bl	13cd0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b7e2:	4604      	mov	r4, r0
   1b7e4:	2800      	cmp	r0, #0
   1b7e6:	d03e      	beq.n	1b866 <isr_tx+0xa6>
	radio_pkt_rx_set(node_rx->pdu);
   1b7e8:	f104 001c 	add.w	r0, r4, #28
   1b7ec:	f001 faf8 	bl	1cde0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1b7f0:	f001 fb4a 	bl	1ce88 <radio_is_ready>
   1b7f4:	b9e0      	cbnz	r0, 1b830 <isr_tx+0x70>
	if (ull_filter_lll_rl_enabled()) {
   1b7f6:	f7fe f9b5 	bl	19b64 <ull_filter_lll_rl_enabled>
   1b7fa:	bb50      	cbnz	r0, 1b852 <isr_tx+0x92>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b7fc:	f001 fd1a 	bl	1d234 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1b800:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b802:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b804:	4608      	mov	r0, r1
   1b806:	f001 fb05 	bl	1ce14 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b80a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b80c:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b80e:	4608      	mov	r0, r1
   1b810:	f001 fafc 	bl	1ce0c <radio_tx_chain_delay_get>
   1b814:	4434      	add	r4, r6
   1b816:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b818:	1a20      	subs	r0, r4, r0
   1b81a:	f001 fcc3 	bl	1d1a4 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1b81e:	f001 fb93 	bl	1cf48 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1b822:	4818      	ldr	r0, [pc, #96]	; (1b884 <isr_tx+0xc4>)
   1b824:	4629      	mov	r1, r5
}
   1b826:	b002      	add	sp, #8
   1b828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1b82c:	f001 b9f4 	b.w	1cc18 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   1b830:	4a15      	ldr	r2, [pc, #84]	; (1b888 <isr_tx+0xc8>)
   1b832:	4916      	ldr	r1, [pc, #88]	; (1b88c <isr_tx+0xcc>)
   1b834:	4816      	ldr	r0, [pc, #88]	; (1b890 <isr_tx+0xd0>)
   1b836:	f240 13d1 	movw	r3, #465	; 0x1d1
   1b83a:	f005 f8d0 	bl	209de <printk>
   1b83e:	4040      	eors	r0, r0
   1b840:	f380 8811 	msr	BASEPRI, r0
   1b844:	f04f 0003 	mov.w	r0, #3
   1b848:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1b84a:	f7fe f98b 	bl	19b64 <ull_filter_lll_rl_enabled>
   1b84e:	2800      	cmp	r0, #0
   1b850:	d0d4      	beq.n	1b7fc <isr_tx+0x3c>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b852:	f10d 0007 	add.w	r0, sp, #7
   1b856:	f7fd ffef 	bl	19838 <ull_filter_lll_irks_get>
   1b85a:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1b85c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b860:	f001 fd98 	bl	1d394 <radio_ar_configure>
   1b864:	e7ca      	b.n	1b7fc <isr_tx+0x3c>
	LL_ASSERT(node_rx);
   1b866:	4a08      	ldr	r2, [pc, #32]	; (1b888 <isr_tx+0xc8>)
   1b868:	490a      	ldr	r1, [pc, #40]	; (1b894 <isr_tx+0xd4>)
   1b86a:	4809      	ldr	r0, [pc, #36]	; (1b890 <isr_tx+0xd0>)
   1b86c:	f240 13cd 	movw	r3, #461	; 0x1cd
   1b870:	f005 f8b5 	bl	209de <printk>
   1b874:	4040      	eors	r0, r0
   1b876:	f380 8811 	msr	BASEPRI, r0
   1b87a:	f04f 0003 	mov.w	r0, #3
   1b87e:	df02      	svc	2
   1b880:	e7b2      	b.n	1b7e8 <isr_tx+0x28>
   1b882:	bf00      	nop
   1b884:	00003f99 	.word	0x00003f99
   1b888:	00027f98 	.word	0x00027f98
   1b88c:	00027f60 	.word	0x00027f60
   1b890:	000272c0 	.word	0x000272c0
   1b894:	00027fe4 	.word	0x00027fe4

0001b898 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1b898:	68c3      	ldr	r3, [r0, #12]
{
   1b89a:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1b89c:	681e      	ldr	r6, [r3, #0]
{
   1b89e:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b8a0:	f7f5 fa6c 	bl	10d7c <ticker_ticks_now_get>
   1b8a4:	4605      	mov	r5, r0
   1b8a6:	4630      	mov	r0, r6
   1b8a8:	f7ff f866 	bl	1a978 <lll_evt_offset_get>
	p->remainder = 0;
   1b8ac:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b8ae:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1b8b0:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1b8b4:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1b8b6:	4620      	mov	r0, r4
}
   1b8b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1b8bc:	f7ff be08 	b.w	1b4d0 <prepare_cb>

0001b8c0 <isr_window>:
{
   1b8c0:	b508      	push	{r3, lr}
	isr_common_done(param);
   1b8c2:	f7ff ff2b 	bl	1b71c <isr_common_done>
	ticks_at_start = ticker_ticks_now_get() +
   1b8c6:	f7f5 fa59 	bl	10d7c <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   1b8ca:	1cc1      	adds	r1, r0, #3
   1b8cc:	2000      	movs	r0, #0
   1b8ce:	f001 fc25 	bl	1d11c <radio_tmr_start_tick>
}
   1b8d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1b8d6:	f001 bc9f 	b.w	1d218 <radio_tmr_end_capture>
   1b8da:	bf00      	nop

0001b8dc <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b8dc:	b900      	cbnz	r0, 1b8e0 <ticker_op_start_cb+0x4>
   1b8de:	4770      	bx	lr
{
   1b8e0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b8e2:	4a07      	ldr	r2, [pc, #28]	; (1b900 <ticker_op_start_cb+0x24>)
   1b8e4:	4907      	ldr	r1, [pc, #28]	; (1b904 <ticker_op_start_cb+0x28>)
   1b8e6:	4808      	ldr	r0, [pc, #32]	; (1b908 <ticker_op_start_cb+0x2c>)
   1b8e8:	f44f 73bd 	mov.w	r3, #378	; 0x17a
   1b8ec:	f005 f877 	bl	209de <printk>
   1b8f0:	4040      	eors	r0, r0
   1b8f2:	f380 8811 	msr	BASEPRI, r0
   1b8f6:	f04f 0003 	mov.w	r0, #3
   1b8fa:	df02      	svc	2
}
   1b8fc:	bd08      	pop	{r3, pc}
   1b8fe:	bf00      	nop
   1b900:	00027f98 	.word	0x00027f98
   1b904:	0002785c 	.word	0x0002785c
   1b908:	000272c0 	.word	0x000272c0

0001b90c <abort_cb>:
{
   1b90c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b90e:	b1d8      	cbz	r0, 1b948 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1b910:	460c      	mov	r4, r1
   1b912:	f7ff f95b 	bl	1abcc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b916:	2800      	cmp	r0, #0
   1b918:	db04      	blt.n	1b924 <abort_cb+0x18>
	lll_done(param);
   1b91a:	4620      	mov	r0, r4
}
   1b91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b920:	f7fe bfca 	b.w	1a8b8 <lll_done>
	LL_ASSERT(err >= 0);
   1b924:	4a0c      	ldr	r2, [pc, #48]	; (1b958 <abort_cb+0x4c>)
   1b926:	490d      	ldr	r1, [pc, #52]	; (1b95c <abort_cb+0x50>)
   1b928:	480d      	ldr	r0, [pc, #52]	; (1b960 <abort_cb+0x54>)
   1b92a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
   1b92e:	f005 f856 	bl	209de <printk>
   1b932:	4040      	eors	r0, r0
   1b934:	f380 8811 	msr	BASEPRI, r0
   1b938:	f04f 0003 	mov.w	r0, #3
   1b93c:	df02      	svc	2
	lll_done(param);
   1b93e:	4620      	mov	r0, r4
}
   1b940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b944:	f7fe bfb8 	b.w	1a8b8 <lll_done>
			radio_isr_set(isr_abort, param);
   1b948:	4806      	ldr	r0, [pc, #24]	; (1b964 <abort_cb+0x58>)
   1b94a:	f001 f965 	bl	1cc18 <radio_isr_set>
}
   1b94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1b952:	f001 ba79 	b.w	1ce48 <radio_disable>
   1b956:	bf00      	nop
   1b958:	00027f98 	.word	0x00027f98
   1b95c:	00027ee8 	.word	0x00027ee8
   1b960:	000272c0 	.word	0x000272c0
   1b964:	0001ba79 	.word	0x0001ba79

0001b968 <is_abort_cb>:
	if (next != curr) {
   1b968:	4282      	cmp	r2, r0
{
   1b96a:	b510      	push	{r4, lr}
	if (next != curr) {
   1b96c:	d11b      	bne.n	1b9a6 <is_abort_cb+0x3e>
	radio_isr_set(isr_window, lll);
   1b96e:	4614      	mov	r4, r2
   1b970:	481b      	ldr	r0, [pc, #108]	; (1b9e0 <is_abort_cb+0x78>)
   1b972:	4611      	mov	r1, r2
   1b974:	f001 f950 	bl	1cc18 <radio_isr_set>
	radio_disable();
   1b978:	f001 fa66 	bl	1ce48 <radio_disable>
	if (++lll->chan == 3U) {
   1b97c:	7da3      	ldrb	r3, [r4, #22]
   1b97e:	f3c3 0041 	ubfx	r0, r3, #1, #2
   1b982:	3001      	adds	r0, #1
   1b984:	f000 0003 	and.w	r0, r0, #3
   1b988:	2803      	cmp	r0, #3
   1b98a:	d007      	beq.n	1b99c <is_abort_cb+0x34>
   1b98c:	f360 0342 	bfi	r3, r0, #1, #2
   1b990:	75a3      	strb	r3, [r4, #22]
	lll_chan_set(37 + lll->chan);
   1b992:	3025      	adds	r0, #37	; 0x25
   1b994:	f7ff f80c 	bl	1a9b0 <lll_chan_set>
	return 0;
   1b998:	2000      	movs	r0, #0
}
   1b99a:	bd10      	pop	{r4, pc}
		lll->chan = 0U;
   1b99c:	f36f 0342 	bfc	r3, #1, #2
   1b9a0:	75a3      	strb	r3, [r4, #22]
   1b9a2:	2025      	movs	r0, #37	; 0x25
   1b9a4:	e7f6      	b.n	1b994 <is_abort_cb+0x2c>
		*resume_cb = resume_prepare_cb;
   1b9a6:	490f      	ldr	r1, [pc, #60]	; (1b9e4 <is_abort_cb+0x7c>)
   1b9a8:	6019      	str	r1, [r3, #0]
		*resume_prio = 0; /* TODO: */
   1b9aa:	9b02      	ldr	r3, [sp, #8]
   1b9ac:	2200      	movs	r2, #0
   1b9ae:	601a      	str	r2, [r3, #0]
		err = lll_hfclock_on();
   1b9b0:	f7ff f8f4 	bl	1ab9c <lll_hfclock_on>
		LL_ASSERT(err >= 0);
   1b9b4:	2800      	cmp	r0, #0
   1b9b6:	db02      	blt.n	1b9be <is_abort_cb+0x56>
   1b9b8:	f06f 000a 	mvn.w	r0, #10
}
   1b9bc:	bd10      	pop	{r4, pc}
		LL_ASSERT(err >= 0);
   1b9be:	4a0a      	ldr	r2, [pc, #40]	; (1b9e8 <is_abort_cb+0x80>)
   1b9c0:	490a      	ldr	r1, [pc, #40]	; (1b9ec <is_abort_cb+0x84>)
   1b9c2:	480b      	ldr	r0, [pc, #44]	; (1b9f0 <is_abort_cb+0x88>)
   1b9c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
   1b9c8:	f005 f809 	bl	209de <printk>
   1b9cc:	4040      	eors	r0, r0
   1b9ce:	f380 8811 	msr	BASEPRI, r0
   1b9d2:	f04f 0003 	mov.w	r0, #3
   1b9d6:	df02      	svc	2
   1b9d8:	f06f 000a 	mvn.w	r0, #10
}
   1b9dc:	bd10      	pop	{r4, pc}
   1b9de:	bf00      	nop
   1b9e0:	0001b8c1 	.word	0x0001b8c1
   1b9e4:	0001b899 	.word	0x0001b899
   1b9e8:	00027f98 	.word	0x00027f98
   1b9ec:	00027ee8 	.word	0x00027ee8
   1b9f0:	000272c0 	.word	0x000272c0

0001b9f4 <isr_cleanup>:
{
   1b9f4:	b538      	push	{r3, r4, r5, lr}
   1b9f6:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   1b9f8:	f7fe ffb2 	bl	1a960 <lll_is_done>
   1b9fc:	b100      	cbz	r0, 1ba00 <isr_cleanup+0xc>
}
   1b9fe:	bd38      	pop	{r3, r4, r5, pc}
	radio_filter_disable();
   1ba00:	4605      	mov	r5, r0
   1ba02:	f001 fae3 	bl	1cfcc <radio_filter_disable>
	if (++lll->chan == 3U) {
   1ba06:	7da2      	ldrb	r2, [r4, #22]
   1ba08:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1ba0c:	3301      	adds	r3, #1
   1ba0e:	f003 0303 	and.w	r3, r3, #3
   1ba12:	2b03      	cmp	r3, #3
   1ba14:	bf14      	ite	ne
   1ba16:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1ba1a:	f365 0242 	bfieq	r2, r5, #1, #2
   1ba1e:	75a2      	strb	r2, [r4, #22]
	lll_isr_cleanup(param);
   1ba20:	4620      	mov	r0, r4
}
   1ba22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1ba26:	f7ff b829 	b.w	1aa7c <lll_isr_cleanup>
   1ba2a:	bf00      	nop

0001ba2c <isr_rx_scan_report.constprop.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba2e:	4607      	mov	r7, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1ba30:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1ba32:	460e      	mov	r6, r1
   1ba34:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   1ba36:	f7f8 f94b 	bl	13cd0 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1ba3a:	b1c8      	cbz	r0, 1ba70 <isr_rx_scan_report.constprop.0+0x44>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   1ba3c:	4604      	mov	r4, r0
   1ba3e:	f7f8 f965 	bl	13d0c <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1ba42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ba46:	80e3      	strh	r3, [r4, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1ba48:	2304      	movs	r3, #4
   1ba4a:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1ba4c:	b95f      	cbnz	r7, 1ba66 <isr_rx_scan_report.constprop.0+0x3a>
   1ba4e:	237f      	movs	r3, #127	; 0x7f
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1ba50:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1ba52:	7623      	strb	r3, [r4, #24]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1ba54:	4621      	mov	r1, r4
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   1ba56:	76a6      	strb	r6, [r4, #26]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1ba58:	76e5      	strb	r5, [r4, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1ba5a:	f7f8 f96d 	bl	13d38 <ull_rx_put>
	ull_rx_sched();
   1ba5e:	f7f8 f97b 	bl	13d58 <ull_rx_sched>

	return 0;
   1ba62:	2000      	movs	r0, #0
}
   1ba64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				   (radio_rssi_get() & 0x7f)
   1ba66:	f001 fa79 	bl	1cf5c <radio_rssi_get>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1ba6a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ba6e:	e7ef      	b.n	1ba50 <isr_rx_scan_report.constprop.0+0x24>
		return -ENOBUFS;
   1ba70:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1ba74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba76:	bf00      	nop

0001ba78 <isr_abort>:
{
   1ba78:	b530      	push	{r4, r5, lr}
   1ba7a:	b083      	sub	sp, #12
   1ba7c:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1ba7e:	f7fe ffef 	bl	1aa60 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1ba82:	2300      	movs	r3, #0
   1ba84:	2203      	movs	r2, #3
   1ba86:	4619      	mov	r1, r3
   1ba88:	9300      	str	r3, [sp, #0]
   1ba8a:	4618      	mov	r0, r3
   1ba8c:	f7f5 f8d6 	bl	10c3c <ticker_stop>
	radio_disable();
   1ba90:	f001 f9da 	bl	1ce48 <radio_disable>
	if (lll_is_done(param)) {
   1ba94:	4620      	mov	r0, r4
   1ba96:	f7fe ff63 	bl	1a960 <lll_is_done>
   1ba9a:	b108      	cbz	r0, 1baa0 <isr_abort+0x28>
}
   1ba9c:	b003      	add	sp, #12
   1ba9e:	bd30      	pop	{r4, r5, pc}
	radio_filter_disable();
   1baa0:	4605      	mov	r5, r0
   1baa2:	f001 fa93 	bl	1cfcc <radio_filter_disable>
	if (++lll->chan == 3U) {
   1baa6:	7da2      	ldrb	r2, [r4, #22]
   1baa8:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1baac:	3301      	adds	r3, #1
   1baae:	f003 0303 	and.w	r3, r3, #3
   1bab2:	2b03      	cmp	r3, #3
   1bab4:	bf14      	ite	ne
   1bab6:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1baba:	f365 0242 	bfieq	r2, r5, #1, #2
	lll_isr_cleanup(param);
   1babe:	4620      	mov	r0, r4
		lll->chan = 0U;
   1bac0:	75a2      	strb	r2, [r4, #22]
}
   1bac2:	b003      	add	sp, #12
   1bac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   1bac8:	f7fe bfd8 	b.w	1aa7c <lll_isr_cleanup>

0001bacc <lll_scan_init>:
}
   1bacc:	2000      	movs	r0, #0
   1bace:	4770      	bx	lr

0001bad0 <lll_scan_reset>:
   1bad0:	2000      	movs	r0, #0
   1bad2:	4770      	bx	lr

0001bad4 <lll_scan_prepare>:
{
   1bad4:	b510      	push	{r4, lr}
   1bad6:	b082      	sub	sp, #8
   1bad8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1bada:	f7ff f85f 	bl	1ab9c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1bade:	2800      	cmp	r0, #0
   1bae0:	db19      	blt.n	1bb16 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   1bae2:	4a13      	ldr	r2, [pc, #76]	; (1bb30 <lll_scan_prepare+0x5c>)
   1bae4:	4913      	ldr	r1, [pc, #76]	; (1bb34 <lll_scan_prepare+0x60>)
   1bae6:	4814      	ldr	r0, [pc, #80]	; (1bb38 <lll_scan_prepare+0x64>)
   1bae8:	9400      	str	r4, [sp, #0]
   1baea:	2300      	movs	r3, #0
   1baec:	f7fe fe58 	bl	1a7a0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1baf0:	b108      	cbz	r0, 1baf6 <lll_scan_prepare+0x22>
   1baf2:	3077      	adds	r0, #119	; 0x77
   1baf4:	d101      	bne.n	1bafa <lll_scan_prepare+0x26>
}
   1baf6:	b002      	add	sp, #8
   1baf8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bafa:	4a10      	ldr	r2, [pc, #64]	; (1bb3c <lll_scan_prepare+0x68>)
   1bafc:	4910      	ldr	r1, [pc, #64]	; (1bb40 <lll_scan_prepare+0x6c>)
   1bafe:	4811      	ldr	r0, [pc, #68]	; (1bb44 <lll_scan_prepare+0x70>)
   1bb00:	2370      	movs	r3, #112	; 0x70
   1bb02:	f004 ff6c 	bl	209de <printk>
   1bb06:	4040      	eors	r0, r0
   1bb08:	f380 8811 	msr	BASEPRI, r0
   1bb0c:	f04f 0003 	mov.w	r0, #3
   1bb10:	df02      	svc	2
}
   1bb12:	b002      	add	sp, #8
   1bb14:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1bb16:	4a09      	ldr	r2, [pc, #36]	; (1bb3c <lll_scan_prepare+0x68>)
   1bb18:	490b      	ldr	r1, [pc, #44]	; (1bb48 <lll_scan_prepare+0x74>)
   1bb1a:	480a      	ldr	r0, [pc, #40]	; (1bb44 <lll_scan_prepare+0x70>)
   1bb1c:	236d      	movs	r3, #109	; 0x6d
   1bb1e:	f004 ff5e 	bl	209de <printk>
   1bb22:	4040      	eors	r0, r0
   1bb24:	f380 8811 	msr	BASEPRI, r0
   1bb28:	f04f 0003 	mov.w	r0, #3
   1bb2c:	df02      	svc	2
   1bb2e:	e7d8      	b.n	1bae2 <lll_scan_prepare+0xe>
   1bb30:	0001b4d1 	.word	0x0001b4d1
   1bb34:	0001b90d 	.word	0x0001b90d
   1bb38:	0001b969 	.word	0x0001b969
   1bb3c:	00027f98 	.word	0x00027f98
   1bb40:	00027f74 	.word	0x00027f74
   1bb44:	000272c0 	.word	0x000272c0
   1bb48:	00027ee8 	.word	0x00027ee8

0001bb4c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb4e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1bb50:	f7fe ff86 	bl	1aa60 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1bb54:	f7f8 f97c 	bl	13e50 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1bb58:	4604      	mov	r4, r0
   1bb5a:	2800      	cmp	r0, #0
   1bb5c:	d033      	beq.n	1bbc6 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1bb5e:	4b21      	ldr	r3, [pc, #132]	; (1bbe4 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1bb60:	4921      	ldr	r1, [pc, #132]	; (1bbe8 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1bb62:	4a22      	ldr	r2, [pc, #136]	; (1bbec <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1bb64:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1bb66:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   1bb68:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   1bb6a:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1bb6c:	2001      	movs	r0, #1
   1bb6e:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   1bb70:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1bb72:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1bb74:	b11b      	cbz	r3, 1bb7e <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1bb76:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1bb7a:	2b00      	cmp	r3, #0
   1bb7c:	db04      	blt.n	1bb88 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1bb7e:	4628      	mov	r0, r5
}
   1bb80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1bb84:	f7fe bf7a 	b.w	1aa7c <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1bb88:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
   1bb8c:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1bb90:	2b02      	cmp	r3, #2
   1bb92:	d016      	beq.n	1bbc2 <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1bb94:	2b04      	cmp	r3, #4
   1bb96:	bf14      	ite	ne
   1bb98:	2728      	movne	r7, #40	; 0x28
   1bb9a:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1bb9e:	f001 fb2f 	bl	1d200 <radio_tmr_aa_restore>
   1bba2:	4606      	mov	r6, r0
   1bba4:	f001 fb32 	bl	1d20c <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   1bba8:	6bab      	ldr	r3, [r5, #56]	; 0x38
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   1bbaa:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1bbac:	1a36      	subs	r6, r6, r0
			e->slave.window_widening_event_us =
   1bbae:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1bbb2:	2300      	movs	r3, #0
   1bbb4:	63ab      	str	r3, [r5, #56]	; 0x38
			lll->slave.window_size_event_us = 0;
   1bbb6:	642b      	str	r3, [r5, #64]	; 0x40
	lll_isr_cleanup(param);
   1bbb8:	4628      	mov	r0, r5
}
   1bbba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1bbbe:	f7fe bf5d 	b.w	1aa7c <lll_isr_cleanup>
	switch (phy) {
   1bbc2:	2718      	movs	r7, #24
   1bbc4:	e7eb      	b.n	1bb9e <isr_done+0x52>
	LL_ASSERT(e);
   1bbc6:	4a0a      	ldr	r2, [pc, #40]	; (1bbf0 <isr_done+0xa4>)
   1bbc8:	490a      	ldr	r1, [pc, #40]	; (1bbf4 <isr_done+0xa8>)
   1bbca:	480b      	ldr	r0, [pc, #44]	; (1bbf8 <isr_done+0xac>)
   1bbcc:	f240 235d 	movw	r3, #605	; 0x25d
   1bbd0:	f004 ff05 	bl	209de <printk>
   1bbd4:	4040      	eors	r0, r0
   1bbd6:	f380 8811 	msr	BASEPRI, r0
   1bbda:	f04f 0003 	mov.w	r0, #3
   1bbde:	df02      	svc	2
   1bbe0:	e7bd      	b.n	1bb5e <isr_done+0x12>
   1bbe2:	bf00      	nop
   1bbe4:	2000363c 	.word	0x2000363c
   1bbe8:	20003bc7 	.word	0x20003bc7
   1bbec:	20003bc8 	.word	0x20003bc8
   1bbf0:	00028000 	.word	0x00028000
   1bbf4:	00027710 	.word	0x00027710
   1bbf8:	000272c0 	.word	0x000272c0

0001bbfc <lll_conn_init>:
}
   1bbfc:	2000      	movs	r0, #0
   1bbfe:	4770      	bx	lr

0001bc00 <lll_conn_reset>:
   1bc00:	2000      	movs	r0, #0
   1bc02:	4770      	bx	lr

0001bc04 <lll_conn_sca_local_get>:
}
   1bc04:	2007      	movs	r0, #7
   1bc06:	4770      	bx	lr

0001bc08 <lll_conn_ppm_local_get>:
}
   1bc08:	2014      	movs	r0, #20
   1bc0a:	4770      	bx	lr

0001bc0c <lll_conn_ppm_get>:
	return sca_ppm_lut[sca];
   1bc0c:	4b01      	ldr	r3, [pc, #4]	; (1bc14 <lll_conn_ppm_get+0x8>)
}
   1bc0e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1bc12:	4770      	bx	lr
   1bc14:	00028080 	.word	0x00028080

0001bc18 <lll_conn_prepare_reset>:
	crc_expire = 0U;
   1bc18:	4805      	ldr	r0, [pc, #20]	; (1bc30 <lll_conn_prepare_reset+0x18>)
	crc_valid = 0U;
   1bc1a:	4906      	ldr	r1, [pc, #24]	; (1bc34 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1bc1c:	4a06      	ldr	r2, [pc, #24]	; (1bc38 <lll_conn_prepare_reset+0x20>)
{
   1bc1e:	b410      	push	{r4}
	trx_cnt = 0U;
   1bc20:	2300      	movs	r3, #0
   1bc22:	4c06      	ldr	r4, [pc, #24]	; (1bc3c <lll_conn_prepare_reset+0x24>)
	crc_expire = 0U;
   1bc24:	7003      	strb	r3, [r0, #0]
	crc_valid = 0U;
   1bc26:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1bc28:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1bc2a:	8023      	strh	r3, [r4, #0]
}
   1bc2c:	bc10      	pop	{r4}
   1bc2e:	4770      	bx	lr
   1bc30:	20003bc6 	.word	0x20003bc6
   1bc34:	20003bc7 	.word	0x20003bc7
   1bc38:	20003bc8 	.word	0x20003bc8
   1bc3c:	2000363c 	.word	0x2000363c

0001bc40 <lll_conn_abort_cb>:
{
   1bc40:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1bc42:	b1d0      	cbz	r0, 1bc7a <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   1bc44:	460c      	mov	r4, r1
   1bc46:	f7fe ffc1 	bl	1abcc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1bc4a:	2800      	cmp	r0, #0
   1bc4c:	db04      	blt.n	1bc58 <lll_conn_abort_cb+0x18>
	lll_done(param);
   1bc4e:	4620      	mov	r0, r4
}
   1bc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1bc54:	f7fe be30 	b.w	1a8b8 <lll_done>
	LL_ASSERT(err >= 0);
   1bc58:	4a0b      	ldr	r2, [pc, #44]	; (1bc88 <lll_conn_abort_cb+0x48>)
   1bc5a:	490c      	ldr	r1, [pc, #48]	; (1bc8c <lll_conn_abort_cb+0x4c>)
   1bc5c:	480c      	ldr	r0, [pc, #48]	; (1bc90 <lll_conn_abort_cb+0x50>)
   1bc5e:	237c      	movs	r3, #124	; 0x7c
   1bc60:	f004 febd 	bl	209de <printk>
   1bc64:	4040      	eors	r0, r0
   1bc66:	f380 8811 	msr	BASEPRI, r0
   1bc6a:	f04f 0003 	mov.w	r0, #3
   1bc6e:	df02      	svc	2
	lll_done(param);
   1bc70:	4620      	mov	r0, r4
}
   1bc72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1bc76:	f7fe be1f 	b.w	1a8b8 <lll_done>
		radio_isr_set(isr_done, param);
   1bc7a:	4806      	ldr	r0, [pc, #24]	; (1bc94 <lll_conn_abort_cb+0x54>)
   1bc7c:	f000 ffcc 	bl	1cc18 <radio_isr_set>
}
   1bc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1bc84:	f001 b8e0 	b.w	1ce48 <radio_disable>
   1bc88:	00028000 	.word	0x00028000
   1bc8c:	00027ee8 	.word	0x00027ee8
   1bc90:	000272c0 	.word	0x000272c0
   1bc94:	0001bb4d 	.word	0x0001bb4d

0001bc98 <lll_conn_rx_pkt_set>:
{
   1bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc9a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bc9c:	2001      	movs	r0, #1
   1bc9e:	f7f8 f817 	bl	13cd0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bca2:	4606      	mov	r6, r0
   1bca4:	b368      	cbz	r0, 1bd02 <lll_conn_rx_pkt_set+0x6a>
	phy = lll->phy_rx;
   1bca6:	f895 404d 	ldrb.w	r4, [r5, #77]	; 0x4d
	max_rx_octets = lll->max_rx_octets;
   1bcaa:	f8b5 7046 	ldrh.w	r7, [r5, #70]	; 0x46
	phy = lll->phy_rx;
   1bcae:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1bcb2:	2100      	movs	r1, #0
   1bcb4:	4620      	mov	r0, r4
   1bcb6:	f000 fff5 	bl	1cca4 <radio_phy_set>
	} else if (lll->enc_rx) {
   1bcba:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
   1bcbe:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1bcc0:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   1bcc4:	d511      	bpl.n	1bcea <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1bcc6:	1d39      	adds	r1, r7, #4
   1bcc8:	f042 0201 	orr.w	r2, r2, #1
   1bccc:	b2c9      	uxtb	r1, r1
   1bcce:	2008      	movs	r0, #8
   1bcd0:	f001 f852 	bl	1cd78 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1bcd4:	f106 021c 	add.w	r2, r6, #28
   1bcd8:	4621      	mov	r1, r4
   1bcda:	f105 0067 	add.w	r0, r5, #103	; 0x67
   1bcde:	f001 faaf 	bl	1d240 <radio_ccm_rx_pkt_set>
}
   1bce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1bce6:	f001 b87b 	b.w	1cde0 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1bcea:	2008      	movs	r0, #8
   1bcec:	b2f9      	uxtb	r1, r7
   1bcee:	f042 0201 	orr.w	r2, r2, #1
   1bcf2:	f001 f841 	bl	1cd78 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1bcf6:	f106 001c 	add.w	r0, r6, #28
}
   1bcfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1bcfe:	f001 b86f 	b.w	1cde0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1bd02:	4a07      	ldr	r2, [pc, #28]	; (1bd20 <lll_conn_rx_pkt_set+0x88>)
   1bd04:	4907      	ldr	r1, [pc, #28]	; (1bd24 <lll_conn_rx_pkt_set+0x8c>)
   1bd06:	4808      	ldr	r0, [pc, #32]	; (1bd28 <lll_conn_rx_pkt_set+0x90>)
   1bd08:	f240 13d3 	movw	r3, #467	; 0x1d3
   1bd0c:	f004 fe67 	bl	209de <printk>
   1bd10:	4040      	eors	r0, r0
   1bd12:	f380 8811 	msr	BASEPRI, r0
   1bd16:	f04f 0003 	mov.w	r0, #3
   1bd1a:	df02      	svc	2
   1bd1c:	e7c3      	b.n	1bca6 <lll_conn_rx_pkt_set+0xe>
   1bd1e:	bf00      	nop
   1bd20:	00028000 	.word	0x00028000
   1bd24:	00027fe4 	.word	0x00027fe4
   1bd28:	000272c0 	.word	0x000272c0

0001bd2c <lll_conn_isr_tx>:
{
   1bd2c:	b538      	push	{r3, r4, r5, lr}
   1bd2e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1bd30:	f7fe fe84 	bl	1aa3c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bd34:	2096      	movs	r0, #150	; 0x96
   1bd36:	f001 f97b 	bl	1d030 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1bd3a:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1bd3e:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
   1bd42:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1bd46:	f000 0007 	and.w	r0, r0, #7
   1bd4a:	f002 0207 	and.w	r2, r2, #7
   1bd4e:	2100      	movs	r1, #0
   1bd50:	f001 f8e2 	bl	1cf18 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1bd54:	4620      	mov	r0, r4
   1bd56:	f7ff ff9f 	bl	1bc98 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1bd5a:	f001 f895 	bl	1ce88 <radio_is_ready>
   1bd5e:	2800      	cmp	r0, #0
   1bd60:	d13a      	bne.n	1bdd8 <lll_conn_isr_tx+0xac>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1bd62:	f001 fa67 	bl	1d234 <radio_tmr_tifs_base_get>
   1bd66:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bd68:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
   1bd6c:	2101      	movs	r1, #1
   1bd6e:	f000 0007 	and.w	r0, r0, #7
   1bd72:	f001 f84f 	bl	1ce14 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1bd76:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
   1bd7a:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bd7e:	4405      	add	r5, r0
   1bd80:	2b02      	cmp	r3, #2
   1bd82:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1bd86:	d025      	beq.n	1bdd4 <lll_conn_isr_tx+0xa8>
		return 376;
   1bd88:	2b04      	cmp	r3, #4
   1bd8a:	bf14      	ite	ne
   1bd8c:	2328      	movne	r3, #40	; 0x28
   1bd8e:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1bd92:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   1bd96:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1bd9a:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1bd9e:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1bda0:	f001 f834 	bl	1ce0c <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1bda4:	1a28      	subs	r0, r5, r0
   1bda6:	f001 f9fd 	bl	1d1a4 <radio_tmr_hcto_configure>
	if (!trx_cnt && !lll->role) {
   1bdaa:	4b12      	ldr	r3, [pc, #72]	; (1bdf4 <lll_conn_isr_tx+0xc8>)
   1bdac:	881b      	ldrh	r3, [r3, #0]
   1bdae:	b91b      	cbnz	r3, 1bdb8 <lll_conn_isr_tx+0x8c>
   1bdb0:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1bdb4:	2b00      	cmp	r3, #0
   1bdb6:	da05      	bge.n	1bdc4 <lll_conn_isr_tx+0x98>
	radio_isr_set(lll_conn_isr_rx, param);
   1bdb8:	4621      	mov	r1, r4
   1bdba:	480f      	ldr	r0, [pc, #60]	; (1bdf8 <lll_conn_isr_tx+0xcc>)
}
   1bdbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1bdc0:	f000 bf2a 	b.w	1cc18 <radio_isr_set>
		radio_rssi_measure();
   1bdc4:	f001 f8c0 	bl	1cf48 <radio_rssi_measure>
	radio_isr_set(lll_conn_isr_rx, param);
   1bdc8:	4621      	mov	r1, r4
   1bdca:	480b      	ldr	r0, [pc, #44]	; (1bdf8 <lll_conn_isr_tx+0xcc>)
}
   1bdcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1bdd0:	f000 bf22 	b.w	1cc18 <radio_isr_set>
	switch (phy) {
   1bdd4:	2318      	movs	r3, #24
   1bdd6:	e7dc      	b.n	1bd92 <lll_conn_isr_tx+0x66>
	LL_ASSERT(!radio_is_ready());
   1bdd8:	4a08      	ldr	r2, [pc, #32]	; (1bdfc <lll_conn_isr_tx+0xd0>)
   1bdda:	4909      	ldr	r1, [pc, #36]	; (1be00 <lll_conn_isr_tx+0xd4>)
   1bddc:	4809      	ldr	r0, [pc, #36]	; (1be04 <lll_conn_isr_tx+0xd8>)
   1bdde:	f240 139f 	movw	r3, #415	; 0x19f
   1bde2:	f004 fdfc 	bl	209de <printk>
   1bde6:	4040      	eors	r0, r0
   1bde8:	f380 8811 	msr	BASEPRI, r0
   1bdec:	f04f 0003 	mov.w	r0, #3
   1bdf0:	df02      	svc	2
   1bdf2:	e7b6      	b.n	1bd62 <lll_conn_isr_tx+0x36>
   1bdf4:	2000363c 	.word	0x2000363c
   1bdf8:	0001bf71 	.word	0x0001bf71
   1bdfc:	00028000 	.word	0x00028000
   1be00:	00027f60 	.word	0x00027f60
   1be04:	000272c0 	.word	0x000272c0

0001be08 <lll_conn_tx_pkt_set>:
{
   1be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be0a:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   1be0c:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
	max_tx_octets = lll->max_tx_octets;
   1be10:	f8b0 7044 	ldrh.w	r7, [r0, #68]	; 0x44
	phy = lll->phy_tx;
   1be14:	f001 0507 	and.w	r5, r1, #7
{
   1be18:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   1be1a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1be1e:	4628      	mov	r0, r5
   1be20:	f000 ff40 	bl	1cca4 <radio_phy_set>
	} else if (lll->enc_tx) {
   1be24:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1be28:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   1be2a:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   1be2e:	d50f      	bpl.n	1be50 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1be30:	1d39      	adds	r1, r7, #4
   1be32:	f042 0201 	orr.w	r2, r2, #1
   1be36:	b2c9      	uxtb	r1, r1
   1be38:	2008      	movs	r0, #8
   1be3a:	f000 ff9d 	bl	1cd78 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1be3e:	4631      	mov	r1, r6
   1be40:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1be44:	f001 fa52 	bl	1d2ec <radio_ccm_tx_pkt_set>
}
   1be48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1be4c:	f000 bfce 	b.w	1cdec <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1be50:	b2f9      	uxtb	r1, r7
   1be52:	2008      	movs	r0, #8
   1be54:	f042 0201 	orr.w	r2, r2, #1
   1be58:	f000 ff8e 	bl	1cd78 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1be5c:	4630      	mov	r0, r6
}
   1be5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1be62:	f000 bfc3 	b.w	1cdec <radio_pkt_tx_set>
   1be66:	bf00      	nop

0001be68 <lll_conn_pdu_tx_prep>:
{
   1be68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (lll->empty) {
   1be6c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
   1be70:	075a      	lsls	r2, r3, #29
{
   1be72:	b083      	sub	sp, #12
   1be74:	4604      	mov	r4, r0
   1be76:	4688      	mov	r8, r1
	if (lll->empty) {
   1be78:	d43d      	bmi.n	1bef6 <lll_conn_pdu_tx_prep+0x8e>
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1be7a:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1be7e:	aa01      	add	r2, sp, #4
   1be80:	f7f3 fb5c 	bl	f53c <memq_peek>
	if (!link) {
   1be84:	4681      	mov	r9, r0
   1be86:	2800      	cmp	r0, #0
   1be88:	d053      	beq.n	1bf32 <lll_conn_pdu_tx_prep+0xca>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1be8a:	9f01      	ldr	r7, [sp, #4]
   1be8c:	f894 6065 	ldrb.w	r6, [r4, #101]	; 0x65
		if (!lll->packet_tx_head_len) {
   1be90:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1be94:	3704      	adds	r7, #4
   1be96:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   1be98:	b913      	cbnz	r3, 1bea0 <lll_conn_pdu_tx_prep+0x38>
			lll->packet_tx_head_len = p->len;
   1be9a:	786b      	ldrb	r3, [r5, #1]
   1be9c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		if (lll->packet_tx_head_offset) {
   1bea0:	b126      	cbz	r6, 1beac <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bea2:	5dba      	ldrb	r2, [r7, r6]
   1bea4:	2101      	movs	r1, #1
   1bea6:	f361 0201 	bfi	r2, r1, #0, #2
   1beaa:	55ba      	strb	r2, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1beac:	1b9b      	subs	r3, r3, r6
   1beae:	706b      	strb	r3, [r5, #1]
		p->md = 0;
   1beb0:	5dbb      	ldrb	r3, [r7, r6]
   1beb2:	f36f 1304 	bfc	r3, #4, #1
   1beb6:	55bb      	strb	r3, [r7, r6]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1beb8:	4620      	mov	r0, r4
   1beba:	f7fb ff57 	bl	17d6c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1bebe:	786b      	ldrb	r3, [r5, #1]
   1bec0:	4283      	cmp	r3, r0
   1bec2:	d904      	bls.n	1bece <lll_conn_pdu_tx_prep+0x66>
			p->len = max_tx_octets;
   1bec4:	7068      	strb	r0, [r5, #1]
			p->md = 1;
   1bec6:	5dbb      	ldrb	r3, [r7, r6]
   1bec8:	f043 0310 	orr.w	r3, r3, #16
   1becc:	55bb      	strb	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   1bece:	f8d9 2000 	ldr.w	r2, [r9]
   1bed2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1bed4:	429a      	cmp	r2, r3
   1bed6:	d003      	beq.n	1bee0 <lll_conn_pdu_tx_prep+0x78>
			p->md = 1;
   1bed8:	5dbb      	ldrb	r3, [r7, r6]
   1beda:	f043 0310 	orr.w	r3, r3, #16
   1bede:	55bb      	strb	r3, [r7, r6]
	p->rfu = 0U;
   1bee0:	782b      	ldrb	r3, [r5, #0]
	p->resv = 0U;
   1bee2:	2200      	movs	r2, #0
	p->rfu = 0U;
   1bee4:	f36f 1347 	bfc	r3, #5, #3
   1bee8:	702b      	strb	r3, [r5, #0]
	p->resv = 0U;
   1beea:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1beec:	f8c8 5000 	str.w	r5, [r8]
}
   1bef0:	b003      	add	sp, #12
   1bef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
	struct pdu_data *p;

	lll->empty = 1;
   1bef6:	f043 0304 	orr.w	r3, r3, #4
   1befa:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66

	p = (void *)radio_pkt_empty_get();
   1befe:	f000 fff7 	bl	1cef0 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bf02:	7803      	ldrb	r3, [r0, #0]
   1bf04:	2201      	movs	r2, #1
   1bf06:	f362 0301 	bfi	r3, r2, #0, #2
	p->len = 0;
   1bf0a:	2200      	movs	r2, #0
   1bf0c:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   1bf0e:	4605      	mov	r5, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bf10:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1bf12:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
   1bf16:	f7f3 fb11 	bl	f53c <memq_peek>
   1bf1a:	782b      	ldrb	r3, [r5, #0]
   1bf1c:	3800      	subs	r0, #0
   1bf1e:	bf18      	it	ne
   1bf20:	2001      	movne	r0, #1
   1bf22:	f360 1304 	bfi	r3, r0, #4, #1
   1bf26:	702b      	strb	r3, [r5, #0]
		*pdu_data_tx = empty_tx_enqueue(lll);
   1bf28:	f8c8 5000 	str.w	r5, [r8]
}
   1bf2c:	b003      	add	sp, #12
   1bf2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lll->empty = 1;
   1bf32:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1bf36:	f043 0304 	orr.w	r3, r3, #4
   1bf3a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
	p = (void *)radio_pkt_empty_get();
   1bf3e:	f000 ffd7 	bl	1cef0 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bf42:	7803      	ldrb	r3, [r0, #0]
	p->len = 0;
   1bf44:	f880 9001 	strb.w	r9, [r0, #1]
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bf48:	2101      	movs	r1, #1
   1bf4a:	f361 0301 	bfi	r3, r1, #0, #2
   1bf4e:	7003      	strb	r3, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1bf50:	4605      	mov	r5, r0
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1bf52:	464a      	mov	r2, r9
   1bf54:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
   1bf58:	f7f3 faf0 	bl	f53c <memq_peek>
		p->md = 1;
   1bf5c:	782b      	ldrb	r3, [r5, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   1bf5e:	b118      	cbz	r0, 1bf68 <lll_conn_pdu_tx_prep+0x100>
		p->md = 1;
   1bf60:	f043 0310 	orr.w	r3, r3, #16
   1bf64:	702b      	strb	r3, [r5, #0]
   1bf66:	e7bb      	b.n	1bee0 <lll_conn_pdu_tx_prep+0x78>
	} else {
		p->md = 0;
   1bf68:	f360 1304 	bfi	r3, r0, #4, #1
   1bf6c:	702b      	strb	r3, [r5, #0]
   1bf6e:	e7b7      	b.n	1bee0 <lll_conn_pdu_tx_prep+0x78>

0001bf70 <lll_conn_isr_rx>:
{
   1bf70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bf74:	b08b      	sub	sp, #44	; 0x2c
   1bf76:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1bf78:	f000 ff90 	bl	1ce9c <radio_is_done>
	if (trx_done) {
   1bf7c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   1bf80:	d11f      	bne.n	1bfc2 <lll_conn_isr_rx+0x52>
	lll_isr_rx_status_reset();
   1bf82:	f7fe fd63 	bl	1aa4c <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1bf86:	48bc      	ldr	r0, [pc, #752]	; (1c278 <lll_conn_isr_rx+0x308>)
   1bf88:	4621      	mov	r1, r4
   1bf8a:	f000 fe45 	bl	1cc18 <radio_isr_set>
		radio_disable();
   1bf8e:	f000 ff5b 	bl	1ce48 <radio_disable>
		lll_afh_conn_isr(lll->handle, &(struct ull_afh_measurement){
   1bf92:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1bf96:	8b62      	ldrh	r2, [r4, #26]
   1bf98:	8a26      	ldrh	r6, [r4, #16]
   1bf9a:	f88d 3020 	strb.w	r3, [sp, #32]
   1bf9e:	2101      	movs	r1, #1
   1bfa0:	f88d 101c 	strb.w	r1, [sp, #28]
   1bfa4:	f8ad 201e 	strh.w	r2, [sp, #30]
   1bfa8:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1bfac:	f7ea f988 	bl	62c0 <z_timer_cycle_get_32>
   1bfb0:	a907      	add	r1, sp, #28
   1bfb2:	4603      	mov	r3, r0
   1bfb4:	4630      	mov	r0, r6
   1bfb6:	9309      	str	r3, [sp, #36]	; 0x24
   1bfb8:	f7fd fe72 	bl	19ca0 <lll_afh_conn_isr>
}
   1bfbc:	b00b      	add	sp, #44	; 0x2c
   1bfbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
   1bfc2:	f000 ff8b 	bl	1cedc <radio_crc_is_valid>
   1bfc6:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1bfc8:	f000 ffd6 	bl	1cf78 <radio_rssi_is_ready>
   1bfcc:	fa5f f880 	uxtb.w	r8, r0
	lll_isr_rx_status_reset();
   1bfd0:	f7fe fd3c 	bl	1aa4c <lll_isr_rx_status_reset>
	trx_cnt++;
   1bfd4:	4aa9      	ldr	r2, [pc, #676]	; (1c27c <lll_conn_isr_rx+0x30c>)
   1bfd6:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bfd8:	2001      	movs	r0, #1
	trx_cnt++;
   1bfda:	3301      	adds	r3, #1
   1bfdc:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bfde:	f7f7 fe77 	bl	13cd0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bfe2:	4606      	mov	r6, r0
   1bfe4:	2800      	cmp	r0, #0
   1bfe6:	f000 8117 	beq.w	1c218 <lll_conn_isr_rx+0x2a8>
	if (crc_ok) {
   1bfea:	2d00      	cmp	r5, #0
   1bfec:	f040 80ad 	bne.w	1c14a <lll_conn_isr_rx+0x1da>
		if (crc_expire == 0U) {
   1bff0:	4ba3      	ldr	r3, [pc, #652]	; (1c280 <lll_conn_isr_rx+0x310>)
   1bff2:	781f      	ldrb	r7, [r3, #0]
   1bff4:	2f00      	cmp	r7, #0
   1bff6:	f040 80e8 	bne.w	1c1ca <lll_conn_isr_rx+0x25a>
		crc_expire--;
   1bffa:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bffc:	4669      	mov	r1, sp
   1bffe:	4620      	mov	r0, r4
		crc_expire--;
   1c000:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c002:	f7ff ff31 	bl	1be68 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c006:	2096      	movs	r0, #150	; 0x96
   1c008:	f001 f812 	bl	1d030 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1c00c:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
   1c010:	f000 0007 	and.w	r0, r0, #7
   1c014:	f000 ff74 	bl	1cf00 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1c018:	489a      	ldr	r0, [pc, #616]	; (1c284 <lll_conn_isr_rx+0x314>)
   1c01a:	4621      	mov	r1, r4
   1c01c:	f000 fdfc 	bl	1cc18 <radio_isr_set>
		radio_tmr_end_capture();
   1c020:	f001 f8fa 	bl	1d218 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1c024:	9900      	ldr	r1, [sp, #0]
   1c026:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
	pdu_data_tx->nesn = lll->nesn;
   1c02a:	780b      	ldrb	r3, [r1, #0]
   1c02c:	f023 000c 	bic.w	r0, r3, #12
   1c030:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1c034:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1c036:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1c03a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1c03e:	4303      	orrs	r3, r0
   1c040:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1c042:	4620      	mov	r0, r4
   1c044:	f7ff fee0 	bl	1be08 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c048:	f000 ff1e 	bl	1ce88 <radio_is_ready>
   1c04c:	2800      	cmp	r0, #0
   1c04e:	f040 80f5 	bne.w	1c23c <lll_conn_isr_rx+0x2cc>
	if (!radio_tmr_aa_restore()) {
   1c052:	f001 f8d5 	bl	1d200 <radio_tmr_aa_restore>
   1c056:	2800      	cmp	r0, #0
   1c058:	d064      	beq.n	1c124 <lll_conn_isr_rx+0x1b4>
	if (tx_release) {
   1c05a:	2d00      	cmp	r5, #0
   1c05c:	d068      	beq.n	1c130 <lll_conn_isr_rx+0x1c0>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c05e:	8a20      	ldrh	r0, [r4, #16]
   1c060:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c064:	4298      	cmp	r0, r3
   1c066:	f000 80f7 	beq.w	1c258 <lll_conn_isr_rx+0x2e8>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c06a:	4629      	mov	r1, r5
   1c06c:	f7fb fc96 	bl	1799c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1c070:	2f00      	cmp	r7, #0
   1c072:	d15f      	bne.n	1c134 <lll_conn_isr_rx+0x1c4>
		ull_rx_sched();
   1c074:	f7f7 fe70 	bl	13d58 <ull_rx_sched>
	lll_afh_conn_isr(lll->handle, &(struct ull_afh_measurement){
   1c078:	2301      	movs	r3, #1
   1c07a:	f88d 3004 	strb.w	r3, [sp, #4]
   1c07e:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c082:	8b63      	ldrh	r3, [r4, #26]
   1c084:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c088:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c08c:	8a25      	ldrh	r5, [r4, #16]
   1c08e:	f88d 3008 	strb.w	r3, [sp, #8]
   1c092:	f7ea f915 	bl	62c0 <z_timer_cycle_get_32>
   1c096:	a901      	add	r1, sp, #4
   1c098:	4603      	mov	r3, r0
   1c09a:	4628      	mov	r0, r5
   1c09c:	9303      	str	r3, [sp, #12]
   1c09e:	f7fd fdff 	bl	19ca0 <lll_afh_conn_isr>
	lll_afh_conn_isr(lll->handle, &(struct ull_afh_measurement){
   1c0a2:	2202      	movs	r2, #2
   1c0a4:	f88d 2010 	strb.w	r2, [sp, #16]
   1c0a8:	8b62      	ldrh	r2, [r4, #26]
   1c0aa:	f8ad 2012 	strh.w	r2, [sp, #18]
   1c0ae:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
									.data = (pdu_data_rx->nesn == lll->sn),
   1c0b2:	7f33      	ldrb	r3, [r6, #28]
	lll_afh_conn_isr(lll->handle, &(struct ull_afh_measurement){
   1c0b4:	f88d 2014 	strb.w	r2, [sp, #20]
									.data = (pdu_data_rx->nesn == lll->sn),
   1c0b8:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
	lll_afh_conn_isr(lll->handle, &(struct ull_afh_measurement){
   1c0bc:	8a25      	ldrh	r5, [r4, #16]
									.data = (pdu_data_rx->nesn == lll->sn),
   1c0be:	f002 0201 	and.w	r2, r2, #1
   1c0c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1c0c6:	1a9b      	subs	r3, r3, r2
   1c0c8:	fab3 f383 	clz	r3, r3
   1c0cc:	095b      	lsrs	r3, r3, #5
	lll_afh_conn_isr(lll->handle, &(struct ull_afh_measurement){
   1c0ce:	f8ad 3016 	strh.w	r3, [sp, #22]
   1c0d2:	f7ea f8f5 	bl	62c0 <z_timer_cycle_get_32>
   1c0d6:	a904      	add	r1, sp, #16
   1c0d8:	4603      	mov	r3, r0
   1c0da:	4628      	mov	r0, r5
   1c0dc:	9306      	str	r3, [sp, #24]
   1c0de:	f7fd fddf 	bl	19ca0 <lll_afh_conn_isr>
	if (rssi_ready) {
   1c0e2:	f1b8 0f00 	cmp.w	r8, #0
   1c0e6:	f43f af69 	beq.w	1bfbc <lll_conn_isr_rx+0x4c>
		uint8_t rssi = radio_rssi_get();
   1c0ea:	f000 ff37 	bl	1cf5c <radio_rssi_get>
   1c0ee:	b2c0      	uxtb	r0, r0
		lll_afh_conn_isr(lll->handle, &(struct ull_afh_measurement){
   1c0f0:	8b62      	ldrh	r2, [r4, #26]
   1c0f2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
		lll->rssi_latest = rssi;
   1c0f6:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
		lll_afh_conn_isr(lll->handle, &(struct ull_afh_measurement){
   1c0fa:	2100      	movs	r1, #0
   1c0fc:	8a25      	ldrh	r5, [r4, #16]
   1c0fe:	f88d 101c 	strb.w	r1, [sp, #28]
   1c102:	f8ad 201e 	strh.w	r2, [sp, #30]
   1c106:	f88d 3020 	strb.w	r3, [sp, #32]
   1c10a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
   1c10e:	f7ea f8d7 	bl	62c0 <z_timer_cycle_get_32>
   1c112:	a907      	add	r1, sp, #28
   1c114:	4603      	mov	r3, r0
   1c116:	4628      	mov	r0, r5
   1c118:	9309      	str	r3, [sp, #36]	; 0x24
   1c11a:	f7fd fdc1 	bl	19ca0 <lll_afh_conn_isr>
}
   1c11e:	b00b      	add	sp, #44	; 0x2c
   1c120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1c124:	f001 f860 	bl	1d1e8 <radio_tmr_aa_get>
   1c128:	f001 f864 	bl	1d1f4 <radio_tmr_aa_save>
	if (tx_release) {
   1c12c:	2d00      	cmp	r5, #0
   1c12e:	d196      	bne.n	1c05e <lll_conn_isr_rx+0xee>
	if (is_rx_enqueue) {
   1c130:	2f00      	cmp	r7, #0
   1c132:	d0a1      	beq.n	1c078 <lll_conn_isr_rx+0x108>
		ull_pdu_rx_alloc();
   1c134:	f7f7 fdea 	bl	13d0c <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1c138:	2302      	movs	r3, #2
   1c13a:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1c13c:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c13e:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1c140:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c142:	4631      	mov	r1, r6
   1c144:	f7f7 fdf8 	bl	13d38 <ull_rx_put>
	if (is_ull_rx) {
   1c148:	e794      	b.n	1c074 <lll_conn_isr_rx+0x104>
	if (pdu_data_rx->nesn != lll->sn) {
   1c14a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c14e:	7f32      	ldrb	r2, [r6, #28]
   1c150:	f003 0101 	and.w	r1, r3, #1
   1c154:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1c158:	4288      	cmp	r0, r1
   1c15a:	d06d      	beq.n	1c238 <lll_conn_isr_rx+0x2c8>
		lll->sn++;
   1c15c:	f081 0101 	eor.w	r1, r1, #1
   1c160:	f361 0300 	bfi	r3, r1, #0, #1
   1c164:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
		if (lll->role) {
   1c168:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1c16c:	2b00      	cmp	r3, #0
   1c16e:	da05      	bge.n	1c17c <lll_conn_isr_rx+0x20c>
			lll->slave.latency_enabled = 1;
   1c170:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1c174:	f043 0301 	orr.w	r3, r3, #1
   1c178:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (!lll->empty) {
   1c17c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c180:	075d      	lsls	r5, r3, #29
   1c182:	f140 808d 	bpl.w	1c2a0 <lll_conn_isr_rx+0x330>
			lll->empty = 0;
   1c186:	f36f 0382 	bfc	r3, #2, #1
   1c18a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
	struct node_tx *tx_release = NULL;
   1c18e:	2500      	movs	r5, #0
   1c190:	b2db      	uxtb	r3, r3
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c192:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1c196:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1c19a:	428a      	cmp	r2, r1
   1c19c:	f000 80a9 	beq.w	1c2f2 <lll_conn_isr_rx+0x382>
	uint8_t is_rx_enqueue = 0U;
   1c1a0:	2700      	movs	r7, #0
		crc_expire = 0U;
   1c1a2:	4a37      	ldr	r2, [pc, #220]	; (1c280 <lll_conn_isr_rx+0x310>)
   1c1a4:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   1c1a6:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   1c1aa:	4b37      	ldr	r3, [pc, #220]	; (1c288 <lll_conn_isr_rx+0x318>)
		crc_expire = 0U;
   1c1ac:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c1ae:	4620      	mov	r0, r4
		crc_valid = 1U;
   1c1b0:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c1b2:	4669      	mov	r1, sp
		crc_valid = 1U;
   1c1b4:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c1b6:	f7ff fe57 	bl	1be68 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c1ba:	7f33      	ldrb	r3, [r6, #28]
   1c1bc:	06db      	lsls	r3, r3, #27
   1c1be:	f53f af22 	bmi.w	1c006 <lll_conn_isr_rx+0x96>
				     (pdu_data_tx->len == 0));
   1c1c2:	9b00      	ldr	r3, [sp, #0]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c1c4:	785b      	ldrb	r3, [r3, #1]
   1c1c6:	b173      	cbz	r3, 1c1e6 <lll_conn_isr_rx+0x276>
   1c1c8:	e71d      	b.n	1c006 <lll_conn_isr_rx+0x96>
		crc_expire--;
   1c1ca:	3f01      	subs	r7, #1
   1c1cc:	b2ff      	uxtb	r7, r7
   1c1ce:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1c1d0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c1d4:	4669      	mov	r1, sp
   1c1d6:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1c1d8:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c1dc:	f7ff fe44 	bl	1be68 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c1e0:	2f00      	cmp	r7, #0
   1c1e2:	f040 8108 	bne.w	1c3f6 <lll_conn_isr_rx+0x486>
		radio_isr_set(isr_done, param);
   1c1e6:	4824      	ldr	r0, [pc, #144]	; (1c278 <lll_conn_isr_rx+0x308>)
   1c1e8:	4621      	mov	r1, r4
   1c1ea:	f000 fd15 	bl	1cc18 <radio_isr_set>
		} else if (!lll->role) {
   1c1ee:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1c1f2:	2b00      	cmp	r3, #0
   1c1f4:	da02      	bge.n	1c1fc <lll_conn_isr_rx+0x28c>
			radio_switch_complete_and_disable();
   1c1f6:	f000 fe99 	bl	1cf2c <radio_switch_complete_and_disable>
   1c1fa:	e713      	b.n	1c024 <lll_conn_isr_rx+0xb4>
			radio_disable();
   1c1fc:	f000 fe24 	bl	1ce48 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1c200:	f000 fe42 	bl	1ce88 <radio_is_ready>
   1c204:	2800      	cmp	r0, #0
   1c206:	f040 8086 	bne.w	1c316 <lll_conn_isr_rx+0x3a6>
			lll->empty = is_empty_pdu_tx_retry;
   1c20a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c20e:	f369 0382 	bfi	r3, r9, #2, #1
   1c212:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
			goto lll_conn_isr_rx_exit;
   1c216:	e71c      	b.n	1c052 <lll_conn_isr_rx+0xe2>
	LL_ASSERT(node_rx);
   1c218:	4a1c      	ldr	r2, [pc, #112]	; (1c28c <lll_conn_isr_rx+0x31c>)
   1c21a:	491d      	ldr	r1, [pc, #116]	; (1c290 <lll_conn_isr_rx+0x320>)
   1c21c:	481d      	ldr	r0, [pc, #116]	; (1c294 <lll_conn_isr_rx+0x324>)
   1c21e:	23b4      	movs	r3, #180	; 0xb4
   1c220:	f004 fbdd 	bl	209de <printk>
   1c224:	4040      	eors	r0, r0
   1c226:	f380 8811 	msr	BASEPRI, r0
   1c22a:	f04f 0003 	mov.w	r0, #3
   1c22e:	df02      	svc	2
	if (crc_ok) {
   1c230:	2d00      	cmp	r5, #0
   1c232:	f43f aedd 	beq.w	1bff0 <lll_conn_isr_rx+0x80>
   1c236:	e788      	b.n	1c14a <lll_conn_isr_rx+0x1da>
	struct node_tx *tx_release = NULL;
   1c238:	2500      	movs	r5, #0
   1c23a:	e7aa      	b.n	1c192 <lll_conn_isr_rx+0x222>
	LL_ASSERT(!radio_is_ready());
   1c23c:	4a13      	ldr	r2, [pc, #76]	; (1c28c <lll_conn_isr_rx+0x31c>)
   1c23e:	4916      	ldr	r1, [pc, #88]	; (1c298 <lll_conn_isr_rx+0x328>)
   1c240:	4814      	ldr	r0, [pc, #80]	; (1c294 <lll_conn_isr_rx+0x324>)
   1c242:	f240 1325 	movw	r3, #293	; 0x125
   1c246:	f004 fbca 	bl	209de <printk>
   1c24a:	4040      	eors	r0, r0
   1c24c:	f380 8811 	msr	BASEPRI, r0
   1c250:	f04f 0003 	mov.w	r0, #3
   1c254:	df02      	svc	2
   1c256:	e6fc      	b.n	1c052 <lll_conn_isr_rx+0xe2>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c258:	4a0c      	ldr	r2, [pc, #48]	; (1c28c <lll_conn_isr_rx+0x31c>)
   1c25a:	4910      	ldr	r1, [pc, #64]	; (1c29c <lll_conn_isr_rx+0x32c>)
   1c25c:	480d      	ldr	r0, [pc, #52]	; (1c294 <lll_conn_isr_rx+0x324>)
   1c25e:	f44f 7399 	mov.w	r3, #306	; 0x132
   1c262:	f004 fbbc 	bl	209de <printk>
   1c266:	4040      	eors	r0, r0
   1c268:	f380 8811 	msr	BASEPRI, r0
   1c26c:	f04f 0003 	mov.w	r0, #3
   1c270:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c272:	8a20      	ldrh	r0, [r4, #16]
   1c274:	e6f9      	b.n	1c06a <lll_conn_isr_rx+0xfa>
   1c276:	bf00      	nop
   1c278:	0001bb4d 	.word	0x0001bb4d
   1c27c:	2000363c 	.word	0x2000363c
   1c280:	20003bc6 	.word	0x20003bc6
   1c284:	0001bd2d 	.word	0x0001bd2d
   1c288:	20003bc7 	.word	0x20003bc7
   1c28c:	00028000 	.word	0x00028000
   1c290:	00027fe4 	.word	0x00027fe4
   1c294:	000272c0 	.word	0x000272c0
   1c298:	00027f60 	.word	0x00027f60
   1c29c:	00028054 	.word	0x00028054
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1c2a0:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
   1c2a4:	aa07      	add	r2, sp, #28
   1c2a6:	f7f3 f949 	bl	f53c <memq_peek>
		if (link) {
   1c2aa:	4605      	mov	r5, r0
   1c2ac:	b1e0      	cbz	r0, 1c2e8 <lll_conn_isr_rx+0x378>
					       lll->packet_tx_head_offset);
   1c2ae:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
			pdu_data_tx_len = pdu_data_tx->len;
   1c2b2:	9b07      	ldr	r3, [sp, #28]
   1c2b4:	4413      	add	r3, r2
   1c2b6:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1c2b8:	b171      	cbz	r1, 1c2d8 <lll_conn_isr_rx+0x368>
				if (lll->enc_tx) {
   1c2ba:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c2be:	06d8      	lsls	r0, r3, #27
   1c2c0:	d50a      	bpl.n	1c2d8 <lll_conn_isr_rx+0x368>
					lll->ccm_tx.counter++;
   1c2c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1c2c6:	3301      	adds	r3, #1
   1c2c8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
   1c2cc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   1c2d0:	f143 0300 	adc.w	r3, r3, #0
   1c2d4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
			if (offset < lll->packet_tx_head_len) {
   1c2d8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1c2dc:	440a      	add	r2, r1
   1c2de:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1c2e0:	429a      	cmp	r2, r3
   1c2e2:	d228      	bcs.n	1c336 <lll_conn_isr_rx+0x3c6>
				lll->packet_tx_head_offset = offset;
   1c2e4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
   1c2e8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c2ec:	7f32      	ldrb	r2, [r6, #28]
	struct node_tx *tx_release = NULL;
   1c2ee:	2500      	movs	r5, #0
   1c2f0:	e74f      	b.n	1c192 <lll_conn_isr_rx+0x222>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1c2f2:	2003      	movs	r0, #3
   1c2f4:	f7f7 fcec 	bl	13cd0 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c2f8:	b1d0      	cbz	r0, 1c330 <lll_conn_isr_rx+0x3c0>
		lll->nesn++;
   1c2fa:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c2fe:	f083 0302 	eor.w	r3, r3, #2
   1c302:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
		if (pdu_data_rx->len != 0) {
   1c306:	7f73      	ldrb	r3, [r6, #29]
   1c308:	b193      	cbz	r3, 1c330 <lll_conn_isr_rx+0x3c0>
			if (lll->enc_rx) {
   1c30a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c30e:	071a      	lsls	r2, r3, #28
   1c310:	d423      	bmi.n	1c35a <lll_conn_isr_rx+0x3ea>
			*is_rx_enqueue = 1U;
   1c312:	2701      	movs	r7, #1
   1c314:	e745      	b.n	1c1a2 <lll_conn_isr_rx+0x232>
			LL_ASSERT(!radio_is_ready());
   1c316:	4a39      	ldr	r2, [pc, #228]	; (1c3fc <lll_conn_isr_rx+0x48c>)
   1c318:	4939      	ldr	r1, [pc, #228]	; (1c400 <lll_conn_isr_rx+0x490>)
   1c31a:	483a      	ldr	r0, [pc, #232]	; (1c404 <lll_conn_isr_rx+0x494>)
   1c31c:	23eb      	movs	r3, #235	; 0xeb
   1c31e:	f004 fb5e 	bl	209de <printk>
   1c322:	4040      	eors	r0, r0
   1c324:	f380 8811 	msr	BASEPRI, r0
   1c328:	f04f 0003 	mov.w	r0, #3
   1c32c:	df02      	svc	2
   1c32e:	e76c      	b.n	1c20a <lll_conn_isr_rx+0x29a>
   1c330:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c334:	e734      	b.n	1c1a0 <lll_conn_isr_rx+0x230>
			} else if (offset == lll->packet_tx_head_len) {
   1c336:	d1d7      	bne.n	1c2e8 <lll_conn_isr_rx+0x378>
				lll->packet_tx_head_len = 0;
   1c338:	2200      	movs	r2, #0
   1c33a:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
				memq_dequeue(lll->memq_tx.tail,
   1c33e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1c342:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1c344:	f7f3 f902 	bl	f54c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1c348:	9b07      	ldr	r3, [sp, #28]
   1c34a:	7f32      	ldrb	r2, [r6, #28]
   1c34c:	6819      	ldr	r1, [r3, #0]
   1c34e:	6029      	str	r1, [r5, #0]
				tx->next = link;
   1c350:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1c352:	9d07      	ldr	r5, [sp, #28]
   1c354:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c358:	e71b      	b.n	1c192 <lll_conn_isr_rx+0x222>
				done = radio_ccm_is_done();
   1c35a:	f000 ffef 	bl	1d33c <radio_ccm_is_done>
				LL_ASSERT(done);
   1c35e:	2800      	cmp	r0, #0
   1c360:	d03b      	beq.n	1c3da <lll_conn_isr_rx+0x46a>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1c362:	f001 f80d 	bl	1d380 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1c366:	bb30      	cbnz	r0, 1c3b6 <lll_conn_isr_rx+0x446>
				    lll->ccm_rx.counter == 0 &&
   1c368:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1c36c:	f8d4 307b 	ldr.w	r3, [r4, #123]	; 0x7b
				if (mic_failure &&
   1c370:	4313      	orrs	r3, r2
   1c372:	d104      	bne.n	1c37e <lll_conn_isr_rx+0x40e>
				    (pdu_data_rx->ll_id ==
   1c374:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1c376:	f003 0303 	and.w	r3, r3, #3
   1c37a:	2b03      	cmp	r3, #3
   1c37c:	d004      	beq.n	1c388 <lll_conn_isr_rx+0x418>
					mic_state = LLL_CONN_MIC_FAIL;
   1c37e:	4b22      	ldr	r3, [pc, #136]	; (1c408 <lll_conn_isr_rx+0x498>)
   1c380:	2202      	movs	r2, #2
   1c382:	701a      	strb	r2, [r3, #0]
	uint8_t is_rx_enqueue = 0U;
   1c384:	2700      	movs	r7, #0
   1c386:	e664      	b.n	1c052 <lll_conn_isr_rx+0xe2>
						radio_pkt_scratch_get();
   1c388:	f000 fdb6 	bl	1cef8 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1c38c:	7843      	ldrb	r3, [r0, #1]
   1c38e:	2b1b      	cmp	r3, #27
						radio_pkt_scratch_get();
   1c390:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1c392:	d8f4      	bhi.n	1c37e <lll_conn_isr_rx+0x40e>
						memcpy(pdu_data_rx,
   1c394:	3303      	adds	r3, #3
   1c396:	b2da      	uxtb	r2, r3
   1c398:	f106 001c 	add.w	r0, r6, #28
   1c39c:	f009 ff7b 	bl	26296 <memcpy>
						lll->ccm_rx.counter--;
   1c3a0:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
   1c3a4:	3b01      	subs	r3, #1
   1c3a6:	f8c4 3077 	str.w	r3, [r4, #119]	; 0x77
   1c3aa:	f8d4 307b 	ldr.w	r3, [r4, #123]	; 0x7b
   1c3ae:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1c3b2:	f8c4 307b 	str.w	r3, [r4, #123]	; 0x7b
				lll->ccm_rx.counter++;
   1c3b6:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
   1c3ba:	3301      	adds	r3, #1
   1c3bc:	f8c4 3077 	str.w	r3, [r4, #119]	; 0x77
   1c3c0:	f8d4 307b 	ldr.w	r3, [r4, #123]	; 0x7b
						lll->ccm_rx.counter--;
   1c3c4:	f104 0277 	add.w	r2, r4, #119	; 0x77
				lll->ccm_rx.counter++;
   1c3c8:	f143 0300 	adc.w	r3, r3, #0
   1c3cc:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1c3ce:	4b0e      	ldr	r3, [pc, #56]	; (1c408 <lll_conn_isr_rx+0x498>)
   1c3d0:	2701      	movs	r7, #1
   1c3d2:	701f      	strb	r7, [r3, #0]
		if (err) {
   1c3d4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
   1c3d8:	e6e3      	b.n	1c1a2 <lll_conn_isr_rx+0x232>
				LL_ASSERT(done);
   1c3da:	4a08      	ldr	r2, [pc, #32]	; (1c3fc <lll_conn_isr_rx+0x48c>)
   1c3dc:	490b      	ldr	r1, [pc, #44]	; (1c40c <lll_conn_isr_rx+0x49c>)
   1c3de:	4809      	ldr	r0, [pc, #36]	; (1c404 <lll_conn_isr_rx+0x494>)
   1c3e0:	f240 23ee 	movw	r3, #750	; 0x2ee
   1c3e4:	f004 fafb 	bl	209de <printk>
   1c3e8:	4040      	eors	r0, r0
   1c3ea:	f380 8811 	msr	BASEPRI, r0
   1c3ee:	f04f 0003 	mov.w	r0, #3
   1c3f2:	df02      	svc	2
   1c3f4:	e7b5      	b.n	1c362 <lll_conn_isr_rx+0x3f2>
	uint8_t is_rx_enqueue = 0U;
   1c3f6:	462f      	mov	r7, r5
   1c3f8:	e605      	b.n	1c006 <lll_conn_isr_rx+0x96>
   1c3fa:	bf00      	nop
   1c3fc:	00028000 	.word	0x00028000
   1c400:	00027f60 	.word	0x00027f60
   1c404:	000272c0 	.word	0x000272c0
   1c408:	20003bc8 	.word	0x20003bc8
   1c40c:	0002804c 	.word	0x0002804c

0001c410 <lll_conn_flush>:
}

void lll_conn_flush(uint16_t handle, struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   1c410:	4770      	bx	lr
   1c412:	bf00      	nop

0001c414 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   1c414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = prepare_param->param;
   1c418:	68c4      	ldr	r4, [r0, #12]
{
   1c41a:	b082      	sub	sp, #8
   1c41c:	4605      	mov	r5, r0
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1c41e:	f7ff fbfb 	bl	1bc18 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1c422:	8ae3      	ldrh	r3, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1c424:	8b60      	ldrh	r0, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1c426:	1e5a      	subs	r2, r3, #1

	/* Update event counter to next value */
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1c428:	4403      	add	r3, r0
   1c42a:	8363      	strh	r3, [r4, #26]

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;
   1c42c:	2300      	movs	r3, #0
   1c42e:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   1c430:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1c434:	b292      	uxth	r2, r2
	if (lll->data_chan_sel) {
   1c436:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1c438:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   1c43a:	f140 80a5 	bpl.w	1c588 <prepare_cb+0x174>
	event_counter = lll->event_counter + lll->latency_event;
   1c43e:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_CHAN_SEL_ROUNDROBIN)
		data_chan_use = lll_chan_sel_roundrobin(event_counter, lll->data_chan_id,
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
#elif defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1c440:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1c442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c446:	f104 021c 	add.w	r2, r4, #28
   1c44a:	b280      	uxth	r0, r0
   1c44c:	f7fc f9a0 	bl	18790 <lll_chan_sel_2>
   1c450:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1c452:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
   1c456:	441a      	add	r2, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1c458:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   1c45c:	2600      	movs	r6, #0
	lll->slave.window_size_event_us +=
   1c45e:	440b      	add	r3, r1
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1c460:	e9c4 630f 	strd	r6, r3, [r4, #60]	; 0x3c
	    lll->slave.window_widening_max_us) {
   1c464:	6b23      	ldr	r3, [r4, #48]	; 0x30
	lll->slave.window_widening_prepare_us = 0;
   1c466:	6366      	str	r6, [r4, #52]	; 0x34
		lll->slave.window_widening_event_us =
   1c468:	4293      	cmp	r3, r2
   1c46a:	bf28      	it	cs
   1c46c:	4613      	movcs	r3, r2
   1c46e:	63a3      	str	r3, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   1c470:	f000 fbf2 	bl	1cc58 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c474:	4630      	mov	r0, r6
   1c476:	f000 fc49 	bl	1cd0c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1c47a:	4620      	mov	r0, r4
   1c47c:	f7ff fc0c 	bl	1bc98 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1c480:	f104 0008 	add.w	r0, r4, #8
   1c484:	f000 fc60 	bl	1cd48 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c488:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c48a:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c48c:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c48e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1c492:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c494:	f240 605b 	movw	r0, #1627	; 0x65b
   1c498:	4319      	orrs	r1, r3
   1c49a:	f000 fd13 	bl	1cec4 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1c49e:	4638      	mov	r0, r7
   1c4a0:	f7fe fa86 	bl	1a9b0 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1c4a4:	4621      	mov	r1, r4
   1c4a6:	4840      	ldr	r0, [pc, #256]	; (1c5a8 <prepare_cb+0x194>)
   1c4a8:	f000 fbb6 	bl	1cc18 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1c4ac:	2096      	movs	r0, #150	; 0x96
   1c4ae:	f000 fdbf 	bl	1d030 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1c4b2:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1c4b6:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
   1c4ba:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1c4be:	4631      	mov	r1, r6
   1c4c0:	f002 0207 	and.w	r2, r2, #7
   1c4c4:	f000 0007 	and.w	r0, r0, #7
   1c4c8:	f000 fd26 	bl	1cf18 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1c4cc:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = prepare_param->ticks_at_expire;
   1c4d0:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1c4d2:	4640      	mov	r0, r8
   1c4d4:	f7fe fa50 	bl	1a978 <lll_evt_offset_get>
   1c4d8:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1c4da:	686a      	ldr	r2, [r5, #4]
   1c4dc:	f107 0109 	add.w	r1, r7, #9
   1c4e0:	4630      	mov	r0, r6
   1c4e2:	f000 fdb1 	bl	1d048 <radio_tmr_start>
   1c4e6:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1c4e8:	f000 fe6a 	bl	1d1c0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1c4ec:	4630      	mov	r0, r6
   1c4ee:	f000 fe81 	bl	1d1f4 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1c4f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c4f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   1c4f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c4fa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1c4fe:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
   1c502:	2101      	movs	r1, #1
   1c504:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   1c508:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1c50a:	f000 fc81 	bl	1ce10 <radio_rx_ready_delay_get>
   1c50e:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1c510:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
   1c514:	f000 0007 	and.w	r0, r0, #7
   1c518:	2802      	cmp	r0, #2
   1c51a:	d042      	beq.n	1c5a2 <prepare_cb+0x18e>
		return 40;
   1c51c:	2804      	cmp	r0, #4
   1c51e:	bf0c      	ite	eq
   1c520:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1c524:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c526:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1c528:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c52a:	f000 fc73 	bl	1ce14 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1c52e:	4428      	add	r0, r5
   1c530:	f000 fe38 	bl	1d1a4 <radio_tmr_hcto_configure>
	defined(CONFIG_BT_CTLR_GPIO_PA_PIN)
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_PROFILE_ISR */

#if defined(CONFIG_BT_CTLR_CONN_RSSI)
	radio_rssi_measure();
   1c534:	f000 fd08 	bl	1cf48 <radio_rssi_measure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1c538:	8a21      	ldrh	r1, [r4, #16]
   1c53a:	3105      	adds	r1, #5
   1c53c:	463a      	mov	r2, r7
   1c53e:	b2c9      	uxtb	r1, r1
   1c540:	4640      	mov	r0, r8
   1c542:	f7fe fa23 	bl	1a98c <lll_preempt_calc>
   1c546:	b148      	cbz	r0, 1c55c <prepare_cb+0x148>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1c548:	4818      	ldr	r0, [pc, #96]	; (1c5ac <prepare_cb+0x198>)
   1c54a:	4621      	mov	r1, r4
   1c54c:	f000 fb64 	bl	1cc18 <radio_isr_set>
		radio_disable();
   1c550:	f000 fc7a 	bl	1ce48 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1c554:	2000      	movs	r0, #0
   1c556:	b002      	add	sp, #8
   1c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = lll_prepare_done(lll);
   1c55c:	4620      	mov	r0, r4
   1c55e:	f7fe f9a9 	bl	1a8b4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1c562:	2800      	cmp	r0, #0
   1c564:	d0f6      	beq.n	1c554 <prepare_cb+0x140>
   1c566:	4a12      	ldr	r2, [pc, #72]	; (1c5b0 <prepare_cb+0x19c>)
   1c568:	4912      	ldr	r1, [pc, #72]	; (1c5b4 <prepare_cb+0x1a0>)
   1c56a:	4813      	ldr	r0, [pc, #76]	; (1c5b8 <prepare_cb+0x1a4>)
   1c56c:	f44f 7381 	mov.w	r3, #258	; 0x102
   1c570:	f004 fa35 	bl	209de <printk>
   1c574:	4040      	eors	r0, r0
   1c576:	f380 8811 	msr	BASEPRI, r0
   1c57a:	f04f 0003 	mov.w	r0, #3
   1c57e:	df02      	svc	2
}
   1c580:	2000      	movs	r0, #0
   1c582:	b002      	add	sp, #8
   1c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1c588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c58c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1c590:	9300      	str	r3, [sp, #0]
   1c592:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1c596:	f104 031c 	add.w	r3, r4, #28
   1c59a:	f7fc f8b9 	bl	18710 <lll_chan_sel_1>
   1c59e:	4607      	mov	r7, r0
   1c5a0:	e757      	b.n	1c452 <prepare_cb+0x3e>
	switch (phy) {
   1c5a2:	2318      	movs	r3, #24
   1c5a4:	e7bf      	b.n	1c526 <prepare_cb+0x112>
   1c5a6:	bf00      	nop
   1c5a8:	0001bf71 	.word	0x0001bf71
   1c5ac:	0001aae9 	.word	0x0001aae9
   1c5b0:	00028090 	.word	0x00028090
   1c5b4:	00027594 	.word	0x00027594
   1c5b8:	000272c0 	.word	0x000272c0

0001c5bc <lll_slave_prepare>:
{
   1c5bc:	b530      	push	{r4, r5, lr}
   1c5be:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   1c5c0:	68c4      	ldr	r4, [r0, #12]
{
   1c5c2:	4605      	mov	r5, r0
	err = lll_hfclock_on();
   1c5c4:	f7fe faea 	bl	1ab9c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1c5c8:	2800      	cmp	r0, #0
   1c5ca:	db28      	blt.n	1c61e <lll_slave_prepare+0x62>
	elapsed = p->lazy + 1;
   1c5cc:	892b      	ldrh	r3, [r5, #8]
	lll->slave.window_widening_prepare_us +=
   1c5ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
	lll->latency_prepare += elapsed;
   1c5d0:	8ae0      	ldrh	r0, [r4, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1c5d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	elapsed = p->lazy + 1;
   1c5d4:	3301      	adds	r3, #1
   1c5d6:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1c5d8:	fb01 2103 	mla	r1, r1, r3, r2
	lll->latency_prepare += elapsed;
   1c5dc:	4403      	add	r3, r0
   1c5de:	82e3      	strh	r3, [r4, #22]
	    lll->slave.window_widening_max_us) {
   1c5e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c5e2:	4a15      	ldr	r2, [pc, #84]	; (1c638 <lll_slave_prepare+0x7c>)
   1c5e4:	4815      	ldr	r0, [pc, #84]	; (1c63c <lll_slave_prepare+0x80>)
		lll->slave.window_widening_prepare_us =
   1c5e6:	428b      	cmp	r3, r1
   1c5e8:	bf28      	it	cs
   1c5ea:	460b      	movcs	r3, r1
   1c5ec:	6363      	str	r3, [r4, #52]	; 0x34
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c5ee:	4914      	ldr	r1, [pc, #80]	; (1c640 <lll_slave_prepare+0x84>)
   1c5f0:	9500      	str	r5, [sp, #0]
   1c5f2:	2300      	movs	r3, #0
   1c5f4:	f7fe f8d4 	bl	1a7a0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c5f8:	b108      	cbz	r0, 1c5fe <lll_slave_prepare+0x42>
   1c5fa:	3077      	adds	r0, #119	; 0x77
   1c5fc:	d101      	bne.n	1c602 <lll_slave_prepare+0x46>
}
   1c5fe:	b003      	add	sp, #12
   1c600:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c602:	4a10      	ldr	r2, [pc, #64]	; (1c644 <lll_slave_prepare+0x88>)
   1c604:	4910      	ldr	r1, [pc, #64]	; (1c648 <lll_slave_prepare+0x8c>)
   1c606:	4811      	ldr	r0, [pc, #68]	; (1c64c <lll_slave_prepare+0x90>)
   1c608:	235b      	movs	r3, #91	; 0x5b
   1c60a:	f004 f9e8 	bl	209de <printk>
   1c60e:	4040      	eors	r0, r0
   1c610:	f380 8811 	msr	BASEPRI, r0
   1c614:	f04f 0003 	mov.w	r0, #3
   1c618:	df02      	svc	2
}
   1c61a:	b003      	add	sp, #12
   1c61c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(err >= 0);
   1c61e:	4a09      	ldr	r2, [pc, #36]	; (1c644 <lll_slave_prepare+0x88>)
   1c620:	490b      	ldr	r1, [pc, #44]	; (1c650 <lll_slave_prepare+0x94>)
   1c622:	480a      	ldr	r0, [pc, #40]	; (1c64c <lll_slave_prepare+0x90>)
   1c624:	2348      	movs	r3, #72	; 0x48
   1c626:	f004 f9da 	bl	209de <printk>
   1c62a:	4040      	eors	r0, r0
   1c62c:	f380 8811 	msr	BASEPRI, r0
   1c630:	f04f 0003 	mov.w	r0, #3
   1c634:	df02      	svc	2
   1c636:	e7c9      	b.n	1c5cc <lll_slave_prepare+0x10>
   1c638:	0001c415 	.word	0x0001c415
   1c63c:	0001a971 	.word	0x0001a971
   1c640:	0001bc41 	.word	0x0001bc41
   1c644:	00028090 	.word	0x00028090
   1c648:	00027f74 	.word	0x00027f74
   1c64c:	000272c0 	.word	0x000272c0
   1c650:	00027ee8 	.word	0x00027ee8

0001c654 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   1c654:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_conn *lll = prepare_param->param;
   1c656:	68c4      	ldr	r4, [r0, #12]
{
   1c658:	b085      	sub	sp, #20
   1c65a:	4605      	mov	r5, r0
	uint32_t remainder;

	DEBUG_RADIO_START_M(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1c65c:	f7ff fadc 	bl	1bc18 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1c660:	8ae3      	ldrh	r3, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1c662:	8b60      	ldrh	r0, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1c664:	1e5a      	subs	r2, r3, #1

	/* Update event counter to next value */
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1c666:	4403      	add	r3, r0
   1c668:	8363      	strh	r3, [r4, #26]

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;
   1c66a:	2300      	movs	r3, #0
   1c66c:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   1c66e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1c672:	b292      	uxth	r2, r2
	if (lll->data_chan_sel) {
   1c674:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1c676:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   1c678:	d565      	bpl.n	1c746 <prepare_cb+0xf2>
	event_counter = lll->event_counter + lll->latency_event;
   1c67a:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_CHAN_SEL_ROUNDROBIN)
		data_chan_use = lll_chan_sel_roundrobin(event_counter, lll->data_chan_id,
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
#elif defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1c67c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1c67e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c682:	f104 021c 	add.w	r2, r4, #28
   1c686:	b280      	uxth	r0, r0
   1c688:	f7fc f882 	bl	18790 <lll_chan_sel_2>
   1c68c:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c68e:	4620      	mov	r0, r4
   1c690:	a903      	add	r1, sp, #12
   1c692:	f7ff fbe9 	bl	1be68 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1c696:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
   1c69a:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1c69c:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1c6a0:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1c6a2:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1c6a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1c6aa:	780a      	ldrb	r2, [r1, #0]
   1c6ac:	f022 020c 	bic.w	r2, r2, #12
   1c6b0:	4313      	orrs	r3, r2
   1c6b2:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1c6b4:	f000 fad0 	bl	1cc58 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c6b8:	2000      	movs	r0, #0
   1c6ba:	f000 fb27 	bl	1cd0c <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1c6be:	f104 0008 	add.w	r0, r4, #8
   1c6c2:	f000 fb41 	bl	1cd48 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c6c6:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c6c8:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c6ca:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c6cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1c6d0:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c6d2:	f240 605b 	movw	r0, #1627	; 0x65b
   1c6d6:	4319      	orrs	r1, r3
   1c6d8:	f000 fbf4 	bl	1cec4 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1c6dc:	4630      	mov	r0, r6
   1c6de:	f7fe f967 	bl	1a9b0 <lll_chan_set>
	lll->current_data_chan = data_chan_use;

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1c6e2:	9903      	ldr	r1, [sp, #12]
	lll->current_data_chan = data_chan_use;
   1c6e4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1c6e8:	4620      	mov	r0, r4
   1c6ea:	f7ff fb8d 	bl	1be08 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1c6ee:	4621      	mov	r1, r4
   1c6f0:	4825      	ldr	r0, [pc, #148]	; (1c788 <prepare_cb+0x134>)
   1c6f2:	f000 fa91 	bl	1cc18 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1c6f6:	2096      	movs	r0, #150	; 0x96
   1c6f8:	f000 fc9a 	bl	1d030 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1c6fc:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
   1c700:	f000 0007 	and.w	r0, r0, #7
   1c704:	f000 fbfc 	bl	1cf00 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1c708:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   1c70a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1c70c:	4638      	mov	r0, r7
   1c70e:	f7fe f933 	bl	1a978 <lll_evt_offset_get>
   1c712:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1c714:	686a      	ldr	r2, [r5, #4]
   1c716:	f106 0109 	add.w	r1, r6, #9
   1c71a:	2001      	movs	r0, #1
   1c71c:	f000 fc94 	bl	1d048 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1c720:	f000 fd7a 	bl	1d218 <radio_tmr_end_capture>
#endif /* !CONFIG_BT_CTLR_GPIO_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1c724:	8a21      	ldrh	r1, [r4, #16]
   1c726:	3105      	adds	r1, #5
   1c728:	4632      	mov	r2, r6
   1c72a:	b2c9      	uxtb	r1, r1
   1c72c:	4638      	mov	r0, r7
   1c72e:	f7fe f92d 	bl	1a98c <lll_preempt_calc>
   1c732:	b1a8      	cbz	r0, 1c760 <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1c734:	4815      	ldr	r0, [pc, #84]	; (1c78c <prepare_cb+0x138>)
   1c736:	4621      	mov	r1, r4
   1c738:	f000 fa6e 	bl	1cc18 <radio_isr_set>
		radio_disable();
   1c73c:	f000 fb84 	bl	1ce48 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1c740:	2000      	movs	r0, #0
   1c742:	b005      	add	sp, #20
   1c744:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1c746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c74a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1c74e:	9300      	str	r3, [sp, #0]
   1c750:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1c754:	f104 031c 	add.w	r3, r4, #28
   1c758:	f7fb ffda 	bl	18710 <lll_chan_sel_1>
   1c75c:	4606      	mov	r6, r0
   1c75e:	e796      	b.n	1c68e <prepare_cb+0x3a>
		ret = lll_prepare_done(lll);
   1c760:	4620      	mov	r0, r4
   1c762:	f7fe f8a7 	bl	1a8b4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1c766:	2800      	cmp	r0, #0
   1c768:	d0ea      	beq.n	1c740 <prepare_cb+0xec>
   1c76a:	4a09      	ldr	r2, [pc, #36]	; (1c790 <prepare_cb+0x13c>)
   1c76c:	4909      	ldr	r1, [pc, #36]	; (1c794 <prepare_cb+0x140>)
   1c76e:	480a      	ldr	r0, [pc, #40]	; (1c798 <prepare_cb+0x144>)
   1c770:	23d8      	movs	r3, #216	; 0xd8
   1c772:	f004 f934 	bl	209de <printk>
   1c776:	4040      	eors	r0, r0
   1c778:	f380 8811 	msr	BASEPRI, r0
   1c77c:	f04f 0003 	mov.w	r0, #3
   1c780:	df02      	svc	2
}
   1c782:	2000      	movs	r0, #0
   1c784:	b005      	add	sp, #20
   1c786:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c788:	0001bd2d 	.word	0x0001bd2d
   1c78c:	0001aae9 	.word	0x0001aae9
   1c790:	000280f0 	.word	0x000280f0
   1c794:	00027594 	.word	0x00027594
   1c798:	000272c0 	.word	0x000272c0

0001c79c <lll_master_prepare>:
{
   1c79c:	b530      	push	{r4, r5, lr}
   1c79e:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   1c7a0:	68c5      	ldr	r5, [r0, #12]
{
   1c7a2:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c7a4:	f7fe f9fa 	bl	1ab9c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1c7a8:	2800      	cmp	r0, #0
   1c7aa:	db1e      	blt.n	1c7ea <lll_master_prepare+0x4e>
	elapsed = p->lazy + 1;
   1c7ac:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1c7ae:	8aea      	ldrh	r2, [r5, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c7b0:	4914      	ldr	r1, [pc, #80]	; (1c804 <lll_master_prepare+0x68>)
   1c7b2:	4815      	ldr	r0, [pc, #84]	; (1c808 <lll_master_prepare+0x6c>)
	elapsed = p->lazy + 1;
   1c7b4:	3301      	adds	r3, #1
	lll->latency_prepare += elapsed;
   1c7b6:	4413      	add	r3, r2
   1c7b8:	82eb      	strh	r3, [r5, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c7ba:	4a14      	ldr	r2, [pc, #80]	; (1c80c <lll_master_prepare+0x70>)
   1c7bc:	9400      	str	r4, [sp, #0]
   1c7be:	2300      	movs	r3, #0
   1c7c0:	f7fd ffee 	bl	1a7a0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c7c4:	b108      	cbz	r0, 1c7ca <lll_master_prepare+0x2e>
   1c7c6:	3077      	adds	r0, #119	; 0x77
   1c7c8:	d101      	bne.n	1c7ce <lll_master_prepare+0x32>
}
   1c7ca:	b003      	add	sp, #12
   1c7cc:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c7ce:	4a10      	ldr	r2, [pc, #64]	; (1c810 <lll_master_prepare+0x74>)
   1c7d0:	4910      	ldr	r1, [pc, #64]	; (1c814 <lll_master_prepare+0x78>)
   1c7d2:	4811      	ldr	r0, [pc, #68]	; (1c818 <lll_master_prepare+0x7c>)
   1c7d4:	2352      	movs	r3, #82	; 0x52
   1c7d6:	f004 f902 	bl	209de <printk>
   1c7da:	4040      	eors	r0, r0
   1c7dc:	f380 8811 	msr	BASEPRI, r0
   1c7e0:	f04f 0003 	mov.w	r0, #3
   1c7e4:	df02      	svc	2
}
   1c7e6:	b003      	add	sp, #12
   1c7e8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(err >= 0);
   1c7ea:	4a09      	ldr	r2, [pc, #36]	; (1c810 <lll_master_prepare+0x74>)
   1c7ec:	490b      	ldr	r1, [pc, #44]	; (1c81c <lll_master_prepare+0x80>)
   1c7ee:	480a      	ldr	r0, [pc, #40]	; (1c818 <lll_master_prepare+0x7c>)
   1c7f0:	2348      	movs	r3, #72	; 0x48
   1c7f2:	f004 f8f4 	bl	209de <printk>
   1c7f6:	4040      	eors	r0, r0
   1c7f8:	f380 8811 	msr	BASEPRI, r0
   1c7fc:	f04f 0003 	mov.w	r0, #3
   1c800:	df02      	svc	2
   1c802:	e7d3      	b.n	1c7ac <lll_master_prepare+0x10>
   1c804:	0001bc41 	.word	0x0001bc41
   1c808:	0001a971 	.word	0x0001a971
   1c80c:	0001c655 	.word	0x0001c655
   1c810:	000280f0 	.word	0x000280f0
   1c814:	00027f74 	.word	0x00027f74
   1c818:	000272c0 	.word	0x000272c0
   1c81c:	00027ee8 	.word	0x00027ee8

0001c820 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1c820:	4b05      	ldr	r3, [pc, #20]	; (1c838 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1c822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c826:	2100      	movs	r1, #0
   1c828:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1c82c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1c830:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1c834:	4770      	bx	lr
   1c836:	bf00      	nop
   1c838:	4000b000 	.word	0x4000b000

0001c83c <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1c83c:	4b05      	ldr	r3, [pc, #20]	; (1c854 <cntr_start+0x18>)
   1c83e:	7818      	ldrb	r0, [r3, #0]
   1c840:	1c42      	adds	r2, r0, #1
   1c842:	701a      	strb	r2, [r3, #0]
   1c844:	b918      	cbnz	r0, 1c84e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c846:	4b04      	ldr	r3, [pc, #16]	; (1c858 <cntr_start+0x1c>)
   1c848:	2201      	movs	r2, #1
   1c84a:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1c84c:	4770      	bx	lr
		return 1;
   1c84e:	2001      	movs	r0, #1
}
   1c850:	4770      	bx	lr
   1c852:	bf00      	nop
   1c854:	20003bc9 	.word	0x20003bc9
   1c858:	4000b000 	.word	0x4000b000

0001c85c <cntr_stop>:

uint32_t cntr_stop(void)
{
   1c85c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1c85e:	4c0d      	ldr	r4, [pc, #52]	; (1c894 <cntr_stop+0x38>)
   1c860:	7820      	ldrb	r0, [r4, #0]
   1c862:	b148      	cbz	r0, 1c878 <cntr_stop+0x1c>

	if (--_refcount) {
   1c864:	3801      	subs	r0, #1
   1c866:	b2c0      	uxtb	r0, r0
   1c868:	7020      	strb	r0, [r4, #0]
   1c86a:	b918      	cbnz	r0, 1c874 <cntr_stop+0x18>
   1c86c:	4b0a      	ldr	r3, [pc, #40]	; (1c898 <cntr_stop+0x3c>)
   1c86e:	2201      	movs	r2, #1
   1c870:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1c872:	bd10      	pop	{r4, pc}
		return 1;
   1c874:	2001      	movs	r0, #1
}
   1c876:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1c878:	4a08      	ldr	r2, [pc, #32]	; (1c89c <cntr_stop+0x40>)
   1c87a:	4909      	ldr	r1, [pc, #36]	; (1c8a0 <cntr_stop+0x44>)
   1c87c:	4809      	ldr	r0, [pc, #36]	; (1c8a4 <cntr_stop+0x48>)
   1c87e:	232e      	movs	r3, #46	; 0x2e
   1c880:	f004 f8ad 	bl	209de <printk>
   1c884:	4040      	eors	r0, r0
   1c886:	f380 8811 	msr	BASEPRI, r0
   1c88a:	f04f 0003 	mov.w	r0, #3
   1c88e:	df02      	svc	2
	if (--_refcount) {
   1c890:	7820      	ldrb	r0, [r4, #0]
   1c892:	e7e7      	b.n	1c864 <cntr_stop+0x8>
   1c894:	20003bc9 	.word	0x20003bc9
   1c898:	4000b000 	.word	0x4000b000
   1c89c:	00028154 	.word	0x00028154
   1c8a0:	000281a0 	.word	0x000281a0
   1c8a4:	000272c0 	.word	0x000272c0

0001c8a8 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1c8a8:	4b01      	ldr	r3, [pc, #4]	; (1c8b0 <cntr_cnt_get+0x8>)
   1c8aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1c8ae:	4770      	bx	lr
   1c8b0:	4000b000 	.word	0x4000b000

0001c8b4 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1c8b4:	4b02      	ldr	r3, [pc, #8]	; (1c8c0 <cntr_cmp_set+0xc>)
   1c8b6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c8ba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1c8be:	4770      	bx	lr
   1c8c0:	4000b000 	.word	0x4000b000

0001c8c4 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c8c4:	4b12      	ldr	r3, [pc, #72]	; (1c910 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1c8c6:	b430      	push	{r4, r5}
   1c8c8:	2101      	movs	r1, #1
   1c8ca:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1c8cc:	2000      	movs	r0, #0
   1c8ce:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c8d0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1c8d4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1c8d8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1c8dc:	6019      	str	r1, [r3, #0]
}
   1c8de:	e005      	b.n	1c8ec <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c8e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c8e4:	b932      	cbnz	r2, 1c8f4 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1c8e6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c8ea:	b11a      	cbz	r2, 1c8f4 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c8ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c8f0:	2a00      	cmp	r2, #0
   1c8f2:	d0f5      	beq.n	1c8e0 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c8f4:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1c8f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1c8fa:	2a00      	cmp	r2, #0
   1c8fc:	d1e7      	bne.n	1c8ce <do_ecb+0xa>
   1c8fe:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1c902:	2d00      	cmp	r5, #0
   1c904:	d0e3      	beq.n	1c8ce <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1c906:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1c908:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c90c:	4770      	bx	lr
   1c90e:	bf00      	nop
   1c910:	4000e000 	.word	0x4000e000

0001c914 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1c914:	b570      	push	{r4, r5, r6, lr}
   1c916:	b08c      	sub	sp, #48	; 0x30
   1c918:	460e      	mov	r6, r1
   1c91a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c91c:	4601      	mov	r1, r0
   1c91e:	2210      	movs	r2, #16
   1c920:	4668      	mov	r0, sp
{
   1c922:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c924:	f7f2 fdd8 	bl	f4d8 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1c928:	2210      	movs	r2, #16
   1c92a:	eb0d 0002 	add.w	r0, sp, r2
   1c92e:	4631      	mov	r1, r6
   1c930:	f7f2 fdd2 	bl	f4d8 <mem_rcopy>

	do_ecb(&ecb);
   1c934:	4668      	mov	r0, sp
   1c936:	f7ff ffc5 	bl	1c8c4 <do_ecb>

	if (cipher_text_le) {
   1c93a:	b125      	cbz	r5, 1c946 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1c93c:	2210      	movs	r2, #16
   1c93e:	a908      	add	r1, sp, #32
   1c940:	4628      	mov	r0, r5
   1c942:	f7f2 fdc9 	bl	f4d8 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1c946:	b13c      	cbz	r4, 1c958 <ecb_encrypt+0x44>
   1c948:	f10d 0c20 	add.w	ip, sp, #32
   1c94c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1c950:	6020      	str	r0, [r4, #0]
   1c952:	6061      	str	r1, [r4, #4]
   1c954:	60a2      	str	r2, [r4, #8]
   1c956:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   1c958:	b00c      	add	sp, #48	; 0x30
   1c95a:	bd70      	pop	{r4, r5, r6, pc}

0001c95c <sw_switch.constprop.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1c95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c960:	4c9a      	ldr	r4, [pc, #616]	; (1cbcc <sw_switch.constprop.0+0x270>)
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c962:	4e9b      	ldr	r6, [pc, #620]	; (1cbd0 <sw_switch.constprop.0+0x274>)
   1c964:	f994 e000 	ldrsb.w	lr, [r4]
   1c968:	7825      	ldrb	r5, [r4, #0]
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c96a:	f8df 8268 	ldr.w	r8, [pc, #616]	; 1cbd4 <sw_switch.constprop.0+0x278>
   1c96e:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1cbd8 <sw_switch.constprop.0+0x27c>
   1c972:	f8c8 9560 	str.w	r9, [r8, #1376]	; 0x560
   1c976:	f10e 030b 	add.w	r3, lr, #11
   1c97a:	b2db      	uxtb	r3, r3
   1c97c:	00db      	lsls	r3, r3, #3
   1c97e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c982:	00ef      	lsls	r7, r5, #3
   1c984:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1c988:	f107 4c80 	add.w	ip, r7, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c98c:	eb06 0685 	add.w	r6, r6, r5, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c990:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c994:	f8c8 c564 	str.w	ip, [r8, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c998:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1c99c:	2800      	cmp	r0, #0
   1c99e:	f000 80b4 	beq.w	1cb0a <sw_switch.constprop.0+0x1ae>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1c9a2:	2a02      	cmp	r2, #2
   1c9a4:	ea4f 0885 	mov.w	r8, r5, lsl #2
   1c9a8:	f000 8092 	beq.w	1cad0 <sw_switch.constprop.0+0x174>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   1c9ac:	f24a 503c 	movw	r0, #42300	; 0xa53c
   1c9b0:	f649 7cc4 	movw	ip, #40900	; 0x9fc4
   1c9b4:	2a04      	cmp	r2, #4
   1c9b6:	bf18      	it	ne
   1c9b8:	4660      	movne	r0, ip
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1c9ba:	2902      	cmp	r1, #2
   1c9bc:	f000 80c6 	beq.w	1cb4c <sw_switch.constprop.0+0x1f0>
   1c9c0:	2904      	cmp	r1, #4
   1c9c2:	f040 80f9 	bne.w	1cbb8 <sw_switch.constprop.0+0x25c>
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1c9c6:	4e85      	ldr	r6, [pc, #532]	; (1cbdc <sw_switch.constprop.0+0x280>)
   1c9c8:	f500 40eb 	add.w	r0, r0, #30080	; 0x7580
   1c9cc:	3014      	adds	r0, #20
   1c9ce:	fba6 6000 	umull	r6, r0, r6, r0
   1c9d2:	0980      	lsrs	r0, r0, #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c9d4:	4e82      	ldr	r6, [pc, #520]	; (1cbe0 <sw_switch.constprop.0+0x284>)
   1c9d6:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
		uint8_t ppi_en =
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
		uint8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1c9da:	f10e 0c08 	add.w	ip, lr, #8
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   1c9de:	f10e 0310 	add.w	r3, lr, #16
	switch (phy) {
   1c9e2:	2a02      	cmp	r2, #2
		uint8_t ppi_en =
   1c9e4:	b2db      	uxtb	r3, r3
		uint8_t ppi_dis =
   1c9e6:	fa5f fc8c 	uxtb.w	ip, ip
   1c9ea:	f000 8087 	beq.w	1cafc <sw_switch.constprop.0+0x1a0>
   1c9ee:	f24a 19b8 	movw	r9, #41400	; 0xa1b8
   1c9f2:	f24a 7630 	movw	r6, #42800	; 0xa730
   1c9f6:	2a04      	cmp	r2, #4
   1c9f8:	bf08      	it	eq
   1c9fa:	46b1      	moveq	r9, r6

		if (phy_curr & BIT(2)) {
			/* Switching to TX after RX on LE Coded PHY. */

			uint8_t cc_s2 =
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   1c9fc:	f10e 0e02 	add.w	lr, lr, #2
   1ca00:	fa5f fe8e 	uxtb.w	lr, lr
   1ca04:	ea4f 068e 	mov.w	r6, lr, lsl #2
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
   1ca08:	f505 7aa8 	add.w	sl, r5, #336	; 0x150
   1ca0c:	4a75      	ldr	r2, [pc, #468]	; (1cbe4 <sw_switch.constprop.0+0x288>)
   1ca0e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   1ca12:	f506 4610 	add.w	r6, r6, #36864	; 0x9000
   1ca16:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   1ca1a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   1ca1e:	f246 0a18 	movw	sl, #24600	; 0x6018
   1ca22:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1ca26:	2904      	cmp	r1, #4
   1ca28:	bf08      	it	eq
   1ca2a:	4652      	moveq	r2, sl
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1ca2c:	496b      	ldr	r1, [pc, #428]	; (1cbdc <sw_switch.constprop.0+0x280>)
   1ca2e:	444a      	add	r2, r9
   1ca30:	fba1 1202 	umull	r1, r2, r1, r2

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1ca34:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
   1ca38:	ebb1 1f92 	cmp.w	r1, r2, lsr #6
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1ca3c:	ea4f 1992 	mov.w	r9, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1ca40:	bf88      	it	hi
   1ca42:	f8d6 2540 	ldrhi.w	r2, [r6, #1344]	; 0x540
	    group_index);

	/* Capture CC to cancel the timer that has assumed
	 * S8 reception, if packet will be received in S2.
	 */
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1ca46:	4963      	ldr	r1, [pc, #396]	; (1cbd4 <sw_switch.constprop.0+0x278>)
   1ca48:	bf8c      	ite	hi
   1ca4a:	eba2 0209 	subhi.w	r2, r2, r9
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1ca4e:	2201      	movls	r2, #1
   1ca50:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1ca54:	4a5e      	ldr	r2, [pc, #376]	; (1cbd0 <sw_switch.constprop.0+0x274>)
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1ca56:	4e64      	ldr	r6, [pc, #400]	; (1cbe8 <sw_switch.constprop.0+0x28c>)
   1ca58:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1ca5a:	eb02 028e 	add.w	r2, r2, lr, lsl #2
   1ca5e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1ca62:	f8df e188 	ldr.w	lr, [pc, #392]	; 1cbec <sw_switch.constprop.0+0x290>
   1ca66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ca6a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1ca6e:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1ca72:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
   1ca76:	44be      	add	lr, r7
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1ca78:	4f59      	ldr	r7, [pc, #356]	; (1cbe0 <sw_switch.constprop.0+0x284>)
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1ca7a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1ca7e:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1ca82:	4b5b      	ldr	r3, [pc, #364]	; (1cbf0 <sw_switch.constprop.0+0x294>)
	    ppi_dis)	=
   1ca84:	f8cc 2510 	str.w	r2, [ip, #1296]	; 0x510
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1ca88:	4446      	add	r6, r8
	    ppi_dis) =
   1ca8a:	f8cc e514 	str.w	lr, [ip, #1300]	; 0x514
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1ca8e:	f8c1 35a0 	str.w	r3, [r1, #1440]	; 0x5a0
    p_reg->CHENSET = mask;
   1ca92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   1ca96:	f8c1 65a4 	str.w	r6, [r1, #1444]	; 0x5a4
   1ca9a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1ca9e:	00ab      	lsls	r3, r5, #2
   1caa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1caa4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1caa8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1caac:	4282      	cmp	r2, r0
   1caae:	d928      	bls.n	1cb02 <sw_switch.constprop.0+0x1a6>
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1cab0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1cab4:	1a10      	subs	r0, r2, r0

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1cab6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1caba:	4b46      	ldr	r3, [pc, #280]	; (1cbd4 <sw_switch.constprop.0+0x278>)
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1cabc:	3501      	adds	r5, #1
   1cabe:	f44f 6290 	mov.w	r2, #1152	; 0x480
	sw_tifs_toggle &= 1;
   1cac2:	f005 0501 	and.w	r5, r5, #1
   1cac6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1caca:	7025      	strb	r5, [r4, #0]
}
   1cacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (phy) {
   1cad0:	2902      	cmp	r1, #2
   1cad2:	d065      	beq.n	1cba0 <sw_switch.constprop.0+0x244>
   1cad4:	2904      	cmp	r1, #4
   1cad6:	d061      	beq.n	1cb9c <sw_switch.constprop.0+0x240>
   1cad8:	2031      	movs	r0, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cada:	f8df c104 	ldr.w	ip, [pc, #260]	; 1cbe0 <sw_switch.constprop.0+0x284>
   1cade:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   1cae2:	f011 0f04 	tst.w	r1, #4
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   1cae6:	f10e 0310 	add.w	r3, lr, #16
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1caea:	f10e 0c08 	add.w	ip, lr, #8
		uint8_t ppi_en =
   1caee:	b2db      	uxtb	r3, r3
		uint8_t ppi_dis =
   1caf0:	fa5f fc8c 	uxtb.w	ip, ip
		if (phy_curr & BIT(2)) {
   1caf4:	d03b      	beq.n	1cb6e <sw_switch.constprop.0+0x212>
	switch (phy) {
   1caf6:	2a02      	cmp	r2, #2
   1caf8:	f47f af79 	bne.w	1c9ee <sw_switch.constprop.0+0x92>
   1cafc:	f649 6934 	movw	r9, #40500	; 0x9e34
   1cb00:	e77c      	b.n	1c9fc <sw_switch.constprop.0+0xa0>
   1cb02:	2201      	movs	r2, #1
   1cb04:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1cb08:	e7d7      	b.n	1caba <sw_switch.constprop.0+0x15e>
				HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(
   1cb0a:	f10e 0210 	add.w	r2, lr, #16
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1cb0e:	f10e 0e08 	add.w	lr, lr, #8
   1cb12:	b2d2      	uxtb	r2, r2
   1cb14:	fa5f fe8e 	uxtb.w	lr, lr
   1cb18:	00d2      	lsls	r2, r2, #3
   1cb1a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1cb1e:	4933      	ldr	r1, [pc, #204]	; (1cbec <sw_switch.constprop.0+0x290>)
   1cb20:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1cb24:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
   1cb28:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
   1cb2c:	f50e 3ef8 	add.w	lr, lr, #126976	; 0x1f000
   1cb30:	4439      	add	r1, r7
   1cb32:	4f30      	ldr	r7, [pc, #192]	; (1cbf4 <sw_switch.constprop.0+0x298>)
   1cb34:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
		ppi_en) = 0;
   1cb38:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
		ppi_en) = 0;
   1cb3c:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
		ppi_dis) =
   1cb40:	f8ce 6510 	str.w	r6, [lr, #1296]	; 0x510
		delay = HAL_RADIO_NS2US_CEIL(
   1cb44:	2028      	movs	r0, #40	; 0x28
		ppi_dis) =
   1cb46:	f8ce 1514 	str.w	r1, [lr, #1300]	; 0x514
			group_index);
}
   1cb4a:	e7a8      	b.n	1ca9e <sw_switch.constprop.0+0x142>
		delay = HAL_RADIO_NS2US_ROUND(
   1cb4c:	4a23      	ldr	r2, [pc, #140]	; (1cbdc <sw_switch.constprop.0+0x280>)
   1cb4e:	f500 50ab 	add.w	r0, r0, #5472	; 0x1560
   1cb52:	301c      	adds	r0, #28
   1cb54:	fba2 2000 	umull	r2, r0, r2, r0
   1cb58:	4a21      	ldr	r2, [pc, #132]	; (1cbe0 <sw_switch.constprop.0+0x284>)
   1cb5a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1cb5e:	f10e 0c08 	add.w	ip, lr, #8
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   1cb62:	f10e 0310 	add.w	r3, lr, #16
		delay = HAL_RADIO_NS2US_ROUND(
   1cb66:	0980      	lsrs	r0, r0, #6
		uint8_t ppi_en =
   1cb68:	b2db      	uxtb	r3, r3
		uint8_t ppi_dis =
   1cb6a:	fa5f fc8c 	uxtb.w	ip, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1cb6e:	00db      	lsls	r3, r3, #3
   1cb70:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1cb74:	4a1d      	ldr	r2, [pc, #116]	; (1cbec <sw_switch.constprop.0+0x290>)
   1cb76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cb7a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1cb7e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1cb82:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
		ppi_en) = 0;
   1cb86:	2100      	movs	r1, #0
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1cb88:	443a      	add	r2, r7
		ppi_en) = 0;
   1cb8a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
		ppi_en) = 0;
   1cb8e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
		ppi_dis) =
   1cb92:	f8cc 6510 	str.w	r6, [ip, #1296]	; 0x510
		ppi_dis) =
   1cb96:	f8cc 2514 	str.w	r2, [ip, #1300]	; 0x514
}
   1cb9a:	e780      	b.n	1ca9e <sw_switch.constprop.0+0x142>
	switch (phy) {
   1cb9c:	2046      	movs	r0, #70	; 0x46
   1cb9e:	e719      	b.n	1c9d4 <sw_switch.constprop.0+0x78>
   1cba0:	4a0f      	ldr	r2, [pc, #60]	; (1cbe0 <sw_switch.constprop.0+0x284>)
   1cba2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1cba6:	f10e 0c08 	add.w	ip, lr, #8
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   1cbaa:	f10e 0310 	add.w	r3, lr, #16
		uint8_t ppi_en =
   1cbae:	b2db      	uxtb	r3, r3
		uint8_t ppi_dis =
   1cbb0:	fa5f fc8c 	uxtb.w	ip, ip
   1cbb4:	202d      	movs	r0, #45	; 0x2d
   1cbb6:	e7da      	b.n	1cb6e <sw_switch.constprop.0+0x212>
		delay = HAL_RADIO_NS2US_ROUND(
   1cbb8:	f8df c020 	ldr.w	ip, [pc, #32]	; 1cbdc <sw_switch.constprop.0+0x280>
   1cbbc:	f500 501a 	add.w	r0, r0, #9856	; 0x2680
   1cbc0:	302c      	adds	r0, #44	; 0x2c
   1cbc2:	fbac c000 	umull	ip, r0, ip, r0
   1cbc6:	0980      	lsrs	r0, r0, #6
   1cbc8:	e787      	b.n	1cada <sw_switch.constprop.0+0x17e>
   1cbca:	bf00      	nop
   1cbcc:	20003bca 	.word	0x20003bca
   1cbd0:	40009140 	.word	0x40009140
   1cbd4:	4001f000 	.word	0x4001f000
   1cbd8:	4000110c 	.word	0x4000110c
   1cbdc:	10624dd3 	.word	0x10624dd3
   1cbe0:	40001000 	.word	0x40001000
   1cbe4:	40009000 	.word	0x40009000
   1cbe8:	40009040 	.word	0x40009040
   1cbec:	4001f004 	.word	0x4001f004
   1cbf0:	40001150 	.word	0x40001150
   1cbf4:	40001004 	.word	0x40001004

0001cbf8 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1cbf8:	4b04      	ldr	r3, [pc, #16]	; (1cc0c <isr_radio+0x14>)
   1cbfa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1cbfe:	b123      	cbz	r3, 1cc0a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1cc00:	4a03      	ldr	r2, [pc, #12]	; (1cc10 <isr_radio+0x18>)
   1cc02:	4b04      	ldr	r3, [pc, #16]	; (1cc14 <isr_radio+0x1c>)
   1cc04:	6810      	ldr	r0, [r2, #0]
   1cc06:	681b      	ldr	r3, [r3, #0]
   1cc08:	4718      	bx	r3
}
   1cc0a:	4770      	bx	lr
   1cc0c:	40001000 	.word	0x40001000
   1cc10:	200034f4 	.word	0x200034f4
   1cc14:	200034f0 	.word	0x200034f0

0001cc18 <radio_isr_set>:
{
   1cc18:	b538      	push	{r3, r4, r5, lr}
   1cc1a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1cc1c:	2001      	movs	r0, #1
{
   1cc1e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1cc20:	f7e9 fd74 	bl	670c <arch_irq_disable>
	isr_cb = cb;
   1cc24:	4b08      	ldr	r3, [pc, #32]	; (1cc48 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1cc26:	4a09      	ldr	r2, [pc, #36]	; (1cc4c <radio_isr_set+0x34>)
	isr_cb = cb;
   1cc28:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1cc2a:	4909      	ldr	r1, [pc, #36]	; (1cc50 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cc2c:	4b09      	ldr	r3, [pc, #36]	; (1cc54 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1cc2e:	6015      	str	r5, [r2, #0]
   1cc30:	2010      	movs	r0, #16
   1cc32:	2202      	movs	r2, #2
   1cc34:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1cc38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1cc3c:	2001      	movs	r0, #1
}
   1cc3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1cc42:	f7e9 bd53 	b.w	66ec <arch_irq_enable>
   1cc46:	bf00      	nop
   1cc48:	200034f0 	.word	0x200034f0
   1cc4c:	200034f4 	.word	0x200034f4
   1cc50:	40001000 	.word	0x40001000
   1cc54:	e000e100 	.word	0xe000e100

0001cc58 <radio_reset>:
{
   1cc58:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1cc5a:	2001      	movs	r0, #1
   1cc5c:	f7e9 fd56 	bl	670c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1cc60:	4a0c      	ldr	r2, [pc, #48]	; (1cc94 <radio_reset+0x3c>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1cc62:	4c0d      	ldr	r4, [pc, #52]	; (1cc98 <radio_reset+0x40>)
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1cc64:	480d      	ldr	r0, [pc, #52]	; (1cc9c <radio_reset+0x44>)
   1cc66:	2100      	movs	r1, #0
   1cc68:	2301      	movs	r3, #1
   1cc6a:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1cc6e:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1cc72:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1cc76:	490a      	ldr	r1, [pc, #40]	; (1cca0 <radio_reset+0x48>)
					 0xfffffffe) | 0x01000000;
   1cc78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1cc7c:	f023 0301 	bic.w	r3, r3, #1
   1cc80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1cc84:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
   1cc88:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1cc8c:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1cc90:	bd10      	pop	{r4, pc}
   1cc92:	bf00      	nop
   1cc94:	40001000 	.word	0x40001000
   1cc98:	00010900 	.word	0x00010900
   1cc9c:	00021200 	.word	0x00021200
   1cca0:	4001f000 	.word	0x4001f000

0001cca4 <radio_phy_set>:
	switch (phy) {
   1cca4:	2802      	cmp	r0, #2
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1cca6:	4a18      	ldr	r2, [pc, #96]	; (1cd08 <radio_phy_set+0x64>)
	switch (phy) {
   1cca8:	d012      	beq.n	1ccd0 <radio_phy_set+0x2c>
   1ccaa:	2804      	cmp	r0, #4
   1ccac:	d018      	beq.n	1cce0 <radio_phy_set+0x3c>
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ccae:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1ccb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1ccb6:	2103      	movs	r1, #3
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ccb8:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1ccbc:	4b12      	ldr	r3, [pc, #72]	; (1cd08 <radio_phy_set+0x64>)
   1ccbe:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1ccc2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1ccc6:	f042 0201 	orr.w	r2, r2, #1
   1ccca:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1ccce:	4770      	bx	lr
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ccd0:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1ccd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1ccd8:	2104      	movs	r1, #4
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1ccda:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
		break;
   1ccde:	e7ed      	b.n	1ccbc <radio_phy_set+0x18>
		*(volatile uint32_t *)0x4000173c |= 0x80000000;
   1cce0:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1cce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cce8:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1ccec:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1ccf0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1ccf4:	f001 0101 	and.w	r1, r1, #1
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1ccf8:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   1ccfc:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile uint32_t *)0x4000173c =
   1cd00:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
		break;
   1cd04:	e7da      	b.n	1ccbc <radio_phy_set+0x18>
   1cd06:	bf00      	nop
   1cd08:	40001000 	.word	0x40001000

0001cd0c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1cd0c:	4b01      	ldr	r3, [pc, #4]	; (1cd14 <radio_tx_power_set+0x8>)
   1cd0e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1cd12:	4770      	bx	lr
   1cd14:	40001000 	.word	0x40001000

0001cd18 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1cd18:	4b01      	ldr	r3, [pc, #4]	; (1cd20 <radio_freq_chan_set+0x8>)
   1cd1a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1cd1e:	4770      	bx	lr
   1cd20:	40001000 	.word	0x40001000

0001cd24 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1cd24:	4b07      	ldr	r3, [pc, #28]	; (1cd44 <radio_whiten_iv_set+0x20>)
   1cd26:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1cd2a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1cd2e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1cd32:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1cd36:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1cd3a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1cd3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1cd42:	4770      	bx	lr
   1cd44:	40001000 	.word	0x40001000

0001cd48 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1cd48:	4a0a      	ldr	r2, [pc, #40]	; (1cd74 <radio_aa_set+0x2c>)
   1cd4a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1cd4c:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1cd4e:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1cd52:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1cd56:	78c3      	ldrb	r3, [r0, #3]
   1cd58:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1cd5c:	7843      	ldrb	r3, [r0, #1]
   1cd5e:	f890 c002 	ldrb.w	ip, [r0, #2]
   1cd62:	7801      	ldrb	r1, [r0, #0]
   1cd64:	041b      	lsls	r3, r3, #16
   1cd66:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1cd6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1cd6e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1cd72:	4770      	bx	lr
   1cd74:	40001000 	.word	0x40001000

0001cd78 <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   1cd78:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   1cd7c:	2b02      	cmp	r3, #2
	uint8_t dc = flags & 0x01; /* Adv or Data channel */
   1cd7e:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   1cd82:	d025      	beq.n	1cdd0 <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   1cd84:	2b04      	cmp	r3, #4
   1cd86:	bf14      	ite	ne
   1cd88:	f04f 0c00 	movne.w	ip, #0
   1cd8c:	f04f 4cc7 	moveq.w	ip, #1669332992	; 0x63800000
	if (dc) {
   1cd90:	b10a      	cbz	r2, 1cd96 <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1cd92:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cd96:	f1c0 0308 	rsb	r3, r0, #8
   1cd9a:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1cd9c:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1cda0:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cda4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1cda8:	4a0b      	ldr	r2, [pc, #44]	; (1cdd8 <radio_pkt_configure+0x60>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1cdaa:	4303      	orrs	r3, r0
   1cdac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1cdb0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1cdb4:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1cdb8:	4b08      	ldr	r3, [pc, #32]	; (1cddc <radio_pkt_configure+0x64>)
   1cdba:	4003      	ands	r3, r0
   1cdbc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1cdc0:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1cdc4:	4319      	orrs	r1, r3
   1cdc6:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1cdca:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1cdce:	4770      	bx	lr
	switch (phy) {
   1cdd0:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
   1cdd4:	e7dc      	b.n	1cd90 <radio_pkt_configure+0x18>
   1cdd6:	bf00      	nop
   1cdd8:	40001000 	.word	0x40001000
   1cddc:	fef80000 	.word	0xfef80000

0001cde0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1cde0:	4b01      	ldr	r3, [pc, #4]	; (1cde8 <radio_pkt_rx_set+0x8>)
   1cde2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1cde6:	4770      	bx	lr
   1cde8:	40001000 	.word	0x40001000

0001cdec <radio_pkt_tx_set>:
   1cdec:	4b01      	ldr	r3, [pc, #4]	; (1cdf4 <radio_pkt_tx_set+0x8>)
   1cdee:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1cdf2:	4770      	bx	lr
   1cdf4:	40001000 	.word	0x40001000

0001cdf8 <radio_tx_ready_delay_get>:
	switch (phy) {
   1cdf8:	2802      	cmp	r0, #2
   1cdfa:	d004      	beq.n	1ce06 <radio_tx_ready_delay_get+0xe>
			return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_S8_US;
   1cdfc:	2804      	cmp	r0, #4
   1cdfe:	bf14      	ite	ne
   1ce00:	2029      	movne	r0, #41	; 0x29
   1ce02:	202a      	moveq	r0, #42	; 0x2a
   1ce04:	4770      	bx	lr
	switch (phy) {
   1ce06:	2028      	movs	r0, #40	; 0x28
}
   1ce08:	4770      	bx	lr
   1ce0a:	bf00      	nop

0001ce0c <radio_tx_chain_delay_get>:
}
   1ce0c:	2001      	movs	r0, #1
   1ce0e:	4770      	bx	lr

0001ce10 <radio_rx_ready_delay_get>:
}
   1ce10:	2029      	movs	r0, #41	; 0x29
   1ce12:	4770      	bx	lr

0001ce14 <radio_rx_chain_delay_get>:
	switch (phy) {
   1ce14:	2802      	cmp	r0, #2
   1ce16:	d009      	beq.n	1ce2c <radio_rx_chain_delay_get+0x18>
   1ce18:	2804      	cmp	r0, #4
   1ce1a:	d105      	bne.n	1ce28 <radio_rx_chain_delay_get+0x14>
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1ce1c:	f011 0f01 	tst.w	r1, #1
   1ce20:	bf14      	ite	ne
   1ce22:	201e      	movne	r0, #30
   1ce24:	2019      	moveq	r0, #25
   1ce26:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1ce28:	200a      	movs	r0, #10
}
   1ce2a:	4770      	bx	lr
	switch (phy) {
   1ce2c:	2005      	movs	r0, #5
   1ce2e:	4770      	bx	lr

0001ce30 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ce30:	4b01      	ldr	r3, [pc, #4]	; (1ce38 <radio_rx_enable+0x8>)
   1ce32:	2201      	movs	r2, #1
   1ce34:	605a      	str	r2, [r3, #4]
}
   1ce36:	4770      	bx	lr
   1ce38:	40001000 	.word	0x40001000

0001ce3c <radio_tx_enable>:
   1ce3c:	4b01      	ldr	r3, [pc, #4]	; (1ce44 <radio_tx_enable+0x8>)
   1ce3e:	2201      	movs	r2, #1
   1ce40:	601a      	str	r2, [r3, #0]
}
   1ce42:	4770      	bx	lr
   1ce44:	40001000 	.word	0x40001000

0001ce48 <radio_disable>:
    p_reg->CHENCLR = mask;
   1ce48:	4a07      	ldr	r2, [pc, #28]	; (1ce68 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1ce4a:	4908      	ldr	r1, [pc, #32]	; (1ce6c <radio_disable+0x24>)
{
   1ce4c:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1ce4e:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1ce50:	f44f 6490 	mov.w	r4, #1152	; 0x480
	NRF_RADIO->SHORTS = 0;
   1ce54:	2000      	movs	r0, #0
   1ce56:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1ce5a:	6053      	str	r3, [r2, #4]
}
   1ce5c:	bc10      	pop	{r4}
   1ce5e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1ce60:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1ce64:	610b      	str	r3, [r1, #16]
}
   1ce66:	4770      	bx	lr
   1ce68:	4001f000 	.word	0x4001f000
   1ce6c:	40001000 	.word	0x40001000

0001ce70 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1ce70:	4b04      	ldr	r3, [pc, #16]	; (1ce84 <radio_status_reset+0x14>)
   1ce72:	2200      	movs	r2, #0
   1ce74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1ce78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1ce7c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1ce80:	4770      	bx	lr
   1ce82:	bf00      	nop
   1ce84:	40001000 	.word	0x40001000

0001ce88 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1ce88:	4b03      	ldr	r3, [pc, #12]	; (1ce98 <radio_is_ready+0x10>)
   1ce8a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1ce8e:	3800      	subs	r0, #0
   1ce90:	bf18      	it	ne
   1ce92:	2001      	movne	r0, #1
   1ce94:	4770      	bx	lr
   1ce96:	bf00      	nop
   1ce98:	40001000 	.word	0x40001000

0001ce9c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1ce9c:	4b03      	ldr	r3, [pc, #12]	; (1ceac <radio_is_done+0x10>)
   1ce9e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1cea2:	3800      	subs	r0, #0
   1cea4:	bf18      	it	ne
   1cea6:	2001      	movne	r0, #1
   1cea8:	4770      	bx	lr
   1ceaa:	bf00      	nop
   1ceac:	40001000 	.word	0x40001000

0001ceb0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1ceb0:	4b03      	ldr	r3, [pc, #12]	; (1cec0 <radio_is_idle+0x10>)
   1ceb2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1ceb6:	fab0 f080 	clz	r0, r0
   1ceba:	0940      	lsrs	r0, r0, #5
   1cebc:	4770      	bx	lr
   1cebe:	bf00      	nop
   1cec0:	40001000 	.word	0x40001000

0001cec4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1cec4:	4b04      	ldr	r3, [pc, #16]	; (1ced8 <radio_crc_configure+0x14>)
   1cec6:	f240 1203 	movw	r2, #259	; 0x103
   1ceca:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1cece:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1ced2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1ced6:	4770      	bx	lr
   1ced8:	40001000 	.word	0x40001000

0001cedc <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1cedc:	4b03      	ldr	r3, [pc, #12]	; (1ceec <radio_crc_is_valid+0x10>)
   1cede:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1cee2:	3800      	subs	r0, #0
   1cee4:	bf18      	it	ne
   1cee6:	2001      	movne	r0, #1
   1cee8:	4770      	bx	lr
   1ceea:	bf00      	nop
   1ceec:	40001000 	.word	0x40001000

0001cef0 <radio_pkt_empty_get>:
}
   1cef0:	4800      	ldr	r0, [pc, #0]	; (1cef4 <radio_pkt_empty_get+0x4>)
   1cef2:	4770      	bx	lr
   1cef4:	200033e8 	.word	0x200033e8

0001cef8 <radio_pkt_scratch_get>:
}
   1cef8:	4800      	ldr	r0, [pc, #0]	; (1cefc <radio_pkt_scratch_get+0x4>)
   1cefa:	4770      	bx	lr
   1cefc:	200033ec 	.word	0x200033ec

0001cf00 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cf00:	4b04      	ldr	r3, [pc, #16]	; (1cf14 <radio_switch_complete_and_rx+0x14>)
{
   1cf02:	4602      	mov	r2, r0
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1cf04:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cf06:	2003      	movs	r0, #3
   1cf08:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1cf0c:	4608      	mov	r0, r1
   1cf0e:	f7ff bd25 	b.w	1c95c <sw_switch.constprop.0>
   1cf12:	bf00      	nop
   1cf14:	40001000 	.word	0x40001000

0001cf18 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cf18:	4b03      	ldr	r3, [pc, #12]	; (1cf28 <radio_switch_complete_and_tx+0x10>)
{
   1cf1a:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cf1c:	2003      	movs	r0, #3
   1cf1e:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1cf22:	2001      	movs	r0, #1
   1cf24:	f7ff bd1a 	b.w	1c95c <sw_switch.constprop.0>
   1cf28:	40001000 	.word	0x40001000

0001cf2c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1cf2c:	4904      	ldr	r1, [pc, #16]	; (1cf40 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1cf2e:	4b05      	ldr	r3, [pc, #20]	; (1cf44 <radio_switch_complete_and_disable+0x18>)
   1cf30:	2003      	movs	r0, #3
   1cf32:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1cf36:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1cf3a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cf3e:	4770      	bx	lr
   1cf40:	40001000 	.word	0x40001000
   1cf44:	4001f000 	.word	0x4001f000

0001cf48 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1cf48:	4a03      	ldr	r2, [pc, #12]	; (1cf58 <radio_rssi_measure+0x10>)
   1cf4a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1cf4e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1cf52:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1cf56:	4770      	bx	lr
   1cf58:	40001000 	.word	0x40001000

0001cf5c <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1cf5c:	4b01      	ldr	r3, [pc, #4]	; (1cf64 <radio_rssi_get+0x8>)
   1cf5e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1cf62:	4770      	bx	lr
   1cf64:	40001000 	.word	0x40001000

0001cf68 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1cf68:	4b02      	ldr	r3, [pc, #8]	; (1cf74 <radio_rssi_status_reset+0xc>)
   1cf6a:	2200      	movs	r2, #0
   1cf6c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1cf70:	4770      	bx	lr
   1cf72:	bf00      	nop
   1cf74:	40001000 	.word	0x40001000

0001cf78 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1cf78:	4b03      	ldr	r3, [pc, #12]	; (1cf88 <radio_rssi_is_ready+0x10>)
   1cf7a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1cf7e:	3800      	subs	r0, #0
   1cf80:	bf18      	it	ne
   1cf82:	2001      	movne	r0, #1
   1cf84:	4770      	bx	lr
   1cf86:	bf00      	nop
   1cf88:	40001000 	.word	0x40001000

0001cf8c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1cf8c:	b410      	push	{r4}
   1cf8e:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1cf92:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1cf96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cf9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1cf9e:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1cfa0:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1cfa4:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1cfa8:	8894      	ldrh	r4, [r2, #4]
   1cfaa:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1cfae:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1cfb2:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1cfb6:	d1ec      	bne.n	1cf92 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1cfb8:	4b03      	ldr	r3, [pc, #12]	; (1cfc8 <radio_filter_configure+0x3c>)
}
   1cfba:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1cfbc:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1cfc0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1cfc4:	4770      	bx	lr
   1cfc6:	bf00      	nop
   1cfc8:	40001000 	.word	0x40001000

0001cfcc <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1cfcc:	4a03      	ldr	r2, [pc, #12]	; (1cfdc <radio_filter_disable+0x10>)
   1cfce:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1cfd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1cfd6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1cfda:	4770      	bx	lr
   1cfdc:	40001000 	.word	0x40001000

0001cfe0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1cfe0:	4b02      	ldr	r3, [pc, #8]	; (1cfec <radio_filter_status_reset+0xc>)
   1cfe2:	2200      	movs	r2, #0
   1cfe4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1cfe8:	4770      	bx	lr
   1cfea:	bf00      	nop
   1cfec:	40001000 	.word	0x40001000

0001cff0 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1cff0:	4b03      	ldr	r3, [pc, #12]	; (1d000 <radio_filter_has_match+0x10>)
   1cff2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1cff6:	3800      	subs	r0, #0
   1cff8:	bf18      	it	ne
   1cffa:	2001      	movne	r0, #1
   1cffc:	4770      	bx	lr
   1cffe:	bf00      	nop
   1d000:	40001000 	.word	0x40001000

0001d004 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1d004:	4b01      	ldr	r3, [pc, #4]	; (1d00c <radio_filter_match_get+0x8>)
   1d006:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1d00a:	4770      	bx	lr
   1d00c:	40001000 	.word	0x40001000

0001d010 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d010:	4904      	ldr	r1, [pc, #16]	; (1d024 <radio_tmr_status_reset+0x14>)
   1d012:	4b05      	ldr	r3, [pc, #20]	; (1d028 <radio_tmr_status_reset+0x18>)
   1d014:	4a05      	ldr	r2, [pc, #20]	; (1d02c <radio_tmr_status_reset+0x1c>)
   1d016:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1d01a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1d01e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1d022:	4770      	bx	lr
   1d024:	4000b000 	.word	0x4000b000
   1d028:	4001f000 	.word	0x4001f000
   1d02c:	0e742060 	.word	0x0e742060

0001d030 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1d030:	4b03      	ldr	r3, [pc, #12]	; (1d040 <radio_tmr_tifs_set+0x10>)
    p_reg->CC[cc_channel] = cc_value;
   1d032:	4a04      	ldr	r2, [pc, #16]	; (1d044 <radio_tmr_tifs_set+0x14>)
   1d034:	781b      	ldrb	r3, [r3, #0]
   1d036:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1d03a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d03e:	4770      	bx	lr
   1d040:	20003bca 	.word	0x20003bca
   1d044:	40009000 	.word	0x40009000

0001d048 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1d048:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1d04a:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1d04e:	4d2a      	ldr	r5, [pc, #168]	; (1d0f8 <radio_tmr_start+0xb0>)
   1d050:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1d054:	42ab      	cmp	r3, r5
{
   1d056:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1d058:	d906      	bls.n	1d068 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1d05a:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1d05e:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1d062:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1d064:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d068:	4b24      	ldr	r3, [pc, #144]	; (1d0fc <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;
   1d06a:	4825      	ldr	r0, [pc, #148]	; (1d100 <radio_tmr_start+0xb8>)
    p_reg->CC[ch] = cc_val;
   1d06c:	4d25      	ldr	r5, [pc, #148]	; (1d104 <radio_tmr_start+0xbc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d06e:	4e26      	ldr	r6, [pc, #152]	; (1d108 <radio_tmr_start+0xc0>)
   1d070:	2701      	movs	r7, #1
   1d072:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1d074:	2700      	movs	r7, #0
   1d076:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1d07a:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1d07e:	2704      	movs	r7, #4
   1d080:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1d084:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1d086:	2702      	movs	r7, #2
   1d088:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1d08c:	4a1f      	ldr	r2, [pc, #124]	; (1d10c <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   1d08e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1d092:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1d096:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1d09a:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1d09e:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d0a0:	f8c2 6538 	str.w	r6, [r2, #1336]	; 0x538
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d0a4:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1d0a8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1d0ac:	b9e4      	cbnz	r4, 1d0e8 <radio_tmr_start+0xa0>
    p_reg->CHENCLR = mask;
   1d0ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1d0b2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1d0b6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1d0ba:	4a14      	ldr	r2, [pc, #80]	; (1d10c <radio_tmr_start+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d0bc:	4b14      	ldr	r3, [pc, #80]	; (1d110 <radio_tmr_start+0xc8>)
   1d0be:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d0c2:	4e14      	ldr	r6, [pc, #80]	; (1d114 <radio_tmr_start+0xcc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d0c4:	4d14      	ldr	r5, [pc, #80]	; (1d118 <radio_tmr_start+0xd0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1d0c6:	2400      	movs	r4, #0
   1d0c8:	2101      	movs	r1, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   1d0ca:	2704      	movs	r7, #4
   1d0cc:	60d9      	str	r1, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   1d0ce:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1d0d2:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1d0d6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
   1d0da:	6019      	str	r1, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d0dc:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d0e0:	f8c2 554c 	str.w	r5, [r2, #1356]	; 0x54c
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1d0e4:	bcf0      	pop	{r4, r5, r6, r7}
   1d0e6:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1d0e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1d0ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1d0f0:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1d0f4:	e7e1      	b.n	1d0ba <radio_tmr_start+0x72>
   1d0f6:	bf00      	nop
   1d0f8:	7ff0bdbf 	.word	0x7ff0bdbf
   1d0fc:	40008000 	.word	0x40008000
   1d100:	431bde83 	.word	0x431bde83
   1d104:	4000b000 	.word	0x4000b000
   1d108:	4000b148 	.word	0x4000b148
   1d10c:	4001f000 	.word	0x4001f000
   1d110:	40009000 	.word	0x40009000
   1d114:	4000110c 	.word	0x4000110c
   1d118:	4000900c 	.word	0x4000900c

0001d11c <radio_tmr_start_tick>:
   1d11c:	4a15      	ldr	r2, [pc, #84]	; (1d174 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1d11e:	b430      	push	{r4, r5}
   1d120:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   1d122:	4c15      	ldr	r4, [pc, #84]	; (1d178 <radio_tmr_start_tick+0x5c>)
   1d124:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   1d126:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1d12a:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   1d12c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d130:	4b12      	ldr	r3, [pc, #72]	; (1d17c <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   1d132:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1d136:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   1d13a:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d13c:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   1d140:	f8c3 4538 	str.w	r4, [r3, #1336]	; 0x538
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d144:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1d148:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1d14c:	b158      	cbz	r0, 1d166 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   1d14e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d152:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1d156:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1d15a:	4a08      	ldr	r2, [pc, #32]	; (1d17c <radio_tmr_start_tick+0x60>)
	last_pdu_end_us = 0U;
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1d15c:	2001      	movs	r0, #1
   1d15e:	bc30      	pop	{r4, r5}
   1d160:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1d164:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1d166:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1d16a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1d16e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1d172:	e7f2      	b.n	1d15a <radio_tmr_start_tick+0x3e>
   1d174:	40008000 	.word	0x40008000
   1d178:	4000b000 	.word	0x4000b000
   1d17c:	4001f000 	.word	0x4001f000

0001d180 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1d180:	4b01      	ldr	r3, [pc, #4]	; (1d188 <radio_tmr_start_get+0x8>)
   1d182:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1d186:	4770      	bx	lr
   1d188:	4000b000 	.word	0x4000b000

0001d18c <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d18c:	4903      	ldr	r1, [pc, #12]	; (1d19c <radio_tmr_stop+0x10>)
   1d18e:	4a04      	ldr	r2, [pc, #16]	; (1d1a0 <radio_tmr_stop+0x14>)
   1d190:	2301      	movs	r3, #1
   1d192:	604b      	str	r3, [r1, #4]
   1d194:	610b      	str	r3, [r1, #16]
   1d196:	6053      	str	r3, [r2, #4]
   1d198:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d19a:	4770      	bx	lr
   1d19c:	40008000 	.word	0x40008000
   1d1a0:	40009000 	.word	0x40009000

0001d1a4 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1d1a4:	4904      	ldr	r1, [pc, #16]	; (1d1b8 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1d1a6:	4b05      	ldr	r3, [pc, #20]	; (1d1bc <radio_tmr_hcto_configure+0x18>)
   1d1a8:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1d1ac:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1d1b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1d1b4:	4770      	bx	lr
   1d1b6:	bf00      	nop
   1d1b8:	40008000 	.word	0x40008000
   1d1bc:	4001f000 	.word	0x4001f000

0001d1c0 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d1c0:	4b05      	ldr	r3, [pc, #20]	; (1d1d8 <radio_tmr_aa_capture+0x18>)
   1d1c2:	4806      	ldr	r0, [pc, #24]	; (1d1dc <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d1c4:	4906      	ldr	r1, [pc, #24]	; (1d1e0 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1d1c6:	4a07      	ldr	r2, [pc, #28]	; (1d1e4 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d1c8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d1cc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1d1d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1d1d4:	4770      	bx	lr
   1d1d6:	bf00      	nop
   1d1d8:	4001f000 	.word	0x4001f000
   1d1dc:	40001100 	.word	0x40001100
   1d1e0:	40008040 	.word	0x40008040
   1d1e4:	04000040 	.word	0x04000040

0001d1e8 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1d1e8:	4b01      	ldr	r3, [pc, #4]	; (1d1f0 <radio_tmr_aa_get+0x8>)
   1d1ea:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1d1ee:	4770      	bx	lr
   1d1f0:	40008000 	.word	0x40008000

0001d1f4 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1d1f4:	4b01      	ldr	r3, [pc, #4]	; (1d1fc <radio_tmr_aa_save+0x8>)
   1d1f6:	6018      	str	r0, [r3, #0]
}
   1d1f8:	4770      	bx	lr
   1d1fa:	bf00      	nop
   1d1fc:	200034f8 	.word	0x200034f8

0001d200 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1d200:	4b01      	ldr	r3, [pc, #4]	; (1d208 <radio_tmr_aa_restore+0x8>)
}
   1d202:	6818      	ldr	r0, [r3, #0]
   1d204:	4770      	bx	lr
   1d206:	bf00      	nop
   1d208:	200034f8 	.word	0x200034f8

0001d20c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1d20c:	4b01      	ldr	r3, [pc, #4]	; (1d214 <radio_tmr_ready_get+0x8>)
   1d20e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1d212:	4770      	bx	lr
   1d214:	40008000 	.word	0x40008000

0001d218 <radio_tmr_end_capture>:
   1d218:	4b02      	ldr	r3, [pc, #8]	; (1d224 <radio_tmr_end_capture+0xc>)
   1d21a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1d21e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1d222:	4770      	bx	lr
   1d224:	4001f000 	.word	0x4001f000

0001d228 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1d228:	4b01      	ldr	r3, [pc, #4]	; (1d230 <radio_tmr_end_get+0x8>)
   1d22a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1d22e:	4770      	bx	lr
   1d230:	40008000 	.word	0x40008000

0001d234 <radio_tmr_tifs_base_get>:
   1d234:	4b01      	ldr	r3, [pc, #4]	; (1d23c <radio_tmr_tifs_base_get+0x8>)
   1d236:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1d23a:	4770      	bx	lr
   1d23c:	40008000 	.word	0x40008000

0001d240 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d240:	4b21      	ldr	r3, [pc, #132]	; (1d2c8 <radio_ccm_rx_pkt_set+0x88>)
{
   1d242:	b430      	push	{r4, r5}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d244:	2400      	movs	r4, #0
   1d246:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d24a:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1d24c:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d24e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
{
   1d252:	4605      	mov	r5, r0
	switch (phy) {
   1d254:	d035      	beq.n	1d2c2 <radio_ccm_rx_pkt_set+0x82>
   1d256:	2904      	cmp	r1, #4
   1d258:	d131      	bne.n	1d2be <radio_ccm_rx_pkt_set+0x7e>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d25a:	491c      	ldr	r1, [pc, #112]	; (1d2cc <radio_ccm_rx_pkt_set+0x8c>)
   1d25c:	481c      	ldr	r0, [pc, #112]	; (1d2d0 <radio_ccm_rx_pkt_set+0x90>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   1d25e:	2403      	movs	r4, #3
   1d260:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d264:	330c      	adds	r3, #12
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d266:	f8c1 0578 	str.w	r0, [r1, #1400]	; 0x578
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   1d26a:	4c1a      	ldr	r4, [pc, #104]	; (1d2d4 <radio_ccm_rx_pkt_set+0x94>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d26c:	f8c1 357c 	str.w	r3, [r1, #1404]	; 0x57c
    p_reg->CHENSET = mask;
   1d270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1d274:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1d278:	4917      	ldr	r1, [pc, #92]	; (1d2d8 <radio_ccm_rx_pkt_set+0x98>)
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1d27a:	4b13      	ldr	r3, [pc, #76]	; (1d2c8 <radio_ccm_rx_pkt_set+0x88>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1d27c:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1d280:	4816      	ldr	r0, [pc, #88]	; (1d2dc <radio_ccm_rx_pkt_set+0x9c>)
   1d282:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   1d284:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   1d288:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1d28c:	4c0f      	ldr	r4, [pc, #60]	; (1d2cc <radio_ccm_rx_pkt_set+0x8c>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1d28e:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
   1d292:	2100      	movs	r1, #0
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1d294:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d298:	4d11      	ldr	r5, [pc, #68]	; (1d2e0 <radio_ccm_rx_pkt_set+0xa0>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1d29a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1d29e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d2a2:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1d2a6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d2aa:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1d2ae:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1d2b2:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d2b6:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1d2b8:	bc30      	pop	{r4, r5}
   1d2ba:	601a      	str	r2, [r3, #0]
   1d2bc:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1d2be:	4c09      	ldr	r4, [pc, #36]	; (1d2e4 <radio_ccm_rx_pkt_set+0xa4>)
   1d2c0:	e7da      	b.n	1d278 <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   1d2c2:	4c09      	ldr	r4, [pc, #36]	; (1d2e8 <radio_ccm_rx_pkt_set+0xa8>)
   1d2c4:	e7d8      	b.n	1d278 <radio_ccm_rx_pkt_set+0x38>
   1d2c6:	bf00      	nop
   1d2c8:	4000f000 	.word	0x4000f000
   1d2cc:	4001f000 	.word	0x4001f000
   1d2d0:	40001150 	.word	0x40001150
   1d2d4:	01020001 	.word	0x01020001
   1d2d8:	40001000 	.word	0x40001000
   1d2dc:	200033ec 	.word	0x200033ec
   1d2e0:	200032dc 	.word	0x200032dc
   1d2e4:	01000001 	.word	0x01000001
   1d2e8:	01010001 	.word	0x01010001

0001d2ec <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d2ec:	4b0f      	ldr	r3, [pc, #60]	; (1d32c <radio_ccm_tx_pkt_set+0x40>)
{
   1d2ee:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d2f0:	2200      	movs	r2, #0
{
   1d2f2:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d2f4:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d2f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d2fa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1d2fe:	480c      	ldr	r0, [pc, #48]	; (1d330 <radio_ccm_tx_pkt_set+0x44>)
   1d300:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1d304:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1d308:	480a      	ldr	r0, [pc, #40]	; (1d334 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1d30a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d30e:	4c0a      	ldr	r4, [pc, #40]	; (1d338 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1d310:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1d314:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1d316:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1d31a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1d31e:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d320:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1d324:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d328:	6019      	str	r1, [r3, #0]
}
   1d32a:	4770      	bx	lr
   1d32c:	4000f000 	.word	0x4000f000
   1d330:	01010000 	.word	0x01010000
   1d334:	200033ec 	.word	0x200033ec
   1d338:	200032dc 	.word	0x200032dc

0001d33c <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d33c:	4a0e      	ldr	r2, [pc, #56]	; (1d378 <radio_ccm_is_done+0x3c>)
   1d33e:	2302      	movs	r3, #2
   1d340:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1d344:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1d348:	b933      	cbnz	r3, 1d358 <radio_ccm_is_done+0x1c>
		__WFE();
   1d34a:	bf20      	wfe
		__SEV();
   1d34c:	bf40      	sev
		__WFE();
   1d34e:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1d350:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1d354:	2b00      	cmp	r3, #0
   1d356:	d0f8      	beq.n	1d34a <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d358:	4b07      	ldr	r3, [pc, #28]	; (1d378 <radio_ccm_is_done+0x3c>)
   1d35a:	4a08      	ldr	r2, [pc, #32]	; (1d37c <radio_ccm_is_done+0x40>)
   1d35c:	2002      	movs	r0, #2
   1d35e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d362:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1d366:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1d36a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1d36e:	fab0 f080 	clz	r0, r0
   1d372:	0940      	lsrs	r0, r0, #5
   1d374:	4770      	bx	lr
   1d376:	bf00      	nop
   1d378:	4000f000 	.word	0x4000f000
   1d37c:	e000e100 	.word	0xe000e100

0001d380 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1d380:	4b03      	ldr	r3, [pc, #12]	; (1d390 <radio_ccm_mic_is_valid+0x10>)
   1d382:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d386:	3800      	subs	r0, #0
   1d388:	bf18      	it	ne
   1d38a:	2001      	movne	r0, #1
   1d38c:	4770      	bx	lr
   1d38e:	bf00      	nop
   1d390:	4000f000 	.word	0x4000f000

0001d394 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1d394:	4b15      	ldr	r3, [pc, #84]	; (1d3ec <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1d396:	4a16      	ldr	r2, [pc, #88]	; (1d3f0 <radio_ar_configure+0x5c>)
{
   1d398:	b410      	push	{r4}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1d39a:	2403      	movs	r4, #3
   1d39c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1d3a0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1d3a4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1d3a8:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1d3ac:	4c11      	ldr	r4, [pc, #68]	; (1d3f4 <radio_ar_configure+0x60>)
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1d3ae:	3801      	subs	r0, #1
   1d3b0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   1d3b4:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   1d3b6:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1d3b8:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1d3bc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1d3c0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1d3c4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1d3c8:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1d3cc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d3d0:	4809      	ldr	r0, [pc, #36]	; (1d3f8 <radio_ar_configure+0x64>)
   1d3d2:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
   1d3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d3da:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d3de:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   1d3e2:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1d3e6:	bc10      	pop	{r4}
   1d3e8:	4770      	bx	lr
   1d3ea:	bf00      	nop
   1d3ec:	4000f000 	.word	0x4000f000
   1d3f0:	40001000 	.word	0x40001000
   1d3f4:	200032d8 	.word	0x200032d8
   1d3f8:	4001f000 	.word	0x4001f000

0001d3fc <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1d3fc:	4b01      	ldr	r3, [pc, #4]	; (1d404 <radio_ar_match_get+0x8>)
   1d3fe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d402:	4770      	bx	lr
   1d404:	4000f000 	.word	0x4000f000

0001d408 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d408:	4903      	ldr	r1, [pc, #12]	; (1d418 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1d40a:	4a04      	ldr	r2, [pc, #16]	; (1d41c <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d40c:	2300      	movs	r3, #0
   1d40e:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1d412:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1d416:	4770      	bx	lr
   1d418:	40001000 	.word	0x40001000
   1d41c:	4000f000 	.word	0x4000f000

0001d420 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1d420:	4b08      	ldr	r3, [pc, #32]	; (1d444 <radio_ar_has_match+0x24>)
   1d422:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1d426:	b160      	cbz	r0, 1d442 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1d428:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1d42c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1d430:	b138      	cbz	r0, 1d442 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1d432:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1d436:	b120      	cbz	r0, 1d442 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1d438:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1d43c:	fab0 f080 	clz	r0, r0
   1d440:	0940      	lsrs	r0, r0, #5
}
   1d442:	4770      	bx	lr
   1d444:	40001000 	.word	0x40001000

0001d448 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1d448:	2902      	cmp	r1, #2
{
   1d44a:	b510      	push	{r4, lr}
   1d44c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1d44e:	d00b      	beq.n	1d468 <mayfly_enable_cb+0x20>
   1d450:	4a0a      	ldr	r2, [pc, #40]	; (1d47c <mayfly_enable_cb+0x34>)
   1d452:	490b      	ldr	r1, [pc, #44]	; (1d480 <mayfly_enable_cb+0x38>)
   1d454:	480b      	ldr	r0, [pc, #44]	; (1d484 <mayfly_enable_cb+0x3c>)
   1d456:	231f      	movs	r3, #31
   1d458:	f003 fac1 	bl	209de <printk>
   1d45c:	4040      	eors	r0, r0
   1d45e:	f380 8811 	msr	BASEPRI, r0
   1d462:	f04f 0003 	mov.w	r0, #3
   1d466:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1d468:	200b      	movs	r0, #11
	if (enable) {
   1d46a:	b11c      	cbz	r4, 1d474 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1d46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1d470:	f7e9 b93c 	b.w	66ec <arch_irq_enable>
}
   1d474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1d478:	f7e9 b948 	b.w	670c <arch_irq_disable>
   1d47c:	000281d0 	.word	0x000281d0
   1d480:	00028220 	.word	0x00028220
   1d484:	000272c0 	.word	0x000272c0

0001d488 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1d488:	b129      	cbz	r1, 1d496 <mayfly_is_enabled+0xe>
   1d48a:	3901      	subs	r1, #1
   1d48c:	2901      	cmp	r1, #1
   1d48e:	d805      	bhi.n	1d49c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1d490:	200b      	movs	r0, #11
   1d492:	f7e9 b94f 	b.w	6734 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1d496:	2018      	movs	r0, #24
   1d498:	f7e9 b94c 	b.w	6734 <arch_irq_is_enabled>
{
   1d49c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1d49e:	4a07      	ldr	r2, [pc, #28]	; (1d4bc <mayfly_is_enabled+0x34>)
   1d4a0:	4907      	ldr	r1, [pc, #28]	; (1d4c0 <mayfly_is_enabled+0x38>)
   1d4a2:	4808      	ldr	r0, [pc, #32]	; (1d4c4 <mayfly_is_enabled+0x3c>)
   1d4a4:	2337      	movs	r3, #55	; 0x37
   1d4a6:	f003 fa9a 	bl	209de <printk>
   1d4aa:	4040      	eors	r0, r0
   1d4ac:	f380 8811 	msr	BASEPRI, r0
   1d4b0:	f04f 0003 	mov.w	r0, #3
   1d4b4:	df02      	svc	2
		break;
	}

	return 0;
}
   1d4b6:	2000      	movs	r0, #0
   1d4b8:	bd08      	pop	{r3, pc}
   1d4ba:	bf00      	nop
   1d4bc:	000281d0 	.word	0x000281d0
   1d4c0:	00027358 	.word	0x00027358
   1d4c4:	000272c0 	.word	0x000272c0

0001d4c8 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d4c8:	4288      	cmp	r0, r1
   1d4ca:	d013      	beq.n	1d4f4 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   1d4cc:	b928      	cbnz	r0, 1d4da <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1d4ce:	1e48      	subs	r0, r1, #1
   1d4d0:	2801      	cmp	r0, #1
   1d4d2:	bf8c      	ite	hi
   1d4d4:	2000      	movhi	r0, #0
   1d4d6:	2001      	movls	r0, #1
   1d4d8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d4da:	2801      	cmp	r0, #1
   1d4dc:	d106      	bne.n	1d4ec <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1d4de:	b159      	cbz	r1, 1d4f8 <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1d4e0:	f1a1 0002 	sub.w	r0, r1, #2
   1d4e4:	fab0 f080 	clz	r0, r0
   1d4e8:	0940      	lsrs	r0, r0, #5
   1d4ea:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1d4ec:	2802      	cmp	r0, #2
   1d4ee:	d004      	beq.n	1d4fa <mayfly_prio_is_equal+0x32>
   1d4f0:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d4f2:	4770      	bx	lr
   1d4f4:	2001      	movs	r0, #1
   1d4f6:	4770      	bx	lr
#endif
	       0;
}
   1d4f8:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1d4fa:	2901      	cmp	r1, #1
   1d4fc:	bf8c      	ite	hi
   1d4fe:	2000      	movhi	r0, #0
   1d500:	2001      	movls	r0, #1
   1d502:	4770      	bx	lr

0001d504 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1d504:	2901      	cmp	r1, #1
{
   1d506:	b508      	push	{r3, lr}
	switch (callee_id) {
   1d508:	d00f      	beq.n	1d52a <mayfly_pend+0x26>
   1d50a:	2902      	cmp	r1, #2
   1d50c:	d00d      	beq.n	1d52a <mayfly_pend+0x26>
   1d50e:	b191      	cbz	r1, 1d536 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1d510:	4a0c      	ldr	r2, [pc, #48]	; (1d544 <mayfly_pend+0x40>)
   1d512:	490d      	ldr	r1, [pc, #52]	; (1d548 <mayfly_pend+0x44>)
   1d514:	480d      	ldr	r0, [pc, #52]	; (1d54c <mayfly_pend+0x48>)
   1d516:	2368      	movs	r3, #104	; 0x68
   1d518:	f003 fa61 	bl	209de <printk>
   1d51c:	4040      	eors	r0, r0
   1d51e:	f380 8811 	msr	BASEPRI, r0
   1d522:	f04f 0003 	mov.w	r0, #3
   1d526:	df02      	svc	2
		break;
	}
}
   1d528:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d52a:	4b09      	ldr	r3, [pc, #36]	; (1d550 <mayfly_pend+0x4c>)
   1d52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d530:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d534:	bd08      	pop	{r3, pc}
   1d536:	4b06      	ldr	r3, [pc, #24]	; (1d550 <mayfly_pend+0x4c>)
   1d538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1d53c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d540:	bd08      	pop	{r3, pc}
   1d542:	bf00      	nop
   1d544:	000281d0 	.word	0x000281d0
   1d548:	00027358 	.word	0x00027358
   1d54c:	000272c0 	.word	0x000272c0
   1d550:	e000e100 	.word	0xe000e100

0001d554 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d554:	2803      	cmp	r0, #3
{
   1d556:	b510      	push	{r4, lr}
   1d558:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d55a:	d804      	bhi.n	1d566 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1d55c:	4b11      	ldr	r3, [pc, #68]	; (1d5a4 <hal_ticker_instance0_caller_id_get+0x50>)
   1d55e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d560:	b18c      	cbz	r4, 1d586 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1d562:	4620      	mov	r0, r4
   1d564:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d566:	4a10      	ldr	r2, [pc, #64]	; (1d5a8 <hal_ticker_instance0_caller_id_get+0x54>)
   1d568:	4910      	ldr	r1, [pc, #64]	; (1d5ac <hal_ticker_instance0_caller_id_get+0x58>)
   1d56a:	4811      	ldr	r0, [pc, #68]	; (1d5b0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d56c:	232b      	movs	r3, #43	; 0x2b
   1d56e:	f003 fa36 	bl	209de <printk>
   1d572:	4040      	eors	r0, r0
   1d574:	f380 8811 	msr	BASEPRI, r0
   1d578:	f04f 0003 	mov.w	r0, #3
   1d57c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1d57e:	4b09      	ldr	r3, [pc, #36]	; (1d5a4 <hal_ticker_instance0_caller_id_get+0x50>)
   1d580:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d582:	2c00      	cmp	r4, #0
   1d584:	d1ed      	bne.n	1d562 <hal_ticker_instance0_caller_id_get+0xe>
   1d586:	4a08      	ldr	r2, [pc, #32]	; (1d5a8 <hal_ticker_instance0_caller_id_get+0x54>)
   1d588:	490a      	ldr	r1, [pc, #40]	; (1d5b4 <hal_ticker_instance0_caller_id_get+0x60>)
   1d58a:	4809      	ldr	r0, [pc, #36]	; (1d5b0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d58c:	232e      	movs	r3, #46	; 0x2e
   1d58e:	f003 fa26 	bl	209de <printk>
   1d592:	4040      	eors	r0, r0
   1d594:	f380 8811 	msr	BASEPRI, r0
   1d598:	f04f 0003 	mov.w	r0, #3
   1d59c:	df02      	svc	2
}
   1d59e:	4620      	mov	r0, r4
   1d5a0:	bd10      	pop	{r4, pc}
   1d5a2:	bf00      	nop
   1d5a4:	000282d8 	.word	0x000282d8
   1d5a8:	00028244 	.word	0x00028244
   1d5ac:	00028294 	.word	0x00028294
   1d5b0:	000272c0 	.word	0x000272c0
   1d5b4:	000282b4 	.word	0x000282b4

0001d5b8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1d5b8:	3801      	subs	r0, #1
{
   1d5ba:	b510      	push	{r4, lr}
   1d5bc:	461c      	mov	r4, r3
	switch (caller_id) {
   1d5be:	2804      	cmp	r0, #4
   1d5c0:	f200 8082 	bhi.w	1d6c8 <hal_ticker_instance0_sched+0x110>
   1d5c4:	e8df f000 	tbb	[pc, r0]
   1d5c8:	3f302112 	.word	0x3f302112
   1d5cc:	03          	.byte	0x03
   1d5cd:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1d5ce:	2904      	cmp	r1, #4
   1d5d0:	d04a      	beq.n	1d668 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1d5d2:	4a44      	ldr	r2, [pc, #272]	; (1d6e4 <hal_ticker_instance0_sched+0x12c>)
   1d5d4:	4944      	ldr	r1, [pc, #272]	; (1d6e8 <hal_ticker_instance0_sched+0x130>)
   1d5d6:	4845      	ldr	r0, [pc, #276]	; (1d6ec <hal_ticker_instance0_sched+0x134>)
   1d5d8:	23ba      	movs	r3, #186	; 0xba
   1d5da:	f003 fa00 	bl	209de <printk>
   1d5de:	4040      	eors	r0, r0
   1d5e0:	f380 8811 	msr	BASEPRI, r0
   1d5e4:	f04f 0003 	mov.w	r0, #3
   1d5e8:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1d5ea:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d5ec:	2904      	cmp	r1, #4
   1d5ee:	d043      	beq.n	1d678 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1d5f0:	4a3c      	ldr	r2, [pc, #240]	; (1d6e4 <hal_ticker_instance0_sched+0x12c>)
   1d5f2:	493d      	ldr	r1, [pc, #244]	; (1d6e8 <hal_ticker_instance0_sched+0x130>)
   1d5f4:	483d      	ldr	r0, [pc, #244]	; (1d6ec <hal_ticker_instance0_sched+0x134>)
   1d5f6:	234e      	movs	r3, #78	; 0x4e
   1d5f8:	f003 f9f1 	bl	209de <printk>
   1d5fc:	4040      	eors	r0, r0
   1d5fe:	f380 8811 	msr	BASEPRI, r0
   1d602:	f04f 0003 	mov.w	r0, #3
   1d606:	df02      	svc	2
}
   1d608:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d60a:	2903      	cmp	r1, #3
   1d60c:	d03c      	beq.n	1d688 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1d60e:	4a35      	ldr	r2, [pc, #212]	; (1d6e4 <hal_ticker_instance0_sched+0x12c>)
   1d610:	4935      	ldr	r1, [pc, #212]	; (1d6e8 <hal_ticker_instance0_sched+0x130>)
   1d612:	4836      	ldr	r0, [pc, #216]	; (1d6ec <hal_ticker_instance0_sched+0x134>)
   1d614:	2365      	movs	r3, #101	; 0x65
   1d616:	f003 f9e2 	bl	209de <printk>
   1d61a:	4040      	eors	r0, r0
   1d61c:	f380 8811 	msr	BASEPRI, r0
   1d620:	f04f 0003 	mov.w	r0, #3
   1d624:	df02      	svc	2
}
   1d626:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d628:	2904      	cmp	r1, #4
   1d62a:	d035      	beq.n	1d698 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1d62c:	4a2d      	ldr	r2, [pc, #180]	; (1d6e4 <hal_ticker_instance0_sched+0x12c>)
   1d62e:	492e      	ldr	r1, [pc, #184]	; (1d6e8 <hal_ticker_instance0_sched+0x130>)
   1d630:	482e      	ldr	r0, [pc, #184]	; (1d6ec <hal_ticker_instance0_sched+0x134>)
   1d632:	237c      	movs	r3, #124	; 0x7c
   1d634:	f003 f9d3 	bl	209de <printk>
   1d638:	4040      	eors	r0, r0
   1d63a:	f380 8811 	msr	BASEPRI, r0
   1d63e:	f04f 0003 	mov.w	r0, #3
   1d642:	df02      	svc	2
}
   1d644:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d646:	2903      	cmp	r1, #3
   1d648:	d036      	beq.n	1d6b8 <hal_ticker_instance0_sched+0x100>
   1d64a:	2904      	cmp	r1, #4
   1d64c:	d02c      	beq.n	1d6a8 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1d64e:	4a25      	ldr	r2, [pc, #148]	; (1d6e4 <hal_ticker_instance0_sched+0x12c>)
   1d650:	4925      	ldr	r1, [pc, #148]	; (1d6e8 <hal_ticker_instance0_sched+0x130>)
   1d652:	4826      	ldr	r0, [pc, #152]	; (1d6ec <hal_ticker_instance0_sched+0x134>)
   1d654:	23a2      	movs	r3, #162	; 0xa2
   1d656:	f003 f9c2 	bl	209de <printk>
   1d65a:	4040      	eors	r0, r0
   1d65c:	f380 8811 	msr	BASEPRI, r0
   1d660:	f04f 0003 	mov.w	r0, #3
   1d664:	df02      	svc	2
}
   1d666:	bd10      	pop	{r4, pc}
			m.param = instance;
   1d668:	4b21      	ldr	r3, [pc, #132]	; (1d6f0 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d66a:	2102      	movs	r1, #2
			m.param = instance;
   1d66c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d66e:	2003      	movs	r0, #3
}
   1d670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d674:	f7f1 bfcc 	b.w	f610 <mayfly_enqueue>
			m.param = instance;
   1d678:	4b1e      	ldr	r3, [pc, #120]	; (1d6f4 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d67a:	2102      	movs	r1, #2
			m.param = instance;
   1d67c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d67e:	2000      	movs	r0, #0
}
   1d680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d684:	f7f1 bfc4 	b.w	f610 <mayfly_enqueue>
			m.param = instance;
   1d688:	4b1b      	ldr	r3, [pc, #108]	; (1d6f8 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d68a:	2101      	movs	r1, #1
			m.param = instance;
   1d68c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d68e:	4608      	mov	r0, r1
}
   1d690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d694:	f7f1 bfbc 	b.w	f610 <mayfly_enqueue>
			m.param = instance;
   1d698:	4b18      	ldr	r3, [pc, #96]	; (1d6fc <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d69a:	2102      	movs	r1, #2
			m.param = instance;
   1d69c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d69e:	2001      	movs	r0, #1
}
   1d6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d6a4:	f7f1 bfb4 	b.w	f610 <mayfly_enqueue>
			m.param = instance;
   1d6a8:	4b15      	ldr	r3, [pc, #84]	; (1d700 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d6aa:	2102      	movs	r1, #2
			m.param = instance;
   1d6ac:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d6ae:	4608      	mov	r0, r1
}
   1d6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d6b4:	f7f1 bfac 	b.w	f610 <mayfly_enqueue>
			m.param = instance;
   1d6b8:	4b12      	ldr	r3, [pc, #72]	; (1d704 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d6ba:	2101      	movs	r1, #1
			m.param = instance;
   1d6bc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d6be:	2002      	movs	r0, #2
}
   1d6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d6c4:	f7f1 bfa4 	b.w	f610 <mayfly_enqueue>
		LL_ASSERT(0);
   1d6c8:	4a06      	ldr	r2, [pc, #24]	; (1d6e4 <hal_ticker_instance0_sched+0x12c>)
   1d6ca:	4907      	ldr	r1, [pc, #28]	; (1d6e8 <hal_ticker_instance0_sched+0x130>)
   1d6cc:	4807      	ldr	r0, [pc, #28]	; (1d6ec <hal_ticker_instance0_sched+0x134>)
   1d6ce:	23c0      	movs	r3, #192	; 0xc0
   1d6d0:	f003 f985 	bl	209de <printk>
   1d6d4:	4040      	eors	r0, r0
   1d6d6:	f380 8811 	msr	BASEPRI, r0
   1d6da:	f04f 0003 	mov.w	r0, #3
   1d6de:	df02      	svc	2
}
   1d6e0:	bd10      	pop	{r4, pc}
   1d6e2:	bf00      	nop
   1d6e4:	00028244 	.word	0x00028244
   1d6e8:	00027358 	.word	0x00027358
   1d6ec:	000272c0 	.word	0x000272c0
   1d6f0:	20000cb0 	.word	0x20000cb0
   1d6f4:	20000ca0 	.word	0x20000ca0
   1d6f8:	20000c90 	.word	0x20000c90
   1d6fc:	20000ce0 	.word	0x20000ce0
   1d700:	20000cc0 	.word	0x20000cc0
   1d704:	20000cd0 	.word	0x20000cd0

0001d708 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1d708:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1d70a:	2000      	movs	r0, #0
   1d70c:	f7ff b8d2 	b.w	1c8b4 <cntr_cmp_set>

0001d710 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d710:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d714:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1d718:	3201      	adds	r2, #1
   1d71a:	d008      	beq.n	1d72e <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1d71c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d720:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d724:	f013 0301 	ands.w	r3, r3, #1
   1d728:	d10f      	bne.n	1d74a <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1d72a:	2000      	movs	r0, #0
   1d72c:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d72e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1d732:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d736:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d738:	4293      	cmp	r3, r2
   1d73a:	d0f6      	beq.n	1d72a <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1d73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d740:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d744:	f013 0301 	ands.w	r3, r3, #1
   1d748:	d0ef      	beq.n	1d72a <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1d74a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1d74e:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d750:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d752:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d756:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d75a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1d75c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1d75e:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1d762:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1d766:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1d768:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1d76c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d770:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d772:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1d776:	3301      	adds	r3, #1
   1d778:	d03b      	beq.n	1d7f2 <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d77a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d77e:	3301      	adds	r3, #1
   1d780:	d037      	beq.n	1d7f2 <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d782:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d786:	3301      	adds	r3, #1
   1d788:	d033      	beq.n	1d7f2 <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1d78a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d78e:	3301      	adds	r3, #1
   1d790:	d02f      	beq.n	1d7f2 <hci_vendor_read_static_addr+0xe2>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1d792:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1d796:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1d798:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d79a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d79e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d7a2:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1d7a4:	f880 c009 	strb.w	ip, [r0, #9]
   1d7a8:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1d7aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1d7ae:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1d7b0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d7b2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d7b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d7ba:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1d7bc:	f880 c00d 	strb.w	ip, [r0, #13]
   1d7c0:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1d7c2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1d7c6:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1d7c8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d7ca:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d7ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d7d2:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1d7d4:	73c3      	strb	r3, [r0, #15]
   1d7d6:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1d7da:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1d7de:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1d7e0:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1d7e2:	0a11      	lsrs	r1, r2, #8
   1d7e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d7e8:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1d7ea:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1d7ec:	7541      	strb	r1, [r0, #21]
		return 1;
   1d7ee:	2001      	movs	r0, #1
}
   1d7f0:	4770      	bx	lr
__ssp_bos_icheck3(memset, void *, int)
   1d7f2:	2300      	movs	r3, #0
   1d7f4:	f8c0 3006 	str.w	r3, [r0, #6]
   1d7f8:	f8c0 300a 	str.w	r3, [r0, #10]
   1d7fc:	f8c0 300e 	str.w	r3, [r0, #14]
   1d800:	f8c0 3012 	str.w	r3, [r0, #18]
   1d804:	2001      	movs	r0, #1
   1d806:	4770      	bx	lr

0001d808 <hci_vendor_read_key_hierarchy_roots>:
   1d808:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d80e:	6003      	str	r3, [r0, #0]
   1d810:	6043      	str	r3, [r0, #4]
   1d812:	6083      	str	r3, [r0, #8]
   1d814:	60c3      	str	r3, [r0, #12]
   1d816:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1d81a:	3301      	adds	r3, #1
   1d81c:	d03a      	beq.n	1d894 <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d81e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d822:	3301      	adds	r3, #1
   1d824:	d036      	beq.n	1d894 <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d826:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d82a:	3301      	adds	r3, #1
   1d82c:	d032      	beq.n	1d894 <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1d82e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d832:	3301      	adds	r3, #1
   1d834:	d02e      	beq.n	1d894 <hci_vendor_read_key_hierarchy_roots+0x8c>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1d836:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   1d83a:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d83c:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1d83e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   1d842:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d846:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1d848:	f881 c003 	strb.w	ip, [r1, #3]
   1d84c:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1d84e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   1d852:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1d854:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1d856:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   1d85a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d85e:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   1d860:	f881 c007 	strb.w	ip, [r1, #7]
   1d864:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1d866:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   1d86a:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1d86c:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1d86e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   1d872:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d876:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   1d878:	724b      	strb	r3, [r1, #9]
   1d87a:	f881 c00b 	strb.w	ip, [r1, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1d87e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   1d882:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1d884:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1d886:	0a10      	lsrs	r0, r2, #8
   1d888:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d88c:	734b      	strb	r3, [r1, #13]
	dst[0] = val;
   1d88e:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   1d890:	73c8      	strb	r0, [r1, #15]
}
   1d892:	4770      	bx	lr
   1d894:	2300      	movs	r3, #0
   1d896:	600b      	str	r3, [r1, #0]
   1d898:	604b      	str	r3, [r1, #4]
   1d89a:	608b      	str	r3, [r1, #8]
   1d89c:	60cb      	str	r3, [r1, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1d89e:	4770      	bx	lr

0001d8a0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d8a0:	4b02      	ldr	r3, [pc, #8]	; (1d8ac <net_buf_pool_get+0xc>)
   1d8a2:	2228      	movs	r2, #40	; 0x28
   1d8a4:	fb02 3000 	mla	r0, r2, r0, r3
   1d8a8:	4770      	bx	lr
   1d8aa:	bf00      	nop
   1d8ac:	20000ff8 	.word	0x20000ff8

0001d8b0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d8b0:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1d8b2:	4b05      	ldr	r3, [pc, #20]	; (1d8c8 <net_buf_id+0x18>)
   1d8b4:	2128      	movs	r1, #40	; 0x28
   1d8b6:	fb01 3302 	mla	r3, r1, r2, r3
   1d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d8bc:	1ac0      	subs	r0, r0, r3
}
   1d8be:	4b03      	ldr	r3, [pc, #12]	; (1d8cc <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1d8c0:	10c0      	asrs	r0, r0, #3
}
   1d8c2:	4358      	muls	r0, r3
   1d8c4:	4770      	bx	lr
   1d8c6:	bf00      	nop
   1d8c8:	20000ff8 	.word	0x20000ff8
   1d8cc:	aaaaaaab 	.word	0xaaaaaaab

0001d8d0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1d8d0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d8d2:	4b0a      	ldr	r3, [pc, #40]	; (1d8fc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d8d4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d8d6:	2428      	movs	r4, #40	; 0x28
   1d8d8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1d8dc:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d8de:	6a1b      	ldr	r3, [r3, #32]
   1d8e0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d8e2:	6823      	ldr	r3, [r4, #0]
   1d8e4:	429a      	cmp	r2, r3
   1d8e6:	bf94      	ite	ls
   1d8e8:	600a      	strls	r2, [r1, #0]
   1d8ea:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d8ec:	f7ff ffe0 	bl	1d8b0 <net_buf_id>
   1d8f0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d8f4:	fb02 3000 	mla	r0, r2, r0, r3
   1d8f8:	bd10      	pop	{r4, pc}
   1d8fa:	bf00      	nop
   1d8fc:	20000ff8 	.word	0x20000ff8

0001d900 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d904:	4605      	mov	r5, r0
   1d906:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1d908:	4610      	mov	r0, r2
   1d90a:	4619      	mov	r1, r3
{
   1d90c:	4691      	mov	r9, r2
   1d90e:	4698      	mov	r8, r3
   1d910:	4617      	mov	r7, r2
   1d912:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1d914:	f008 fb1e 	bl	25f54 <z_timeout_end_calc>
   1d918:	4682      	mov	sl, r0
   1d91a:	468b      	mov	fp, r1
	__asm__ volatile(
   1d91c:	f04f 0320 	mov.w	r3, #32
   1d920:	f3ef 8111 	mrs	r1, BASEPRI
   1d924:	f383 8811 	msr	BASEPRI, r3
   1d928:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d92c:	8b6b      	ldrh	r3, [r5, #26]
   1d92e:	2b00      	cmp	r3, #0
   1d930:	d055      	beq.n	1d9de <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d932:	8b2a      	ldrh	r2, [r5, #24]
   1d934:	429a      	cmp	r2, r3
   1d936:	d93e      	bls.n	1d9b6 <net_buf_alloc_len+0xb6>
   1d938:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1d93a:	2200      	movs	r2, #0
   1d93c:	2300      	movs	r3, #0
   1d93e:	4628      	mov	r0, r5
   1d940:	f001 fa4a 	bl	1edd8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d944:	9900      	ldr	r1, [sp, #0]
   1d946:	4604      	mov	r4, r0
   1d948:	2800      	cmp	r0, #0
   1d94a:	d034      	beq.n	1d9b6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1d94c:	f381 8811 	msr	BASEPRI, r1
   1d950:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d954:	9b01      	ldr	r3, [sp, #4]
   1d956:	2b00      	cmp	r3, #0
   1d958:	d051      	beq.n	1d9fe <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d95a:	ea58 0309 	orrs.w	r3, r8, r9
   1d95e:	d00f      	beq.n	1d980 <net_buf_alloc_len+0x80>
   1d960:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1d964:	bf08      	it	eq
   1d966:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1d96a:	d009      	beq.n	1d980 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1d96c:	f002 f850 	bl	1fa10 <z_tick_get>
   1d970:	ebba 0700 	subs.w	r7, sl, r0
   1d974:	eb6b 0601 	sbc.w	r6, fp, r1
   1d978:	2e00      	cmp	r6, #0
   1d97a:	bfbc      	itt	lt
   1d97c:	2700      	movlt	r7, #0
   1d97e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d980:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d982:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1da14 <net_buf_alloc_len+0x114>
   1d986:	2228      	movs	r2, #40	; 0x28
   1d988:	fb02 8303 	mla	r3, r2, r3, r8
   1d98c:	a901      	add	r1, sp, #4
   1d98e:	6a1b      	ldr	r3, [r3, #32]
   1d990:	681b      	ldr	r3, [r3, #0]
   1d992:	463a      	mov	r2, r7
   1d994:	681d      	ldr	r5, [r3, #0]
   1d996:	4620      	mov	r0, r4
   1d998:	4633      	mov	r3, r6
   1d99a:	47a8      	blx	r5
   1d99c:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d99e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d9a0:	bb70      	cbnz	r0, 1da00 <net_buf_alloc_len+0x100>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1d9a2:	79a0      	ldrb	r0, [r4, #6]
   1d9a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d9a8:	4621      	mov	r1, r4
   1d9aa:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1d9ae:	f008 f88f 	bl	25ad0 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d9b2:	462c      	mov	r4, r5
}
   1d9b4:	e01f      	b.n	1d9f6 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   1d9b6:	8b6b      	ldrh	r3, [r5, #26]
   1d9b8:	1e5a      	subs	r2, r3, #1
   1d9ba:	836a      	strh	r2, [r5, #26]
   1d9bc:	f381 8811 	msr	BASEPRI, r1
   1d9c0:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d9c4:	8b2c      	ldrh	r4, [r5, #24]
   1d9c6:	1ae3      	subs	r3, r4, r3
   1d9c8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1d9ca:	2018      	movs	r0, #24
   1d9cc:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1d9d0:	4810      	ldr	r0, [pc, #64]	; (1da14 <net_buf_alloc_len+0x114>)
   1d9d2:	4b11      	ldr	r3, [pc, #68]	; (1da18 <net_buf_alloc_len+0x118>)
   1d9d4:	1a2d      	subs	r5, r5, r0
   1d9d6:	10ed      	asrs	r5, r5, #3
   1d9d8:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d9da:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d9dc:	e7ba      	b.n	1d954 <net_buf_alloc_len+0x54>
   1d9de:	f381 8811 	msr	BASEPRI, r1
   1d9e2:	f3bf 8f6f 	isb	sy
   1d9e6:	464a      	mov	r2, r9
   1d9e8:	4643      	mov	r3, r8
   1d9ea:	4628      	mov	r0, r5
   1d9ec:	f001 f9f4 	bl	1edd8 <z_impl_k_queue_get>
	if (!buf) {
   1d9f0:	4604      	mov	r4, r0
   1d9f2:	2800      	cmp	r0, #0
   1d9f4:	d1ae      	bne.n	1d954 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   1d9f6:	4620      	mov	r0, r4
   1d9f8:	b003      	add	sp, #12
   1d9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1d9fe:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1da00:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1da02:	2201      	movs	r2, #1
	buf->frags = NULL;
   1da04:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1da06:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1da08:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1da0a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1da0c:	6923      	ldr	r3, [r4, #16]
   1da0e:	81e2      	strh	r2, [r4, #14]
   1da10:	60a3      	str	r3, [r4, #8]
	return buf;
   1da12:	e7f0      	b.n	1d9f6 <net_buf_alloc_len+0xf6>
   1da14:	20000ff8 	.word	0x20000ff8
   1da18:	cccccccd 	.word	0xcccccccd

0001da1c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1da1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da20:	4d17      	ldr	r5, [pc, #92]	; (1da80 <net_buf_unref+0x64>)
   1da22:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1da24:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1da26:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1da28:	b90c      	cbnz	r4, 1da2e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1da2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1da2e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1da30:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1da34:	3b01      	subs	r3, #1
   1da36:	b2db      	uxtb	r3, r3
   1da38:	7123      	strb	r3, [r4, #4]
   1da3a:	2b00      	cmp	r3, #0
   1da3c:	d1f5      	bne.n	1da2a <net_buf_unref+0xe>
		if (buf->__buf) {
   1da3e:	6921      	ldr	r1, [r4, #16]
   1da40:	b159      	cbz	r1, 1da5a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1da42:	7963      	ldrb	r3, [r4, #5]
   1da44:	079b      	lsls	r3, r3, #30
   1da46:	d407      	bmi.n	1da58 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1da48:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1da4a:	fb07 5303 	mla	r3, r7, r3, r5
   1da4e:	4620      	mov	r0, r4
   1da50:	6a1b      	ldr	r3, [r3, #32]
   1da52:	681b      	ldr	r3, [r3, #0]
   1da54:	689b      	ldr	r3, [r3, #8]
   1da56:	4798      	blx	r3
			buf->__buf = NULL;
   1da58:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1da5a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1da5c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1da5e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1da62:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1da64:	69db      	ldr	r3, [r3, #28]
   1da66:	b11b      	cbz	r3, 1da70 <net_buf_unref+0x54>
			pool->destroy(buf);
   1da68:	4620      	mov	r0, r4
   1da6a:	4798      	blx	r3
{
   1da6c:	4644      	mov	r4, r8
   1da6e:	e7db      	b.n	1da28 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1da70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1da74:	4621      	mov	r1, r4
   1da76:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1da7a:	f008 f829 	bl	25ad0 <k_queue_prepend>
}
   1da7e:	e7f5      	b.n	1da6c <net_buf_unref+0x50>
   1da80:	20000ff8 	.word	0x20000ff8

0001da84 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1da84:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1da86:	4b09      	ldr	r3, [pc, #36]	; (1daac <gpio_nrfx_init+0x28>)
   1da88:	781a      	ldrb	r2, [r3, #0]
   1da8a:	b96a      	cbnz	r2, 1daa8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1da8c:	2101      	movs	r1, #1
   1da8e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1da90:	2006      	movs	r0, #6
   1da92:	2105      	movs	r1, #5
   1da94:	f7e8 fe5c 	bl	6750 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1da98:	2006      	movs	r0, #6
   1da9a:	f7e8 fe27 	bl	66ec <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1da9e:	4b04      	ldr	r3, [pc, #16]	; (1dab0 <gpio_nrfx_init+0x2c>)
   1daa0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1daa4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1daa8:	2000      	movs	r0, #0
   1daaa:	bd08      	pop	{r3, pc}
   1daac:	20003bcb 	.word	0x20003bcb
   1dab0:	40006000 	.word	0x40006000

0001dab4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dab4:	4b2b      	ldr	r3, [pc, #172]	; (1db64 <gpio_nrfx_config+0xb0>)
{
   1dab6:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
   1dab8:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1daba:	482b      	ldr	r0, [pc, #172]	; (1db68 <gpio_nrfx_config+0xb4>)
   1dabc:	4013      	ands	r3, r2
   1dabe:	4283      	cmp	r3, r0
   1dac0:	d041      	beq.n	1db46 <gpio_nrfx_config+0x92>
   1dac2:	d80d      	bhi.n	1dae0 <gpio_nrfx_config+0x2c>
   1dac4:	2b06      	cmp	r3, #6
   1dac6:	d015      	beq.n	1daf4 <gpio_nrfx_config+0x40>
   1dac8:	d805      	bhi.n	1dad6 <gpio_nrfx_config+0x22>
   1daca:	b19b      	cbz	r3, 1daf4 <gpio_nrfx_config+0x40>
   1dacc:	2b02      	cmp	r3, #2
   1dace:	d03c      	beq.n	1db4a <gpio_nrfx_config+0x96>
   1dad0:	f06f 0015 	mvn.w	r0, #21
   1dad4:	e036      	b.n	1db44 <gpio_nrfx_config+0x90>
   1dad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1dada:	d1f9      	bne.n	1dad0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1dadc:	2301      	movs	r3, #1
   1dade:	e009      	b.n	1daf4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dae0:	4822      	ldr	r0, [pc, #136]	; (1db6c <gpio_nrfx_config+0xb8>)
   1dae2:	4283      	cmp	r3, r0
   1dae4:	d033      	beq.n	1db4e <gpio_nrfx_config+0x9a>
   1dae6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1daea:	d032      	beq.n	1db52 <gpio_nrfx_config+0x9e>
   1daec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1daf0:	d1ee      	bne.n	1dad0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1daf2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1daf4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1daf6:	bf54      	ite	pl
   1daf8:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1dafc:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1dafe:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1db02:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1db04:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1db08:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1db0c:	d507      	bpl.n	1db1e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1db0e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1db12:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1db14:	d01f      	beq.n	1db56 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1db16:	2201      	movs	r2, #1
   1db18:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1db1a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1db1e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1db20:	4c13      	ldr	r4, [pc, #76]	; (1db70 <gpio_nrfx_config+0xbc>)
   1db22:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1db24:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1db28:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1db2c:	bf18      	it	ne
   1db2e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1db32:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1db36:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1db3a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1db3e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1db42:	2000      	movs	r0, #0
}
   1db44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1db46:	2307      	movs	r3, #7
   1db48:	e7d4      	b.n	1daf4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1db4a:	2304      	movs	r3, #4
   1db4c:	e7d2      	b.n	1daf4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1db4e:	2305      	movs	r3, #5
   1db50:	e7d0      	b.n	1daf4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1db52:	2303      	movs	r3, #3
   1db54:	e7ce      	b.n	1daf4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1db56:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1db58:	bf42      	ittt	mi
   1db5a:	2201      	movmi	r2, #1
   1db5c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1db5e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1db62:	e7dc      	b.n	1db1e <gpio_nrfx_config+0x6a>
   1db64:	00f00006 	.word	0x00f00006
   1db68:	00100006 	.word	0x00100006
   1db6c:	00400002 	.word	0x00400002
   1db70:	50000300 	.word	0x50000300

0001db74 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1db74:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1db78:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1db7a:	4b08      	ldr	r3, [pc, #32]	; (1db9c <nrf_gpio_cfg_sense_set+0x28>)
   1db7c:	2801      	cmp	r0, #1
   1db7e:	bf18      	it	ne
   1db80:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1db84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1db88:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1db8c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1db90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1db94:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1db98:	4770      	bx	lr
   1db9a:	bf00      	nop
   1db9c:	50000300 	.word	0x50000300

0001dba0 <gpiote_event_handler>:
{
   1dba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1dba2:	2600      	movs	r6, #0
   1dba4:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dba8:	4d28      	ldr	r5, [pc, #160]	; (1dc4c <gpiote_event_handler+0xac>)
   1dbaa:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   1dbae:	b15c      	cbz	r4, 1dbc8 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   1dbb0:	4827      	ldr	r0, [pc, #156]	; (1dc50 <gpiote_event_handler+0xb0>)
   1dbb2:	f007 fd47 	bl	25644 <check_level_trigger_pins>
		fired_triggers[0] =
   1dbb6:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
   1dbb8:	4826      	ldr	r0, [pc, #152]	; (1dc54 <gpiote_event_handler+0xb4>)
   1dbba:	f007 fd43 	bl	25644 <check_level_trigger_pins>
		fired_triggers[1] =
   1dbbe:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dbc0:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   1dbc4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   1dbc8:	4923      	ldr	r1, [pc, #140]	; (1dc58 <gpiote_event_handler+0xb8>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1dbca:	4d20      	ldr	r5, [pc, #128]	; (1dc4c <gpiote_event_handler+0xac>)
   1dbcc:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1dbce:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dbd0:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1dbd2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1dbd6:	fa06 f002 	lsl.w	r0, r6, r2
   1dbda:	4218      	tst	r0, r3
   1dbdc:	d016      	beq.n	1dc0c <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbde:	680b      	ldr	r3, [r1, #0]
   1dbe0:	b1a3      	cbz	r3, 1dc0c <gpiote_event_handler+0x6c>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1dbe2:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1dbe6:	af02      	add	r7, sp, #8
   1dbe8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dbec:	f8c1 c000 	str.w	ip, [r1]
   1dbf0:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1dbf4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1dbf8:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1dbfc:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1dc00:	fa06 f303 	lsl.w	r3, r6, r3
   1dc04:	433b      	orrs	r3, r7
   1dc06:	f840 3c08 	str.w	r3, [r0, #-8]
   1dc0a:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1dc0c:	3201      	adds	r2, #1
   1dc0e:	2a08      	cmp	r2, #8
   1dc10:	f101 0104 	add.w	r1, r1, #4
   1dc14:	d1dd      	bne.n	1dbd2 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   1dc16:	9a00      	ldr	r2, [sp, #0]
   1dc18:	b122      	cbz	r2, 1dc24 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   1dc1a:	4b10      	ldr	r3, [pc, #64]	; (1dc5c <gpiote_event_handler+0xbc>)
   1dc1c:	490c      	ldr	r1, [pc, #48]	; (1dc50 <gpiote_event_handler+0xb0>)
   1dc1e:	6858      	ldr	r0, [r3, #4]
   1dc20:	f007 fcd9 	bl	255d6 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   1dc24:	9a01      	ldr	r2, [sp, #4]
   1dc26:	b122      	cbz	r2, 1dc32 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   1dc28:	4b0d      	ldr	r3, [pc, #52]	; (1dc60 <gpiote_event_handler+0xc0>)
   1dc2a:	490a      	ldr	r1, [pc, #40]	; (1dc54 <gpiote_event_handler+0xb4>)
   1dc2c:	6858      	ldr	r0, [r3, #4]
   1dc2e:	f007 fcd2 	bl	255d6 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   1dc32:	b144      	cbz	r4, 1dc46 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   1dc34:	4806      	ldr	r0, [pc, #24]	; (1dc50 <gpiote_event_handler+0xb0>)
   1dc36:	f007 fcdf 	bl	255f8 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   1dc3a:	4806      	ldr	r0, [pc, #24]	; (1dc54 <gpiote_event_handler+0xb4>)
}
   1dc3c:	b003      	add	sp, #12
   1dc3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   1dc42:	f007 bcd9 	b.w	255f8 <cfg_level_pins>
}
   1dc46:	b003      	add	sp, #12
   1dc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc4a:	bf00      	nop
   1dc4c:	40006000 	.word	0x40006000
   1dc50:	20000eb0 	.word	0x20000eb0
   1dc54:	20000ec0 	.word	0x20000ec0
   1dc58:	40006100 	.word	0x40006100
   1dc5c:	2000352c 	.word	0x2000352c
   1dc60:	20003548 	.word	0x20003548

0001dc64 <gpio_nrfx_pin_interrupt_configure>:
{
   1dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc66:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1dc68:	6842      	ldr	r2, [r0, #4]
	return port->data;
   1dc6a:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1dc6c:	7a10      	ldrb	r0, [r2, #8]
   1dc6e:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1dc72:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
   1dc76:	460e      	mov	r6, r1
   1dc78:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1dc7c:	d110      	bne.n	1dca0 <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
   1dc7e:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   1dc80:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   1dc82:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
   1dc86:	496e      	ldr	r1, [pc, #440]	; (1de40 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1dc88:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1dc8c:	bf18      	it	ne
   1dc8e:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1dc92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1dc96:	07d2      	lsls	r2, r2, #31
   1dc98:	d507      	bpl.n	1dcaa <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   1dc9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dc9e:	e0c1      	b.n	1de24 <gpio_nrfx_pin_interrupt_configure+0x1c0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1dca0:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   1dca4:	68f9      	ldr	r1, [r7, #12]
   1dca6:	f000 80ae 	beq.w	1de06 <gpio_nrfx_pin_interrupt_configure+0x1a2>
   1dcaa:	68fa      	ldr	r2, [r7, #12]
   1dcac:	2101      	movs	r1, #1
   1dcae:	40b1      	lsls	r1, r6
   1dcb0:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1dcb2:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1dcb4:	60f9      	str	r1, [r7, #12]
   1dcb6:	2101      	movs	r1, #1
   1dcb8:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1dcba:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1dcbe:	bf0c      	ite	eq
   1dcc0:	430a      	orreq	r2, r1
   1dcc2:	438a      	bicne	r2, r1
   1dcc4:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1dcc6:	69ba      	ldr	r2, [r7, #24]
   1dcc8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1dccc:	bf0c      	ite	eq
   1dcce:	430a      	orreq	r2, r1
   1dcd0:	438a      	bicne	r2, r1
   1dcd2:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1dcd4:	693a      	ldr	r2, [r7, #16]
   1dcd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1dcda:	bf0c      	ite	eq
   1dcdc:	4311      	orreq	r1, r2
   1dcde:	ea22 0101 	bicne.w	r1, r2, r1
   1dce2:	6139      	str	r1, [r7, #16]
    return p_reg->INTENSET & mask;
   1dce4:	4957      	ldr	r1, [pc, #348]	; (1de44 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1dce6:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1dcea:	2300      	movs	r3, #0
   1dcec:	b2d2      	uxtb	r2, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1dcee:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1dcf2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1dcf6:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1dcfa:	4285      	cmp	r5, r0
   1dcfc:	f040 8088 	bne.w	1de10 <gpio_nrfx_pin_interrupt_configure+0x1ac>
		    && (intenset & BIT(i))) {
   1dd00:	fa22 f003 	lsr.w	r0, r2, r3
   1dd04:	07c0      	lsls	r0, r0, #31
   1dd06:	f140 8083 	bpl.w	1de10 <gpio_nrfx_pin_interrupt_configure+0x1ac>
			(void)atomic_and(mask, ~BIT(i));
   1dd0a:	2201      	movs	r2, #1
   1dd0c:	409a      	lsls	r2, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dd0e:	484e      	ldr	r0, [pc, #312]	; (1de48 <gpio_nrfx_pin_interrupt_configure+0x1e4>)
   1dd10:	f3bf 8f5b 	dmb	ish
   1dd14:	43d4      	mvns	r4, r2
   1dd16:	e850 cf00 	ldrex	ip, [r0]
   1dd1a:	ea0c 0c04 	and.w	ip, ip, r4
   1dd1e:	e840 ce00 	strex	lr, ip, [r0]
   1dd22:	f1be 0f00 	cmp.w	lr, #0
   1dd26:	d1f6      	bne.n	1dd16 <gpio_nrfx_pin_interrupt_configure+0xb2>
   1dd28:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1dd2c:	009b      	lsls	r3, r3, #2
   1dd2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1dd32:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1dd36:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1dd3a:	f020 0001 	bic.w	r0, r0, #1
   1dd3e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1dd42:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1dd46:	2100      	movs	r1, #0
   1dd48:	4628      	mov	r0, r5
   1dd4a:	f7ff ff13 	bl	1db74 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1dd4e:	68fb      	ldr	r3, [r7, #12]
   1dd50:	40f3      	lsrs	r3, r6
   1dd52:	f013 0301 	ands.w	r3, r3, #1
   1dd56:	d054      	beq.n	1de02 <gpio_nrfx_pin_interrupt_configure+0x19e>
		if (data->trig_edge & BIT(pin)) {
   1dd58:	697b      	ldr	r3, [r7, #20]
   1dd5a:	40f3      	lsrs	r3, r6
   1dd5c:	f013 0401 	ands.w	r4, r3, #1
   1dd60:	d061      	beq.n	1de26 <gpio_nrfx_pin_interrupt_configure+0x1c2>
			if (data->double_edge & BIT(pin)) {
   1dd62:	69bb      	ldr	r3, [r7, #24]
   1dd64:	40f3      	lsrs	r3, r6
   1dd66:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1dd68:	bf58      	it	pl
   1dd6a:	6939      	ldrpl	r1, [r7, #16]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dd6c:	4f36      	ldr	r7, [pc, #216]	; (1de48 <gpio_nrfx_pin_interrupt_configure+0x1e4>)
   1dd6e:	bf5f      	itttt	pl
   1dd70:	fa21 f606 	lsrpl.w	r6, r1, r6
   1dd74:	f006 0601 	andpl.w	r6, r6, #1
   1dd78:	f1c6 0602 	rsbpl	r6, r6, #2
   1dd7c:	b2f6      	uxtbpl	r6, r6
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1dd7e:	bf48      	it	mi
   1dd80:	2603      	movmi	r6, #3
   1dd82:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1dd84:	f04f 0c01 	mov.w	ip, #1
   1dd88:	b2d1      	uxtb	r1, r2
   1dd8a:	fa0c f402 	lsl.w	r4, ip, r2
   1dd8e:	f3bf 8f5b 	dmb	ish
   1dd92:	e857 0f00 	ldrex	r0, [r7]
   1dd96:	ea40 0304 	orr.w	r3, r0, r4
   1dd9a:	e847 3e00 	strex	lr, r3, [r7]
   1dd9e:	f1be 0f00 	cmp.w	lr, #0
   1dda2:	d1f6      	bne.n	1dd92 <gpio_nrfx_pin_interrupt_configure+0x12e>
   1dda4:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1dda8:	40d0      	lsrs	r0, r2
   1ddaa:	f010 0301 	ands.w	r3, r0, #1
   1ddae:	d134      	bne.n	1de1a <gpio_nrfx_pin_interrupt_configure+0x1b6>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ddb0:	0092      	lsls	r2, r2, #2
   1ddb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ddb6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   1ddba:	3140      	adds	r1, #64	; 0x40
   1ddbc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ddc0:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1ddc4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1ddc8:	b2c9      	uxtb	r1, r1
   1ddca:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ddce:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   1ddd0:	0089      	lsls	r1, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ddd2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ddd6:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
   1ddda:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1ddde:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dde2:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1dde6:	4306      	orrs	r6, r0
   1dde8:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ddec:	600b      	str	r3, [r1, #0]
   1ddee:	6809      	ldr	r1, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ddf0:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1ddf4:	f041 0101 	orr.w	r1, r1, #1
   1ddf8:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1ddfc:	4a11      	ldr	r2, [pc, #68]	; (1de44 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1ddfe:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
	int res = 0;
   1de02:	4618      	mov	r0, r3
   1de04:	e00e      	b.n	1de24 <gpio_nrfx_pin_interrupt_configure+0x1c0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1de06:	2201      	movs	r2, #1
   1de08:	40b2      	lsls	r2, r6
   1de0a:	ea21 0102 	bic.w	r1, r1, r2
   1de0e:	e750      	b.n	1dcb2 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1de10:	3301      	adds	r3, #1
   1de12:	2b08      	cmp	r3, #8
   1de14:	f47f af6b 	bne.w	1dcee <gpio_nrfx_pin_interrupt_configure+0x8a>
   1de18:	e795      	b.n	1dd46 <gpio_nrfx_pin_interrupt_configure+0xe2>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1de1a:	3201      	adds	r2, #1
   1de1c:	2a08      	cmp	r2, #8
   1de1e:	d1b3      	bne.n	1dd88 <gpio_nrfx_pin_interrupt_configure+0x124>
	return -ENODEV;
   1de20:	f06f 0012 	mvn.w	r0, #18
}
   1de24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1de26:	6939      	ldr	r1, [r7, #16]
   1de28:	40f1      	lsrs	r1, r6
   1de2a:	f001 0101 	and.w	r1, r1, #1
   1de2e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1de32:	4628      	mov	r0, r5
   1de34:	b2c9      	uxtb	r1, r1
   1de36:	f7ff fe9d 	bl	1db74 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1de3a:	4620      	mov	r0, r4
   1de3c:	e7f2      	b.n	1de24 <gpio_nrfx_pin_interrupt_configure+0x1c0>
   1de3e:	bf00      	nop
   1de40:	50000300 	.word	0x50000300
   1de44:	40006000 	.word	0x40006000
   1de48:	20003564 	.word	0x20003564

0001de4c <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1de4c:	4b07      	ldr	r3, [pc, #28]	; (1de6c <uart_nrfx_poll_in+0x20>)
   1de4e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1de52:	b142      	cbz	r2, 1de66 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de54:	2000      	movs	r0, #0
   1de56:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   1de5a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1de5e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1de62:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1de64:	4770      	bx	lr
		return -1;
   1de66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1de6a:	4770      	bx	lr
   1de6c:	40002000 	.word	0x40002000

0001de70 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1de70:	4b02      	ldr	r3, [pc, #8]	; (1de7c <uart_nrfx_err_check+0xc>)
   1de72:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1de76:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1de7a:	4770      	bx	lr
   1de7c:	40002000 	.word	0x40002000

0001de80 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1de80:	b570      	push	{r4, r5, r6, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1de82:	794b      	ldrb	r3, [r1, #5]
   1de84:	2b01      	cmp	r3, #1
   1de86:	d024      	beq.n	1ded2 <uart_nrfx_configure+0x52>
   1de88:	2b03      	cmp	r3, #3
   1de8a:	d11f      	bne.n	1decc <uart_nrfx_configure+0x4c>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1de8c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1de8e:	798b      	ldrb	r3, [r1, #6]
   1de90:	2b03      	cmp	r3, #3
   1de92:	d11b      	bne.n	1decc <uart_nrfx_configure+0x4c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1de94:	79cc      	ldrb	r4, [r1, #7]
   1de96:	b10c      	cbz	r4, 1de9c <uart_nrfx_configure+0x1c>
   1de98:	2c01      	cmp	r4, #1
   1de9a:	d117      	bne.n	1decc <uart_nrfx_configure+0x4c>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1de9c:	790a      	ldrb	r2, [r1, #4]
   1de9e:	b112      	cbz	r2, 1dea6 <uart_nrfx_configure+0x26>
   1dea0:	2a02      	cmp	r2, #2
   1dea2:	d113      	bne.n	1decc <uart_nrfx_configure+0x4c>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1dea4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1dea6:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1dea8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1deac:	d062      	beq.n	1df74 <uart_nrfx_configure+0xf4>
   1deae:	d82d      	bhi.n	1df0c <uart_nrfx_configure+0x8c>
   1deb0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1deb4:	d060      	beq.n	1df78 <uart_nrfx_configure+0xf8>
   1deb6:	d816      	bhi.n	1dee6 <uart_nrfx_configure+0x66>
   1deb8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1debc:	d05e      	beq.n	1df7c <uart_nrfx_configure+0xfc>
   1debe:	d80a      	bhi.n	1ded6 <uart_nrfx_configure+0x56>
   1dec0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1dec4:	d05d      	beq.n	1df82 <uart_nrfx_configure+0x102>
   1dec6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1deca:	d05d      	beq.n	1df88 <uart_nrfx_configure+0x108>
   1decc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ded0:	e04f      	b.n	1df72 <uart_nrfx_configure+0xf2>
	switch (cfg->stop_bits) {
   1ded2:	2600      	movs	r6, #0
   1ded4:	e7db      	b.n	1de8e <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1ded6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1deda:	d058      	beq.n	1df8e <uart_nrfx_configure+0x10e>
   1dedc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1dee0:	d1f4      	bne.n	1decc <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1dee2:	4b35      	ldr	r3, [pc, #212]	; (1dfb8 <uart_nrfx_configure+0x138>)
   1dee4:	e039      	b.n	1df5a <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1dee6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1deea:	d053      	beq.n	1df94 <uart_nrfx_configure+0x114>
   1deec:	d807      	bhi.n	1defe <uart_nrfx_configure+0x7e>
   1deee:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1def2:	d051      	beq.n	1df98 <uart_nrfx_configure+0x118>
   1def4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1def8:	d1e8      	bne.n	1decc <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1defa:	4b30      	ldr	r3, [pc, #192]	; (1dfbc <uart_nrfx_configure+0x13c>)
   1defc:	e02d      	b.n	1df5a <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1defe:	f647 2512 	movw	r5, #31250	; 0x7a12
   1df02:	42ab      	cmp	r3, r5
   1df04:	d1e2      	bne.n	1decc <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1df06:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1df0a:	e026      	b.n	1df5a <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1df0c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1df10:	d045      	beq.n	1df9e <uart_nrfx_configure+0x11e>
   1df12:	d811      	bhi.n	1df38 <uart_nrfx_configure+0xb8>
   1df14:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1df18:	d043      	beq.n	1dfa2 <uart_nrfx_configure+0x122>
   1df1a:	d808      	bhi.n	1df2e <uart_nrfx_configure+0xae>
   1df1c:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1df20:	42ab      	cmp	r3, r5
   1df22:	d040      	beq.n	1dfa6 <uart_nrfx_configure+0x126>
   1df24:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1df28:	d1d0      	bne.n	1decc <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1df2a:	4b25      	ldr	r3, [pc, #148]	; (1dfc0 <uart_nrfx_configure+0x140>)
   1df2c:	e015      	b.n	1df5a <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1df2e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1df32:	d1cb      	bne.n	1decc <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1df34:	4b23      	ldr	r3, [pc, #140]	; (1dfc4 <uart_nrfx_configure+0x144>)
   1df36:	e010      	b.n	1df5a <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1df38:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1df3c:	d036      	beq.n	1dfac <uart_nrfx_configure+0x12c>
   1df3e:	d807      	bhi.n	1df50 <uart_nrfx_configure+0xd0>
   1df40:	4d21      	ldr	r5, [pc, #132]	; (1dfc8 <uart_nrfx_configure+0x148>)
   1df42:	42ab      	cmp	r3, r5
   1df44:	d034      	beq.n	1dfb0 <uart_nrfx_configure+0x130>
   1df46:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1df4a:	d1bf      	bne.n	1decc <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1df4c:	4b1f      	ldr	r3, [pc, #124]	; (1dfcc <uart_nrfx_configure+0x14c>)
   1df4e:	e004      	b.n	1df5a <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1df50:	4d1f      	ldr	r5, [pc, #124]	; (1dfd0 <uart_nrfx_configure+0x150>)
   1df52:	42ab      	cmp	r3, r5
   1df54:	d1ba      	bne.n	1decc <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1df56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1df5a:	4d1e      	ldr	r5, [pc, #120]	; (1dfd4 <uart_nrfx_configure+0x154>)
                    | (uint32_t)p_cfg->hwfc;
   1df5c:	4334      	orrs	r4, r6
   1df5e:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1df60:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1df64:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1df68:	68c3      	ldr	r3, [r0, #12]
   1df6a:	c903      	ldmia	r1, {r0, r1}
   1df6c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1df70:	2000      	movs	r0, #0
}
   1df72:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1df74:	4b18      	ldr	r3, [pc, #96]	; (1dfd8 <uart_nrfx_configure+0x158>)
   1df76:	e7f0      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1df78:	4b18      	ldr	r3, [pc, #96]	; (1dfdc <uart_nrfx_configure+0x15c>)
   1df7a:	e7ee      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1df7c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1df80:	e7eb      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1df82:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1df86:	e7e8      	b.n	1df5a <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1df88:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1df8c:	e7e5      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1df8e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1df92:	e7e2      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1df94:	4b12      	ldr	r3, [pc, #72]	; (1dfe0 <uart_nrfx_configure+0x160>)
   1df96:	e7e0      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1df98:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1df9c:	e7dd      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1df9e:	4b11      	ldr	r3, [pc, #68]	; (1dfe4 <uart_nrfx_configure+0x164>)
   1dfa0:	e7db      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1dfa2:	4b11      	ldr	r3, [pc, #68]	; (1dfe8 <uart_nrfx_configure+0x168>)
   1dfa4:	e7d9      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1dfa6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1dfaa:	e7d6      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1dfac:	4b0f      	ldr	r3, [pc, #60]	; (1dfec <uart_nrfx_configure+0x16c>)
   1dfae:	e7d4      	b.n	1df5a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1dfb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1dfb4:	e7d1      	b.n	1df5a <uart_nrfx_configure+0xda>
   1dfb6:	bf00      	nop
   1dfb8:	0013b000 	.word	0x0013b000
   1dfbc:	004ea000 	.word	0x004ea000
   1dfc0:	00ebf000 	.word	0x00ebf000
   1dfc4:	01d7e000 	.word	0x01d7e000
   1dfc8:	0003d090 	.word	0x0003d090
   1dfcc:	075f7000 	.word	0x075f7000
   1dfd0:	000f4240 	.word	0x000f4240
   1dfd4:	40002000 	.word	0x40002000
   1dfd8:	009d5000 	.word	0x009d5000
   1dfdc:	00275000 	.word	0x00275000
   1dfe0:	0075f000 	.word	0x0075f000
   1dfe4:	03afb000 	.word	0x03afb000
   1dfe8:	013a9000 	.word	0x013a9000
   1dfec:	0ebed000 	.word	0x0ebed000

0001dff0 <uart_nrfx_poll_out>:
{
   1dff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dff2:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1dff4:	f007 fed8 	bl	25da8 <k_is_in_isr>
   1dff8:	4d1a      	ldr	r5, [pc, #104]	; (1e064 <uart_nrfx_poll_out+0x74>)
   1dffa:	bb78      	cbnz	r0, 1e05c <uart_nrfx_poll_out+0x6c>
   1dffc:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1dffe:	2701      	movs	r7, #1
   1e000:	f3bf 8f5b 	dmb	ish
   1e004:	e855 3f00 	ldrex	r3, [r5]
   1e008:	2b00      	cmp	r3, #0
   1e00a:	d103      	bne.n	1e014 <uart_nrfx_poll_out+0x24>
   1e00c:	e845 7200 	strex	r2, r7, [r5]
   1e010:	2a00      	cmp	r2, #0
   1e012:	d1f7      	bne.n	1e004 <uart_nrfx_poll_out+0x14>
   1e014:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1e018:	d007      	beq.n	1e02a <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1e01a:	2021      	movs	r0, #33	; 0x21
   1e01c:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   1e01e:	3c01      	subs	r4, #1
   1e020:	f001 fa3e 	bl	1f4a0 <z_impl_k_sleep>
   1e024:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1e028:	d1ea      	bne.n	1e000 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e02a:	4c0f      	ldr	r4, [pc, #60]	; (1e068 <uart_nrfx_poll_out+0x78>)
   1e02c:	2300      	movs	r3, #0
   1e02e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1e032:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e036:	2301      	movs	r3, #1
   1e038:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   1e03a:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   1e03e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e042:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1e046:	b923      	cbnz	r3, 1e052 <uart_nrfx_poll_out+0x62>
   1e048:	2001      	movs	r0, #1
   1e04a:	f007 fbe9 	bl	25820 <nrfx_busy_wait>
   1e04e:	3e01      	subs	r6, #1
   1e050:	d1f7      	bne.n	1e042 <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e052:	2301      	movs	r3, #1
   1e054:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1e056:	2300      	movs	r3, #0
   1e058:	602b      	str	r3, [r5, #0]
}
   1e05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1e05c:	2301      	movs	r3, #1
   1e05e:	602b      	str	r3, [r5, #0]
   1e060:	e7e3      	b.n	1e02a <uart_nrfx_poll_out+0x3a>
   1e062:	bf00      	nop
   1e064:	20003568 	.word	0x20003568
   1e068:	40002000 	.word	0x40002000

0001e06c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1e06c:	b538      	push	{r3, r4, r5, lr}
    p_reg->OUTSET = set_mask;
   1e06e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1e072:	4c16      	ldr	r4, [pc, #88]	; (1e0cc <uart_nrfx_init+0x60>)
   1e074:	2200      	movs	r2, #0
   1e076:	2140      	movs	r1, #64	; 0x40
   1e078:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.RXD = pselrxd;
   1e07c:	2508      	movs	r5, #8
   1e07e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e082:	2103      	movs	r1, #3
   1e084:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1e088:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1e08c:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1e090:	2506      	movs	r5, #6
   1e092:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1e096:	2520      	movs	r5, #32
   1e098:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e09c:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1e0a0:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
   1e0a4:	2305      	movs	r3, #5
   1e0a6:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1e0aa:	2307      	movs	r3, #7
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e0ac:	68c1      	ldr	r1, [r0, #12]
   1e0ae:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1e0b2:	f7ff fee5 	bl	1de80 <uart_nrfx_configure>
	if (err) {
   1e0b6:	b940      	cbnz	r0, 1e0ca <uart_nrfx_init+0x5e>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1e0b8:	2304      	movs	r3, #4
   1e0ba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e0be:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   1e0c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e0c6:	2301      	movs	r3, #1
   1e0c8:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1e0ca:	bd38      	pop	{r3, r4, r5, pc}
   1e0cc:	40002000 	.word	0x40002000

0001e0d0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1e0d0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1e0d2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e0d6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1e0d8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1e0da:	6002      	str	r2, [r0, #0]
}
   1e0dc:	4802      	ldr	r0, [pc, #8]	; (1e0e8 <nrf_gpio_pin_port_decode+0x18>)
   1e0de:	bf18      	it	ne
   1e0e0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1e0e4:	4770      	bx	lr
   1e0e6:	bf00      	nop
   1e0e8:	50000300 	.word	0x50000300

0001e0ec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e0ee:	794b      	ldrb	r3, [r1, #5]
   1e0f0:	2b01      	cmp	r3, #1
   1e0f2:	d029      	beq.n	1e148 <uarte_nrfx_configure+0x5c>
   1e0f4:	2b03      	cmp	r3, #3
   1e0f6:	d124      	bne.n	1e142 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e0f8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e0fa:	798b      	ldrb	r3, [r1, #6]
   1e0fc:	2b03      	cmp	r3, #3
   1e0fe:	d120      	bne.n	1e142 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e100:	79cc      	ldrb	r4, [r1, #7]
   1e102:	b124      	cbz	r4, 1e10e <uarte_nrfx_configure+0x22>
   1e104:	2c01      	cmp	r4, #1
   1e106:	d11c      	bne.n	1e142 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1e108:	6843      	ldr	r3, [r0, #4]
   1e10a:	791b      	ldrb	r3, [r3, #4]
   1e10c:	b1cb      	cbz	r3, 1e142 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e10e:	790a      	ldrb	r2, [r1, #4]
   1e110:	b112      	cbz	r2, 1e118 <uarte_nrfx_configure+0x2c>
   1e112:	2a02      	cmp	r2, #2
   1e114:	d115      	bne.n	1e142 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e116:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e118:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e11a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e11c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e120:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e122:	d065      	beq.n	1e1f0 <uarte_nrfx_configure+0x104>
   1e124:	d82d      	bhi.n	1e182 <uarte_nrfx_configure+0x96>
   1e126:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e12a:	d064      	beq.n	1e1f6 <uarte_nrfx_configure+0x10a>
   1e12c:	d816      	bhi.n	1e15c <uarte_nrfx_configure+0x70>
   1e12e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e132:	d062      	beq.n	1e1fa <uarte_nrfx_configure+0x10e>
   1e134:	d80a      	bhi.n	1e14c <uarte_nrfx_configure+0x60>
   1e136:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e13a:	d061      	beq.n	1e200 <uarte_nrfx_configure+0x114>
   1e13c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e140:	d061      	beq.n	1e206 <uarte_nrfx_configure+0x11a>
   1e142:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e146:	e052      	b.n	1e1ee <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   1e148:	2600      	movs	r6, #0
   1e14a:	e7d6      	b.n	1e0fa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e14c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e150:	d05c      	beq.n	1e20c <uarte_nrfx_configure+0x120>
   1e152:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e156:	d1f4      	bne.n	1e142 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e158:	4b37      	ldr	r3, [pc, #220]	; (1e238 <uarte_nrfx_configure+0x14c>)
   1e15a:	e03c      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e15c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e160:	d057      	beq.n	1e212 <uarte_nrfx_configure+0x126>
   1e162:	d807      	bhi.n	1e174 <uarte_nrfx_configure+0x88>
   1e164:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e168:	d055      	beq.n	1e216 <uarte_nrfx_configure+0x12a>
   1e16a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e16e:	d1e8      	bne.n	1e142 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e170:	4b32      	ldr	r3, [pc, #200]	; (1e23c <uarte_nrfx_configure+0x150>)
   1e172:	e030      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e174:	f647 2712 	movw	r7, #31250	; 0x7a12
   1e178:	42bb      	cmp	r3, r7
   1e17a:	d1e2      	bne.n	1e142 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e17c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e180:	e029      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e182:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e186:	d048      	beq.n	1e21a <uarte_nrfx_configure+0x12e>
   1e188:	d813      	bhi.n	1e1b2 <uarte_nrfx_configure+0xc6>
   1e18a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e18e:	d047      	beq.n	1e220 <uarte_nrfx_configure+0x134>
   1e190:	d809      	bhi.n	1e1a6 <uarte_nrfx_configure+0xba>
   1e192:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1e196:	42bb      	cmp	r3, r7
   1e198:	d044      	beq.n	1e224 <uarte_nrfx_configure+0x138>
   1e19a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e19e:	d1d0      	bne.n	1e142 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e1a0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e1a4:	e017      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e1a6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e1aa:	d1ca      	bne.n	1e142 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e1ac:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e1b0:	e011      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e1b2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e1b6:	d038      	beq.n	1e22a <uarte_nrfx_configure+0x13e>
   1e1b8:	d808      	bhi.n	1e1cc <uarte_nrfx_configure+0xe0>
   1e1ba:	4f21      	ldr	r7, [pc, #132]	; (1e240 <uarte_nrfx_configure+0x154>)
   1e1bc:	42bb      	cmp	r3, r7
   1e1be:	d037      	beq.n	1e230 <uarte_nrfx_configure+0x144>
   1e1c0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e1c4:	d1bd      	bne.n	1e142 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e1c6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e1ca:	e004      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e1cc:	4f1d      	ldr	r7, [pc, #116]	; (1e244 <uarte_nrfx_configure+0x158>)
   1e1ce:	42bb      	cmp	r3, r7
   1e1d0:	d1b7      	bne.n	1e142 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e1d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e1d6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1e1da:	68c3      	ldr	r3, [r0, #12]
   1e1dc:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e1de:	4334      	orrs	r4, r6
   1e1e0:	4322      	orrs	r2, r4
   1e1e2:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e1e4:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e1e8:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e1ec:	2000      	movs	r0, #0
}
   1e1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e1f0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e1f4:	e7ef      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e1f6:	4b14      	ldr	r3, [pc, #80]	; (1e248 <uarte_nrfx_configure+0x15c>)
   1e1f8:	e7ed      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e1fa:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e1fe:	e7ea      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1e200:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e204:	e7e7      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e206:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e20a:	e7e4      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e20c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e210:	e7e1      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e212:	4b0e      	ldr	r3, [pc, #56]	; (1e24c <uarte_nrfx_configure+0x160>)
   1e214:	e7df      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e216:	4b0e      	ldr	r3, [pc, #56]	; (1e250 <uarte_nrfx_configure+0x164>)
   1e218:	e7dd      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e21a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e21e:	e7da      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e220:	4b0c      	ldr	r3, [pc, #48]	; (1e254 <uarte_nrfx_configure+0x168>)
   1e222:	e7d8      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e224:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e228:	e7d5      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e22a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e22e:	e7d2      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e230:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e234:	e7cf      	b.n	1e1d6 <uarte_nrfx_configure+0xea>
   1e236:	bf00      	nop
   1e238:	0013b000 	.word	0x0013b000
   1e23c:	004ea000 	.word	0x004ea000
   1e240:	0003d090 	.word	0x0003d090
   1e244:	000f4240 	.word	0x000f4240
   1e248:	00275000 	.word	0x00275000
   1e24c:	0075c000 	.word	0x0075c000
   1e250:	003af000 	.word	0x003af000
   1e254:	013a9000 	.word	0x013a9000

0001e258 <random_byte_get>:
	__asm__ volatile(
   1e258:	f04f 0320 	mov.w	r3, #32
   1e25c:	f3ef 8211 	mrs	r2, BASEPRI
   1e260:	f383 8811 	msr	BASEPRI, r3
   1e264:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e268:	4b09      	ldr	r3, [pc, #36]	; (1e290 <random_byte_get+0x38>)
   1e26a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e26e:	b161      	cbz	r1, 1e28a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e270:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e272:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e276:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1e27a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e27e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e280:	f382 8811 	msr	BASEPRI, r2
   1e284:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e288:	4770      	bx	lr
	int retval = -EAGAIN;
   1e28a:	f06f 000a 	mvn.w	r0, #10
   1e28e:	e7f7      	b.n	1e280 <random_byte_get+0x28>
   1e290:	4000d000 	.word	0x4000d000

0001e294 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e294:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e296:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1e298:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e29a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e29c:	f04f 0020 	mov.w	r0, #32
   1e2a0:	f3ef 8e11 	mrs	lr, BASEPRI
   1e2a4:	f380 8811 	msr	BASEPRI, r0
   1e2a8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e2ac:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e2ae:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1e2b2:	1ba4      	subs	r4, r4, r6
   1e2b4:	403c      	ands	r4, r7
	if (available < len) {
   1e2b6:	42a2      	cmp	r2, r4
		len = available;
   1e2b8:	bf88      	it	hi
   1e2ba:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e2bc:	18b0      	adds	r0, r6, r2
   1e2be:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1e2c0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e2c2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1e2c4:	f38e 8811 	msr	BASEPRI, lr
   1e2c8:	f3bf 8f6f 	isb	sy
   1e2cc:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1e2ce:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e2d0:	4290      	cmp	r0, r2
   1e2d2:	d119      	bne.n	1e308 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e2d4:	4566      	cmp	r6, ip
   1e2d6:	d10d      	bne.n	1e2f4 <rng_pool_get+0x60>
	__asm__ volatile(
   1e2d8:	f04f 0520 	mov.w	r5, #32
   1e2dc:	f3ef 8011 	mrs	r0, BASEPRI
   1e2e0:	f385 8811 	msr	BASEPRI, r5
   1e2e4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e2e8:	781d      	ldrb	r5, [r3, #0]
   1e2ea:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e2ec:	f380 8811 	msr	BASEPRI, r0
   1e2f0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e2f4:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e2f6:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e2f8:	b290      	uxth	r0, r2
	available = available - len;
   1e2fa:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1e2fc:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e2fe:	bf22      	ittt	cs
   1e300:	4b06      	ldrcs	r3, [pc, #24]	; (1e31c <rng_pool_get+0x88>)
   1e302:	2201      	movcs	r2, #1
   1e304:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e306:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e308:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1e30c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e30e:	f89e e005 	ldrb.w	lr, [lr, #5]
   1e312:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1e316:	403d      	ands	r5, r7
   1e318:	e7da      	b.n	1e2d0 <rng_pool_get+0x3c>
   1e31a:	bf00      	nop
   1e31c:	4000d000 	.word	0x4000d000

0001e320 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e320:	43db      	mvns	r3, r3
{
   1e322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e326:	f013 0501 	ands.w	r5, r3, #1
{
   1e32a:	460e      	mov	r6, r1
   1e32c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e32e:	d004      	beq.n	1e33a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e330:	4821      	ldr	r0, [pc, #132]	; (1e3b8 <entropy_nrf5_get_entropy_isr+0x98>)
   1e332:	f7ff ffaf 	bl	1e294 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e33a:	b3a2      	cbz	r2, 1e3a6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1e33c:	f04f 0320 	mov.w	r3, #32
   1e340:	f3ef 8811 	mrs	r8, BASEPRI
   1e344:	f383 8811 	msr	BASEPRI, r3
   1e348:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e34c:	200d      	movs	r0, #13
   1e34e:	f7e8 f9f1 	bl	6734 <arch_irq_is_enabled>
   1e352:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e354:	200d      	movs	r0, #13
   1e356:	f7e8 f9d9 	bl	670c <arch_irq_disable>
	__asm__ volatile(
   1e35a:	f388 8811 	msr	BASEPRI, r8
   1e35e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e362:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1e3bc <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e366:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1e3c0 <entropy_nrf5_get_entropy_isr+0xa0>
   1e36a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1e36e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1e372:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e376:	2301      	movs	r3, #1
   1e378:	f8c8 3000 	str.w	r3, [r8]
   1e37c:	4625      	mov	r5, r4
   1e37e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e382:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1e386:	b183      	cbz	r3, 1e3aa <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1e388:	f7ff ff66 	bl	1e258 <random_byte_get>
			if (byte < 0) {
   1e38c:	1e03      	subs	r3, r0, #0
   1e38e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1e392:	dbf6      	blt.n	1e382 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1e394:	3d01      	subs	r5, #1
   1e396:	b2ad      	uxth	r5, r5
   1e398:	5573      	strb	r3, [r6, r5]
		} while (len);
   1e39a:	2d00      	cmp	r5, #0
   1e39c:	d1f1      	bne.n	1e382 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1e39e:	b117      	cbz	r7, 1e3a6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1e3a0:	200d      	movs	r0, #13
   1e3a2:	f7e8 f9a3 	bl	66ec <arch_irq_enable>
	return cnt;
   1e3a6:	4620      	mov	r0, r4
   1e3a8:	e7c5      	b.n	1e336 <entropy_nrf5_get_entropy_isr+0x16>
   1e3aa:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e3ae:	bf20      	wfe
				__SEV();
   1e3b0:	bf40      	sev
				__WFE();
   1e3b2:	bf20      	wfe
   1e3b4:	e7e5      	b.n	1e382 <entropy_nrf5_get_entropy_isr+0x62>
   1e3b6:	bf00      	nop
   1e3b8:	2000359c 	.word	0x2000359c
   1e3bc:	4000d000 	.word	0x4000d000
   1e3c0:	e000e100 	.word	0xe000e100

0001e3c4 <entropy_nrf5_get_entropy>:
{
   1e3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1e3c8:	4f13      	ldr	r7, [pc, #76]	; (1e418 <entropy_nrf5_get_entropy+0x54>)
   1e3ca:	460d      	mov	r5, r1
   1e3cc:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e3ce:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1e3d2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1e3d6:	b914      	cbnz	r4, 1e3de <entropy_nrf5_get_entropy+0x1a>
}
   1e3d8:	4620      	mov	r0, r4
   1e3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e3de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e3e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e3e6:	4638      	mov	r0, r7
   1e3e8:	f001 f8a0 	bl	1f52c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e3ec:	4622      	mov	r2, r4
   1e3ee:	4629      	mov	r1, r5
   1e3f0:	4640      	mov	r0, r8
   1e3f2:	f7ff ff4f 	bl	1e294 <rng_pool_get>
   1e3f6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1e3f8:	4638      	mov	r0, r7
   1e3fa:	f001 f871 	bl	1f4e0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e3fe:	b93e      	cbnz	r6, 1e410 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1e400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e408:	4648      	mov	r0, r9
   1e40a:	f001 f88f 	bl	1f52c <z_impl_k_sem_take>
			continue;
   1e40e:	e7e2      	b.n	1e3d6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1e410:	1ba4      	subs	r4, r4, r6
   1e412:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e414:	4435      	add	r5, r6
   1e416:	e7de      	b.n	1e3d6 <entropy_nrf5_get_entropy+0x12>
   1e418:	2000356c 	.word	0x2000356c

0001e41c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1e41c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e41e:	4c19      	ldr	r4, [pc, #100]	; (1e484 <entropy_nrf5_init+0x68>)
   1e420:	2201      	movs	r2, #1
   1e422:	4611      	mov	r1, r2
   1e424:	4620      	mov	r0, r4
   1e426:	f007 fcaf 	bl	25d88 <z_impl_k_sem_init>
   1e42a:	2201      	movs	r2, #1
   1e42c:	2100      	movs	r1, #0
   1e42e:	f104 0018 	add.w	r0, r4, #24
   1e432:	f007 fca9 	bl	25d88 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1e436:	f240 4307 	movw	r3, #1031	; 0x407
   1e43a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1e43e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e442:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1e444:	230c      	movs	r3, #12
   1e446:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1e44a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1e44c:	4b0e      	ldr	r3, [pc, #56]	; (1e488 <entropy_nrf5_init+0x6c>)
   1e44e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1e452:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1e456:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e45a:	f042 0201 	orr.w	r2, r2, #1
   1e45e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1e462:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e464:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1e468:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e46c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e470:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e472:	6019      	str	r1, [r3, #0]
   1e474:	200d      	movs	r0, #13
   1e476:	f7e8 f96b 	bl	6750 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e47a:	200d      	movs	r0, #13
   1e47c:	f7e8 f936 	bl	66ec <arch_irq_enable>

	return 0;
}
   1e480:	4628      	mov	r0, r5
   1e482:	bd38      	pop	{r3, r4, r5, pc}
   1e484:	2000356c 	.word	0x2000356c
   1e488:	4000d000 	.word	0x4000d000

0001e48c <isr>:
{
   1e48c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e48e:	f7ff fee3 	bl	1e258 <random_byte_get>
	if (byte < 0) {
   1e492:	2800      	cmp	r0, #0
   1e494:	db20      	blt.n	1e4d8 <isr+0x4c>
	uint8_t last  = rngp->last;
   1e496:	4b17      	ldr	r3, [pc, #92]	; (1e4f4 <isr+0x68>)
   1e498:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1e49c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1e4a0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1e4a4:	1a51      	subs	r1, r2, r1
   1e4a6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e4aa:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1e4ac:	d10d      	bne.n	1e4ca <isr+0x3e>
	uint8_t last  = rngp->last;
   1e4ae:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1e4b2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1e4b6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1e4ba:	1a51      	subs	r1, r2, r1
   1e4bc:	ea34 0101 	bics.w	r1, r4, r1
   1e4c0:	d10b      	bne.n	1e4da <isr+0x4e>
   1e4c2:	4b0d      	ldr	r3, [pc, #52]	; (1e4f8 <isr+0x6c>)
   1e4c4:	2201      	movs	r2, #1
   1e4c6:	605a      	str	r2, [r3, #4]
}
   1e4c8:	e00e      	b.n	1e4e8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1e4ca:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e4cc:	3201      	adds	r2, #1
   1e4ce:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e4d0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1e4d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1e4d8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1e4da:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e4dc:	3201      	adds	r2, #1
   1e4de:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e4e0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1e4e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1e4e8:	4804      	ldr	r0, [pc, #16]	; (1e4fc <isr+0x70>)
}
   1e4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e4ee:	f000 bff7 	b.w	1f4e0 <z_impl_k_sem_give>
   1e4f2:	bf00      	nop
   1e4f4:	2000356c 	.word	0x2000356c
   1e4f8:	4000d000 	.word	0x4000d000
   1e4fc:	20003584 	.word	0x20003584

0001e500 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e500:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e504:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e508:	2a08      	cmp	r2, #8
   1e50a:	d106      	bne.n	1e51a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e50c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1e510:	2b03      	cmp	r3, #3
   1e512:	d802      	bhi.n	1e51a <nrf52_errata_103+0x1a>
   1e514:	4a02      	ldr	r2, [pc, #8]	; (1e520 <nrf52_errata_103+0x20>)
   1e516:	5cd0      	ldrb	r0, [r2, r3]
   1e518:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1e51a:	2000      	movs	r0, #0
    #endif
}
   1e51c:	4770      	bx	lr
   1e51e:	bf00      	nop
   1e520:	0002a44c 	.word	0x0002a44c

0001e524 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1e524:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   1e526:	f007 f971 	bl	2580c <nrf52_errata_136>
   1e52a:	b140      	cbz	r0, 1e53e <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
   1e52c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e530:	2200      	movs	r2, #0
   1e532:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   1e536:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1e53a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   1e53e:	f007 f965 	bl	2580c <nrf52_errata_136>
   1e542:	2800      	cmp	r0, #0
   1e544:	d046      	beq.n	1e5d4 <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1e546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e54a:	4b5b      	ldr	r3, [pc, #364]	; (1e6b8 <SystemInit+0x194>)
   1e54c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1e550:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1e554:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1e558:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1e55c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1e560:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1e564:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1e568:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1e56c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1e570:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1e574:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1e578:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1e57c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1e580:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1e584:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1e588:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1e58c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1e590:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1e594:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1e598:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1e59c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1e5a0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1e5a4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1e5a8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1e5ac:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1e5b0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1e5b4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1e5b8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1e5bc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1e5c0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1e5c4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1e5c8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1e5cc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1e5d0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
   1e5d4:	f7ff ff94 	bl	1e500 <nrf52_errata_103>
   1e5d8:	b118      	cbz	r0, 1e5e2 <SystemInit+0xbe>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1e5da:	4b38      	ldr	r3, [pc, #224]	; (1e6bc <SystemInit+0x198>)
   1e5dc:	4a38      	ldr	r2, [pc, #224]	; (1e6c0 <SystemInit+0x19c>)
   1e5de:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
   1e5e2:	f7ff ff8d 	bl	1e500 <nrf52_errata_103>
   1e5e6:	b118      	cbz	r0, 1e5f0 <SystemInit+0xcc>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1e5e8:	4b36      	ldr	r3, [pc, #216]	; (1e6c4 <SystemInit+0x1a0>)
   1e5ea:	22fb      	movs	r2, #251	; 0xfb
   1e5ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
   1e5f0:	f7ff ff86 	bl	1e500 <nrf52_errata_103>
   1e5f4:	b170      	cbz	r0, 1e614 <SystemInit+0xf0>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   1e5f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1e5fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e5fe:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1e602:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1e606:	f022 020f 	bic.w	r2, r2, #15
   1e60a:	f003 030f 	and.w	r3, r3, #15
   1e60e:	4313      	orrs	r3, r2
   1e610:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
   1e614:	f7ff ff74 	bl	1e500 <nrf52_errata_103>
   1e618:	b120      	cbz	r0, 1e624 <SystemInit+0x100>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1e61a:	4b2b      	ldr	r3, [pc, #172]	; (1e6c8 <SystemInit+0x1a4>)
   1e61c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e620:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   1e624:	f007 f8f2 	bl	2580c <nrf52_errata_136>
   1e628:	b148      	cbz	r0, 1e63e <SystemInit+0x11a>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1e62a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e62e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e632:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1e634:	bf44      	itt	mi
   1e636:	f06f 0201 	mvnmi.w	r2, #1
   1e63a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e63e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e642:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1e646:	2a00      	cmp	r2, #0
   1e648:	db03      	blt.n	1e652 <SystemInit+0x12e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1e64a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e64e:	2b00      	cmp	r3, #0
   1e650:	da2e      	bge.n	1e6b0 <SystemInit+0x18c>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1e652:	4b1e      	ldr	r3, [pc, #120]	; (1e6cc <SystemInit+0x1a8>)
   1e654:	2201      	movs	r2, #1
   1e656:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e65a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e65e:	2a00      	cmp	r2, #0
   1e660:	d0fb      	beq.n	1e65a <SystemInit+0x136>
            NRF_UICR->PSELRESET[0] = 18;
   1e662:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1e666:	2112      	movs	r1, #18
   1e668:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e66c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e670:	2a00      	cmp	r2, #0
   1e672:	d0fb      	beq.n	1e66c <SystemInit+0x148>
            NRF_UICR->PSELRESET[1] = 18;
   1e674:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e678:	2212      	movs	r2, #18
   1e67a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e67e:	4b13      	ldr	r3, [pc, #76]	; (1e6cc <SystemInit+0x1a8>)
   1e680:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e684:	2a00      	cmp	r2, #0
   1e686:	d0fb      	beq.n	1e680 <SystemInit+0x15c>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1e688:	2200      	movs	r2, #0
   1e68a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e68e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e692:	2a00      	cmp	r2, #0
   1e694:	d0fb      	beq.n	1e68e <SystemInit+0x16a>
   1e696:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1e69a:	490d      	ldr	r1, [pc, #52]	; (1e6d0 <SystemInit+0x1ac>)
   1e69c:	4b0d      	ldr	r3, [pc, #52]	; (1e6d4 <SystemInit+0x1b0>)
   1e69e:	68ca      	ldr	r2, [r1, #12]
   1e6a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e6a4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1e6a6:	60cb      	str	r3, [r1, #12]
   1e6a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1e6ac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1e6ae:	e7fd      	b.n	1e6ac <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1e6b0:	4b09      	ldr	r3, [pc, #36]	; (1e6d8 <SystemInit+0x1b4>)
   1e6b2:	4a0a      	ldr	r2, [pc, #40]	; (1e6dc <SystemInit+0x1b8>)
   1e6b4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1e6b6:	bd08      	pop	{r3, pc}
   1e6b8:	4000c000 	.word	0x4000c000
   1e6bc:	40005000 	.word	0x40005000
   1e6c0:	00038148 	.word	0x00038148
   1e6c4:	4000f000 	.word	0x4000f000
   1e6c8:	40029000 	.word	0x40029000
   1e6cc:	4001e000 	.word	0x4001e000
   1e6d0:	e000ed00 	.word	0xe000ed00
   1e6d4:	05fa0004 	.word	0x05fa0004
   1e6d8:	20000d0c 	.word	0x20000d0c
   1e6dc:	03d09000 	.word	0x03d09000

0001e6e0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1e6e0:	4b04      	ldr	r3, [pc, #16]	; (1e6f4 <nrfx_clock_init+0x14>)
   1e6e2:	791a      	ldrb	r2, [r3, #4]
   1e6e4:	b922      	cbnz	r2, 1e6f0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1e6e6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1e6e8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1e6ea:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1e6ec:	4802      	ldr	r0, [pc, #8]	; (1e6f8 <nrfx_clock_init+0x18>)
   1e6ee:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1e6f0:	4802      	ldr	r0, [pc, #8]	; (1e6fc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e6f2:	4770      	bx	lr
   1e6f4:	200035c0 	.word	0x200035c0
   1e6f8:	0bad0000 	.word	0x0bad0000
   1e6fc:	0bad000c 	.word	0x0bad000c

0001e700 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1e700:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1e702:	b110      	cbz	r0, 1e70a <nrfx_clock_stop+0xa>
   1e704:	2801      	cmp	r0, #1
   1e706:	d017      	beq.n	1e738 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1e708:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1e70a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1e70e:	2302      	movs	r3, #2
   1e710:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e714:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1e718:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e71c:	2301      	movs	r3, #1
   1e71e:	60e3      	str	r3, [r4, #12]
   1e720:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e724:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1e728:	03db      	lsls	r3, r3, #15
   1e72a:	d5ed      	bpl.n	1e708 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1e72c:	2001      	movs	r0, #1
   1e72e:	f007 f877 	bl	25820 <nrfx_busy_wait>
   1e732:	3d01      	subs	r5, #1
   1e734:	d1f6      	bne.n	1e724 <nrfx_clock_stop+0x24>
   1e736:	e7e7      	b.n	1e708 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1e738:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e73c:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1e73e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e742:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e746:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e74a:	6060      	str	r0, [r4, #4]
   1e74c:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1e750:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e754:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1e758:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1e75a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e75e:	d505      	bpl.n	1e76c <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1e760:	b123      	cbz	r3, 1e76c <nrfx_clock_stop+0x6c>
   1e762:	2001      	movs	r0, #1
   1e764:	f007 f85c 	bl	25820 <nrfx_busy_wait>
   1e768:	3d01      	subs	r5, #1
   1e76a:	d1f1      	bne.n	1e750 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1e76c:	4b01      	ldr	r3, [pc, #4]	; (1e774 <nrfx_clock_stop+0x74>)
   1e76e:	2200      	movs	r2, #0
   1e770:	715a      	strb	r2, [r3, #5]
   1e772:	e7c9      	b.n	1e708 <nrfx_clock_stop+0x8>
   1e774:	200035c0 	.word	0x200035c0

0001e778 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1e77c:	b510      	push	{r4, lr}
   1e77e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1e782:	b16a      	cbz	r2, 1e7a0 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e784:	2200      	movs	r2, #0
   1e786:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e78a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1e78e:	2201      	movs	r2, #1
   1e790:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1e794:	4b0c      	ldr	r3, [pc, #48]	; (1e7c8 <nrfx_power_clock_irq_handler+0x50>)
   1e796:	7958      	ldrb	r0, [r3, #5]
   1e798:	b910      	cbnz	r0, 1e7a0 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1e79a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1e79c:	681b      	ldr	r3, [r3, #0]
   1e79e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e7a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e7a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1e7a8:	b16a      	cbz	r2, 1e7c6 <nrfx_power_clock_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e7aa:	2200      	movs	r2, #0
   1e7ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e7b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
   1e7b4:	2202      	movs	r2, #2
   1e7b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e7ba:	4b03      	ldr	r3, [pc, #12]	; (1e7c8 <nrfx_power_clock_irq_handler+0x50>)
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1e7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e7c0:	681b      	ldr	r3, [r3, #0]
   1e7c2:	2001      	movs	r0, #1
   1e7c4:	4718      	bx	r3
}
   1e7c6:	bd10      	pop	{r4, pc}
   1e7c8:	200035c0 	.word	0x200035c0

0001e7cc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1e7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e7ce:	4b10      	ldr	r3, [pc, #64]	; (1e810 <z_sys_init_run_level+0x44>)
			/* Initialization was successful.
			 * Set the init status bit so device is declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1e7d0:	4f10      	ldr	r7, [pc, #64]	; (1e814 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e7d2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1e7d6:	3001      	adds	r0, #1
   1e7d8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1e7dc:	42ae      	cmp	r6, r5
   1e7de:	d800      	bhi.n	1e7e2 <z_sys_init_run_level+0x16>
		}
	}
}
   1e7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) == 0) && (dev != NULL)) {
   1e7e2:	e9d5 3400 	ldrd	r3, r4, [r5]
   1e7e6:	4620      	mov	r0, r4
   1e7e8:	4798      	blx	r3
   1e7ea:	b970      	cbnz	r0, 1e80a <z_sys_init_run_level+0x3e>
   1e7ec:	b16c      	cbz	r4, 1e80a <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1e7ee:	1be4      	subs	r4, r4, r7
   1e7f0:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1e7f2:	0961      	lsrs	r1, r4, #5
   1e7f4:	4a08      	ldr	r2, [pc, #32]	; (1e818 <z_sys_init_run_level+0x4c>)
   1e7f6:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1e7fa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1e7fe:	2301      	movs	r3, #1
   1e800:	fa03 f404 	lsl.w	r4, r3, r4
   1e804:	4304      	orrs	r4, r0
   1e806:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e80a:	3508      	adds	r5, #8
   1e80c:	e7e6      	b.n	1e7dc <z_sys_init_run_level+0x10>
   1e80e:	bf00      	nop
   1e810:	0002835c 	.word	0x0002835c
   1e814:	20000e60 	.word	0x20000e60
   1e818:	20000ed0 	.word	0x20000ed0

0001e81c <z_device_ready>:
}

bool z_device_ready(const struct device *dev)
{
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1e81c:	4b08      	ldr	r3, [pc, #32]	; (1e840 <z_device_ready+0x24>)
   1e81e:	1ac0      	subs	r0, r0, r3
   1e820:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1e822:	4b08      	ldr	r3, [pc, #32]	; (1e844 <z_device_ready+0x28>)
   1e824:	0942      	lsrs	r2, r0, #5
   1e826:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1e82a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1e82e:	2301      	movs	r3, #1
   1e830:	fa03 f000 	lsl.w	r0, r3, r0
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1e834:	4210      	tst	r0, r2
}
   1e836:	bf14      	ite	ne
   1e838:	4618      	movne	r0, r3
   1e83a:	2000      	moveq	r0, #0
   1e83c:	4770      	bx	lr
   1e83e:	bf00      	nop
   1e840:	20000e60 	.word	0x20000e60
   1e844:	20000ed0 	.word	0x20000ed0

0001e848 <z_impl_device_get_binding>:
{
   1e848:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1e84a:	4c10      	ldr	r4, [pc, #64]	; (1e88c <z_impl_device_get_binding+0x44>)
   1e84c:	4e10      	ldr	r6, [pc, #64]	; (1e890 <z_impl_device_get_binding+0x48>)
{
   1e84e:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   1e850:	42b4      	cmp	r4, r6
   1e852:	d104      	bne.n	1e85e <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e854:	4c0d      	ldr	r4, [pc, #52]	; (1e88c <z_impl_device_get_binding+0x44>)
   1e856:	42b4      	cmp	r4, r6
   1e858:	d10a      	bne.n	1e870 <z_impl_device_get_binding+0x28>
	return NULL;
   1e85a:	2400      	movs	r4, #0
   1e85c:	e014      	b.n	1e888 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   1e85e:	4620      	mov	r0, r4
   1e860:	f7ff ffdc 	bl	1e81c <z_device_ready>
   1e864:	b110      	cbz	r0, 1e86c <z_impl_device_get_binding+0x24>
   1e866:	6823      	ldr	r3, [r4, #0]
   1e868:	42ab      	cmp	r3, r5
   1e86a:	d00d      	beq.n	1e888 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e86c:	3410      	adds	r4, #16
   1e86e:	e7ef      	b.n	1e850 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e870:	4620      	mov	r0, r4
   1e872:	f7ff ffd3 	bl	1e81c <z_device_ready>
   1e876:	b908      	cbnz	r0, 1e87c <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e878:	3410      	adds	r4, #16
   1e87a:	e7ec      	b.n	1e856 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e87c:	6821      	ldr	r1, [r4, #0]
   1e87e:	4628      	mov	r0, r5
   1e880:	f7e2 f8e4 	bl	a4c <strcmp>
   1e884:	2800      	cmp	r0, #0
   1e886:	d1f7      	bne.n	1e878 <z_impl_device_get_binding+0x30>
}
   1e888:	4620      	mov	r0, r4
   1e88a:	bd70      	pop	{r4, r5, r6, pc}
   1e88c:	20000e60 	.word	0x20000e60
   1e890:	20000ed0 	.word	0x20000ed0

0001e894 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1e894:	b510      	push	{r4, lr}
   1e896:	4604      	mov	r4, r0
	z_impl_log_panic();
   1e898:	f7e6 feac 	bl	55f4 <z_impl_log_panic>
   1e89c:	4b06      	ldr	r3, [pc, #24]	; (1e8b8 <k_sys_fatal_error_handler+0x24>)
   1e89e:	4907      	ldr	r1, [pc, #28]	; (1e8bc <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1e8a0:	4807      	ldr	r0, [pc, #28]	; (1e8c0 <k_sys_fatal_error_handler+0x2c>)
   1e8a2:	1ac9      	subs	r1, r1, r3
   1e8a4:	08c9      	lsrs	r1, r1, #3
   1e8a6:	0189      	lsls	r1, r1, #6
   1e8a8:	f041 0101 	orr.w	r1, r1, #1
   1e8ac:	f002 fbf0 	bl	21090 <log_0>
	arch_system_halt(reason);
   1e8b0:	4620      	mov	r0, r4
   1e8b2:	f006 ffdf 	bl	25874 <arch_system_halt>
   1e8b6:	bf00      	nop
   1e8b8:	00026828 	.word	0x00026828
   1e8bc:	00026970 	.word	0x00026970
   1e8c0:	0002a450 	.word	0x0002a450

0001e8c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1e8c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e8c8:	4605      	mov	r5, r0
   1e8ca:	460f      	mov	r7, r1
	__asm__ volatile(
   1e8cc:	f04f 0320 	mov.w	r3, #32
   1e8d0:	f3ef 8811 	mrs	r8, BASEPRI
   1e8d4:	f383 8811 	msr	BASEPRI, r3
   1e8d8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1e8dc:	f000 fdfa 	bl	1f4d4 <z_impl_k_current_get>
   1e8e0:	4c21      	ldr	r4, [pc, #132]	; (1e968 <z_fatal_error+0xa4>)
   1e8e2:	4b22      	ldr	r3, [pc, #136]	; (1e96c <z_fatal_error+0xa8>)
   1e8e4:	1ae4      	subs	r4, r4, r3
   1e8e6:	2d04      	cmp	r5, #4
   1e8e8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1e8ec:	bf96      	itet	ls
   1e8ee:	4a20      	ldrls	r2, [pc, #128]	; (1e970 <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1e8f0:	4a20      	ldrhi	r2, [pc, #128]	; (1e974 <z_fatal_error+0xb0>)
   1e8f2:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1e8f6:	01a4      	lsls	r4, r4, #6
   1e8f8:	f044 0301 	orr.w	r3, r4, #1
   1e8fc:	4606      	mov	r6, r0
   1e8fe:	f8ad 3000 	strh.w	r3, [sp]
   1e902:	481d      	ldr	r0, [pc, #116]	; (1e978 <z_fatal_error+0xb4>)
   1e904:	2300      	movs	r3, #0
   1e906:	4629      	mov	r1, r5
   1e908:	f002 fbfc 	bl	21104 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1e90c:	b147      	cbz	r7, 1e920 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1e90e:	69fb      	ldr	r3, [r7, #28]
   1e910:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1e914:	b123      	cbz	r3, 1e920 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1e916:	4819      	ldr	r0, [pc, #100]	; (1e97c <z_fatal_error+0xb8>)
   1e918:	f044 0101 	orr.w	r1, r4, #1
   1e91c:	f002 fbb8 	bl	21090 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1e920:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1e922:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1e926:	f007 fa4a 	bl	25dbe <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1e92a:	b1d0      	cbz	r0, 1e962 <z_fatal_error+0x9e>
   1e92c:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1e92e:	4b14      	ldr	r3, [pc, #80]	; (1e980 <z_fatal_error+0xbc>)
   1e930:	2a00      	cmp	r2, #0
   1e932:	bf08      	it	eq
   1e934:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1e936:	f7e6 fcd7 	bl	52e8 <log_strdup>
   1e93a:	4623      	mov	r3, r4
   1e93c:	4602      	mov	r2, r0
   1e93e:	4631      	mov	r1, r6
   1e940:	4810      	ldr	r0, [pc, #64]	; (1e984 <z_fatal_error+0xc0>)
   1e942:	f002 fbc6 	bl	210d2 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1e946:	4639      	mov	r1, r7
   1e948:	4628      	mov	r0, r5
   1e94a:	f7ff ffa3 	bl	1e894 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1e94e:	f388 8811 	msr	BASEPRI, r8
   1e952:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1e956:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1e958:	b002      	add	sp, #8
   1e95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e95e:	f7e8 ba27 	b.w	6db0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1e962:	4807      	ldr	r0, [pc, #28]	; (1e980 <z_fatal_error+0xbc>)
   1e964:	e7e7      	b.n	1e936 <z_fatal_error+0x72>
   1e966:	bf00      	nop
   1e968:	00026970 	.word	0x00026970
   1e96c:	00026828 	.word	0x00026828
   1e970:	00028374 	.word	0x00028374
   1e974:	0002a45f 	.word	0x0002a45f
   1e978:	0002a46d 	.word	0x0002a46d
   1e97c:	0002a495 	.word	0x0002a495
   1e980:	00029079 	.word	0x00029079
   1e984:	0002a4b6 	.word	0x0002a4b6

0001e988 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1e988:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1e98a:	4d0b      	ldr	r5, [pc, #44]	; (1e9b8 <idle+0x30>)
	__asm__ volatile(
   1e98c:	f04f 0220 	mov.w	r2, #32
   1e990:	f3ef 8311 	mrs	r3, BASEPRI
   1e994:	f382 8811 	msr	BASEPRI, r2
   1e998:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1e99c:	f007 faaa 	bl	25ef4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1e9a0:	2101      	movs	r1, #1
   1e9a2:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1e9a4:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1e9a6:	bfd8      	it	le
   1e9a8:	4608      	movle	r0, r1
   1e9aa:	f007 fab3 	bl	25f14 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1e9ae:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1e9b0:	f7e7 ff2e 	bl	6810 <arch_cpu_idle>
}
   1e9b4:	e7ea      	b.n	1e98c <idle+0x4>
   1e9b6:	bf00      	nop
   1e9b8:	200035c8 	.word	0x200035c8

0001e9bc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1e9bc:	4802      	ldr	r0, [pc, #8]	; (1e9c8 <z_bss_zero+0xc>)
   1e9be:	4a03      	ldr	r2, [pc, #12]	; (1e9cc <z_bss_zero+0x10>)
   1e9c0:	2100      	movs	r1, #0
   1e9c2:	1a12      	subs	r2, r2, r0
   1e9c4:	f007 bc75 	b.w	262b2 <memset>
   1e9c8:	200010e8 	.word	0x200010e8
   1e9cc:	20003bd0 	.word	0x20003bd0

0001e9d0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1e9d0:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e9d2:	4806      	ldr	r0, [pc, #24]	; (1e9ec <z_data_copy+0x1c>)
   1e9d4:	4a06      	ldr	r2, [pc, #24]	; (1e9f0 <z_data_copy+0x20>)
   1e9d6:	4907      	ldr	r1, [pc, #28]	; (1e9f4 <z_data_copy+0x24>)
   1e9d8:	1a12      	subs	r2, r2, r0
   1e9da:	f007 fc5c 	bl	26296 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1e9de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e9e2:	4a05      	ldr	r2, [pc, #20]	; (1e9f8 <z_data_copy+0x28>)
   1e9e4:	4905      	ldr	r1, [pc, #20]	; (1e9fc <z_data_copy+0x2c>)
   1e9e6:	4806      	ldr	r0, [pc, #24]	; (1ea00 <z_data_copy+0x30>)
   1e9e8:	f007 bc55 	b.w	26296 <memcpy>
   1e9ec:	20000000 	.word	0x20000000
   1e9f0:	200010e8 	.word	0x200010e8
   1e9f4:	0002a6c8 	.word	0x0002a6c8
   1e9f8:	00000000 	.word	0x00000000
   1e9fc:	0002a6c8 	.word	0x0002a6c8
   1ea00:	20000000 	.word	0x20000000

0001ea04 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1ea04:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1ea06:	4b0c      	ldr	r3, [pc, #48]	; (1ea38 <bg_thread_main+0x34>)
   1ea08:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ea0a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1ea0c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ea0e:	f7ff fedd 	bl	1e7cc <z_sys_init_run_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1ea12:	4a0a      	ldr	r2, [pc, #40]	; (1ea3c <bg_thread_main+0x38>)
   1ea14:	490a      	ldr	r1, [pc, #40]	; (1ea40 <bg_thread_main+0x3c>)
   1ea16:	480b      	ldr	r0, [pc, #44]	; (1ea44 <bg_thread_main+0x40>)
   1ea18:	f001 ffe1 	bl	209de <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ea1c:	2003      	movs	r0, #3
   1ea1e:	f7ff fed5 	bl	1e7cc <z_sys_init_run_level>

	z_init_static_threads();
   1ea22:	f000 fe1f 	bl	1f664 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1ea26:	f7e6 f827 	bl	4a78 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ea2a:	4a07      	ldr	r2, [pc, #28]	; (1ea48 <bg_thread_main+0x44>)
   1ea2c:	7b13      	ldrb	r3, [r2, #12]
   1ea2e:	f023 0301 	bic.w	r3, r3, #1
   1ea32:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ea34:	bd08      	pop	{r3, pc}
   1ea36:	bf00      	nop
   1ea38:	20003bcc 	.word	0x20003bcc
   1ea3c:	00028822 	.word	0x00028822
   1ea40:	0002a518 	.word	0x0002a518
   1ea44:	0002a522 	.word	0x0002a522
   1ea48:	200018c0 	.word	0x200018c0

0001ea4c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1ea4c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1ea50:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1ea52:	f7e6 fb93 	bl	517c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1ea56:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1eb2c <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ea5a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ea5e:	4d34      	ldr	r5, [pc, #208]	; (1eb30 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1ea60:	4e34      	ldr	r6, [pc, #208]	; (1eb34 <z_cstart+0xe8>)
   1ea62:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ea64:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1eb38 <z_cstart+0xec>
	z_setup_new_thread(thread, stack,
   1ea68:	4f34      	ldr	r7, [pc, #208]	; (1eb3c <z_cstart+0xf0>)
   1ea6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ea6e:	2400      	movs	r4, #0
   1ea70:	616b      	str	r3, [r5, #20]
   1ea72:	23e0      	movs	r3, #224	; 0xe0
   1ea74:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ea78:	77ec      	strb	r4, [r5, #31]
   1ea7a:	762c      	strb	r4, [r5, #24]
   1ea7c:	766c      	strb	r4, [r5, #25]
   1ea7e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ea80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ea82:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ea86:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ea88:	f7e8 f970 	bl	6d6c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ea8c:	f7e7 feba 	bl	6804 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ea90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ea94:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ea96:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1ea98:	4d29      	ldr	r5, [pc, #164]	; (1eb40 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ea9a:	f240 1301 	movw	r3, #257	; 0x101
   1ea9e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1eaa2:	ab06      	add	r3, sp, #24
   1eaa4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1eaa6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1eaa8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1eaac:	f7ff fe8e 	bl	1e7cc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1eab0:	2001      	movs	r0, #1
   1eab2:	f7ff fe8b 	bl	1e7cc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1eab6:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1eaba:	f000 fc65 	bl	1f388 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1eabe:	4b21      	ldr	r3, [pc, #132]	; (1eb44 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   1eac0:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1eac2:	4921      	ldr	r1, [pc, #132]	; (1eb48 <z_cstart+0xfc>)
   1eac4:	9305      	str	r3, [sp, #20]
   1eac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1eaca:	4653      	mov	r3, sl
   1eacc:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1ead0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ead4:	9400      	str	r4, [sp, #0]
   1ead6:	4630      	mov	r0, r6
   1ead8:	f000 fd68 	bl	1f5ac <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1eadc:	7b73      	ldrb	r3, [r6, #13]
   1eade:	4680      	mov	r8, r0
   1eae0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1eae4:	4630      	mov	r0, r6
   1eae6:	7373      	strb	r3, [r6, #13]
   1eae8:	f007 f89e 	bl	25c28 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1eaec:	230f      	movs	r3, #15
   1eaee:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1eaf2:	4916      	ldr	r1, [pc, #88]	; (1eb4c <z_cstart+0x100>)
   1eaf4:	4b16      	ldr	r3, [pc, #88]	; (1eb50 <z_cstart+0x104>)
   1eaf6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1eafa:	e9cd b404 	strd	fp, r4, [sp, #16]
   1eafe:	e9cd 4400 	strd	r4, r4, [sp]
   1eb02:	4638      	mov	r0, r7
   1eb04:	f000 fd52 	bl	1f5ac <z_setup_new_thread>
   1eb08:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1eb0a:	60ef      	str	r7, [r5, #12]
   1eb0c:	f023 0304 	bic.w	r3, r3, #4
   1eb10:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1eb12:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1eb16:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1eb1a:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1eb1c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1eb20:	4652      	mov	r2, sl
   1eb22:	4641      	mov	r1, r8
   1eb24:	4630      	mov	r0, r6
   1eb26:	f7e7 fe55 	bl	67d4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1eb2a:	bf00      	nop
   1eb2c:	20005ce0 	.word	0x20005ce0
   1eb30:	e000ed00 	.word	0xe000ed00
   1eb34:	200018c0 	.word	0x200018c0
   1eb38:	0001ea05 	.word	0x0001ea05
   1eb3c:	20001840 	.word	0x20001840
   1eb40:	200035c8 	.word	0x200035c8
   1eb44:	0002a54b 	.word	0x0002a54b
   1eb48:	20004fa0 	.word	0x20004fa0
   1eb4c:	200053a0 	.word	0x200053a0
   1eb50:	0001e989 	.word	0x0001e989

0001eb54 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1eb54:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1eb56:	4c06      	ldr	r4, [pc, #24]	; (1eb70 <statics_init+0x1c>)
   1eb58:	4d06      	ldr	r5, [pc, #24]	; (1eb74 <statics_init+0x20>)
   1eb5a:	42ac      	cmp	r4, r5
   1eb5c:	d301      	bcc.n	1eb62 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1eb5e:	2000      	movs	r0, #0
   1eb60:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1eb62:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1eb66:	4620      	mov	r0, r4
   1eb68:	f006 fe8f 	bl	2588a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1eb6c:	3414      	adds	r4, #20
   1eb6e:	e7f4      	b.n	1eb5a <statics_init+0x6>
   1eb70:	20000f28 	.word	0x20000f28
   1eb74:	20000f28 	.word	0x20000f28

0001eb78 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1eb78:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1eb7a:	4b0e      	ldr	r3, [pc, #56]	; (1ebb4 <init_mem_slab_module+0x3c>)
   1eb7c:	4c0e      	ldr	r4, [pc, #56]	; (1ebb8 <init_mem_slab_module+0x40>)
   1eb7e:	42a3      	cmp	r3, r4
   1eb80:	d301      	bcc.n	1eb86 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1eb82:	2000      	movs	r0, #0
	return rc;
}
   1eb84:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1eb86:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1eb8a:	ea41 0200 	orr.w	r2, r1, r0
   1eb8e:	f012 0203 	ands.w	r2, r2, #3
   1eb92:	d10b      	bne.n	1ebac <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1eb94:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1eb96:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1eb98:	42aa      	cmp	r2, r5
   1eb9a:	d101      	bne.n	1eba0 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1eb9c:	331c      	adds	r3, #28
   1eb9e:	e7ee      	b.n	1eb7e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1eba0:	695e      	ldr	r6, [r3, #20]
   1eba2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1eba4:	3201      	adds	r2, #1
		slab->free_list = p;
   1eba6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1eba8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1ebaa:	e7f5      	b.n	1eb98 <init_mem_slab_module+0x20>
	return rc;
   1ebac:	f06f 0015 	mvn.w	r0, #21
   1ebb0:	e7e8      	b.n	1eb84 <init_mem_slab_module+0xc>
   1ebb2:	bf00      	nop
   1ebb4:	20000ed4 	.word	0x20000ed4
   1ebb8:	20000f28 	.word	0x20000f28

0001ebbc <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ebbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ebbe:	460c      	mov	r4, r1
   1ebc0:	f04f 0520 	mov.w	r5, #32
   1ebc4:	f3ef 8111 	mrs	r1, BASEPRI
   1ebc8:	f385 8811 	msr	BASEPRI, r5
   1ebcc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1ebd0:	6945      	ldr	r5, [r0, #20]
   1ebd2:	b15d      	cbz	r5, 1ebec <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1ebd4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ebd6:	682b      	ldr	r3, [r5, #0]
   1ebd8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ebda:	6983      	ldr	r3, [r0, #24]
   1ebdc:	3301      	adds	r3, #1
   1ebde:	6183      	str	r3, [r0, #24]
		result = 0;
   1ebe0:	2000      	movs	r0, #0
	__asm__ volatile(
   1ebe2:	f381 8811 	msr	BASEPRI, r1
   1ebe6:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1ebea:	e011      	b.n	1ec10 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ebec:	ea52 0c03 	orrs.w	ip, r2, r3
   1ebf0:	d103      	bne.n	1ebfa <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1ebf2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1ebf4:	f06f 000b 	mvn.w	r0, #11
   1ebf8:	e7f3      	b.n	1ebe2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1ebfa:	e9cd 2300 	strd	r2, r3, [sp]
   1ebfe:	4602      	mov	r2, r0
   1ec00:	4804      	ldr	r0, [pc, #16]	; (1ec14 <k_mem_slab_alloc+0x58>)
   1ec02:	f000 fb6d 	bl	1f2e0 <z_pend_curr>
		if (result == 0) {
   1ec06:	b918      	cbnz	r0, 1ec10 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1ec08:	4b03      	ldr	r3, [pc, #12]	; (1ec18 <k_mem_slab_alloc+0x5c>)
   1ec0a:	689b      	ldr	r3, [r3, #8]
   1ec0c:	695b      	ldr	r3, [r3, #20]
   1ec0e:	6023      	str	r3, [r4, #0]
}
   1ec10:	b003      	add	sp, #12
   1ec12:	bd30      	pop	{r4, r5, pc}
   1ec14:	20003bcd 	.word	0x20003bcd
   1ec18:	200035c8 	.word	0x200035c8

0001ec1c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ec1c:	b570      	push	{r4, r5, r6, lr}
   1ec1e:	4604      	mov	r4, r0
   1ec20:	460d      	mov	r5, r1
	__asm__ volatile(
   1ec22:	f04f 0320 	mov.w	r3, #32
   1ec26:	f3ef 8611 	mrs	r6, BASEPRI
   1ec2a:	f383 8811 	msr	BASEPRI, r3
   1ec2e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ec32:	f007 f86c 	bl	25d0e <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1ec36:	b158      	cbz	r0, 1ec50 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1ec38:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1ec3a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ec3c:	2100      	movs	r1, #0
   1ec3e:	67c1      	str	r1, [r0, #124]	; 0x7c
		z_ready_thread(pending_thread);
   1ec40:	f006 fff2 	bl	25c28 <z_ready_thread>
		z_reschedule(&lock, key);
   1ec44:	4631      	mov	r1, r6
   1ec46:	4809      	ldr	r0, [pc, #36]	; (1ec6c <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1ec48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1ec4c:	f000 b938 	b.w	1eec0 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1ec50:	682b      	ldr	r3, [r5, #0]
   1ec52:	6962      	ldr	r2, [r4, #20]
   1ec54:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1ec56:	682b      	ldr	r3, [r5, #0]
   1ec58:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1ec5a:	69a3      	ldr	r3, [r4, #24]
   1ec5c:	3b01      	subs	r3, #1
   1ec5e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1ec60:	f386 8811 	msr	BASEPRI, r6
   1ec64:	f3bf 8f6f 	isb	sy
}
   1ec68:	bd70      	pop	{r4, r5, r6, pc}
   1ec6a:	bf00      	nop
   1ec6c:	20003bcd 	.word	0x20003bcd

0001ec70 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ec70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ec74:	4604      	mov	r4, r0
   1ec76:	4617      	mov	r7, r2
   1ec78:	461e      	mov	r6, r3
	__asm__ volatile(
   1ec7a:	f04f 0320 	mov.w	r3, #32
   1ec7e:	f3ef 8811 	mrs	r8, BASEPRI
   1ec82:	f383 8811 	msr	BASEPRI, r3
   1ec86:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ec8a:	68c3      	ldr	r3, [r0, #12]
   1ec8c:	4a2f      	ldr	r2, [pc, #188]	; (1ed4c <z_impl_k_mutex_lock+0xdc>)
   1ec8e:	b16b      	cbz	r3, 1ecac <z_impl_k_mutex_lock+0x3c>
   1ec90:	6880      	ldr	r0, [r0, #8]
   1ec92:	6891      	ldr	r1, [r2, #8]
   1ec94:	4288      	cmp	r0, r1
   1ec96:	d019      	beq.n	1eccc <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1ec98:	ea57 0306 	orrs.w	r3, r7, r6
   1ec9c:	d118      	bne.n	1ecd0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1ec9e:	f388 8811 	msr	BASEPRI, r8
   1eca2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1eca6:	f06f 000f 	mvn.w	r0, #15
   1ecaa:	e00c      	b.n	1ecc6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1ecac:	6891      	ldr	r1, [r2, #8]
   1ecae:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ecb2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1ecb4:	3301      	adds	r3, #1
   1ecb6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1ecb8:	6893      	ldr	r3, [r2, #8]
   1ecba:	60a3      	str	r3, [r4, #8]
   1ecbc:	f388 8811 	msr	BASEPRI, r8
   1ecc0:	f3bf 8f6f 	isb	sy
		return 0;
   1ecc4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1ecc6:	b002      	add	sp, #8
   1ecc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1eccc:	6921      	ldr	r1, [r4, #16]
   1ecce:	e7f0      	b.n	1ecb2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ecd0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ecd4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1ecd8:	4299      	cmp	r1, r3
   1ecda:	bfa8      	it	ge
   1ecdc:	4619      	movge	r1, r3
   1ecde:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ece2:	428b      	cmp	r3, r1
   1ece4:	dd2b      	ble.n	1ed3e <z_impl_k_mutex_lock+0xce>
		resched = adjust_owner_prio(mutex, new_prio);
   1ece6:	f006 fe6e 	bl	259c6 <adjust_owner_prio.isra.0>
   1ecea:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ecec:	e9cd 7600 	strd	r7, r6, [sp]
   1ecf0:	4817      	ldr	r0, [pc, #92]	; (1ed50 <z_impl_k_mutex_lock+0xe0>)
   1ecf2:	4622      	mov	r2, r4
   1ecf4:	4641      	mov	r1, r8
   1ecf6:	f000 faf3 	bl	1f2e0 <z_pend_curr>
	if (got_mutex == 0) {
   1ecfa:	2800      	cmp	r0, #0
   1ecfc:	d0e3      	beq.n	1ecc6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1ecfe:	f04f 0320 	mov.w	r3, #32
   1ed02:	f3ef 8611 	mrs	r6, BASEPRI
   1ed06:	f383 8811 	msr	BASEPRI, r3
   1ed0a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1ed0e:	6823      	ldr	r3, [r4, #0]
   1ed10:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ed12:	42a3      	cmp	r3, r4
   1ed14:	d007      	beq.n	1ed26 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ed16:	b133      	cbz	r3, 1ed26 <z_impl_k_mutex_lock+0xb6>
   1ed18:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ed1c:	4299      	cmp	r1, r3
   1ed1e:	bfa8      	it	ge
   1ed20:	4619      	movge	r1, r3
   1ed22:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ed26:	68a0      	ldr	r0, [r4, #8]
   1ed28:	f006 fe4d 	bl	259c6 <adjust_owner_prio.isra.0>
   1ed2c:	b900      	cbnz	r0, 1ed30 <z_impl_k_mutex_lock+0xc0>
	if (resched) {
   1ed2e:	b145      	cbz	r5, 1ed42 <z_impl_k_mutex_lock+0xd2>
		z_reschedule(&lock, key);
   1ed30:	4807      	ldr	r0, [pc, #28]	; (1ed50 <z_impl_k_mutex_lock+0xe0>)
   1ed32:	4631      	mov	r1, r6
   1ed34:	f000 f8c4 	bl	1eec0 <z_reschedule>
	return -EAGAIN;
   1ed38:	f06f 000a 	mvn.w	r0, #10
   1ed3c:	e7c3      	b.n	1ecc6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1ed3e:	2500      	movs	r5, #0
   1ed40:	e7d4      	b.n	1ecec <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile(
   1ed42:	f386 8811 	msr	BASEPRI, r6
   1ed46:	f3bf 8f6f 	isb	sy
   1ed4a:	e7f5      	b.n	1ed38 <z_impl_k_mutex_lock+0xc8>
   1ed4c:	200035c8 	.word	0x200035c8
   1ed50:	20003bcd 	.word	0x20003bcd

0001ed54 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ed54:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1ed56:	6883      	ldr	r3, [r0, #8]
{
   1ed58:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1ed5a:	2b00      	cmp	r3, #0
   1ed5c:	d032      	beq.n	1edc4 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ed5e:	4a1c      	ldr	r2, [pc, #112]	; (1edd0 <z_impl_k_mutex_unlock+0x7c>)
   1ed60:	6892      	ldr	r2, [r2, #8]
   1ed62:	4293      	cmp	r3, r2
   1ed64:	d131      	bne.n	1edca <z_impl_k_mutex_unlock+0x76>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1ed66:	7bda      	ldrb	r2, [r3, #15]
   1ed68:	3a01      	subs	r2, #1
   1ed6a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1ed6c:	68c3      	ldr	r3, [r0, #12]
   1ed6e:	2b01      	cmp	r3, #1
   1ed70:	d005      	beq.n	1ed7e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1ed72:	3b01      	subs	r3, #1
   1ed74:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1ed76:	f000 f903 	bl	1ef80 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1ed7a:	2000      	movs	r0, #0
}
   1ed7c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1ed7e:	f04f 0320 	mov.w	r3, #32
   1ed82:	f3ef 8511 	mrs	r5, BASEPRI
   1ed86:	f383 8811 	msr	BASEPRI, r3
   1ed8a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ed8e:	6901      	ldr	r1, [r0, #16]
   1ed90:	6880      	ldr	r0, [r0, #8]
   1ed92:	f006 fe18 	bl	259c6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ed96:	4620      	mov	r0, r4
   1ed98:	f006 ffb9 	bl	25d0e <z_unpend_first_thread>
	mutex->owner = new_owner;
   1ed9c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1ed9e:	b158      	cbz	r0, 1edb8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1eda0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1eda4:	6122      	str	r2, [r4, #16]
   1eda6:	2200      	movs	r2, #0
   1eda8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1edaa:	f006 ff3d 	bl	25c28 <z_ready_thread>
		z_reschedule(&lock, key);
   1edae:	4809      	ldr	r0, [pc, #36]	; (1edd4 <z_impl_k_mutex_unlock+0x80>)
   1edb0:	4629      	mov	r1, r5
   1edb2:	f000 f885 	bl	1eec0 <z_reschedule>
   1edb6:	e7de      	b.n	1ed76 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1edb8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1edba:	f385 8811 	msr	BASEPRI, r5
   1edbe:	f3bf 8f6f 	isb	sy
   1edc2:	e7d8      	b.n	1ed76 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1edc4:	f06f 0015 	mvn.w	r0, #21
   1edc8:	e7d8      	b.n	1ed7c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1edca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1edce:	e7d5      	b.n	1ed7c <z_impl_k_mutex_unlock+0x28>
   1edd0:	200035c8 	.word	0x200035c8
   1edd4:	20003bcd 	.word	0x20003bcd

0001edd8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1edd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1edda:	4611      	mov	r1, r2
	__asm__ volatile(
   1eddc:	f04f 0220 	mov.w	r2, #32
   1ede0:	f3ef 8511 	mrs	r5, BASEPRI
   1ede4:	f382 8811 	msr	BASEPRI, r2
   1ede8:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1edec:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1edee:	b19c      	cbz	r4, 1ee18 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1edf0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1edf2:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1edf4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1edf8:	4294      	cmp	r4, r2
	list->head = node;
   1edfa:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1edfc:	bf08      	it	eq
   1edfe:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ee00:	2101      	movs	r1, #1
   1ee02:	4620      	mov	r0, r4
   1ee04:	f006 fe47 	bl	25a96 <z_queue_node_peek>
   1ee08:	4604      	mov	r4, r0
	__asm__ volatile(
   1ee0a:	f385 8811 	msr	BASEPRI, r5
   1ee0e:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1ee12:	4620      	mov	r0, r4
   1ee14:	b003      	add	sp, #12
   1ee16:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ee18:	ea51 0203 	orrs.w	r2, r1, r3
   1ee1c:	d0f5      	beq.n	1ee0a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ee1e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1ee22:	e9cd 1300 	strd	r1, r3, [sp]
   1ee26:	4610      	mov	r0, r2
   1ee28:	4629      	mov	r1, r5
   1ee2a:	f000 fa59 	bl	1f2e0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1ee2e:	2800      	cmp	r0, #0
   1ee30:	d1ef      	bne.n	1ee12 <z_impl_k_queue_get+0x3a>
   1ee32:	4b02      	ldr	r3, [pc, #8]	; (1ee3c <z_impl_k_queue_get+0x64>)
   1ee34:	689b      	ldr	r3, [r3, #8]
   1ee36:	695c      	ldr	r4, [r3, #20]
   1ee38:	e7eb      	b.n	1ee12 <z_impl_k_queue_get+0x3a>
   1ee3a:	bf00      	nop
   1ee3c:	200035c8 	.word	0x200035c8

0001ee40 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1ee40:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1ee42:	4c08      	ldr	r4, [pc, #32]	; (1ee64 <z_reset_time_slice+0x24>)
   1ee44:	6823      	ldr	r3, [r4, #0]
   1ee46:	b15b      	cbz	r3, 1ee60 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1ee48:	f7e7 fa20 	bl	628c <z_clock_elapsed>
   1ee4c:	4603      	mov	r3, r0
   1ee4e:	6820      	ldr	r0, [r4, #0]
   1ee50:	4a05      	ldr	r2, [pc, #20]	; (1ee68 <z_reset_time_slice+0x28>)
   1ee52:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1ee54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1ee58:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1ee5a:	2100      	movs	r1, #0
   1ee5c:	f007 b85a 	b.w	25f14 <z_set_timeout_expiry>
}
   1ee60:	bd10      	pop	{r4, pc}
   1ee62:	bf00      	nop
   1ee64:	20003600 	.word	0x20003600
   1ee68:	200035c8 	.word	0x200035c8

0001ee6c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1ee6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee6e:	4604      	mov	r4, r0
   1ee70:	460d      	mov	r5, r1
	__asm__ volatile(
   1ee72:	f04f 0320 	mov.w	r3, #32
   1ee76:	f3ef 8711 	mrs	r7, BASEPRI
   1ee7a:	f383 8811 	msr	BASEPRI, r3
   1ee7e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1ee82:	4b0c      	ldr	r3, [pc, #48]	; (1eeb4 <k_sched_time_slice_set+0x48>)
   1ee84:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ee86:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ee8a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ee8e:	6119      	str	r1, [r3, #16]
   1ee90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ee94:	2300      	movs	r3, #0
   1ee96:	fbe4 0106 	umlal	r0, r1, r4, r6
   1ee9a:	f7e1 fc55 	bl	748 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1ee9e:	4b06      	ldr	r3, [pc, #24]	; (1eeb8 <k_sched_time_slice_set+0x4c>)
   1eea0:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1eea2:	4b06      	ldr	r3, [pc, #24]	; (1eebc <k_sched_time_slice_set+0x50>)
   1eea4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1eea6:	f7ff ffcb 	bl	1ee40 <z_reset_time_slice>
	__asm__ volatile(
   1eeaa:	f387 8811 	msr	BASEPRI, r7
   1eeae:	f3bf 8f6f 	isb	sy
	}
}
   1eeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eeb4:	200035c8 	.word	0x200035c8
   1eeb8:	20003600 	.word	0x20003600
   1eebc:	200035fc 	.word	0x200035fc

0001eec0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eec0:	b949      	cbnz	r1, 1eed6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1eec2:	f3ef 8005 	mrs	r0, IPSR
   1eec6:	b930      	cbnz	r0, 1eed6 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1eec8:	4b05      	ldr	r3, [pc, #20]	; (1eee0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1eeca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1eecc:	689b      	ldr	r3, [r3, #8]
   1eece:	429a      	cmp	r2, r3
   1eed0:	d001      	beq.n	1eed6 <z_reschedule+0x16>
	ret = arch_swap(key);
   1eed2:	f7e7 bbbd 	b.w	6650 <arch_swap>
   1eed6:	f381 8811 	msr	BASEPRI, r1
   1eeda:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1eede:	4770      	bx	lr
   1eee0:	200035c8 	.word	0x200035c8

0001eee4 <k_sched_lock>:
	__asm__ volatile(
   1eee4:	f04f 0320 	mov.w	r3, #32
   1eee8:	f3ef 8111 	mrs	r1, BASEPRI
   1eeec:	f383 8811 	msr	BASEPRI, r3
   1eef0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1eef4:	4b04      	ldr	r3, [pc, #16]	; (1ef08 <k_sched_lock+0x24>)
   1eef6:	689a      	ldr	r2, [r3, #8]
   1eef8:	7bd3      	ldrb	r3, [r2, #15]
   1eefa:	3b01      	subs	r3, #1
   1eefc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1eefe:	f381 8811 	msr	BASEPRI, r1
   1ef02:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1ef06:	4770      	bx	lr
   1ef08:	200035c8 	.word	0x200035c8

0001ef0c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1ef0c:	4b09      	ldr	r3, [pc, #36]	; (1ef34 <z_priq_dumb_remove+0x28>)
   1ef0e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1ef12:	4282      	cmp	r2, r0
   1ef14:	d105      	bne.n	1ef22 <z_priq_dumb_remove+0x16>
   1ef16:	689b      	ldr	r3, [r3, #8]
   1ef18:	428b      	cmp	r3, r1
   1ef1a:	d102      	bne.n	1ef22 <z_priq_dumb_remove+0x16>
   1ef1c:	7b4b      	ldrb	r3, [r1, #13]
   1ef1e:	06db      	lsls	r3, r3, #27
   1ef20:	d106      	bne.n	1ef30 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1ef22:	e9d1 3200 	ldrd	r3, r2, [r1]
   1ef26:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ef28:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ef2a:	2300      	movs	r3, #0
	node->prev = NULL;
   1ef2c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1ef30:	4770      	bx	lr
   1ef32:	bf00      	nop
   1ef34:	200035c8 	.word	0x200035c8

0001ef38 <update_cache>:
{
   1ef38:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1ef3a:	4d10      	ldr	r5, [pc, #64]	; (1ef7c <update_cache+0x44>)
{
   1ef3c:	4601      	mov	r1, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1ef3e:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1ef42:	f006 fe6b 	bl	25c1c <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1ef46:	68ab      	ldr	r3, [r5, #8]
   1ef48:	7b5a      	ldrb	r2, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1ef4a:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1ef4c:	0690      	lsls	r0, r2, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1ef4e:	bf44      	itt	mi
   1ef50:	f042 0208 	orrmi.w	r2, r2, #8
   1ef54:	735a      	strbmi	r2, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1ef56:	b904      	cbnz	r4, 1ef5a <update_cache+0x22>
   1ef58:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1ef5a:	b949      	cbnz	r1, 1ef70 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1ef5c:	7b5a      	ldrb	r2, [r3, #13]
   1ef5e:	06d2      	lsls	r2, r2, #27
   1ef60:	d106      	bne.n	1ef70 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1ef62:	69a2      	ldr	r2, [r4, #24]
   1ef64:	b922      	cbnz	r2, 1ef70 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1ef66:	89da      	ldrh	r2, [r3, #14]
   1ef68:	2a7f      	cmp	r2, #127	; 0x7f
   1ef6a:	d901      	bls.n	1ef70 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1ef6c:	626b      	str	r3, [r5, #36]	; 0x24
}
   1ef6e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1ef70:	42a3      	cmp	r3, r4
   1ef72:	d001      	beq.n	1ef78 <update_cache+0x40>
			z_reset_time_slice();
   1ef74:	f7ff ff64 	bl	1ee40 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1ef78:	626c      	str	r4, [r5, #36]	; 0x24
}
   1ef7a:	e7f8      	b.n	1ef6e <update_cache+0x36>
   1ef7c:	200035c8 	.word	0x200035c8

0001ef80 <k_sched_unlock>:
{
   1ef80:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ef82:	f04f 0320 	mov.w	r3, #32
   1ef86:	f3ef 8411 	mrs	r4, BASEPRI
   1ef8a:	f383 8811 	msr	BASEPRI, r3
   1ef8e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1ef92:	4b08      	ldr	r3, [pc, #32]	; (1efb4 <k_sched_unlock+0x34>)
   1ef94:	689a      	ldr	r2, [r3, #8]
   1ef96:	7bd3      	ldrb	r3, [r2, #15]
   1ef98:	3301      	adds	r3, #1
   1ef9a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1ef9c:	2000      	movs	r0, #0
   1ef9e:	f7ff ffcb 	bl	1ef38 <update_cache>
	__asm__ volatile(
   1efa2:	f384 8811 	msr	BASEPRI, r4
   1efa6:	f3bf 8f6f 	isb	sy
}
   1efaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1efae:	f006 be0e 	b.w	25bce <z_reschedule_unlocked>
   1efb2:	bf00      	nop
   1efb4:	200035c8 	.word	0x200035c8

0001efb8 <ready_thread>:
{
   1efb8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t state = thread->base.thread_state;
   1efba:	7b41      	ldrb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1efbc:	06cb      	lsls	r3, r1, #27
   1efbe:	d126      	bne.n	1f00e <ready_thread+0x56>
	if (z_is_thread_ready(thread)) {
   1efc0:	6983      	ldr	r3, [r0, #24]
   1efc2:	bb23      	cbnz	r3, 1f00e <ready_thread+0x56>
	return list->head == list;
   1efc4:	4a13      	ldr	r2, [pc, #76]	; (1f014 <ready_thread+0x5c>)
	return (node == list->tail) ? NULL : node->next;
   1efc6:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1efca:	f102 0528 	add.w	r5, r2, #40	; 0x28
   1efce:	42ab      	cmp	r3, r5
   1efd0:	d017      	beq.n	1f002 <ready_thread+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1efd2:	b1b3      	cbz	r3, 1f002 <ready_thread+0x4a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1efd4:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1efd8:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1efdc:	42b7      	cmp	r7, r6
   1efde:	dd0b      	ble.n	1eff8 <ready_thread+0x40>
	node->prev = successor->prev;
   1efe0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1efe2:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1efe6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1efe8:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1efea:	f061 017f 	orn	r1, r1, #127	; 0x7f
   1efee:	7341      	strb	r1, [r0, #13]
}
   1eff0:	bcf0      	pop	{r4, r5, r6, r7}
		update_cache(0);
   1eff2:	2000      	movs	r0, #0
   1eff4:	f7ff bfa0 	b.w	1ef38 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1eff8:	42a3      	cmp	r3, r4
   1effa:	d002      	beq.n	1f002 <ready_thread+0x4a>
   1effc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1effe:	2b00      	cmp	r3, #0
   1f000:	d1ea      	bne.n	1efd8 <ready_thread+0x20>
	node->prev = list->tail;
   1f002:	e9c0 5400 	strd	r5, r4, [r0]
	list->tail->next = node;
   1f006:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1f008:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1f00a:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1f00c:	e7ed      	b.n	1efea <ready_thread+0x32>
}
   1f00e:	bcf0      	pop	{r4, r5, r6, r7}
   1f010:	4770      	bx	lr
   1f012:	bf00      	nop
   1f014:	200035c8 	.word	0x200035c8

0001f018 <z_sched_start>:
{
   1f018:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f01a:	f04f 0220 	mov.w	r2, #32
   1f01e:	f3ef 8411 	mrs	r4, BASEPRI
   1f022:	f382 8811 	msr	BASEPRI, r2
   1f026:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1f02a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1f02c:	0751      	lsls	r1, r2, #29
   1f02e:	d404      	bmi.n	1f03a <z_sched_start+0x22>
	__asm__ volatile(
   1f030:	f384 8811 	msr	BASEPRI, r4
   1f034:	f3bf 8f6f 	isb	sy
}
   1f038:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f03a:	f022 0204 	bic.w	r2, r2, #4
   1f03e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1f040:	f7ff ffba 	bl	1efb8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1f044:	4621      	mov	r1, r4
   1f046:	4802      	ldr	r0, [pc, #8]	; (1f050 <z_sched_start+0x38>)
}
   1f048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1f04c:	f7ff bf38 	b.w	1eec0 <z_reschedule>
   1f050:	20003bcd 	.word	0x20003bcd

0001f054 <z_move_thread_to_end_of_prio_q>:
{
   1f054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f056:	4601      	mov	r1, r0
	__asm__ volatile(
   1f058:	f04f 0320 	mov.w	r3, #32
   1f05c:	f3ef 8511 	mrs	r5, BASEPRI
   1f060:	f383 8811 	msr	BASEPRI, r3
   1f064:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1f068:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f06c:	2b00      	cmp	r3, #0
   1f06e:	da02      	bge.n	1f076 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f070:	4817      	ldr	r0, [pc, #92]	; (1f0d0 <z_move_thread_to_end_of_prio_q+0x7c>)
   1f072:	f7ff ff4b 	bl	1ef0c <z_priq_dumb_remove>
	return list->head == list;
   1f076:	4a17      	ldr	r2, [pc, #92]	; (1f0d4 <z_move_thread_to_end_of_prio_q+0x80>)
	return (node == list->tail) ? NULL : node->next;
   1f078:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f07c:	f102 0428 	add.w	r4, r2, #40	; 0x28
   1f080:	42a3      	cmp	r3, r4
   1f082:	d01f      	beq.n	1f0c4 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f084:	b1f3      	cbz	r3, 1f0c4 <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f086:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1f08a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1f08e:	42b7      	cmp	r7, r6
   1f090:	dd13      	ble.n	1f0ba <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1f092:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1f094:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1f098:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1f09a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1f09c:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1f09e:	6890      	ldr	r0, [r2, #8]
   1f0a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f0a4:	734b      	strb	r3, [r1, #13]
   1f0a6:	1a43      	subs	r3, r0, r1
   1f0a8:	4258      	negs	r0, r3
   1f0aa:	4158      	adcs	r0, r3
   1f0ac:	f7ff ff44 	bl	1ef38 <update_cache>
	__asm__ volatile(
   1f0b0:	f385 8811 	msr	BASEPRI, r5
   1f0b4:	f3bf 8f6f 	isb	sy
}
   1f0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1f0ba:	4283      	cmp	r3, r0
   1f0bc:	d002      	beq.n	1f0c4 <z_move_thread_to_end_of_prio_q+0x70>
   1f0be:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f0c0:	2b00      	cmp	r3, #0
   1f0c2:	d1e2      	bne.n	1f08a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1f0c4:	e9c1 4000 	strd	r4, r0, [r1]
	list->tail->next = node;
   1f0c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1f0ca:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1f0cc:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1f0ce:	e7e5      	b.n	1f09c <z_move_thread_to_end_of_prio_q+0x48>
   1f0d0:	200035f0 	.word	0x200035f0
   1f0d4:	200035c8 	.word	0x200035c8

0001f0d8 <z_time_slice>:
	if (pending_current == _current) {
   1f0d8:	4b14      	ldr	r3, [pc, #80]	; (1f12c <z_time_slice+0x54>)
   1f0da:	4a15      	ldr	r2, [pc, #84]	; (1f130 <z_time_slice+0x58>)
{
   1f0dc:	b510      	push	{r4, lr}
   1f0de:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1f0e0:	6814      	ldr	r4, [r2, #0]
   1f0e2:	6898      	ldr	r0, [r3, #8]
   1f0e4:	42a0      	cmp	r0, r4
   1f0e6:	d103      	bne.n	1f0f0 <z_time_slice+0x18>
}
   1f0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_reset_time_slice();
   1f0ec:	f7ff bea8 	b.w	1ee40 <z_reset_time_slice>
	pending_current = NULL;
   1f0f0:	2400      	movs	r4, #0
   1f0f2:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1f0f4:	4a0f      	ldr	r2, [pc, #60]	; (1f134 <z_time_slice+0x5c>)
   1f0f6:	6812      	ldr	r2, [r2, #0]
   1f0f8:	b1b2      	cbz	r2, 1f128 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(thread);
   1f0fa:	89c2      	ldrh	r2, [r0, #14]
   1f0fc:	2a7f      	cmp	r2, #127	; 0x7f
   1f0fe:	d813      	bhi.n	1f128 <z_time_slice+0x50>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1f100:	4a0d      	ldr	r2, [pc, #52]	; (1f138 <z_time_slice+0x60>)
   1f102:	f990 400e 	ldrsb.w	r4, [r0, #14]
   1f106:	6812      	ldr	r2, [r2, #0]
   1f108:	4294      	cmp	r4, r2
   1f10a:	db0d      	blt.n	1f128 <z_time_slice+0x50>
		&& !z_is_idle_thread_object(thread)
   1f10c:	4a0b      	ldr	r2, [pc, #44]	; (1f13c <z_time_slice+0x64>)
   1f10e:	4290      	cmp	r0, r2
   1f110:	d00a      	beq.n	1f128 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(thread);
   1f112:	6982      	ldr	r2, [r0, #24]
   1f114:	b942      	cbnz	r2, 1f128 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
   1f116:	691a      	ldr	r2, [r3, #16]
   1f118:	428a      	cmp	r2, r1
   1f11a:	dc02      	bgt.n	1f122 <z_time_slice+0x4a>
			z_move_thread_to_end_of_prio_q(_current);
   1f11c:	f7ff ff9a 	bl	1f054 <z_move_thread_to_end_of_prio_q>
   1f120:	e7e2      	b.n	1f0e8 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1f122:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1f124:	611a      	str	r2, [r3, #16]
}
   1f126:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = 0;
   1f128:	2200      	movs	r2, #0
   1f12a:	e7fb      	b.n	1f124 <z_time_slice+0x4c>
   1f12c:	200035c8 	.word	0x200035c8
   1f130:	200035f8 	.word	0x200035f8
   1f134:	20003600 	.word	0x20003600
   1f138:	200035fc 	.word	0x200035fc
   1f13c:	20001840 	.word	0x20001840

0001f140 <z_impl_k_thread_suspend>:
{
   1f140:	b570      	push	{r4, r5, r6, lr}
   1f142:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1f144:	3018      	adds	r0, #24
   1f146:	f006 febf 	bl	25ec8 <z_abort_timeout>
	__asm__ volatile(
   1f14a:	f04f 0320 	mov.w	r3, #32
   1f14e:	f3ef 8611 	mrs	r6, BASEPRI
   1f152:	f383 8811 	msr	BASEPRI, r3
   1f156:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1f15a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1f15e:	2b00      	cmp	r3, #0
   1f160:	da07      	bge.n	1f172 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f162:	480f      	ldr	r0, [pc, #60]	; (1f1a0 <z_impl_k_thread_suspend+0x60>)
   1f164:	4621      	mov	r1, r4
   1f166:	f7ff fed1 	bl	1ef0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f16a:	7b63      	ldrb	r3, [r4, #13]
   1f16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f170:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1f172:	4d0c      	ldr	r5, [pc, #48]	; (1f1a4 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1f174:	7b63      	ldrb	r3, [r4, #13]
   1f176:	68a8      	ldr	r0, [r5, #8]
   1f178:	f043 0310 	orr.w	r3, r3, #16
   1f17c:	7363      	strb	r3, [r4, #13]
   1f17e:	1b03      	subs	r3, r0, r4
   1f180:	4258      	negs	r0, r3
   1f182:	4158      	adcs	r0, r3
   1f184:	f7ff fed8 	bl	1ef38 <update_cache>
	__asm__ volatile(
   1f188:	f386 8811 	msr	BASEPRI, r6
   1f18c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1f190:	68ab      	ldr	r3, [r5, #8]
   1f192:	42a3      	cmp	r3, r4
   1f194:	d103      	bne.n	1f19e <z_impl_k_thread_suspend+0x5e>
}
   1f196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1f19a:	f006 bd18 	b.w	25bce <z_reschedule_unlocked>
}
   1f19e:	bd70      	pop	{r4, r5, r6, pc}
   1f1a0:	200035f0 	.word	0x200035f0
   1f1a4:	200035c8 	.word	0x200035c8

0001f1a8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1f1a8:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   1f1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f1ae:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1f1b0:	b103      	cbz	r3, 1f1b4 <z_thread_single_abort+0xc>
		thread->fn_abort();
   1f1b2:	4798      	blx	r3
   1f1b4:	f104 0018 	add.w	r0, r4, #24
   1f1b8:	f006 fe86 	bl	25ec8 <z_abort_timeout>
	__asm__ volatile(
   1f1bc:	f04f 0320 	mov.w	r3, #32
   1f1c0:	f3ef 8611 	mrs	r6, BASEPRI
   1f1c4:	f383 8811 	msr	BASEPRI, r3
   1f1c8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1f1cc:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f1ce:	06d8      	lsls	r0, r3, #27
   1f1d0:	d123      	bne.n	1f21a <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1f1d2:	69a2      	ldr	r2, [r4, #24]
   1f1d4:	bb0a      	cbnz	r2, 1f21a <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1f1d6:	0619      	lsls	r1, r3, #24
   1f1d8:	d507      	bpl.n	1f1ea <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1f1da:	481f      	ldr	r0, [pc, #124]	; (1f258 <z_thread_single_abort+0xb0>)
   1f1dc:	4621      	mov	r1, r4
   1f1de:	f7ff fe95 	bl	1ef0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f1e2:	7b63      	ldrb	r3, [r4, #13]
   1f1e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f1e8:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1f1ea:	4b1c      	ldr	r3, [pc, #112]	; (1f25c <z_thread_single_abort+0xb4>)
   1f1ec:	6898      	ldr	r0, [r3, #8]
   1f1ee:	1b02      	subs	r2, r0, r4
   1f1f0:	4250      	negs	r0, r2
   1f1f2:	4150      	adcs	r0, r2
   1f1f4:	f7ff fea0 	bl	1ef38 <update_cache>
		thread->base.thread_state |= mask;
   1f1f8:	7b63      	ldrb	r3, [r4, #13]
   1f1fa:	f043 0308 	orr.w	r3, r3, #8
   1f1fe:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1f200:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1f204:	2700      	movs	r7, #0
	return list->head == list;
   1f206:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f208:	4545      	cmp	r5, r8
   1f20a:	d000      	beq.n	1f20e <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1f20c:	b995      	cbnz	r5, 1f234 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1f20e:	f386 8811 	msr	BASEPRI, r6
   1f212:	f3bf 8f6f 	isb	sy
}
   1f216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1f21a:	079b      	lsls	r3, r3, #30
   1f21c:	d5ec      	bpl.n	1f1f8 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1f21e:	68a0      	ldr	r0, [r4, #8]
   1f220:	4621      	mov	r1, r4
   1f222:	f7ff fe73 	bl	1ef0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f226:	7b63      	ldrb	r3, [r4, #13]
   1f228:	f023 0302 	bic.w	r3, r3, #2
   1f22c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1f22e:	2300      	movs	r3, #0
   1f230:	60a3      	str	r3, [r4, #8]
   1f232:	e7e1      	b.n	1f1f8 <z_thread_single_abort+0x50>
   1f234:	f105 0018 	add.w	r0, r5, #24
   1f238:	f006 fe46 	bl	25ec8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1f23c:	68a8      	ldr	r0, [r5, #8]
   1f23e:	4629      	mov	r1, r5
   1f240:	f7ff fe64 	bl	1ef0c <z_priq_dumb_remove>
   1f244:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1f246:	60af      	str	r7, [r5, #8]
   1f248:	f023 0302 	bic.w	r3, r3, #2
   1f24c:	736b      	strb	r3, [r5, #13]
   1f24e:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   1f250:	4628      	mov	r0, r5
   1f252:	f7ff feb1 	bl	1efb8 <ready_thread>
   1f256:	e7d6      	b.n	1f206 <z_thread_single_abort+0x5e>
   1f258:	200035f0 	.word	0x200035f0
   1f25c:	200035c8 	.word	0x200035c8

0001f260 <unready_thread>:
{
   1f260:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1f262:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f266:	2b00      	cmp	r3, #0
{
   1f268:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1f26a:	da06      	bge.n	1f27a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f26c:	4807      	ldr	r0, [pc, #28]	; (1f28c <unready_thread+0x2c>)
   1f26e:	f7ff fe4d 	bl	1ef0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f272:	7b4b      	ldrb	r3, [r1, #13]
   1f274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f278:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1f27a:	4b05      	ldr	r3, [pc, #20]	; (1f290 <unready_thread+0x30>)
   1f27c:	6898      	ldr	r0, [r3, #8]
   1f27e:	1a43      	subs	r3, r0, r1
   1f280:	4258      	negs	r0, r3
   1f282:	4158      	adcs	r0, r3
}
   1f284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1f288:	f7ff be56 	b.w	1ef38 <update_cache>
   1f28c:	200035f0 	.word	0x200035f0
   1f290:	200035c8 	.word	0x200035c8

0001f294 <pend>:
{
   1f294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f298:	4606      	mov	r6, r0
   1f29a:	4615      	mov	r5, r2
   1f29c:	461c      	mov	r4, r3
	__asm__ volatile(
   1f29e:	f04f 0320 	mov.w	r3, #32
   1f2a2:	f3ef 8711 	mrs	r7, BASEPRI
   1f2a6:	f383 8811 	msr	BASEPRI, r3
   1f2aa:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1f2ae:	f006 fd06 	bl	25cbe <add_to_waitq_locked>
	__asm__ volatile(
   1f2b2:	f387 8811 	msr	BASEPRI, r7
   1f2b6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f2ba:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1f2be:	bf08      	it	eq
   1f2c0:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1f2c4:	d008      	beq.n	1f2d8 <pend+0x44>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1f2c6:	462a      	mov	r2, r5
   1f2c8:	4623      	mov	r3, r4
   1f2ca:	f106 0018 	add.w	r0, r6, #24
   1f2ce:	4903      	ldr	r1, [pc, #12]	; (1f2dc <pend+0x48>)
}
   1f2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f2d4:	f000 bac6 	b.w	1f864 <z_add_timeout>
   1f2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f2dc:	00025c49 	.word	0x00025c49

0001f2e0 <z_pend_curr>:
{
   1f2e0:	b510      	push	{r4, lr}
	pending_current = _current;
   1f2e2:	4b07      	ldr	r3, [pc, #28]	; (1f300 <z_pend_curr+0x20>)
   1f2e4:	6898      	ldr	r0, [r3, #8]
   1f2e6:	4b07      	ldr	r3, [pc, #28]	; (1f304 <z_pend_curr+0x24>)
{
   1f2e8:	460c      	mov	r4, r1
	pending_current = _current;
   1f2ea:	6018      	str	r0, [r3, #0]
{
   1f2ec:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1f2ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f2f2:	f7ff ffcf 	bl	1f294 <pend>
   1f2f6:	4620      	mov	r0, r4
}
   1f2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f2fc:	f7e7 b9a8 	b.w	6650 <arch_swap>
   1f300:	200035c8 	.word	0x200035c8
   1f304:	200035f8 	.word	0x200035f8

0001f308 <z_set_prio>:
{
   1f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f30a:	4604      	mov	r4, r0
	__asm__ volatile(
   1f30c:	f04f 0320 	mov.w	r3, #32
   1f310:	f3ef 8711 	mrs	r7, BASEPRI
   1f314:	f383 8811 	msr	BASEPRI, r3
   1f318:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f31c:	7b43      	ldrb	r3, [r0, #13]
   1f31e:	06db      	lsls	r3, r3, #27
				thread->base.prio = prio;
   1f320:	b24d      	sxtb	r5, r1
   1f322:	d12b      	bne.n	1f37c <z_set_prio+0x74>
		if (need_sched) {
   1f324:	6983      	ldr	r3, [r0, #24]
   1f326:	bb4b      	cbnz	r3, 1f37c <z_set_prio+0x74>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f328:	4e16      	ldr	r6, [pc, #88]	; (1f384 <z_set_prio+0x7c>)
   1f32a:	4621      	mov	r1, r4
   1f32c:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1f330:	f7ff fdec 	bl	1ef0c <z_priq_dumb_remove>
	return list->head == list;
   1f334:	6ab3      	ldr	r3, [r6, #40]	; 0x28
				thread->base.prio = prio;
   1f336:	73a5      	strb	r5, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f338:	4283      	cmp	r3, r0
   1f33a:	d018      	beq.n	1f36e <z_set_prio+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f33c:	b1bb      	cbz	r3, 1f36e <z_set_prio+0x66>
	return (node == list->tail) ? NULL : node->next;
   1f33e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1f340:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1f344:	42a9      	cmp	r1, r5
   1f346:	dd0d      	ble.n	1f364 <z_set_prio+0x5c>
	node->prev = successor->prev;
   1f348:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f34a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1f34e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f350:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1f352:	2001      	movs	r0, #1
   1f354:	f7ff fdf0 	bl	1ef38 <update_cache>
   1f358:	2001      	movs	r0, #1
	__asm__ volatile(
   1f35a:	f387 8811 	msr	BASEPRI, r7
   1f35e:	f3bf 8f6f 	isb	sy
}
   1f362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1f364:	4293      	cmp	r3, r2
   1f366:	d002      	beq.n	1f36e <z_set_prio+0x66>
   1f368:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f36a:	2b00      	cmp	r3, #0
   1f36c:	d1e8      	bne.n	1f340 <z_set_prio+0x38>
	node->prev = list->tail;
   1f36e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1f370:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1f372:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	node->next = list;
   1f374:	6020      	str	r0, [r4, #0]
	list->tail->next = node;
   1f376:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f378:	62f4      	str	r4, [r6, #44]	; 0x2c
}
   1f37a:	e7ea      	b.n	1f352 <z_set_prio+0x4a>
			thread->base.prio = prio;
   1f37c:	73a5      	strb	r5, [r4, #14]
   1f37e:	2000      	movs	r0, #0
   1f380:	e7eb      	b.n	1f35a <z_set_prio+0x52>
   1f382:	bf00      	nop
   1f384:	200035c8 	.word	0x200035c8

0001f388 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1f388:	4b04      	ldr	r3, [pc, #16]	; (1f39c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1f38a:	2100      	movs	r1, #0
   1f38c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1f390:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1f394:	4608      	mov	r0, r1
   1f396:	f7ff bd69 	b.w	1ee6c <k_sched_time_slice_set>
   1f39a:	bf00      	nop
   1f39c:	200035c8 	.word	0x200035c8

0001f3a0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
   1f3a2:	4c23      	ldr	r4, [pc, #140]	; (1f430 <z_impl_k_yield+0x90>)
   1f3a4:	4b23      	ldr	r3, [pc, #140]	; (1f434 <z_impl_k_yield+0x94>)
   1f3a6:	68a2      	ldr	r2, [r4, #8]
   1f3a8:	429a      	cmp	r2, r3
   1f3aa:	d028      	beq.n	1f3fe <z_impl_k_yield+0x5e>
	__asm__ volatile(
   1f3ac:	f04f 0320 	mov.w	r3, #32
   1f3b0:	f3ef 8511 	mrs	r5, BASEPRI
   1f3b4:	f383 8811 	msr	BASEPRI, r3
   1f3b8:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1f3bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1f3c0:	68a1      	ldr	r1, [r4, #8]
   1f3c2:	f7ff fda3 	bl	1ef0c <z_priq_dumb_remove>
	return list->head == list;
   1f3c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1f3c8:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f3ca:	4282      	cmp	r2, r0
   1f3cc:	d028      	beq.n	1f420 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f3ce:	b33a      	cbz	r2, 1f420 <z_impl_k_yield+0x80>
	return (node == list->tail) ? NULL : node->next;
   1f3d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1f3d2:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1f3d6:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1f3da:	42b7      	cmp	r7, r6
   1f3dc:	dd1b      	ble.n	1f416 <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   1f3de:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1f3e0:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1f3e4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1f3e6:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1f3e8:	7b5a      	ldrb	r2, [r3, #13]
   1f3ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1f3ee:	735a      	strb	r2, [r3, #13]
			z_mark_thread_as_queued(_current);
			update_cache(1);
   1f3f0:	2001      	movs	r0, #1
   1f3f2:	f7ff fda1 	bl	1ef38 <update_cache>
	__asm__ volatile(
   1f3f6:	f385 8811 	msr	BASEPRI, r5
   1f3fa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1f3fe:	f04f 0320 	mov.w	r3, #32
   1f402:	f3ef 8011 	mrs	r0, BASEPRI
   1f406:	f383 8811 	msr	BASEPRI, r3
   1f40a:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1f40e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f412:	f7e7 b91d 	b.w	6650 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1f416:	4291      	cmp	r1, r2
   1f418:	d002      	beq.n	1f420 <z_impl_k_yield+0x80>
   1f41a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f41c:	2a00      	cmp	r2, #0
   1f41e:	d1da      	bne.n	1f3d6 <z_impl_k_yield+0x36>
	node->prev = list->tail;
   1f420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1f422:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1f424:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1f426:	6018      	str	r0, [r3, #0]
	list->tail->next = node;
   1f428:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f42a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   1f42c:	e7dc      	b.n	1f3e8 <z_impl_k_yield+0x48>
   1f42e:	bf00      	nop
   1f430:	200035c8 	.word	0x200035c8
   1f434:	20001840 	.word	0x20001840

0001f438 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   1f438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1f43a:	4604      	mov	r4, r0
   1f43c:	b918      	cbnz	r0, 1f446 <z_tick_sleep+0xe>
	z_impl_k_yield();
   1f43e:	f7ff ffaf 	bl	1f3a0 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   1f442:	4620      	mov	r0, r4
   1f444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   1f446:	f006 fd7f 	bl	25f48 <z_tick_get_32>
   1f44a:	1825      	adds	r5, r4, r0
   1f44c:	f04f 0320 	mov.w	r3, #32
   1f450:	f3ef 8711 	mrs	r7, BASEPRI
   1f454:	f383 8811 	msr	BASEPRI, r3
   1f458:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1f45c:	4e0d      	ldr	r6, [pc, #52]	; (1f494 <z_tick_sleep+0x5c>)
   1f45e:	4b0e      	ldr	r3, [pc, #56]	; (1f498 <z_tick_sleep+0x60>)
   1f460:	68b0      	ldr	r0, [r6, #8]
   1f462:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   1f464:	f006 fc1b 	bl	25c9e <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1f468:	68b0      	ldr	r0, [r6, #8]
   1f46a:	490c      	ldr	r1, [pc, #48]	; (1f49c <z_tick_sleep+0x64>)
   1f46c:	4622      	mov	r2, r4
   1f46e:	17e3      	asrs	r3, r4, #31
   1f470:	3018      	adds	r0, #24
   1f472:	f000 f9f7 	bl	1f864 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1f476:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1f478:	7b53      	ldrb	r3, [r2, #13]
   1f47a:	f043 0310 	orr.w	r3, r3, #16
   1f47e:	7353      	strb	r3, [r2, #13]
   1f480:	4638      	mov	r0, r7
   1f482:	f7e7 f8e5 	bl	6650 <arch_swap>
	ticks = expected_wakeup_time - z_tick_get_32();
   1f486:	f006 fd5f 	bl	25f48 <z_tick_get_32>
   1f48a:	1a2c      	subs	r4, r5, r0
   1f48c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1f490:	e7d7      	b.n	1f442 <z_tick_sleep+0xa>
   1f492:	bf00      	nop
   1f494:	200035c8 	.word	0x200035c8
   1f498:	200035f8 	.word	0x200035f8
   1f49c:	00025c49 	.word	0x00025c49

0001f4a0 <z_impl_k_sleep>:
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f4a0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1f4a4:	bf08      	it	eq
   1f4a6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1f4aa:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f4ac:	d106      	bne.n	1f4bc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1f4ae:	4b08      	ldr	r3, [pc, #32]	; (1f4d0 <z_impl_k_sleep+0x30>)
   1f4b0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1f4b2:	f7ff fe45 	bl	1f140 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1f4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1f4ba:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1f4bc:	f7ff ffbc 	bl	1f438 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1f4c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f4c4:	fb80 0303 	smull	r0, r3, r0, r3
   1f4c8:	0bc0      	lsrs	r0, r0, #15
   1f4ca:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1f4ce:	e7f4      	b.n	1f4ba <z_impl_k_sleep+0x1a>
   1f4d0:	200035c8 	.word	0x200035c8

0001f4d4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1f4d4:	4b01      	ldr	r3, [pc, #4]	; (1f4dc <z_impl_k_current_get+0x8>)
   1f4d6:	6898      	ldr	r0, [r3, #8]
   1f4d8:	4770      	bx	lr
   1f4da:	bf00      	nop
   1f4dc:	200035c8 	.word	0x200035c8

0001f4e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1f4e0:	b538      	push	{r3, r4, r5, lr}
   1f4e2:	4604      	mov	r4, r0
   1f4e4:	f04f 0320 	mov.w	r3, #32
   1f4e8:	f3ef 8511 	mrs	r5, BASEPRI
   1f4ec:	f383 8811 	msr	BASEPRI, r3
   1f4f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1f4f4:	f006 fc0b 	bl	25d0e <z_unpend_first_thread>

	if (thread != NULL) {
   1f4f8:	b148      	cbz	r0, 1f50e <z_impl_k_sem_give+0x2e>
   1f4fa:	2200      	movs	r2, #0
   1f4fc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1f4fe:	f006 fb93 	bl	25c28 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1f502:	4629      	mov	r1, r5
   1f504:	4808      	ldr	r0, [pc, #32]	; (1f528 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1f506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1f50a:	f7ff bcd9 	b.w	1eec0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f50e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1f512:	429a      	cmp	r2, r3
   1f514:	bf18      	it	ne
   1f516:	3301      	addne	r3, #1
   1f518:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1f51a:	2102      	movs	r1, #2
   1f51c:	f104 0010 	add.w	r0, r4, #16
   1f520:	f006 fe7e 	bl	26220 <z_handle_obj_poll_events>
}
   1f524:	e7ed      	b.n	1f502 <z_impl_k_sem_give+0x22>
   1f526:	bf00      	nop
   1f528:	20003bcd 	.word	0x20003bcd

0001f52c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1f52c:	b513      	push	{r0, r1, r4, lr}
   1f52e:	f04f 0420 	mov.w	r4, #32
   1f532:	f3ef 8111 	mrs	r1, BASEPRI
   1f536:	f384 8811 	msr	BASEPRI, r4
   1f53a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1f53e:	6884      	ldr	r4, [r0, #8]
   1f540:	b144      	cbz	r4, 1f554 <z_impl_k_sem_take+0x28>
		sem->count--;
   1f542:	3c01      	subs	r4, #1
   1f544:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1f546:	f381 8811 	msr	BASEPRI, r1
   1f54a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1f54e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1f550:	b002      	add	sp, #8
   1f552:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f554:	ea52 0403 	orrs.w	r4, r2, r3
   1f558:	d106      	bne.n	1f568 <z_impl_k_sem_take+0x3c>
   1f55a:	f381 8811 	msr	BASEPRI, r1
   1f55e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1f562:	f06f 000f 	mvn.w	r0, #15
   1f566:	e7f3      	b.n	1f550 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1f568:	e9cd 2300 	strd	r2, r3, [sp]
   1f56c:	4602      	mov	r2, r0
   1f56e:	4802      	ldr	r0, [pc, #8]	; (1f578 <z_impl_k_sem_take+0x4c>)
   1f570:	f7ff feb6 	bl	1f2e0 <z_pend_curr>
	return ret;
   1f574:	e7ec      	b.n	1f550 <z_impl_k_sem_take+0x24>
   1f576:	bf00      	nop
   1f578:	20003bcd 	.word	0x20003bcd

0001f57c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1f57c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1f57e:	4c08      	ldr	r4, [pc, #32]	; (1f5a0 <k_sys_work_q_init+0x24>)
   1f580:	4908      	ldr	r1, [pc, #32]	; (1f5a4 <k_sys_work_q_init+0x28>)
   1f582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f586:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f58a:	4620      	mov	r0, r4
   1f58c:	f000 f8c6 	bl	1f71c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1f590:	4905      	ldr	r1, [pc, #20]	; (1f5a8 <k_sys_work_q_init+0x2c>)
   1f592:	f104 0018 	add.w	r0, r4, #24
   1f596:	f006 fc0f 	bl	25db8 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1f59a:	2000      	movs	r0, #0
   1f59c:	bd10      	pop	{r4, pc}
   1f59e:	bf00      	nop
   1f5a0:	20001940 	.word	0x20001940
   1f5a4:	20005ce0 	.word	0x20005ce0
   1f5a8:	0002a553 	.word	0x0002a553

0001f5ac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f5ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1f5b0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1f5b4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1f5b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f5ba:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1f5bc:	2504      	movs	r5, #4
   1f5be:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f5c0:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
   1f5c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f5c4:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f5c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
   1f5c8:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f5ca:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   1f5ce:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1f5d2:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
   1f5d6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1f5d8:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f5da:	9202      	str	r2, [sp, #8]
   1f5dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f5de:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1f5e0:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f5e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f5e6:	9200      	str	r2, [sp, #0]
   1f5e8:	4642      	mov	r2, r8
{
   1f5ea:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f5ec:	f7e7 f8d6 	bl	679c <arch_new_thread>
	if (!_current) {
   1f5f0:	4b05      	ldr	r3, [pc, #20]	; (1f608 <z_setup_new_thread+0x5c>)
   1f5f2:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1f5f4:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1f5f8:	b103      	cbz	r3, 1f5fc <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1f5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1f5fc:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f5fe:	4640      	mov	r0, r8
   1f600:	b004      	add	sp, #16
   1f602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f606:	bf00      	nop
   1f608:	200035c8 	.word	0x200035c8

0001f60c <z_impl_k_thread_create>:
{
   1f60c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f60e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f610:	2700      	movs	r7, #0
   1f612:	9705      	str	r7, [sp, #20]
   1f614:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1f616:	9704      	str	r7, [sp, #16]
   1f618:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1f61a:	9703      	str	r7, [sp, #12]
   1f61c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1f61e:	9702      	str	r7, [sp, #8]
{
   1f620:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f624:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1f626:	9701      	str	r7, [sp, #4]
   1f628:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1f62a:	9700      	str	r7, [sp, #0]
{
   1f62c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f62e:	f7ff ffbd 	bl	1f5ac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1f632:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1f636:	bf08      	it	eq
   1f638:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1f63c:	d005      	beq.n	1f64a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f63e:	ea55 0306 	orrs.w	r3, r5, r6
   1f642:	d105      	bne.n	1f650 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1f644:	4620      	mov	r0, r4
   1f646:	f7ff fce7 	bl	1f018 <z_sched_start>
}
   1f64a:	4620      	mov	r0, r4
   1f64c:	b007      	add	sp, #28
   1f64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f650:	4903      	ldr	r1, [pc, #12]	; (1f660 <z_impl_k_thread_create+0x54>)
   1f652:	4632      	mov	r2, r6
   1f654:	462b      	mov	r3, r5
   1f656:	f104 0018 	add.w	r0, r4, #24
   1f65a:	f000 f903 	bl	1f864 <z_add_timeout>
   1f65e:	e7f4      	b.n	1f64a <z_impl_k_thread_create+0x3e>
   1f660:	00025c49 	.word	0x00025c49

0001f664 <z_init_static_threads>:
{
   1f664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f668:	4c29      	ldr	r4, [pc, #164]	; (1f710 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1f66a:	4d2a      	ldr	r5, [pc, #168]	; (1f714 <z_init_static_threads+0xb0>)
{
   1f66c:	b087      	sub	sp, #28
   1f66e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1f670:	42ae      	cmp	r6, r5
   1f672:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1f676:	d30f      	bcc.n	1f698 <z_init_static_threads+0x34>
	k_sched_lock();
   1f678:	f7ff fc34 	bl	1eee4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f67c:	4c24      	ldr	r4, [pc, #144]	; (1f710 <z_init_static_threads+0xac>)
   1f67e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1f718 <z_init_static_threads+0xb4>
   1f682:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f686:	f240 37e7 	movw	r7, #999	; 0x3e7
   1f68a:	42ac      	cmp	r4, r5
   1f68c:	d320      	bcc.n	1f6d0 <z_init_static_threads+0x6c>
}
   1f68e:	b007      	add	sp, #28
   1f690:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1f694:	f7ff bc74 	b.w	1ef80 <k_sched_unlock>
		z_setup_new_thread(
   1f698:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1f69c:	9305      	str	r3, [sp, #20]
   1f69e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1f6a2:	9304      	str	r3, [sp, #16]
   1f6a4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1f6a8:	9303      	str	r3, [sp, #12]
   1f6aa:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1f6ae:	9302      	str	r3, [sp, #8]
   1f6b0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1f6b4:	9301      	str	r3, [sp, #4]
   1f6b6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1f6ba:	9300      	str	r3, [sp, #0]
   1f6bc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1f6c0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1f6c4:	f7ff ff72 	bl	1f5ac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1f6c8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1f6cc:	65de      	str	r6, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
   1f6ce:	e7ce      	b.n	1f66e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1f6d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f6d2:	1c5a      	adds	r2, r3, #1
   1f6d4:	d00d      	beq.n	1f6f2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1f6d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f6da:	2100      	movs	r1, #0
   1f6dc:	4638      	mov	r0, r7
   1f6de:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f6e2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1f6e6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f6ea:	d104      	bne.n	1f6f6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1f6ec:	4640      	mov	r0, r8
   1f6ee:	f7ff fc93 	bl	1f018 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f6f2:	3430      	adds	r4, #48	; 0x30
   1f6f4:	e7c9      	b.n	1f68a <z_init_static_threads+0x26>
   1f6f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f6fa:	2300      	movs	r3, #0
   1f6fc:	f7e1 f824 	bl	748 <__aeabi_uldivmod>
   1f700:	4602      	mov	r2, r0
   1f702:	460b      	mov	r3, r1
   1f704:	f108 0018 	add.w	r0, r8, #24
   1f708:	4649      	mov	r1, r9
   1f70a:	f000 f8ab 	bl	1f864 <z_add_timeout>
   1f70e:	e7f0      	b.n	1f6f2 <z_init_static_threads+0x8e>
   1f710:	20000ed4 	.word	0x20000ed4
   1f714:	20000ed4 	.word	0x20000ed4
   1f718:	00025c49 	.word	0x00025c49

0001f71c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1f71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f720:	4604      	mov	r4, r0
   1f722:	b088      	sub	sp, #32
   1f724:	460d      	mov	r5, r1
   1f726:	4616      	mov	r6, r2
   1f728:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1f72a:	f006 f9c0 	bl	25aae <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1f72e:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f732:	2200      	movs	r2, #0
   1f734:	2300      	movs	r3, #0
   1f736:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f73a:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1f73e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1f742:	4b07      	ldr	r3, [pc, #28]	; (1f760 <k_work_q_start+0x44>)
   1f744:	9400      	str	r4, [sp, #0]
   1f746:	4632      	mov	r2, r6
   1f748:	4629      	mov	r1, r5
   1f74a:	4640      	mov	r0, r8
   1f74c:	f7ff ff5e 	bl	1f60c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1f750:	4904      	ldr	r1, [pc, #16]	; (1f764 <k_work_q_start+0x48>)
   1f752:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1f754:	b008      	add	sp, #32
   1f756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f75a:	f006 bb2d 	b.w	25db8 <z_impl_k_thread_name_set>
   1f75e:	bf00      	nop
   1f760:	00020ba5 	.word	0x00020ba5
   1f764:	0002a55c 	.word	0x0002a55c

0001f768 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1f768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f76c:	4606      	mov	r6, r0
   1f76e:	460d      	mov	r5, r1
   1f770:	4690      	mov	r8, r2
   1f772:	461f      	mov	r7, r3
	__asm__ volatile(
   1f774:	f04f 0320 	mov.w	r3, #32
   1f778:	f3ef 8911 	mrs	r9, BASEPRI
   1f77c:	f383 8811 	msr	BASEPRI, r3
   1f780:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1f784:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1f786:	b17b      	cbz	r3, 1f7a8 <k_delayed_work_submit_to_queue+0x40>
   1f788:	4283      	cmp	r3, r0
   1f78a:	d128      	bne.n	1f7de <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1f78c:	4628      	mov	r0, r5
   1f78e:	f006 fb35 	bl	25dfc <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1f792:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   1f796:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1f798:	d008      	beq.n	1f7ac <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1f79a:	2800      	cmp	r0, #0
   1f79c:	da07      	bge.n	1f7ae <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1f79e:	f389 8811 	msr	BASEPRI, r9
   1f7a2:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1f7a6:	e00f      	b.n	1f7c8 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1f7a8:	2800      	cmp	r0, #0
   1f7aa:	d0ef      	beq.n	1f78c <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1f7ac:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f7ae:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   1f7b2:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f7b4:	d10b      	bne.n	1f7ce <k_delayed_work_submit_to_queue+0x66>
   1f7b6:	f389 8811 	msr	BASEPRI, r9
   1f7ba:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1f7be:	4629      	mov	r1, r5
   1f7c0:	4630      	mov	r0, r6
   1f7c2:	f006 fafe 	bl	25dc2 <k_work_submit_to_queue>
		return 0;
   1f7c6:	2400      	movs	r4, #0
}
   1f7c8:	4620      	mov	r0, r4
   1f7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1f7ce:	4905      	ldr	r1, [pc, #20]	; (1f7e4 <k_delayed_work_submit_to_queue+0x7c>)
   1f7d0:	4642      	mov	r2, r8
   1f7d2:	463b      	mov	r3, r7
   1f7d4:	f105 0010 	add.w	r0, r5, #16
   1f7d8:	f000 f844 	bl	1f864 <z_add_timeout>
   1f7dc:	e7df      	b.n	1f79e <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1f7de:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1f7e2:	e7dc      	b.n	1f79e <k_delayed_work_submit_to_queue+0x36>
   1f7e4:	00025df3 	.word	0x00025df3

0001f7e8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1f7e8:	4b03      	ldr	r3, [pc, #12]	; (1f7f8 <elapsed+0x10>)
   1f7ea:	681b      	ldr	r3, [r3, #0]
   1f7ec:	b90b      	cbnz	r3, 1f7f2 <elapsed+0xa>
   1f7ee:	f7e6 bd4d 	b.w	628c <z_clock_elapsed>
}
   1f7f2:	2000      	movs	r0, #0
   1f7f4:	4770      	bx	lr
   1f7f6:	bf00      	nop
   1f7f8:	20003604 	.word	0x20003604

0001f7fc <next_timeout>:
	return list->head == list;
   1f7fc:	4b0a      	ldr	r3, [pc, #40]	; (1f828 <next_timeout+0x2c>)

static int32_t next_timeout(void)
{
   1f7fe:	b510      	push	{r4, lr}
   1f800:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f802:	429c      	cmp	r4, r3
   1f804:	bf08      	it	eq
   1f806:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1f808:	f7ff ffee 	bl	1f7e8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1f80c:	b144      	cbz	r4, 1f820 <next_timeout+0x24>
   1f80e:	6923      	ldr	r3, [r4, #16]
   1f810:	1a18      	subs	r0, r3, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1f812:	4b06      	ldr	r3, [pc, #24]	; (1f82c <next_timeout+0x30>)
   1f814:	691b      	ldr	r3, [r3, #16]
   1f816:	b113      	cbz	r3, 1f81e <next_timeout+0x22>
   1f818:	4298      	cmp	r0, r3
   1f81a:	bfa8      	it	ge
   1f81c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1f81e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1f820:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f824:	e7f5      	b.n	1f812 <next_timeout+0x16>
   1f826:	bf00      	nop
   1f828:	20000d10 	.word	0x20000d10
   1f82c:	200035c8 	.word	0x200035c8

0001f830 <remove_timeout>:
{
   1f830:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1f832:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f834:	b168      	cbz	r0, 1f852 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1f836:	4a0a      	ldr	r2, [pc, #40]	; (1f860 <remove_timeout+0x30>)
   1f838:	6852      	ldr	r2, [r2, #4]
   1f83a:	4290      	cmp	r0, r2
   1f83c:	d009      	beq.n	1f852 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1f83e:	b143      	cbz	r3, 1f852 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1f840:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1f844:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1f848:	1912      	adds	r2, r2, r4
   1f84a:	eb41 0105 	adc.w	r1, r1, r5
   1f84e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1f852:	6842      	ldr	r2, [r0, #4]
   1f854:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1f856:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f858:	2300      	movs	r3, #0
	node->prev = NULL;
   1f85a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f85e:	bd30      	pop	{r4, r5, pc}
   1f860:	20000d10 	.word	0x20000d10

0001f864 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f868:	bf08      	it	eq
   1f86a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1f86e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f872:	4604      	mov	r4, r0
   1f874:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f876:	d05f      	beq.n	1f938 <z_add_timeout+0xd4>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1f878:	1c55      	adds	r5, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1f87a:	f06f 0701 	mvn.w	r7, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1f87e:	f143 0600 	adc.w	r6, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1f882:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1f886:	1b7b      	subs	r3, r7, r5
   1f888:	eb69 0306 	sbc.w	r3, r9, r6
   1f88c:	2b00      	cmp	r3, #0
   1f88e:	db0d      	blt.n	1f8ac <z_add_timeout+0x48>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1f890:	f7ff ffaa 	bl	1f7e8 <elapsed>
   1f894:	4b2e      	ldr	r3, [pc, #184]	; (1f950 <z_add_timeout+0xec>)
   1f896:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f89a:	1abf      	subs	r7, r7, r2
   1f89c:	eb69 0303 	sbc.w	r3, r9, r3
   1f8a0:	1b7d      	subs	r5, r7, r5
   1f8a2:	eb63 0606 	sbc.w	r6, r3, r6
   1f8a6:	1a2d      	subs	r5, r5, r0
   1f8a8:	eb66 76e0 	sbc.w	r6, r6, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1f8ac:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   1f8b0:	f04f 0320 	mov.w	r3, #32
   1f8b4:	f3ef 8711 	mrs	r7, BASEPRI
   1f8b8:	f383 8811 	msr	BASEPRI, r3
   1f8bc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1f8c0:	f7ff ff92 	bl	1f7e8 <elapsed>
	ticks = MAX(1, ticks);
   1f8c4:	2d01      	cmp	r5, #1
	return list->head == list;
   1f8c6:	4a23      	ldr	r2, [pc, #140]	; (1f954 <z_add_timeout+0xf0>)
   1f8c8:	f176 0300 	sbcs.w	r3, r6, #0
   1f8cc:	bfb8      	it	lt
   1f8ce:	2501      	movlt	r5, #1
   1f8d0:	6813      	ldr	r3, [r2, #0]
   1f8d2:	bfb8      	it	lt
   1f8d4:	2600      	movlt	r6, #0
		to->dticks = ticks + elapsed();
   1f8d6:	182d      	adds	r5, r5, r0
   1f8d8:	eb46 76e0 	adc.w	r6, r6, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f8dc:	4293      	cmp	r3, r2
   1f8de:	e9c4 5604 	strd	r5, r6, [r4, #16]
   1f8e2:	d002      	beq.n	1f8ea <z_add_timeout+0x86>
	return (node == list->tail) ? NULL : node->next;
   1f8e4:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1f8e8:	b933      	cbnz	r3, 1f8f8 <z_add_timeout+0x94>
	node->prev = list->tail;
   1f8ea:	6853      	ldr	r3, [r2, #4]
   1f8ec:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1f8ee:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1f8f0:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
   1f8f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f8f4:	6054      	str	r4, [r2, #4]
}
   1f8f6:	e011      	b.n	1f91c <z_add_timeout+0xb8>
			if (t->dticks > to->dticks) {
   1f8f8:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
   1f8fc:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   1f900:	4281      	cmp	r1, r0
   1f902:	eb75 0e06 	sbcs.w	lr, r5, r6
   1f906:	d219      	bcs.n	1f93c <z_add_timeout+0xd8>
				t->dticks -= to->dticks;
   1f908:	1a41      	subs	r1, r0, r1
   1f90a:	eb66 0505 	sbc.w	r5, r6, r5
   1f90e:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   1f912:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1f914:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1f918:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1f91a:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1f91c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f91e:	4293      	cmp	r3, r2
   1f920:	d006      	beq.n	1f930 <z_add_timeout+0xcc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1f922:	429c      	cmp	r4, r3
   1f924:	d104      	bne.n	1f930 <z_add_timeout+0xcc>
			z_clock_set_timeout(next_timeout(), false);
   1f926:	f7ff ff69 	bl	1f7fc <next_timeout>
   1f92a:	2100      	movs	r1, #0
   1f92c:	f7e6 fc4a 	bl	61c4 <z_clock_set_timeout>
	__asm__ volatile(
   1f930:	f387 8811 	msr	BASEPRI, r7
   1f934:	f3bf 8f6f 	isb	sy
		}
	}
}
   1f938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   1f93c:	1a09      	subs	r1, r1, r0
   1f93e:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
   1f942:	4563      	cmp	r3, ip
   1f944:	e9c4 1504 	strd	r1, r5, [r4, #16]
   1f948:	d0cf      	beq.n	1f8ea <z_add_timeout+0x86>
   1f94a:	681b      	ldr	r3, [r3, #0]
   1f94c:	e7cc      	b.n	1f8e8 <z_add_timeout+0x84>
   1f94e:	bf00      	nop
   1f950:	200019d8 	.word	0x200019d8
   1f954:	20000d10 	.word	0x20000d10

0001f958 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1f958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f95c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1f95e:	f7ff fbbb 	bl	1f0d8 <z_time_slice>
	__asm__ volatile(
   1f962:	f04f 0320 	mov.w	r3, #32
   1f966:	f3ef 8411 	mrs	r4, BASEPRI
   1f96a:	f383 8811 	msr	BASEPRI, r3
   1f96e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1f972:	4e24      	ldr	r6, [pc, #144]	; (1fa04 <z_clock_announce+0xac>)
	return list->head == list;
   1f974:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1fa08 <z_clock_announce+0xb0>
   1f978:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1f97a:	4d24      	ldr	r5, [pc, #144]	; (1fa0c <z_clock_announce+0xb4>)
   1f97c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1f980:	6831      	ldr	r1, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f982:	4540      	cmp	r0, r8
		curr_tick += dt;
   1f984:	e9d5 2e00 	ldrd	r2, lr, [r5]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1f988:	ea4f 77e1 	mov.w	r7, r1, asr #31
   1f98c:	d00b      	beq.n	1f9a6 <z_clock_announce+0x4e>
   1f98e:	b150      	cbz	r0, 1f9a6 <z_clock_announce+0x4e>
   1f990:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1f994:	4299      	cmp	r1, r3
   1f996:	eb77 090c 	sbcs.w	r9, r7, ip
   1f99a:	d216      	bcs.n	1f9ca <z_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1f99c:	1a5b      	subs	r3, r3, r1
   1f99e:	eb6c 0c07 	sbc.w	ip, ip, r7
   1f9a2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1f9a6:	1852      	adds	r2, r2, r1
   1f9a8:	eb47 070e 	adc.w	r7, r7, lr
   1f9ac:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1f9b0:	2500      	movs	r5, #0
   1f9b2:	6035      	str	r5, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1f9b4:	f7ff ff22 	bl	1f7fc <next_timeout>
   1f9b8:	4629      	mov	r1, r5
   1f9ba:	f7e6 fc03 	bl	61c4 <z_clock_set_timeout>
	__asm__ volatile(
   1f9be:	f384 8811 	msr	BASEPRI, r4
   1f9c2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1f9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1f9ca:	189a      	adds	r2, r3, r2
   1f9cc:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1f9d0:	1acb      	subs	r3, r1, r3
		curr_tick += dt;
   1f9d2:	e9c5 2700 	strd	r2, r7, [r5]
		announce_remaining -= dt;
   1f9d6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1f9d8:	2200      	movs	r2, #0
   1f9da:	2300      	movs	r3, #0
   1f9dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1f9e0:	f7ff ff26 	bl	1f830 <remove_timeout>
   1f9e4:	f384 8811 	msr	BASEPRI, r4
   1f9e8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1f9ec:	6883      	ldr	r3, [r0, #8]
   1f9ee:	4798      	blx	r3
	__asm__ volatile(
   1f9f0:	f04f 0320 	mov.w	r3, #32
   1f9f4:	f3ef 8411 	mrs	r4, BASEPRI
   1f9f8:	f383 8811 	msr	BASEPRI, r3
   1f9fc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1fa00:	e7bc      	b.n	1f97c <z_clock_announce+0x24>
   1fa02:	bf00      	nop
   1fa04:	20003604 	.word	0x20003604
   1fa08:	20000d10 	.word	0x20000d10
   1fa0c:	200019d8 	.word	0x200019d8

0001fa10 <z_tick_get>:

int64_t z_tick_get(void)
{
   1fa10:	b510      	push	{r4, lr}
   1fa12:	f04f 0320 	mov.w	r3, #32
   1fa16:	f3ef 8411 	mrs	r4, BASEPRI
   1fa1a:	f383 8811 	msr	BASEPRI, r3
   1fa1e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1fa22:	f7e6 fc33 	bl	628c <z_clock_elapsed>
   1fa26:	4a05      	ldr	r2, [pc, #20]	; (1fa3c <z_tick_get+0x2c>)
   1fa28:	e9d2 3100 	ldrd	r3, r1, [r2]
   1fa2c:	18c0      	adds	r0, r0, r3
   1fa2e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1fa32:	f384 8811 	msr	BASEPRI, r4
   1fa36:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1fa3a:	bd10      	pop	{r4, pc}
   1fa3c:	200019d8 	.word	0x200019d8

0001fa40 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1fa40:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1fa42:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1fa46:	3301      	adds	r3, #1
   1fa48:	f142 0200 	adc.w	r2, r2, #0
   1fa4c:	2b02      	cmp	r3, #2
   1fa4e:	f172 0300 	sbcs.w	r3, r2, #0
{
   1fa52:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1fa54:	d304      	bcc.n	1fa60 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1fa56:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1fa5a:	490c      	ldr	r1, [pc, #48]	; (1fa8c <z_timer_expiration_handler+0x4c>)
   1fa5c:	f7ff ff02 	bl	1f864 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1fa60:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1fa62:	3301      	adds	r3, #1
   1fa64:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1fa66:	6a23      	ldr	r3, [r4, #32]
   1fa68:	b10b      	cbz	r3, 1fa6e <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   1fa6a:	4620      	mov	r0, r4
   1fa6c:	4798      	blx	r3
	return list->head == list;
   1fa6e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fa72:	42a5      	cmp	r5, r4
   1fa74:	d008      	beq.n	1fa88 <z_timer_expiration_handler+0x48>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1fa76:	b13d      	cbz	r5, 1fa88 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1fa78:	4628      	mov	r0, r5
   1fa7a:	f006 f883 	bl	25b84 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1fa7e:	4628      	mov	r0, r5
   1fa80:	f006 f8d2 	bl	25c28 <z_ready_thread>
   1fa84:	2300      	movs	r3, #0
   1fa86:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   1fa88:	bd38      	pop	{r3, r4, r5, pc}
   1fa8a:	bf00      	nop
   1fa8c:	0001fa41 	.word	0x0001fa41

0001fa90 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1fa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa94:	4611      	mov	r1, r2
   1fa96:	4605      	mov	r5, r0
   1fa98:	4618      	mov	r0, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1fa9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1fa9e:	bf08      	it	eq
   1faa0:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   1faa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1faa8:	4688      	mov	r8, r1
   1faaa:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1faac:	d036      	beq.n	1fb1c <z_impl_k_timer_start+0x8c>
   1faae:	4614      	mov	r4, r2
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1fab0:	431a      	orrs	r2, r3
   1fab2:	461e      	mov	r6, r3
   1fab4:	d011      	beq.n	1fada <z_impl_k_timer_start+0x4a>
   1fab6:	f06f 0201 	mvn.w	r2, #1
   1faba:	1b12      	subs	r2, r2, r4
   1fabc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fac0:	eb62 0203 	sbc.w	r2, r2, r3
   1fac4:	2a00      	cmp	r2, #0
   1fac6:	da08      	bge.n	1fada <z_impl_k_timer_start+0x4a>
		period.ticks = MAX(period.ticks - 1, 1);
   1fac8:	3c01      	subs	r4, #1
   1faca:	f163 0600 	sbc.w	r6, r3, #0
   1face:	2c01      	cmp	r4, #1
   1fad0:	f176 0300 	sbcs.w	r3, r6, #0
   1fad4:	bfbc      	itt	lt
   1fad6:	2401      	movlt	r4, #1
   1fad8:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1fada:	f06f 0301 	mvn.w	r3, #1
   1fade:	1a5b      	subs	r3, r3, r1
   1fae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fae4:	eb63 0300 	sbc.w	r3, r3, r0
   1fae8:	2b00      	cmp	r3, #0
   1faea:	da08      	bge.n	1fafe <z_impl_k_timer_start+0x6e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1faec:	1e4a      	subs	r2, r1, #1
   1faee:	f160 0700 	sbc.w	r7, r0, #0
   1faf2:	2f00      	cmp	r7, #0
   1faf4:	4690      	mov	r8, r2
   1faf6:	bfbc      	itt	lt
   1faf8:	f04f 0800 	movlt.w	r8, #0
   1fafc:	4647      	movlt	r7, r8
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1fafe:	4628      	mov	r0, r5
   1fb00:	f006 f9e2 	bl	25ec8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1fb04:	2300      	movs	r3, #0
   1fb06:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   1fb08:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1fb0c:	4642      	mov	r2, r8
   1fb0e:	463b      	mov	r3, r7
   1fb10:	4628      	mov	r0, r5
   1fb12:	4903      	ldr	r1, [pc, #12]	; (1fb20 <z_impl_k_timer_start+0x90>)
		     duration);
}
   1fb14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1fb18:	f7ff bea4 	b.w	1f864 <z_add_timeout>
}
   1fb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb20:	0001fa41 	.word	0x0001fa41

0001fb24 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1fb24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fb28:	b089      	sub	sp, #36	; 0x24
   1fb2a:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1fb2c:	2301      	movs	r3, #1
   1fb2e:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   1fb32:	4b29      	ldr	r3, [pc, #164]	; (1fbd8 <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
   1fb34:	689b      	ldr	r3, [r3, #8]
   1fb36:	9306      	str	r3, [sp, #24]
   1fb38:	4b28      	ldr	r3, [pc, #160]	; (1fbdc <z_impl_k_poll+0xb8>)
   1fb3a:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1fb3c:	ea52 0305 	orrs.w	r3, r2, r5
{
   1fb40:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
   1fb42:	bf0c      	ite	eq
   1fb44:	2301      	moveq	r3, #1
   1fb46:	2300      	movne	r3, #0
   1fb48:	aa05      	add	r2, sp, #20
{
   1fb4a:	4607      	mov	r7, r0
	events_registered = register_events(events, num_events, &poller,
   1fb4c:	f006 facb 	bl	260e6 <register_events>
   1fb50:	4680      	mov	r8, r0
	__asm__ volatile(
   1fb52:	f04f 0320 	mov.w	r3, #32
   1fb56:	f3ef 8911 	mrs	r9, BASEPRI
   1fb5a:	f383 8811 	msr	BASEPRI, r3
   1fb5e:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1fb62:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1fb66:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1fb6a:	b963      	cbnz	r3, 1fb86 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   1fb6c:	4601      	mov	r1, r0
   1fb6e:	464a      	mov	r2, r9
   1fb70:	4638      	mov	r0, r7
   1fb72:	f006 fb19 	bl	261a8 <clear_event_registrations>
	__asm__ volatile(
   1fb76:	f389 8811 	msr	BASEPRI, r9
   1fb7a:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1fb7e:	4620      	mov	r0, r4
   1fb80:	b009      	add	sp, #36	; 0x24
   1fb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   1fb86:	2300      	movs	r3, #0
   1fb88:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fb8c:	ea56 0305 	orrs.w	r3, r6, r5
   1fb90:	d106      	bne.n	1fba0 <z_impl_k_poll+0x7c>
   1fb92:	f389 8811 	msr	BASEPRI, r9
   1fb96:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1fb9a:	f06f 040a 	mvn.w	r4, #10
   1fb9e:	e7ee      	b.n	1fb7e <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1fba0:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1fba2:	e9cd 6500 	strd	r6, r5, [sp]
   1fba6:	4649      	mov	r1, r9
   1fba8:	480d      	ldr	r0, [pc, #52]	; (1fbe0 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1fbaa:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1fbae:	f7ff fb97 	bl	1f2e0 <z_pend_curr>
   1fbb2:	4604      	mov	r4, r0
	__asm__ volatile(
   1fbb4:	f04f 0320 	mov.w	r3, #32
   1fbb8:	f3ef 8511 	mrs	r5, BASEPRI
   1fbbc:	f383 8811 	msr	BASEPRI, r3
   1fbc0:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1fbc4:	462a      	mov	r2, r5
   1fbc6:	4641      	mov	r1, r8
   1fbc8:	4638      	mov	r0, r7
   1fbca:	f006 faed 	bl	261a8 <clear_event_registrations>
	__asm__ volatile(
   1fbce:	f385 8811 	msr	BASEPRI, r5
   1fbd2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1fbd6:	e7d2      	b.n	1fb7e <z_impl_k_poll+0x5a>
   1fbd8:	200035c8 	.word	0x200035c8
   1fbdc:	0002603d 	.word	0x0002603d
   1fbe0:	20003bcd 	.word	0x20003bcd

0001fbe4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1fbe4:	b538      	push	{r3, r4, r5, lr}
   1fbe6:	4603      	mov	r3, r0
	__asm__ volatile(
   1fbe8:	f04f 0220 	mov.w	r2, #32
   1fbec:	f3ef 8511 	mrs	r5, BASEPRI
   1fbf0:	f382 8811 	msr	BASEPRI, r2
   1fbf4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1fbf8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1fbfa:	2101      	movs	r1, #1
   1fbfc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1fbfe:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1fc00:	4283      	cmp	r3, r0
   1fc02:	d106      	bne.n	1fc12 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1fc04:	f385 8811 	msr	BASEPRI, r5
   1fc08:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1fc0c:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1fc0e:	4620      	mov	r0, r4
   1fc10:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1fc12:	e9d0 3200 	ldrd	r3, r2, [r0]
   1fc16:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1fc18:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fc1a:	2300      	movs	r3, #0
	node->prev = NULL;
   1fc1c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1fc20:	f006 f9f1 	bl	26006 <signal_poll_event>
	z_reschedule(&lock, key);
   1fc24:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1fc26:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1fc28:	4801      	ldr	r0, [pc, #4]	; (1fc30 <z_impl_k_poll_signal_raise+0x4c>)
   1fc2a:	f7ff f949 	bl	1eec0 <z_reschedule>
	return rc;
   1fc2e:	e7ee      	b.n	1fc0e <z_impl_k_poll_signal_raise+0x2a>
   1fc30:	20003bcd 	.word	0x20003bcd

0001fc34 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1fc34:	b510      	push	{r4, lr}
   1fc36:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1fc38:	f006 f8b6 	bl	25da8 <k_is_in_isr>
   1fc3c:	b940      	cbnz	r0, 1fc50 <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1fc3e:	4b05      	ldr	r3, [pc, #20]	; (1fc54 <z_thread_malloc+0x20>)
   1fc40:	689b      	ldr	r3, [r3, #8]
   1fc42:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	if (pool) {
   1fc44:	b120      	cbz	r0, 1fc50 <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   1fc46:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1fc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1fc4c:	f006 baf6 	b.w	2623c <k_mem_pool_malloc>
}
   1fc50:	2000      	movs	r0, #0
   1fc52:	bd10      	pop	{r4, pc}
   1fc54:	200035c8 	.word	0x200035c8

0001fc58 <__assert_func>:
   1fc58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1fc5a:	4614      	mov	r4, r2
   1fc5c:	461a      	mov	r2, r3
   1fc5e:	4b09      	ldr	r3, [pc, #36]	; (1fc84 <__assert_func+0x2c>)
   1fc60:	681b      	ldr	r3, [r3, #0]
   1fc62:	4605      	mov	r5, r0
   1fc64:	68d8      	ldr	r0, [r3, #12]
   1fc66:	b14c      	cbz	r4, 1fc7c <__assert_func+0x24>
   1fc68:	4b07      	ldr	r3, [pc, #28]	; (1fc88 <__assert_func+0x30>)
   1fc6a:	9100      	str	r1, [sp, #0]
   1fc6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1fc70:	4906      	ldr	r1, [pc, #24]	; (1fc8c <__assert_func+0x34>)
   1fc72:	462b      	mov	r3, r5
   1fc74:	f000 f80e 	bl	1fc94 <fiprintf>
   1fc78:	f006 fbd2 	bl	26420 <abort>
   1fc7c:	4b04      	ldr	r3, [pc, #16]	; (1fc90 <__assert_func+0x38>)
   1fc7e:	461c      	mov	r4, r3
   1fc80:	e7f3      	b.n	1fc6a <__assert_func+0x12>
   1fc82:	bf00      	nop
   1fc84:	20000d18 	.word	0x20000d18
   1fc88:	0002a566 	.word	0x0002a566
   1fc8c:	0002a573 	.word	0x0002a573
   1fc90:	00028822 	.word	0x00028822

0001fc94 <fiprintf>:
   1fc94:	b40e      	push	{r1, r2, r3}
   1fc96:	b503      	push	{r0, r1, lr}
   1fc98:	4601      	mov	r1, r0
   1fc9a:	ab03      	add	r3, sp, #12
   1fc9c:	4805      	ldr	r0, [pc, #20]	; (1fcb4 <fiprintf+0x20>)
   1fc9e:	f853 2b04 	ldr.w	r2, [r3], #4
   1fca2:	6800      	ldr	r0, [r0, #0]
   1fca4:	9301      	str	r3, [sp, #4]
   1fca6:	f000 f807 	bl	1fcb8 <_vfiprintf_r>
   1fcaa:	b002      	add	sp, #8
   1fcac:	f85d eb04 	ldr.w	lr, [sp], #4
   1fcb0:	b003      	add	sp, #12
   1fcb2:	4770      	bx	lr
   1fcb4:	20000d18 	.word	0x20000d18

0001fcb8 <_vfiprintf_r>:
   1fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcbc:	460d      	mov	r5, r1
   1fcbe:	b09d      	sub	sp, #116	; 0x74
   1fcc0:	4614      	mov	r4, r2
   1fcc2:	4698      	mov	r8, r3
   1fcc4:	4606      	mov	r6, r0
   1fcc6:	b118      	cbz	r0, 1fcd0 <_vfiprintf_r+0x18>
   1fcc8:	6983      	ldr	r3, [r0, #24]
   1fcca:	b90b      	cbnz	r3, 1fcd0 <_vfiprintf_r+0x18>
   1fccc:	f000 fc0a 	bl	204e4 <__sinit>
   1fcd0:	4b89      	ldr	r3, [pc, #548]	; (1fef8 <_vfiprintf_r+0x240>)
   1fcd2:	429d      	cmp	r5, r3
   1fcd4:	d11b      	bne.n	1fd0e <_vfiprintf_r+0x56>
   1fcd6:	6875      	ldr	r5, [r6, #4]
   1fcd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1fcda:	07d9      	lsls	r1, r3, #31
   1fcdc:	d405      	bmi.n	1fcea <_vfiprintf_r+0x32>
   1fcde:	89ab      	ldrh	r3, [r5, #12]
   1fce0:	059a      	lsls	r2, r3, #22
   1fce2:	d402      	bmi.n	1fcea <_vfiprintf_r+0x32>
   1fce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1fce6:	f006 fbd8 	bl	2649a <__retarget_lock_acquire_recursive>
   1fcea:	89ab      	ldrh	r3, [r5, #12]
   1fcec:	071b      	lsls	r3, r3, #28
   1fcee:	d501      	bpl.n	1fcf4 <_vfiprintf_r+0x3c>
   1fcf0:	692b      	ldr	r3, [r5, #16]
   1fcf2:	b9eb      	cbnz	r3, 1fd30 <_vfiprintf_r+0x78>
   1fcf4:	4629      	mov	r1, r5
   1fcf6:	4630      	mov	r0, r6
   1fcf8:	f000 fa86 	bl	20208 <__swsetup_r>
   1fcfc:	b1c0      	cbz	r0, 1fd30 <_vfiprintf_r+0x78>
   1fcfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1fd00:	07dc      	lsls	r4, r3, #31
   1fd02:	d50e      	bpl.n	1fd22 <_vfiprintf_r+0x6a>
   1fd04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fd08:	b01d      	add	sp, #116	; 0x74
   1fd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd0e:	4b7b      	ldr	r3, [pc, #492]	; (1fefc <_vfiprintf_r+0x244>)
   1fd10:	429d      	cmp	r5, r3
   1fd12:	d101      	bne.n	1fd18 <_vfiprintf_r+0x60>
   1fd14:	68b5      	ldr	r5, [r6, #8]
   1fd16:	e7df      	b.n	1fcd8 <_vfiprintf_r+0x20>
   1fd18:	4b79      	ldr	r3, [pc, #484]	; (1ff00 <_vfiprintf_r+0x248>)
   1fd1a:	429d      	cmp	r5, r3
   1fd1c:	bf08      	it	eq
   1fd1e:	68f5      	ldreq	r5, [r6, #12]
   1fd20:	e7da      	b.n	1fcd8 <_vfiprintf_r+0x20>
   1fd22:	89ab      	ldrh	r3, [r5, #12]
   1fd24:	0598      	lsls	r0, r3, #22
   1fd26:	d4ed      	bmi.n	1fd04 <_vfiprintf_r+0x4c>
   1fd28:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1fd2a:	f006 fbb7 	bl	2649c <__retarget_lock_release_recursive>
   1fd2e:	e7e9      	b.n	1fd04 <_vfiprintf_r+0x4c>
   1fd30:	2300      	movs	r3, #0
   1fd32:	9309      	str	r3, [sp, #36]	; 0x24
   1fd34:	2320      	movs	r3, #32
   1fd36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1fd3a:	f8cd 800c 	str.w	r8, [sp, #12]
   1fd3e:	2330      	movs	r3, #48	; 0x30
   1fd40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 1ff04 <_vfiprintf_r+0x24c>
   1fd44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1fd48:	f04f 0901 	mov.w	r9, #1
   1fd4c:	4623      	mov	r3, r4
   1fd4e:	469a      	mov	sl, r3
   1fd50:	f813 2b01 	ldrb.w	r2, [r3], #1
   1fd54:	b10a      	cbz	r2, 1fd5a <_vfiprintf_r+0xa2>
   1fd56:	2a25      	cmp	r2, #37	; 0x25
   1fd58:	d1f9      	bne.n	1fd4e <_vfiprintf_r+0x96>
   1fd5a:	ebba 0b04 	subs.w	fp, sl, r4
   1fd5e:	d00b      	beq.n	1fd78 <_vfiprintf_r+0xc0>
   1fd60:	465b      	mov	r3, fp
   1fd62:	4622      	mov	r2, r4
   1fd64:	4629      	mov	r1, r5
   1fd66:	4630      	mov	r0, r6
   1fd68:	f006 fac0 	bl	262ec <__sfputs_r>
   1fd6c:	3001      	adds	r0, #1
   1fd6e:	f000 80aa 	beq.w	1fec6 <_vfiprintf_r+0x20e>
   1fd72:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fd74:	445a      	add	r2, fp
   1fd76:	9209      	str	r2, [sp, #36]	; 0x24
   1fd78:	f89a 3000 	ldrb.w	r3, [sl]
   1fd7c:	2b00      	cmp	r3, #0
   1fd7e:	f000 80a2 	beq.w	1fec6 <_vfiprintf_r+0x20e>
   1fd82:	2300      	movs	r3, #0
   1fd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fd88:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1fd8c:	f10a 0a01 	add.w	sl, sl, #1
   1fd90:	9304      	str	r3, [sp, #16]
   1fd92:	9307      	str	r3, [sp, #28]
   1fd94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1fd98:	931a      	str	r3, [sp, #104]	; 0x68
   1fd9a:	4654      	mov	r4, sl
   1fd9c:	2205      	movs	r2, #5
   1fd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   1fda2:	4858      	ldr	r0, [pc, #352]	; (1ff04 <_vfiprintf_r+0x24c>)
   1fda4:	f7e0 f9ac 	bl	100 <memchr>
   1fda8:	9a04      	ldr	r2, [sp, #16]
   1fdaa:	b9d8      	cbnz	r0, 1fde4 <_vfiprintf_r+0x12c>
   1fdac:	06d1      	lsls	r1, r2, #27
   1fdae:	bf44      	itt	mi
   1fdb0:	2320      	movmi	r3, #32
   1fdb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1fdb6:	0713      	lsls	r3, r2, #28
   1fdb8:	bf44      	itt	mi
   1fdba:	232b      	movmi	r3, #43	; 0x2b
   1fdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1fdc0:	f89a 3000 	ldrb.w	r3, [sl]
   1fdc4:	2b2a      	cmp	r3, #42	; 0x2a
   1fdc6:	d015      	beq.n	1fdf4 <_vfiprintf_r+0x13c>
   1fdc8:	9a07      	ldr	r2, [sp, #28]
   1fdca:	4654      	mov	r4, sl
   1fdcc:	2000      	movs	r0, #0
   1fdce:	f04f 0c0a 	mov.w	ip, #10
   1fdd2:	4621      	mov	r1, r4
   1fdd4:	f811 3b01 	ldrb.w	r3, [r1], #1
   1fdd8:	3b30      	subs	r3, #48	; 0x30
   1fdda:	2b09      	cmp	r3, #9
   1fddc:	d94e      	bls.n	1fe7c <_vfiprintf_r+0x1c4>
   1fdde:	b1b0      	cbz	r0, 1fe0e <_vfiprintf_r+0x156>
   1fde0:	9207      	str	r2, [sp, #28]
   1fde2:	e014      	b.n	1fe0e <_vfiprintf_r+0x156>
   1fde4:	eba0 0308 	sub.w	r3, r0, r8
   1fde8:	fa09 f303 	lsl.w	r3, r9, r3
   1fdec:	4313      	orrs	r3, r2
   1fdee:	9304      	str	r3, [sp, #16]
   1fdf0:	46a2      	mov	sl, r4
   1fdf2:	e7d2      	b.n	1fd9a <_vfiprintf_r+0xe2>
   1fdf4:	9b03      	ldr	r3, [sp, #12]
   1fdf6:	1d19      	adds	r1, r3, #4
   1fdf8:	681b      	ldr	r3, [r3, #0]
   1fdfa:	9103      	str	r1, [sp, #12]
   1fdfc:	2b00      	cmp	r3, #0
   1fdfe:	bfbb      	ittet	lt
   1fe00:	425b      	neglt	r3, r3
   1fe02:	f042 0202 	orrlt.w	r2, r2, #2
   1fe06:	9307      	strge	r3, [sp, #28]
   1fe08:	9307      	strlt	r3, [sp, #28]
   1fe0a:	bfb8      	it	lt
   1fe0c:	9204      	strlt	r2, [sp, #16]
   1fe0e:	7823      	ldrb	r3, [r4, #0]
   1fe10:	2b2e      	cmp	r3, #46	; 0x2e
   1fe12:	d10c      	bne.n	1fe2e <_vfiprintf_r+0x176>
   1fe14:	7863      	ldrb	r3, [r4, #1]
   1fe16:	2b2a      	cmp	r3, #42	; 0x2a
   1fe18:	d135      	bne.n	1fe86 <_vfiprintf_r+0x1ce>
   1fe1a:	9b03      	ldr	r3, [sp, #12]
   1fe1c:	1d1a      	adds	r2, r3, #4
   1fe1e:	681b      	ldr	r3, [r3, #0]
   1fe20:	9203      	str	r2, [sp, #12]
   1fe22:	2b00      	cmp	r3, #0
   1fe24:	bfb8      	it	lt
   1fe26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1fe2a:	3402      	adds	r4, #2
   1fe2c:	9305      	str	r3, [sp, #20]
   1fe2e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1ff08 <_vfiprintf_r+0x250>
   1fe32:	7821      	ldrb	r1, [r4, #0]
   1fe34:	2203      	movs	r2, #3
   1fe36:	4650      	mov	r0, sl
   1fe38:	f7e0 f962 	bl	100 <memchr>
   1fe3c:	b140      	cbz	r0, 1fe50 <_vfiprintf_r+0x198>
   1fe3e:	2340      	movs	r3, #64	; 0x40
   1fe40:	eba0 000a 	sub.w	r0, r0, sl
   1fe44:	fa03 f000 	lsl.w	r0, r3, r0
   1fe48:	9b04      	ldr	r3, [sp, #16]
   1fe4a:	4303      	orrs	r3, r0
   1fe4c:	3401      	adds	r4, #1
   1fe4e:	9304      	str	r3, [sp, #16]
   1fe50:	f814 1b01 	ldrb.w	r1, [r4], #1
   1fe54:	482d      	ldr	r0, [pc, #180]	; (1ff0c <_vfiprintf_r+0x254>)
   1fe56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1fe5a:	2206      	movs	r2, #6
   1fe5c:	f7e0 f950 	bl	100 <memchr>
   1fe60:	2800      	cmp	r0, #0
   1fe62:	d03f      	beq.n	1fee4 <_vfiprintf_r+0x22c>
   1fe64:	4b2a      	ldr	r3, [pc, #168]	; (1ff10 <_vfiprintf_r+0x258>)
   1fe66:	bb1b      	cbnz	r3, 1feb0 <_vfiprintf_r+0x1f8>
   1fe68:	9b03      	ldr	r3, [sp, #12]
   1fe6a:	3307      	adds	r3, #7
   1fe6c:	f023 0307 	bic.w	r3, r3, #7
   1fe70:	3308      	adds	r3, #8
   1fe72:	9303      	str	r3, [sp, #12]
   1fe74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fe76:	443b      	add	r3, r7
   1fe78:	9309      	str	r3, [sp, #36]	; 0x24
   1fe7a:	e767      	b.n	1fd4c <_vfiprintf_r+0x94>
   1fe7c:	fb0c 3202 	mla	r2, ip, r2, r3
   1fe80:	460c      	mov	r4, r1
   1fe82:	2001      	movs	r0, #1
   1fe84:	e7a5      	b.n	1fdd2 <_vfiprintf_r+0x11a>
   1fe86:	2300      	movs	r3, #0
   1fe88:	3401      	adds	r4, #1
   1fe8a:	9305      	str	r3, [sp, #20]
   1fe8c:	4619      	mov	r1, r3
   1fe8e:	f04f 0c0a 	mov.w	ip, #10
   1fe92:	4620      	mov	r0, r4
   1fe94:	f810 2b01 	ldrb.w	r2, [r0], #1
   1fe98:	3a30      	subs	r2, #48	; 0x30
   1fe9a:	2a09      	cmp	r2, #9
   1fe9c:	d903      	bls.n	1fea6 <_vfiprintf_r+0x1ee>
   1fe9e:	2b00      	cmp	r3, #0
   1fea0:	d0c5      	beq.n	1fe2e <_vfiprintf_r+0x176>
   1fea2:	9105      	str	r1, [sp, #20]
   1fea4:	e7c3      	b.n	1fe2e <_vfiprintf_r+0x176>
   1fea6:	fb0c 2101 	mla	r1, ip, r1, r2
   1feaa:	4604      	mov	r4, r0
   1feac:	2301      	movs	r3, #1
   1feae:	e7f0      	b.n	1fe92 <_vfiprintf_r+0x1da>
   1feb0:	ab03      	add	r3, sp, #12
   1feb2:	9300      	str	r3, [sp, #0]
   1feb4:	462a      	mov	r2, r5
   1feb6:	4b17      	ldr	r3, [pc, #92]	; (1ff14 <_vfiprintf_r+0x25c>)
   1feb8:	a904      	add	r1, sp, #16
   1feba:	4630      	mov	r0, r6
   1febc:	f3af 8000 	nop.w
   1fec0:	4607      	mov	r7, r0
   1fec2:	1c78      	adds	r0, r7, #1
   1fec4:	d1d6      	bne.n	1fe74 <_vfiprintf_r+0x1bc>
   1fec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1fec8:	07d9      	lsls	r1, r3, #31
   1feca:	d405      	bmi.n	1fed8 <_vfiprintf_r+0x220>
   1fecc:	89ab      	ldrh	r3, [r5, #12]
   1fece:	059a      	lsls	r2, r3, #22
   1fed0:	d402      	bmi.n	1fed8 <_vfiprintf_r+0x220>
   1fed2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1fed4:	f006 fae2 	bl	2649c <__retarget_lock_release_recursive>
   1fed8:	89ab      	ldrh	r3, [r5, #12]
   1feda:	065b      	lsls	r3, r3, #25
   1fedc:	f53f af12 	bmi.w	1fd04 <_vfiprintf_r+0x4c>
   1fee0:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fee2:	e711      	b.n	1fd08 <_vfiprintf_r+0x50>
   1fee4:	ab03      	add	r3, sp, #12
   1fee6:	9300      	str	r3, [sp, #0]
   1fee8:	462a      	mov	r2, r5
   1feea:	4b0a      	ldr	r3, [pc, #40]	; (1ff14 <_vfiprintf_r+0x25c>)
   1feec:	a904      	add	r1, sp, #16
   1feee:	4630      	mov	r0, r6
   1fef0:	f000 f812 	bl	1ff18 <_printf_i>
   1fef4:	e7e4      	b.n	1fec0 <_vfiprintf_r+0x208>
   1fef6:	bf00      	nop
   1fef8:	000283ac 	.word	0x000283ac
   1fefc:	000283cc 	.word	0x000283cc
   1ff00:	0002838c 	.word	0x0002838c
   1ff04:	0002a6a3 	.word	0x0002a6a3
   1ff08:	0002a6a9 	.word	0x0002a6a9
   1ff0c:	0002a6ad 	.word	0x0002a6ad
   1ff10:	00000000 	.word	0x00000000
   1ff14:	000262ed 	.word	0x000262ed

0001ff18 <_printf_i>:
   1ff18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1ff1c:	7e0f      	ldrb	r7, [r1, #24]
   1ff1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1ff20:	2f78      	cmp	r7, #120	; 0x78
   1ff22:	4691      	mov	r9, r2
   1ff24:	4680      	mov	r8, r0
   1ff26:	460c      	mov	r4, r1
   1ff28:	469a      	mov	sl, r3
   1ff2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   1ff2e:	d807      	bhi.n	1ff40 <_printf_i+0x28>
   1ff30:	2f62      	cmp	r7, #98	; 0x62
   1ff32:	d80a      	bhi.n	1ff4a <_printf_i+0x32>
   1ff34:	2f00      	cmp	r7, #0
   1ff36:	f000 80d8 	beq.w	200ea <_printf_i+0x1d2>
   1ff3a:	2f58      	cmp	r7, #88	; 0x58
   1ff3c:	f000 80a3 	beq.w	20086 <_printf_i+0x16e>
   1ff40:	f104 0542 	add.w	r5, r4, #66	; 0x42
   1ff44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1ff48:	e03a      	b.n	1ffc0 <_printf_i+0xa8>
   1ff4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1ff4e:	2b15      	cmp	r3, #21
   1ff50:	d8f6      	bhi.n	1ff40 <_printf_i+0x28>
   1ff52:	a101      	add	r1, pc, #4	; (adr r1, 1ff58 <_printf_i+0x40>)
   1ff54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1ff58:	0001ffb1 	.word	0x0001ffb1
   1ff5c:	0001ffc5 	.word	0x0001ffc5
   1ff60:	0001ff41 	.word	0x0001ff41
   1ff64:	0001ff41 	.word	0x0001ff41
   1ff68:	0001ff41 	.word	0x0001ff41
   1ff6c:	0001ff41 	.word	0x0001ff41
   1ff70:	0001ffc5 	.word	0x0001ffc5
   1ff74:	0001ff41 	.word	0x0001ff41
   1ff78:	0001ff41 	.word	0x0001ff41
   1ff7c:	0001ff41 	.word	0x0001ff41
   1ff80:	0001ff41 	.word	0x0001ff41
   1ff84:	000200d1 	.word	0x000200d1
   1ff88:	0001fff5 	.word	0x0001fff5
   1ff8c:	000200b3 	.word	0x000200b3
   1ff90:	0001ff41 	.word	0x0001ff41
   1ff94:	0001ff41 	.word	0x0001ff41
   1ff98:	000200f3 	.word	0x000200f3
   1ff9c:	0001ff41 	.word	0x0001ff41
   1ffa0:	0001fff5 	.word	0x0001fff5
   1ffa4:	0001ff41 	.word	0x0001ff41
   1ffa8:	0001ff41 	.word	0x0001ff41
   1ffac:	000200bb 	.word	0x000200bb
   1ffb0:	682b      	ldr	r3, [r5, #0]
   1ffb2:	1d1a      	adds	r2, r3, #4
   1ffb4:	681b      	ldr	r3, [r3, #0]
   1ffb6:	602a      	str	r2, [r5, #0]
   1ffb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   1ffbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1ffc0:	2301      	movs	r3, #1
   1ffc2:	e0a3      	b.n	2010c <_printf_i+0x1f4>
   1ffc4:	6820      	ldr	r0, [r4, #0]
   1ffc6:	6829      	ldr	r1, [r5, #0]
   1ffc8:	0606      	lsls	r6, r0, #24
   1ffca:	f101 0304 	add.w	r3, r1, #4
   1ffce:	d50a      	bpl.n	1ffe6 <_printf_i+0xce>
   1ffd0:	680e      	ldr	r6, [r1, #0]
   1ffd2:	602b      	str	r3, [r5, #0]
   1ffd4:	2e00      	cmp	r6, #0
   1ffd6:	da03      	bge.n	1ffe0 <_printf_i+0xc8>
   1ffd8:	232d      	movs	r3, #45	; 0x2d
   1ffda:	4276      	negs	r6, r6
   1ffdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1ffe0:	485e      	ldr	r0, [pc, #376]	; (2015c <_printf_i+0x244>)
   1ffe2:	230a      	movs	r3, #10
   1ffe4:	e019      	b.n	2001a <_printf_i+0x102>
   1ffe6:	680e      	ldr	r6, [r1, #0]
   1ffe8:	602b      	str	r3, [r5, #0]
   1ffea:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ffee:	bf18      	it	ne
   1fff0:	b236      	sxthne	r6, r6
   1fff2:	e7ef      	b.n	1ffd4 <_printf_i+0xbc>
   1fff4:	682b      	ldr	r3, [r5, #0]
   1fff6:	6820      	ldr	r0, [r4, #0]
   1fff8:	1d19      	adds	r1, r3, #4
   1fffa:	6029      	str	r1, [r5, #0]
   1fffc:	0601      	lsls	r1, r0, #24
   1fffe:	d501      	bpl.n	20004 <_printf_i+0xec>
   20000:	681e      	ldr	r6, [r3, #0]
   20002:	e002      	b.n	2000a <_printf_i+0xf2>
   20004:	0646      	lsls	r6, r0, #25
   20006:	d5fb      	bpl.n	20000 <_printf_i+0xe8>
   20008:	881e      	ldrh	r6, [r3, #0]
   2000a:	4854      	ldr	r0, [pc, #336]	; (2015c <_printf_i+0x244>)
   2000c:	2f6f      	cmp	r7, #111	; 0x6f
   2000e:	bf0c      	ite	eq
   20010:	2308      	moveq	r3, #8
   20012:	230a      	movne	r3, #10
   20014:	2100      	movs	r1, #0
   20016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2001a:	6865      	ldr	r5, [r4, #4]
   2001c:	60a5      	str	r5, [r4, #8]
   2001e:	2d00      	cmp	r5, #0
   20020:	bfa2      	ittt	ge
   20022:	6821      	ldrge	r1, [r4, #0]
   20024:	f021 0104 	bicge.w	r1, r1, #4
   20028:	6021      	strge	r1, [r4, #0]
   2002a:	b90e      	cbnz	r6, 20030 <_printf_i+0x118>
   2002c:	2d00      	cmp	r5, #0
   2002e:	d04d      	beq.n	200cc <_printf_i+0x1b4>
   20030:	4615      	mov	r5, r2
   20032:	fbb6 f1f3 	udiv	r1, r6, r3
   20036:	fb03 6711 	mls	r7, r3, r1, r6
   2003a:	5dc7      	ldrb	r7, [r0, r7]
   2003c:	f805 7d01 	strb.w	r7, [r5, #-1]!
   20040:	4637      	mov	r7, r6
   20042:	42bb      	cmp	r3, r7
   20044:	460e      	mov	r6, r1
   20046:	d9f4      	bls.n	20032 <_printf_i+0x11a>
   20048:	2b08      	cmp	r3, #8
   2004a:	d10b      	bne.n	20064 <_printf_i+0x14c>
   2004c:	6823      	ldr	r3, [r4, #0]
   2004e:	07de      	lsls	r6, r3, #31
   20050:	d508      	bpl.n	20064 <_printf_i+0x14c>
   20052:	6923      	ldr	r3, [r4, #16]
   20054:	6861      	ldr	r1, [r4, #4]
   20056:	4299      	cmp	r1, r3
   20058:	bfde      	ittt	le
   2005a:	2330      	movle	r3, #48	; 0x30
   2005c:	f805 3c01 	strble.w	r3, [r5, #-1]
   20060:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   20064:	1b52      	subs	r2, r2, r5
   20066:	6122      	str	r2, [r4, #16]
   20068:	f8cd a000 	str.w	sl, [sp]
   2006c:	464b      	mov	r3, r9
   2006e:	aa03      	add	r2, sp, #12
   20070:	4621      	mov	r1, r4
   20072:	4640      	mov	r0, r8
   20074:	f006 f94c 	bl	26310 <_printf_common>
   20078:	3001      	adds	r0, #1
   2007a:	d14c      	bne.n	20116 <_printf_i+0x1fe>
   2007c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20080:	b004      	add	sp, #16
   20082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20086:	4835      	ldr	r0, [pc, #212]	; (2015c <_printf_i+0x244>)
   20088:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   2008c:	6829      	ldr	r1, [r5, #0]
   2008e:	6823      	ldr	r3, [r4, #0]
   20090:	f851 6b04 	ldr.w	r6, [r1], #4
   20094:	6029      	str	r1, [r5, #0]
   20096:	061d      	lsls	r5, r3, #24
   20098:	d514      	bpl.n	200c4 <_printf_i+0x1ac>
   2009a:	07df      	lsls	r7, r3, #31
   2009c:	bf44      	itt	mi
   2009e:	f043 0320 	orrmi.w	r3, r3, #32
   200a2:	6023      	strmi	r3, [r4, #0]
   200a4:	b91e      	cbnz	r6, 200ae <_printf_i+0x196>
   200a6:	6823      	ldr	r3, [r4, #0]
   200a8:	f023 0320 	bic.w	r3, r3, #32
   200ac:	6023      	str	r3, [r4, #0]
   200ae:	2310      	movs	r3, #16
   200b0:	e7b0      	b.n	20014 <_printf_i+0xfc>
   200b2:	6823      	ldr	r3, [r4, #0]
   200b4:	f043 0320 	orr.w	r3, r3, #32
   200b8:	6023      	str	r3, [r4, #0]
   200ba:	2378      	movs	r3, #120	; 0x78
   200bc:	4828      	ldr	r0, [pc, #160]	; (20160 <_printf_i+0x248>)
   200be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   200c2:	e7e3      	b.n	2008c <_printf_i+0x174>
   200c4:	0659      	lsls	r1, r3, #25
   200c6:	bf48      	it	mi
   200c8:	b2b6      	uxthmi	r6, r6
   200ca:	e7e6      	b.n	2009a <_printf_i+0x182>
   200cc:	4615      	mov	r5, r2
   200ce:	e7bb      	b.n	20048 <_printf_i+0x130>
   200d0:	682b      	ldr	r3, [r5, #0]
   200d2:	6826      	ldr	r6, [r4, #0]
   200d4:	6961      	ldr	r1, [r4, #20]
   200d6:	1d18      	adds	r0, r3, #4
   200d8:	6028      	str	r0, [r5, #0]
   200da:	0635      	lsls	r5, r6, #24
   200dc:	681b      	ldr	r3, [r3, #0]
   200de:	d501      	bpl.n	200e4 <_printf_i+0x1cc>
   200e0:	6019      	str	r1, [r3, #0]
   200e2:	e002      	b.n	200ea <_printf_i+0x1d2>
   200e4:	0670      	lsls	r0, r6, #25
   200e6:	d5fb      	bpl.n	200e0 <_printf_i+0x1c8>
   200e8:	8019      	strh	r1, [r3, #0]
   200ea:	2300      	movs	r3, #0
   200ec:	6123      	str	r3, [r4, #16]
   200ee:	4615      	mov	r5, r2
   200f0:	e7ba      	b.n	20068 <_printf_i+0x150>
   200f2:	682b      	ldr	r3, [r5, #0]
   200f4:	1d1a      	adds	r2, r3, #4
   200f6:	602a      	str	r2, [r5, #0]
   200f8:	681d      	ldr	r5, [r3, #0]
   200fa:	6862      	ldr	r2, [r4, #4]
   200fc:	2100      	movs	r1, #0
   200fe:	4628      	mov	r0, r5
   20100:	f7df fffe 	bl	100 <memchr>
   20104:	b108      	cbz	r0, 2010a <_printf_i+0x1f2>
   20106:	1b40      	subs	r0, r0, r5
   20108:	6060      	str	r0, [r4, #4]
   2010a:	6863      	ldr	r3, [r4, #4]
   2010c:	6123      	str	r3, [r4, #16]
   2010e:	2300      	movs	r3, #0
   20110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   20114:	e7a8      	b.n	20068 <_printf_i+0x150>
   20116:	6923      	ldr	r3, [r4, #16]
   20118:	462a      	mov	r2, r5
   2011a:	4649      	mov	r1, r9
   2011c:	4640      	mov	r0, r8
   2011e:	47d0      	blx	sl
   20120:	3001      	adds	r0, #1
   20122:	d0ab      	beq.n	2007c <_printf_i+0x164>
   20124:	6823      	ldr	r3, [r4, #0]
   20126:	079b      	lsls	r3, r3, #30
   20128:	d413      	bmi.n	20152 <_printf_i+0x23a>
   2012a:	68e0      	ldr	r0, [r4, #12]
   2012c:	9b03      	ldr	r3, [sp, #12]
   2012e:	4298      	cmp	r0, r3
   20130:	bfb8      	it	lt
   20132:	4618      	movlt	r0, r3
   20134:	e7a4      	b.n	20080 <_printf_i+0x168>
   20136:	2301      	movs	r3, #1
   20138:	4632      	mov	r2, r6
   2013a:	4649      	mov	r1, r9
   2013c:	4640      	mov	r0, r8
   2013e:	47d0      	blx	sl
   20140:	3001      	adds	r0, #1
   20142:	d09b      	beq.n	2007c <_printf_i+0x164>
   20144:	3501      	adds	r5, #1
   20146:	68e3      	ldr	r3, [r4, #12]
   20148:	9903      	ldr	r1, [sp, #12]
   2014a:	1a5b      	subs	r3, r3, r1
   2014c:	42ab      	cmp	r3, r5
   2014e:	dcf2      	bgt.n	20136 <_printf_i+0x21e>
   20150:	e7eb      	b.n	2012a <_printf_i+0x212>
   20152:	2500      	movs	r5, #0
   20154:	f104 0619 	add.w	r6, r4, #25
   20158:	e7f5      	b.n	20146 <_printf_i+0x22e>
   2015a:	bf00      	nop
   2015c:	0002a6b4 	.word	0x0002a6b4
   20160:	00028741 	.word	0x00028741

00020164 <__swbuf_r>:
   20164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20166:	460e      	mov	r6, r1
   20168:	4614      	mov	r4, r2
   2016a:	4605      	mov	r5, r0
   2016c:	b118      	cbz	r0, 20176 <__swbuf_r+0x12>
   2016e:	6983      	ldr	r3, [r0, #24]
   20170:	b90b      	cbnz	r3, 20176 <__swbuf_r+0x12>
   20172:	f000 f9b7 	bl	204e4 <__sinit>
   20176:	4b21      	ldr	r3, [pc, #132]	; (201fc <__swbuf_r+0x98>)
   20178:	429c      	cmp	r4, r3
   2017a:	d12b      	bne.n	201d4 <__swbuf_r+0x70>
   2017c:	686c      	ldr	r4, [r5, #4]
   2017e:	69a3      	ldr	r3, [r4, #24]
   20180:	60a3      	str	r3, [r4, #8]
   20182:	89a3      	ldrh	r3, [r4, #12]
   20184:	071a      	lsls	r2, r3, #28
   20186:	d52f      	bpl.n	201e8 <__swbuf_r+0x84>
   20188:	6923      	ldr	r3, [r4, #16]
   2018a:	b36b      	cbz	r3, 201e8 <__swbuf_r+0x84>
   2018c:	6923      	ldr	r3, [r4, #16]
   2018e:	6820      	ldr	r0, [r4, #0]
   20190:	1ac0      	subs	r0, r0, r3
   20192:	6963      	ldr	r3, [r4, #20]
   20194:	b2f6      	uxtb	r6, r6
   20196:	4283      	cmp	r3, r0
   20198:	4637      	mov	r7, r6
   2019a:	dc04      	bgt.n	201a6 <__swbuf_r+0x42>
   2019c:	4621      	mov	r1, r4
   2019e:	4628      	mov	r0, r5
   201a0:	f000 f922 	bl	203e8 <_fflush_r>
   201a4:	bb30      	cbnz	r0, 201f4 <__swbuf_r+0x90>
   201a6:	68a3      	ldr	r3, [r4, #8]
   201a8:	3b01      	subs	r3, #1
   201aa:	60a3      	str	r3, [r4, #8]
   201ac:	6823      	ldr	r3, [r4, #0]
   201ae:	1c5a      	adds	r2, r3, #1
   201b0:	6022      	str	r2, [r4, #0]
   201b2:	701e      	strb	r6, [r3, #0]
   201b4:	6963      	ldr	r3, [r4, #20]
   201b6:	3001      	adds	r0, #1
   201b8:	4283      	cmp	r3, r0
   201ba:	d004      	beq.n	201c6 <__swbuf_r+0x62>
   201bc:	89a3      	ldrh	r3, [r4, #12]
   201be:	07db      	lsls	r3, r3, #31
   201c0:	d506      	bpl.n	201d0 <__swbuf_r+0x6c>
   201c2:	2e0a      	cmp	r6, #10
   201c4:	d104      	bne.n	201d0 <__swbuf_r+0x6c>
   201c6:	4621      	mov	r1, r4
   201c8:	4628      	mov	r0, r5
   201ca:	f000 f90d 	bl	203e8 <_fflush_r>
   201ce:	b988      	cbnz	r0, 201f4 <__swbuf_r+0x90>
   201d0:	4638      	mov	r0, r7
   201d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   201d4:	4b0a      	ldr	r3, [pc, #40]	; (20200 <__swbuf_r+0x9c>)
   201d6:	429c      	cmp	r4, r3
   201d8:	d101      	bne.n	201de <__swbuf_r+0x7a>
   201da:	68ac      	ldr	r4, [r5, #8]
   201dc:	e7cf      	b.n	2017e <__swbuf_r+0x1a>
   201de:	4b09      	ldr	r3, [pc, #36]	; (20204 <__swbuf_r+0xa0>)
   201e0:	429c      	cmp	r4, r3
   201e2:	bf08      	it	eq
   201e4:	68ec      	ldreq	r4, [r5, #12]
   201e6:	e7ca      	b.n	2017e <__swbuf_r+0x1a>
   201e8:	4621      	mov	r1, r4
   201ea:	4628      	mov	r0, r5
   201ec:	f000 f80c 	bl	20208 <__swsetup_r>
   201f0:	2800      	cmp	r0, #0
   201f2:	d0cb      	beq.n	2018c <__swbuf_r+0x28>
   201f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   201f8:	e7ea      	b.n	201d0 <__swbuf_r+0x6c>
   201fa:	bf00      	nop
   201fc:	000283ac 	.word	0x000283ac
   20200:	000283cc 	.word	0x000283cc
   20204:	0002838c 	.word	0x0002838c

00020208 <__swsetup_r>:
   20208:	4b32      	ldr	r3, [pc, #200]	; (202d4 <__swsetup_r+0xcc>)
   2020a:	b570      	push	{r4, r5, r6, lr}
   2020c:	681d      	ldr	r5, [r3, #0]
   2020e:	4606      	mov	r6, r0
   20210:	460c      	mov	r4, r1
   20212:	b125      	cbz	r5, 2021e <__swsetup_r+0x16>
   20214:	69ab      	ldr	r3, [r5, #24]
   20216:	b913      	cbnz	r3, 2021e <__swsetup_r+0x16>
   20218:	4628      	mov	r0, r5
   2021a:	f000 f963 	bl	204e4 <__sinit>
   2021e:	4b2e      	ldr	r3, [pc, #184]	; (202d8 <__swsetup_r+0xd0>)
   20220:	429c      	cmp	r4, r3
   20222:	d10f      	bne.n	20244 <__swsetup_r+0x3c>
   20224:	686c      	ldr	r4, [r5, #4]
   20226:	89a3      	ldrh	r3, [r4, #12]
   20228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2022c:	0719      	lsls	r1, r3, #28
   2022e:	d42c      	bmi.n	2028a <__swsetup_r+0x82>
   20230:	06dd      	lsls	r5, r3, #27
   20232:	d411      	bmi.n	20258 <__swsetup_r+0x50>
   20234:	2309      	movs	r3, #9
   20236:	6033      	str	r3, [r6, #0]
   20238:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   2023c:	81a3      	strh	r3, [r4, #12]
   2023e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20242:	e03e      	b.n	202c2 <__swsetup_r+0xba>
   20244:	4b25      	ldr	r3, [pc, #148]	; (202dc <__swsetup_r+0xd4>)
   20246:	429c      	cmp	r4, r3
   20248:	d101      	bne.n	2024e <__swsetup_r+0x46>
   2024a:	68ac      	ldr	r4, [r5, #8]
   2024c:	e7eb      	b.n	20226 <__swsetup_r+0x1e>
   2024e:	4b24      	ldr	r3, [pc, #144]	; (202e0 <__swsetup_r+0xd8>)
   20250:	429c      	cmp	r4, r3
   20252:	bf08      	it	eq
   20254:	68ec      	ldreq	r4, [r5, #12]
   20256:	e7e6      	b.n	20226 <__swsetup_r+0x1e>
   20258:	0758      	lsls	r0, r3, #29
   2025a:	d512      	bpl.n	20282 <__swsetup_r+0x7a>
   2025c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2025e:	b141      	cbz	r1, 20272 <__swsetup_r+0x6a>
   20260:	f104 0344 	add.w	r3, r4, #68	; 0x44
   20264:	4299      	cmp	r1, r3
   20266:	d002      	beq.n	2026e <__swsetup_r+0x66>
   20268:	4630      	mov	r0, r6
   2026a:	f000 f9f9 	bl	20660 <_free_r>
   2026e:	2300      	movs	r3, #0
   20270:	6363      	str	r3, [r4, #52]	; 0x34
   20272:	89a3      	ldrh	r3, [r4, #12]
   20274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   20278:	81a3      	strh	r3, [r4, #12]
   2027a:	2300      	movs	r3, #0
   2027c:	6063      	str	r3, [r4, #4]
   2027e:	6923      	ldr	r3, [r4, #16]
   20280:	6023      	str	r3, [r4, #0]
   20282:	89a3      	ldrh	r3, [r4, #12]
   20284:	f043 0308 	orr.w	r3, r3, #8
   20288:	81a3      	strh	r3, [r4, #12]
   2028a:	6923      	ldr	r3, [r4, #16]
   2028c:	b94b      	cbnz	r3, 202a2 <__swsetup_r+0x9a>
   2028e:	89a3      	ldrh	r3, [r4, #12]
   20290:	f403 7320 	and.w	r3, r3, #640	; 0x280
   20294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   20298:	d003      	beq.n	202a2 <__swsetup_r+0x9a>
   2029a:	4621      	mov	r1, r4
   2029c:	4630      	mov	r0, r6
   2029e:	f000 f99f 	bl	205e0 <__smakebuf_r>
   202a2:	89a0      	ldrh	r0, [r4, #12]
   202a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   202a8:	f010 0301 	ands.w	r3, r0, #1
   202ac:	d00a      	beq.n	202c4 <__swsetup_r+0xbc>
   202ae:	2300      	movs	r3, #0
   202b0:	60a3      	str	r3, [r4, #8]
   202b2:	6963      	ldr	r3, [r4, #20]
   202b4:	425b      	negs	r3, r3
   202b6:	61a3      	str	r3, [r4, #24]
   202b8:	6923      	ldr	r3, [r4, #16]
   202ba:	b943      	cbnz	r3, 202ce <__swsetup_r+0xc6>
   202bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   202c0:	d1ba      	bne.n	20238 <__swsetup_r+0x30>
   202c2:	bd70      	pop	{r4, r5, r6, pc}
   202c4:	0781      	lsls	r1, r0, #30
   202c6:	bf58      	it	pl
   202c8:	6963      	ldrpl	r3, [r4, #20]
   202ca:	60a3      	str	r3, [r4, #8]
   202cc:	e7f4      	b.n	202b8 <__swsetup_r+0xb0>
   202ce:	2000      	movs	r0, #0
   202d0:	e7f7      	b.n	202c2 <__swsetup_r+0xba>
   202d2:	bf00      	nop
   202d4:	20000d18 	.word	0x20000d18
   202d8:	000283ac 	.word	0x000283ac
   202dc:	000283cc 	.word	0x000283cc
   202e0:	0002838c 	.word	0x0002838c

000202e4 <__sflush_r>:
   202e4:	898a      	ldrh	r2, [r1, #12]
   202e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202e8:	4605      	mov	r5, r0
   202ea:	0710      	lsls	r0, r2, #28
   202ec:	460c      	mov	r4, r1
   202ee:	d457      	bmi.n	203a0 <__sflush_r+0xbc>
   202f0:	684b      	ldr	r3, [r1, #4]
   202f2:	2b00      	cmp	r3, #0
   202f4:	dc04      	bgt.n	20300 <__sflush_r+0x1c>
   202f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   202f8:	2b00      	cmp	r3, #0
   202fa:	dc01      	bgt.n	20300 <__sflush_r+0x1c>
   202fc:	2000      	movs	r0, #0
   202fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   20302:	2e00      	cmp	r6, #0
   20304:	d0fa      	beq.n	202fc <__sflush_r+0x18>
   20306:	2300      	movs	r3, #0
   20308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2030c:	682f      	ldr	r7, [r5, #0]
   2030e:	602b      	str	r3, [r5, #0]
   20310:	d032      	beq.n	20378 <__sflush_r+0x94>
   20312:	6d60      	ldr	r0, [r4, #84]	; 0x54
   20314:	89a3      	ldrh	r3, [r4, #12]
   20316:	075a      	lsls	r2, r3, #29
   20318:	d505      	bpl.n	20326 <__sflush_r+0x42>
   2031a:	6863      	ldr	r3, [r4, #4]
   2031c:	1ac0      	subs	r0, r0, r3
   2031e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20320:	b10b      	cbz	r3, 20326 <__sflush_r+0x42>
   20322:	6c23      	ldr	r3, [r4, #64]	; 0x40
   20324:	1ac0      	subs	r0, r0, r3
   20326:	2300      	movs	r3, #0
   20328:	4602      	mov	r2, r0
   2032a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2032c:	6a21      	ldr	r1, [r4, #32]
   2032e:	4628      	mov	r0, r5
   20330:	47b0      	blx	r6
   20332:	1c43      	adds	r3, r0, #1
   20334:	89a3      	ldrh	r3, [r4, #12]
   20336:	d106      	bne.n	20346 <__sflush_r+0x62>
   20338:	6829      	ldr	r1, [r5, #0]
   2033a:	291d      	cmp	r1, #29
   2033c:	d82c      	bhi.n	20398 <__sflush_r+0xb4>
   2033e:	4a29      	ldr	r2, [pc, #164]	; (203e4 <__sflush_r+0x100>)
   20340:	40ca      	lsrs	r2, r1
   20342:	07d6      	lsls	r6, r2, #31
   20344:	d528      	bpl.n	20398 <__sflush_r+0xb4>
   20346:	2200      	movs	r2, #0
   20348:	6062      	str	r2, [r4, #4]
   2034a:	04d9      	lsls	r1, r3, #19
   2034c:	6922      	ldr	r2, [r4, #16]
   2034e:	6022      	str	r2, [r4, #0]
   20350:	d504      	bpl.n	2035c <__sflush_r+0x78>
   20352:	1c42      	adds	r2, r0, #1
   20354:	d101      	bne.n	2035a <__sflush_r+0x76>
   20356:	682b      	ldr	r3, [r5, #0]
   20358:	b903      	cbnz	r3, 2035c <__sflush_r+0x78>
   2035a:	6560      	str	r0, [r4, #84]	; 0x54
   2035c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2035e:	602f      	str	r7, [r5, #0]
   20360:	2900      	cmp	r1, #0
   20362:	d0cb      	beq.n	202fc <__sflush_r+0x18>
   20364:	f104 0344 	add.w	r3, r4, #68	; 0x44
   20368:	4299      	cmp	r1, r3
   2036a:	d002      	beq.n	20372 <__sflush_r+0x8e>
   2036c:	4628      	mov	r0, r5
   2036e:	f000 f977 	bl	20660 <_free_r>
   20372:	2000      	movs	r0, #0
   20374:	6360      	str	r0, [r4, #52]	; 0x34
   20376:	e7c2      	b.n	202fe <__sflush_r+0x1a>
   20378:	6a21      	ldr	r1, [r4, #32]
   2037a:	2301      	movs	r3, #1
   2037c:	4628      	mov	r0, r5
   2037e:	47b0      	blx	r6
   20380:	1c41      	adds	r1, r0, #1
   20382:	d1c7      	bne.n	20314 <__sflush_r+0x30>
   20384:	682b      	ldr	r3, [r5, #0]
   20386:	2b00      	cmp	r3, #0
   20388:	d0c4      	beq.n	20314 <__sflush_r+0x30>
   2038a:	2b1d      	cmp	r3, #29
   2038c:	d001      	beq.n	20392 <__sflush_r+0xae>
   2038e:	2b16      	cmp	r3, #22
   20390:	d101      	bne.n	20396 <__sflush_r+0xb2>
   20392:	602f      	str	r7, [r5, #0]
   20394:	e7b2      	b.n	202fc <__sflush_r+0x18>
   20396:	89a3      	ldrh	r3, [r4, #12]
   20398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2039c:	81a3      	strh	r3, [r4, #12]
   2039e:	e7ae      	b.n	202fe <__sflush_r+0x1a>
   203a0:	690f      	ldr	r7, [r1, #16]
   203a2:	2f00      	cmp	r7, #0
   203a4:	d0aa      	beq.n	202fc <__sflush_r+0x18>
   203a6:	0793      	lsls	r3, r2, #30
   203a8:	680e      	ldr	r6, [r1, #0]
   203aa:	bf08      	it	eq
   203ac:	694b      	ldreq	r3, [r1, #20]
   203ae:	600f      	str	r7, [r1, #0]
   203b0:	bf18      	it	ne
   203b2:	2300      	movne	r3, #0
   203b4:	1bf6      	subs	r6, r6, r7
   203b6:	608b      	str	r3, [r1, #8]
   203b8:	2e00      	cmp	r6, #0
   203ba:	dd9f      	ble.n	202fc <__sflush_r+0x18>
   203bc:	6a21      	ldr	r1, [r4, #32]
   203be:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   203c2:	4633      	mov	r3, r6
   203c4:	463a      	mov	r2, r7
   203c6:	4628      	mov	r0, r5
   203c8:	47e0      	blx	ip
   203ca:	2800      	cmp	r0, #0
   203cc:	dc06      	bgt.n	203dc <__sflush_r+0xf8>
   203ce:	89a3      	ldrh	r3, [r4, #12]
   203d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   203d4:	81a3      	strh	r3, [r4, #12]
   203d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   203da:	e790      	b.n	202fe <__sflush_r+0x1a>
   203dc:	4407      	add	r7, r0
   203de:	1a36      	subs	r6, r6, r0
   203e0:	e7ea      	b.n	203b8 <__sflush_r+0xd4>
   203e2:	bf00      	nop
   203e4:	20400001 	.word	0x20400001

000203e8 <_fflush_r>:
   203e8:	b538      	push	{r3, r4, r5, lr}
   203ea:	690b      	ldr	r3, [r1, #16]
   203ec:	4605      	mov	r5, r0
   203ee:	460c      	mov	r4, r1
   203f0:	b913      	cbnz	r3, 203f8 <_fflush_r+0x10>
   203f2:	2500      	movs	r5, #0
   203f4:	4628      	mov	r0, r5
   203f6:	bd38      	pop	{r3, r4, r5, pc}
   203f8:	b118      	cbz	r0, 20402 <_fflush_r+0x1a>
   203fa:	6983      	ldr	r3, [r0, #24]
   203fc:	b90b      	cbnz	r3, 20402 <_fflush_r+0x1a>
   203fe:	f000 f871 	bl	204e4 <__sinit>
   20402:	4b14      	ldr	r3, [pc, #80]	; (20454 <_fflush_r+0x6c>)
   20404:	429c      	cmp	r4, r3
   20406:	d11b      	bne.n	20440 <_fflush_r+0x58>
   20408:	686c      	ldr	r4, [r5, #4]
   2040a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2040e:	2b00      	cmp	r3, #0
   20410:	d0ef      	beq.n	203f2 <_fflush_r+0xa>
   20412:	6e62      	ldr	r2, [r4, #100]	; 0x64
   20414:	07d0      	lsls	r0, r2, #31
   20416:	d404      	bmi.n	20422 <_fflush_r+0x3a>
   20418:	0599      	lsls	r1, r3, #22
   2041a:	d402      	bmi.n	20422 <_fflush_r+0x3a>
   2041c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2041e:	f006 f83c 	bl	2649a <__retarget_lock_acquire_recursive>
   20422:	4628      	mov	r0, r5
   20424:	4621      	mov	r1, r4
   20426:	f7ff ff5d 	bl	202e4 <__sflush_r>
   2042a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2042c:	07da      	lsls	r2, r3, #31
   2042e:	4605      	mov	r5, r0
   20430:	d4e0      	bmi.n	203f4 <_fflush_r+0xc>
   20432:	89a3      	ldrh	r3, [r4, #12]
   20434:	059b      	lsls	r3, r3, #22
   20436:	d4dd      	bmi.n	203f4 <_fflush_r+0xc>
   20438:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2043a:	f006 f82f 	bl	2649c <__retarget_lock_release_recursive>
   2043e:	e7d9      	b.n	203f4 <_fflush_r+0xc>
   20440:	4b05      	ldr	r3, [pc, #20]	; (20458 <_fflush_r+0x70>)
   20442:	429c      	cmp	r4, r3
   20444:	d101      	bne.n	2044a <_fflush_r+0x62>
   20446:	68ac      	ldr	r4, [r5, #8]
   20448:	e7df      	b.n	2040a <_fflush_r+0x22>
   2044a:	4b04      	ldr	r3, [pc, #16]	; (2045c <_fflush_r+0x74>)
   2044c:	429c      	cmp	r4, r3
   2044e:	bf08      	it	eq
   20450:	68ec      	ldreq	r4, [r5, #12]
   20452:	e7da      	b.n	2040a <_fflush_r+0x22>
   20454:	000283ac 	.word	0x000283ac
   20458:	000283cc 	.word	0x000283cc
   2045c:	0002838c 	.word	0x0002838c

00020460 <std>:
   20460:	2300      	movs	r3, #0
   20462:	b510      	push	{r4, lr}
   20464:	4604      	mov	r4, r0
   20466:	e9c0 3300 	strd	r3, r3, [r0]
   2046a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2046e:	6083      	str	r3, [r0, #8]
   20470:	8181      	strh	r1, [r0, #12]
   20472:	6643      	str	r3, [r0, #100]	; 0x64
   20474:	81c2      	strh	r2, [r0, #14]
   20476:	6183      	str	r3, [r0, #24]
   20478:	4619      	mov	r1, r3
   2047a:	2208      	movs	r2, #8
   2047c:	305c      	adds	r0, #92	; 0x5c
   2047e:	f005 ff18 	bl	262b2 <memset>
   20482:	4b05      	ldr	r3, [pc, #20]	; (20498 <std+0x38>)
   20484:	6263      	str	r3, [r4, #36]	; 0x24
   20486:	4b05      	ldr	r3, [pc, #20]	; (2049c <std+0x3c>)
   20488:	62a3      	str	r3, [r4, #40]	; 0x28
   2048a:	4b05      	ldr	r3, [pc, #20]	; (204a0 <std+0x40>)
   2048c:	62e3      	str	r3, [r4, #44]	; 0x2c
   2048e:	4b05      	ldr	r3, [pc, #20]	; (204a4 <std+0x44>)
   20490:	6224      	str	r4, [r4, #32]
   20492:	6323      	str	r3, [r4, #48]	; 0x30
   20494:	bd10      	pop	{r4, pc}
   20496:	bf00      	nop
   20498:	0002653d 	.word	0x0002653d
   2049c:	0002655f 	.word	0x0002655f
   204a0:	00026597 	.word	0x00026597
   204a4:	000265bb 	.word	0x000265bb

000204a8 <_cleanup_r>:
   204a8:	4901      	ldr	r1, [pc, #4]	; (204b0 <_cleanup_r+0x8>)
   204aa:	f005 bfd6 	b.w	2645a <_fwalk_reent>
   204ae:	bf00      	nop
   204b0:	000203e9 	.word	0x000203e9

000204b4 <__sfp_lock_acquire>:
   204b4:	4801      	ldr	r0, [pc, #4]	; (204bc <__sfp_lock_acquire+0x8>)
   204b6:	f005 bff0 	b.w	2649a <__retarget_lock_acquire_recursive>
   204ba:	bf00      	nop
   204bc:	20003bce 	.word	0x20003bce

000204c0 <__sfp_lock_release>:
   204c0:	4801      	ldr	r0, [pc, #4]	; (204c8 <__sfp_lock_release+0x8>)
   204c2:	f005 bfeb 	b.w	2649c <__retarget_lock_release_recursive>
   204c6:	bf00      	nop
   204c8:	20003bce 	.word	0x20003bce

000204cc <__sinit_lock_acquire>:
   204cc:	4801      	ldr	r0, [pc, #4]	; (204d4 <__sinit_lock_acquire+0x8>)
   204ce:	f005 bfe4 	b.w	2649a <__retarget_lock_acquire_recursive>
   204d2:	bf00      	nop
   204d4:	20003bcf 	.word	0x20003bcf

000204d8 <__sinit_lock_release>:
   204d8:	4801      	ldr	r0, [pc, #4]	; (204e0 <__sinit_lock_release+0x8>)
   204da:	f005 bfdf 	b.w	2649c <__retarget_lock_release_recursive>
   204de:	bf00      	nop
   204e0:	20003bcf 	.word	0x20003bcf

000204e4 <__sinit>:
   204e4:	b510      	push	{r4, lr}
   204e6:	4604      	mov	r4, r0
   204e8:	f7ff fff0 	bl	204cc <__sinit_lock_acquire>
   204ec:	69a3      	ldr	r3, [r4, #24]
   204ee:	b11b      	cbz	r3, 204f8 <__sinit+0x14>
   204f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   204f4:	f7ff bff0 	b.w	204d8 <__sinit_lock_release>
   204f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   204fc:	6523      	str	r3, [r4, #80]	; 0x50
   204fe:	4b13      	ldr	r3, [pc, #76]	; (2054c <__sinit+0x68>)
   20500:	4a13      	ldr	r2, [pc, #76]	; (20550 <__sinit+0x6c>)
   20502:	681b      	ldr	r3, [r3, #0]
   20504:	62a2      	str	r2, [r4, #40]	; 0x28
   20506:	42a3      	cmp	r3, r4
   20508:	bf04      	itt	eq
   2050a:	2301      	moveq	r3, #1
   2050c:	61a3      	streq	r3, [r4, #24]
   2050e:	4620      	mov	r0, r4
   20510:	f000 f820 	bl	20554 <__sfp>
   20514:	6060      	str	r0, [r4, #4]
   20516:	4620      	mov	r0, r4
   20518:	f000 f81c 	bl	20554 <__sfp>
   2051c:	60a0      	str	r0, [r4, #8]
   2051e:	4620      	mov	r0, r4
   20520:	f000 f818 	bl	20554 <__sfp>
   20524:	2200      	movs	r2, #0
   20526:	60e0      	str	r0, [r4, #12]
   20528:	2104      	movs	r1, #4
   2052a:	6860      	ldr	r0, [r4, #4]
   2052c:	f7ff ff98 	bl	20460 <std>
   20530:	68a0      	ldr	r0, [r4, #8]
   20532:	2201      	movs	r2, #1
   20534:	2109      	movs	r1, #9
   20536:	f7ff ff93 	bl	20460 <std>
   2053a:	68e0      	ldr	r0, [r4, #12]
   2053c:	2202      	movs	r2, #2
   2053e:	2112      	movs	r1, #18
   20540:	f7ff ff8e 	bl	20460 <std>
   20544:	2301      	movs	r3, #1
   20546:	61a3      	str	r3, [r4, #24]
   20548:	e7d2      	b.n	204f0 <__sinit+0xc>
   2054a:	bf00      	nop
   2054c:	00028388 	.word	0x00028388
   20550:	000204a9 	.word	0x000204a9

00020554 <__sfp>:
   20554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20556:	4607      	mov	r7, r0
   20558:	f7ff ffac 	bl	204b4 <__sfp_lock_acquire>
   2055c:	4b1e      	ldr	r3, [pc, #120]	; (205d8 <__sfp+0x84>)
   2055e:	681e      	ldr	r6, [r3, #0]
   20560:	69b3      	ldr	r3, [r6, #24]
   20562:	b913      	cbnz	r3, 2056a <__sfp+0x16>
   20564:	4630      	mov	r0, r6
   20566:	f7ff ffbd 	bl	204e4 <__sinit>
   2056a:	3648      	adds	r6, #72	; 0x48
   2056c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   20570:	3b01      	subs	r3, #1
   20572:	d503      	bpl.n	2057c <__sfp+0x28>
   20574:	6833      	ldr	r3, [r6, #0]
   20576:	b30b      	cbz	r3, 205bc <__sfp+0x68>
   20578:	6836      	ldr	r6, [r6, #0]
   2057a:	e7f7      	b.n	2056c <__sfp+0x18>
   2057c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   20580:	b9d5      	cbnz	r5, 205b8 <__sfp+0x64>
   20582:	4b16      	ldr	r3, [pc, #88]	; (205dc <__sfp+0x88>)
   20584:	60e3      	str	r3, [r4, #12]
   20586:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2058a:	6665      	str	r5, [r4, #100]	; 0x64
   2058c:	f005 ff84 	bl	26498 <__retarget_lock_init_recursive>
   20590:	f7ff ff96 	bl	204c0 <__sfp_lock_release>
   20594:	e9c4 5501 	strd	r5, r5, [r4, #4]
   20598:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2059c:	6025      	str	r5, [r4, #0]
   2059e:	61a5      	str	r5, [r4, #24]
   205a0:	2208      	movs	r2, #8
   205a2:	4629      	mov	r1, r5
   205a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   205a8:	f005 fe83 	bl	262b2 <memset>
   205ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   205b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   205b4:	4620      	mov	r0, r4
   205b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   205b8:	3468      	adds	r4, #104	; 0x68
   205ba:	e7d9      	b.n	20570 <__sfp+0x1c>
   205bc:	2104      	movs	r1, #4
   205be:	4638      	mov	r0, r7
   205c0:	f005 ff35 	bl	2642e <__sfmoreglue>
   205c4:	4604      	mov	r4, r0
   205c6:	6030      	str	r0, [r6, #0]
   205c8:	2800      	cmp	r0, #0
   205ca:	d1d5      	bne.n	20578 <__sfp+0x24>
   205cc:	f7ff ff78 	bl	204c0 <__sfp_lock_release>
   205d0:	230c      	movs	r3, #12
   205d2:	603b      	str	r3, [r7, #0]
   205d4:	e7ee      	b.n	205b4 <__sfp+0x60>
   205d6:	bf00      	nop
   205d8:	00028388 	.word	0x00028388
   205dc:	ffff0001 	.word	0xffff0001

000205e0 <__smakebuf_r>:
   205e0:	898b      	ldrh	r3, [r1, #12]
   205e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   205e4:	079d      	lsls	r5, r3, #30
   205e6:	4606      	mov	r6, r0
   205e8:	460c      	mov	r4, r1
   205ea:	d507      	bpl.n	205fc <__smakebuf_r+0x1c>
   205ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
   205f0:	6023      	str	r3, [r4, #0]
   205f2:	6123      	str	r3, [r4, #16]
   205f4:	2301      	movs	r3, #1
   205f6:	6163      	str	r3, [r4, #20]
   205f8:	b002      	add	sp, #8
   205fa:	bd70      	pop	{r4, r5, r6, pc}
   205fc:	ab01      	add	r3, sp, #4
   205fe:	466a      	mov	r2, sp
   20600:	f005 ff4d 	bl	2649e <__swhatbuf_r>
   20604:	9900      	ldr	r1, [sp, #0]
   20606:	4605      	mov	r5, r0
   20608:	4630      	mov	r0, r6
   2060a:	f000 f893 	bl	20734 <_malloc_r>
   2060e:	b948      	cbnz	r0, 20624 <__smakebuf_r+0x44>
   20610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20614:	059a      	lsls	r2, r3, #22
   20616:	d4ef      	bmi.n	205f8 <__smakebuf_r+0x18>
   20618:	f023 0303 	bic.w	r3, r3, #3
   2061c:	f043 0302 	orr.w	r3, r3, #2
   20620:	81a3      	strh	r3, [r4, #12]
   20622:	e7e3      	b.n	205ec <__smakebuf_r+0xc>
   20624:	4b0d      	ldr	r3, [pc, #52]	; (2065c <__smakebuf_r+0x7c>)
   20626:	62b3      	str	r3, [r6, #40]	; 0x28
   20628:	89a3      	ldrh	r3, [r4, #12]
   2062a:	6020      	str	r0, [r4, #0]
   2062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20630:	81a3      	strh	r3, [r4, #12]
   20632:	9b00      	ldr	r3, [sp, #0]
   20634:	6163      	str	r3, [r4, #20]
   20636:	9b01      	ldr	r3, [sp, #4]
   20638:	6120      	str	r0, [r4, #16]
   2063a:	b15b      	cbz	r3, 20654 <__smakebuf_r+0x74>
   2063c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   20640:	4630      	mov	r0, r6
   20642:	f000 f949 	bl	208d8 <_isatty_r>
   20646:	b128      	cbz	r0, 20654 <__smakebuf_r+0x74>
   20648:	89a3      	ldrh	r3, [r4, #12]
   2064a:	f023 0303 	bic.w	r3, r3, #3
   2064e:	f043 0301 	orr.w	r3, r3, #1
   20652:	81a3      	strh	r3, [r4, #12]
   20654:	89a0      	ldrh	r0, [r4, #12]
   20656:	4305      	orrs	r5, r0
   20658:	81a5      	strh	r5, [r4, #12]
   2065a:	e7cd      	b.n	205f8 <__smakebuf_r+0x18>
   2065c:	000204a9 	.word	0x000204a9

00020660 <_free_r>:
   20660:	b538      	push	{r3, r4, r5, lr}
   20662:	4605      	mov	r5, r0
   20664:	2900      	cmp	r1, #0
   20666:	d041      	beq.n	206ec <_free_r+0x8c>
   20668:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2066c:	1f0c      	subs	r4, r1, #4
   2066e:	2b00      	cmp	r3, #0
   20670:	bfb8      	it	lt
   20672:	18e4      	addlt	r4, r4, r3
   20674:	f000 f952 	bl	2091c <__malloc_lock>
   20678:	4a1d      	ldr	r2, [pc, #116]	; (206f0 <_free_r+0x90>)
   2067a:	6813      	ldr	r3, [r2, #0]
   2067c:	b933      	cbnz	r3, 2068c <_free_r+0x2c>
   2067e:	6063      	str	r3, [r4, #4]
   20680:	6014      	str	r4, [r2, #0]
   20682:	4628      	mov	r0, r5
   20684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20688:	f000 b94e 	b.w	20928 <__malloc_unlock>
   2068c:	42a3      	cmp	r3, r4
   2068e:	d908      	bls.n	206a2 <_free_r+0x42>
   20690:	6820      	ldr	r0, [r4, #0]
   20692:	1821      	adds	r1, r4, r0
   20694:	428b      	cmp	r3, r1
   20696:	bf01      	itttt	eq
   20698:	6819      	ldreq	r1, [r3, #0]
   2069a:	685b      	ldreq	r3, [r3, #4]
   2069c:	1809      	addeq	r1, r1, r0
   2069e:	6021      	streq	r1, [r4, #0]
   206a0:	e7ed      	b.n	2067e <_free_r+0x1e>
   206a2:	461a      	mov	r2, r3
   206a4:	685b      	ldr	r3, [r3, #4]
   206a6:	b10b      	cbz	r3, 206ac <_free_r+0x4c>
   206a8:	42a3      	cmp	r3, r4
   206aa:	d9fa      	bls.n	206a2 <_free_r+0x42>
   206ac:	6811      	ldr	r1, [r2, #0]
   206ae:	1850      	adds	r0, r2, r1
   206b0:	42a0      	cmp	r0, r4
   206b2:	d10b      	bne.n	206cc <_free_r+0x6c>
   206b4:	6820      	ldr	r0, [r4, #0]
   206b6:	4401      	add	r1, r0
   206b8:	1850      	adds	r0, r2, r1
   206ba:	4283      	cmp	r3, r0
   206bc:	6011      	str	r1, [r2, #0]
   206be:	d1e0      	bne.n	20682 <_free_r+0x22>
   206c0:	6818      	ldr	r0, [r3, #0]
   206c2:	685b      	ldr	r3, [r3, #4]
   206c4:	6053      	str	r3, [r2, #4]
   206c6:	4401      	add	r1, r0
   206c8:	6011      	str	r1, [r2, #0]
   206ca:	e7da      	b.n	20682 <_free_r+0x22>
   206cc:	d902      	bls.n	206d4 <_free_r+0x74>
   206ce:	230c      	movs	r3, #12
   206d0:	602b      	str	r3, [r5, #0]
   206d2:	e7d6      	b.n	20682 <_free_r+0x22>
   206d4:	6820      	ldr	r0, [r4, #0]
   206d6:	1821      	adds	r1, r4, r0
   206d8:	428b      	cmp	r3, r1
   206da:	bf04      	itt	eq
   206dc:	6819      	ldreq	r1, [r3, #0]
   206de:	685b      	ldreq	r3, [r3, #4]
   206e0:	6063      	str	r3, [r4, #4]
   206e2:	bf04      	itt	eq
   206e4:	1809      	addeq	r1, r1, r0
   206e6:	6021      	streq	r1, [r4, #0]
   206e8:	6054      	str	r4, [r2, #4]
   206ea:	e7ca      	b.n	20682 <_free_r+0x22>
   206ec:	bd38      	pop	{r3, r4, r5, pc}
   206ee:	bf00      	nop
   206f0:	20003608 	.word	0x20003608

000206f4 <sbrk_aligned>:
   206f4:	b570      	push	{r4, r5, r6, lr}
   206f6:	4e0e      	ldr	r6, [pc, #56]	; (20730 <sbrk_aligned+0x3c>)
   206f8:	460c      	mov	r4, r1
   206fa:	6831      	ldr	r1, [r6, #0]
   206fc:	4605      	mov	r5, r0
   206fe:	b911      	cbnz	r1, 20706 <sbrk_aligned+0x12>
   20700:	f000 f88c 	bl	2081c <_sbrk_r>
   20704:	6030      	str	r0, [r6, #0]
   20706:	4621      	mov	r1, r4
   20708:	4628      	mov	r0, r5
   2070a:	f000 f887 	bl	2081c <_sbrk_r>
   2070e:	1c43      	adds	r3, r0, #1
   20710:	d00a      	beq.n	20728 <sbrk_aligned+0x34>
   20712:	1cc4      	adds	r4, r0, #3
   20714:	f024 0403 	bic.w	r4, r4, #3
   20718:	42a0      	cmp	r0, r4
   2071a:	d007      	beq.n	2072c <sbrk_aligned+0x38>
   2071c:	1a21      	subs	r1, r4, r0
   2071e:	4628      	mov	r0, r5
   20720:	f000 f87c 	bl	2081c <_sbrk_r>
   20724:	3001      	adds	r0, #1
   20726:	d101      	bne.n	2072c <sbrk_aligned+0x38>
   20728:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2072c:	4620      	mov	r0, r4
   2072e:	bd70      	pop	{r4, r5, r6, pc}
   20730:	2000360c 	.word	0x2000360c

00020734 <_malloc_r>:
   20734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20738:	1ccd      	adds	r5, r1, #3
   2073a:	f025 0503 	bic.w	r5, r5, #3
   2073e:	3508      	adds	r5, #8
   20740:	2d0c      	cmp	r5, #12
   20742:	bf38      	it	cc
   20744:	250c      	movcc	r5, #12
   20746:	2d00      	cmp	r5, #0
   20748:	4607      	mov	r7, r0
   2074a:	db01      	blt.n	20750 <_malloc_r+0x1c>
   2074c:	42a9      	cmp	r1, r5
   2074e:	d905      	bls.n	2075c <_malloc_r+0x28>
   20750:	230c      	movs	r3, #12
   20752:	603b      	str	r3, [r7, #0]
   20754:	2600      	movs	r6, #0
   20756:	4630      	mov	r0, r6
   20758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2075c:	4e2e      	ldr	r6, [pc, #184]	; (20818 <_malloc_r+0xe4>)
   2075e:	f000 f8dd 	bl	2091c <__malloc_lock>
   20762:	6833      	ldr	r3, [r6, #0]
   20764:	461c      	mov	r4, r3
   20766:	bb34      	cbnz	r4, 207b6 <_malloc_r+0x82>
   20768:	4629      	mov	r1, r5
   2076a:	4638      	mov	r0, r7
   2076c:	f7ff ffc2 	bl	206f4 <sbrk_aligned>
   20770:	1c43      	adds	r3, r0, #1
   20772:	4604      	mov	r4, r0
   20774:	d14d      	bne.n	20812 <_malloc_r+0xde>
   20776:	6834      	ldr	r4, [r6, #0]
   20778:	4626      	mov	r6, r4
   2077a:	2e00      	cmp	r6, #0
   2077c:	d140      	bne.n	20800 <_malloc_r+0xcc>
   2077e:	6823      	ldr	r3, [r4, #0]
   20780:	4631      	mov	r1, r6
   20782:	4638      	mov	r0, r7
   20784:	eb04 0803 	add.w	r8, r4, r3
   20788:	f000 f848 	bl	2081c <_sbrk_r>
   2078c:	4580      	cmp	r8, r0
   2078e:	d13a      	bne.n	20806 <_malloc_r+0xd2>
   20790:	6821      	ldr	r1, [r4, #0]
   20792:	3503      	adds	r5, #3
   20794:	1a6d      	subs	r5, r5, r1
   20796:	f025 0503 	bic.w	r5, r5, #3
   2079a:	3508      	adds	r5, #8
   2079c:	2d0c      	cmp	r5, #12
   2079e:	bf38      	it	cc
   207a0:	250c      	movcc	r5, #12
   207a2:	4629      	mov	r1, r5
   207a4:	4638      	mov	r0, r7
   207a6:	f7ff ffa5 	bl	206f4 <sbrk_aligned>
   207aa:	3001      	adds	r0, #1
   207ac:	d02b      	beq.n	20806 <_malloc_r+0xd2>
   207ae:	6823      	ldr	r3, [r4, #0]
   207b0:	442b      	add	r3, r5
   207b2:	6023      	str	r3, [r4, #0]
   207b4:	e00e      	b.n	207d4 <_malloc_r+0xa0>
   207b6:	6822      	ldr	r2, [r4, #0]
   207b8:	1b52      	subs	r2, r2, r5
   207ba:	d41e      	bmi.n	207fa <_malloc_r+0xc6>
   207bc:	2a0b      	cmp	r2, #11
   207be:	d916      	bls.n	207ee <_malloc_r+0xba>
   207c0:	1961      	adds	r1, r4, r5
   207c2:	42a3      	cmp	r3, r4
   207c4:	6025      	str	r5, [r4, #0]
   207c6:	bf18      	it	ne
   207c8:	6059      	strne	r1, [r3, #4]
   207ca:	6863      	ldr	r3, [r4, #4]
   207cc:	bf08      	it	eq
   207ce:	6031      	streq	r1, [r6, #0]
   207d0:	5162      	str	r2, [r4, r5]
   207d2:	604b      	str	r3, [r1, #4]
   207d4:	4638      	mov	r0, r7
   207d6:	f104 060b 	add.w	r6, r4, #11
   207da:	f000 f8a5 	bl	20928 <__malloc_unlock>
   207de:	f026 0607 	bic.w	r6, r6, #7
   207e2:	1d23      	adds	r3, r4, #4
   207e4:	1af2      	subs	r2, r6, r3
   207e6:	d0b6      	beq.n	20756 <_malloc_r+0x22>
   207e8:	1b9b      	subs	r3, r3, r6
   207ea:	50a3      	str	r3, [r4, r2]
   207ec:	e7b3      	b.n	20756 <_malloc_r+0x22>
   207ee:	6862      	ldr	r2, [r4, #4]
   207f0:	42a3      	cmp	r3, r4
   207f2:	bf0c      	ite	eq
   207f4:	6032      	streq	r2, [r6, #0]
   207f6:	605a      	strne	r2, [r3, #4]
   207f8:	e7ec      	b.n	207d4 <_malloc_r+0xa0>
   207fa:	4623      	mov	r3, r4
   207fc:	6864      	ldr	r4, [r4, #4]
   207fe:	e7b2      	b.n	20766 <_malloc_r+0x32>
   20800:	4634      	mov	r4, r6
   20802:	6876      	ldr	r6, [r6, #4]
   20804:	e7b9      	b.n	2077a <_malloc_r+0x46>
   20806:	230c      	movs	r3, #12
   20808:	603b      	str	r3, [r7, #0]
   2080a:	4638      	mov	r0, r7
   2080c:	f000 f88c 	bl	20928 <__malloc_unlock>
   20810:	e7a1      	b.n	20756 <_malloc_r+0x22>
   20812:	6025      	str	r5, [r4, #0]
   20814:	e7de      	b.n	207d4 <_malloc_r+0xa0>
   20816:	bf00      	nop
   20818:	20003608 	.word	0x20003608

0002081c <_sbrk_r>:
   2081c:	b538      	push	{r3, r4, r5, lr}
   2081e:	4d06      	ldr	r5, [pc, #24]	; (20838 <_sbrk_r+0x1c>)
   20820:	2300      	movs	r3, #0
   20822:	4604      	mov	r4, r0
   20824:	4608      	mov	r0, r1
   20826:	602b      	str	r3, [r5, #0]
   20828:	f7e6 fbf6 	bl	7018 <_sbrk>
   2082c:	1c43      	adds	r3, r0, #1
   2082e:	d102      	bne.n	20836 <_sbrk_r+0x1a>
   20830:	682b      	ldr	r3, [r5, #0]
   20832:	b103      	cbz	r3, 20836 <_sbrk_r+0x1a>
   20834:	6023      	str	r3, [r4, #0]
   20836:	bd38      	pop	{r3, r4, r5, pc}
   20838:	20003610 	.word	0x20003610

0002083c <raise>:
   2083c:	4b02      	ldr	r3, [pc, #8]	; (20848 <raise+0xc>)
   2083e:	4601      	mov	r1, r0
   20840:	6818      	ldr	r0, [r3, #0]
   20842:	f005 be51 	b.w	264e8 <_raise_r>
   20846:	bf00      	nop
   20848:	20000d18 	.word	0x20000d18

0002084c <_kill_r>:
   2084c:	b538      	push	{r3, r4, r5, lr}
   2084e:	4d07      	ldr	r5, [pc, #28]	; (2086c <_kill_r+0x20>)
   20850:	2300      	movs	r3, #0
   20852:	4604      	mov	r4, r0
   20854:	4608      	mov	r0, r1
   20856:	4611      	mov	r1, r2
   20858:	602b      	str	r3, [r5, #0]
   2085a:	f002 f933 	bl	22ac4 <_kill>
   2085e:	1c43      	adds	r3, r0, #1
   20860:	d102      	bne.n	20868 <_kill_r+0x1c>
   20862:	682b      	ldr	r3, [r5, #0]
   20864:	b103      	cbz	r3, 20868 <_kill_r+0x1c>
   20866:	6023      	str	r3, [r4, #0]
   20868:	bd38      	pop	{r3, r4, r5, pc}
   2086a:	bf00      	nop
   2086c:	20003610 	.word	0x20003610

00020870 <_write_r>:
   20870:	b538      	push	{r3, r4, r5, lr}
   20872:	4d07      	ldr	r5, [pc, #28]	; (20890 <_write_r+0x20>)
   20874:	4604      	mov	r4, r0
   20876:	4608      	mov	r0, r1
   20878:	4611      	mov	r1, r2
   2087a:	2200      	movs	r2, #0
   2087c:	602a      	str	r2, [r5, #0]
   2087e:	461a      	mov	r2, r3
   20880:	f002 f915 	bl	22aae <_write>
   20884:	1c43      	adds	r3, r0, #1
   20886:	d102      	bne.n	2088e <_write_r+0x1e>
   20888:	682b      	ldr	r3, [r5, #0]
   2088a:	b103      	cbz	r3, 2088e <_write_r+0x1e>
   2088c:	6023      	str	r3, [r4, #0]
   2088e:	bd38      	pop	{r3, r4, r5, pc}
   20890:	20003610 	.word	0x20003610

00020894 <_close_r>:
   20894:	b538      	push	{r3, r4, r5, lr}
   20896:	4d06      	ldr	r5, [pc, #24]	; (208b0 <_close_r+0x1c>)
   20898:	2300      	movs	r3, #0
   2089a:	4604      	mov	r4, r0
   2089c:	4608      	mov	r0, r1
   2089e:	602b      	str	r3, [r5, #0]
   208a0:	f002 f909 	bl	22ab6 <_close>
   208a4:	1c43      	adds	r3, r0, #1
   208a6:	d102      	bne.n	208ae <_close_r+0x1a>
   208a8:	682b      	ldr	r3, [r5, #0]
   208aa:	b103      	cbz	r3, 208ae <_close_r+0x1a>
   208ac:	6023      	str	r3, [r4, #0]
   208ae:	bd38      	pop	{r3, r4, r5, pc}
   208b0:	20003610 	.word	0x20003610

000208b4 <_fstat_r>:
   208b4:	b538      	push	{r3, r4, r5, lr}
   208b6:	4d07      	ldr	r5, [pc, #28]	; (208d4 <_fstat_r+0x20>)
   208b8:	2300      	movs	r3, #0
   208ba:	4604      	mov	r4, r0
   208bc:	4608      	mov	r0, r1
   208be:	4611      	mov	r1, r2
   208c0:	602b      	str	r3, [r5, #0]
   208c2:	f002 f903 	bl	22acc <_fstat>
   208c6:	1c43      	adds	r3, r0, #1
   208c8:	d102      	bne.n	208d0 <_fstat_r+0x1c>
   208ca:	682b      	ldr	r3, [r5, #0]
   208cc:	b103      	cbz	r3, 208d0 <_fstat_r+0x1c>
   208ce:	6023      	str	r3, [r4, #0]
   208d0:	bd38      	pop	{r3, r4, r5, pc}
   208d2:	bf00      	nop
   208d4:	20003610 	.word	0x20003610

000208d8 <_isatty_r>:
   208d8:	b538      	push	{r3, r4, r5, lr}
   208da:	4d06      	ldr	r5, [pc, #24]	; (208f4 <_isatty_r+0x1c>)
   208dc:	2300      	movs	r3, #0
   208de:	4604      	mov	r4, r0
   208e0:	4608      	mov	r0, r1
   208e2:	602b      	str	r3, [r5, #0]
   208e4:	f002 f8ec 	bl	22ac0 <_isatty>
   208e8:	1c43      	adds	r3, r0, #1
   208ea:	d102      	bne.n	208f2 <_isatty_r+0x1a>
   208ec:	682b      	ldr	r3, [r5, #0]
   208ee:	b103      	cbz	r3, 208f2 <_isatty_r+0x1a>
   208f0:	6023      	str	r3, [r4, #0]
   208f2:	bd38      	pop	{r3, r4, r5, pc}
   208f4:	20003610 	.word	0x20003610

000208f8 <_lseek_r>:
   208f8:	b538      	push	{r3, r4, r5, lr}
   208fa:	4d07      	ldr	r5, [pc, #28]	; (20918 <_lseek_r+0x20>)
   208fc:	4604      	mov	r4, r0
   208fe:	4608      	mov	r0, r1
   20900:	4611      	mov	r1, r2
   20902:	2200      	movs	r2, #0
   20904:	602a      	str	r2, [r5, #0]
   20906:	461a      	mov	r2, r3
   20908:	f002 f8d8 	bl	22abc <_lseek>
   2090c:	1c43      	adds	r3, r0, #1
   2090e:	d102      	bne.n	20916 <_lseek_r+0x1e>
   20910:	682b      	ldr	r3, [r5, #0]
   20912:	b103      	cbz	r3, 20916 <_lseek_r+0x1e>
   20914:	6023      	str	r3, [r4, #0]
   20916:	bd38      	pop	{r3, r4, r5, pc}
   20918:	20003610 	.word	0x20003610

0002091c <__malloc_lock>:
   2091c:	4801      	ldr	r0, [pc, #4]	; (20924 <__malloc_lock+0x8>)
   2091e:	f005 bdbc 	b.w	2649a <__retarget_lock_acquire_recursive>
   20922:	bf00      	nop
   20924:	20003bcd 	.word	0x20003bcd

00020928 <__malloc_unlock>:
   20928:	4801      	ldr	r0, [pc, #4]	; (20930 <__malloc_unlock+0x8>)
   2092a:	f005 bdb7 	b.w	2649c <__retarget_lock_release_recursive>
   2092e:	bf00      	nop
   20930:	20003bcd 	.word	0x20003bcd

00020934 <_read_r>:
   20934:	b538      	push	{r3, r4, r5, lr}
   20936:	4d07      	ldr	r5, [pc, #28]	; (20954 <_read_r+0x20>)
   20938:	4604      	mov	r4, r0
   2093a:	4608      	mov	r0, r1
   2093c:	4611      	mov	r1, r2
   2093e:	2200      	movs	r2, #0
   20940:	602a      	str	r2, [r5, #0]
   20942:	461a      	mov	r2, r3
   20944:	f002 f8af 	bl	22aa6 <_read>
   20948:	1c43      	adds	r3, r0, #1
   2094a:	d102      	bne.n	20952 <_read_r+0x1e>
   2094c:	682b      	ldr	r3, [r5, #0]
   2094e:	b103      	cbz	r3, 20952 <_read_r+0x1e>
   20950:	6023      	str	r3, [r4, #0]
   20952:	bd38      	pop	{r3, r4, r5, pc}
   20954:	20003610 	.word	0x20003610

00020958 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   20958:	4770      	bx	lr

0002095a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2095a:	4603      	mov	r3, r0
   2095c:	b140      	cbz	r0, 20970 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2095e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   20960:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   20964:	2a02      	cmp	r2, #2
   20966:	d006      	beq.n	20976 <sys_notify_validate+0x1c>
   20968:	2a03      	cmp	r2, #3
   2096a:	d004      	beq.n	20976 <sys_notify_validate+0x1c>
   2096c:	2a01      	cmp	r2, #1
   2096e:	d005      	beq.n	2097c <sys_notify_validate+0x22>
		return -EINVAL;
   20970:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   20974:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   20976:	681a      	ldr	r2, [r3, #0]
   20978:	2a00      	cmp	r2, #0
   2097a:	d0f9      	beq.n	20970 <sys_notify_validate+0x16>
		notify->result = 0;
   2097c:	2000      	movs	r0, #0
   2097e:	6098      	str	r0, [r3, #8]
   20980:	4770      	bx	lr

00020982 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   20982:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   20984:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   20988:	2a02      	cmp	r2, #2
{
   2098a:	b510      	push	{r4, lr}
   2098c:	4603      	mov	r3, r0
	notify->result = res;
   2098e:	6081      	str	r1, [r0, #8]
	switch (method) {
   20990:	d00a      	beq.n	209a8 <sys_notify_finalize+0x26>
   20992:	2a03      	cmp	r2, #3
   20994:	d10b      	bne.n	209ae <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   20996:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   20998:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2099a:	2200      	movs	r2, #0
   2099c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2099e:	b108      	cbz	r0, 209a4 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   209a0:	f7ff f920 	bl	1fbe4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   209a4:	4620      	mov	r0, r4
   209a6:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   209a8:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   209aa:	2400      	movs	r4, #0
		break;
   209ac:	e7f5      	b.n	2099a <sys_notify_finalize+0x18>
	switch (method) {
   209ae:	2400      	movs	r4, #0
   209b0:	4620      	mov	r0, r4
   209b2:	e7f2      	b.n	2099a <sys_notify_finalize+0x18>

000209b4 <arch_printk_char_out>:
}
   209b4:	2000      	movs	r0, #0
   209b6:	4770      	bx	lr

000209b8 <str_out>:
{
   209b8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   209ba:	688a      	ldr	r2, [r1, #8]
   209bc:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   209be:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   209c0:	b114      	cbz	r4, 209c8 <str_out+0x10>
   209c2:	684b      	ldr	r3, [r1, #4]
   209c4:	4293      	cmp	r3, r2
   209c6:	dc01      	bgt.n	209cc <str_out+0x14>
		ctx->count++;
   209c8:	608d      	str	r5, [r1, #8]
}
   209ca:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   209cc:	3b01      	subs	r3, #1
   209ce:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   209d0:	bf08      	it	eq
   209d2:	2200      	moveq	r2, #0
   209d4:	608d      	str	r5, [r1, #8]
   209d6:	bf0c      	ite	eq
   209d8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   209da:	54a0      	strbne	r0, [r4, r2]
   209dc:	e7f5      	b.n	209ca <str_out+0x12>

000209de <printk>:
{
   209de:	b40f      	push	{r0, r1, r2, r3}
   209e0:	b507      	push	{r0, r1, r2, lr}
   209e2:	a904      	add	r1, sp, #16
   209e4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   209e8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   209ea:	f7e4 fa6d 	bl	4ec8 <vprintk>
}
   209ee:	b003      	add	sp, #12
   209f0:	f85d eb04 	ldr.w	lr, [sp], #4
   209f4:	b004      	add	sp, #16
   209f6:	4770      	bx	lr

000209f8 <snprintk>:
{
   209f8:	b40c      	push	{r2, r3}
   209fa:	b507      	push	{r0, r1, r2, lr}
   209fc:	ab04      	add	r3, sp, #16
   209fe:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   20a02:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   20a04:	f7e4 fa6e 	bl	4ee4 <vsnprintk>
}
   20a08:	b003      	add	sp, #12
   20a0a:	f85d eb04 	ldr.w	lr, [sp], #4
   20a0e:	b002      	add	sp, #8
   20a10:	4770      	bx	lr

00020a12 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20a12:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   20a14:	f013 0307 	ands.w	r3, r3, #7
   20a18:	d105      	bne.n	20a26 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   20a1a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   20a1c:	2b00      	cmp	r3, #0
   20a1e:	bf0c      	ite	eq
   20a20:	2000      	moveq	r0, #0
   20a22:	2003      	movne	r0, #3
   20a24:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   20a26:	2b02      	cmp	r3, #2
   20a28:	d105      	bne.n	20a36 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   20a2a:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   20a2c:	2b00      	cmp	r3, #0
   20a2e:	bf14      	ite	ne
   20a30:	2000      	movne	r0, #0
   20a32:	2004      	moveq	r0, #4
   20a34:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   20a36:	2b01      	cmp	r3, #1
   20a38:	d105      	bne.n	20a46 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   20a3a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   20a3c:	2b00      	cmp	r3, #0
   20a3e:	bf0c      	ite	eq
   20a40:	2000      	moveq	r0, #0
   20a42:	2005      	movne	r0, #5
   20a44:	4770      	bx	lr
	int evt = EVT_NOP;
   20a46:	2000      	movs	r0, #0
}
   20a48:	4770      	bx	lr

00020a4a <notify_one>:
{
   20a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a4e:	460d      	mov	r5, r1
   20a50:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   20a52:	4619      	mov	r1, r3
   20a54:	1d28      	adds	r0, r5, #4
{
   20a56:	4690      	mov	r8, r2
   20a58:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   20a5a:	f7ff ff92 	bl	20982 <sys_notify_finalize>
	if (cb) {
   20a5e:	4604      	mov	r4, r0
   20a60:	b138      	cbz	r0, 20a72 <notify_one+0x28>
		cb(mgr, cli, state, res);
   20a62:	4633      	mov	r3, r6
   20a64:	4642      	mov	r2, r8
   20a66:	4629      	mov	r1, r5
   20a68:	4638      	mov	r0, r7
   20a6a:	46a4      	mov	ip, r4
}
   20a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   20a70:	4760      	bx	ip
}
   20a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020a76 <transition_complete>:
{
   20a76:	b410      	push	{r4}
	__asm__ volatile(
   20a78:	f04f 0420 	mov.w	r4, #32
   20a7c:	f3ef 8211 	mrs	r2, BASEPRI
   20a80:	f384 8811 	msr	BASEPRI, r4
   20a84:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   20a88:	6141      	str	r1, [r0, #20]
}
   20a8a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   20a8c:	2101      	movs	r1, #1
   20a8e:	f7e4 ba3d 	b.w	4f0c <process_event>

00020a92 <validate_args>:
{
   20a92:	b510      	push	{r4, lr}
   20a94:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   20a96:	b140      	cbz	r0, 20aaa <validate_args+0x18>
   20a98:	b139      	cbz	r1, 20aaa <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   20a9a:	1d08      	adds	r0, r1, #4
   20a9c:	f7ff ff5d 	bl	2095a <sys_notify_validate>
	if ((rv == 0)
   20aa0:	b928      	cbnz	r0, 20aae <validate_args+0x1c>
	    && ((cli->notify.flags
   20aa2:	68a3      	ldr	r3, [r4, #8]
   20aa4:	f033 0303 	bics.w	r3, r3, #3
   20aa8:	d001      	beq.n	20aae <validate_args+0x1c>
		rv = -EINVAL;
   20aaa:	f06f 0015 	mvn.w	r0, #21
}
   20aae:	bd10      	pop	{r4, pc}

00020ab0 <onoff_manager_init>:
{
   20ab0:	b538      	push	{r3, r4, r5, lr}
   20ab2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   20ab4:	4605      	mov	r5, r0
   20ab6:	b158      	cbz	r0, 20ad0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   20ab8:	b151      	cbz	r1, 20ad0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   20aba:	680b      	ldr	r3, [r1, #0]
   20abc:	b143      	cbz	r3, 20ad0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   20abe:	684b      	ldr	r3, [r1, #4]
   20ac0:	b133      	cbz	r3, 20ad0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   20ac2:	221c      	movs	r2, #28
   20ac4:	2100      	movs	r1, #0
   20ac6:	f005 fbf4 	bl	262b2 <memset>
   20aca:	612c      	str	r4, [r5, #16]
	return 0;
   20acc:	2000      	movs	r0, #0
}
   20ace:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20ad0:	f06f 0015 	mvn.w	r0, #21
   20ad4:	e7fb      	b.n	20ace <onoff_manager_init+0x1e>

00020ad6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   20ad6:	b570      	push	{r4, r5, r6, lr}
   20ad8:	4604      	mov	r4, r0
   20ada:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   20adc:	f7ff ffd9 	bl	20a92 <validate_args>

	if (rv < 0) {
   20ae0:	1e05      	subs	r5, r0, #0
   20ae2:	db31      	blt.n	20b48 <onoff_request+0x72>
   20ae4:	f04f 0320 	mov.w	r3, #32
   20ae8:	f3ef 8111 	mrs	r1, BASEPRI
   20aec:	f383 8811 	msr	BASEPRI, r3
   20af0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   20af4:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20af6:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   20af8:	f64f 75ff 	movw	r5, #65535	; 0xffff
   20afc:	42ab      	cmp	r3, r5
   20afe:	f000 0207 	and.w	r2, r0, #7
   20b02:	d02e      	beq.n	20b62 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   20b04:	2a02      	cmp	r2, #2
   20b06:	d10e      	bne.n	20b26 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   20b08:	3301      	adds	r3, #1
   20b0a:	8363      	strh	r3, [r4, #26]
	rv = state;
   20b0c:	4615      	mov	r5, r2
		notify = true;
   20b0e:	2301      	movs	r3, #1
	__asm__ volatile(
   20b10:	f381 8811 	msr	BASEPRI, r1
   20b14:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   20b18:	b1b3      	cbz	r3, 20b48 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   20b1a:	2300      	movs	r3, #0
   20b1c:	4631      	mov	r1, r6
   20b1e:	4620      	mov	r0, r4
   20b20:	f7ff ff93 	bl	20a4a <notify_one>
   20b24:	e010      	b.n	20b48 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   20b26:	0783      	lsls	r3, r0, #30
   20b28:	d001      	beq.n	20b2e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   20b2a:	2a06      	cmp	r2, #6
   20b2c:	d10e      	bne.n	20b4c <onoff_request+0x76>
	parent->next = child;
   20b2e:	2300      	movs	r3, #0
   20b30:	6033      	str	r3, [r6, #0]
	return list->tail;
   20b32:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   20b34:	b993      	cbnz	r3, 20b5c <onoff_request+0x86>
	list->head = node;
   20b36:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   20b3a:	4615      	mov	r5, r2
   20b3c:	b962      	cbnz	r2, 20b58 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   20b3e:	460a      	mov	r2, r1
   20b40:	4620      	mov	r0, r4
   20b42:	2102      	movs	r1, #2
   20b44:	f7e4 f9e2 	bl	4f0c <process_event>
		}
	}

	return rv;
}
   20b48:	4628      	mov	r0, r5
   20b4a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   20b4c:	2a05      	cmp	r2, #5
   20b4e:	bf0c      	ite	eq
   20b50:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   20b54:	f06f 0504 	mvnne.w	r5, #4
   20b58:	2300      	movs	r3, #0
   20b5a:	e7d9      	b.n	20b10 <onoff_request+0x3a>
	parent->next = child;
   20b5c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   20b5e:	6066      	str	r6, [r4, #4]
}
   20b60:	e7eb      	b.n	20b3a <onoff_request+0x64>
		rv = -EAGAIN;
   20b62:	f06f 050a 	mvn.w	r5, #10
   20b66:	e7f7      	b.n	20b58 <onoff_request+0x82>

00020b68 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   20b68:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   20b6a:	f7fe fcb9 	bl	1f4e0 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   20b6e:	2000      	movs	r0, #0
   20b70:	bd08      	pop	{r3, pc}

00020b72 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   20b72:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   20b74:	f7fe fcda 	bl	1f52c <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   20b78:	f110 0f0b 	cmn.w	r0, #11
   20b7c:	d005      	beq.n	20b8a <sys_sem_take+0x18>
		ret_value = -ETIMEDOUT;
   20b7e:	f110 0f10 	cmn.w	r0, #16
   20b82:	bf08      	it	eq
   20b84:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   20b88:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   20b8a:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   20b8e:	e7fb      	b.n	20b88 <sys_sem_take+0x16>

00020b90 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   20b90:	4604      	mov	r4, r0
   20b92:	b508      	push	{r3, lr}
   20b94:	4608      	mov	r0, r1
   20b96:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   20b98:	461a      	mov	r2, r3
   20b9a:	47a0      	blx	r4
	return z_impl_k_current_get();
   20b9c:	f7fe fc9a 	bl	1f4d4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   20ba0:	f7e6 f906 	bl	6db0 <z_impl_k_thread_abort>

00020ba4 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   20ba4:	b510      	push	{r4, lr}
   20ba6:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   20ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20bb0:	4620      	mov	r0, r4
   20bb2:	f7fe f911 	bl	1edd8 <z_impl_k_queue_get>
   20bb6:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   20bb8:	2800      	cmp	r0, #0
   20bba:	d0f5      	beq.n	20ba8 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20bbc:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   20bbe:	6842      	ldr	r2, [r0, #4]
   20bc0:	f3bf 8f5b 	dmb	ish
   20bc4:	e853 1f00 	ldrex	r1, [r3]
   20bc8:	f021 0c01 	bic.w	ip, r1, #1
   20bcc:	e843 ce00 	strex	lr, ip, [r3]
   20bd0:	f1be 0f00 	cmp.w	lr, #0
   20bd4:	d1f6      	bne.n	20bc4 <z_work_q_main+0x20>
   20bd6:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   20bda:	07cb      	lsls	r3, r1, #31
   20bdc:	d500      	bpl.n	20be0 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   20bde:	4790      	blx	r2
	z_impl_k_yield();
   20be0:	f7fe fbde 	bl	1f3a0 <z_impl_k_yield>
   20be4:	e7e0      	b.n	20ba8 <z_work_q_main+0x4>

00020be6 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   20be6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   20be8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   20bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   20bf0:	bf2c      	ite	cs
   20bf2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   20bf6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   20bfa:	4770      	bx	lr

00020bfc <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   20bfc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   20c00:	6880      	ldr	r0, [r0, #8]
   20c02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   20c06:	bf2c      	ite	cs
   20c08:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   20c0c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   20c10:	4770      	bx	lr

00020c12 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   20c12:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20c14:	2201      	movs	r2, #1
   20c16:	f7ff ffe6 	bl	20be6 <chunk_field>
}
   20c1a:	40d0      	lsrs	r0, r2
   20c1c:	bd08      	pop	{r3, pc}

00020c1e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   20c1e:	6883      	ldr	r3, [r0, #8]
   20c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   20c24:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   20c28:	d308      	bcc.n	20c3c <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   20c2a:	684b      	ldr	r3, [r1, #4]
		if (used) {
   20c2c:	b11a      	cbz	r2, 20c36 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   20c2e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   20c32:	604b      	str	r3, [r1, #4]
   20c34:	4770      	bx	lr
   20c36:	f023 0301 	bic.w	r3, r3, #1
   20c3a:	e7fa      	b.n	20c32 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   20c3c:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   20c3e:	b11a      	cbz	r2, 20c48 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   20c40:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   20c44:	804b      	strh	r3, [r1, #2]
		}
	}
}
   20c46:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   20c48:	f023 0301 	bic.w	r3, r3, #1
   20c4c:	e7fa      	b.n	20c44 <set_chunk_used+0x26>

00020c4e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20c4e:	0053      	lsls	r3, r2, #1
   20c50:	2201      	movs	r2, #1
   20c52:	f7ff bfd3 	b.w	20bfc <chunk_set>

00020c56 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   20c56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   20c5a:	bf2c      	ite	cs
   20c5c:	2008      	movcs	r0, #8
   20c5e:	2004      	movcc	r0, #4
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   20c60:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   20c62:	3008      	adds	r0, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   20c64:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   20c68:	fab0 f080 	clz	r0, r0
}
   20c6c:	f1c0 001f 	rsb	r0, r0, #31
   20c70:	4770      	bx	lr

00020c72 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   20c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c76:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   20c78:	2203      	movs	r2, #3
   20c7a:	460e      	mov	r6, r1
   20c7c:	4604      	mov	r4, r0
   20c7e:	f7ff ffb2 	bl	20be6 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   20c82:	4286      	cmp	r6, r0
   20c84:	4605      	mov	r5, r0
   20c86:	f107 0804 	add.w	r8, r7, #4
   20c8a:	d10b      	bne.n	20ca4 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   20c8c:	2301      	movs	r3, #1
   20c8e:	fa03 f707 	lsl.w	r7, r3, r7
   20c92:	68e3      	ldr	r3, [r4, #12]
   20c94:	ea23 0307 	bic.w	r3, r3, r7
   20c98:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   20c9a:	2300      	movs	r3, #0
   20c9c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   20ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   20ca4:	4631      	mov	r1, r6
   20ca6:	2202      	movs	r2, #2
   20ca8:	4620      	mov	r0, r4
   20caa:	f7ff ff9c 	bl	20be6 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   20cae:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   20cb0:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   20cb2:	4601      	mov	r1, r0
		b->next = second;
   20cb4:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   20cb8:	4620      	mov	r0, r4
   20cba:	2203      	movs	r2, #3
   20cbc:	f7ff ff9e 	bl	20bfc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   20cc0:	4633      	mov	r3, r6
   20cc2:	4629      	mov	r1, r5
   20cc4:	4620      	mov	r0, r4
   20cc6:	2202      	movs	r2, #2
}
   20cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20ccc:	f7ff bf96 	b.w	20bfc <chunk_set>

00020cd0 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   20cd0:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->len);
   20cd2:	6886      	ldr	r6, [r0, #8]
   20cd4:	460d      	mov	r5, r1
   20cd6:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1;
   20cd8:	f7ff ff9b 	bl	20c12 <chunk_size>
   20cdc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   20ce0:	4601      	mov	r1, r0
   20ce2:	d301      	bcc.n	20ce8 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   20ce4:	2801      	cmp	r0, #1
   20ce6:	d009      	beq.n	20cfc <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   20ce8:	4630      	mov	r0, r6
   20cea:	f7ff ffb4 	bl	20c56 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   20cee:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   20cf0:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   20cf2:	4620      	mov	r0, r4
	}
}
   20cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   20cf8:	f7ff bfbb 	b.w	20c72 <free_list_remove_bidx>
}
   20cfc:	bd70      	pop	{r4, r5, r6, pc}

00020cfe <alloc_chunk>:
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
	int bi = bucket_idx(h, sz);
   20cfe:	6883      	ldr	r3, [r0, #8]
{
   20d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20d04:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   20d06:	4618      	mov	r0, r3
{
   20d08:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   20d0a:	f7ff ffa4 	bl	20c56 <bucket_idx.isra.0>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   20d0e:	4619      	mov	r1, r3
	int bi = bucket_idx(h, sz);
   20d10:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   20d12:	4618      	mov	r0, r3
   20d14:	f7ff ff9f 	bl	20c56 <bucket_idx.isra.0>
   20d18:	42a8      	cmp	r0, r5
   20d1a:	da03      	bge.n	20d24 <alloc_chunk+0x26>
		return 0;
   20d1c:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   20d1e:	4630      	mov	r0, r6
   20d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   20d24:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   20d28:	f8da 9010 	ldr.w	r9, [sl, #16]
   20d2c:	f1b9 0f00 	cmp.w	r9, #0
   20d30:	d019      	beq.n	20d66 <alloc_chunk+0x68>
   20d32:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   20d34:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   20d38:	4620      	mov	r0, r4
   20d3a:	4631      	mov	r1, r6
   20d3c:	f7ff ff69 	bl	20c12 <chunk_size>
   20d40:	4540      	cmp	r0, r8
   20d42:	d305      	bcc.n	20d50 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   20d44:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   20d46:	4631      	mov	r1, r6
   20d48:	4620      	mov	r0, r4
   20d4a:	f7ff ff92 	bl	20c72 <free_list_remove_bidx>
		return c;
   20d4e:	e7e6      	b.n	20d1e <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   20d50:	2203      	movs	r2, #3
   20d52:	4631      	mov	r1, r6
   20d54:	4620      	mov	r0, r4
   20d56:	f7ff ff46 	bl	20be6 <chunk_field>
		} while (--i && b->next != first);
   20d5a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   20d5c:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   20d60:	d001      	beq.n	20d66 <alloc_chunk+0x68>
   20d62:	4581      	cmp	r9, r0
   20d64:	d1e6      	bne.n	20d34 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   20d66:	68e3      	ldr	r3, [r4, #12]
   20d68:	3501      	adds	r5, #1
   20d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20d6e:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   20d70:	401a      	ands	r2, r3
   20d72:	d0d3      	beq.n	20d1c <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   20d74:	fa92 f2a2 	rbit	r2, r2
   20d78:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   20d7c:	1d13      	adds	r3, r2, #4
   20d7e:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   20d82:	e7e0      	b.n	20d46 <alloc_chunk+0x48>

00020d84 <split_chunks>:
{
   20d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d88:	4614      	mov	r4, r2
   20d8a:	4605      	mov	r5, r0
   20d8c:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   20d8e:	f7ff ff40 	bl	20c12 <chunk_size>
	size_t lsz = rc - lc;
   20d92:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   20d96:	1b37      	subs	r7, r6, r4
   20d98:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   20d9a:	4642      	mov	r2, r8
   20d9c:	4631      	mov	r1, r6
   20d9e:	4628      	mov	r0, r5
   20da0:	f7ff ff55 	bl	20c4e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   20da4:	463a      	mov	r2, r7
   20da6:	4621      	mov	r1, r4
   20da8:	4628      	mov	r0, r5
   20daa:	f7ff ff50 	bl	20c4e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   20dae:	4643      	mov	r3, r8
   20db0:	2200      	movs	r2, #0
   20db2:	4621      	mov	r1, r4
   20db4:	4628      	mov	r0, r5
   20db6:	f7ff ff21 	bl	20bfc <chunk_set>
	return c + chunk_size(h, c);
   20dba:	4621      	mov	r1, r4
   20dbc:	4628      	mov	r0, r5
   20dbe:	f7ff ff28 	bl	20c12 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   20dc2:	463b      	mov	r3, r7
   20dc4:	1821      	adds	r1, r4, r0
   20dc6:	2200      	movs	r2, #0
   20dc8:	4628      	mov	r0, r5
}
   20dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20dce:	f7ff bf15 	b.w	20bfc <chunk_set>

00020dd2 <merge_chunks>:
{
   20dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20dd6:	4616      	mov	r6, r2
   20dd8:	4604      	mov	r4, r0
   20dda:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   20ddc:	f7ff ff19 	bl	20c12 <chunk_size>
   20de0:	4631      	mov	r1, r6
   20de2:	4605      	mov	r5, r0
   20de4:	4620      	mov	r0, r4
   20de6:	f7ff ff14 	bl	20c12 <chunk_size>
   20dea:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   20dec:	462a      	mov	r2, r5
   20dee:	4639      	mov	r1, r7
   20df0:	4620      	mov	r0, r4
   20df2:	f7ff ff2c 	bl	20c4e <set_chunk_size>
	return c + chunk_size(h, c);
   20df6:	4631      	mov	r1, r6
   20df8:	4620      	mov	r0, r4
   20dfa:	f7ff ff0a 	bl	20c12 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   20dfe:	462b      	mov	r3, r5
   20e00:	1831      	adds	r1, r6, r0
   20e02:	2200      	movs	r2, #0
   20e04:	4620      	mov	r0, r4
}
   20e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20e0a:	f7ff bef7 	b.w	20bfc <chunk_set>

00020e0e <free_list_add>:
{
   20e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->len);
   20e12:	6886      	ldr	r6, [r0, #8]
   20e14:	460d      	mov	r5, r1
   20e16:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1;
   20e18:	f7ff fefb 	bl	20c12 <chunk_size>
   20e1c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   20e20:	4601      	mov	r1, r0
   20e22:	d301      	bcc.n	20e28 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   20e24:	2801      	cmp	r0, #1
   20e26:	d033      	beq.n	20e90 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   20e28:	4630      	mov	r0, r6
   20e2a:	f7ff ff14 	bl	20c56 <bucket_idx.isra.0>
	if (b->next == 0) {
   20e2e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   20e32:	6916      	ldr	r6, [r2, #16]
   20e34:	b99e      	cbnz	r6, 20e5e <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   20e36:	2301      	movs	r3, #1
   20e38:	fa03 f000 	lsl.w	r0, r3, r0
   20e3c:	68e3      	ldr	r3, [r4, #12]
   20e3e:	4303      	orrs	r3, r0
   20e40:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   20e42:	4629      	mov	r1, r5
		b->next = c;
   20e44:	6115      	str	r5, [r2, #16]
   20e46:	462b      	mov	r3, r5
   20e48:	2202      	movs	r2, #2
   20e4a:	4620      	mov	r0, r4
   20e4c:	f7ff fed6 	bl	20bfc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   20e50:	2203      	movs	r2, #3
   20e52:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   20e54:	4620      	mov	r0, r4
}
   20e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20e5a:	f7ff becf 	b.w	20bfc <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   20e5e:	2202      	movs	r2, #2
   20e60:	4631      	mov	r1, r6
   20e62:	4620      	mov	r0, r4
   20e64:	f7ff febf 	bl	20be6 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   20e68:	4629      	mov	r1, r5
   20e6a:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   20e6c:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   20e6e:	4620      	mov	r0, r4
   20e70:	f7ff fec4 	bl	20bfc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   20e74:	2203      	movs	r2, #3
   20e76:	4633      	mov	r3, r6
   20e78:	4629      	mov	r1, r5
   20e7a:	4620      	mov	r0, r4
   20e7c:	f7ff febe 	bl	20bfc <chunk_set>
   20e80:	4639      	mov	r1, r7
   20e82:	462b      	mov	r3, r5
   20e84:	4620      	mov	r0, r4
   20e86:	f7ff feb9 	bl	20bfc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   20e8a:	2202      	movs	r2, #2
   20e8c:	4631      	mov	r1, r6
   20e8e:	e7e1      	b.n	20e54 <free_list_add+0x46>
   20e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020e94 <sys_heap_free>:
{
   20e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   20e96:	2900      	cmp	r1, #0
   20e98:	d050      	beq.n	20f3c <sys_heap_free+0xa8>
	struct z_heap *h = heap->heap;
   20e9a:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   20e9c:	68ab      	ldr	r3, [r5, #8]
   20e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20ea2:	bf2c      	ite	cs
   20ea4:	2408      	movcs	r4, #8
   20ea6:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   20ea8:	1b0c      	subs	r4, r1, r4
   20eaa:	1b64      	subs	r4, r4, r5
   20eac:	bf48      	it	mi
   20eae:	3407      	addmi	r4, #7
   20eb0:	10e4      	asrs	r4, r4, #3
	set_chunk_used(h, c, false);
   20eb2:	2200      	movs	r2, #0
   20eb4:	4621      	mov	r1, r4
   20eb6:	4628      	mov	r0, r5
   20eb8:	f7ff feb1 	bl	20c1e <set_chunk_used>
	return c + chunk_size(h, c);
   20ebc:	4621      	mov	r1, r4
   20ebe:	f7ff fea8 	bl	20c12 <chunk_size>
   20ec2:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   20ec4:	2201      	movs	r2, #1
   20ec6:	4631      	mov	r1, r6
   20ec8:	4628      	mov	r0, r5
   20eca:	f7ff fe8c 	bl	20be6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   20ece:	07c3      	lsls	r3, r0, #31
   20ed0:	d40c      	bmi.n	20eec <sys_heap_free+0x58>
		free_list_remove(h, right_chunk(h, c));
   20ed2:	4631      	mov	r1, r6
   20ed4:	4628      	mov	r0, r5
   20ed6:	f7ff fefb 	bl	20cd0 <free_list_remove>
	return c + chunk_size(h, c);
   20eda:	4621      	mov	r1, r4
   20edc:	4628      	mov	r0, r5
   20ede:	f7ff fe98 	bl	20c12 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   20ee2:	4621      	mov	r1, r4
   20ee4:	1822      	adds	r2, r4, r0
   20ee6:	4628      	mov	r0, r5
   20ee8:	f7ff ff73 	bl	20dd2 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   20eec:	2200      	movs	r2, #0
   20eee:	4621      	mov	r1, r4
   20ef0:	4628      	mov	r0, r5
   20ef2:	f7ff fe78 	bl	20be6 <chunk_field>
   20ef6:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   20ef8:	2201      	movs	r2, #1
   20efa:	4639      	mov	r1, r7
   20efc:	4628      	mov	r0, r5
   20efe:	f7ff fe72 	bl	20be6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   20f02:	ea10 0602 	ands.w	r6, r0, r2
   20f06:	d113      	bne.n	20f30 <sys_heap_free+0x9c>
		free_list_remove(h, left_chunk(h, c));
   20f08:	4639      	mov	r1, r7
   20f0a:	4628      	mov	r0, r5
   20f0c:	f7ff fee0 	bl	20cd0 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   20f10:	4621      	mov	r1, r4
   20f12:	4632      	mov	r2, r6
   20f14:	4628      	mov	r0, r5
   20f16:	f7ff fe66 	bl	20be6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   20f1a:	4622      	mov	r2, r4
   20f1c:	1a21      	subs	r1, r4, r0
   20f1e:	4628      	mov	r0, r5
   20f20:	f7ff ff57 	bl	20dd2 <merge_chunks>
   20f24:	4621      	mov	r1, r4
   20f26:	4632      	mov	r2, r6
   20f28:	4628      	mov	r0, r5
   20f2a:	f7ff fe5c 	bl	20be6 <chunk_field>
   20f2e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   20f30:	4621      	mov	r1, r4
   20f32:	4628      	mov	r0, r5
}
   20f34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   20f38:	f7ff bf69 	b.w	20e0e <free_list_add>
}
   20f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020f3e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   20f3e:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   20f40:	b909      	cbnz	r1, 20f46 <sys_heap_alloc+0x8>
		return NULL;
   20f42:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   20f44:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   20f46:	6806      	ldr	r6, [r0, #0]
	return big_heap(h) ? 8 : 4;
   20f48:	68b3      	ldr	r3, [r6, #8]
   20f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20f4e:	bf2c      	ite	cs
   20f50:	2208      	movcs	r2, #8
   20f52:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   20f54:	1dcc      	adds	r4, r1, #7
   20f56:	4414      	add	r4, r2
   20f58:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   20f5a:	4621      	mov	r1, r4
   20f5c:	4630      	mov	r0, r6
   20f5e:	f7ff fece 	bl	20cfe <alloc_chunk>
	if (c == 0) {
   20f62:	4605      	mov	r5, r0
   20f64:	2800      	cmp	r0, #0
   20f66:	d0ec      	beq.n	20f42 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   20f68:	4601      	mov	r1, r0
   20f6a:	4630      	mov	r0, r6
   20f6c:	f7ff fe51 	bl	20c12 <chunk_size>
   20f70:	42a0      	cmp	r0, r4
   20f72:	d909      	bls.n	20f88 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   20f74:	442c      	add	r4, r5
   20f76:	4629      	mov	r1, r5
   20f78:	4630      	mov	r0, r6
   20f7a:	4622      	mov	r2, r4
   20f7c:	f7ff ff02 	bl	20d84 <split_chunks>
		free_list_add(h, c + chunk_sz);
   20f80:	4621      	mov	r1, r4
   20f82:	4630      	mov	r0, r6
   20f84:	f7ff ff43 	bl	20e0e <free_list_add>
	set_chunk_used(h, c, true);
   20f88:	4629      	mov	r1, r5
   20f8a:	4630      	mov	r0, r6
   20f8c:	2201      	movs	r2, #1
   20f8e:	f7ff fe46 	bl	20c1e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   20f92:	68b3      	ldr	r3, [r6, #8]
   20f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20f98:	bf2c      	ite	cs
   20f9a:	2308      	movcs	r3, #8
   20f9c:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   20f9e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   20fa2:	4428      	add	r0, r5
	return chunk_mem(h, c);
   20fa4:	e7ce      	b.n	20f44 <sys_heap_alloc+0x6>

00020fa6 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   20fa6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   20faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fac:	bf2c      	ite	cs
   20fae:	2408      	movcs	r4, #8
   20fb0:	2404      	movcc	r4, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   20fb2:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   20fb4:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   20fb6:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   20fb8:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   20fbc:	f024 0407 	bic.w	r4, r4, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   20fc0:	2200      	movs	r2, #0
   20fc2:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   20fc4:	1ba4      	subs	r4, r4, r6
	heap->heap = h;
   20fc6:	6006      	str	r6, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   20fc8:	08e4      	lsrs	r4, r4, #3
	h->chunk0_hdr_area = 0;
   20fca:	e9c6 2300 	strd	r2, r3, [r6]
	h->len = buf_sz;
	h->avail_buckets = 0;
   20fce:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   20fd0:	4621      	mov	r1, r4
	h->len = buf_sz;
   20fd2:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   20fd4:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   20fd6:	4620      	mov	r0, r4
   20fd8:	f7ff fe3d 	bl	20c56 <bucket_idx.isra.0>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   20fdc:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   20fde:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   20fe0:	1c41      	adds	r1, r0, #1
   20fe2:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   20fe4:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   20fe8:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   20fea:	428b      	cmp	r3, r1
   20fec:	db28      	blt.n	21040 <sys_heap_init+0x9a>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   20fee:	462a      	mov	r2, r5
   20ff0:	4630      	mov	r0, r6
   20ff2:	2100      	movs	r1, #0
   20ff4:	f7ff fe2b 	bl	20c4e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   20ff8:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   20ffa:	4630      	mov	r0, r6
   20ffc:	2201      	movs	r2, #1
   20ffe:	2100      	movs	r1, #0
   21000:	f7ff fe0d 	bl	20c1e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   21004:	463a      	mov	r2, r7
   21006:	4629      	mov	r1, r5
   21008:	f7ff fe21 	bl	20c4e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2100c:	462b      	mov	r3, r5
   2100e:	2200      	movs	r2, #0
   21010:	4629      	mov	r1, r5
   21012:	4630      	mov	r0, r6
   21014:	f7ff fdf2 	bl	20bfc <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   21018:	4621      	mov	r1, r4
   2101a:	4630      	mov	r0, r6
   2101c:	f7ff fe17 	bl	20c4e <set_chunk_size>
   21020:	463b      	mov	r3, r7
   21022:	4621      	mov	r1, r4
   21024:	4630      	mov	r0, r6
   21026:	2200      	movs	r2, #0
   21028:	f7ff fde8 	bl	20bfc <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   2102c:	4621      	mov	r1, r4
   2102e:	4630      	mov	r0, r6
   21030:	2201      	movs	r2, #1
   21032:	f7ff fdf4 	bl	20c1e <set_chunk_used>

	free_list_add(h, chunk0_size);
   21036:	4629      	mov	r1, r5
}
   21038:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   2103c:	f7ff bee7 	b.w	20e0e <free_list_add>
		h->buckets[i].next = 0;
   21040:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   21044:	3301      	adds	r3, #1
   21046:	e7d0      	b.n	20fea <sys_heap_init+0x44>

00021048 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   21048:	4770      	bx	lr

0002104a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2104a:	2300      	movs	r3, #0
	list->head = NULL;
   2104c:	e9c0 3300 	strd	r3, r3, [r0]
}
   21050:	4770      	bx	lr

00021052 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   21052:	6803      	ldr	r3, [r0, #0]
   21054:	b923      	cbnz	r3, 21060 <log_list_add_tail+0xe>
		list->head = msg;
   21056:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   21058:	2300      	movs	r3, #0
	list->tail = msg;
   2105a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2105c:	600b      	str	r3, [r1, #0]
}
   2105e:	4770      	bx	lr
		list->tail->next = msg;
   21060:	6843      	ldr	r3, [r0, #4]
   21062:	6019      	str	r1, [r3, #0]
   21064:	e7f8      	b.n	21058 <log_list_add_tail+0x6>

00021066 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   21066:	6800      	ldr	r0, [r0, #0]
   21068:	4770      	bx	lr

0002106a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2106a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2106c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2106e:	b108      	cbz	r0, 21074 <log_list_head_get+0xa>
		list->head = list->head->next;
   21070:	6802      	ldr	r2, [r0, #0]
   21072:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   21074:	4770      	bx	lr

00021076 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   21076:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   21078:	f7e4 fb1c 	bl	56b4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   2107c:	b118      	cbz	r0, 21086 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   2107e:	2301      	movs	r3, #1
   21080:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   21082:	2300      	movs	r3, #0
   21084:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   21086:	bd08      	pop	{r3, pc}

00021088 <k_cycle_get_32_wrapper>:
   21088:	f7e5 b91a 	b.w	62c0 <z_timer_cycle_get_32>

0002108c <dummy_timestamp>:
   2108c:	2000      	movs	r0, #0
   2108e:	4770      	bx	lr

00021090 <log_0>:
{
   21090:	b538      	push	{r3, r4, r5, lr}
   21092:	4605      	mov	r5, r0
   21094:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   21096:	f7ff ffee 	bl	21076 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2109a:	b128      	cbz	r0, 210a8 <log_0+0x18>
		msg->str = str;
   2109c:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   2109e:	4621      	mov	r1, r4
}
   210a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   210a4:	f7e4 ba44 	b.w	5530 <msg_finalize>
}
   210a8:	bd38      	pop	{r3, r4, r5, pc}

000210aa <log_1>:
{
   210aa:	b570      	push	{r4, r5, r6, lr}
   210ac:	4606      	mov	r6, r0
   210ae:	460d      	mov	r5, r1
   210b0:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   210b2:	f7ff ffe0 	bl	21076 <z_log_msg_std_alloc>

	if (msg != NULL) {
   210b6:	b158      	cbz	r0, 210d0 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   210b8:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   210ba:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   210bc:	2101      	movs	r1, #1
   210be:	f361 1207 	bfi	r2, r1, #4, #4
   210c2:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   210c4:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   210c6:	4621      	mov	r1, r4
}
   210c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   210cc:	f7e4 ba30 	b.w	5530 <msg_finalize>
}
   210d0:	bd70      	pop	{r4, r5, r6, pc}

000210d2 <log_2>:
{
   210d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210d6:	4680      	mov	r8, r0
   210d8:	460f      	mov	r7, r1
   210da:	4616      	mov	r6, r2
   210dc:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   210de:	f7ff ffca 	bl	21076 <z_log_msg_std_alloc>

	if (msg != NULL) {
   210e2:	b168      	cbz	r0, 21100 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   210e4:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   210e6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   210ea:	2202      	movs	r2, #2
   210ec:	f362 1307 	bfi	r3, r2, #4, #4
   210f0:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   210f2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   210f6:	4629      	mov	r1, r5
}
   210f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   210fc:	f7e4 ba18 	b.w	5530 <msg_finalize>
}
   21100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021104 <log_3>:
{
   21104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21108:	4680      	mov	r8, r0
   2110a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   2110e:	460f      	mov	r7, r1
   21110:	4616      	mov	r6, r2
   21112:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21114:	f7ff ffaf 	bl	21076 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21118:	b170      	cbz	r0, 21138 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2111a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   2111c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   21120:	2203      	movs	r2, #3
   21122:	f362 1307 	bfi	r3, r2, #4, #4
   21126:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   21128:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   2112c:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   2112e:	4649      	mov	r1, r9
}
   21130:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   21134:	f7e4 b9fc 	b.w	5530 <msg_finalize>
}
   21138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002113c <log_n>:
{
   2113c:	b510      	push	{r4, lr}
   2113e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   21140:	f000 f89e 	bl	21280 <log_msg_create_n>
		if (msg == NULL) {
   21144:	b120      	cbz	r0, 21150 <log_n+0x14>
		msg_finalize(msg, src_level);
   21146:	4621      	mov	r1, r4
}
   21148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2114c:	f7e4 b9f0 	b.w	5530 <msg_finalize>
}
   21150:	bd10      	pop	{r4, pc}

00021152 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   21152:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21156:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21158:	8903      	ldrh	r3, [r0, #8]
{
   2115a:	f89d 7020 	ldrb.w	r7, [sp, #32]
   2115e:	460e      	mov	r6, r1
   21160:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21162:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   21166:	42a2      	cmp	r2, r4
   21168:	d803      	bhi.n	21172 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   2116a:	2300      	movs	r3, #0
   2116c:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2116e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   21172:	680b      	ldr	r3, [r1, #0]
   21174:	4423      	add	r3, r4
   21176:	4293      	cmp	r3, r2
		*length = available_len - offset;
   21178:	bf84      	itt	hi
   2117a:	1b13      	subhi	r3, r2, r4
   2117c:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2117e:	2a0c      	cmp	r2, #12
	req_len = *length;
   21180:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21184:	d927      	bls.n	211d6 <log_msg_hexdump_data_op+0x84>
	if (offset < chunk_len) {
   21186:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   21188:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2118c:	d82a      	bhi.n	211e4 <log_msg_hexdump_data_op+0x92>
		head_data = msg->payload.ext.data.bytes;
   2118e:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21190:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   21192:	454a      	cmp	r2, r9
   21194:	bf28      	it	cs
   21196:	464a      	movcs	r2, r9
   21198:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   2119a:	4420      	add	r0, r4
		if (put_op) {
   2119c:	b1ff      	cbz	r7, 211de <log_msg_hexdump_data_op+0x8c>
   2119e:	4631      	mov	r1, r6
   211a0:	f005 f879 	bl	26296 <memcpy>
		req_len -= cpy_len;
   211a4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   211a8:	442e      	add	r6, r5
	while (req_len > 0) {
   211aa:	f1b9 0f00 	cmp.w	r9, #0
   211ae:	d0de      	beq.n	2116e <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   211b0:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   211b4:	454d      	cmp	r5, r9
   211b6:	bf28      	it	cs
   211b8:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   211ba:	1d20      	adds	r0, r4, #4
   211bc:	4440      	add	r0, r8
   211be:	462a      	mov	r2, r5
		if (put_op) {
   211c0:	b1bf      	cbz	r7, 211f2 <log_msg_hexdump_data_op+0xa0>
   211c2:	4631      	mov	r1, r6
   211c4:	f005 f867 	bl	26296 <memcpy>
		req_len -= cpy_len;
   211c8:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   211cc:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   211d0:	442e      	add	r6, r5
		offset = 0;
   211d2:	2400      	movs	r4, #0
   211d4:	e7e9      	b.n	211aa <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   211d6:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   211d8:	f04f 0800 	mov.w	r8, #0
   211dc:	e7d9      	b.n	21192 <log_msg_hexdump_data_op+0x40>
   211de:	4601      	mov	r1, r0
   211e0:	4630      	mov	r0, r6
   211e2:	e7dd      	b.n	211a0 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   211e4:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   211e6:	2c1b      	cmp	r4, #27
   211e8:	d9df      	bls.n	211aa <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   211ea:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   211ee:	3c1c      	subs	r4, #28
   211f0:	e7f9      	b.n	211e6 <log_msg_hexdump_data_op+0x94>
   211f2:	4601      	mov	r1, r0
   211f4:	4630      	mov	r0, r6
   211f6:	e7e5      	b.n	211c4 <log_msg_hexdump_data_op+0x72>

000211f8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   211f8:	3004      	adds	r0, #4
   211fa:	f3bf 8f5b 	dmb	ish
   211fe:	e850 3f00 	ldrex	r3, [r0]
   21202:	3301      	adds	r3, #1
   21204:	e840 3200 	strex	r2, r3, [r0]
   21208:	2a00      	cmp	r2, #0
   2120a:	d1f8      	bne.n	211fe <log_msg_get+0x6>
   2120c:	f3bf 8f5b 	dmb	ish
}
   21210:	4770      	bx	lr

00021212 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   21212:	7a40      	ldrb	r0, [r0, #9]
}
   21214:	0900      	lsrs	r0, r0, #4
   21216:	4770      	bx	lr

00021218 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   21218:	7a43      	ldrb	r3, [r0, #9]
   2121a:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2121e:	ea4f 1213 	mov.w	r2, r3, lsr #4
   21222:	d216      	bcs.n	21252 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21224:	2a03      	cmp	r2, #3
   21226:	d803      	bhi.n	21230 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   21228:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2122c:	6940      	ldr	r0, [r0, #20]
   2122e:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   21230:	2901      	cmp	r1, #1
   21232:	d803      	bhi.n	2123c <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   21234:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21238:	6980      	ldr	r0, [r0, #24]
   2123a:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2123c:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2123e:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   21240:	2906      	cmp	r1, #6
   21242:	d803      	bhi.n	2124c <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   21244:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   21248:	6848      	ldr	r0, [r1, #4]
   2124a:	4770      	bx	lr
		cont = cont->next;
   2124c:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2124e:	3907      	subs	r1, #7
		cont = cont->next;
   21250:	e7f6      	b.n	21240 <log_msg_arg_get+0x28>
		return 0;
   21252:	2000      	movs	r0, #0
}
   21254:	4770      	bx	lr

00021256 <log_msg_put>:
{
   21256:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21258:	1d02      	adds	r2, r0, #4
   2125a:	f3bf 8f5b 	dmb	ish
   2125e:	e852 1f00 	ldrex	r1, [r2]
   21262:	3901      	subs	r1, #1
   21264:	e842 1c00 	strex	ip, r1, [r2]
   21268:	f1bc 0f00 	cmp.w	ip, #0
   2126c:	d1f7      	bne.n	2125e <log_msg_put+0x8>
   2126e:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   21272:	685b      	ldr	r3, [r3, #4]
   21274:	b90b      	cbnz	r3, 2127a <log_msg_put+0x24>
		msg_free(msg);
   21276:	f7e4 ba31 	b.w	56dc <msg_free>
}
   2127a:	4770      	bx	lr

0002127c <log_msg_str_get>:
}
   2127c:	6900      	ldr	r0, [r0, #16]
   2127e:	4770      	bx	lr

00021280 <log_msg_create_n>:
{
   21280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21284:	4680      	mov	r8, r0
   21286:	460f      	mov	r7, r1
   21288:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2128a:	f7e4 fa13 	bl	56b4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   2128e:	4604      	mov	r4, r0
   21290:	b358      	cbz	r0, 212ea <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   21292:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   21294:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21298:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   2129a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2129c:	f8a0 a008 	strh.w	sl, [r0, #8]
   212a0:	d90c      	bls.n	212bc <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   212a2:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   212a4:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   212a8:	f043 0302 	orr.w	r3, r3, #2
   212ac:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   212ae:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   212b2:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   212b6:	f1b9 0f00 	cmp.w	r9, #0
   212ba:	dc0e      	bgt.n	212da <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   212bc:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   212be:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   212c2:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   212c6:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   212c8:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   212ca:	d819      	bhi.n	21300 <log_msg_create_n+0x80>
   212cc:	00aa      	lsls	r2, r5, #2
   212ce:	4639      	mov	r1, r7
   212d0:	f104 0014 	add.w	r0, r4, #20
   212d4:	f004 ffdf 	bl	26296 <memcpy>
	while (nargs != 0U) {
   212d8:	e007      	b.n	212ea <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   212da:	f7e4 f9eb 	bl	56b4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   212de:	4606      	mov	r6, r0
   212e0:	b930      	cbnz	r0, 212f0 <log_msg_create_n+0x70>
			msg_free(msg);
   212e2:	4620      	mov	r0, r4
   212e4:	f7e4 f9fa 	bl	56dc <msg_free>
			return NULL;
   212e8:	4634      	mov	r4, r6
}
   212ea:	4620      	mov	r0, r4
   212ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   212f0:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   212f4:	f1a9 0907 	sub.w	r9, r9, #7
   212f8:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   212fc:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   212fe:	e7da      	b.n	212b6 <log_msg_create_n+0x36>
   21300:	683b      	ldr	r3, [r7, #0]
   21302:	61a3      	str	r3, [r4, #24]
   21304:	687b      	ldr	r3, [r7, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   21306:	f8d4 8014 	ldr.w	r8, [r4, #20]
   2130a:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   2130c:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   2130e:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   21310:	2d07      	cmp	r5, #7
   21312:	462e      	mov	r6, r5
   21314:	bf28      	it	cs
   21316:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   21318:	ea4f 0986 	mov.w	r9, r6, lsl #2
   2131c:	4639      	mov	r1, r7
   2131e:	f108 0004 	add.w	r0, r8, #4
   21322:	464a      	mov	r2, r9
   21324:	f004 ffb7 	bl	26296 <memcpy>
	while (nargs != 0U) {
   21328:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   2132a:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   2132e:	444f      	add	r7, r9
	while (nargs != 0U) {
   21330:	d1ee      	bne.n	21310 <log_msg_create_n+0x90>
   21332:	e7da      	b.n	212ea <log_msg_create_n+0x6a>

00021334 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   21334:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   21336:	2400      	movs	r4, #0
   21338:	9400      	str	r4, [sp, #0]
   2133a:	f7ff ff0a 	bl	21152 <log_msg_hexdump_data_op>
}
   2133e:	b002      	add	sp, #8
   21340:	bd10      	pop	{r4, pc}

00021342 <buffer_write>:
{
   21342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21344:	4606      	mov	r6, r0
   21346:	460d      	mov	r5, r1
   21348:	4614      	mov	r4, r2
   2134a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2134c:	4621      	mov	r1, r4
   2134e:	4628      	mov	r0, r5
   21350:	463a      	mov	r2, r7
   21352:	47b0      	blx	r6
	} while (len != 0);
   21354:	1a24      	subs	r4, r4, r0
		buf += processed;
   21356:	4405      	add	r5, r0
	} while (len != 0);
   21358:	d1f8      	bne.n	2134c <buffer_write+0xa>
}
   2135a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002135c <std_print>:
{
   2135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21360:	b08e      	sub	sp, #56	; 0x38
   21362:	af0e      	add	r7, sp, #56	; 0x38
   21364:	4680      	mov	r8, r0
   21366:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   21368:	f7ff ff88 	bl	2127c <log_msg_str_get>
   2136c:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2136e:	4640      	mov	r0, r8
   21370:	f7ff ff4f 	bl	21212 <log_msg_nargs_get>
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   21374:	0083      	lsls	r3, r0, #2
   21376:	3307      	adds	r3, #7
   21378:	f023 0307 	bic.w	r3, r3, #7
   2137c:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   21380:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   21382:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   21384:	f04f 0900 	mov.w	r9, #0
   21388:	45d1      	cmp	r9, sl
   2138a:	d116      	bne.n	213ba <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   2138c:	4640      	mov	r0, r8
   2138e:	f7ff ff40 	bl	21212 <log_msg_nargs_get>
   21392:	280f      	cmp	r0, #15
   21394:	d81e      	bhi.n	213d4 <std_print+0x78>
   21396:	e8df f010 	tbh	[pc, r0, lsl #1]
   2139a:	0019      	.short	0x0019
   2139c:	00260020 	.word	0x00260020
   213a0:	0036002d 	.word	0x0036002d
   213a4:	004e0041 	.word	0x004e0041
   213a8:	006e005d 	.word	0x006e005d
   213ac:	00960081 	.word	0x00960081
   213b0:	00c600ad 	.word	0x00c600ad
   213b4:	00fe00e1 	.word	0x00fe00e1
   213b8:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   213ba:	4649      	mov	r1, r9
   213bc:	4640      	mov	r0, r8
   213be:	f7ff ff2b 	bl	21218 <log_msg_arg_get>
   213c2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   213c6:	f109 0901 	add.w	r9, r9, #1
   213ca:	e7dd      	b.n	21388 <std_print+0x2c>
		print_formatted(log_output, str);
   213cc:	4631      	mov	r1, r6
   213ce:	4628      	mov	r0, r5
   213d0:	f7e4 f9c2 	bl	5758 <print_formatted>
}
   213d4:	46bd      	mov	sp, r7
   213d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   213da:	6822      	ldr	r2, [r4, #0]
   213dc:	4631      	mov	r1, r6
   213de:	4628      	mov	r0, r5
   213e0:	f7e4 f9ba 	bl	5758 <print_formatted>
		break;
   213e4:	e7f6      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   213e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   213ea:	4631      	mov	r1, r6
   213ec:	4628      	mov	r0, r5
   213ee:	f7e4 f9b3 	bl	5758 <print_formatted>
		break;
   213f2:	e7ef      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   213f4:	68a3      	ldr	r3, [r4, #8]
   213f6:	9300      	str	r3, [sp, #0]
   213f8:	e9d4 2300 	ldrd	r2, r3, [r4]
   213fc:	4631      	mov	r1, r6
   213fe:	4628      	mov	r0, r5
   21400:	f7e4 f9aa 	bl	5758 <print_formatted>
		break;
   21404:	e7e6      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21406:	68e3      	ldr	r3, [r4, #12]
   21408:	9301      	str	r3, [sp, #4]
   2140a:	68a3      	ldr	r3, [r4, #8]
   2140c:	9300      	str	r3, [sp, #0]
   2140e:	e9d4 2300 	ldrd	r2, r3, [r4]
   21412:	4631      	mov	r1, r6
   21414:	4628      	mov	r0, r5
   21416:	f7e4 f99f 	bl	5758 <print_formatted>
		break;
   2141a:	e7db      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2141c:	6923      	ldr	r3, [r4, #16]
   2141e:	9302      	str	r3, [sp, #8]
   21420:	68e3      	ldr	r3, [r4, #12]
   21422:	9301      	str	r3, [sp, #4]
   21424:	68a3      	ldr	r3, [r4, #8]
   21426:	9300      	str	r3, [sp, #0]
   21428:	e9d4 2300 	ldrd	r2, r3, [r4]
   2142c:	4631      	mov	r1, r6
   2142e:	4628      	mov	r0, r5
   21430:	f7e4 f992 	bl	5758 <print_formatted>
		break;
   21434:	e7ce      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21436:	6963      	ldr	r3, [r4, #20]
   21438:	9303      	str	r3, [sp, #12]
   2143a:	6923      	ldr	r3, [r4, #16]
   2143c:	9302      	str	r3, [sp, #8]
   2143e:	68e3      	ldr	r3, [r4, #12]
   21440:	9301      	str	r3, [sp, #4]
   21442:	68a3      	ldr	r3, [r4, #8]
   21444:	9300      	str	r3, [sp, #0]
   21446:	e9d4 2300 	ldrd	r2, r3, [r4]
   2144a:	4631      	mov	r1, r6
   2144c:	4628      	mov	r0, r5
   2144e:	f7e4 f983 	bl	5758 <print_formatted>
		break;
   21452:	e7bf      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21454:	69a3      	ldr	r3, [r4, #24]
   21456:	9304      	str	r3, [sp, #16]
   21458:	6963      	ldr	r3, [r4, #20]
   2145a:	9303      	str	r3, [sp, #12]
   2145c:	6923      	ldr	r3, [r4, #16]
   2145e:	9302      	str	r3, [sp, #8]
   21460:	68e3      	ldr	r3, [r4, #12]
   21462:	9301      	str	r3, [sp, #4]
   21464:	68a3      	ldr	r3, [r4, #8]
   21466:	9300      	str	r3, [sp, #0]
   21468:	e9d4 2300 	ldrd	r2, r3, [r4]
   2146c:	4631      	mov	r1, r6
   2146e:	4628      	mov	r0, r5
   21470:	f7e4 f972 	bl	5758 <print_formatted>
		break;
   21474:	e7ae      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21476:	69e3      	ldr	r3, [r4, #28]
   21478:	9305      	str	r3, [sp, #20]
   2147a:	69a3      	ldr	r3, [r4, #24]
   2147c:	9304      	str	r3, [sp, #16]
   2147e:	6963      	ldr	r3, [r4, #20]
   21480:	9303      	str	r3, [sp, #12]
   21482:	6923      	ldr	r3, [r4, #16]
   21484:	9302      	str	r3, [sp, #8]
   21486:	68e3      	ldr	r3, [r4, #12]
   21488:	9301      	str	r3, [sp, #4]
   2148a:	68a3      	ldr	r3, [r4, #8]
   2148c:	9300      	str	r3, [sp, #0]
   2148e:	e9d4 2300 	ldrd	r2, r3, [r4]
   21492:	4631      	mov	r1, r6
   21494:	4628      	mov	r0, r5
   21496:	f7e4 f95f 	bl	5758 <print_formatted>
		break;
   2149a:	e79b      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2149c:	6a23      	ldr	r3, [r4, #32]
   2149e:	9306      	str	r3, [sp, #24]
   214a0:	69e3      	ldr	r3, [r4, #28]
   214a2:	9305      	str	r3, [sp, #20]
   214a4:	69a3      	ldr	r3, [r4, #24]
   214a6:	9304      	str	r3, [sp, #16]
   214a8:	6963      	ldr	r3, [r4, #20]
   214aa:	9303      	str	r3, [sp, #12]
   214ac:	6923      	ldr	r3, [r4, #16]
   214ae:	9302      	str	r3, [sp, #8]
   214b0:	68e3      	ldr	r3, [r4, #12]
   214b2:	9301      	str	r3, [sp, #4]
   214b4:	68a3      	ldr	r3, [r4, #8]
   214b6:	9300      	str	r3, [sp, #0]
   214b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   214bc:	4631      	mov	r1, r6
   214be:	4628      	mov	r0, r5
   214c0:	f7e4 f94a 	bl	5758 <print_formatted>
		break;
   214c4:	e786      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   214c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   214c8:	9307      	str	r3, [sp, #28]
   214ca:	6a23      	ldr	r3, [r4, #32]
   214cc:	9306      	str	r3, [sp, #24]
   214ce:	69e3      	ldr	r3, [r4, #28]
   214d0:	9305      	str	r3, [sp, #20]
   214d2:	69a3      	ldr	r3, [r4, #24]
   214d4:	9304      	str	r3, [sp, #16]
   214d6:	6963      	ldr	r3, [r4, #20]
   214d8:	9303      	str	r3, [sp, #12]
   214da:	6923      	ldr	r3, [r4, #16]
   214dc:	9302      	str	r3, [sp, #8]
   214de:	68e3      	ldr	r3, [r4, #12]
   214e0:	9301      	str	r3, [sp, #4]
   214e2:	68a3      	ldr	r3, [r4, #8]
   214e4:	9300      	str	r3, [sp, #0]
   214e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   214ea:	4631      	mov	r1, r6
   214ec:	4628      	mov	r0, r5
   214ee:	f7e4 f933 	bl	5758 <print_formatted>
		break;
   214f2:	e76f      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   214f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   214f6:	9308      	str	r3, [sp, #32]
   214f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   214fa:	9307      	str	r3, [sp, #28]
   214fc:	6a23      	ldr	r3, [r4, #32]
   214fe:	9306      	str	r3, [sp, #24]
   21500:	69e3      	ldr	r3, [r4, #28]
   21502:	9305      	str	r3, [sp, #20]
   21504:	69a3      	ldr	r3, [r4, #24]
   21506:	9304      	str	r3, [sp, #16]
   21508:	6963      	ldr	r3, [r4, #20]
   2150a:	9303      	str	r3, [sp, #12]
   2150c:	6923      	ldr	r3, [r4, #16]
   2150e:	9302      	str	r3, [sp, #8]
   21510:	68e3      	ldr	r3, [r4, #12]
   21512:	9301      	str	r3, [sp, #4]
   21514:	68a3      	ldr	r3, [r4, #8]
   21516:	9300      	str	r3, [sp, #0]
   21518:	e9d4 2300 	ldrd	r2, r3, [r4]
   2151c:	4631      	mov	r1, r6
   2151e:	4628      	mov	r0, r5
   21520:	f7e4 f91a 	bl	5758 <print_formatted>
		break;
   21524:	e756      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21526:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21528:	9309      	str	r3, [sp, #36]	; 0x24
   2152a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2152c:	9308      	str	r3, [sp, #32]
   2152e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21530:	9307      	str	r3, [sp, #28]
   21532:	6a23      	ldr	r3, [r4, #32]
   21534:	9306      	str	r3, [sp, #24]
   21536:	69e3      	ldr	r3, [r4, #28]
   21538:	9305      	str	r3, [sp, #20]
   2153a:	69a3      	ldr	r3, [r4, #24]
   2153c:	9304      	str	r3, [sp, #16]
   2153e:	6963      	ldr	r3, [r4, #20]
   21540:	9303      	str	r3, [sp, #12]
   21542:	6923      	ldr	r3, [r4, #16]
   21544:	9302      	str	r3, [sp, #8]
   21546:	68e3      	ldr	r3, [r4, #12]
   21548:	9301      	str	r3, [sp, #4]
   2154a:	68a3      	ldr	r3, [r4, #8]
   2154c:	9300      	str	r3, [sp, #0]
   2154e:	e9d4 2300 	ldrd	r2, r3, [r4]
   21552:	4631      	mov	r1, r6
   21554:	4628      	mov	r0, r5
   21556:	f7e4 f8ff 	bl	5758 <print_formatted>
		break;
   2155a:	e73b      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2155c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2155e:	930a      	str	r3, [sp, #40]	; 0x28
   21560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21562:	9309      	str	r3, [sp, #36]	; 0x24
   21564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21566:	9308      	str	r3, [sp, #32]
   21568:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2156a:	9307      	str	r3, [sp, #28]
   2156c:	6a23      	ldr	r3, [r4, #32]
   2156e:	9306      	str	r3, [sp, #24]
   21570:	69e3      	ldr	r3, [r4, #28]
   21572:	9305      	str	r3, [sp, #20]
   21574:	69a3      	ldr	r3, [r4, #24]
   21576:	9304      	str	r3, [sp, #16]
   21578:	6963      	ldr	r3, [r4, #20]
   2157a:	9303      	str	r3, [sp, #12]
   2157c:	6923      	ldr	r3, [r4, #16]
   2157e:	9302      	str	r3, [sp, #8]
   21580:	68e3      	ldr	r3, [r4, #12]
   21582:	9301      	str	r3, [sp, #4]
   21584:	68a3      	ldr	r3, [r4, #8]
   21586:	9300      	str	r3, [sp, #0]
   21588:	e9d4 2300 	ldrd	r2, r3, [r4]
   2158c:	4631      	mov	r1, r6
   2158e:	4628      	mov	r0, r5
   21590:	f7e4 f8e2 	bl	5758 <print_formatted>
		break;
   21594:	e71e      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21596:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21598:	930b      	str	r3, [sp, #44]	; 0x2c
   2159a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2159c:	930a      	str	r3, [sp, #40]	; 0x28
   2159e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   215a0:	9309      	str	r3, [sp, #36]	; 0x24
   215a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   215a4:	9308      	str	r3, [sp, #32]
   215a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   215a8:	9307      	str	r3, [sp, #28]
   215aa:	6a23      	ldr	r3, [r4, #32]
   215ac:	9306      	str	r3, [sp, #24]
   215ae:	69e3      	ldr	r3, [r4, #28]
   215b0:	9305      	str	r3, [sp, #20]
   215b2:	69a3      	ldr	r3, [r4, #24]
   215b4:	9304      	str	r3, [sp, #16]
   215b6:	6963      	ldr	r3, [r4, #20]
   215b8:	9303      	str	r3, [sp, #12]
   215ba:	6923      	ldr	r3, [r4, #16]
   215bc:	9302      	str	r3, [sp, #8]
   215be:	68e3      	ldr	r3, [r4, #12]
   215c0:	9301      	str	r3, [sp, #4]
   215c2:	68a3      	ldr	r3, [r4, #8]
   215c4:	9300      	str	r3, [sp, #0]
   215c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   215ca:	4631      	mov	r1, r6
   215cc:	4628      	mov	r0, r5
   215ce:	f7e4 f8c3 	bl	5758 <print_formatted>
		break;
   215d2:	e6ff      	b.n	213d4 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   215d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   215d6:	930c      	str	r3, [sp, #48]	; 0x30
   215d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   215da:	930b      	str	r3, [sp, #44]	; 0x2c
   215dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   215de:	930a      	str	r3, [sp, #40]	; 0x28
   215e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   215e2:	9309      	str	r3, [sp, #36]	; 0x24
   215e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   215e6:	9308      	str	r3, [sp, #32]
   215e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   215ea:	9307      	str	r3, [sp, #28]
   215ec:	6a23      	ldr	r3, [r4, #32]
   215ee:	9306      	str	r3, [sp, #24]
   215f0:	69e3      	ldr	r3, [r4, #28]
   215f2:	9305      	str	r3, [sp, #20]
   215f4:	69a3      	ldr	r3, [r4, #24]
   215f6:	9304      	str	r3, [sp, #16]
   215f8:	6963      	ldr	r3, [r4, #20]
   215fa:	9303      	str	r3, [sp, #12]
   215fc:	6923      	ldr	r3, [r4, #16]
   215fe:	9302      	str	r3, [sp, #8]
   21600:	68e3      	ldr	r3, [r4, #12]
   21602:	9301      	str	r3, [sp, #4]
   21604:	68a3      	ldr	r3, [r4, #8]
   21606:	9300      	str	r3, [sp, #0]
   21608:	e9d4 2300 	ldrd	r2, r3, [r4]
   2160c:	4631      	mov	r1, r6
   2160e:	4628      	mov	r0, r5
   21610:	f7e4 f8a2 	bl	5758 <print_formatted>
}
   21614:	e6de      	b.n	213d4 <std_print+0x78>

00021616 <log_output_flush>:
		     log_output->control_block->offset,
   21616:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   21618:	6881      	ldr	r1, [r0, #8]
{
   2161a:	b510      	push	{r4, lr}
   2161c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   2161e:	e9d2 2300 	ldrd	r2, r3, [r2]
   21622:	6800      	ldr	r0, [r0, #0]
   21624:	f7ff fe8d 	bl	21342 <buffer_write>
	log_output->control_block->offset = 0;
   21628:	6863      	ldr	r3, [r4, #4]
   2162a:	2200      	movs	r2, #0
   2162c:	601a      	str	r2, [r3, #0]
}
   2162e:	bd10      	pop	{r4, pc}

00021630 <out_func>:
{
   21630:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   21632:	684b      	ldr	r3, [r1, #4]
   21634:	681a      	ldr	r2, [r3, #0]
   21636:	68cb      	ldr	r3, [r1, #12]
   21638:	429a      	cmp	r2, r3
{
   2163a:	4605      	mov	r5, r0
   2163c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2163e:	d102      	bne.n	21646 <out_func+0x16>
		log_output_flush(out_ctx);
   21640:	4608      	mov	r0, r1
   21642:	f7ff ffe8 	bl	21616 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21646:	6863      	ldr	r3, [r4, #4]
   21648:	f3bf 8f5b 	dmb	ish
   2164c:	e853 2f00 	ldrex	r2, [r3]
   21650:	1c51      	adds	r1, r2, #1
   21652:	e843 1000 	strex	r0, r1, [r3]
   21656:	2800      	cmp	r0, #0
   21658:	d1f8      	bne.n	2164c <out_func+0x1c>
   2165a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2165e:	68a3      	ldr	r3, [r4, #8]
   21660:	549d      	strb	r5, [r3, r2]
}
   21662:	2000      	movs	r0, #0
   21664:	bd38      	pop	{r3, r4, r5, pc}

00021666 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   21666:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2166a:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2166e:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   21670:	4640      	mov	r0, r8
{
   21672:	461f      	mov	r7, r3
   21674:	460c      	mov	r4, r1
   21676:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   21678:	f7df f9f2 	bl	a60 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2167c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   21680:	9300      	str	r3, [sp, #0]
   21682:	b280      	uxth	r0, r0
   21684:	e9cd 8001 	strd	r8, r0, [sp, #4]
   21688:	463b      	mov	r3, r7
   2168a:	4632      	mov	r2, r6
   2168c:	4621      	mov	r1, r4
   2168e:	4628      	mov	r0, r5
   21690:	f002 fdd9 	bl	24246 <bt_gatt_attr_read>
}
   21694:	b004      	add	sp, #16
   21696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002169a <bas_init>:
}
   2169a:	2000      	movs	r0, #0
   2169c:	4770      	bx	lr

0002169e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2169e:	68c3      	ldr	r3, [r0, #12]
   216a0:	b2c9      	uxtb	r1, r1
   216a2:	220c      	movs	r2, #12
   216a4:	fb01 3302 	mla	r3, r1, r2, r3
   216a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   216aa:	f000 0007 	and.w	r0, r0, #7
   216ae:	4770      	bx	lr

000216b0 <set_on_state>:
	__asm__ volatile(
   216b0:	f04f 0320 	mov.w	r3, #32
   216b4:	f3ef 8211 	mrs	r2, BASEPRI
   216b8:	f383 8811 	msr	BASEPRI, r3
   216bc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   216c0:	6803      	ldr	r3, [r0, #0]
   216c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   216c6:	f043 0302 	orr.w	r3, r3, #2
   216ca:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   216cc:	f382 8811 	msr	BASEPRI, r2
   216d0:	f3bf 8f6f 	isb	sy
}
   216d4:	4770      	bx	lr

000216d6 <stop>:
{
   216d6:	4603      	mov	r3, r0
   216d8:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   216da:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
   216dc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   216de:	f04f 0420 	mov.w	r4, #32
   216e2:	f3ef 8611 	mrs	r6, BASEPRI
   216e6:	f384 8811 	msr	BASEPRI, r4
   216ea:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   216ee:	250c      	movs	r5, #12
   216f0:	fb05 0401 	mla	r4, r5, r1, r0
   216f4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   216f6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   216fa:	d001      	beq.n	21700 <stop+0x2a>
   216fc:	42a2      	cmp	r2, r4
   216fe:	d111      	bne.n	21724 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   21700:	fb05 0001 	mla	r0, r5, r1, r0
   21704:	2201      	movs	r2, #1
   21706:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   21708:	2000      	movs	r0, #0
	__asm__ volatile(
   2170a:	f386 8811 	msr	BASEPRI, r6
   2170e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   21712:	b930      	cbnz	r0, 21722 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   21714:	685b      	ldr	r3, [r3, #4]
   21716:	220c      	movs	r2, #12
   21718:	fb02 3101 	mla	r1, r2, r1, r3
   2171c:	684b      	ldr	r3, [r1, #4]
   2171e:	4798      	blx	r3
	return 0;
   21720:	2000      	movs	r0, #0
}
   21722:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   21724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21728:	e7ef      	b.n	2170a <stop+0x34>

0002172a <api_stop>:
	return stop(dev, subsys, CTX_API);
   2172a:	2280      	movs	r2, #128	; 0x80
   2172c:	f7ff bfd3 	b.w	216d6 <stop>

00021730 <async_start>:
{
   21730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21732:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   21734:	68c4      	ldr	r4, [r0, #12]
{
   21736:	4605      	mov	r5, r0
	__asm__ volatile(
   21738:	f04f 0020 	mov.w	r0, #32
   2173c:	f3ef 8711 	mrs	r7, BASEPRI
   21740:	f380 8811 	msr	BASEPRI, r0
   21744:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   21748:	260c      	movs	r6, #12
   2174a:	fb06 4601 	mla	r6, r6, r1, r4
   2174e:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   21750:	f000 0c07 	and.w	ip, r0, #7
   21754:	f1bc 0f01 	cmp.w	ip, #1
   21758:	d112      	bne.n	21780 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2175a:	6433      	str	r3, [r6, #64]	; 0x40
	int err = 0;
   2175c:	2600      	movs	r6, #0
	__asm__ volatile(
   2175e:	f387 8811 	msr	BASEPRI, r7
   21762:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   21766:	b94e      	cbnz	r6, 2177c <async_start+0x4c>
	subdata->cb = data->cb;
   21768:	230c      	movs	r3, #12
   2176a:	4359      	muls	r1, r3
   2176c:	440c      	add	r4, r1
   2176e:	6853      	ldr	r3, [r2, #4]
   21770:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
   21772:	6893      	ldr	r3, [r2, #8]
   21774:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   21776:	686b      	ldr	r3, [r5, #4]
   21778:	585b      	ldr	r3, [r3, r1]
   2177a:	4798      	blx	r3
}
   2177c:	4630      	mov	r0, r6
   2177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   21780:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EBUSY;
   21784:	4283      	cmp	r3, r0
   21786:	bf14      	ite	ne
   21788:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   2178c:	f06f 060f 	mvneq.w	r6, #15
   21790:	e7e5      	b.n	2175e <async_start+0x2e>

00021792 <api_start>:
	return async_start(dev, subsys, data, CTX_API);
   21792:	2380      	movs	r3, #128	; 0x80
   21794:	f7ff bfcc 	b.w	21730 <async_start>

00021798 <onoff_started_callback>:
	return &data->mgr[type];
   21798:	68c0      	ldr	r0, [r0, #12]
{
   2179a:	b410      	push	{r4}
	return &data->mgr[type];
   2179c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2179e:	241c      	movs	r4, #28
   217a0:	fb03 0004 	mla	r0, r3, r4, r0
   217a4:	2100      	movs	r1, #0
}
   217a6:	bc10      	pop	{r4}
	notify(mgr, 0);
   217a8:	4710      	bx	r2

000217aa <blocking_start_callback>:
{
   217aa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   217ac:	f7fd be98 	b.w	1f4e0 <z_impl_k_sem_give>

000217b0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   217b0:	2000      	movs	r0, #0
   217b2:	f7fc bfa5 	b.w	1e700 <nrfx_clock_stop>

000217b6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   217b6:	2000      	movs	r0, #0
   217b8:	f004 b841 	b.w	2583e <nrfx_clock_start>

000217bc <lfclk_spinwait>:
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   217bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   217c0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   217c4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   217c8:	03c9      	lsls	r1, r1, #15
   217ca:	d5f9      	bpl.n	217c0 <lfclk_spinwait+0x4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   217cc:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type) && (type == t))) {
   217d0:	4298      	cmp	r0, r3
   217d2:	d1f5      	bne.n	217c0 <lfclk_spinwait+0x4>
}
   217d4:	4770      	bx	lr

000217d6 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   217d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   217d8:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   217dc:	2908      	cmp	r1, #8
   217de:	6e66      	ldr	r6, [r4, #100]	; 0x64
   217e0:	6e65      	ldr	r5, [r4, #100]	; 0x64
   217e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   217e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   217e6:	ea4f 2515 	mov.w	r5, r5, lsr #8
   217ea:	ea4f 6303 	mov.w	r3, r3, lsl #24
   217ee:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   217f2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   217f6:	ea4f 2202 	mov.w	r2, r2, lsl #8
   217fa:	ea43 0305 	orr.w	r3, r3, r5
   217fe:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   21802:	ea43 0302 	orr.w	r3, r3, r2
   21806:	9300      	str	r3, [sp, #0]
   21808:	6e26      	ldr	r6, [r4, #96]	; 0x60
   2180a:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2180c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2180e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   21810:	ea4f 2415 	mov.w	r4, r5, lsr #8
   21814:	ea4f 6303 	mov.w	r3, r3, lsl #24
   21818:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   2181c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   21820:	ea43 0304 	orr.w	r3, r3, r4
   21824:	ea4f 2402 	mov.w	r4, r2, lsl #8
   21828:	bf28      	it	cs
   2182a:	2108      	movcs	r1, #8
   2182c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   21830:	4323      	orrs	r3, r4
   21832:	460a      	mov	r2, r1
   21834:	460c      	mov	r4, r1
   21836:	4669      	mov	r1, sp
   21838:	9301      	str	r3, [sp, #4]
   2183a:	f004 fd2c 	bl	26296 <memcpy>
	}

	memcpy(buffer, dev_id.id, length);

	return length;
}
   2183e:	4620      	mov	r0, r4
   21840:	b002      	add	sp, #8
   21842:	bd70      	pop	{r4, r5, r6, pc}

00021844 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   21844:	4770      	bx	lr

00021846 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   21846:	4770      	bx	lr

00021848 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   21848:	f7e4 bd54 	b.w	62f4 <_DoInit>

0002184c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2184c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2184e:	f7ff fffb 	bl	21848 <SEGGER_RTT_Init>

	return 0;
}
   21852:	2000      	movs	r0, #0
   21854:	bd08      	pop	{r3, pc}

00021856 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   21856:	b538      	push	{r3, r4, r5, lr}
   21858:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2185a:	42ab      	cmp	r3, r5
{
   2185c:	4611      	mov	r1, r2
   2185e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   21860:	d804      	bhi.n	2186c <_copy+0x16>
   21862:	461a      	mov	r2, r3
   21864:	f004 fd17 	bl	26296 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   21868:	4620      	mov	r0, r4
   2186a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2186c:	2400      	movs	r4, #0
   2186e:	e7fb      	b.n	21868 <_copy+0x12>

00021870 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   21870:	f004 bd1f 	b.w	262b2 <memset>

00021874 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   21874:	09c3      	lsrs	r3, r0, #7
   21876:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2187a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2187e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   21882:	b2c0      	uxtb	r0, r0
   21884:	4770      	bx	lr

00021886 <_set_secure.constprop.0>:
 * @param len IN -- number of times the value will be copied
 */
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
   21886:	b510      	push	{r4, lr}
   21888:	460a      	mov	r2, r1
   2188a:	2100      	movs	r1, #0
   2188c:	4604      	mov	r4, r0
   2188e:	f004 fd10 	bl	262b2 <memset>
{
  (void) memset(to, val, len);
#ifdef __GNUC__
  __asm__ __volatile__("" :: "g"(to) : "memory");
#endif /* __GNUC__ */
}
   21892:	bd10      	pop	{r4, pc}

00021894 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   21894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21898:	4605      	mov	r5, r0
   2189a:	b0a8      	sub	sp, #160	; 0xa0
   2189c:	460f      	mov	r7, r1
   2189e:	4614      	mov	r4, r2
   218a0:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   218a2:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   218a6:	f7e4 fdab 	bl	6400 <uECC_get_rng>
		if (!rng_function ||
   218aa:	4603      	mov	r3, r0
   218ac:	2800      	cmp	r0, #0
   218ae:	d03c      	beq.n	2192a <uECC_make_key+0x96>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   218b0:	2140      	movs	r1, #64	; 0x40
   218b2:	a808      	add	r0, sp, #32
   218b4:	4798      	blx	r3
		if (!rng_function ||
   218b6:	b3c0      	cbz	r0, 2192a <uECC_make_key+0x96>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   218b8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   218bc:	f112 031f 	adds.w	r3, r2, #31
   218c0:	bf48      	it	mi
   218c2:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   218c6:	a908      	add	r1, sp, #32
   218c8:	4642      	mov	r2, r8
   218ca:	4668      	mov	r0, sp
   218cc:	f343 1347 	sbfx	r3, r3, #5, #8
   218d0:	f000 f9f6 	bl	21cc0 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   218d4:	4622      	mov	r2, r4
   218d6:	4669      	mov	r1, sp
   218d8:	a818      	add	r0, sp, #96	; 0x60
   218da:	f000 fe0b 	bl	224f4 <EccPoint_compute_public_key>
   218de:	b310      	cbz	r0, 21926 <uECC_make_key+0x92>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   218e0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   218e4:	1dd9      	adds	r1, r3, #7
   218e6:	bf48      	it	mi
   218e8:	f103 010e 	addmi.w	r1, r3, #14
   218ec:	466a      	mov	r2, sp
   218ee:	10c9      	asrs	r1, r1, #3
   218f0:	4638      	mov	r0, r7
   218f2:	f000 fe27 	bl	22544 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   218f6:	f994 1001 	ldrsb.w	r1, [r4, #1]
   218fa:	aa18      	add	r2, sp, #96	; 0x60
   218fc:	4628      	mov	r0, r5
   218fe:	f000 fe21 	bl	22544 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   21902:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   21906:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2190a:	ab18      	add	r3, sp, #96	; 0x60
   2190c:	1868      	adds	r0, r5, r1
   2190e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   21912:	f000 fe17 	bl	22544 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);
   21916:	4668      	mov	r0, sp
   21918:	2120      	movs	r1, #32
   2191a:	f7ff ffb4 	bl	21886 <_set_secure.constprop.0>

      			return 1;
   2191e:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   21920:	b028      	add	sp, #160	; 0xa0
   21922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   21926:	3e01      	subs	r6, #1
   21928:	d1bd      	bne.n	218a6 <uECC_make_key+0x12>
        		return 0;
   2192a:	2000      	movs	r0, #0
   2192c:	e7f8      	b.n	21920 <uECC_make_key+0x8c>

0002192e <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2192e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21932:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   21934:	f993 6001 	ldrsb.w	r6, [r3, #1]
	wordcount_t num_words = curve->num_words;
   21938:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   2193c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   21940:	b0a4      	sub	sp, #144	; 0x90
   21942:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   21944:	1dda      	adds	r2, r3, #7
   21946:	bf48      	it	mi
   21948:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   2194c:	ad04      	add	r5, sp, #16
{
   2194e:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   21950:	af0c      	add	r7, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   21952:	4628      	mov	r0, r5
   21954:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   21956:	9502      	str	r5, [sp, #8]
   21958:	9703      	str	r7, [sp, #12]
	uECC_vli_bytesToNative(_private,
   2195a:	f000 fe07 	bl	2256c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   2195e:	4632      	mov	r2, r6
   21960:	4649      	mov	r1, r9
   21962:	a814      	add	r0, sp, #80	; 0x50
   21964:	f000 fe02 	bl	2256c <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   21968:	ab14      	add	r3, sp, #80	; 0x50
   2196a:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2196e:	4632      	mov	r2, r6
   21970:	eb09 0106 	add.w	r1, r9, r6
   21974:	f000 fdfa 	bl	2256c <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   21978:	4623      	mov	r3, r4
   2197a:	463a      	mov	r2, r7
   2197c:	4629      	mov	r1, r5
   2197e:	4628      	mov	r0, r5
   21980:	f000 fd8c 	bl	2249c <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   21984:	fab0 f380 	clz	r3, r0
   21988:	9401      	str	r4, [sp, #4]
   2198a:	aa24      	add	r2, sp, #144	; 0x90
   2198c:	095b      	lsrs	r3, r3, #5
   2198e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   21992:	8863      	ldrh	r3, [r4, #2]
   21994:	3301      	adds	r3, #1
   21996:	b21b      	sxth	r3, r3
   21998:	9300      	str	r3, [sp, #0]
   2199a:	f851 2c88 	ldr.w	r2, [r1, #-136]
   2199e:	a914      	add	r1, sp, #80	; 0x50
   219a0:	2300      	movs	r3, #0
   219a2:	4608      	mov	r0, r1
   219a4:	f000 fcad 	bl	22302 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   219a8:	aa14      	add	r2, sp, #80	; 0x50
   219aa:	4631      	mov	r1, r6
   219ac:	4640      	mov	r0, r8
   219ae:	f000 fdc9 	bl	22544 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   219b2:	4621      	mov	r1, r4
   219b4:	a814      	add	r0, sp, #80	; 0x50
   219b6:	f000 fc19 	bl	221ec <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	_set_secure(p2, 0, sizeof(p2));
   219ba:	2108      	movs	r1, #8
	r = !EccPoint_isZero(_public, curve);
   219bc:	4604      	mov	r4, r0
	_set_secure(p2, 0, sizeof(p2));
   219be:	eb0d 0001 	add.w	r0, sp, r1
   219c2:	f7ff ff60 	bl	21886 <_set_secure.constprop.0>
	_set_secure(tmp, 0, sizeof(tmp));
   219c6:	4638      	mov	r0, r7
   219c8:	2120      	movs	r1, #32
   219ca:	f7ff ff5c 	bl	21886 <_set_secure.constprop.0>
	_set_secure(_private, 0, sizeof(_private));
   219ce:	4628      	mov	r0, r5
   219d0:	2120      	movs	r1, #32
   219d2:	f7ff ff58 	bl	21886 <_set_secure.constprop.0>

	return r;
}
   219d6:	fab4 f084 	clz	r0, r4
   219da:	0940      	lsrs	r0, r0, #5
   219dc:	b024      	add	sp, #144	; 0x90
   219de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000219e2 <uECC_vli_add>:
{
   219e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   219e4:	2400      	movs	r4, #0
{
   219e6:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   219e8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   219ea:	b265      	sxtb	r5, r4
   219ec:	42ab      	cmp	r3, r5
   219ee:	dc00      	bgt.n	219f2 <uECC_vli_add+0x10>
}
   219f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   219f2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   219f6:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   219fa:	443d      	add	r5, r7
   219fc:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   219fe:	42af      	cmp	r7, r5
   21a00:	f000 0001 	and.w	r0, r0, #1
   21a04:	bf18      	it	ne
   21a06:	2000      	movne	r0, #0
		result[i] = sum;
   21a08:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   21a0c:	bf88      	it	hi
   21a0e:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   21a12:	3401      	adds	r4, #1
   21a14:	e7e9      	b.n	219ea <uECC_vli_add+0x8>

00021a16 <uECC_vli_rshift1>:
	vli += num_words;
   21a16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   21a1a:	2300      	movs	r3, #0
	while (vli-- > end) {
   21a1c:	4288      	cmp	r0, r1
   21a1e:	d300      	bcc.n	21a22 <uECC_vli_rshift1+0xc>
}
   21a20:	4770      	bx	lr
		uECC_word_t temp = *vli;
   21a22:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   21a26:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   21a2a:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   21a2c:	07d3      	lsls	r3, r2, #31
   21a2e:	e7f5      	b.n	21a1c <uECC_vli_rshift1+0x6>

00021a30 <vli_modInv_update>:
	if (!EVEN(uv)) {
   21a30:	6803      	ldr	r3, [r0, #0]
{
   21a32:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   21a34:	f013 0601 	ands.w	r6, r3, #1
{
   21a38:	4605      	mov	r5, r0
   21a3a:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   21a3c:	d005      	beq.n	21a4a <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   21a3e:	4613      	mov	r3, r2
   21a40:	460a      	mov	r2, r1
   21a42:	4601      	mov	r1, r0
   21a44:	f7ff ffcd 	bl	219e2 <uECC_vli_add>
   21a48:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   21a4a:	4621      	mov	r1, r4
   21a4c:	4628      	mov	r0, r5
   21a4e:	f7ff ffe2 	bl	21a16 <uECC_vli_rshift1>
	if (carry) {
   21a52:	b146      	cbz	r6, 21a66 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   21a54:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   21a58:	3a01      	subs	r2, #1
   21a5a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   21a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   21a62:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   21a66:	bd70      	pop	{r4, r5, r6, pc}

00021a68 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   21a68:	f04f 0c00 	mov.w	ip, #0
{
   21a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   21a70:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   21a72:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   21a74:	fa4f f98c 	sxtb.w	r9, ip
   21a78:	454b      	cmp	r3, r9
   21a7a:	dc16      	bgt.n	21aaa <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   21a7c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   21a80:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   21a84:	9600      	str	r6, [sp, #0]
   21a86:	f04f 0800 	mov.w	r8, #0
   21a8a:	9f00      	ldr	r7, [sp, #0]
   21a8c:	fa53 fe88 	uxtab	lr, r3, r8
   21a90:	fa4f fe8e 	sxtb.w	lr, lr
   21a94:	45be      	cmp	lr, r7
   21a96:	fa5f f688 	uxtb.w	r6, r8
   21a9a:	db26      	blt.n	21aea <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   21a9c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   21aa0:	f840 4c04 	str.w	r4, [r0, #-4]
}
   21aa4:	b003      	add	sp, #12
   21aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   21aaa:	f04f 0e00 	mov.w	lr, #0
   21aae:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   21ab2:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   21ab4:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   21ab8:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   21abc:	fba6 6707 	umull	r6, r7, r6, r7
   21ac0:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   21ac2:	f10e 0e01 	add.w	lr, lr, #1
   21ac6:	417d      	adcs	r5, r7
   21ac8:	fa4f f68e 	sxtb.w	r6, lr
   21acc:	f04f 0b00 	mov.w	fp, #0
   21ad0:	bf28      	it	cs
   21ad2:	f04f 0b01 	movcs.w	fp, #1
   21ad6:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   21ad8:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   21ada:	ddeb      	ble.n	21ab4 <uECC_vli_mult+0x4c>
		result[k] = r0;
   21adc:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   21ae0:	462c      	mov	r4, r5
   21ae2:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   21ae6:	4645      	mov	r5, r8
   21ae8:	e7c4      	b.n	21a74 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   21aea:	3601      	adds	r6, #1
   21aec:	fa4f fc86 	sxtb.w	ip, r6
   21af0:	ebae 0a0c 	sub.w	sl, lr, ip
   21af4:	46a9      	mov	r9, r5
   21af6:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   21afa:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   21afe:	2500      	movs	r5, #0
   21b00:	459c      	cmp	ip, r3
   21b02:	db05      	blt.n	21b10 <uECC_vli_mult+0xa8>
		result[k] = r0;
   21b04:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   21b08:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   21b0c:	464c      	mov	r4, r9
   21b0e:	e7bc      	b.n	21a8a <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   21b10:	f856 bb04 	ldr.w	fp, [r6], #4
   21b14:	f85a 7904 	ldr.w	r7, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   21b18:	fbab 7b07 	umull	r7, fp, fp, r7
   21b1c:	f8cd b004 	str.w	fp, [sp, #4]
   21b20:	193c      	adds	r4, r7, r4
   21b22:	9f01      	ldr	r7, [sp, #4]
   21b24:	eb57 0909 	adcs.w	r9, r7, r9
   21b28:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   21b2c:	f10c 0c01 	add.w	ip, ip, #1
   21b30:	bf28      	it	cs
   21b32:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   21b36:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   21b38:	fa4f fc8c 	sxtb.w	ip, ip
   21b3c:	e7e0      	b.n	21b00 <uECC_vli_mult+0x98>

00021b3e <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   21b3e:	2300      	movs	r3, #0
{
   21b40:	b510      	push	{r4, lr}
		 vli[i] = 0;
   21b42:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   21b44:	b25a      	sxtb	r2, r3
   21b46:	4291      	cmp	r1, r2
   21b48:	dc00      	bgt.n	21b4c <uECC_vli_clear+0xe>
}
   21b4a:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   21b4c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   21b50:	3301      	adds	r3, #1
   21b52:	e7f7      	b.n	21b44 <uECC_vli_clear+0x6>

00021b54 <uECC_vli_isZero>:
{
   21b54:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   21b56:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   21b58:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   21b5a:	b25c      	sxtb	r4, r3
   21b5c:	42a1      	cmp	r1, r4
   21b5e:	dc03      	bgt.n	21b68 <uECC_vli_isZero+0x14>
}
   21b60:	fab2 f082 	clz	r0, r2
   21b64:	0940      	lsrs	r0, r0, #5
   21b66:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   21b68:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   21b6c:	3301      	adds	r3, #1
   21b6e:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   21b70:	e7f3      	b.n	21b5a <uECC_vli_isZero+0x6>

00021b72 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21b72:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   21b74:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21b76:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   21b7a:	f001 011f 	and.w	r1, r1, #31
   21b7e:	fa03 f101 	lsl.w	r1, r3, r1
}
   21b82:	4008      	ands	r0, r1
   21b84:	4770      	bx	lr

00021b86 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   21b86:	3901      	subs	r1, #1
   21b88:	b24b      	sxtb	r3, r1
{
   21b8a:	4602      	mov	r2, r0
   21b8c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   21b90:	2b00      	cmp	r3, #0
   21b92:	da03      	bge.n	21b9c <uECC_vli_numBits+0x16>
	return (i + 1);
   21b94:	3301      	adds	r3, #1
   21b96:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   21b98:	b938      	cbnz	r0, 21baa <uECC_vli_numBits+0x24>
   21b9a:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   21b9c:	f851 0904 	ldr.w	r0, [r1], #-4
   21ba0:	2800      	cmp	r0, #0
   21ba2:	d1f7      	bne.n	21b94 <uECC_vli_numBits+0xe>
   21ba4:	3b01      	subs	r3, #1
   21ba6:	b25b      	sxtb	r3, r3
   21ba8:	e7f2      	b.n	21b90 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   21baa:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   21bae:	3b01      	subs	r3, #1
   21bb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   21bb4:	2300      	movs	r3, #0
   21bb6:	b922      	cbnz	r2, 21bc2 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   21bb8:	3801      	subs	r0, #1
   21bba:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   21bbe:	b200      	sxth	r0, r0
}
   21bc0:	4770      	bx	lr
		digit >>= 1;
   21bc2:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   21bc4:	3301      	adds	r3, #1
   21bc6:	e7f6      	b.n	21bb6 <uECC_vli_numBits+0x30>

00021bc8 <uECC_vli_set>:
{
   21bc8:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   21bca:	2300      	movs	r3, #0
   21bcc:	b25c      	sxtb	r4, r3
   21bce:	42a2      	cmp	r2, r4
   21bd0:	dc00      	bgt.n	21bd4 <uECC_vli_set+0xc>
}
   21bd2:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   21bd4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   21bd8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   21bdc:	3301      	adds	r3, #1
   21bde:	e7f5      	b.n	21bcc <uECC_vli_set+0x4>

00021be0 <uECC_vli_cmp_unsafe>:
{
   21be0:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   21be2:	3a01      	subs	r2, #1
   21be4:	b253      	sxtb	r3, r2
   21be6:	009a      	lsls	r2, r3, #2
   21be8:	2b00      	cmp	r3, #0
   21bea:	da01      	bge.n	21bf0 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   21bec:	2000      	movs	r0, #0
}
   21bee:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   21bf0:	5885      	ldr	r5, [r0, r2]
   21bf2:	588c      	ldr	r4, [r1, r2]
   21bf4:	42a5      	cmp	r5, r4
   21bf6:	d805      	bhi.n	21c04 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   21bf8:	f1a2 0204 	sub.w	r2, r2, #4
   21bfc:	d304      	bcc.n	21c08 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   21bfe:	3b01      	subs	r3, #1
   21c00:	b25b      	sxtb	r3, r3
   21c02:	e7f1      	b.n	21be8 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   21c04:	2001      	movs	r0, #1
   21c06:	e7f2      	b.n	21bee <uECC_vli_cmp_unsafe+0xe>
			return -1;
   21c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21c0c:	e7ef      	b.n	21bee <uECC_vli_cmp_unsafe+0xe>

00021c0e <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   21c0e:	3a01      	subs	r2, #1
   21c10:	b253      	sxtb	r3, r2
{
   21c12:	b570      	push	{r4, r5, r6, lr}
   21c14:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   21c16:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   21c18:	2b00      	cmp	r3, #0
   21c1a:	da03      	bge.n	21c24 <uECC_vli_equal+0x16>
}
   21c1c:	1e20      	subs	r0, r4, #0
   21c1e:	bf18      	it	ne
   21c20:	2001      	movne	r0, #1
   21c22:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   21c24:	5885      	ldr	r5, [r0, r2]
   21c26:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   21c28:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   21c2a:	4075      	eors	r5, r6
   21c2c:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   21c2e:	b25b      	sxtb	r3, r3
   21c30:	3a04      	subs	r2, #4
   21c32:	e7f1      	b.n	21c18 <uECC_vli_equal+0xa>

00021c34 <uECC_vli_sub>:
{
   21c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   21c36:	2400      	movs	r4, #0
{
   21c38:	4606      	mov	r6, r0
   21c3a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   21c3c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   21c3e:	b265      	sxtb	r5, r4
   21c40:	4565      	cmp	r5, ip
   21c42:	db00      	blt.n	21c46 <uECC_vli_sub+0x12>
}
   21c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   21c46:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   21c4a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   21c4e:	1a3d      	subs	r5, r7, r0
   21c50:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   21c52:	42af      	cmp	r7, r5
   21c54:	f000 0001 	and.w	r0, r0, #1
   21c58:	bf18      	it	ne
   21c5a:	2000      	movne	r0, #0
		result[i] = diff;
   21c5c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   21c60:	bf38      	it	cc
   21c62:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   21c66:	3401      	adds	r4, #1
   21c68:	e7e9      	b.n	21c3e <uECC_vli_sub+0xa>

00021c6a <uECC_vli_modAdd>:
{
   21c6a:	b570      	push	{r4, r5, r6, lr}
   21c6c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   21c70:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   21c72:	4633      	mov	r3, r6
{
   21c74:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   21c76:	f7ff feb4 	bl	219e2 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   21c7a:	b930      	cbnz	r0, 21c8a <uECC_vli_modAdd+0x20>
   21c7c:	4632      	mov	r2, r6
   21c7e:	4621      	mov	r1, r4
   21c80:	4628      	mov	r0, r5
   21c82:	f7ff ffad 	bl	21be0 <uECC_vli_cmp_unsafe>
   21c86:	2801      	cmp	r0, #1
   21c88:	d007      	beq.n	21c9a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   21c8a:	4633      	mov	r3, r6
   21c8c:	462a      	mov	r2, r5
   21c8e:	4621      	mov	r1, r4
   21c90:	4620      	mov	r0, r4
}
   21c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   21c96:	f7ff bfcd 	b.w	21c34 <uECC_vli_sub>
}
   21c9a:	bd70      	pop	{r4, r5, r6, pc}

00021c9c <uECC_vli_modSub>:
{
   21c9c:	b570      	push	{r4, r5, r6, lr}
   21c9e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   21ca2:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   21ca4:	4633      	mov	r3, r6
{
   21ca6:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   21ca8:	f7ff ffc4 	bl	21c34 <uECC_vli_sub>
	if (l_borrow) {
   21cac:	b138      	cbz	r0, 21cbe <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   21cae:	4633      	mov	r3, r6
   21cb0:	462a      	mov	r2, r5
   21cb2:	4621      	mov	r1, r4
   21cb4:	4620      	mov	r0, r4
}
   21cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   21cba:	f7ff be92 	b.w	219e2 <uECC_vli_add>
}
   21cbe:	bd70      	pop	{r4, r5, r6, pc}

00021cc0 <uECC_vli_mmod>:
{
   21cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cc4:	b0a5      	sub	sp, #148	; 0x94
   21cc6:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   21cc8:	ab14      	add	r3, sp, #80	; 0x50
   21cca:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   21cce:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   21cd0:	4629      	mov	r1, r5
   21cd2:	4610      	mov	r0, r2
{
   21cd4:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   21cd6:	f7ff ff56 	bl	21b86 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   21cda:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   21cde:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   21ce0:	2c00      	cmp	r4, #0
   21ce2:	4621      	mov	r1, r4
   21ce4:	bfb8      	it	lt
   21ce6:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   21cea:	4263      	negs	r3, r4
   21cec:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   21cf0:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   21cf4:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   21cf8:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   21cfa:	bf58      	it	pl
   21cfc:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   21cfe:	f7ff ff1e 	bl	21b3e <uECC_vli_clear>
	if (bit_shift > 0) {
   21d02:	2e00      	cmp	r6, #0
   21d04:	b208      	sxth	r0, r1
   21d06:	dd2b      	ble.n	21d60 <uECC_vli_mmod+0xa0>
   21d08:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   21d0a:	2200      	movs	r2, #0
   21d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   21d10:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   21d14:	4613      	mov	r3, r2
   21d16:	429d      	cmp	r5, r3
   21d18:	d817      	bhi.n	21d4a <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   21d1a:	006b      	lsls	r3, r5, #1
   21d1c:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21d1e:	ab04      	add	r3, sp, #16
   21d20:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21d24:	1e6f      	subs	r7, r5, #1
   21d26:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21d28:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21d2a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   21d2e:	2c00      	cmp	r4, #0
   21d30:	da54      	bge.n	21ddc <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   21d32:	ab24      	add	r3, sp, #144	; 0x90
   21d34:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   21d38:	462a      	mov	r2, r5
   21d3a:	f856 1c88 	ldr.w	r1, [r6, #-136]
   21d3e:	4640      	mov	r0, r8
   21d40:	f7ff ff42 	bl	21bc8 <uECC_vli_set>
}
   21d44:	b025      	add	sp, #148	; 0x94
   21d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   21d4a:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   21d4e:	fa0c f106 	lsl.w	r1, ip, r6
   21d52:	430a      	orrs	r2, r1
   21d54:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   21d58:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   21d5a:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   21d5e:	e7da      	b.n	21d16 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   21d60:	ab04      	add	r3, sp, #16
   21d62:	462a      	mov	r2, r5
   21d64:	4639      	mov	r1, r7
   21d66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21d6a:	f7ff ff2d 	bl	21bc8 <uECC_vli_set>
   21d6e:	e7d4      	b.n	21d1a <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   21d70:	fa0f fe82 	sxth.w	lr, r2
   21d74:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   21d78:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   21d7c:	ab24      	add	r3, sp, #144	; 0x90
   21d7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   21d82:	3001      	adds	r0, #1
   21d84:	f852 3c80 	ldr.w	r3, [r2, #-128]
   21d88:	440b      	add	r3, r1
   21d8a:	ebbb 0303 	subs.w	r3, fp, r3
   21d8e:	bf34      	ite	cc
   21d90:	2201      	movcc	r2, #1
   21d92:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   21d94:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   21d96:	bf18      	it	ne
   21d98:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   21d9a:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   21d9e:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   21da2:	9b01      	ldr	r3, [sp, #4]
   21da4:	b242      	sxtb	r2, r0
   21da6:	429a      	cmp	r2, r3
   21da8:	dbe2      	blt.n	21d70 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   21daa:	1a73      	subs	r3, r6, r1
   21dac:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   21dae:	4629      	mov	r1, r5
   21db0:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   21db2:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   21db4:	f7ff fe2f 	bl	21a16 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21db8:	ab24      	add	r3, sp, #144	; 0x90
   21dba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21dbe:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   21dc0:	f853 2c80 	ldr.w	r2, [r3, #-128]
   21dc4:	f857 3c80 	ldr.w	r3, [r7, #-128]
   21dc8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   21dcc:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21dd0:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   21dd2:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   21dd4:	f7ff fe1f 	bl	21a16 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   21dd8:	b224      	sxth	r4, r4
   21dda:	e7a8      	b.n	21d2e <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   21ddc:	ab24      	add	r3, sp, #144	; 0x90
   21dde:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   21de0:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   21de4:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   21de6:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   21dea:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   21dee:	e7d8      	b.n	21da2 <uECC_vli_mmod+0xe2>

00021df0 <uECC_vli_modMult_fast>:
{
   21df0:	b530      	push	{r4, r5, lr}
   21df2:	461c      	mov	r4, r3
   21df4:	b091      	sub	sp, #68	; 0x44
   21df6:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   21df8:	f993 3000 	ldrsb.w	r3, [r3]
   21dfc:	4668      	mov	r0, sp
   21dfe:	f7ff fe33 	bl	21a68 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   21e02:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   21e06:	4669      	mov	r1, sp
   21e08:	4628      	mov	r0, r5
   21e0a:	4798      	blx	r3
}
   21e0c:	b011      	add	sp, #68	; 0x44
   21e0e:	bd30      	pop	{r4, r5, pc}

00021e10 <uECC_vli_modSquare_fast>:
{
   21e10:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   21e12:	460a      	mov	r2, r1
   21e14:	f7ff bfec 	b.w	21df0 <uECC_vli_modMult_fast>

00021e18 <double_jacobian_default>:
{
   21e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   21e1c:	f993 6000 	ldrsb.w	r6, [r3]
{
   21e20:	b092      	sub	sp, #72	; 0x48
   21e22:	4604      	mov	r4, r0
   21e24:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   21e26:	4610      	mov	r0, r2
   21e28:	4631      	mov	r1, r6
{
   21e2a:	4615      	mov	r5, r2
   21e2c:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   21e2e:	f7ff fe91 	bl	21b54 <uECC_vli_isZero>
   21e32:	2800      	cmp	r0, #0
   21e34:	f040 8091 	bne.w	21f5a <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   21e38:	463a      	mov	r2, r7
   21e3a:	4649      	mov	r1, r9
   21e3c:	a802      	add	r0, sp, #8
   21e3e:	f7ff ffe7 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   21e42:	463b      	mov	r3, r7
   21e44:	aa02      	add	r2, sp, #8
   21e46:	4621      	mov	r1, r4
   21e48:	a80a      	add	r0, sp, #40	; 0x28
   21e4a:	f7ff ffd1 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   21e4e:	a902      	add	r1, sp, #8
   21e50:	4608      	mov	r0, r1
   21e52:	463a      	mov	r2, r7
   21e54:	f7ff ffdc 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   21e58:	463b      	mov	r3, r7
   21e5a:	462a      	mov	r2, r5
   21e5c:	4649      	mov	r1, r9
   21e5e:	4648      	mov	r0, r9
   21e60:	f7ff ffc6 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   21e64:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   21e68:	463a      	mov	r2, r7
   21e6a:	4629      	mov	r1, r5
   21e6c:	4628      	mov	r0, r5
   21e6e:	f7ff ffcf 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   21e72:	4643      	mov	r3, r8
   21e74:	462a      	mov	r2, r5
   21e76:	4621      	mov	r1, r4
   21e78:	4620      	mov	r0, r4
   21e7a:	9600      	str	r6, [sp, #0]
   21e7c:	f7ff fef5 	bl	21c6a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   21e80:	4643      	mov	r3, r8
   21e82:	462a      	mov	r2, r5
   21e84:	4629      	mov	r1, r5
   21e86:	4628      	mov	r0, r5
   21e88:	9600      	str	r6, [sp, #0]
   21e8a:	f7ff feee 	bl	21c6a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   21e8e:	4643      	mov	r3, r8
   21e90:	462a      	mov	r2, r5
   21e92:	4621      	mov	r1, r4
   21e94:	4628      	mov	r0, r5
   21e96:	9600      	str	r6, [sp, #0]
   21e98:	f7ff ff00 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   21e9c:	463b      	mov	r3, r7
   21e9e:	462a      	mov	r2, r5
   21ea0:	4621      	mov	r1, r4
   21ea2:	4620      	mov	r0, r4
   21ea4:	f7ff ffa4 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   21ea8:	4643      	mov	r3, r8
   21eaa:	4622      	mov	r2, r4
   21eac:	4621      	mov	r1, r4
   21eae:	4628      	mov	r0, r5
   21eb0:	9600      	str	r6, [sp, #0]
   21eb2:	f7ff feda 	bl	21c6a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   21eb6:	4643      	mov	r3, r8
   21eb8:	9600      	str	r6, [sp, #0]
   21eba:	462a      	mov	r2, r5
   21ebc:	4621      	mov	r1, r4
   21ebe:	4620      	mov	r0, r4
   21ec0:	f7ff fed3 	bl	21c6a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21ec4:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   21ec6:	07db      	lsls	r3, r3, #31
   21ec8:	d54a      	bpl.n	21f60 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   21eca:	4633      	mov	r3, r6
   21ecc:	4642      	mov	r2, r8
   21ece:	4621      	mov	r1, r4
   21ed0:	4620      	mov	r0, r4
   21ed2:	f7ff fd86 	bl	219e2 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   21ed6:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   21ed8:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   21eda:	4620      	mov	r0, r4
   21edc:	f7ff fd9b 	bl	21a16 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   21ee0:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   21ee4:	3b01      	subs	r3, #1
   21ee6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   21eea:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   21eee:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   21ef2:	463a      	mov	r2, r7
   21ef4:	4621      	mov	r1, r4
   21ef6:	4628      	mov	r0, r5
   21ef8:	f7ff ff8a 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   21efc:	4643      	mov	r3, r8
   21efe:	aa0a      	add	r2, sp, #40	; 0x28
   21f00:	4629      	mov	r1, r5
   21f02:	4628      	mov	r0, r5
   21f04:	9600      	str	r6, [sp, #0]
   21f06:	f7ff fec9 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   21f0a:	4643      	mov	r3, r8
   21f0c:	aa0a      	add	r2, sp, #40	; 0x28
   21f0e:	4629      	mov	r1, r5
   21f10:	4628      	mov	r0, r5
   21f12:	9600      	str	r6, [sp, #0]
   21f14:	f7ff fec2 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   21f18:	a90a      	add	r1, sp, #40	; 0x28
   21f1a:	4608      	mov	r0, r1
   21f1c:	4643      	mov	r3, r8
   21f1e:	462a      	mov	r2, r5
   21f20:	9600      	str	r6, [sp, #0]
   21f22:	f7ff febb 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   21f26:	463b      	mov	r3, r7
   21f28:	aa0a      	add	r2, sp, #40	; 0x28
   21f2a:	4621      	mov	r1, r4
   21f2c:	4620      	mov	r0, r4
   21f2e:	f7ff ff5f 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   21f32:	aa02      	add	r2, sp, #8
   21f34:	4643      	mov	r3, r8
   21f36:	4610      	mov	r0, r2
   21f38:	4621      	mov	r1, r4
   21f3a:	9600      	str	r6, [sp, #0]
   21f3c:	f7ff feae 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   21f40:	4632      	mov	r2, r6
   21f42:	4629      	mov	r1, r5
   21f44:	4620      	mov	r0, r4
   21f46:	f7ff fe3f 	bl	21bc8 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   21f4a:	4649      	mov	r1, r9
   21f4c:	4628      	mov	r0, r5
   21f4e:	f7ff fe3b 	bl	21bc8 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   21f52:	a902      	add	r1, sp, #8
   21f54:	4648      	mov	r0, r9
   21f56:	f7ff fe37 	bl	21bc8 <uECC_vli_set>
}
   21f5a:	b012      	add	sp, #72	; 0x48
   21f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   21f60:	4631      	mov	r1, r6
   21f62:	4620      	mov	r0, r4
   21f64:	f7ff fd57 	bl	21a16 <uECC_vli_rshift1>
   21f68:	e7c3      	b.n	21ef2 <double_jacobian_default+0xda>

00021f6a <x_side_default>:
{
   21f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f6e:	4615      	mov	r5, r2
   21f70:	b08a      	sub	sp, #40	; 0x28
   21f72:	4604      	mov	r4, r0
   21f74:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   21f76:	221c      	movs	r2, #28
   21f78:	2100      	movs	r1, #0
   21f7a:	a803      	add	r0, sp, #12
   21f7c:	f004 f999 	bl	262b2 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   21f80:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   21f82:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   21f86:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   21f88:	462a      	mov	r2, r5
   21f8a:	4631      	mov	r1, r6
   21f8c:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   21f8e:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   21f90:	f7ff ff3e 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   21f94:	463b      	mov	r3, r7
   21f96:	aa02      	add	r2, sp, #8
   21f98:	4621      	mov	r1, r4
   21f9a:	4620      	mov	r0, r4
   21f9c:	f8cd 8000 	str.w	r8, [sp]
   21fa0:	f7ff fe7c 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   21fa4:	462b      	mov	r3, r5
   21fa6:	4632      	mov	r2, r6
   21fa8:	4621      	mov	r1, r4
   21faa:	4620      	mov	r0, r4
   21fac:	f7ff ff20 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   21fb0:	f8cd 8000 	str.w	r8, [sp]
   21fb4:	463b      	mov	r3, r7
   21fb6:	f105 0284 	add.w	r2, r5, #132	; 0x84
   21fba:	4621      	mov	r1, r4
   21fbc:	4620      	mov	r0, r4
   21fbe:	f7ff fe54 	bl	21c6a <uECC_vli_modAdd>
}
   21fc2:	b00a      	add	sp, #40	; 0x28
   21fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021fc8 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   21fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21fcc:	b09a      	sub	sp, #104	; 0x68
   21fce:	4616      	mov	r6, r2
   21fd0:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   21fd4:	4644      	mov	r4, r8
{
   21fd6:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   21fd8:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   21fdc:	9500      	str	r5, [sp, #0]
{
   21fde:	4607      	mov	r7, r0
   21fe0:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   21fe2:	4623      	mov	r3, r4
   21fe4:	4602      	mov	r2, r0
   21fe6:	4631      	mov	r1, r6
   21fe8:	a802      	add	r0, sp, #8
   21fea:	f7ff fe57 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   21fee:	a902      	add	r1, sp, #8
   21ff0:	4642      	mov	r2, r8
   21ff2:	4608      	mov	r0, r1
   21ff4:	f7ff ff0c 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   21ff8:	4643      	mov	r3, r8
   21ffa:	aa02      	add	r2, sp, #8
   21ffc:	4639      	mov	r1, r7
   21ffe:	4638      	mov	r0, r7
   22000:	f7ff fef6 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   22004:	4643      	mov	r3, r8
   22006:	aa02      	add	r2, sp, #8
   22008:	4631      	mov	r1, r6
   2200a:	4630      	mov	r0, r6
   2200c:	f7ff fef0 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   22010:	4623      	mov	r3, r4
   22012:	4652      	mov	r2, sl
   22014:	4649      	mov	r1, r9
   22016:	a802      	add	r0, sp, #8
   22018:	9500      	str	r5, [sp, #0]
   2201a:	f7ff fe26 	bl	21c6a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2201e:	4623      	mov	r3, r4
   22020:	4652      	mov	r2, sl
   22022:	4649      	mov	r1, r9
   22024:	4648      	mov	r0, r9
   22026:	9500      	str	r5, [sp, #0]
   22028:	f7ff fe38 	bl	21c9c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2202c:	4623      	mov	r3, r4
   2202e:	463a      	mov	r2, r7
   22030:	4631      	mov	r1, r6
   22032:	a80a      	add	r0, sp, #40	; 0x28
   22034:	9500      	str	r5, [sp, #0]
   22036:	f7ff fe31 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2203a:	4643      	mov	r3, r8
   2203c:	aa0a      	add	r2, sp, #40	; 0x28
   2203e:	4651      	mov	r1, sl
   22040:	4650      	mov	r0, sl
   22042:	f7ff fed5 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   22046:	4623      	mov	r3, r4
   22048:	4632      	mov	r2, r6
   2204a:	4639      	mov	r1, r7
   2204c:	a80a      	add	r0, sp, #40	; 0x28
   2204e:	9500      	str	r5, [sp, #0]
   22050:	f7ff fe0b 	bl	21c6a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   22054:	4642      	mov	r2, r8
   22056:	4649      	mov	r1, r9
   22058:	4630      	mov	r0, r6
   2205a:	f7ff fed9 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2205e:	4623      	mov	r3, r4
   22060:	aa0a      	add	r2, sp, #40	; 0x28
   22062:	4631      	mov	r1, r6
   22064:	4630      	mov	r0, r6
   22066:	9500      	str	r5, [sp, #0]
   22068:	f7ff fe18 	bl	21c9c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2206c:	4623      	mov	r3, r4
   2206e:	4632      	mov	r2, r6
   22070:	4639      	mov	r1, r7
   22072:	a812      	add	r0, sp, #72	; 0x48
   22074:	9500      	str	r5, [sp, #0]
   22076:	f7ff fe11 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   2207a:	4643      	mov	r3, r8
   2207c:	aa12      	add	r2, sp, #72	; 0x48
   2207e:	4649      	mov	r1, r9
   22080:	4648      	mov	r0, r9
   22082:	f7ff feb5 	bl	21df0 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   22086:	4623      	mov	r3, r4
   22088:	4652      	mov	r2, sl
   2208a:	4649      	mov	r1, r9
   2208c:	4648      	mov	r0, r9
   2208e:	9500      	str	r5, [sp, #0]
   22090:	f7ff fe04 	bl	21c9c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   22094:	4642      	mov	r2, r8
   22096:	a902      	add	r1, sp, #8
   22098:	a812      	add	r0, sp, #72	; 0x48
   2209a:	f7ff feb9 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2209e:	a912      	add	r1, sp, #72	; 0x48
   220a0:	4623      	mov	r3, r4
   220a2:	aa0a      	add	r2, sp, #40	; 0x28
   220a4:	4608      	mov	r0, r1
   220a6:	9500      	str	r5, [sp, #0]
   220a8:	f7ff fdf8 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   220ac:	4623      	mov	r3, r4
   220ae:	463a      	mov	r2, r7
   220b0:	a912      	add	r1, sp, #72	; 0x48
   220b2:	a80a      	add	r0, sp, #40	; 0x28
   220b4:	9500      	str	r5, [sp, #0]
   220b6:	f7ff fdf1 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   220ba:	a90a      	add	r1, sp, #40	; 0x28
   220bc:	4643      	mov	r3, r8
   220be:	aa02      	add	r2, sp, #8
   220c0:	4608      	mov	r0, r1
   220c2:	f7ff fe95 	bl	21df0 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   220c6:	4623      	mov	r3, r4
   220c8:	4652      	mov	r2, sl
   220ca:	a90a      	add	r1, sp, #40	; 0x28
   220cc:	4650      	mov	r0, sl
   220ce:	9500      	str	r5, [sp, #0]
   220d0:	f7ff fde4 	bl	21c9c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   220d4:	462a      	mov	r2, r5
   220d6:	a912      	add	r1, sp, #72	; 0x48
   220d8:	4638      	mov	r0, r7
   220da:	f7ff fd75 	bl	21bc8 <uECC_vli_set>
}
   220de:	b01a      	add	sp, #104	; 0x68
   220e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000220e4 <uECC_vli_modInv>:
{
   220e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   220e6:	460f      	mov	r7, r1
   220e8:	b0a1      	sub	sp, #132	; 0x84
   220ea:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   220ec:	4619      	mov	r1, r3
   220ee:	4638      	mov	r0, r7
{
   220f0:	4615      	mov	r5, r2
   220f2:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   220f4:	f7ff fd2e 	bl	21b54 <uECC_vli_isZero>
   220f8:	b128      	cbz	r0, 22106 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   220fa:	4630      	mov	r0, r6
}
   220fc:	b021      	add	sp, #132	; 0x84
   220fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   22102:	f7ff bd1c 	b.w	21b3e <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   22106:	4622      	mov	r2, r4
   22108:	4639      	mov	r1, r7
   2210a:	4668      	mov	r0, sp
   2210c:	f7ff fd5c 	bl	21bc8 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   22110:	4629      	mov	r1, r5
   22112:	a808      	add	r0, sp, #32
   22114:	f7ff fd58 	bl	21bc8 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   22118:	a810      	add	r0, sp, #64	; 0x40
   2211a:	4621      	mov	r1, r4
   2211c:	f7ff fd0f 	bl	21b3e <uECC_vli_clear>
	u[0] = 1;
   22120:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   22122:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   22124:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   22126:	f7ff fd0a 	bl	21b3e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2212a:	4622      	mov	r2, r4
   2212c:	a908      	add	r1, sp, #32
   2212e:	4668      	mov	r0, sp
   22130:	f7ff fd56 	bl	21be0 <uECC_vli_cmp_unsafe>
   22134:	b930      	cbnz	r0, 22144 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   22136:	4622      	mov	r2, r4
   22138:	a910      	add	r1, sp, #64	; 0x40
   2213a:	4630      	mov	r0, r6
   2213c:	f7ff fd44 	bl	21bc8 <uECC_vli_set>
}
   22140:	b021      	add	sp, #132	; 0x84
   22142:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   22144:	9b00      	ldr	r3, [sp, #0]
   22146:	07da      	lsls	r2, r3, #31
   22148:	d409      	bmi.n	2215e <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   2214a:	4621      	mov	r1, r4
   2214c:	4668      	mov	r0, sp
   2214e:	f7ff fc62 	bl	21a16 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   22152:	4622      	mov	r2, r4
   22154:	4629      	mov	r1, r5
   22156:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   22158:	f7ff fc6a 	bl	21a30 <vli_modInv_update>
   2215c:	e7e5      	b.n	2212a <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   2215e:	9b08      	ldr	r3, [sp, #32]
   22160:	07db      	lsls	r3, r3, #31
   22162:	d407      	bmi.n	22174 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   22164:	4621      	mov	r1, r4
   22166:	a808      	add	r0, sp, #32
   22168:	f7ff fc55 	bl	21a16 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2216c:	4622      	mov	r2, r4
   2216e:	4629      	mov	r1, r5
   22170:	a818      	add	r0, sp, #96	; 0x60
   22172:	e7f1      	b.n	22158 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   22174:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   22176:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   22178:	dd1c      	ble.n	221b4 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   2217a:	aa08      	add	r2, sp, #32
   2217c:	4669      	mov	r1, sp
   2217e:	4668      	mov	r0, sp
   22180:	f7ff fd58 	bl	21c34 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   22184:	4621      	mov	r1, r4
   22186:	4668      	mov	r0, sp
   22188:	f7ff fc45 	bl	21a16 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2218c:	4622      	mov	r2, r4
   2218e:	a918      	add	r1, sp, #96	; 0x60
   22190:	a810      	add	r0, sp, #64	; 0x40
   22192:	f7ff fd25 	bl	21be0 <uECC_vli_cmp_unsafe>
   22196:	2800      	cmp	r0, #0
   22198:	da05      	bge.n	221a6 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   2219a:	a910      	add	r1, sp, #64	; 0x40
   2219c:	4623      	mov	r3, r4
   2219e:	462a      	mov	r2, r5
   221a0:	4608      	mov	r0, r1
   221a2:	f7ff fc1e 	bl	219e2 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   221a6:	a910      	add	r1, sp, #64	; 0x40
   221a8:	4623      	mov	r3, r4
   221aa:	aa18      	add	r2, sp, #96	; 0x60
   221ac:	4608      	mov	r0, r1
   221ae:	f7ff fd41 	bl	21c34 <uECC_vli_sub>
   221b2:	e7ce      	b.n	22152 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   221b4:	466a      	mov	r2, sp
   221b6:	a808      	add	r0, sp, #32
   221b8:	f7ff fd3c 	bl	21c34 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   221bc:	4621      	mov	r1, r4
   221be:	a808      	add	r0, sp, #32
   221c0:	f7ff fc29 	bl	21a16 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   221c4:	4622      	mov	r2, r4
   221c6:	a910      	add	r1, sp, #64	; 0x40
   221c8:	a818      	add	r0, sp, #96	; 0x60
   221ca:	f7ff fd09 	bl	21be0 <uECC_vli_cmp_unsafe>
   221ce:	2800      	cmp	r0, #0
   221d0:	da05      	bge.n	221de <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   221d2:	a918      	add	r1, sp, #96	; 0x60
   221d4:	4623      	mov	r3, r4
   221d6:	462a      	mov	r2, r5
   221d8:	4608      	mov	r0, r1
   221da:	f7ff fc02 	bl	219e2 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   221de:	a918      	add	r1, sp, #96	; 0x60
   221e0:	4623      	mov	r3, r4
   221e2:	aa10      	add	r2, sp, #64	; 0x40
   221e4:	4608      	mov	r0, r1
   221e6:	f7ff fd25 	bl	21c34 <uECC_vli_sub>
   221ea:	e7bf      	b.n	2216c <uECC_vli_modInv+0x88>

000221ec <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   221ec:	7809      	ldrb	r1, [r1, #0]
   221ee:	0049      	lsls	r1, r1, #1
   221f0:	b249      	sxtb	r1, r1
   221f2:	f7ff bcaf 	b.w	21b54 <uECC_vli_isZero>

000221f6 <apply_z>:
{
   221f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   221f8:	4615      	mov	r5, r2
   221fa:	b089      	sub	sp, #36	; 0x24
   221fc:	461c      	mov	r4, r3
   221fe:	4607      	mov	r7, r0
   22200:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   22202:	461a      	mov	r2, r3
   22204:	4629      	mov	r1, r5
   22206:	4668      	mov	r0, sp
   22208:	f7ff fe02 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2220c:	4623      	mov	r3, r4
   2220e:	466a      	mov	r2, sp
   22210:	4639      	mov	r1, r7
   22212:	4638      	mov	r0, r7
   22214:	f7ff fdec 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   22218:	4623      	mov	r3, r4
   2221a:	462a      	mov	r2, r5
   2221c:	4669      	mov	r1, sp
   2221e:	4668      	mov	r0, sp
   22220:	f7ff fde6 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   22224:	4623      	mov	r3, r4
   22226:	466a      	mov	r2, sp
   22228:	4631      	mov	r1, r6
   2222a:	4630      	mov	r0, r6
   2222c:	f7ff fde0 	bl	21df0 <uECC_vli_modMult_fast>
}
   22230:	b009      	add	sp, #36	; 0x24
   22232:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022234 <XYcZ_add>:
{
   22234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22238:	b08a      	sub	sp, #40	; 0x28
   2223a:	4614      	mov	r4, r2
   2223c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   22240:	4655      	mov	r5, sl
{
   22242:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   22244:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   22248:	9600      	str	r6, [sp, #0]
{
   2224a:	4680      	mov	r8, r0
   2224c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2224e:	462b      	mov	r3, r5
   22250:	4602      	mov	r2, r0
   22252:	4621      	mov	r1, r4
   22254:	a802      	add	r0, sp, #8
   22256:	f7ff fd21 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2225a:	a902      	add	r1, sp, #8
   2225c:	4652      	mov	r2, sl
   2225e:	4608      	mov	r0, r1
   22260:	f7ff fdd6 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   22264:	4653      	mov	r3, sl
   22266:	aa02      	add	r2, sp, #8
   22268:	4641      	mov	r1, r8
   2226a:	4640      	mov	r0, r8
   2226c:	f7ff fdc0 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   22270:	4653      	mov	r3, sl
   22272:	aa02      	add	r2, sp, #8
   22274:	4621      	mov	r1, r4
   22276:	4620      	mov	r0, r4
   22278:	f7ff fdba 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2227c:	462b      	mov	r3, r5
   2227e:	464a      	mov	r2, r9
   22280:	4639      	mov	r1, r7
   22282:	4638      	mov	r0, r7
   22284:	9600      	str	r6, [sp, #0]
   22286:	f7ff fd09 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2228a:	4652      	mov	r2, sl
   2228c:	4639      	mov	r1, r7
   2228e:	a802      	add	r0, sp, #8
   22290:	f7ff fdbe 	bl	21e10 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   22294:	a902      	add	r1, sp, #8
   22296:	462b      	mov	r3, r5
   22298:	4642      	mov	r2, r8
   2229a:	4608      	mov	r0, r1
   2229c:	9600      	str	r6, [sp, #0]
   2229e:	f7ff fcfd 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   222a2:	a902      	add	r1, sp, #8
   222a4:	462b      	mov	r3, r5
   222a6:	4622      	mov	r2, r4
   222a8:	4608      	mov	r0, r1
   222aa:	9600      	str	r6, [sp, #0]
   222ac:	f7ff fcf6 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   222b0:	462b      	mov	r3, r5
   222b2:	4642      	mov	r2, r8
   222b4:	4621      	mov	r1, r4
   222b6:	4620      	mov	r0, r4
   222b8:	9600      	str	r6, [sp, #0]
   222ba:	f7ff fcef 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   222be:	4653      	mov	r3, sl
   222c0:	4622      	mov	r2, r4
   222c2:	4649      	mov	r1, r9
   222c4:	4648      	mov	r0, r9
   222c6:	f7ff fd93 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   222ca:	462b      	mov	r3, r5
   222cc:	aa02      	add	r2, sp, #8
   222ce:	4641      	mov	r1, r8
   222d0:	4620      	mov	r0, r4
   222d2:	9600      	str	r6, [sp, #0]
   222d4:	f7ff fce2 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   222d8:	4653      	mov	r3, sl
   222da:	4622      	mov	r2, r4
   222dc:	4639      	mov	r1, r7
   222de:	4638      	mov	r0, r7
   222e0:	f7ff fd86 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   222e4:	462b      	mov	r3, r5
   222e6:	464a      	mov	r2, r9
   222e8:	4639      	mov	r1, r7
   222ea:	4638      	mov	r0, r7
   222ec:	9600      	str	r6, [sp, #0]
   222ee:	f7ff fcd5 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   222f2:	4632      	mov	r2, r6
   222f4:	a902      	add	r1, sp, #8
   222f6:	4620      	mov	r0, r4
   222f8:	f7ff fc66 	bl	21bc8 <uECC_vli_set>
}
   222fc:	b00a      	add	sp, #40	; 0x28
   222fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022302 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   22302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22306:	b0b1      	sub	sp, #196	; 0xc4
   22308:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2230c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2230e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   22312:	a818      	add	r0, sp, #96	; 0x60
{
   22314:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   22316:	463a      	mov	r2, r7
{
   22318:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   2231a:	f7ff fc55 	bl	21bc8 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2231e:	00bb      	lsls	r3, r7, #2
   22320:	9305      	str	r3, [sp, #20]
   22322:	9b04      	ldr	r3, [sp, #16]
   22324:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   22328:	4619      	mov	r1, r3
   2232a:	a828      	add	r0, sp, #160	; 0xa0
   2232c:	9302      	str	r3, [sp, #8]
   2232e:	f7ff fc4b 	bl	21bc8 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   22332:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   22336:	2d00      	cmp	r5, #0
   22338:	f000 8086 	beq.w	22448 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   2233c:	4632      	mov	r2, r6
   2233e:	4629      	mov	r1, r5
   22340:	a808      	add	r0, sp, #32
   22342:	f7ff fc41 	bl	21bc8 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   22346:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2234a:	4632      	mov	r2, r6
   2234c:	a918      	add	r1, sp, #96	; 0x60
   2234e:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   22350:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   22354:	f7ff fc38 	bl	21bc8 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   22358:	a928      	add	r1, sp, #160	; 0xa0
   2235a:	4648      	mov	r0, r9
   2235c:	f7ff fc34 	bl	21bc8 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   22360:	4623      	mov	r3, r4
   22362:	aa08      	add	r2, sp, #32
   22364:	a818      	add	r0, sp, #96	; 0x60
   22366:	f7ff ff46 	bl	221f6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2236a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2236e:	4623      	mov	r3, r4
   22370:	aa08      	add	r2, sp, #32
   22372:	a928      	add	r1, sp, #160	; 0xa0
   22374:	a818      	add	r0, sp, #96	; 0x60
   22376:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   22378:	4623      	mov	r3, r4
   2237a:	aa08      	add	r2, sp, #32
   2237c:	4649      	mov	r1, r9
   2237e:	4640      	mov	r0, r8
   22380:	f7ff ff39 	bl	221f6 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   22384:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   22388:	3d02      	subs	r5, #2
   2238a:	b22d      	sxth	r5, r5
   2238c:	2d00      	cmp	r5, #0
   2238e:	dc62      	bgt.n	22456 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22390:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   22394:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22396:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2239a:	ab10      	add	r3, sp, #64	; 0x40
   2239c:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   223a0:	43ed      	mvns	r5, r5
   223a2:	ab20      	add	r3, sp, #128	; 0x80
   223a4:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   223a8:	f005 0501 	and.w	r5, r5, #1
   223ac:	ab10      	add	r3, sp, #64	; 0x40
   223ae:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   223b2:	ab20      	add	r3, sp, #128	; 0x80
   223b4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   223b8:	462b      	mov	r3, r5
   223ba:	464a      	mov	r2, r9
   223bc:	4631      	mov	r1, r6
   223be:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   223c0:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   223c4:	f7ff fe00 	bl	21fc8 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   223c8:	4653      	mov	r3, sl
   223ca:	aa10      	add	r2, sp, #64	; 0x40
   223cc:	a918      	add	r1, sp, #96	; 0x60
   223ce:	a808      	add	r0, sp, #32
   223d0:	9700      	str	r7, [sp, #0]
   223d2:	f7ff fc63 	bl	21c9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   223d6:	a908      	add	r1, sp, #32
   223d8:	4623      	mov	r3, r4
   223da:	4632      	mov	r2, r6
   223dc:	4608      	mov	r0, r1
   223de:	f7ff fd07 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   223e2:	a908      	add	r1, sp, #32
   223e4:	9a04      	ldr	r2, [sp, #16]
   223e6:	4623      	mov	r3, r4
   223e8:	4608      	mov	r0, r1
   223ea:	f7ff fd01 	bl	21df0 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   223ee:	a908      	add	r1, sp, #32
   223f0:	463b      	mov	r3, r7
   223f2:	4652      	mov	r2, sl
   223f4:	4608      	mov	r0, r1
   223f6:	f7ff fe75 	bl	220e4 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   223fa:	a908      	add	r1, sp, #32
   223fc:	9a02      	ldr	r2, [sp, #8]
   223fe:	4623      	mov	r3, r4
   22400:	4608      	mov	r0, r1
   22402:	f7ff fcf5 	bl	21df0 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   22406:	a908      	add	r1, sp, #32
   22408:	4623      	mov	r3, r4
   2240a:	4642      	mov	r2, r8
   2240c:	4608      	mov	r0, r1
   2240e:	f7ff fcef 	bl	21df0 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   22412:	4633      	mov	r3, r6
   22414:	4642      	mov	r2, r8
   22416:	4629      	mov	r1, r5
   22418:	4648      	mov	r0, r9
   2241a:	9400      	str	r4, [sp, #0]
   2241c:	f7ff ff0a 	bl	22234 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   22420:	4623      	mov	r3, r4
   22422:	aa08      	add	r2, sp, #32
   22424:	a920      	add	r1, sp, #128	; 0x80
   22426:	a810      	add	r0, sp, #64	; 0x40
   22428:	f7ff fee5 	bl	221f6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2242c:	9803      	ldr	r0, [sp, #12]
   2242e:	463a      	mov	r2, r7
   22430:	a910      	add	r1, sp, #64	; 0x40
   22432:	f7ff fbc9 	bl	21bc8 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   22436:	9803      	ldr	r0, [sp, #12]
   22438:	9b05      	ldr	r3, [sp, #20]
   2243a:	a920      	add	r1, sp, #128	; 0x80
   2243c:	4418      	add	r0, r3
   2243e:	f7ff fbc3 	bl	21bc8 <uECC_vli_set>
}
   22442:	b031      	add	sp, #196	; 0xc4
   22444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   22448:	4631      	mov	r1, r6
   2244a:	a808      	add	r0, sp, #32
   2244c:	f7ff fb77 	bl	21b3e <uECC_vli_clear>
		z[0] = 1;
   22450:	2301      	movs	r3, #1
   22452:	9308      	str	r3, [sp, #32]
   22454:	e777      	b.n	22346 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   22456:	4629      	mov	r1, r5
   22458:	4650      	mov	r0, sl
   2245a:	f7ff fb8a 	bl	21b72 <uECC_vli_testBit>
   2245e:	fab0 f680 	clz	r6, r0
   22462:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   22464:	f1c6 0101 	rsb	r1, r6, #1
   22468:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   2246c:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   22470:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   22474:	4633      	mov	r3, r6
   22476:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   2247a:	465a      	mov	r2, fp
   2247c:	9400      	str	r4, [sp, #0]
   2247e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   22482:	f7ff fda1 	bl	21fc8 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   22486:	9907      	ldr	r1, [sp, #28]
   22488:	9806      	ldr	r0, [sp, #24]
   2248a:	9400      	str	r4, [sp, #0]
   2248c:	460b      	mov	r3, r1
   2248e:	4602      	mov	r2, r0
   22490:	4631      	mov	r1, r6
   22492:	4658      	mov	r0, fp
   22494:	f7ff fece 	bl	22234 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   22498:	3d01      	subs	r5, #1
   2249a:	e776      	b.n	2238a <EccPoint_mult+0x88>

0002249c <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2249c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   224a0:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   224a4:	f119 081f 	adds.w	r8, r9, #31
{
   224a8:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   224aa:	bf48      	it	mi
   224ac:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   224b0:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   224b2:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   224b6:	3524      	adds	r5, #36	; 0x24
   224b8:	4601      	mov	r1, r0
{
   224ba:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   224bc:	4643      	mov	r3, r8
   224be:	462a      	mov	r2, r5
   224c0:	4630      	mov	r0, r6
   224c2:	f7ff fa8e 	bl	219e2 <uECC_vli_add>
   224c6:	4604      	mov	r4, r0
   224c8:	b990      	cbnz	r0, 224f0 <regularize_k+0x54>
   224ca:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   224ce:	da06      	bge.n	224de <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   224d0:	4649      	mov	r1, r9
   224d2:	4630      	mov	r0, r6
   224d4:	f7ff fb4d 	bl	21b72 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   224d8:	1e04      	subs	r4, r0, #0
   224da:	bf18      	it	ne
   224dc:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   224de:	4643      	mov	r3, r8
   224e0:	462a      	mov	r2, r5
   224e2:	4631      	mov	r1, r6
   224e4:	4638      	mov	r0, r7
   224e6:	f7ff fa7c 	bl	219e2 <uECC_vli_add>

	return carry;
}
   224ea:	4620      	mov	r0, r4
   224ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   224f0:	2401      	movs	r4, #1
   224f2:	e7f4      	b.n	224de <regularize_k+0x42>

000224f4 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   224f4:	b530      	push	{r4, r5, lr}
   224f6:	4614      	mov	r4, r2
   224f8:	b095      	sub	sp, #84	; 0x54
   224fa:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   224fc:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   224fe:	4623      	mov	r3, r4
{
   22500:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   22502:	a904      	add	r1, sp, #16
   22504:	9102      	str	r1, [sp, #8]
   22506:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   22508:	f7ff ffc8 	bl	2249c <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2250c:	fab0 f380 	clz	r3, r0
   22510:	095b      	lsrs	r3, r3, #5
   22512:	aa14      	add	r2, sp, #80	; 0x50
   22514:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   22518:	8863      	ldrh	r3, [r4, #2]
   2251a:	9401      	str	r4, [sp, #4]
   2251c:	3301      	adds	r3, #1
   2251e:	b21b      	sxth	r3, r3
   22520:	9300      	str	r3, [sp, #0]
   22522:	f852 2c48 	ldr.w	r2, [r2, #-72]
   22526:	2300      	movs	r3, #0
   22528:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2252c:	4628      	mov	r0, r5
   2252e:	f7ff fee8 	bl	22302 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   22532:	4621      	mov	r1, r4
   22534:	4628      	mov	r0, r5
   22536:	f7ff fe59 	bl	221ec <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2253a:	fab0 f080 	clz	r0, r0
   2253e:	0940      	lsrs	r0, r0, #5
   22540:	b015      	add	sp, #84	; 0x54
   22542:	bd30      	pop	{r4, r5, pc}

00022544 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   22544:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   22546:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   22548:	1e4f      	subs	r7, r1, #1
   2254a:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2254c:	428c      	cmp	r4, r1
   2254e:	f105 0501 	add.w	r5, r5, #1
   22552:	db00      	blt.n	22556 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   22554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   22556:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   22558:	f023 0603 	bic.w	r6, r3, #3
   2255c:	f003 0303 	and.w	r3, r3, #3
   22560:	5996      	ldr	r6, [r2, r6]
   22562:	00db      	lsls	r3, r3, #3
   22564:	fa26 f303 	lsr.w	r3, r6, r3
   22568:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2256a:	e7ee      	b.n	2254a <uECC_vli_nativeToBytes+0x6>

0002256c <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2256e:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   22570:	1cd1      	adds	r1, r2, #3
   22572:	bf48      	it	mi
   22574:	1d91      	addmi	r1, r2, #6
   22576:	f341 0187 	sbfx	r1, r1, #2, #8
{
   2257a:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2257c:	f7ff fadf 	bl	21b3e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   22580:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   22582:	1e67      	subs	r7, r4, #1
   22584:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   22586:	42a2      	cmp	r2, r4
   22588:	f105 0501 	add.w	r5, r5, #1
   2258c:	db00      	blt.n	22590 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2258e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   22590:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   22592:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   22596:	5cb2      	ldrb	r2, [r6, r2]
   22598:	f003 0303 	and.w	r3, r3, #3
   2259c:	00db      	lsls	r3, r3, #3
   2259e:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   225a2:	5842      	ldr	r2, [r0, r1]
   225a4:	431a      	orrs	r2, r3
   225a6:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   225a8:	e7ec      	b.n	22584 <uECC_vli_bytesToNative+0x18>

000225aa <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   225aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   225ac:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   225ae:	f991 6000 	ldrsb.w	r6, [r1]
{
   225b2:	4605      	mov	r5, r0
   225b4:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   225b6:	f7ff fe19 	bl	221ec <EccPoint_isZero>
   225ba:	bb28      	cbnz	r0, 22608 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   225bc:	1d27      	adds	r7, r4, #4
   225be:	4632      	mov	r2, r6
   225c0:	4629      	mov	r1, r5
   225c2:	4638      	mov	r0, r7
   225c4:	f7ff fb0c 	bl	21be0 <uECC_vli_cmp_unsafe>
   225c8:	2801      	cmp	r0, #1
   225ca:	d120      	bne.n	2260e <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   225cc:	4632      	mov	r2, r6
   225ce:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   225d2:	4638      	mov	r0, r7
   225d4:	f7ff fb04 	bl	21be0 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   225d8:	2801      	cmp	r0, #1
   225da:	d118      	bne.n	2260e <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   225dc:	4622      	mov	r2, r4
   225de:	4668      	mov	r0, sp
   225e0:	f7ff fc16 	bl	21e10 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   225e4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   225e8:	4622      	mov	r2, r4
   225ea:	4629      	mov	r1, r5
   225ec:	a808      	add	r0, sp, #32
   225ee:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   225f0:	4632      	mov	r2, r6
   225f2:	a908      	add	r1, sp, #32
   225f4:	4668      	mov	r0, sp
   225f6:	f7ff fb0a 	bl	21c0e <uECC_vli_equal>
		return -3;
   225fa:	2800      	cmp	r0, #0
   225fc:	bf0c      	ite	eq
   225fe:	2000      	moveq	r0, #0
   22600:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   22604:	b011      	add	sp, #68	; 0x44
   22606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   22608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2260c:	e7fa      	b.n	22604 <uECC_valid_point+0x5a>
		return -2;
   2260e:	f06f 0001 	mvn.w	r0, #1
   22612:	e7f7      	b.n	22604 <uECC_valid_point+0x5a>

00022614 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   22614:	b570      	push	{r4, r5, r6, lr}
   22616:	460c      	mov	r4, r1
   22618:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2261a:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2261c:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   22620:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   22622:	4601      	mov	r1, r0
   22624:	4668      	mov	r0, sp
   22626:	f7ff ffa1 	bl	2256c <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2262a:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2262e:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   22632:	18a9      	adds	r1, r5, r2
   22634:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   22638:	f7ff ff98 	bl	2256c <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2263c:	2210      	movs	r2, #16
   2263e:	4631      	mov	r1, r6
   22640:	4668      	mov	r0, sp
   22642:	f7ff facd 	bl	21be0 <uECC_vli_cmp_unsafe>
   22646:	b128      	cbz	r0, 22654 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   22648:	4621      	mov	r1, r4
   2264a:	4668      	mov	r0, sp
   2264c:	f7ff ffad 	bl	225aa <uECC_valid_point>
}
   22650:	b010      	add	sp, #64	; 0x40
   22652:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   22654:	f06f 0003 	mvn.w	r0, #3
   22658:	e7fa      	b.n	22650 <uECC_valid_public_key+0x3c>

0002265a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2265a:	78cb      	ldrb	r3, [r1, #3]
   2265c:	7802      	ldrb	r2, [r0, #0]
   2265e:	4053      	eors	r3, r2
   22660:	7003      	strb	r3, [r0, #0]
   22662:	884b      	ldrh	r3, [r1, #2]
   22664:	7842      	ldrb	r2, [r0, #1]
   22666:	4053      	eors	r3, r2
   22668:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2266a:	680a      	ldr	r2, [r1, #0]
   2266c:	7883      	ldrb	r3, [r0, #2]
   2266e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22672:	7083      	strb	r3, [r0, #2]
   22674:	680a      	ldr	r2, [r1, #0]
   22676:	78c3      	ldrb	r3, [r0, #3]
   22678:	4053      	eors	r3, r2
   2267a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2267c:	79cb      	ldrb	r3, [r1, #7]
   2267e:	7902      	ldrb	r2, [r0, #4]
   22680:	4053      	eors	r3, r2
   22682:	7103      	strb	r3, [r0, #4]
   22684:	88cb      	ldrh	r3, [r1, #6]
   22686:	7942      	ldrb	r2, [r0, #5]
   22688:	4053      	eors	r3, r2
   2268a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2268c:	684a      	ldr	r2, [r1, #4]
   2268e:	7983      	ldrb	r3, [r0, #6]
   22690:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22694:	7183      	strb	r3, [r0, #6]
   22696:	684a      	ldr	r2, [r1, #4]
   22698:	79c3      	ldrb	r3, [r0, #7]
   2269a:	4053      	eors	r3, r2
   2269c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2269e:	7acb      	ldrb	r3, [r1, #11]
   226a0:	7a02      	ldrb	r2, [r0, #8]
   226a2:	4053      	eors	r3, r2
   226a4:	7203      	strb	r3, [r0, #8]
   226a6:	7a42      	ldrb	r2, [r0, #9]
   226a8:	894b      	ldrh	r3, [r1, #10]
   226aa:	4053      	eors	r3, r2
   226ac:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   226ae:	688a      	ldr	r2, [r1, #8]
   226b0:	7a83      	ldrb	r3, [r0, #10]
   226b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   226b6:	7283      	strb	r3, [r0, #10]
   226b8:	688a      	ldr	r2, [r1, #8]
   226ba:	7ac3      	ldrb	r3, [r0, #11]
   226bc:	4053      	eors	r3, r2
   226be:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   226c0:	7bcb      	ldrb	r3, [r1, #15]
   226c2:	7b02      	ldrb	r2, [r0, #12]
   226c4:	4053      	eors	r3, r2
   226c6:	7303      	strb	r3, [r0, #12]
   226c8:	89cb      	ldrh	r3, [r1, #14]
   226ca:	7b42      	ldrb	r2, [r0, #13]
   226cc:	4053      	eors	r3, r2
   226ce:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   226d0:	68ca      	ldr	r2, [r1, #12]
   226d2:	7b83      	ldrb	r3, [r0, #14]
   226d4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   226d8:	7383      	strb	r3, [r0, #14]
   226da:	68ca      	ldr	r2, [r1, #12]
   226dc:	7bc3      	ldrb	r3, [r0, #15]
   226de:	4053      	eors	r3, r2
   226e0:	73c3      	strb	r3, [r0, #15]
}
   226e2:	4770      	bx	lr

000226e4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   226e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   226e6:	7802      	ldrb	r2, [r0, #0]
   226e8:	f88d 2000 	strb.w	r2, [sp]
   226ec:	7942      	ldrb	r2, [r0, #5]
   226ee:	f88d 2001 	strb.w	r2, [sp, #1]
   226f2:	7a82      	ldrb	r2, [r0, #10]
   226f4:	f88d 2002 	strb.w	r2, [sp, #2]
   226f8:	7bc2      	ldrb	r2, [r0, #15]
   226fa:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   226fe:	7902      	ldrb	r2, [r0, #4]
   22700:	f88d 2004 	strb.w	r2, [sp, #4]
   22704:	7a42      	ldrb	r2, [r0, #9]
   22706:	f88d 2005 	strb.w	r2, [sp, #5]
   2270a:	7b82      	ldrb	r2, [r0, #14]
   2270c:	f88d 2006 	strb.w	r2, [sp, #6]
   22710:	78c2      	ldrb	r2, [r0, #3]
   22712:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   22716:	7a02      	ldrb	r2, [r0, #8]
   22718:	f88d 2008 	strb.w	r2, [sp, #8]
   2271c:	7b42      	ldrb	r2, [r0, #13]
   2271e:	f88d 2009 	strb.w	r2, [sp, #9]
   22722:	7882      	ldrb	r2, [r0, #2]
   22724:	f88d 200a 	strb.w	r2, [sp, #10]
   22728:	79c2      	ldrb	r2, [r0, #7]
   2272a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2272e:	7b02      	ldrb	r2, [r0, #12]
   22730:	f88d 200c 	strb.w	r2, [sp, #12]
   22734:	7842      	ldrb	r2, [r0, #1]
   22736:	7ac3      	ldrb	r3, [r0, #11]
   22738:	f88d 200d 	strb.w	r2, [sp, #13]
   2273c:	7982      	ldrb	r2, [r0, #6]
   2273e:	f88d 200e 	strb.w	r2, [sp, #14]
   22742:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   22746:	2310      	movs	r3, #16
   22748:	466a      	mov	r2, sp
   2274a:	4619      	mov	r1, r3
   2274c:	f7ff f883 	bl	21856 <_copy>
}
   22750:	b005      	add	sp, #20
   22752:	f85d fb04 	ldr.w	pc, [sp], #4

00022756 <mult_row_column>:
{
   22756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22758:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2275a:	7808      	ldrb	r0, [r1, #0]
{
   2275c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2275e:	f7ff f889 	bl	21874 <_double_byte>
   22762:	4605      	mov	r5, r0
   22764:	7860      	ldrb	r0, [r4, #1]
   22766:	f7ff f885 	bl	21874 <_double_byte>
   2276a:	78a2      	ldrb	r2, [r4, #2]
   2276c:	7863      	ldrb	r3, [r4, #1]
   2276e:	4053      	eors	r3, r2
   22770:	78e2      	ldrb	r2, [r4, #3]
   22772:	4053      	eors	r3, r2
   22774:	405d      	eors	r5, r3
   22776:	4045      	eors	r5, r0
   22778:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2277a:	7860      	ldrb	r0, [r4, #1]
   2277c:	7827      	ldrb	r7, [r4, #0]
   2277e:	f7ff f879 	bl	21874 <_double_byte>
   22782:	4605      	mov	r5, r0
   22784:	78a0      	ldrb	r0, [r4, #2]
   22786:	f7ff f875 	bl	21874 <_double_byte>
   2278a:	78a3      	ldrb	r3, [r4, #2]
   2278c:	405f      	eors	r7, r3
   2278e:	78e3      	ldrb	r3, [r4, #3]
   22790:	405f      	eors	r7, r3
   22792:	407d      	eors	r5, r7
   22794:	4045      	eors	r5, r0
   22796:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   22798:	78a0      	ldrb	r0, [r4, #2]
   2279a:	7865      	ldrb	r5, [r4, #1]
   2279c:	7827      	ldrb	r7, [r4, #0]
   2279e:	f7ff f869 	bl	21874 <_double_byte>
   227a2:	406f      	eors	r7, r5
   227a4:	4605      	mov	r5, r0
   227a6:	78e0      	ldrb	r0, [r4, #3]
   227a8:	f7ff f864 	bl	21874 <_double_byte>
   227ac:	78e3      	ldrb	r3, [r4, #3]
   227ae:	405f      	eors	r7, r3
   227b0:	407d      	eors	r5, r7
   227b2:	4045      	eors	r5, r0
   227b4:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   227b6:	7820      	ldrb	r0, [r4, #0]
   227b8:	f7ff f85c 	bl	21874 <_double_byte>
   227bc:	7863      	ldrb	r3, [r4, #1]
   227be:	7825      	ldrb	r5, [r4, #0]
   227c0:	405d      	eors	r5, r3
   227c2:	78a3      	ldrb	r3, [r4, #2]
   227c4:	405d      	eors	r5, r3
   227c6:	4045      	eors	r5, r0
   227c8:	78e0      	ldrb	r0, [r4, #3]
   227ca:	f7ff f853 	bl	21874 <_double_byte>
   227ce:	b2ed      	uxtb	r5, r5
   227d0:	4045      	eors	r5, r0
   227d2:	70f5      	strb	r5, [r6, #3]
}
   227d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000227d6 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   227d6:	b570      	push	{r4, r5, r6, lr}
   227d8:	4614      	mov	r4, r2
   227da:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   227dc:	4605      	mov	r5, r0
   227de:	2800      	cmp	r0, #0
   227e0:	d049      	beq.n	22876 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   227e2:	2900      	cmp	r1, #0
   227e4:	d049      	beq.n	2287a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   227e6:	2a00      	cmp	r2, #0
   227e8:	d049      	beq.n	2287e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   227ea:	2310      	movs	r3, #16
   227ec:	460a      	mov	r2, r1
   227ee:	4668      	mov	r0, sp
   227f0:	4619      	mov	r1, r3
   227f2:	f7ff f830 	bl	21856 <_copy>
	add_round_key(state, s->words);
   227f6:	4621      	mov	r1, r4
   227f8:	4668      	mov	r0, sp
   227fa:	f7ff ff2e 	bl	2265a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   227fe:	3410      	adds	r4, #16
   22800:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   22804:	4668      	mov	r0, sp
   22806:	f7e3 fec5 	bl	6594 <sub_bytes>
		shift_rows(state);
   2280a:	4668      	mov	r0, sp
   2280c:	f7ff ff6a 	bl	226e4 <shift_rows>
	mult_row_column(t, s);
   22810:	4669      	mov	r1, sp
   22812:	a804      	add	r0, sp, #16
   22814:	f7ff ff9f 	bl	22756 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   22818:	a901      	add	r1, sp, #4
   2281a:	a805      	add	r0, sp, #20
   2281c:	f7ff ff9b 	bl	22756 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   22820:	a902      	add	r1, sp, #8
   22822:	a806      	add	r0, sp, #24
   22824:	f7ff ff97 	bl	22756 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   22828:	a903      	add	r1, sp, #12
   2282a:	a807      	add	r0, sp, #28
   2282c:	f7ff ff93 	bl	22756 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   22830:	2310      	movs	r3, #16
   22832:	4619      	mov	r1, r3
   22834:	eb0d 0203 	add.w	r2, sp, r3
   22838:	4668      	mov	r0, sp
   2283a:	f7ff f80c 	bl	21856 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2283e:	4621      	mov	r1, r4
   22840:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   22842:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   22844:	f7ff ff09 	bl	2265a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   22848:	42a6      	cmp	r6, r4
   2284a:	d1db      	bne.n	22804 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2284c:	f7e3 fea2 	bl	6594 <sub_bytes>
	shift_rows(state);
   22850:	4668      	mov	r0, sp
   22852:	f7ff ff47 	bl	226e4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   22856:	4631      	mov	r1, r6
   22858:	4668      	mov	r0, sp
   2285a:	f7ff fefe 	bl	2265a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2285e:	2310      	movs	r3, #16
   22860:	4619      	mov	r1, r3
   22862:	466a      	mov	r2, sp
   22864:	4628      	mov	r0, r5
   22866:	f7fe fff6 	bl	21856 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2286a:	4668      	mov	r0, sp
   2286c:	2210      	movs	r2, #16
   2286e:	2100      	movs	r1, #0
   22870:	f7fe fffe 	bl	21870 <_set>

	return TC_CRYPTO_SUCCESS;
   22874:	2001      	movs	r0, #1
}
   22876:	b008      	add	sp, #32
   22878:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2287a:	4608      	mov	r0, r1
   2287c:	e7fb      	b.n	22876 <tc_aes_encrypt+0xa0>
   2287e:	4610      	mov	r0, r2
   22880:	e7f9      	b.n	22876 <tc_aes_encrypt+0xa0>

00022882 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   22882:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   22884:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   22886:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   22888:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2288c:	2b00      	cmp	r3, #0
   2288e:	bfb4      	ite	lt
   22890:	2387      	movlt	r3, #135	; 0x87
   22892:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   22894:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   22898:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2289c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2289e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   228a2:	d002      	beq.n	228aa <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   228a4:	7813      	ldrb	r3, [r2, #0]
   228a6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   228a8:	e7f4      	b.n	22894 <gf_double+0x12>
	}
}
   228aa:	bd10      	pop	{r4, pc}

000228ac <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   228ac:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   228ae:	b120      	cbz	r0, 228ba <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   228b0:	2258      	movs	r2, #88	; 0x58
   228b2:	2100      	movs	r1, #0
   228b4:	f7fe ffdc 	bl	21870 <_set>
   228b8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   228ba:	bd08      	pop	{r3, pc}

000228bc <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   228bc:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   228be:	4604      	mov	r4, r0
   228c0:	b188      	cbz	r0, 228e6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   228c2:	2210      	movs	r2, #16
   228c4:	2100      	movs	r1, #0
   228c6:	f7fe ffd3 	bl	21870 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   228ca:	2210      	movs	r2, #16
   228cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   228d0:	2100      	movs	r1, #0
   228d2:	f7fe ffcd 	bl	21870 <_set>
	s->leftover_offset = 0;
   228d6:	2300      	movs	r3, #0
   228d8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   228da:	2200      	movs	r2, #0
   228dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   228e0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   228e4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   228e6:	bd10      	pop	{r4, pc}

000228e8 <tc_cmac_setup>:
{
   228e8:	b570      	push	{r4, r5, r6, lr}
   228ea:	460d      	mov	r5, r1
   228ec:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   228ee:	4604      	mov	r4, r0
   228f0:	b310      	cbz	r0, 22938 <tc_cmac_setup+0x50>
   228f2:	b311      	cbz	r1, 2293a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   228f4:	2258      	movs	r2, #88	; 0x58
   228f6:	2100      	movs	r1, #0
   228f8:	f7fe ffba 	bl	21870 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   228fc:	4629      	mov	r1, r5
	s->sched = sched;
   228fe:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   22900:	4630      	mov	r0, r6
   22902:	f7e3 fe53 	bl	65ac <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   22906:	2210      	movs	r2, #16
   22908:	2100      	movs	r1, #0
   2290a:	4620      	mov	r0, r4
   2290c:	f7fe ffb0 	bl	21870 <_set>
	gf_double (s->K1, s->iv);
   22910:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   22914:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22916:	4621      	mov	r1, r4
   22918:	4620      	mov	r0, r4
   2291a:	f7ff ff5c 	bl	227d6 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2291e:	4621      	mov	r1, r4
   22920:	4628      	mov	r0, r5
   22922:	f7ff ffae 	bl	22882 <gf_double>
	gf_double (s->K2, s->K1);
   22926:	4629      	mov	r1, r5
   22928:	f104 0020 	add.w	r0, r4, #32
   2292c:	f7ff ffa9 	bl	22882 <gf_double>
	tc_cmac_init(s);
   22930:	4620      	mov	r0, r4
   22932:	f7ff ffc3 	bl	228bc <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   22936:	2001      	movs	r0, #1
}
   22938:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2293a:	4608      	mov	r0, r1
   2293c:	e7fc      	b.n	22938 <tc_cmac_setup+0x50>

0002293e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2293e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22942:	460d      	mov	r5, r1
   22944:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   22946:	4604      	mov	r4, r0
   22948:	2800      	cmp	r0, #0
   2294a:	d061      	beq.n	22a10 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2294c:	b912      	cbnz	r2, 22954 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2294e:	2001      	movs	r0, #1
}
   22950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   22954:	2900      	cmp	r1, #0
   22956:	d05b      	beq.n	22a10 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   22958:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2295c:	ea53 0102 	orrs.w	r1, r3, r2
   22960:	d056      	beq.n	22a10 <tc_cmac_update+0xd2>
	s->countdown--;
   22962:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   22964:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   22968:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   2296c:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   22970:	f1b8 0f00 	cmp.w	r8, #0
   22974:	d02a      	beq.n	229cc <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   22976:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2297a:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2297e:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   22980:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   22982:	d208      	bcs.n	22996 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   22984:	462a      	mov	r2, r5
   22986:	4633      	mov	r3, r6
   22988:	4631      	mov	r1, r6
   2298a:	f7fe ff64 	bl	21856 <_copy>
			s->leftover_offset += data_length;
   2298e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   22990:	4432      	add	r2, r6
   22992:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   22994:	e7db      	b.n	2294e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   22996:	463b      	mov	r3, r7
   22998:	462a      	mov	r2, r5
   2299a:	4639      	mov	r1, r7
   2299c:	f7fe ff5b 	bl	21856 <_copy>
		data_length -= remaining_space;
   229a0:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   229a2:	2300      	movs	r3, #0
   229a4:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   229a6:	4446      	add	r6, r8
		data += remaining_space;
   229a8:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   229aa:	1e63      	subs	r3, r4, #1
   229ac:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   229b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   229b4:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   229b8:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   229ba:	ea82 0200 	eor.w	r2, r2, r0
   229be:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   229c0:	d1f6      	bne.n	229b0 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   229c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   229c4:	4621      	mov	r1, r4
   229c6:	4620      	mov	r0, r4
   229c8:	f7ff ff05 	bl	227d6 <tc_aes_encrypt>
   229cc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   229d0:	2e10      	cmp	r6, #16
   229d2:	d80a      	bhi.n	229ea <tc_cmac_update+0xac>
	if (data_length > 0) {
   229d4:	2e00      	cmp	r6, #0
   229d6:	d0ba      	beq.n	2294e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   229d8:	4633      	mov	r3, r6
   229da:	462a      	mov	r2, r5
   229dc:	4631      	mov	r1, r6
   229de:	f104 0030 	add.w	r0, r4, #48	; 0x30
   229e2:	f7fe ff38 	bl	21856 <_copy>
		s->leftover_offset = data_length;
   229e6:	6466      	str	r6, [r4, #68]	; 0x44
   229e8:	e7b1      	b.n	2294e <tc_cmac_update+0x10>
   229ea:	1e63      	subs	r3, r4, #1
   229ec:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   229ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   229f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   229f6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   229f8:	ea82 0200 	eor.w	r2, r2, r0
   229fc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   229fe:	d1f6      	bne.n	229ee <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   22a00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22a02:	4621      	mov	r1, r4
   22a04:	4620      	mov	r0, r4
   22a06:	f7ff fee6 	bl	227d6 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   22a0a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   22a0c:	3e10      	subs	r6, #16
   22a0e:	e7df      	b.n	229d0 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   22a10:	2000      	movs	r0, #0
   22a12:	e79d      	b.n	22950 <tc_cmac_update+0x12>

00022a14 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   22a14:	b570      	push	{r4, r5, r6, lr}
   22a16:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   22a18:	4605      	mov	r5, r0
   22a1a:	b1e8      	cbz	r0, 22a58 <tc_cmac_final+0x44>
   22a1c:	b369      	cbz	r1, 22a7a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   22a1e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   22a20:	2a10      	cmp	r2, #16
   22a22:	d11a      	bne.n	22a5a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   22a24:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22a26:	1e63      	subs	r3, r4, #1
   22a28:	3901      	subs	r1, #1
   22a2a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22a2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   22a32:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   22a36:	4072      	eors	r2, r6
   22a38:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22a3c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22a3e:	ea82 0206 	eor.w	r2, r2, r6
   22a42:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22a44:	d1f3      	bne.n	22a2e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   22a46:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22a48:	4621      	mov	r1, r4
   22a4a:	4628      	mov	r0, r5
   22a4c:	f7ff fec3 	bl	227d6 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   22a50:	4620      	mov	r0, r4
   22a52:	f7ff ff2b 	bl	228ac <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   22a56:	2001      	movs	r0, #1
}
   22a58:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   22a5a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   22a5e:	2100      	movs	r1, #0
   22a60:	f1c2 0210 	rsb	r2, r2, #16
   22a64:	4420      	add	r0, r4
   22a66:	f7fe ff03 	bl	21870 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   22a6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   22a6c:	4423      	add	r3, r4
   22a6e:	2280      	movs	r2, #128	; 0x80
   22a70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   22a74:	f104 0120 	add.w	r1, r4, #32
   22a78:	e7d5      	b.n	22a26 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   22a7a:	4608      	mov	r0, r1
   22a7c:	e7ec      	b.n	22a58 <tc_cmac_final+0x44>

00022a7e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   22a7e:	2100      	movs	r1, #0
   22a80:	2001      	movs	r0, #1
   22a82:	f7e3 bed3 	b.w	682c <z_arm_fatal_error>

00022a86 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   22a86:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   22a88:	6800      	ldr	r0, [r0, #0]
   22a8a:	f7e3 becf 	b.w	682c <z_arm_fatal_error>

00022a8e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   22a8e:	b508      	push	{r3, lr}
	handler();
   22a90:	f7e3 ff04 	bl	689c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   22a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   22a98:	f7e4 b970 	b.w	6d7c <z_arm_exc_exit>

00022a9c <_stdout_hook_default>:
}
   22a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22aa0:	4770      	bx	lr

00022aa2 <_stdin_hook_default>:
}
   22aa2:	2000      	movs	r0, #0
   22aa4:	4770      	bx	lr

00022aa6 <_read>:
{
   22aa6:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   22aa8:	4611      	mov	r1, r2
   22aaa:	f7e4 ba81 	b.w	6fb0 <z_impl_zephyr_read_stdin>

00022aae <_write>:
{
   22aae:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   22ab0:	4611      	mov	r1, r2
   22ab2:	f7e4 ba91 	b.w	6fd8 <z_impl_zephyr_write_stdout>

00022ab6 <_close>:
   22ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22aba:	4770      	bx	lr

00022abc <_lseek>:
}
   22abc:	2000      	movs	r0, #0
   22abe:	4770      	bx	lr

00022ac0 <_isatty>:
}
   22ac0:	2001      	movs	r0, #1
   22ac2:	4770      	bx	lr

00022ac4 <_kill>:
}
   22ac4:	2000      	movs	r0, #0
   22ac6:	4770      	bx	lr

00022ac8 <_getpid>:
}
   22ac8:	2000      	movs	r0, #0
   22aca:	4770      	bx	lr

00022acc <_fstat>:
	st->st_mode = S_IFCHR;
   22acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   22ad0:	604b      	str	r3, [r1, #4]
}
   22ad2:	2000      	movs	r0, #0
   22ad4:	4770      	bx	lr

00022ad6 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   22ad6:	f7fb bd25 	b.w	1e524 <SystemInit>

00022ada <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   22ada:	b530      	push	{r4, r5, lr}
   22adc:	b085      	sub	sp, #20
   22ade:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   22ae0:	880a      	ldrh	r2, [r1, #0]
   22ae2:	788b      	ldrb	r3, [r1, #2]
   22ae4:	f8ad 2000 	strh.w	r2, [sp]
{
   22ae8:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   22aea:	220d      	movs	r2, #13
   22aec:	2100      	movs	r1, #0
   22aee:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   22af2:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   22af6:	f003 fbdc 	bl	262b2 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   22afa:	466a      	mov	r2, sp
   22afc:	4669      	mov	r1, sp
   22afe:	4628      	mov	r0, r5
   22b00:	f7ef ffc8 	bl	12a94 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   22b04:	b928      	cbnz	r0, 22b12 <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22b06:	f8bd 2000 	ldrh.w	r2, [sp]
   22b0a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   22b0e:	8022      	strh	r2, [r4, #0]
   22b10:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   22b12:	b005      	add	sp, #20
   22b14:	bd30      	pop	{r4, r5, pc}

00022b16 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   22b16:	b513      	push	{r0, r1, r4, lr}
   22b18:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   22b1a:	aa01      	add	r2, sp, #4
   22b1c:	3103      	adds	r1, #3
   22b1e:	f7ff ffdc 	bl	22ada <ah>
	if (err) {
   22b22:	b948      	cbnz	r0, 22b38 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   22b24:	2203      	movs	r2, #3
   22b26:	a901      	add	r1, sp, #4
   22b28:	4620      	mov	r0, r4
   22b2a:	f003 fba4 	bl	26276 <memcmp>
   22b2e:	fab0 f080 	clz	r0, r0
   22b32:	0940      	lsrs	r0, r0, #5
}
   22b34:	b002      	add	sp, #8
   22b36:	bd10      	pop	{r4, pc}
		return false;
   22b38:	2000      	movs	r0, #0
   22b3a:	e7fb      	b.n	22b34 <bt_rpa_irk_matches+0x1e>

00022b3c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   22b3c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   22b3e:	1cce      	adds	r6, r1, #3
{
   22b40:	4605      	mov	r5, r0
   22b42:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   22b44:	4630      	mov	r0, r6
   22b46:	2103      	movs	r1, #3
   22b48:	f7ef ffa2 	bl	12a90 <bt_rand>
	if (err) {
   22b4c:	b960      	cbnz	r0, 22b68 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   22b4e:	7963      	ldrb	r3, [r4, #5]
   22b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22b58:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   22b5a:	4622      	mov	r2, r4
   22b5c:	4631      	mov	r1, r6
   22b5e:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   22b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   22b64:	f7ff bfb9 	b.w	22ada <ah>
}
   22b68:	bd70      	pop	{r4, r5, r6, pc}

00022b6a <send_cmd_status>:
{
   22b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   22b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   22b72:	4606      	mov	r6, r0
   22b74:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   22b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22b7a:	2100      	movs	r1, #0
   22b7c:	200f      	movs	r0, #15
   22b7e:	f7e7 f9bb 	bl	9ef8 <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   22b82:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   22b84:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   22b88:	4604      	mov	r4, r0
   22b8a:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   22b8c:	2102      	movs	r1, #2
   22b8e:	4640      	mov	r0, r8
   22b90:	f002 fc7b 	bl	2548a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   22b94:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   22b96:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   22b98:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   22b9a:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   22b9c:	4640      	mov	r0, r8
   22b9e:	f002 fc74 	bl	2548a <net_buf_simple_add>
	evt->ncmd = 1U;
   22ba2:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   22ba4:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   22ba6:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   22ba8:	4620      	mov	r0, r4
}
   22baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   22bae:	f7e6 bbc5 	b.w	933c <bt_recv_prio>

00022bb2 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   22bb2:	f101 0320 	add.w	r3, r1, #32
   22bb6:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   22bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   22bbc:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   22bc0:	428b      	cmp	r3, r1
   22bc2:	d1f9      	bne.n	22bb8 <sys_memcpy_swap.constprop.0+0x6>
}
   22bc4:	4770      	bx	lr

00022bc6 <default_CSPRNG>:
{
   22bc6:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   22bc8:	f7ef ff62 	bl	12a90 <bt_rand>
}
   22bcc:	fab0 f080 	clz	r0, r0
   22bd0:	0940      	lsrs	r0, r0, #5
   22bd2:	bd08      	pop	{r3, pc}

00022bd4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   22bd4:	b510      	push	{r4, lr}
   22bd6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   22bd8:	7801      	ldrb	r1, [r0, #0]
   22bda:	7822      	ldrb	r2, [r4, #0]
   22bdc:	428a      	cmp	r2, r1
{
   22bde:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   22be0:	d00f      	beq.n	22c02 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   22be2:	4669      	mov	r1, sp
   22be4:	f7e4 fc48 	bl	7478 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   22be8:	a905      	add	r1, sp, #20
   22bea:	4620      	mov	r0, r4
   22bec:	f7e4 fc44 	bl	7478 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   22bf0:	2210      	movs	r2, #16
   22bf2:	f10d 0115 	add.w	r1, sp, #21
   22bf6:	f10d 0001 	add.w	r0, sp, #1
   22bfa:	f003 fb3c 	bl	26276 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   22bfe:	b00a      	add	sp, #40	; 0x28
   22c00:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   22c02:	2a01      	cmp	r2, #1
   22c04:	d006      	beq.n	22c14 <bt_uuid_cmp+0x40>
   22c06:	2a02      	cmp	r2, #2
   22c08:	d007      	beq.n	22c1a <bt_uuid_cmp+0x46>
   22c0a:	b972      	cbnz	r2, 22c2a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   22c0c:	8840      	ldrh	r0, [r0, #2]
   22c0e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   22c10:	1ac0      	subs	r0, r0, r3
   22c12:	e7f4      	b.n	22bfe <bt_uuid_cmp+0x2a>
   22c14:	6840      	ldr	r0, [r0, #4]
   22c16:	6863      	ldr	r3, [r4, #4]
   22c18:	e7fa      	b.n	22c10 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   22c1a:	2210      	movs	r2, #16
   22c1c:	1c61      	adds	r1, r4, #1
   22c1e:	3001      	adds	r0, #1
}
   22c20:	b00a      	add	sp, #40	; 0x28
   22c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   22c26:	f003 bb26 	b.w	26276 <memcmp>
	switch (u1->type) {
   22c2a:	f06f 0015 	mvn.w	r0, #21
   22c2e:	e7e6      	b.n	22bfe <bt_uuid_cmp+0x2a>

00022c30 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   22c30:	2a04      	cmp	r2, #4
   22c32:	d00a      	beq.n	22c4a <bt_uuid_create+0x1a>
   22c34:	2a10      	cmp	r2, #16
   22c36:	d00d      	beq.n	22c54 <bt_uuid_create+0x24>
   22c38:	2a02      	cmp	r2, #2
   22c3a:	f04f 0300 	mov.w	r3, #0
   22c3e:	d115      	bne.n	22c6c <bt_uuid_create+0x3c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   22c40:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   22c42:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   22c44:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   22c46:	2001      	movs	r0, #1
		break;
   22c48:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   22c4a:	2301      	movs	r3, #1
   22c4c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   22c4e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   22c50:	6042      	str	r2, [r0, #4]
		break;
   22c52:	e7f8      	b.n	22c46 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   22c54:	2302      	movs	r3, #2
   22c56:	f800 3b01 	strb.w	r3, [r0], #1
   22c5a:	f101 0310 	add.w	r3, r1, #16
   22c5e:	f851 2b04 	ldr.w	r2, [r1], #4
   22c62:	f840 2b04 	str.w	r2, [r0], #4
   22c66:	4299      	cmp	r1, r3
   22c68:	d1f9      	bne.n	22c5e <bt_uuid_create+0x2e>
   22c6a:	e7ec      	b.n	22c46 <bt_uuid_create+0x16>
	switch (data_len) {
   22c6c:	4618      	mov	r0, r3
}
   22c6e:	4770      	bx	lr

00022c70 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   22c70:	280f      	cmp	r0, #15
   22c72:	d806      	bhi.n	22c82 <bt_hci_evt_get_flags+0x12>
   22c74:	280d      	cmp	r0, #13
   22c76:	d80b      	bhi.n	22c90 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   22c78:	2805      	cmp	r0, #5
   22c7a:	bf14      	ite	ne
   22c7c:	2002      	movne	r0, #2
   22c7e:	2003      	moveq	r0, #3
   22c80:	4770      	bx	lr
	switch (evt) {
   22c82:	2813      	cmp	r0, #19
   22c84:	d004      	beq.n	22c90 <bt_hci_evt_get_flags+0x20>
   22c86:	281a      	cmp	r0, #26
   22c88:	bf14      	ite	ne
   22c8a:	2002      	movne	r0, #2
   22c8c:	2001      	moveq	r0, #1
   22c8e:	4770      	bx	lr
   22c90:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   22c92:	4770      	bx	lr

00022c94 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22c94:	f3bf 8f5b 	dmb	ish
   22c98:	6800      	ldr	r0, [r0, #0]
   22c9a:	f3bf 8f5b 	dmb	ish
}
   22c9e:	4770      	bx	lr

00022ca0 <atomic_test_bit>:
{
   22ca0:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   22ca2:	f7ff fff7 	bl	22c94 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   22ca6:	4108      	asrs	r0, r1
}
   22ca8:	f000 0001 	and.w	r0, r0, #1
   22cac:	bd08      	pop	{r3, pc}

00022cae <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   22cae:	2207      	movs	r2, #7
   22cb0:	f003 bae1 	b.w	26276 <memcmp>

00022cb4 <atomic_and>:
{
   22cb4:	4603      	mov	r3, r0
}
   22cb6:	f3bf 8f5b 	dmb	ish
   22cba:	e853 0f00 	ldrex	r0, [r3]
   22cbe:	ea00 0201 	and.w	r2, r0, r1
   22cc2:	e843 2c00 	strex	ip, r2, [r3]
   22cc6:	f1bc 0f00 	cmp.w	ip, #0
   22cca:	d1f6      	bne.n	22cba <atomic_and+0x6>
   22ccc:	f3bf 8f5b 	dmb	ish
   22cd0:	4770      	bx	lr

00022cd2 <atomic_or>:
{
   22cd2:	4603      	mov	r3, r0
}
   22cd4:	f3bf 8f5b 	dmb	ish
   22cd8:	e853 0f00 	ldrex	r0, [r3]
   22cdc:	ea40 0201 	orr.w	r2, r0, r1
   22ce0:	e843 2c00 	strex	ip, r2, [r3]
   22ce4:	f1bc 0f00 	cmp.w	ip, #0
   22ce8:	d1f6      	bne.n	22cd8 <atomic_or+0x6>
   22cea:	f3bf 8f5b 	dmb	ish
   22cee:	4770      	bx	lr

00022cf0 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   22cf0:	460b      	mov	r3, r1
   22cf2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   22cf4:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   22cf6:	f001 041f 	and.w	r4, r1, #31
   22cfa:	2101      	movs	r1, #1
   22cfc:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   22cfe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   22d02:	b112      	cbz	r2, 22d0a <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   22d04:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   22d06:	f7ff bfe4 	b.w	22cd2 <atomic_or>
}
   22d0a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22d0c:	43c9      	mvns	r1, r1
   22d0e:	f7ff bfd1 	b.w	22cb4 <atomic_and>

00022d12 <atomic_test_and_set_bit>:
{
   22d12:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   22d14:	2301      	movs	r3, #1
   22d16:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   22d1a:	f7ff ffda 	bl	22cd2 <atomic_or>
	return (old & mask) != 0;
   22d1e:	4201      	tst	r1, r0
}
   22d20:	bf14      	ite	ne
   22d22:	2001      	movne	r0, #1
   22d24:	2000      	moveq	r0, #0
   22d26:	bd08      	pop	{r3, pc}

00022d28 <bt_addr_copy>:
   22d28:	680b      	ldr	r3, [r1, #0]
   22d2a:	6003      	str	r3, [r0, #0]
   22d2c:	888b      	ldrh	r3, [r1, #4]
   22d2e:	8083      	strh	r3, [r0, #4]
}
   22d30:	4770      	bx	lr

00022d32 <bt_addr_le_copy>:
   22d32:	680b      	ldr	r3, [r1, #0]
   22d34:	6003      	str	r3, [r0, #0]
   22d36:	888b      	ldrh	r3, [r1, #4]
   22d38:	8083      	strh	r3, [r0, #4]
   22d3a:	798b      	ldrb	r3, [r1, #6]
   22d3c:	7183      	strb	r3, [r0, #6]
}
   22d3e:	4770      	bx	lr

00022d40 <adv_id_check_connectable_func>:
{
   22d40:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   22d42:	f100 0514 	add.w	r5, r0, #20
{
   22d46:	4604      	mov	r4, r0
   22d48:	460a      	mov	r2, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   22d4a:	4628      	mov	r0, r5
   22d4c:	2106      	movs	r1, #6
   22d4e:	f7ff ffa7 	bl	22ca0 <atomic_test_bit>
   22d52:	b150      	cbz	r0, 22d6a <adv_id_check_connectable_func+0x2a>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   22d54:	2108      	movs	r1, #8
   22d56:	4628      	mov	r0, r5
   22d58:	f7ff ffa2 	bl	22ca0 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   22d5c:	b128      	cbz	r0, 22d6a <adv_id_check_connectable_func+0x2a>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   22d5e:	7813      	ldrb	r3, [r2, #0]
   22d60:	7821      	ldrb	r1, [r4, #0]
   22d62:	4299      	cmp	r1, r3
		check_data->adv_enabled = true;
   22d64:	bf1c      	itt	ne
   22d66:	2301      	movne	r3, #1
   22d68:	7053      	strbne	r3, [r2, #1]
}
   22d6a:	bd38      	pop	{r3, r4, r5, pc}

00022d6c <sys_put_le64>:
	dst[1] = val >> 8;
   22d6c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   22d70:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   22d72:	0e00      	lsrs	r0, r0, #24
   22d74:	7053      	strb	r3, [r2, #1]
   22d76:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   22d78:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   22d7a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   22d7e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   22d80:	7093      	strb	r3, [r2, #2]
   22d82:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   22d84:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   22d86:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   22d88:	71d1      	strb	r1, [r2, #7]
}
   22d8a:	4770      	bx	lr

00022d8c <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   22d8c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   22d8e:	2106      	movs	r1, #6
   22d90:	4668      	mov	r0, sp
   22d92:	f7ef fe7d 	bl	12a90 <bt_rand>
	if (err) {
   22d96:	b940      	cbnz	r0, 22daa <le_set_private_addr.constprop.0+0x1e>
	nrpa.val[5] &= 0x3f;
   22d98:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   22d9c:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   22d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22da2:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   22da6:	f7e5 fa95 	bl	82d4 <set_random_address>
}
   22daa:	b003      	add	sp, #12
   22dac:	f85d fb04 	ldr.w	pc, [sp], #4

00022db0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   22db0:	f100 0214 	add.w	r2, r0, #20
{
   22db4:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   22db6:	2106      	movs	r1, #6
{
   22db8:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   22dba:	4610      	mov	r0, r2
   22dbc:	f7ff ff70 	bl	22ca0 <atomic_test_bit>
   22dc0:	b150      	cbz	r0, 22dd8 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   22dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   22dc6:	4610      	mov	r0, r2
   22dc8:	f7ff ff83 	bl	22cd2 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   22dcc:	4620      	mov	r0, r4
   22dce:	2100      	movs	r1, #0
}
   22dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   22dd4:	f7e5 baac 	b.w	8330 <set_le_adv_enable_legacy>
}
   22dd8:	bd10      	pop	{r4, pc}

00022dda <adv_unpause_enabled>:
{
   22dda:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22ddc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   22de0:	4604      	mov	r4, r0
   22de2:	3014      	adds	r0, #20
   22de4:	f7ff ff66 	bl	22cb4 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   22de8:	0483      	lsls	r3, r0, #18
   22dea:	d505      	bpl.n	22df8 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   22dec:	4620      	mov	r0, r4
   22dee:	2101      	movs	r1, #1
}
   22df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   22df4:	f7e5 ba9c 	b.w	8330 <set_le_adv_enable_legacy>
}
   22df8:	bd10      	pop	{r4, pc}

00022dfa <addr_res_enable>:
{
   22dfa:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   22dfc:	2101      	movs	r1, #1
{
   22dfe:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   22e00:	f242 002d 	movw	r0, #8237	; 0x202d
   22e04:	f7e5 f85a 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
   22e08:	4604      	mov	r4, r0
   22e0a:	b158      	cbz	r0, 22e24 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   22e0c:	4629      	mov	r1, r5
   22e0e:	3008      	adds	r0, #8
   22e10:	f002 fb4a 	bl	254a8 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   22e14:	4621      	mov	r1, r4
   22e16:	2200      	movs	r2, #0
}
   22e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   22e1c:	f242 002d 	movw	r0, #8237	; 0x202d
   22e20:	f7e5 b9b4 	b.w	818c <bt_hci_cmd_send_sync>
}
   22e24:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22e28:	bd38      	pop	{r3, r4, r5, pc}

00022e2a <set_le_scan_enable.isra.0>:
	return set_le_scan_enable_legacy(enable);
   22e2a:	f7e5 baaf 	b.w	838c <set_le_scan_enable_legacy>

00022e2e <hci_set_ad>:
{
   22e2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22e32:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   22e34:	2120      	movs	r1, #32
{
   22e36:	4606      	mov	r6, r0
   22e38:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   22e3a:	f7e5 f83f 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
   22e3e:	4605      	mov	r5, r0
   22e40:	b300      	cbz	r0, 22e84 <hci_set_ad+0x56>
	set_data = net_buf_add(buf, sizeof(*set_data));
   22e42:	2120      	movs	r1, #32
   22e44:	3008      	adds	r0, #8
   22e46:	f002 fb20 	bl	2548a <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   22e4a:	2220      	movs	r2, #32
   22e4c:	4604      	mov	r4, r0
   22e4e:	2100      	movs	r1, #0
   22e50:	f003 fa2f 	bl	262b2 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   22e54:	9400      	str	r4, [sp, #0]
   22e56:	1c60      	adds	r0, r4, #1
   22e58:	4643      	mov	r3, r8
   22e5a:	463a      	mov	r2, r7
   22e5c:	211f      	movs	r1, #31
   22e5e:	f7e4 fd31 	bl	78c4 <set_data_add>
	if (err) {
   22e62:	4604      	mov	r4, r0
   22e64:	b130      	cbz	r0, 22e74 <hci_set_ad+0x46>
		net_buf_unref(buf);
   22e66:	4628      	mov	r0, r5
   22e68:	f7fa fdd8 	bl	1da1c <net_buf_unref>
}
   22e6c:	4620      	mov	r0, r4
   22e6e:	b002      	add	sp, #8
   22e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   22e74:	4602      	mov	r2, r0
   22e76:	4629      	mov	r1, r5
   22e78:	4630      	mov	r0, r6
}
   22e7a:	b002      	add	sp, #8
   22e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   22e80:	f7e5 b984 	b.w	818c <bt_hci_cmd_send_sync>
		return -ENOBUFS;
   22e84:	f06f 0468 	mvn.w	r4, #104	; 0x68
   22e88:	e7f0      	b.n	22e6c <hci_set_ad+0x3e>

00022e8a <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   22e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e8c:	4607      	mov	r7, r0
   22e8e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   22e90:	f242 0027 	movw	r0, #8231	; 0x2027
   22e94:	2127      	movs	r1, #39	; 0x27
   22e96:	f7e5 f811 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
   22e9a:	4605      	mov	r5, r0
   22e9c:	b1f8      	cbz	r0, 22ede <hci_id_add.constprop.0+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   22e9e:	2127      	movs	r1, #39	; 0x27
   22ea0:	3008      	adds	r0, #8
   22ea2:	f002 faf2 	bl	2548a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   22ea6:	4639      	mov	r1, r7
   22ea8:	f7ff ff43 	bl	22d32 <bt_addr_le_copy>
	cp = net_buf_add(buf, sizeof(*cp));
   22eac:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22eae:	4621      	mov	r1, r4
   22eb0:	1dc3      	adds	r3, r0, #7
   22eb2:	f104 0210 	add.w	r2, r4, #16
   22eb6:	f851 0b04 	ldr.w	r0, [r1], #4
   22eba:	f843 0b04 	str.w	r0, [r3], #4
   22ebe:	4291      	cmp	r1, r2
   22ec0:	d1f9      	bne.n	22eb6 <hci_id_add.constprop.0+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   22ec2:	2210      	movs	r2, #16
   22ec4:	2100      	movs	r1, #0
   22ec6:	f106 0017 	add.w	r0, r6, #23
   22eca:	f003 f9f2 	bl	262b2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   22ece:	4629      	mov	r1, r5
   22ed0:	2200      	movs	r2, #0
}
   22ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   22ed6:	f242 0027 	movw	r0, #8231	; 0x2027
   22eda:	f7e5 b957 	b.w	818c <bt_hci_cmd_send_sync>
}
   22ede:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022ee4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   22ee4:	7a03      	ldrb	r3, [r0, #8]
   22ee6:	075b      	lsls	r3, r3, #29
   22ee8:	d504      	bpl.n	22ef4 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   22eea:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   22eee:	3001      	adds	r0, #1
   22ef0:	f7ff bfcb 	b.w	22e8a <hci_id_add.constprop.0>
}
   22ef4:	4770      	bx	lr

00022ef6 <bt_lookup_id_addr>:
{
   22ef6:	b510      	push	{r4, lr}
   22ef8:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   22efa:	f7ec fa47 	bl	f38c <bt_keys_find_irk>
		if (keys) {
   22efe:	b100      	cbz	r0, 22f02 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   22f00:	1c44      	adds	r4, r0, #1
}
   22f02:	4620      	mov	r0, r4
   22f04:	bd10      	pop	{r4, pc}

00022f06 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   22f06:	f7e5 bbbd 	b.w	8684 <bt_le_create_conn_legacy>

00022f0a <bt_hci_disconnect>:
{
   22f0a:	b570      	push	{r4, r5, r6, lr}
   22f0c:	4606      	mov	r6, r0
   22f0e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   22f10:	f240 4006 	movw	r0, #1030	; 0x406
   22f14:	2103      	movs	r1, #3
   22f16:	f7e4 ffd1 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
   22f1a:	4604      	mov	r4, r0
   22f1c:	b160      	cbz	r0, 22f38 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   22f1e:	2103      	movs	r1, #3
   22f20:	3008      	adds	r0, #8
   22f22:	f002 fab2 	bl	2548a <net_buf_simple_add>
	disconn->reason = reason;
   22f26:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   22f28:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   22f2a:	4621      	mov	r1, r4
   22f2c:	f240 4006 	movw	r0, #1030	; 0x406
}
   22f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   22f34:	f7e4 bffc 	b.w	7f30 <bt_hci_cmd_send>
}
   22f38:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22f3c:	bd70      	pop	{r4, r5, r6, pc}

00022f3e <bt_le_set_data_len>:
{
   22f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f40:	4607      	mov	r7, r0
   22f42:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22f44:	f242 0022 	movw	r0, #8226	; 0x2022
   22f48:	2106      	movs	r1, #6
{
   22f4a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22f4c:	f7e4 ffb6 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
   22f50:	4604      	mov	r4, r0
   22f52:	b170      	cbz	r0, 22f72 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   22f54:	2106      	movs	r1, #6
   22f56:	3008      	adds	r0, #8
   22f58:	f002 fa97 	bl	2548a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22f5c:	883b      	ldrh	r3, [r7, #0]
   22f5e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   22f60:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   22f62:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   22f64:	4621      	mov	r1, r4
   22f66:	f242 0022 	movw	r0, #8226	; 0x2022
}
   22f6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   22f6e:	f7e4 bfdf 	b.w	7f30 <bt_hci_cmd_send>
}
   22f72:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022f78 <bt_le_set_phy>:
{
   22f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22f7c:	4680      	mov	r8, r0
   22f7e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22f80:	f242 0032 	movw	r0, #8242	; 0x2032
   22f84:	2107      	movs	r1, #7
{
   22f86:	f89d 9020 	ldrb.w	r9, [sp, #32]
   22f8a:	4616      	mov	r6, r2
   22f8c:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22f8e:	f7e4 ff95 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
   22f92:	4604      	mov	r4, r0
   22f94:	b190      	cbz	r0, 22fbc <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   22f96:	2107      	movs	r1, #7
   22f98:	3008      	adds	r0, #8
   22f9a:	f002 fa76 	bl	2548a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22f9e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   22fa2:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   22fa4:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   22fa6:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   22fa8:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   22faa:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   22fae:	4621      	mov	r1, r4
   22fb0:	f242 0032 	movw	r0, #8242	; 0x2032
}
   22fb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   22fb8:	f7e4 bfba 	b.w	7f30 <bt_hci_cmd_send>
}
   22fbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022fc4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   22fc4:	8803      	ldrh	r3, [r0, #0]
   22fc6:	8842      	ldrh	r2, [r0, #2]
   22fc8:	4293      	cmp	r3, r2
{
   22fca:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   22fcc:	d819      	bhi.n	23002 <bt_le_conn_params_valid+0x3e>
   22fce:	2b05      	cmp	r3, #5
   22fd0:	d917      	bls.n	23002 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   22fd2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   22fd6:	d814      	bhi.n	23002 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   22fd8:	8883      	ldrh	r3, [r0, #4]
   22fda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   22fde:	d210      	bcs.n	23002 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   22fe0:	88c0      	ldrh	r0, [r0, #6]
   22fe2:	f1a0 010a 	sub.w	r1, r0, #10
   22fe6:	b289      	uxth	r1, r1
   22fe8:	f640 4476 	movw	r4, #3190	; 0xc76
   22fec:	42a1      	cmp	r1, r4
   22fee:	d808      	bhi.n	23002 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   22ff0:	3301      	adds	r3, #1
   22ff2:	b29b      	uxth	r3, r3
   22ff4:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   22ff6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   22ffa:	bf34      	ite	cc
   22ffc:	2001      	movcc	r0, #1
   22ffe:	2000      	movcs	r0, #0
}
   23000:	bd10      	pop	{r4, pc}
		return false;
   23002:	2000      	movs	r0, #0
   23004:	e7fc      	b.n	23000 <bt_le_conn_params_valid+0x3c>

00023006 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   23006:	7a03      	ldrb	r3, [r0, #8]
   23008:	07d9      	lsls	r1, r3, #31
   2300a:	d504      	bpl.n	23016 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2300c:	f023 0301 	bic.w	r3, r3, #1
   23010:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   23012:	f7e5 bd39 	b.w	8a88 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   23016:	0799      	lsls	r1, r3, #30
   23018:	d504      	bpl.n	23024 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2301a:	f023 0302 	bic.w	r3, r3, #2
   2301e:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   23020:	f7e5 be14 	b.w	8c4c <bt_id_del>
}
   23024:	4770      	bx	lr

00023026 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   23026:	2301      	movs	r3, #1
{
   23028:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2302a:	2106      	movs	r1, #6
{
   2302c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2302e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   23032:	f7ef fd2d 	bl	12a90 <bt_rand>
	if (err) {
   23036:	b918      	cbnz	r0, 23040 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   23038:	79a3      	ldrb	r3, [r4, #6]
   2303a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2303e:	71a3      	strb	r3, [r4, #6]
}
   23040:	bd10      	pop	{r4, pc}

00023042 <bt_send>:
		return bt_hci_ecc_send(buf);
   23042:	f7e4 b96d 	b.w	7320 <bt_hci_ecc_send>

00023046 <bt_addr_le_is_bonded>:
{
   23046:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   23048:	f7ec f9da 	bl	f400 <bt_keys_find_addr>
		return keys && keys->keys;
   2304c:	b118      	cbz	r0, 23056 <bt_addr_le_is_bonded+0x10>
   2304e:	89c0      	ldrh	r0, [r0, #14]
   23050:	3800      	subs	r0, #0
   23052:	bf18      	it	ne
   23054:	2001      	movne	r0, #1
}
   23056:	bd08      	pop	{r3, pc}

00023058 <bt_le_adv_start>:
	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
   23058:	f7e6 bbba 	b.w	97d0 <bt_le_adv_start_legacy>

0002305c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   2305c:	6880      	ldr	r0, [r0, #8]
   2305e:	f7e6 bd69 	b.w	9b34 <enh_conn_complete>

00023062 <le_legacy_conn_complete>:
{
   23062:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   23064:	6881      	ldr	r1, [r0, #8]
{
   23066:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   23068:	780b      	ldrb	r3, [r1, #0]
   2306a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2306e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   23072:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   23076:	78cb      	ldrb	r3, [r1, #3]
   23078:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2307c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   23080:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   23084:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   23088:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2308c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   23090:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   23094:	7c4b      	ldrb	r3, [r1, #17]
   23096:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2309a:	a803      	add	r0, sp, #12
   2309c:	3104      	adds	r1, #4
   2309e:	f7ff fe48 	bl	22d32 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   230a2:	4669      	mov	r1, sp
   230a4:	2200      	movs	r2, #0
   230a6:	f10d 0013 	add.w	r0, sp, #19
   230aa:	9200      	str	r2, [sp, #0]
   230ac:	f8ad 2004 	strh.w	r2, [sp, #4]
   230b0:	f7ff fe3a 	bl	22d28 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   230b4:	9200      	str	r2, [sp, #0]
   230b6:	f10d 0019 	add.w	r0, sp, #25
   230ba:	808a      	strh	r2, [r1, #4]
   230bc:	f7ff fe34 	bl	22d28 <bt_addr_copy>
	enh_conn_complete(&enh);
   230c0:	a802      	add	r0, sp, #8
   230c2:	f7e6 fd37 	bl	9b34 <enh_conn_complete>
}
   230c6:	b00b      	add	sp, #44	; 0x2c
   230c8:	f85d fb04 	ldr.w	pc, [sp], #4

000230cc <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   230cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   230ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   230d2:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   230d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   230d8:	2100      	movs	r1, #0
{
   230da:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   230dc:	f7e6 ff0c 	bl	9ef8 <bt_buf_get_evt>

	hdr = net_buf_add(buf, sizeof(*hdr));
   230e0:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   230e2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   230e4:	3008      	adds	r0, #8
   230e6:	f002 f9d0 	bl	2548a <net_buf_simple_add>
	hdr->evt = evt;
   230ea:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   230ec:	7045      	strb	r5, [r0, #1]

	return buf;
}
   230ee:	4620      	mov	r0, r4
   230f0:	bd70      	pop	{r4, r5, r6, pc}

000230f2 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   230f2:	3103      	adds	r1, #3
{
   230f4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   230f6:	b2c9      	uxtb	r1, r1
{
   230f8:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   230fa:	200e      	movs	r0, #14
   230fc:	f7ff ffe6 	bl	230cc <bt_hci_evt_create>

	cc = net_buf_add(buf, sizeof(*cc));
   23100:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   23102:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   23104:	3008      	adds	r0, #8
   23106:	f002 f9c0 	bl	2548a <net_buf_simple_add>
	cc->ncmd = 1U;
   2310a:	2301      	movs	r3, #1
   2310c:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   2310e:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   23112:	4620      	mov	r0, r4
   23114:	bd38      	pop	{r3, r4, r5, pc}

00023116 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   23116:	b570      	push	{r4, r5, r6, lr}
   23118:	4605      	mov	r5, r0
   2311a:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   2311c:	200f      	movs	r0, #15
   2311e:	2104      	movs	r1, #4
   23120:	f7ff ffd4 	bl	230cc <bt_hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   23124:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   23126:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   23128:	3008      	adds	r0, #8
   2312a:	f002 f9ae 	bl	2548a <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
   2312e:	2201      	movs	r2, #1
	cs->status = status;
   23130:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   23132:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   23134:	8045      	strh	r5, [r0, #2]

	return buf;
}
   23136:	4620      	mov	r0, r4
   23138:	bd70      	pop	{r4, r5, r6, pc}

0002313a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2313a:	f3bf 8f5b 	dmb	ish
   2313e:	6800      	ldr	r0, [r0, #0]
   23140:	f3bf 8f5b 	dmb	ish
}
   23144:	4770      	bx	lr

00023146 <atomic_and>:
{
   23146:	4603      	mov	r3, r0
}
   23148:	f3bf 8f5b 	dmb	ish
   2314c:	e853 0f00 	ldrex	r0, [r3]
   23150:	ea00 0201 	and.w	r2, r0, r1
   23154:	e843 2c00 	strex	ip, r2, [r3]
   23158:	f1bc 0f00 	cmp.w	ip, #0
   2315c:	d1f6      	bne.n	2314c <atomic_and+0x6>
   2315e:	f3bf 8f5b 	dmb	ish
   23162:	4770      	bx	lr

00023164 <atomic_or>:
{
   23164:	4603      	mov	r3, r0
}
   23166:	f3bf 8f5b 	dmb	ish
   2316a:	e853 0f00 	ldrex	r0, [r3]
   2316e:	ea40 0201 	orr.w	r2, r0, r1
   23172:	e843 2c00 	strex	ip, r2, [r3]
   23176:	f1bc 0f00 	cmp.w	ip, #0
   2317a:	d1f6      	bne.n	2316a <atomic_or+0x6>
   2317c:	f3bf 8f5b 	dmb	ish
   23180:	4770      	bx	lr

00023182 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23182:	680b      	ldr	r3, [r1, #0]
   23184:	6003      	str	r3, [r0, #0]
   23186:	888b      	ldrh	r3, [r1, #4]
   23188:	8083      	strh	r3, [r0, #4]
   2318a:	798b      	ldrb	r3, [r1, #6]
   2318c:	7183      	strb	r3, [r0, #6]
   2318e:	4770      	bx	lr

00023190 <atomic_inc.isra.0>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23190:	f3bf 8f5b 	dmb	ish
   23194:	e850 3f00 	ldrex	r3, [r0]
   23198:	3301      	adds	r3, #1
   2319a:	e840 3200 	strex	r2, r3, [r0]
   2319e:	2a00      	cmp	r2, #0
   231a0:	d1f8      	bne.n	23194 <atomic_inc.isra.0+0x4>
   231a2:	f3bf 8f5b 	dmb	ish
}
   231a6:	4770      	bx	lr

000231a8 <tx_notify>:
{
   231a8:	b570      	push	{r4, r5, r6, lr}
   231aa:	4604      	mov	r4, r0
	__asm__ volatile(
   231ac:	f04f 0220 	mov.w	r2, #32
   231b0:	f3ef 8311 	mrs	r3, BASEPRI
   231b4:	f382 8811 	msr	BASEPRI, r2
   231b8:	f3bf 8f6f 	isb	sy
	return list->head;
   231bc:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   231be:	b920      	cbnz	r0, 231ca <tx_notify+0x22>
	__asm__ volatile(
   231c0:	f383 8811 	msr	BASEPRI, r3
   231c4:	f3bf 8f6f 	isb	sy
}
   231c8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   231ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   231cc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   231ce:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   231d0:	4288      	cmp	r0, r1
	list->tail = node;
   231d2:	bf08      	it	eq
   231d4:	6262      	streq	r2, [r4, #36]	; 0x24
   231d6:	f383 8811 	msr	BASEPRI, r3
   231da:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   231de:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   231e2:	f7e6 ff4f 	bl	a084 <tx_free>
		cb(conn, user_data);
   231e6:	4631      	mov	r1, r6
   231e8:	4620      	mov	r0, r4
   231ea:	47a8      	blx	r5
	while (1) {
   231ec:	e7de      	b.n	231ac <tx_notify+0x4>

000231ee <tx_complete_work>:
	tx_notify(conn);
   231ee:	3828      	subs	r0, #40	; 0x28
   231f0:	f7ff bfda 	b.w	231a8 <tx_notify>

000231f4 <bt_conn_new>:
{
   231f4:	b570      	push	{r4, r5, r6, lr}
   231f6:	460a      	mov	r2, r1
   231f8:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   231fa:	2600      	movs	r6, #0
   231fc:	4296      	cmp	r6, r2
   231fe:	d102      	bne.n	23206 <bt_conn_new+0x12>
		return NULL;
   23200:	2400      	movs	r4, #0
}
   23202:	4620      	mov	r0, r4
   23204:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
   23206:	f104 0554 	add.w	r5, r4, #84	; 0x54
   2320a:	4628      	mov	r0, r5
   2320c:	f7ff ff95 	bl	2313a <atomic_get>
   23210:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   23214:	4601      	mov	r1, r0
   23216:	b110      	cbz	r0, 2321e <bt_conn_new+0x2a>
	for (i = 0; i < size; i++) {
   23218:	3601      	adds	r6, #1
   2321a:	461c      	mov	r4, r3
   2321c:	e7ee      	b.n	231fc <bt_conn_new+0x8>
	if (!conn) {
   2321e:	2c00      	cmp	r4, #0
   23220:	d0ef      	beq.n	23202 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   23222:	22b8      	movs	r2, #184	; 0xb8
   23224:	4620      	mov	r0, r4
   23226:	f003 f844 	bl	262b2 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2322a:	f3bf 8f5b 	dmb	ish
   2322e:	2301      	movs	r3, #1
   23230:	e855 2f00 	ldrex	r2, [r5]
   23234:	e845 3100 	strex	r1, r3, [r5]
   23238:	2900      	cmp	r1, #0
   2323a:	d1f9      	bne.n	23230 <bt_conn_new+0x3c>
   2323c:	f3bf 8f5b 	dmb	ish
   23240:	e7df      	b.n	23202 <bt_conn_new+0xe>

00023242 <bt_conn_le_start_encryption>:
{
   23242:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23246:	4681      	mov	r9, r0
   23248:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2324a:	f242 0019 	movw	r0, #8217	; 0x2019
   2324e:	211c      	movs	r1, #28
{
   23250:	9e08      	ldr	r6, [sp, #32]
   23252:	4690      	mov	r8, r2
   23254:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   23256:	f7e4 fe31 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
   2325a:	4605      	mov	r5, r0
   2325c:	b338      	cbz	r0, 232ae <bt_conn_le_start_encryption+0x6c>
	cp = net_buf_add(buf, sizeof(*cp));
   2325e:	211c      	movs	r1, #28
   23260:	3008      	adds	r0, #8
   23262:	f002 f912 	bl	2548a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   23266:	4603      	mov	r3, r0
   23268:	f8b9 2000 	ldrh.w	r2, [r9]
   2326c:	f823 2b02 	strh.w	r2, [r3], #2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23270:	6822      	ldr	r2, [r4, #0]
   23272:	f8c0 2002 	str.w	r2, [r0, #2]
   23276:	6862      	ldr	r2, [r4, #4]
   23278:	605a      	str	r2, [r3, #4]
   2327a:	f8b8 3000 	ldrh.w	r3, [r8]
   2327e:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
   23280:	f100 040c 	add.w	r4, r0, #12
   23284:	4632      	mov	r2, r6
   23286:	4639      	mov	r1, r7
   23288:	4620      	mov	r0, r4
   2328a:	f003 f804 	bl	26296 <memcpy>
	if (len < sizeof(cp->ltk)) {
   2328e:	2e0f      	cmp	r6, #15
   23290:	d805      	bhi.n	2329e <bt_conn_le_start_encryption+0x5c>
__ssp_bos_icheck3(memset, void *, int)
   23292:	f1c6 0210 	rsb	r2, r6, #16
   23296:	2100      	movs	r1, #0
   23298:	19a0      	adds	r0, r4, r6
   2329a:	f003 f80a 	bl	262b2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2329e:	4629      	mov	r1, r5
   232a0:	2200      	movs	r2, #0
}
   232a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   232a6:	f242 0019 	movw	r0, #8217	; 0x2019
   232aa:	f7e4 bf6f 	b.w	818c <bt_hci_cmd_send_sync>
}
   232ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   232b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000232b6 <bt_conn_set_security>:
{
   232b6:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   232b8:	7b43      	ldrb	r3, [r0, #13]
   232ba:	2b07      	cmp	r3, #7
{
   232bc:	4604      	mov	r4, r0
   232be:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   232c0:	d11c      	bne.n	232fc <bt_conn_set_security+0x46>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   232c2:	7a43      	ldrb	r3, [r0, #9]
   232c4:	428b      	cmp	r3, r1
   232c6:	d21c      	bcs.n	23302 <bt_conn_set_security+0x4c>
   232c8:	7a83      	ldrb	r3, [r0, #10]
   232ca:	428b      	cmp	r3, r1
   232cc:	d219      	bcs.n	23302 <bt_conn_set_security+0x4c>
	if (val) {
   232ce:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   232d0:	f100 0004 	add.w	r0, r0, #4
   232d4:	d50d      	bpl.n	232f2 <bt_conn_set_security+0x3c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   232d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
   232da:	f7ff ff43 	bl	23164 <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   232de:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   232e2:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   232e4:	4620      	mov	r0, r4
   232e6:	f001 ffae 	bl	25246 <bt_smp_start_security>
	if (err) {
   232ea:	b108      	cbz	r0, 232f0 <bt_conn_set_security+0x3a>
		conn->required_sec_level = conn->sec_level;
   232ec:	7a63      	ldrb	r3, [r4, #9]
   232ee:	72a3      	strb	r3, [r4, #10]
}
   232f0:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   232f2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   232f6:	f7ff ff26 	bl	23146 <atomic_and>
   232fa:	e7f0      	b.n	232de <bt_conn_set_security+0x28>
		return -ENOTCONN;
   232fc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   23300:	e7f6      	b.n	232f0 <bt_conn_set_security+0x3a>
		return 0;
   23302:	2000      	movs	r0, #0
   23304:	e7f4      	b.n	232f0 <bt_conn_set_security+0x3a>

00023306 <bt_conn_get_security>:
}
   23306:	7a40      	ldrb	r0, [r0, #9]
   23308:	4770      	bx	lr

0002330a <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   2330a:	89c3      	ldrh	r3, [r0, #14]
{
   2330c:	b510      	push	{r4, lr}
   2330e:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   23310:	b12b      	cbz	r3, 2331e <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   23312:	6900      	ldr	r0, [r0, #16]
   23314:	f7fa fb82 	bl	1da1c <net_buf_unref>
	conn->rx = NULL;
   23318:	2300      	movs	r3, #0
   2331a:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   2331c:	81e3      	strh	r3, [r4, #14]
}
   2331e:	bd10      	pop	{r4, pc}

00023320 <conn_lookup_handle>:
{
   23320:	b538      	push	{r3, r4, r5, lr}
   23322:	f100 0354 	add.w	r3, r0, #84	; 0x54
	for (i = 0; i < size; i++) {
   23326:	2400      	movs	r4, #0
   23328:	428c      	cmp	r4, r1
   2332a:	d101      	bne.n	23330 <conn_lookup_handle+0x10>
	return NULL;
   2332c:	2500      	movs	r5, #0
   2332e:	e013      	b.n	23358 <conn_lookup_handle+0x38>
		if (!atomic_get(&conns[i].ref)) {
   23330:	4618      	mov	r0, r3
   23332:	f1a3 0554 	sub.w	r5, r3, #84	; 0x54
   23336:	f7ff ff00 	bl	2313a <atomic_get>
   2333a:	b178      	cbz	r0, 2335c <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
   2333c:	f813 0c47 	ldrb.w	r0, [r3, #-71]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   23340:	2801      	cmp	r0, #1
   23342:	d002      	beq.n	2334a <conn_lookup_handle+0x2a>
   23344:	3807      	subs	r0, #7
   23346:	2801      	cmp	r0, #1
   23348:	d808      	bhi.n	2335c <conn_lookup_handle+0x3c>
		if (conns[i].handle == handle) {
   2334a:	f833 0c54 	ldrh.w	r0, [r3, #-84]
   2334e:	4290      	cmp	r0, r2
   23350:	d104      	bne.n	2335c <conn_lookup_handle+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
   23352:	4618      	mov	r0, r3
   23354:	f7ff ff1c 	bl	23190 <atomic_inc.isra.0>
}
   23358:	4628      	mov	r0, r5
   2335a:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   2335c:	3401      	adds	r4, #1
   2335e:	33b8      	adds	r3, #184	; 0xb8
   23360:	e7e2      	b.n	23328 <conn_lookup_handle+0x8>

00023362 <bt_conn_is_peer_addr_le>:
{
   23362:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   23364:	7a03      	ldrb	r3, [r0, #8]
   23366:	428b      	cmp	r3, r1
{
   23368:	4604      	mov	r4, r0
   2336a:	4615      	mov	r5, r2
	if (id != conn->id) {
   2336c:	d115      	bne.n	2339a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2336e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   23372:	2207      	movs	r2, #7
   23374:	4628      	mov	r0, r5
   23376:	f002 ff7e 	bl	26276 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2337a:	b180      	cbz	r0, 2339e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   2337c:	78e3      	ldrb	r3, [r4, #3]
   2337e:	2207      	movs	r2, #7
   23380:	b943      	cbnz	r3, 23394 <bt_conn_is_peer_addr_le+0x32>
   23382:	f104 0196 	add.w	r1, r4, #150	; 0x96
   23386:	4628      	mov	r0, r5
   23388:	f002 ff75 	bl	26276 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2338c:	fab0 f080 	clz	r0, r0
   23390:	0940      	lsrs	r0, r0, #5
}
   23392:	bd38      	pop	{r3, r4, r5, pc}
   23394:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   23398:	e7f5      	b.n	23386 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2339a:	2000      	movs	r0, #0
   2339c:	e7f9      	b.n	23392 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2339e:	2001      	movs	r0, #1
   233a0:	e7f7      	b.n	23392 <bt_conn_is_peer_addr_le+0x30>

000233a2 <bt_conn_ref>:
{
   233a2:	b508      	push	{r3, lr}
   233a4:	4601      	mov	r1, r0
	atomic_val_t old = atomic_inc(&conn->ref);
   233a6:	3054      	adds	r0, #84	; 0x54
   233a8:	f7ff fef2 	bl	23190 <atomic_inc.isra.0>
}
   233ac:	4608      	mov	r0, r1
   233ae:	bd08      	pop	{r3, pc}

000233b0 <bt_conn_unref>:
{
   233b0:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   233b2:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   233b4:	f3bf 8f5b 	dmb	ish
   233b8:	e850 3f00 	ldrex	r3, [r0]
   233bc:	3b01      	subs	r3, #1
   233be:	e840 3200 	strex	r2, r3, [r0]
   233c2:	2a00      	cmp	r2, #0
   233c4:	d1f8      	bne.n	233b8 <bt_conn_unref+0x8>
   233c6:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   233ca:	f7ff feb6 	bl	2313a <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   233ce:	b918      	cbnz	r0, 233d8 <bt_conn_unref+0x28>
}
   233d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   233d4:	f7e6 bb78 	b.w	9ac8 <bt_le_adv_resume>
}
   233d8:	bd08      	pop	{r3, pc}

000233da <bt_conn_get_dst>:
}
   233da:	3088      	adds	r0, #136	; 0x88
   233dc:	4770      	bx	lr

000233de <bt_conn_le_conn_update>:
{
   233de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233e0:	4607      	mov	r7, r0
   233e2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   233e4:	f242 0013 	movw	r0, #8211	; 0x2013
   233e8:	210e      	movs	r1, #14
   233ea:	f7e4 fd67 	bl	7ebc <bt_hci_cmd_create>
	if (!buf) {
   233ee:	4606      	mov	r6, r0
   233f0:	b1d0      	cbz	r0, 23428 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   233f2:	210e      	movs	r1, #14
   233f4:	3008      	adds	r0, #8
   233f6:	f002 f848 	bl	2548a <net_buf_simple_add>
   233fa:	220e      	movs	r2, #14
   233fc:	4604      	mov	r4, r0
   233fe:	2100      	movs	r1, #0
   23400:	f002 ff57 	bl	262b2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   23404:	883b      	ldrh	r3, [r7, #0]
   23406:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   23408:	882b      	ldrh	r3, [r5, #0]
   2340a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2340c:	886b      	ldrh	r3, [r5, #2]
   2340e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   23410:	88ab      	ldrh	r3, [r5, #4]
   23412:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   23414:	88eb      	ldrh	r3, [r5, #6]
   23416:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   23418:	4631      	mov	r1, r6
   2341a:	2200      	movs	r2, #0
}
   2341c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   23420:	f242 0013 	movw	r0, #8211	; 0x2013
   23424:	f7e4 beb2 	b.w	818c <bt_hci_cmd_send_sync>
}
   23428:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002342e <l2cap_connected>:
}
   2342e:	4770      	bx	lr

00023430 <l2cap_disconnected>:
   23430:	4770      	bx	lr

00023432 <bt_l2cap_chan_remove>:
	return list->head;
   23432:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   23434:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23436:	b17b      	cbz	r3, 23458 <bt_l2cap_chan_remove+0x26>
   23438:	3b08      	subs	r3, #8
   2343a:	2200      	movs	r2, #0
   2343c:	b163      	cbz	r3, 23458 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2343e:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   23440:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   23444:	d10e      	bne.n	23464 <bt_l2cap_chan_remove+0x32>
	return node->next;
   23446:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   23448:	6d05      	ldr	r5, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2344a:	b932      	cbnz	r2, 2345a <bt_l2cap_chan_remove+0x28>
   2344c:	42ac      	cmp	r4, r5
	list->head = node;
   2344e:	64c1      	str	r1, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   23450:	d100      	bne.n	23454 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   23452:	6501      	str	r1, [r0, #80]	; 0x50
	parent->next = child;
   23454:	2200      	movs	r2, #0
   23456:	609a      	str	r2, [r3, #8]
}
   23458:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2345a:	42ac      	cmp	r4, r5
	parent->next = child;
   2345c:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2345e:	bf08      	it	eq
   23460:	6502      	streq	r2, [r0, #80]	; 0x50
}
   23462:	e7f7      	b.n	23454 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23464:	2c00      	cmp	r4, #0
   23466:	d0f7      	beq.n	23458 <bt_l2cap_chan_remove+0x26>
	return node->next;
   23468:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2346a:	2b00      	cmp	r3, #0
   2346c:	d0f4      	beq.n	23458 <bt_l2cap_chan_remove+0x26>
   2346e:	3b08      	subs	r3, #8
   23470:	4622      	mov	r2, r4
   23472:	e7e3      	b.n	2343c <bt_l2cap_chan_remove+0xa>

00023474 <bt_l2cap_chan_del>:
{
   23474:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   23476:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2347a:	4604      	mov	r4, r0
	if (!chan->conn) {
   2347c:	b123      	cbz	r3, 23488 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2347e:	686b      	ldr	r3, [r5, #4]
   23480:	b103      	cbz	r3, 23484 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   23482:	4798      	blx	r3
	chan->conn = NULL;
   23484:	2300      	movs	r3, #0
   23486:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   23488:	68e3      	ldr	r3, [r4, #12]
   2348a:	b10b      	cbz	r3, 23490 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2348c:	4620      	mov	r0, r4
   2348e:	4798      	blx	r3
	if (ops->released) {
   23490:	69eb      	ldr	r3, [r5, #28]
   23492:	b11b      	cbz	r3, 2349c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   23494:	4620      	mov	r0, r4
}
   23496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2349a:	4718      	bx	r3
}
   2349c:	bd70      	pop	{r4, r5, r6, pc}

0002349e <bt_l2cap_disconnected>:
	return list->head;
   2349e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   234a0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   234a2:	b18b      	cbz	r3, 234c8 <bt_l2cap_disconnected+0x2a>
   234a4:	f1b3 0008 	subs.w	r0, r3, #8
   234a8:	d00e      	beq.n	234c8 <bt_l2cap_disconnected+0x2a>
	return node->next;
   234aa:	681c      	ldr	r4, [r3, #0]
   234ac:	b104      	cbz	r4, 234b0 <bt_l2cap_disconnected+0x12>
   234ae:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   234b0:	f7ff ffe0 	bl	23474 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   234b4:	b144      	cbz	r4, 234c8 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   234b6:	f114 0308 	adds.w	r3, r4, #8
   234ba:	d002      	beq.n	234c2 <bt_l2cap_disconnected+0x24>
	return node->next;
   234bc:	68a3      	ldr	r3, [r4, #8]
   234be:	b103      	cbz	r3, 234c2 <bt_l2cap_disconnected+0x24>
   234c0:	3b08      	subs	r3, #8
{
   234c2:	4620      	mov	r0, r4
   234c4:	461c      	mov	r4, r3
   234c6:	e7f3      	b.n	234b0 <bt_l2cap_disconnected+0x12>
}
   234c8:	bd10      	pop	{r4, pc}

000234ca <bt_l2cap_security_changed>:
{
   234ca:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   234cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   234ce:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   234d0:	b1a3      	cbz	r3, 234fc <bt_l2cap_security_changed+0x32>
   234d2:	f1b3 0008 	subs.w	r0, r3, #8
   234d6:	d011      	beq.n	234fc <bt_l2cap_security_changed+0x32>
	return node->next;
   234d8:	681c      	ldr	r4, [r3, #0]
   234da:	b104      	cbz	r4, 234de <bt_l2cap_security_changed+0x14>
   234dc:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   234de:	6843      	ldr	r3, [r0, #4]
   234e0:	689b      	ldr	r3, [r3, #8]
   234e2:	b10b      	cbz	r3, 234e8 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   234e4:	4629      	mov	r1, r5
   234e6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   234e8:	b144      	cbz	r4, 234fc <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   234ea:	f114 0308 	adds.w	r3, r4, #8
   234ee:	d002      	beq.n	234f6 <bt_l2cap_security_changed+0x2c>
	return node->next;
   234f0:	68a3      	ldr	r3, [r4, #8]
   234f2:	b103      	cbz	r3, 234f6 <bt_l2cap_security_changed+0x2c>
   234f4:	3b08      	subs	r3, #8
{
   234f6:	4620      	mov	r0, r4
   234f8:	461c      	mov	r4, r3
   234fa:	e7f0      	b.n	234de <bt_l2cap_security_changed+0x14>
}
   234fc:	bd38      	pop	{r3, r4, r5, pc}

000234fe <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   234fe:	3104      	adds	r1, #4
   23500:	f7e7 bb8a 	b.w	ac18 <bt_conn_create_pdu_timeout>

00023504 <bt_l2cap_send_cb>:
{
   23504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23508:	4614      	mov	r4, r2
   2350a:	4605      	mov	r5, r0
   2350c:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   2350e:	f102 0008 	add.w	r0, r2, #8
   23512:	2104      	movs	r1, #4
{
   23514:	461e      	mov	r6, r3
   23516:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   2351a:	f001 ffd7 	bl	254cc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2351e:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   23520:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23522:	3a04      	subs	r2, #4
   23524:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   23526:	4643      	mov	r3, r8
   23528:	4632      	mov	r2, r6
   2352a:	4621      	mov	r1, r4
   2352c:	4628      	mov	r0, r5
}
   2352e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   23532:	f7e6 bfa7 	b.w	a484 <bt_conn_send_cb>

00023536 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   23536:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23538:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2353a:	2202      	movs	r2, #2
   2353c:	2001      	movs	r0, #1
   2353e:	f7e7 fca7 	bl	ae90 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   23542:	4604      	mov	r4, r0
   23544:	b160      	cbz	r0, 23560 <l2cap_send_reject.constprop.0+0x2a>
	rej = net_buf_add(buf, sizeof(*rej));
   23546:	2102      	movs	r1, #2
   23548:	3008      	adds	r0, #8
   2354a:	f001 ff9e 	bl	2548a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2354e:	2300      	movs	r3, #0
   23550:	7003      	strb	r3, [r0, #0]
   23552:	7043      	strb	r3, [r0, #1]
   23554:	4622      	mov	r2, r4
   23556:	9300      	str	r3, [sp, #0]
   23558:	2105      	movs	r1, #5
   2355a:	4628      	mov	r0, r5
   2355c:	f7ff ffd2 	bl	23504 <bt_l2cap_send_cb>
}
   23560:	b003      	add	sp, #12
   23562:	bd30      	pop	{r4, r5, pc}

00023564 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   23564:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23566:	b160      	cbz	r0, 23582 <bt_l2cap_le_lookup_tx_cid+0x1e>
   23568:	3808      	subs	r0, #8
   2356a:	b900      	cbnz	r0, 2356e <bt_l2cap_le_lookup_tx_cid+0xa>
   2356c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2356e:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   23572:	428b      	cmp	r3, r1
   23574:	d005      	beq.n	23582 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23576:	f110 0308 	adds.w	r3, r0, #8
   2357a:	d001      	beq.n	23580 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   2357c:	6880      	ldr	r0, [r0, #8]
   2357e:	e7f2      	b.n	23566 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   23580:	4618      	mov	r0, r3
}
   23582:	4770      	bx	lr

00023584 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   23584:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23586:	b160      	cbz	r0, 235a2 <bt_l2cap_le_lookup_rx_cid+0x1e>
   23588:	3808      	subs	r0, #8
   2358a:	b900      	cbnz	r0, 2358e <bt_l2cap_le_lookup_rx_cid+0xa>
   2358c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2358e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   23592:	428b      	cmp	r3, r1
   23594:	d005      	beq.n	235a2 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23596:	f110 0308 	adds.w	r3, r0, #8
   2359a:	d001      	beq.n	235a0 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   2359c:	6880      	ldr	r0, [r0, #8]
   2359e:	e7f2      	b.n	23586 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   235a0:	4618      	mov	r0, r3
}
   235a2:	4770      	bx	lr

000235a4 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   235a4:	4770      	bx	lr

000235a6 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   235a6:	4603      	mov	r3, r0
	return list->head;
   235a8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   235aa:	b128      	cbz	r0, 235b8 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   235ac:	6859      	ldr	r1, [r3, #4]
	return node->next;
   235ae:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   235b0:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   235b2:	4288      	cmp	r0, r1
	list->tail = node;
   235b4:	bf08      	it	eq
   235b6:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   235b8:	4770      	bx	lr

000235ba <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   235ba:	4603      	mov	r3, r0
	size_t bytes = 0;
   235bc:	2000      	movs	r0, #0

	while (buf) {
   235be:	b903      	cbnz	r3, 235c2 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   235c0:	4770      	bx	lr
		bytes += buf->len;
   235c2:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   235c4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   235c6:	4410      	add	r0, r2
		buf = buf->frags;
   235c8:	e7f9      	b.n	235be <net_buf_frags_len+0x4>

000235ca <att_sent>:
	if (chan->ops->sent) {
   235ca:	684b      	ldr	r3, [r1, #4]
   235cc:	695b      	ldr	r3, [r3, #20]
{
   235ce:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   235d0:	b103      	cbz	r3, 235d4 <att_sent+0xa>
		chan->ops->sent(chan);
   235d2:	4718      	bx	r3
}
   235d4:	4770      	bx	lr

000235d6 <attr_read_type_cb>:
{
   235d6:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   235d8:	68d4      	ldr	r4, [r2, #12]
   235da:	7823      	ldrb	r3, [r4, #0]
   235dc:	3102      	adds	r1, #2
   235de:	b913      	cbnz	r3, 235e6 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   235e0:	7021      	strb	r1, [r4, #0]
	return true;
   235e2:	2001      	movs	r0, #1
   235e4:	e006      	b.n	235f4 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   235e6:	428b      	cmp	r3, r1
   235e8:	d0fb      	beq.n	235e2 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   235ea:	8983      	ldrh	r3, [r0, #12]
   235ec:	3b02      	subs	r3, #2
   235ee:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   235f0:	2000      	movs	r0, #0
   235f2:	6110      	str	r0, [r2, #16]
}
   235f4:	bd10      	pop	{r4, pc}

000235f6 <att_prepare_write_req>:
}
   235f6:	2006      	movs	r0, #6
   235f8:	4770      	bx	lr

000235fa <att_op_get_type>:
	switch (op) {
   235fa:	281e      	cmp	r0, #30
   235fc:	d816      	bhi.n	2362c <att_op_get_type+0x32>
   235fe:	b308      	cbz	r0, 23644 <att_op_get_type+0x4a>
   23600:	1e43      	subs	r3, r0, #1
   23602:	2b1d      	cmp	r3, #29
   23604:	d81e      	bhi.n	23644 <att_op_get_type+0x4a>
   23606:	e8df f003 	tbb	[pc, r3]
   2360a:	2317      	.short	0x2317
   2360c:	23172317 	.word	0x23172317
   23610:	23172317 	.word	0x23172317
   23614:	23172317 	.word	0x23172317
   23618:	23172317 	.word	0x23172317
   2361c:	231d1d17 	.word	0x231d1d17
   23620:	1d172317 	.word	0x1d172317
   23624:	0f1b1d19 	.word	0x0f1b1d19
   23628:	2004      	movs	r0, #4
   2362a:	4770      	bx	lr
   2362c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   23630:	2b52      	cmp	r3, #82	; 0x52
   23632:	d107      	bne.n	23644 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   23634:	2000      	movs	r0, #0
}
   23636:	4770      	bx	lr
		return ATT_RESPONSE;
   23638:	2002      	movs	r0, #2
   2363a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2363c:	2003      	movs	r0, #3
   2363e:	4770      	bx	lr
		return ATT_INDICATION;
   23640:	2005      	movs	r0, #5
   23642:	4770      	bx	lr
		return ATT_COMMAND;
   23644:	f010 0f40 	tst.w	r0, #64	; 0x40
   23648:	bf0c      	ite	eq
   2364a:	2006      	moveq	r0, #6
   2364c:	2000      	movne	r0, #0
   2364e:	4770      	bx	lr
		return ATT_REQUEST;
   23650:	2001      	movs	r0, #1
   23652:	4770      	bx	lr

00023654 <att_notify_mult>:
{
   23654:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   23656:	6803      	ldr	r3, [r0, #0]
   23658:	898a      	ldrh	r2, [r1, #12]
   2365a:	6818      	ldr	r0, [r3, #0]
   2365c:	6889      	ldr	r1, [r1, #8]
   2365e:	f7ea f829 	bl	d6b4 <bt_gatt_mult_notification>
}
   23662:	2000      	movs	r0, #0
   23664:	bd08      	pop	{r3, pc}

00023666 <att_notify>:
{
   23666:	b538      	push	{r3, r4, r5, lr}
   23668:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   2366a:	f101 0008 	add.w	r0, r1, #8
{
   2366e:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   23670:	f001 ff4c 	bl	2550c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   23674:	682d      	ldr	r5, [r5, #0]
   23676:	89a3      	ldrh	r3, [r4, #12]
   23678:	68a2      	ldr	r2, [r4, #8]
	handle = net_buf_pull_le16(buf);
   2367a:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2367c:	6828      	ldr	r0, [r5, #0]
   2367e:	f000 ff96 	bl	245ae <bt_gatt_notification>
}
   23682:	2000      	movs	r0, #0
   23684:	bd38      	pop	{r3, r4, r5, pc}

00023686 <bt_gatt_foreach_attr>:
{
   23686:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   23688:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2368c:	2300      	movs	r3, #0
   2368e:	9300      	str	r3, [sp, #0]
   23690:	461a      	mov	r2, r3
   23692:	f7e9 f9fb 	bl	ca8c <bt_gatt_foreach_attr_type>
}
   23696:	b005      	add	sp, #20
   23698:	f85d fb04 	ldr.w	pc, [sp], #4

0002369c <att_chan_read>:
{
   2369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236a0:	4680      	mov	r8, r0
   236a2:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   236a4:	4610      	mov	r0, r2
{
   236a6:	4699      	mov	r9, r3
   236a8:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   236aa:	f7ff ff86 	bl	235ba <net_buf_frags_len>
   236ae:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   236b2:	4283      	cmp	r3, r0
{
   236b4:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   236b6:	d97a      	bls.n	237ae <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   236b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   236bc:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   236be:	4630      	mov	r0, r6
   236c0:	f001 fec1 	bl	25446 <net_buf_frag_last>
	size_t len, total = 0;
   236c4:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   236c8:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   236ca:	4630      	mov	r0, r6
   236cc:	f7ff ff75 	bl	235ba <net_buf_frags_len>
   236d0:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   236d4:	f105 0708 	add.w	r7, r5, #8
   236d8:	1a24      	subs	r4, r4, r0
   236da:	4638      	mov	r0, r7
   236dc:	f001 ff22 	bl	25524 <net_buf_simple_tailroom>
   236e0:	4284      	cmp	r4, r0
   236e2:	d211      	bcs.n	23708 <att_chan_read+0x6c>
   236e4:	4630      	mov	r0, r6
   236e6:	f7ff ff68 	bl	235ba <net_buf_frags_len>
   236ea:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   236ee:	1a24      	subs	r4, r4, r0
		if (!len) {
   236f0:	bb34      	cbnz	r4, 23740 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   236f2:	79b0      	ldrb	r0, [r6, #6]
   236f4:	f7fa f8d4 	bl	1d8a0 <net_buf_pool_get>
   236f8:	2200      	movs	r2, #0
   236fa:	2300      	movs	r3, #0
   236fc:	f001 fe69 	bl	253d2 <net_buf_alloc_fixed>
			if (!frag) {
   23700:	4605      	mov	r5, r0
   23702:	b930      	cbnz	r0, 23712 <att_chan_read+0x76>
	return total;
   23704:	4657      	mov	r7, sl
   23706:	e02c      	b.n	23762 <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   23708:	4638      	mov	r0, r7
   2370a:	f001 ff0b 	bl	25524 <net_buf_simple_tailroom>
   2370e:	4604      	mov	r4, r0
   23710:	e7ee      	b.n	236f0 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   23712:	4601      	mov	r1, r0
   23714:	4630      	mov	r0, r6
   23716:	f001 fea7 	bl	25468 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2371a:	4630      	mov	r0, r6
   2371c:	f7ff ff4d 	bl	235ba <net_buf_frags_len>
   23720:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   23724:	f105 0708 	add.w	r7, r5, #8
   23728:	1a24      	subs	r4, r4, r0
   2372a:	4638      	mov	r0, r7
   2372c:	f001 fefa 	bl	25524 <net_buf_simple_tailroom>
   23730:	4284      	cmp	r4, r0
   23732:	d21a      	bcs.n	2376a <att_chan_read+0xce>
   23734:	4630      	mov	r0, r6
   23736:	f7ff ff40 	bl	235ba <net_buf_frags_len>
   2373a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2373e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   23740:	68a9      	ldr	r1, [r5, #8]
   23742:	89aa      	ldrh	r2, [r5, #12]
   23744:	f8db 7004 	ldr.w	r7, [fp, #4]
   23748:	9803      	ldr	r0, [sp, #12]
   2374a:	f8cd 9000 	str.w	r9, [sp]
   2374e:	440a      	add	r2, r1
   23750:	b2a3      	uxth	r3, r4
   23752:	4659      	mov	r1, fp
   23754:	47b8      	blx	r7
		if (read < 0) {
   23756:	1e07      	subs	r7, r0, #0
   23758:	da0c      	bge.n	23774 <att_chan_read+0xd8>
				return total;
   2375a:	f1ba 0f00 	cmp.w	sl, #0
   2375e:	bf18      	it	ne
   23760:	4657      	movne	r7, sl
}
   23762:	4638      	mov	r0, r7
   23764:	b005      	add	sp, #20
   23766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2376a:	4638      	mov	r0, r7
   2376c:	f001 feda 	bl	25524 <net_buf_simple_tailroom>
   23770:	4604      	mov	r4, r0
   23772:	e7e5      	b.n	23740 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   23774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23776:	b993      	cbnz	r3, 2379e <att_chan_read+0x102>
		net_buf_add(frag, read);
   23778:	4639      	mov	r1, r7
   2377a:	f105 0008 	add.w	r0, r5, #8
   2377e:	f001 fe84 	bl	2548a <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   23782:	4630      	mov	r0, r6
   23784:	f7ff ff19 	bl	235ba <net_buf_frags_len>
   23788:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   2378c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2378e:	4283      	cmp	r3, r0
		total += read;
   23790:	44ba      	add	sl, r7
		offset += read;
   23792:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   23796:	d9b5      	bls.n	23704 <att_chan_read+0x68>
   23798:	42a7      	cmp	r7, r4
   2379a:	d096      	beq.n	236ca <att_chan_read+0x2e>
   2379c:	e7b2      	b.n	23704 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2379e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   237a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   237a2:	4639      	mov	r1, r7
   237a4:	4628      	mov	r0, r5
   237a6:	4798      	blx	r3
   237a8:	2800      	cmp	r0, #0
   237aa:	d1e5      	bne.n	23778 <att_chan_read+0xdc>
   237ac:	e7aa      	b.n	23704 <att_chan_read+0x68>
		return 0;
   237ae:	2700      	movs	r7, #0
   237b0:	e7d7      	b.n	23762 <att_chan_read+0xc6>

000237b2 <attr_read_group_cb>:
	if (!data->rsp->len) {
   237b2:	68d0      	ldr	r0, [r2, #12]
   237b4:	7803      	ldrb	r3, [r0, #0]
   237b6:	3104      	adds	r1, #4
   237b8:	b913      	cbnz	r3, 237c0 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   237ba:	7001      	strb	r1, [r0, #0]
	return true;
   237bc:	2001      	movs	r0, #1
}
   237be:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   237c0:	428b      	cmp	r3, r1
   237c2:	d0fb      	beq.n	237bc <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   237c4:	6891      	ldr	r1, [r2, #8]
   237c6:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   237c8:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   237ca:	3b04      	subs	r3, #4
   237cc:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   237ce:	6110      	str	r0, [r2, #16]
		return false;
   237d0:	4770      	bx	lr

000237d2 <write_cb>:
{
   237d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   237d4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   237d6:	4601      	mov	r1, r0
{
   237d8:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   237da:	222a      	movs	r2, #42	; 0x2a
   237dc:	6820      	ldr	r0, [r4, #0]
   237de:	f000 fd80 	bl	242e2 <bt_gatt_check_perm>
   237e2:	4605      	mov	r5, r0
   237e4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   237e6:	bb00      	cbnz	r0, 2382a <write_cb+0x58>
	if (!data->req) {
   237e8:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   237ea:	68b7      	ldr	r7, [r6, #8]
   237ec:	68e2      	ldr	r2, [r4, #12]
   237ee:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   237f0:	2b00      	cmp	r3, #0
   237f2:	bf14      	ite	ne
   237f4:	2300      	movne	r3, #0
   237f6:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   237f8:	9301      	str	r3, [sp, #4]
   237fa:	8a63      	ldrh	r3, [r4, #18]
   237fc:	9300      	str	r3, [sp, #0]
   237fe:	4631      	mov	r1, r6
   23800:	8a23      	ldrh	r3, [r4, #16]
   23802:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   23804:	1e03      	subs	r3, r0, #0
   23806:	db05      	blt.n	23814 <write_cb+0x42>
   23808:	8a22      	ldrh	r2, [r4, #16]
   2380a:	4293      	cmp	r3, r2
   2380c:	d10b      	bne.n	23826 <write_cb+0x54>
	data->err = 0U;
   2380e:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   23810:	2501      	movs	r5, #1
   23812:	e005      	b.n	23820 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   23814:	f113 0fff 	cmn.w	r3, #255	; 0xff
   23818:	d305      	bcc.n	23826 <write_cb+0x54>
		return -err;
   2381a:	425b      	negs	r3, r3
   2381c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2381e:	7523      	strb	r3, [r4, #20]
}
   23820:	4628      	mov	r0, r5
   23822:	b003      	add	sp, #12
   23824:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   23826:	230e      	movs	r3, #14
   23828:	e7f9      	b.n	2381e <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   2382a:	2500      	movs	r5, #0
   2382c:	e7f8      	b.n	23820 <write_cb+0x4e>

0002382e <find_info_cb>:
{
   2382e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   23830:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   23832:	6816      	ldr	r6, [r2, #0]
{
   23834:	4605      	mov	r5, r0
   23836:	460f      	mov	r7, r1
   23838:	4614      	mov	r4, r2
	if (!data->rsp) {
   2383a:	b963      	cbnz	r3, 23856 <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2383c:	6850      	ldr	r0, [r2, #4]
   2383e:	2101      	movs	r1, #1
   23840:	3008      	adds	r0, #8
   23842:	f001 fe22 	bl	2548a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   23846:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23848:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2384a:	781b      	ldrb	r3, [r3, #0]
   2384c:	2b00      	cmp	r3, #0
   2384e:	bf0c      	ite	eq
   23850:	2301      	moveq	r3, #1
   23852:	2302      	movne	r3, #2
   23854:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   23856:	68a3      	ldr	r3, [r4, #8]
   23858:	781b      	ldrb	r3, [r3, #0]
   2385a:	2b01      	cmp	r3, #1
   2385c:	d003      	beq.n	23866 <find_info_cb+0x38>
   2385e:	2b02      	cmp	r3, #2
   23860:	d019      	beq.n	23896 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   23862:	2000      	movs	r0, #0
   23864:	e016      	b.n	23894 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   23866:	682b      	ldr	r3, [r5, #0]
   23868:	781b      	ldrb	r3, [r3, #0]
   2386a:	2b00      	cmp	r3, #0
   2386c:	d1f9      	bne.n	23862 <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2386e:	6860      	ldr	r0, [r4, #4]
   23870:	2104      	movs	r1, #4
   23872:	3008      	adds	r0, #8
   23874:	f001 fe09 	bl	2548a <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   23878:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2387a:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2387c:	885b      	ldrh	r3, [r3, #2]
   2387e:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   23880:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   23882:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   23884:	899b      	ldrh	r3, [r3, #12]
   23886:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   2388a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2388c:	2804      	cmp	r0, #4
   2388e:	bf94      	ite	ls
   23890:	2000      	movls	r0, #0
   23892:	2001      	movhi	r0, #1
}
   23894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   23896:	682b      	ldr	r3, [r5, #0]
   23898:	781b      	ldrb	r3, [r3, #0]
   2389a:	2b02      	cmp	r3, #2
   2389c:	d1e1      	bne.n	23862 <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2389e:	6860      	ldr	r0, [r4, #4]
   238a0:	2112      	movs	r1, #18
   238a2:	3008      	adds	r0, #8
   238a4:	f001 fdf1 	bl	2548a <net_buf_simple_add>
   238a8:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   238aa:	682a      	ldr	r2, [r5, #0]
   238ac:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   238ae:	f823 7b02 	strh.w	r7, [r3], #2
   238b2:	1c51      	adds	r1, r2, #1
   238b4:	3211      	adds	r2, #17
   238b6:	f851 0b04 	ldr.w	r0, [r1], #4
   238ba:	f843 0b04 	str.w	r0, [r3], #4
   238be:	4291      	cmp	r1, r2
   238c0:	d1f9      	bne.n	238b6 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   238c2:	6863      	ldr	r3, [r4, #4]
   238c4:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   238c8:	899b      	ldrh	r3, [r3, #12]
   238ca:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   238cc:	2812      	cmp	r0, #18
   238ce:	e7de      	b.n	2388e <find_info_cb+0x60>

000238d0 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   238d0:	b510      	push	{r4, lr}
	return list->head;
   238d2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   238d4:	2200      	movs	r2, #0
   238d6:	b153      	cbz	r3, 238ee <sys_slist_find_and_remove.isra.0+0x1e>
   238d8:	428b      	cmp	r3, r1
   238da:	d10e      	bne.n	238fa <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   238dc:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   238de:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   238e0:	b932      	cbnz	r2, 238f0 <sys_slist_find_and_remove.isra.0+0x20>
   238e2:	42a1      	cmp	r1, r4
	list->head = node;
   238e4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   238e6:	d100      	bne.n	238ea <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   238e8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   238ea:	2300      	movs	r3, #0
   238ec:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   238ee:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   238f0:	42a1      	cmp	r1, r4
	parent->next = child;
   238f2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   238f4:	bf08      	it	eq
   238f6:	6042      	streq	r2, [r0, #4]
}
   238f8:	e7f7      	b.n	238ea <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   238fa:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   238fc:	681b      	ldr	r3, [r3, #0]
   238fe:	e7ea      	b.n	238d6 <sys_slist_find_and_remove.isra.0+0x6>

00023900 <att_exec_write_req>:
   23900:	2006      	movs	r0, #6
   23902:	4770      	bx	lr

00023904 <chan_req_send>:
{
   23904:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   23906:	690e      	ldr	r6, [r1, #16]
{
   23908:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2390a:	4630      	mov	r0, r6
   2390c:	f7ff fe55 	bl	235ba <net_buf_frags_len>
   23910:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   23914:	4283      	cmp	r3, r0
{
   23916:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   23918:	d317      	bcc.n	2394a <chan_req_send+0x46>
	chan->req = req;
   2391a:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   2391e:	f106 0008 	add.w	r0, r6, #8
   23922:	f001 fdfb 	bl	2551c <net_buf_simple_headroom>
	state->len = buf->len;
   23926:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   23928:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   2392a:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   2392c:	6920      	ldr	r0, [r4, #16]
   2392e:	f001 fd86 	bl	2543e <net_buf_ref>
   23932:	2200      	movs	r2, #0
   23934:	4601      	mov	r1, r0
   23936:	4628      	mov	r0, r5
   23938:	f7e7 fe5a 	bl	b5f0 <chan_send>
	if (err) {
   2393c:	4605      	mov	r5, r0
   2393e:	b110      	cbz	r0, 23946 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   23940:	6920      	ldr	r0, [r4, #16]
   23942:	f7fa f86b 	bl	1da1c <net_buf_unref>
}
   23946:	4628      	mov	r0, r5
   23948:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2394a:	f06f 0579 	mvn.w	r5, #121	; 0x79
   2394e:	e7fa      	b.n	23946 <chan_req_send+0x42>

00023950 <bt_att_chan_req_send>:
{
   23950:	b570      	push	{r4, r5, r6, lr}
   23952:	4604      	mov	r4, r0
   23954:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   23956:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   2395a:	2200      	movs	r2, #0
   2395c:	2300      	movs	r3, #0
   2395e:	4630      	mov	r0, r6
   23960:	f7fb fde4 	bl	1f52c <z_impl_k_sem_take>
   23964:	2800      	cmp	r0, #0
   23966:	db0a      	blt.n	2397e <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   23968:	4620      	mov	r0, r4
   2396a:	4629      	mov	r1, r5
   2396c:	f7ff ffca 	bl	23904 <chan_req_send>
	if (err < 0) {
   23970:	1e04      	subs	r4, r0, #0
   23972:	da02      	bge.n	2397a <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   23974:	4630      	mov	r0, r6
   23976:	f7fb fdb3 	bl	1f4e0 <z_impl_k_sem_give>
}
   2397a:	4620      	mov	r0, r4
   2397c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   2397e:	f06f 040a 	mvn.w	r4, #10
   23982:	e7fa      	b.n	2397a <bt_att_chan_req_send+0x2a>

00023984 <bt_att_chan_send>:
{
   23984:	b570      	push	{r4, r5, r6, lr}
   23986:	4604      	mov	r4, r0
   23988:	460e      	mov	r6, r1
	if (!cb) {
   2398a:	4615      	mov	r5, r2
   2398c:	b132      	cbz	r2, 2399c <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   2398e:	462a      	mov	r2, r5
   23990:	4631      	mov	r1, r6
   23992:	4620      	mov	r0, r4
}
   23994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   23998:	f7e7 be2a 	b.w	b5f0 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   2399c:	2200      	movs	r2, #0
   2399e:	2300      	movs	r3, #0
   239a0:	f500 7088 	add.w	r0, r0, #272	; 0x110
   239a4:	f7fb fdc2 	bl	1f52c <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   239a8:	2800      	cmp	r0, #0
   239aa:	daf0      	bge.n	2398e <bt_att_chan_send+0xa>
}
   239ac:	f06f 000a 	mvn.w	r0, #10
   239b0:	bd70      	pop	{r4, r5, r6, pc}

000239b2 <bt_att_chan_send_rsp>:
{
   239b2:	b538      	push	{r3, r4, r5, lr}
   239b4:	4604      	mov	r4, r0
   239b6:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   239b8:	f7ff ffe4 	bl	23984 <bt_att_chan_send>
	if (err) {
   239bc:	b130      	cbz	r0, 239cc <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   239be:	4629      	mov	r1, r5
   239c0:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   239c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   239c8:	f001 bd2c 	b.w	25424 <net_buf_put>
}
   239cc:	bd38      	pop	{r3, r4, r5, pc}

000239ce <process_queue>:
{
   239ce:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   239d0:	2200      	movs	r2, #0
{
   239d2:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   239d4:	2300      	movs	r3, #0
   239d6:	4608      	mov	r0, r1
{
   239d8:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   239da:	f001 fcff 	bl	253dc <net_buf_get>
	if (buf) {
   239de:	4605      	mov	r5, r0
   239e0:	b160      	cbz	r0, 239fc <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   239e2:	4601      	mov	r1, r0
   239e4:	2200      	movs	r2, #0
   239e6:	4620      	mov	r0, r4
   239e8:	f7e7 fe02 	bl	b5f0 <chan_send>
		if (err) {
   239ec:	4604      	mov	r4, r0
   239ee:	b118      	cbz	r0, 239f8 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   239f0:	4629      	mov	r1, r5
   239f2:	4630      	mov	r0, r6
   239f4:	f002 f86c 	bl	25ad0 <k_queue_prepend>
}
   239f8:	4620      	mov	r0, r4
   239fa:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   239fc:	f06f 0401 	mvn.w	r4, #1
   23a00:	e7fa      	b.n	239f8 <process_queue+0x2a>

00023a02 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23a02:	30c0      	adds	r0, #192	; 0xc0
   23a04:	f3bf 8f5b 	dmb	ish
   23a08:	e850 3f00 	ldrex	r3, [r0]
   23a0c:	f023 0301 	bic.w	r3, r3, #1
   23a10:	e840 3200 	strex	r2, r3, [r0]
   23a14:	2a00      	cmp	r2, #0
   23a16:	d1f7      	bne.n	23a08 <chan_rsp_sent+0x6>
   23a18:	f3bf 8f5b 	dmb	ish
}
   23a1c:	4770      	bx	lr

00023a1e <chan_cfm_sent>:
   23a1e:	30c0      	adds	r0, #192	; 0xc0
   23a20:	f3bf 8f5b 	dmb	ish
   23a24:	e850 3f00 	ldrex	r3, [r0]
   23a28:	f023 0302 	bic.w	r3, r3, #2
   23a2c:	e840 3200 	strex	r2, r3, [r0]
   23a30:	2a00      	cmp	r2, #0
   23a32:	d1f7      	bne.n	23a24 <chan_cfm_sent+0x6>
   23a34:	f3bf 8f5b 	dmb	ish
}
   23a38:	4770      	bx	lr

00023a3a <read_cb>:
{
   23a3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23a3e:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23a40:	6890      	ldr	r0, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   23a42:	f8d2 8000 	ldr.w	r8, [r2]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23a46:	2100      	movs	r1, #0
   23a48:	3008      	adds	r0, #8
{
   23a4a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   23a4c:	f8d8 5008 	ldr.w	r5, [r8, #8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23a50:	f001 fd1b 	bl	2548a <net_buf_simple_add>
	data->err = 0x00;
   23a54:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23a56:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   23a58:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   23a5a:	4628      	mov	r0, r5
   23a5c:	2215      	movs	r2, #21
   23a5e:	4631      	mov	r1, r6
   23a60:	f000 fc3f 	bl	242e2 <bt_gatt_check_perm>
   23a64:	4605      	mov	r5, r0
   23a66:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   23a68:	b9a0      	cbnz	r0, 23a94 <read_cb+0x5a>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   23a6a:	e9cd 0000 	strd	r0, r0, [sp]
   23a6e:	88a3      	ldrh	r3, [r4, #4]
   23a70:	68a2      	ldr	r2, [r4, #8]
   23a72:	4631      	mov	r1, r6
   23a74:	4640      	mov	r0, r8
   23a76:	f7ff fe11 	bl	2369c <att_chan_read>
	if (ret < 0) {
   23a7a:	1e03      	subs	r3, r0, #0
   23a7c:	da0c      	bge.n	23a98 <read_cb+0x5e>
	if (err < 0 && err >= -0xff) {
   23a7e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   23a82:	bf26      	itte	cs
   23a84:	425b      	negcs	r3, r3
   23a86:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   23a88:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   23a8a:	7423      	strb	r3, [r4, #16]
}
   23a8c:	4628      	mov	r0, r5
   23a8e:	b002      	add	sp, #8
   23a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   23a94:	463d      	mov	r5, r7
   23a96:	e7f9      	b.n	23a8c <read_cb+0x52>
	return BT_GATT_ITER_CONTINUE;
   23a98:	2501      	movs	r5, #1
   23a9a:	e7f7      	b.n	23a8c <read_cb+0x52>

00023a9c <bt_att_sent>:
{
   23a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   23a9e:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   23aa2:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   23aa6:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   23aa8:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   23aac:	b10b      	cbz	r3, 23ab2 <bt_att_sent+0x16>
		chan->sent(chan);
   23aae:	4638      	mov	r0, r7
   23ab0:	4798      	blx	r3
   23ab2:	f3bf 8f5b 	dmb	ish
   23ab6:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   23aba:	e853 2f00 	ldrex	r2, [r3]
   23abe:	f022 0210 	bic.w	r2, r2, #16
   23ac2:	e843 2100 	strex	r1, r2, [r3]
   23ac6:	2900      	cmp	r1, #0
   23ac8:	d1f7      	bne.n	23aba <bt_att_sent+0x1e>
   23aca:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   23ace:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   23ad2:	b98b      	cbnz	r3, 23af8 <bt_att_sent+0x5c>
   23ad4:	686b      	ldr	r3, [r5, #4]
   23ad6:	b17b      	cbz	r3, 23af8 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   23ad8:	1d28      	adds	r0, r5, #4
   23ada:	f7ff fd64 	bl	235a6 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23ade:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   23ae0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23ae2:	4638      	mov	r0, r7
   23ae4:	f7ff ff0e 	bl	23904 <chan_req_send>
   23ae8:	2800      	cmp	r0, #0
   23aea:	da17      	bge.n	23b1c <bt_att_sent+0x80>
	parent->next = child;
   23aec:	686b      	ldr	r3, [r5, #4]
   23aee:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   23af0:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   23af2:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   23af4:	b903      	cbnz	r3, 23af8 <bt_att_sent+0x5c>
	list->tail = node;
   23af6:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   23af8:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   23afc:	4638      	mov	r0, r7
   23afe:	f7ff ff66 	bl	239ce <process_queue>
	if (!err) {
   23b02:	b158      	cbz	r0, 23b1c <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   23b04:	f105 010c 	add.w	r1, r5, #12
   23b08:	4638      	mov	r0, r7
   23b0a:	f7ff ff60 	bl	239ce <process_queue>
	if (!err) {
   23b0e:	b128      	cbz	r0, 23b1c <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   23b10:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   23b14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23b18:	f7fb bce2 	b.w	1f4e0 <z_impl_k_sem_give>
   23b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023b1e <bt_att_status>:
{
   23b1e:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23b20:	f3bf 8f5b 	dmb	ish
   23b24:	680b      	ldr	r3, [r1, #0]
   23b26:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   23b2a:	07db      	lsls	r3, r3, #31
{
   23b2c:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   23b2e:	d518      	bpl.n	23b62 <bt_att_status+0x44>
	if (chan->req) {
   23b30:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   23b34:	b9ab      	cbnz	r3, 23b62 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   23b36:	f850 0c08 	ldr.w	r0, [r0, #-8]
   23b3a:	3004      	adds	r0, #4
   23b3c:	f7ff fd33 	bl	235a6 <sys_slist_get>
	if (!node) {
   23b40:	4604      	mov	r4, r0
   23b42:	b170      	cbz	r0, 23b62 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23b44:	4601      	mov	r1, r0
   23b46:	f1a5 0008 	sub.w	r0, r5, #8
   23b4a:	f7ff ff01 	bl	23950 <bt_att_chan_req_send>
   23b4e:	2800      	cmp	r0, #0
   23b50:	da07      	bge.n	23b62 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   23b52:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   23b56:	685a      	ldr	r2, [r3, #4]
   23b58:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   23b5a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   23b5c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   23b5e:	b902      	cbnz	r2, 23b62 <bt_att_status+0x44>
	list->tail = node;
   23b60:	609c      	str	r4, [r3, #8]
}
   23b62:	bd38      	pop	{r3, r4, r5, pc}

00023b64 <att_write_req>:
{
   23b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23b66:	460c      	mov	r4, r1
   23b68:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   23b6a:	f101 0008 	add.w	r0, r1, #8
   23b6e:	f001 fccd 	bl	2550c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   23b72:	89a2      	ldrh	r2, [r4, #12]
   23b74:	9201      	str	r2, [sp, #4]
   23b76:	68a2      	ldr	r2, [r4, #8]
   23b78:	9200      	str	r2, [sp, #0]
	handle = net_buf_pull_le16(buf);
   23b7a:	4603      	mov	r3, r0
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   23b7c:	2213      	movs	r2, #19
   23b7e:	2112      	movs	r1, #18
   23b80:	4628      	mov	r0, r5
   23b82:	f7e7 ff4f 	bl	ba24 <att_write_rsp.constprop.0>
}
   23b86:	b003      	add	sp, #12
   23b88:	bd30      	pop	{r4, r5, pc}

00023b8a <att_write_cmd>:
{
   23b8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23b8c:	460c      	mov	r4, r1
   23b8e:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   23b90:	f101 0008 	add.w	r0, r1, #8
   23b94:	f001 fcba 	bl	2550c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   23b98:	89a2      	ldrh	r2, [r4, #12]
   23b9a:	9201      	str	r2, [sp, #4]
   23b9c:	68a2      	ldr	r2, [r4, #8]
   23b9e:	9200      	str	r2, [sp, #0]
   23ba0:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   23ba2:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   23ba4:	4611      	mov	r1, r2
   23ba6:	4628      	mov	r0, r5
   23ba8:	f7e7 ff3c 	bl	ba24 <att_write_rsp.constprop.0>
}
   23bac:	b003      	add	sp, #12
   23bae:	bd30      	pop	{r4, r5, pc}

00023bb0 <att_read_blob_req>:
{
   23bb0:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   23bb2:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   23bb4:	8813      	ldrh	r3, [r2, #0]
   23bb6:	8852      	ldrh	r2, [r2, #2]
   23bb8:	9200      	str	r2, [sp, #0]
   23bba:	210c      	movs	r1, #12
   23bbc:	220d      	movs	r2, #13
   23bbe:	f7e8 f897 	bl	bcf0 <att_read_rsp>
}
   23bc2:	b003      	add	sp, #12
   23bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00023bc8 <att_read_req>:
{
   23bc8:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   23bca:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   23bcc:	2200      	movs	r2, #0
   23bce:	881b      	ldrh	r3, [r3, #0]
   23bd0:	9200      	str	r2, [sp, #0]
   23bd2:	210a      	movs	r1, #10
   23bd4:	220b      	movs	r2, #11
   23bd6:	f7e8 f88b 	bl	bcf0 <att_read_rsp>
}
   23bda:	b003      	add	sp, #12
   23bdc:	f85d fb04 	ldr.w	pc, [sp], #4

00023be0 <bt_att_init>:
	bt_gatt_init();
   23be0:	f7e8 becc 	b.w	c97c <bt_gatt_init>

00023be4 <att_req_destroy>:
{
   23be4:	b510      	push	{r4, lr}
   23be6:	4604      	mov	r4, r0
	if (req->buf) {
   23be8:	6900      	ldr	r0, [r0, #16]
   23bea:	b108      	cbz	r0, 23bf0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   23bec:	f7f9 ff16 	bl	1da1c <net_buf_unref>
	if (req->destroy) {
   23bf0:	68a3      	ldr	r3, [r4, #8]
   23bf2:	b10b      	cbz	r3, 23bf8 <att_req_destroy+0x14>
		req->destroy(req);
   23bf4:	4620      	mov	r0, r4
   23bf6:	4798      	blx	r3
	bt_att_req_free(req);
   23bf8:	4620      	mov	r0, r4
}
   23bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   23bfe:	f7e8 ba1d 	b.w	c03c <bt_att_req_free>

00023c02 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   23c02:	898a      	ldrh	r2, [r1, #12]
   23c04:	6889      	ldr	r1, [r1, #8]
   23c06:	2300      	movs	r3, #0
   23c08:	f7e8 ba24 	b.w	c054 <att_handle_rsp>

00023c0c <att_handle_find_type_rsp>:
   23c0c:	f7ff bff9 	b.w	23c02 <att_handle_find_info_rsp>

00023c10 <att_handle_read_type_rsp>:
   23c10:	f7ff bff7 	b.w	23c02 <att_handle_find_info_rsp>

00023c14 <att_handle_read_rsp>:
   23c14:	f7ff bff5 	b.w	23c02 <att_handle_find_info_rsp>

00023c18 <att_handle_read_blob_rsp>:
   23c18:	f7ff bff3 	b.w	23c02 <att_handle_find_info_rsp>

00023c1c <att_handle_read_mult_rsp>:
   23c1c:	f7ff bff1 	b.w	23c02 <att_handle_find_info_rsp>

00023c20 <att_handle_read_group_rsp>:
   23c20:	f7ff bfef 	b.w	23c02 <att_handle_find_info_rsp>

00023c24 <att_handle_write_rsp>:
   23c24:	f7ff bfed 	b.w	23c02 <att_handle_find_info_rsp>

00023c28 <att_handle_prepare_write_rsp>:
   23c28:	f7ff bfeb 	b.w	23c02 <att_handle_find_info_rsp>

00023c2c <att_handle_exec_write_rsp>:
   23c2c:	f7ff bfe9 	b.w	23c02 <att_handle_find_info_rsp>

00023c30 <att_confirm>:
   23c30:	f7ff bfe7 	b.w	23c02 <att_handle_find_info_rsp>

00023c34 <att_mtu_rsp>:
{
   23c34:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   23c36:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   23c38:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   23c3a:	2b16      	cmp	r3, #22
{
   23c3c:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   23c3e:	d805      	bhi.n	23c4c <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   23c40:	2200      	movs	r2, #0
   23c42:	2304      	movs	r3, #4
   23c44:	4611      	mov	r1, r2
}
   23c46:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   23c48:	f7e8 ba04 	b.w	c054 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   23c4c:	2b41      	cmp	r3, #65	; 0x41
   23c4e:	bf28      	it	cs
   23c50:	2341      	movcs	r3, #65	; 0x41
   23c52:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   23c56:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   23c5a:	8992      	ldrh	r2, [r2, #12]
   23c5c:	2300      	movs	r3, #0
   23c5e:	e7f2      	b.n	23c46 <att_mtu_rsp+0x12>

00023c60 <bt_att_encrypt_change>:
{
   23c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c64:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   23c66:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
   23c6a:	460d      	mov	r5, r1
   23c6c:	b151      	cbz	r1, 23c84 <bt_att_encrypt_change+0x24>
		if (att_chan->req) {
   23c6e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   23c72:	b1f3      	cbz	r3, 23cb2 <bt_att_encrypt_change+0x52>
			att_handle_rsp(att_chan, NULL, 0,
   23c74:	2200      	movs	r2, #0
   23c76:	4630      	mov	r0, r6
   23c78:	2305      	movs	r3, #5
}
   23c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
   23c7e:	4611      	mov	r1, r2
   23c80:	f7e8 b9e8 	b.w	c054 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   23c84:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
   23c86:	4638      	mov	r0, r7
   23c88:	f7e9 fdb0 	bl	d7ec <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   23c8c:	7a7b      	ldrb	r3, [r7, #9]
   23c8e:	2b01      	cmp	r3, #1
   23c90:	d00f      	beq.n	23cb2 <bt_att_encrypt_change+0x52>
	if (!att_chan->req || !att_chan->req->retrying) {
   23c92:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   23c96:	b163      	cbz	r3, 23cb2 <bt_att_encrypt_change+0x52>
   23c98:	7d1a      	ldrb	r2, [r3, #20]
   23c9a:	b152      	cbz	r2, 23cb2 <bt_att_encrypt_change+0x52>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   23c9c:	6919      	ldr	r1, [r3, #16]
   23c9e:	6888      	ldr	r0, [r1, #8]
   23ca0:	f7e7 fc96 	bl	b5d0 <chan_cb.isra.0>
   23ca4:	4602      	mov	r2, r0
   23ca6:	4630      	mov	r0, r6
   23ca8:	f7ff fe83 	bl	239b2 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
   23cac:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   23cb0:	611d      	str	r5, [r3, #16]
}
   23cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023cb6 <att_chan_detach>:
{
   23cb6:	b538      	push	{r3, r4, r5, lr}
   23cb8:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   23cba:	6800      	ldr	r0, [r0, #0]
   23cbc:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   23cc0:	3024      	adds	r0, #36	; 0x24
   23cc2:	f7ff fe05 	bl	238d0 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   23cc6:	f504 7588 	add.w	r5, r4, #272	; 0x110
   23cca:	4628      	mov	r0, r5
   23ccc:	f7fb fc08 	bl	1f4e0 <z_impl_k_sem_give>
   23cd0:	4628      	mov	r0, r5
   23cd2:	f7fb fc05 	bl	1f4e0 <z_impl_k_sem_give>
   23cd6:	4628      	mov	r0, r5
   23cd8:	f7fb fc02 	bl	1f4e0 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   23cdc:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   23ce0:	2200      	movs	r2, #0
   23ce2:	2300      	movs	r3, #0
   23ce4:	4628      	mov	r0, r5
   23ce6:	f001 fb79 	bl	253dc <net_buf_get>
   23cea:	4602      	mov	r2, r0
   23cec:	b950      	cbnz	r0, 23d04 <att_chan_detach+0x4e>
	if (chan->req) {
   23cee:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   23cf2:	b123      	cbz	r3, 23cfe <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   23cf4:	4601      	mov	r1, r0
   23cf6:	230e      	movs	r3, #14
   23cf8:	4620      	mov	r0, r4
   23cfa:	f7e8 f9ab 	bl	c054 <att_handle_rsp>
	chan->att = NULL;
   23cfe:	2300      	movs	r3, #0
   23d00:	6023      	str	r3, [r4, #0]
}
   23d02:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   23d04:	f7f9 fe8a 	bl	1da1c <net_buf_unref>
   23d08:	e7ea      	b.n	23ce0 <att_chan_detach+0x2a>

00023d0a <bt_att_disconnected>:
{
   23d0a:	b538      	push	{r3, r4, r5, lr}
   23d0c:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   23d0e:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   23d12:	f7ff ffd0 	bl	23cb6 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   23d16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23d18:	b93b      	cbnz	r3, 23d2a <bt_att_disconnected+0x20>
	att_reset(att);
   23d1a:	4628      	mov	r0, r5
   23d1c:	f7e8 fa50 	bl	c1c0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   23d20:	6820      	ldr	r0, [r4, #0]
}
   23d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   23d26:	f7e9 bd91 	b.w	d84c <bt_gatt_disconnected>
}
   23d2a:	bd38      	pop	{r3, r4, r5, pc}

00023d2c <bt_att_send>:
{
   23d2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23d30:	4605      	mov	r5, r0
   23d32:	460e      	mov	r6, r1
   23d34:	4614      	mov	r4, r2
   23d36:	4698      	mov	r8, r3
	att = att_get(conn);
   23d38:	f7e7 fa7c 	bl	b234 <att_get>
	if (!att) {
   23d3c:	4607      	mov	r7, r0
   23d3e:	b938      	cbnz	r0, 23d50 <bt_att_send+0x24>
		net_buf_unref(buf);
   23d40:	4630      	mov	r0, r6
   23d42:	f7f9 fe6b 	bl	1da1c <net_buf_unref>
		return -ENOTCONN;
   23d46:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   23d4a:	b002      	add	sp, #8
   23d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   23d50:	b144      	cbz	r4, 23d64 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   23d52:	f8cd 8000 	str.w	r8, [sp]
   23d56:	4623      	mov	r3, r4
   23d58:	4632      	mov	r2, r6
   23d5a:	2104      	movs	r1, #4
   23d5c:	4628      	mov	r0, r5
   23d5e:	f7ff fbd1 	bl	23504 <bt_l2cap_send_cb>
   23d62:	e7f2      	b.n	23d4a <bt_att_send+0x1e>
	return list->head;
   23d64:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23d66:	b184      	cbz	r4, 23d8a <bt_att_send+0x5e>
   23d68:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   23d6c:	d00f      	beq.n	23d8e <bt_att_send+0x62>
	return node->next;
   23d6e:	6824      	ldr	r4, [r4, #0]
   23d70:	b10c      	cbz	r4, 23d76 <bt_att_send+0x4a>
   23d72:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   23d76:	2000      	movs	r0, #0
   23d78:	b95d      	cbnz	r5, 23d92 <bt_att_send+0x66>
	if (ret < 0) {
   23d7a:	b188      	cbz	r0, 23da0 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   23d7c:	f107 000c 	add.w	r0, r7, #12
   23d80:	4631      	mov	r1, r6
   23d82:	f001 fb4f 	bl	25424 <net_buf_put>
	return 0;
   23d86:	4628      	mov	r0, r5
   23d88:	e7df      	b.n	23d4a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23d8a:	4625      	mov	r5, r4
   23d8c:	e7f3      	b.n	23d76 <bt_att_send+0x4a>
   23d8e:	462c      	mov	r4, r5
   23d90:	e7f1      	b.n	23d76 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   23d92:	2200      	movs	r2, #0
   23d94:	4631      	mov	r1, r6
   23d96:	4628      	mov	r0, r5
   23d98:	f7ff fdf4 	bl	23984 <bt_att_chan_send>
		if (ret >= 0) {
   23d9c:	2800      	cmp	r0, #0
   23d9e:	db01      	blt.n	23da4 <bt_att_send+0x78>
	return 0;
   23da0:	2000      	movs	r0, #0
   23da2:	e7d2      	b.n	23d4a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23da4:	b154      	cbz	r4, 23dbc <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23da6:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   23daa:	d004      	beq.n	23db6 <bt_att_send+0x8a>
	return node->next;
   23dac:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   23db0:	b10b      	cbz	r3, 23db6 <bt_att_send+0x8a>
   23db2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   23db6:	4625      	mov	r5, r4
   23db8:	461c      	mov	r4, r3
   23dba:	e7dd      	b.n	23d78 <bt_att_send+0x4c>
   23dbc:	4623      	mov	r3, r4
   23dbe:	e7fa      	b.n	23db6 <bt_att_send+0x8a>

00023dc0 <bt_att_req_send>:
{
   23dc0:	b570      	push	{r4, r5, r6, lr}
   23dc2:	460c      	mov	r4, r1
	att = att_get(conn);
   23dc4:	f7e7 fa36 	bl	b234 <att_get>
	if (!att) {
   23dc8:	4605      	mov	r5, r0
   23dca:	b930      	cbnz	r0, 23dda <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   23dcc:	6920      	ldr	r0, [r4, #16]
   23dce:	f7f9 fe25 	bl	1da1c <net_buf_unref>
		req->buf = NULL;
   23dd2:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   23dd4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   23dd8:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   23dda:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23ddc:	b153      	cbz	r3, 23df4 <bt_att_req_send+0x34>
   23dde:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   23de2:	d007      	beq.n	23df4 <bt_att_req_send+0x34>
	return node->next;
   23de4:	681e      	ldr	r6, [r3, #0]
   23de6:	b10e      	cbz	r6, 23dec <bt_att_req_send+0x2c>
   23de8:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   23dec:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   23df0:	b143      	cbz	r3, 23e04 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23df2:	b96e      	cbnz	r6, 23e10 <bt_att_req_send+0x50>
	return list->tail;
   23df4:	68ab      	ldr	r3, [r5, #8]
	parent->next = child;
   23df6:	2000      	movs	r0, #0
   23df8:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   23dfa:	b9a3      	cbnz	r3, 23e26 <bt_att_req_send+0x66>
	list->head = node;
   23dfc:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   23e00:	4618      	mov	r0, r3
}
   23e02:	e7e9      	b.n	23dd8 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   23e04:	4621      	mov	r1, r4
   23e06:	f7ff fda3 	bl	23950 <bt_att_chan_req_send>
			if (ret >= 0) {
   23e0a:	2800      	cmp	r0, #0
   23e0c:	dbf1      	blt.n	23df2 <bt_att_req_send+0x32>
   23e0e:	e7e3      	b.n	23dd8 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23e10:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   23e14:	d004      	beq.n	23e20 <bt_att_req_send+0x60>
	return node->next;
   23e16:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23e1a:	b10b      	cbz	r3, 23e20 <bt_att_req_send+0x60>
   23e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   23e20:	4630      	mov	r0, r6
   23e22:	461e      	mov	r6, r3
   23e24:	e7e2      	b.n	23dec <bt_att_req_send+0x2c>
	parent->next = child;
   23e26:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23e28:	60ac      	str	r4, [r5, #8]
}
   23e2a:	e7d5      	b.n	23dd8 <bt_att_req_send+0x18>

00023e2c <gatt_ccc_changed>:
{
   23e2c:	460b      	mov	r3, r1
   23e2e:	8909      	ldrh	r1, [r1, #8]
   23e30:	8a5a      	ldrh	r2, [r3, #18]
   23e32:	4291      	cmp	r1, r2
   23e34:	bf38      	it	cc
   23e36:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   23e38:	8a9a      	ldrh	r2, [r3, #20]
   23e3a:	428a      	cmp	r2, r1
   23e3c:	d003      	beq.n	23e46 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   23e3e:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   23e40:	699b      	ldr	r3, [r3, #24]
   23e42:	b103      	cbz	r3, 23e46 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   23e44:	4718      	bx	r3
}
   23e46:	4770      	bx	lr

00023e48 <gatt_indicate_rsp>:
{
   23e48:	b410      	push	{r4}
   23e4a:	9b01      	ldr	r3, [sp, #4]
   23e4c:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   23e4e:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   23e52:	4623      	mov	r3, r4
}
   23e54:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   23e56:	4718      	bx	r3

00023e58 <match_uuid>:
	found->attr = attr;
   23e58:	6010      	str	r0, [r2, #0]
	found->handle = handle;
   23e5a:	8091      	strh	r1, [r2, #4]
}
   23e5c:	2000      	movs	r0, #0
   23e5e:	4770      	bx	lr

00023e60 <gen_hash_m>:
{
   23e60:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   23e62:	6807      	ldr	r7, [r0, #0]
   23e64:	783d      	ldrb	r5, [r7, #0]
{
   23e66:	b089      	sub	sp, #36	; 0x24
   23e68:	4606      	mov	r6, r0
   23e6a:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   23e6c:	b10d      	cbz	r5, 23e72 <gen_hash_m+0x12>
	switch (u16->val) {
   23e6e:	2501      	movs	r5, #1
   23e70:	e014      	b.n	23e9c <gen_hash_m+0x3c>
   23e72:	887b      	ldrh	r3, [r7, #2]
   23e74:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   23e78:	d004      	beq.n	23e84 <gen_hash_m+0x24>
   23e7a:	d812      	bhi.n	23ea2 <gen_hash_m+0x42>
   23e7c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   23e80:	2b03      	cmp	r3, #3
   23e82:	d8f4      	bhi.n	23e6e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   23e84:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23e88:	2202      	movs	r2, #2
   23e8a:	f10d 010e 	add.w	r1, sp, #14
   23e8e:	4620      	mov	r0, r4
   23e90:	f7fe fd55 	bl	2293e <tc_cmac_update>
   23e94:	b9e0      	cbnz	r0, 23ed0 <gen_hash_m+0x70>
			state->err = -EINVAL;
   23e96:	f06f 0315 	mvn.w	r3, #21
   23e9a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   23e9c:	4628      	mov	r0, r5
   23e9e:	b009      	add	sp, #36	; 0x24
   23ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   23ea2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   23ea6:	33ff      	adds	r3, #255	; 0xff
   23ea8:	b29b      	uxth	r3, r3
   23eaa:	2b04      	cmp	r3, #4
   23eac:	d8df      	bhi.n	23e6e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   23eae:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23eb2:	2202      	movs	r2, #2
   23eb4:	f10d 010e 	add.w	r1, sp, #14
   23eb8:	4620      	mov	r0, r4
   23eba:	f7fe fd40 	bl	2293e <tc_cmac_update>
   23ebe:	2800      	cmp	r0, #0
   23ec0:	d0e9      	beq.n	23e96 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   23ec2:	887b      	ldrh	r3, [r7, #2]
   23ec4:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23ec8:	2202      	movs	r2, #2
   23eca:	f10d 010e 	add.w	r1, sp, #14
   23ece:	e017      	b.n	23f00 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   23ed0:	887b      	ldrh	r3, [r7, #2]
   23ed2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23ed6:	2202      	movs	r2, #2
   23ed8:	f10d 010e 	add.w	r1, sp, #14
   23edc:	4620      	mov	r0, r4
   23ede:	f7fe fd2e 	bl	2293e <tc_cmac_update>
   23ee2:	2800      	cmp	r0, #0
   23ee4:	d0d7      	beq.n	23e96 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   23ee6:	2000      	movs	r0, #0
   23ee8:	2310      	movs	r3, #16
   23eea:	eb0d 0203 	add.w	r2, sp, r3
   23eee:	6877      	ldr	r7, [r6, #4]
   23ef0:	9000      	str	r0, [sp, #0]
   23ef2:	4631      	mov	r1, r6
   23ef4:	47b8      	blx	r7
		if (len < 0) {
   23ef6:	1e02      	subs	r2, r0, #0
   23ef8:	da01      	bge.n	23efe <gen_hash_m+0x9e>
			state->err = len;
   23efa:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   23efc:	e7ce      	b.n	23e9c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   23efe:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23f00:	4620      	mov	r0, r4
   23f02:	f7fe fd1c 	bl	2293e <tc_cmac_update>
   23f06:	2800      	cmp	r0, #0
   23f08:	d1b1      	bne.n	23e6e <gen_hash_m+0xe>
   23f0a:	e7c4      	b.n	23e96 <gen_hash_m+0x36>

00023f0c <bt_addr_le_cmp>:
   23f0c:	2207      	movs	r2, #7
   23f0e:	f002 b9b2 	b.w	26276 <memcmp>

00023f12 <find_ccc_cfg>:
{
   23f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
						    &cfg->peer)) {
   23f14:	1c4a      	adds	r2, r1, #1
{
   23f16:	460c      	mov	r4, r1
		if (conn) {
   23f18:	4605      	mov	r5, r0
   23f1a:	b948      	cbnz	r0, 23f30 <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   23f1c:	9000      	str	r0, [sp, #0]
   23f1e:	4669      	mov	r1, sp
   23f20:	f8cd 0003 	str.w	r0, [sp, #3]
   23f24:	4610      	mov	r0, r2
   23f26:	f7ff fff1 	bl	23f0c <bt_addr_le_cmp>
   23f2a:	b930      	cbnz	r0, 23f3a <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   23f2c:	4626      	mov	r6, r4
   23f2e:	e00e      	b.n	23f4e <find_ccc_cfg+0x3c>
   23f30:	7809      	ldrb	r1, [r1, #0]
   23f32:	f7ff fa16 	bl	23362 <bt_conn_is_peer_addr_le>
   23f36:	2800      	cmp	r0, #0
   23f38:	d1f8      	bne.n	23f2c <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   23f3a:	f104 060a 	add.w	r6, r4, #10
						    &cfg->peer)) {
   23f3e:	f104 020b 	add.w	r2, r4, #11
		if (conn) {
   23f42:	b13d      	cbz	r5, 23f54 <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   23f44:	7aa1      	ldrb	r1, [r4, #10]
   23f46:	4628      	mov	r0, r5
   23f48:	f7ff fa0b 	bl	23362 <bt_conn_is_peer_addr_le>
   23f4c:	b158      	cbz	r0, 23f66 <find_ccc_cfg+0x54>
}
   23f4e:	4630      	mov	r0, r6
   23f50:	b002      	add	sp, #8
   23f52:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   23f54:	4669      	mov	r1, sp
   23f56:	4610      	mov	r0, r2
   23f58:	9500      	str	r5, [sp, #0]
   23f5a:	f8cd 5003 	str.w	r5, [sp, #3]
   23f5e:	f7ff ffd5 	bl	23f0c <bt_addr_le_cmp>
   23f62:	2800      	cmp	r0, #0
   23f64:	d0f3      	beq.n	23f4e <find_ccc_cfg+0x3c>
	return NULL;
   23f66:	2600      	movs	r6, #0
   23f68:	e7f1      	b.n	23f4e <find_ccc_cfg+0x3c>

00023f6a <atomic_get>:
   23f6a:	f3bf 8f5b 	dmb	ish
   23f6e:	6800      	ldr	r0, [r0, #0]
   23f70:	f3bf 8f5b 	dmb	ish
}
   23f74:	4770      	bx	lr

00023f76 <bt_addr_le_copy>:
   23f76:	680b      	ldr	r3, [r1, #0]
   23f78:	6003      	str	r3, [r0, #0]
   23f7a:	888b      	ldrh	r3, [r1, #4]
   23f7c:	8083      	strh	r3, [r0, #4]
   23f7e:	798b      	ldrb	r3, [r1, #6]
   23f80:	7183      	strb	r3, [r0, #6]
}
   23f82:	4770      	bx	lr

00023f84 <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   23f84:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   23f86:	2300      	movs	r3, #0
   23f88:	4669      	mov	r1, sp
   23f8a:	3001      	adds	r0, #1
   23f8c:	9300      	str	r3, [sp, #0]
   23f8e:	f8cd 3003 	str.w	r3, [sp, #3]
   23f92:	f7ff fff0 	bl	23f76 <bt_addr_le_copy>
}
   23f96:	b003      	add	sp, #12
   23f98:	f85d fb04 	ldr.w	pc, [sp], #4

00023f9c <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   23f9c:	2300      	movs	r3, #0
   23f9e:	6003      	str	r3, [r0, #0]
   23fa0:	6043      	str	r3, [r0, #4]
   23fa2:	6083      	str	r3, [r0, #8]
}
   23fa4:	4770      	bx	lr

00023fa6 <sc_clear>:
{
   23fa6:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   23fa8:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   23fac:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   23fae:	4629      	mov	r1, r5
   23fb0:	7a00      	ldrb	r0, [r0, #8]
   23fb2:	f7ff f848 	bl	23046 <bt_addr_le_is_bonded>
   23fb6:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   23fb8:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   23fba:	f7e8 f9af 	bl	c31c <find_sc_cfg>
		if (cfg) {
   23fbe:	b118      	cbz	r0, 23fc8 <sc_clear+0x22>
}
   23fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   23fc4:	f7ff bfea 	b.w	23f9c <clear_sc_cfg>
}
   23fc8:	bd38      	pop	{r3, r4, r5, pc}

00023fca <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   23fca:	b538      	push	{r3, r4, r5, lr}
   23fcc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   23fd0:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   23fd2:	460c      	mov	r4, r1
   23fd4:	4611      	mov	r1, r2
	if (offset > value_len) {
   23fd6:	d30a      	bcc.n	23fee <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   23fd8:	1aad      	subs	r5, r5, r2
   23fda:	42a5      	cmp	r5, r4
   23fdc:	bfa8      	it	ge
   23fde:	4625      	movge	r5, r4
   23fe0:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23fe2:	462a      	mov	r2, r5
   23fe4:	4419      	add	r1, r3
   23fe6:	f002 f956 	bl	26296 <memcpy>
}
   23fea:	4628      	mov	r0, r5
   23fec:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   23fee:	f06f 0506 	mvn.w	r5, #6
   23ff2:	e7fa      	b.n	23fea <bt_gatt_attr_read.constprop.0+0x20>

00023ff4 <bt_gatt_attr_read_ccc>:
{
   23ff4:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   23ff6:	68c9      	ldr	r1, [r1, #12]
{
   23ff8:	b085      	sub	sp, #20
   23ffa:	4614      	mov	r4, r2
   23ffc:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   23ffe:	f7ff ff88 	bl	23f12 <find_ccc_cfg>
	if (cfg) {
   24002:	b100      	cbz	r0, 24006 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   24004:	8900      	ldrh	r0, [r0, #8]
   24006:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2400a:	2302      	movs	r3, #2
   2400c:	9300      	str	r3, [sp, #0]
   2400e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   24012:	f10d 030e 	add.w	r3, sp, #14
   24016:	4629      	mov	r1, r5
   24018:	4620      	mov	r0, r4
   2401a:	f7ff ffd6 	bl	23fca <bt_gatt_attr_read.constprop.0>
}
   2401e:	b005      	add	sp, #20
   24020:	bd30      	pop	{r4, r5, pc}

00024022 <bt_gatt_attr_read_service>:
{
   24022:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   24024:	460c      	mov	r4, r1
   24026:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   24028:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2402a:	781c      	ldrb	r4, [r3, #0]
{
   2402c:	4610      	mov	r0, r2
   2402e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   24032:	b13c      	cbz	r4, 24044 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   24034:	2410      	movs	r4, #16
   24036:	3301      	adds	r3, #1
   24038:	9406      	str	r4, [sp, #24]
}
   2403a:	b004      	add	sp, #16
   2403c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   24040:	f7ff bfc3 	b.w	23fca <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   24044:	885b      	ldrh	r3, [r3, #2]
   24046:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2404a:	2302      	movs	r3, #2
   2404c:	9300      	str	r3, [sp, #0]
   2404e:	f10d 030e 	add.w	r3, sp, #14
   24052:	f7ff ffba 	bl	23fca <bt_gatt_attr_read.constprop.0>
}
   24056:	b004      	add	sp, #16
   24058:	bd10      	pop	{r4, pc}

0002405a <cf_read>:
{
   2405a:	b530      	push	{r4, r5, lr}
   2405c:	b085      	sub	sp, #20
   2405e:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   24060:	2300      	movs	r3, #0
{
   24062:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   24064:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   24068:	f7e8 f92a 	bl	c2c0 <find_cf_cfg>
	if (cfg) {
   2406c:	b110      	cbz	r0, 24074 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2406e:	7a03      	ldrb	r3, [r0, #8]
   24070:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   24074:	2301      	movs	r3, #1
   24076:	9300      	str	r3, [sp, #0]
   24078:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2407c:	ab03      	add	r3, sp, #12
   2407e:	4629      	mov	r1, r5
   24080:	4620      	mov	r0, r4
   24082:	f7ff ffa2 	bl	23fca <bt_gatt_attr_read.constprop.0>
}
   24086:	b005      	add	sp, #20
   24088:	bd30      	pop	{r4, r5, pc}

0002408a <read_name>:
{
   2408a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2408e:	4614      	mov	r4, r2
   24090:	461d      	mov	r5, r3
   24092:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   24096:	f7e5 f9f3 	bl	9480 <bt_get_name>
   2409a:	4606      	mov	r6, r0
				 strlen(name));
   2409c:	f7dc fce0 	bl	a60 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   240a0:	b280      	uxth	r0, r0
   240a2:	9006      	str	r0, [sp, #24]
   240a4:	4633      	mov	r3, r6
   240a6:	463a      	mov	r2, r7
   240a8:	4629      	mov	r1, r5
   240aa:	4620      	mov	r0, r4
}
   240ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   240b0:	f7ff bf8b 	b.w	23fca <bt_gatt_attr_read.constprop.0>

000240b4 <read_appearance>:
{
   240b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   240b6:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   240b8:	f240 3341 	movw	r3, #833	; 0x341
   240bc:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   240c0:	2302      	movs	r3, #2
   240c2:	9300      	str	r3, [sp, #0]
{
   240c4:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   240c6:	f10d 030e 	add.w	r3, sp, #14
   240ca:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   240ce:	f7ff ff7c 	bl	23fca <bt_gatt_attr_read.constprop.0>
}
   240d2:	b005      	add	sp, #20
   240d4:	f85d fb04 	ldr.w	pc, [sp], #4

000240d8 <read_ppcp>:
{
   240d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   240da:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   240dc:	2318      	movs	r3, #24
   240de:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   240e2:	2328      	movs	r3, #40	; 0x28
   240e4:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   240e8:	2300      	movs	r3, #0
   240ea:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   240ee:	232a      	movs	r3, #42	; 0x2a
   240f0:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   240f4:	2308      	movs	r3, #8
   240f6:	9300      	str	r3, [sp, #0]
{
   240f8:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   240fa:	446b      	add	r3, sp
   240fc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   24100:	f7ff ff63 	bl	23fca <bt_gatt_attr_read.constprop.0>
}
   24104:	b005      	add	sp, #20
   24106:	f85d fb04 	ldr.w	pc, [sp], #4

0002410a <clear_cf_cfg>:
{
   2410a:	b513      	push	{r0, r1, r4, lr}
   2410c:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2410e:	2400      	movs	r4, #0
   24110:	4669      	mov	r1, sp
   24112:	3001      	adds	r0, #1
   24114:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24116:	320c      	adds	r2, #12
   24118:	f8cd 4003 	str.w	r4, [sp, #3]
   2411c:	f7ff ff2b 	bl	23f76 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   24120:	f802 4c04 	strb.w	r4, [r2, #-4]
   24124:	f3bf 8f5b 	dmb	ish
   24128:	e852 3f00 	ldrex	r3, [r2]
   2412c:	e842 4100 	strex	r1, r4, [r2]
   24130:	2900      	cmp	r1, #0
   24132:	d1f9      	bne.n	24128 <clear_cf_cfg+0x1e>
   24134:	f3bf 8f5b 	dmb	ish
}
   24138:	b002      	add	sp, #8
   2413a:	bd10      	pop	{r4, pc}

0002413c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2413c:	2a02      	cmp	r2, #2
{
   2413e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   24140:	d108      	bne.n	24154 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   24142:	2300      	movs	r3, #0
   24144:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24148:	461a      	mov	r2, r3
   2414a:	7a00      	ldrb	r0, [r0, #8]
   2414c:	f7e8 fa50 	bl	c5f0 <sc_save>
}
   24150:	2002      	movs	r0, #2
   24152:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   24154:	f7ff ff27 	bl	23fa6 <sc_clear>
   24158:	e7fa      	b.n	24150 <sc_ccc_cfg_write+0x14>

0002415a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2415a:	2301      	movs	r3, #1
   2415c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2415e:	f3bf 8f5b 	dmb	ish
   24162:	e850 2f00 	ldrex	r2, [r0]
   24166:	431a      	orrs	r2, r3
   24168:	e840 2100 	strex	r1, r2, [r0]
   2416c:	2900      	cmp	r1, #0
   2416e:	d1f8      	bne.n	24162 <atomic_set_bit+0x8>
   24170:	f3bf 8f5b 	dmb	ish
}
   24174:	4770      	bx	lr

00024176 <sc_restore_rsp>:
{
   24176:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   24178:	f7e8 f8a2 	bl	c2c0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2417c:	b140      	cbz	r0, 24190 <sc_restore_rsp+0x1a>
   2417e:	7a03      	ldrb	r3, [r0, #8]
   24180:	07db      	lsls	r3, r3, #31
   24182:	d505      	bpl.n	24190 <sc_restore_rsp+0x1a>
}
   24184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   24188:	2100      	movs	r1, #0
   2418a:	300c      	adds	r0, #12
   2418c:	f7ff bfe5 	b.w	2415a <atomic_set_bit>
}
   24190:	bd08      	pop	{r3, pc}

00024192 <gatt_sub_remove>:
{
   24192:	b570      	push	{r4, r5, r6, lr}
   24194:	460c      	mov	r4, r1
	if (params) {
   24196:	4619      	mov	r1, r3
   24198:	b16b      	cbz	r3, 241b6 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2419a:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   2419e:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   241a0:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   241a2:	b97a      	cbnz	r2, 241c4 <gatt_sub_remove+0x32>
   241a4:	42ae      	cmp	r6, r5
	list->head = node;
   241a6:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   241a8:	d100      	bne.n	241ac <gatt_sub_remove+0x1a>
	list->tail = node;
   241aa:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   241ac:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   241ae:	680d      	ldr	r5, [r1, #0]
   241b0:	614b      	str	r3, [r1, #20]
   241b2:	461a      	mov	r2, r3
   241b4:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   241b6:	68a3      	ldr	r3, [r4, #8]
   241b8:	b94b      	cbnz	r3, 241ce <gatt_sub_remove+0x3c>
   241ba:	4620      	mov	r0, r4
}
   241bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   241c0:	f7ff bee0 	b.w	23f84 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   241c4:	42ae      	cmp	r6, r5
	parent->next = child;
   241c6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   241c8:	bf08      	it	eq
   241ca:	60e2      	streq	r2, [r4, #12]
}
   241cc:	e7ee      	b.n	241ac <gatt_sub_remove+0x1a>
   241ce:	bd70      	pop	{r4, r5, r6, pc}

000241d0 <gatt_write_ccc_rsp>:
{
   241d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   241d4:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   241d6:	f3bf 8f5b 	dmb	ish
   241da:	4606      	mov	r6, r0
   241dc:	460d      	mov	r5, r1
   241de:	f104 0310 	add.w	r3, r4, #16
   241e2:	e853 2f00 	ldrex	r2, [r3]
   241e6:	f022 0204 	bic.w	r2, r2, #4
   241ea:	e843 2100 	strex	r1, r2, [r3]
   241ee:	2900      	cmp	r1, #0
   241f0:	d1f7      	bne.n	241e2 <gatt_write_ccc_rsp+0x12>
   241f2:	f3bf 8f5b 	dmb	ish
	if (err) {
   241f6:	b1dd      	cbz	r5, 24230 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   241f8:	f7e8 f8b0 	bl	c35c <gatt_sub_find>
		if (!sub) {
   241fc:	4601      	mov	r1, r0
   241fe:	b300      	cbz	r0, 24242 <gatt_write_ccc_rsp+0x72>
	return list->head;
   24200:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   24202:	b143      	cbz	r3, 24216 <gatt_write_ccc_rsp+0x46>
	return node->next;
   24204:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   24206:	f104 0014 	add.w	r0, r4, #20
   2420a:	4283      	cmp	r3, r0
   2420c:	d10b      	bne.n	24226 <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   2420e:	4623      	mov	r3, r4
   24210:	4630      	mov	r0, r6
   24212:	f7ff ffbe 	bl	24192 <gatt_sub_remove>
	if (params->write) {
   24216:	6863      	ldr	r3, [r4, #4]
   24218:	b19b      	cbz	r3, 24242 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   2421a:	4629      	mov	r1, r5
   2421c:	4630      	mov	r0, r6
   2421e:	2200      	movs	r2, #0
}
   24220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   24224:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   24226:	2a00      	cmp	r2, #0
   24228:	d0f5      	beq.n	24216 <gatt_write_ccc_rsp+0x46>
	return node->next;
   2422a:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   2422c:	6812      	ldr	r2, [r2, #0]
   2422e:	e7ec      	b.n	2420a <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   24230:	89a3      	ldrh	r3, [r4, #12]
   24232:	2b00      	cmp	r3, #0
   24234:	d1ef      	bne.n	24216 <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   24236:	6827      	ldr	r7, [r4, #0]
   24238:	462b      	mov	r3, r5
   2423a:	462a      	mov	r2, r5
   2423c:	4621      	mov	r1, r4
   2423e:	47b8      	blx	r7
   24240:	e7e9      	b.n	24216 <gatt_write_ccc_rsp+0x46>
}
   24242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024246 <bt_gatt_attr_read>:
{
   24246:	b538      	push	{r3, r4, r5, lr}
   24248:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2424c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   24250:	428d      	cmp	r5, r1
{
   24252:	4610      	mov	r0, r2
	if (offset > value_len) {
   24254:	d30b      	bcc.n	2426e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   24256:	1a6d      	subs	r5, r5, r1
   24258:	429d      	cmp	r5, r3
   2425a:	bfa8      	it	ge
   2425c:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2425e:	9b05      	ldr	r3, [sp, #20]
   24260:	b2ad      	uxth	r5, r5
   24262:	462a      	mov	r2, r5
   24264:	4419      	add	r1, r3
   24266:	f002 f816 	bl	26296 <memcpy>
}
   2426a:	4628      	mov	r0, r5
   2426c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2426e:	f06f 0506 	mvn.w	r5, #6
   24272:	e7fa      	b.n	2426a <bt_gatt_attr_read+0x24>

00024274 <bt_gatt_attr_read_chrc>:
{
   24274:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   24276:	68cc      	ldr	r4, [r1, #12]
{
   24278:	b088      	sub	sp, #32
   2427a:	4608      	mov	r0, r1
   2427c:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2427e:	79a3      	ldrb	r3, [r4, #6]
   24280:	f88d 300c 	strb.w	r3, [sp, #12]
{
   24284:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   24286:	f7e8 fbed 	bl	ca64 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2428a:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2428c:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   24290:	7823      	ldrb	r3, [r4, #0]
   24292:	b96b      	cbnz	r3, 242b0 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   24294:	8863      	ldrh	r3, [r4, #2]
   24296:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2429a:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2429c:	9300      	str	r3, [sp, #0]
   2429e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   242a2:	ab03      	add	r3, sp, #12
   242a4:	4631      	mov	r1, r6
   242a6:	4628      	mov	r0, r5
   242a8:	f7ff fe8f 	bl	23fca <bt_gatt_attr_read.constprop.0>
}
   242ac:	b008      	add	sp, #32
   242ae:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   242b0:	1c63      	adds	r3, r4, #1
   242b2:	f10d 020f 	add.w	r2, sp, #15
   242b6:	3411      	adds	r4, #17
   242b8:	f853 1b04 	ldr.w	r1, [r3], #4
   242bc:	f842 1b04 	str.w	r1, [r2], #4
   242c0:	42a3      	cmp	r3, r4
   242c2:	d1f9      	bne.n	242b8 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   242c4:	2313      	movs	r3, #19
   242c6:	e7e9      	b.n	2429c <bt_gatt_attr_read_chrc+0x28>

000242c8 <bt_gatt_foreach_attr>:
{
   242c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   242ca:	e9cd 2301 	strd	r2, r3, [sp, #4]
   242ce:	2300      	movs	r3, #0
   242d0:	9300      	str	r3, [sp, #0]
   242d2:	461a      	mov	r2, r3
   242d4:	f7e8 fbda 	bl	ca8c <bt_gatt_foreach_attr_type>
}
   242d8:	b005      	add	sp, #20
   242da:	f85d fb04 	ldr.w	pc, [sp], #4

000242de <db_hash_process>:
	db_hash_gen(true);
   242de:	f7e8 bc2f 	b.w	cb40 <db_hash_gen.constprop.0>

000242e2 <bt_gatt_check_perm>:
{
   242e2:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   242e4:	07d4      	lsls	r4, r2, #31
{
   242e6:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   242e8:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   242ea:	d504      	bpl.n	242f6 <bt_gatt_check_perm+0x14>
   242ec:	f010 0f15 	tst.w	r0, #21
   242f0:	d01e      	beq.n	24330 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   242f2:	684b      	ldr	r3, [r1, #4]
   242f4:	b1e3      	cbz	r3, 24330 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   242f6:	0793      	lsls	r3, r2, #30
   242f8:	d504      	bpl.n	24304 <bt_gatt_check_perm+0x22>
   242fa:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   242fe:	d019      	beq.n	24334 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   24300:	688b      	ldr	r3, [r1, #8]
   24302:	b1bb      	cbz	r3, 24334 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   24304:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   24308:	f014 0f30 	tst.w	r4, #48	; 0x30
   2430c:	d103      	bne.n	24316 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2430e:	f014 000c 	ands.w	r0, r4, #12
   24312:	d107      	bne.n	24324 <bt_gatt_check_perm+0x42>
}
   24314:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   24316:	4628      	mov	r0, r5
   24318:	f7fe fff5 	bl	23306 <bt_conn_get_security>
   2431c:	2802      	cmp	r0, #2
   2431e:	d8f6      	bhi.n	2430e <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   24320:	2005      	movs	r0, #5
   24322:	e7f7      	b.n	24314 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   24324:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   24326:	2b00      	cmp	r3, #0
   24328:	bf14      	ite	ne
   2432a:	2000      	movne	r0, #0
   2432c:	200f      	moveq	r0, #15
   2432e:	e7f1      	b.n	24314 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   24330:	2002      	movs	r0, #2
   24332:	e7ef      	b.n	24314 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   24334:	2003      	movs	r0, #3
   24336:	e7ed      	b.n	24314 <bt_gatt_check_perm+0x32>

00024338 <gatt_discover_next>:
{
   24338:	b570      	push	{r4, r5, r6, lr}
   2433a:	4605      	mov	r5, r0
   2433c:	4614      	mov	r4, r2
	if (!last_handle)
   2433e:	b929      	cbnz	r1, 2434c <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   24340:	4621      	mov	r1, r4
   24342:	4628      	mov	r0, r5
   24344:	f7e8 fdf8 	bl	cf38 <bt_gatt_discover>
   24348:	b928      	cbnz	r0, 24356 <gatt_discover_next+0x1e>
}
   2434a:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2434c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24350:	4291      	cmp	r1, r2
   24352:	d107      	bne.n	24364 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   24354:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   24356:	6863      	ldr	r3, [r4, #4]
   24358:	4622      	mov	r2, r4
   2435a:	4628      	mov	r0, r5
   2435c:	2100      	movs	r1, #0
}
   2435e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   24362:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   24364:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   24366:	1c4b      	adds	r3, r1, #1
   24368:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2436a:	429a      	cmp	r2, r3
		params->start_handle++;
   2436c:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2436e:	d2e7      	bcs.n	24340 <gatt_discover_next+0x8>
   24370:	e7f1      	b.n	24356 <gatt_discover_next+0x1e>

00024372 <gatt_find_type_rsp>:
{
   24372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24376:	b088      	sub	sp, #32
   24378:	4607      	mov	r7, r0
   2437a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2437c:	4690      	mov	r8, r2
   2437e:	461d      	mov	r5, r3
	if (err) {
   24380:	460c      	mov	r4, r1
   24382:	2900      	cmp	r1, #0
   24384:	d138      	bne.n	243f8 <gatt_find_type_rsp+0x86>
	uint16_t end_handle = 0U, start_handle;
   24386:	4689      	mov	r9, r1
		struct bt_gatt_attr attr = {};
   24388:	468a      	mov	sl, r1
	for (i = 0U; length >= sizeof(rsp->list[i]);
   2438a:	2d03      	cmp	r5, #3
   2438c:	d808      	bhi.n	243a0 <gatt_find_type_rsp+0x2e>
	if (length > 0) {
   2438e:	bb9d      	cbnz	r5, 243f8 <gatt_find_type_rsp+0x86>
	gatt_discover_next(conn, end_handle, params);
   24390:	4632      	mov	r2, r6
   24392:	4649      	mov	r1, r9
   24394:	4638      	mov	r0, r7
}
   24396:	b008      	add	sp, #32
   24398:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   2439c:	f7ff bfcc 	b.w	24338 <gatt_discover_next>
		struct bt_gatt_attr attr = {};
   243a0:	2210      	movs	r2, #16
   243a2:	2100      	movs	r1, #0
   243a4:	eb0d 0002 	add.w	r0, sp, r2
   243a8:	f001 ff83 	bl	262b2 <memset>
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
   243ac:	b2e3      	uxtb	r3, r4
   243ae:	eb08 0183 	add.w	r1, r8, r3, lsl #2
   243b2:	f838 2023 	ldrh.w	r2, [r8, r3, lsl #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   243b6:	7c33      	ldrb	r3, [r6, #16]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
   243b8:	f8b1 9002 	ldrh.w	r9, [r1, #2]
		attr.handle = start_handle;
   243bc:	f8ad 201c 	strh.w	r2, [sp, #28]
			uuid_svc.val = BT_UUID_16(BT_UUID_GATT_SECONDARY)->val;
   243c0:	2b00      	cmp	r3, #0
   243c2:	f642 0301 	movw	r3, #10241	; 0x2801
   243c6:	bf08      	it	eq
   243c8:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   243cc:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = params->uuid;
   243d0:	6833      	ldr	r3, [r6, #0]
   243d2:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
   243d4:	ab01      	add	r3, sp, #4
   243d6:	9306      	str	r3, [sp, #24]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   243d8:	f88d a000 	strb.w	sl, [sp]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   243dc:	6873      	ldr	r3, [r6, #4]
		value.end_handle = end_handle;
   243de:	f8ad 9008 	strh.w	r9, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   243e2:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   243e6:	4632      	mov	r2, r6
   243e8:	a903      	add	r1, sp, #12
   243ea:	4638      	mov	r0, r7
   243ec:	4798      	blx	r3
   243ee:	3401      	adds	r4, #1
   243f0:	b150      	cbz	r0, 24408 <gatt_find_type_rsp+0x96>
	     i++, length -=  sizeof(rsp->list[i])) {
   243f2:	3d04      	subs	r5, #4
   243f4:	b2ad      	uxth	r5, r5
   243f6:	e7c8      	b.n	2438a <gatt_find_type_rsp+0x18>
	params->func(conn, NULL, params);
   243f8:	6873      	ldr	r3, [r6, #4]
   243fa:	4632      	mov	r2, r6
   243fc:	2100      	movs	r1, #0
   243fe:	4638      	mov	r0, r7
}
   24400:	b008      	add	sp, #32
   24402:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   24406:	4718      	bx	r3
}
   24408:	b008      	add	sp, #32
   2440a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002440e <bt_gatt_subscribe>:
{
   2440e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   24410:	7b43      	ldrb	r3, [r0, #13]
   24412:	2b07      	cmp	r3, #7
{
   24414:	4606      	mov	r6, r0
   24416:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   24418:	d14a      	bne.n	244b0 <bt_gatt_subscribe+0xa2>
	sub = gatt_sub_find(conn);
   2441a:	f7e7 ff9f 	bl	c35c <gatt_sub_find>
	if (!sub) {
   2441e:	4604      	mov	r4, r0
   24420:	b958      	cbnz	r0, 2443a <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   24422:	f7e7 ff9b 	bl	c35c <gatt_sub_find>
		if (sub) {
   24426:	4604      	mov	r4, r0
   24428:	2800      	cmp	r0, #0
   2442a:	d044      	beq.n	244b6 <bt_gatt_subscribe+0xa8>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   2442c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   24430:	3001      	adds	r0, #1
   24432:	f7ff fda0 	bl	23f76 <bt_addr_le_copy>
			sub->id = conn->id;
   24436:	7a33      	ldrb	r3, [r6, #8]
   24438:	7023      	strb	r3, [r4, #0]
	return list->head;
   2443a:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2443c:	b90b      	cbnz	r3, 24442 <bt_gatt_subscribe+0x34>
   2443e:	461a      	mov	r2, r3
   24440:	e001      	b.n	24446 <bt_gatt_subscribe+0x38>
   24442:	f1a3 0214 	sub.w	r2, r3, #20
			has_subscription = true;
   24446:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   24448:	b97a      	cbnz	r2, 2446a <bt_gatt_subscribe+0x5c>
	if (!has_subscription) {
   2444a:	bb41      	cbnz	r1, 2449e <bt_gatt_subscribe+0x90>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   2444c:	89aa      	ldrh	r2, [r5, #12]
   2444e:	8969      	ldrh	r1, [r5, #10]
   24450:	462b      	mov	r3, r5
   24452:	4630      	mov	r0, r6
   24454:	f7e8 fa0a 	bl	c86c <gatt_write_ccc.constprop.0>
		if (err) {
   24458:	4602      	mov	r2, r0
   2445a:	b300      	cbz	r0, 2449e <bt_gatt_subscribe+0x90>
	if (sys_slist_is_empty(&sub->list)) {
   2445c:	68a3      	ldr	r3, [r4, #8]
   2445e:	b913      	cbnz	r3, 24466 <bt_gatt_subscribe+0x58>
   24460:	4620      	mov	r0, r4
   24462:	f7ff fd8f 	bl	23f84 <gatt_sub_remove.part.0>
}
   24466:	4610      	mov	r0, r2
   24468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   2446a:	42aa      	cmp	r2, r5
   2446c:	d106      	bne.n	2447c <bt_gatt_subscribe+0x6e>
	if (sys_slist_is_empty(&sub->list)) {
   2446e:	b913      	cbnz	r3, 24476 <bt_gatt_subscribe+0x68>
   24470:	4620      	mov	r0, r4
   24472:	f7ff fd87 	bl	23f84 <gatt_sub_remove.part.0>
			return -EALREADY;
   24476:	f06f 0277 	mvn.w	r2, #119	; 0x77
   2447a:	e7f4      	b.n	24466 <bt_gatt_subscribe+0x58>
		if (tmp->value_handle == params->value_handle &&
   2447c:	8917      	ldrh	r7, [r2, #8]
   2447e:	8928      	ldrh	r0, [r5, #8]
   24480:	4287      	cmp	r7, r0
   24482:	d104      	bne.n	2448e <bt_gatt_subscribe+0x80>
   24484:	8997      	ldrh	r7, [r2, #12]
   24486:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   24488:	4287      	cmp	r7, r0
   2448a:	bf28      	it	cs
   2448c:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   2448e:	f112 0f14 	cmn.w	r2, #20
   24492:	d0da      	beq.n	2444a <bt_gatt_subscribe+0x3c>
	return node->next;
   24494:	6952      	ldr	r2, [r2, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   24496:	2a00      	cmp	r2, #0
   24498:	d0d7      	beq.n	2444a <bt_gatt_subscribe+0x3c>
   2449a:	3a14      	subs	r2, #20
   2449c:	e7d4      	b.n	24448 <bt_gatt_subscribe+0x3a>
	parent->next = child;
   2449e:	68a2      	ldr	r2, [r4, #8]
   244a0:	616a      	str	r2, [r5, #20]
Z_GENLIST_PREPEND(slist, snode)
   244a2:	68e2      	ldr	r2, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   244a4:	f105 0314 	add.w	r3, r5, #20
	list->head = node;
   244a8:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   244aa:	b93a      	cbnz	r2, 244bc <bt_gatt_subscribe+0xae>
	list->tail = node;
   244ac:	60e3      	str	r3, [r4, #12]
}
   244ae:	e7da      	b.n	24466 <bt_gatt_subscribe+0x58>
		return -ENOTCONN;
   244b0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   244b4:	e7d7      	b.n	24466 <bt_gatt_subscribe+0x58>
		return -ENOMEM;
   244b6:	f06f 020b 	mvn.w	r2, #11
   244ba:	e7d4      	b.n	24466 <bt_gatt_subscribe+0x58>
	return 0;
   244bc:	2200      	movs	r2, #0
   244be:	e7d2      	b.n	24466 <bt_gatt_subscribe+0x58>

000244c0 <bt_gatt_unsubscribe>:
{
   244c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   244c4:	7b43      	ldrb	r3, [r0, #13]
   244c6:	2b07      	cmp	r3, #7
{
   244c8:	4681      	mov	r9, r0
   244ca:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   244cc:	d16c      	bne.n	245a8 <bt_gatt_unsubscribe+0xe8>
	sub = gatt_sub_find(conn);
   244ce:	f7e7 ff45 	bl	c35c <gatt_sub_find>
	if (!sub) {
   244d2:	4607      	mov	r7, r0
   244d4:	b920      	cbnz	r0, 244e0 <bt_gatt_unsubscribe+0x20>
		return -EINVAL;
   244d6:	f06f 0015 	mvn.w	r0, #21
}
   244da:	b003      	add	sp, #12
   244dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   244e0:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   244e2:	b1cc      	cbz	r4, 24518 <bt_gatt_unsubscribe+0x58>
   244e4:	f1b4 0514 	subs.w	r5, r4, #20
   244e8:	d018      	beq.n	2451c <bt_gatt_unsubscribe+0x5c>
	return node->next;
   244ea:	6824      	ldr	r4, [r4, #0]
   244ec:	b104      	cbz	r4, 244f0 <bt_gatt_unsubscribe+0x30>
   244ee:	3c14      	subs	r4, #20
   244f0:	f04f 0800 	mov.w	r8, #0
   244f4:	4643      	mov	r3, r8
   244f6:	46c2      	mov	sl, r8
			if (atomic_test_bit(params->flags,
   244f8:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   244fc:	b985      	cbnz	r5, 24520 <bt_gatt_unsubscribe+0x60>
	if (!found) {
   244fe:	2b00      	cmp	r3, #0
   24500:	d0e9      	beq.n	244d6 <bt_gatt_unsubscribe+0x16>
	if (has_subscription) {
   24502:	f1ba 0f00 	cmp.w	sl, #0
   24506:	d044      	beq.n	24592 <bt_gatt_unsubscribe+0xd2>
		params->notify(conn, params, NULL, 0);
   24508:	6834      	ldr	r4, [r6, #0]
   2450a:	462b      	mov	r3, r5
   2450c:	462a      	mov	r2, r5
   2450e:	4631      	mov	r1, r6
   24510:	4648      	mov	r0, r9
   24512:	47a0      	blx	r4
		return 0;
   24514:	4628      	mov	r0, r5
   24516:	e7e0      	b.n	244da <bt_gatt_unsubscribe+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   24518:	4625      	mov	r5, r4
   2451a:	e7e9      	b.n	244f0 <bt_gatt_unsubscribe+0x30>
   2451c:	462c      	mov	r4, r5
   2451e:	e7e7      	b.n	244f0 <bt_gatt_unsubscribe+0x30>
		if (params == tmp) {
   24520:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   24522:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   24526:	d128      	bne.n	2457a <bt_gatt_unsubscribe+0xba>
Z_GENLIST_REMOVE(slist, snode)
   24528:	696b      	ldr	r3, [r5, #20]
   2452a:	68f8      	ldr	r0, [r7, #12]
   2452c:	f1b8 0f00 	cmp.w	r8, #0
   24530:	d11c      	bne.n	2456c <bt_gatt_unsubscribe+0xac>
   24532:	4281      	cmp	r1, r0
	list->head = node;
   24534:	60bb      	str	r3, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   24536:	d100      	bne.n	2453a <bt_gatt_unsubscribe+0x7a>
	list->tail = node;
   24538:	60fb      	str	r3, [r7, #12]
	parent->next = child;
   2453a:	2300      	movs	r3, #0
   2453c:	616b      	str	r3, [r5, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2453e:	4658      	mov	r0, fp
   24540:	f7ff fd13 	bl	23f6a <atomic_get>
			if (atomic_test_bit(params->flags,
   24544:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24546:	f3c0 0380 	ubfx	r3, r0, #2, #1
   2454a:	d51e      	bpl.n	2458a <bt_gatt_unsubscribe+0xca>
	bt_att_req_cancel(conn, params);
   2454c:	4631      	mov	r1, r6
   2454e:	4648      	mov	r0, r9
   24550:	9301      	str	r3, [sp, #4]
   24552:	f7e7 fe83 	bl	c25c <bt_att_req_cancel>
}
   24556:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   24558:	b1cc      	cbz	r4, 2458e <bt_gatt_unsubscribe+0xce>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2455a:	f114 0114 	adds.w	r1, r4, #20
   2455e:	d002      	beq.n	24566 <bt_gatt_unsubscribe+0xa6>
	return node->next;
   24560:	6961      	ldr	r1, [r4, #20]
   24562:	b101      	cbz	r1, 24566 <bt_gatt_unsubscribe+0xa6>
   24564:	3914      	subs	r1, #20
   24566:	4625      	mov	r5, r4
   24568:	460c      	mov	r4, r1
   2456a:	e7c7      	b.n	244fc <bt_gatt_unsubscribe+0x3c>
Z_GENLIST_REMOVE(slist, snode)
   2456c:	4281      	cmp	r1, r0
	parent->next = child;
   2456e:	f8c8 3000 	str.w	r3, [r8]
	list->tail = node;
   24572:	bf08      	it	eq
   24574:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   24578:	e7df      	b.n	2453a <bt_gatt_unsubscribe+0x7a>
		if (tmp->value_handle == params->value_handle) {
   2457a:	892d      	ldrh	r5, [r5, #8]
   2457c:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   2457e:	4688      	mov	r8, r1
   24580:	4285      	cmp	r5, r0
   24582:	bf08      	it	eq
   24584:	f04f 0a01 	moveq.w	sl, #1
   24588:	e7e6      	b.n	24558 <bt_gatt_unsubscribe+0x98>
			found = true;
   2458a:	2301      	movs	r3, #1
   2458c:	e7e4      	b.n	24558 <bt_gatt_unsubscribe+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   2458e:	4621      	mov	r1, r4
   24590:	e7e9      	b.n	24566 <bt_gatt_unsubscribe+0xa6>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   24592:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   24594:	f8a6 a00c 	strh.w	sl, [r6, #12]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   24598:	4633      	mov	r3, r6
   2459a:	4652      	mov	r2, sl
   2459c:	4648      	mov	r0, r9
}
   2459e:	b003      	add	sp, #12
   245a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   245a4:	f7e8 b962 	b.w	c86c <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   245a8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   245ac:	e795      	b.n	244da <bt_gatt_unsubscribe+0x1a>

000245ae <bt_gatt_notification>:
{
   245ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   245b2:	4607      	mov	r7, r0
   245b4:	4688      	mov	r8, r1
   245b6:	4691      	mov	r9, r2
   245b8:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   245ba:	f7e7 fecf 	bl	c35c <gatt_sub_find>
	if (!sub) {
   245be:	b1f8      	cbz	r0, 24600 <bt_gatt_notification+0x52>
	return list->head;
   245c0:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   245c2:	b1eb      	cbz	r3, 24600 <bt_gatt_notification+0x52>
   245c4:	f1b3 0614 	subs.w	r6, r3, #20
   245c8:	d01a      	beq.n	24600 <bt_gatt_notification+0x52>
	return node->next;
   245ca:	681c      	ldr	r4, [r3, #0]
   245cc:	b104      	cbz	r4, 245d0 <bt_gatt_notification+0x22>
   245ce:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   245d0:	8933      	ldrh	r3, [r6, #8]
   245d2:	4543      	cmp	r3, r8
   245d4:	d10a      	bne.n	245ec <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   245d6:	6835      	ldr	r5, [r6, #0]
   245d8:	4653      	mov	r3, sl
   245da:	464a      	mov	r2, r9
   245dc:	4631      	mov	r1, r6
   245de:	4638      	mov	r0, r7
   245e0:	47a8      	blx	r5
   245e2:	b918      	cbnz	r0, 245ec <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   245e4:	4631      	mov	r1, r6
   245e6:	4638      	mov	r0, r7
   245e8:	f7ff ff6a 	bl	244c0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   245ec:	b144      	cbz	r4, 24600 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   245ee:	f114 0514 	adds.w	r5, r4, #20
   245f2:	d002      	beq.n	245fa <bt_gatt_notification+0x4c>
	return node->next;
   245f4:	6965      	ldr	r5, [r4, #20]
   245f6:	b105      	cbz	r5, 245fa <bt_gatt_notification+0x4c>
   245f8:	3d14      	subs	r5, #20
{
   245fa:	4626      	mov	r6, r4
   245fc:	462c      	mov	r4, r5
   245fe:	e7e7      	b.n	245d0 <bt_gatt_notification+0x22>
}
   24600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024604 <bt_gatt_change_aware>:
{
   24604:	b510      	push	{r4, lr}
   24606:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   24608:	f7e7 fe5a 	bl	c2c0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2460c:	b910      	cbnz	r0, 24614 <bt_gatt_change_aware+0x10>
		return true;
   2460e:	2401      	movs	r4, #1
}
   24610:	4620      	mov	r0, r4
   24612:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   24614:	7a03      	ldrb	r3, [r0, #8]
   24616:	07d9      	lsls	r1, r3, #31
   24618:	d5f9      	bpl.n	2460e <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2461a:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2461e:	4618      	mov	r0, r3
   24620:	f7ff fca3 	bl	23f6a <atomic_get>
   24624:	f010 0101 	ands.w	r1, r0, #1
   24628:	d1f1      	bne.n	2460e <bt_gatt_change_aware+0xa>
	if (!req) {
   2462a:	2c00      	cmp	r4, #0
   2462c:	d0f0      	beq.n	24610 <bt_gatt_change_aware+0xc>
   2462e:	4618      	mov	r0, r3
   24630:	f7ff fc9b 	bl	23f6a <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   24634:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24636:	f3c0 0440 	ubfx	r4, r0, #1, #1
   2463a:	d50f      	bpl.n	2465c <bt_gatt_change_aware+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2463c:	f3bf 8f5b 	dmb	ish
   24640:	e853 2f00 	ldrex	r2, [r3]
   24644:	f022 0202 	bic.w	r2, r2, #2
   24648:	e843 2000 	strex	r0, r2, [r3]
   2464c:	2800      	cmp	r0, #0
   2464e:	d1f7      	bne.n	24640 <bt_gatt_change_aware+0x3c>
   24650:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   24654:	4618      	mov	r0, r3
   24656:	f7ff fd80 	bl	2415a <atomic_set_bit>
	return false;
   2465a:	e7d9      	b.n	24610 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2465c:	2101      	movs	r1, #1
   2465e:	e7f9      	b.n	24654 <bt_gatt_change_aware+0x50>

00024660 <sys_memcpy_swap>:
	psrc += length - 1;
   24660:	1e53      	subs	r3, r2, #1
   24662:	4419      	add	r1, r3
	for (; length > 0; length--) {
   24664:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   24666:	f811 3901 	ldrb.w	r3, [r1], #-1
   2466a:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2466e:	4290      	cmp	r0, r2
   24670:	d1f9      	bne.n	24666 <sys_memcpy_swap+0x6>
}
   24672:	4770      	bx	lr

00024674 <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   24674:	f890 20c3 	ldrb.w	r2, [r0, #195]	; 0xc3
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   24678:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2467c:	6800      	ldr	r0, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2467e:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   24680:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   24684:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24688:	b928      	cbnz	r0, 24696 <le_sc_oob_config_set+0x22>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   2468a:	b952      	cbnz	r2, 246a2 <le_sc_oob_config_set+0x2e>
				     BT_CONN_OOB_BOTH_PEERS :
   2468c:	2b00      	cmp	r3, #0
   2468e:	bf0c      	ite	eq
   24690:	2303      	moveq	r3, #3
   24692:	2300      	movne	r3, #0
   24694:	e009      	b.n	246aa <le_sc_oob_config_set+0x36>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   24696:	b952      	cbnz	r2, 246ae <le_sc_oob_config_set+0x3a>
				     BT_CONN_OOB_BOTH_PEERS :
   24698:	2b00      	cmp	r3, #0
   2469a:	bf0c      	ite	eq
   2469c:	2303      	moveq	r3, #3
   2469e:	2301      	movne	r3, #1
   246a0:	e003      	b.n	246aa <le_sc_oob_config_set+0x36>
				     BT_CONN_OOB_BOTH_PEERS :
   246a2:	2b00      	cmp	r3, #0
   246a4:	bf0c      	ite	eq
   246a6:	2301      	moveq	r3, #1
   246a8:	2302      	movne	r3, #2
	info->lesc.oob_config = oob_config;
   246aa:	704b      	strb	r3, [r1, #1]
}
   246ac:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   246ae:	005b      	lsls	r3, r3, #1
   246b0:	e7fb      	b.n	246aa <le_sc_oob_config_set+0x36>

000246b2 <smp_signing_info>:
}
   246b2:	2007      	movs	r0, #7
   246b4:	4770      	bx	lr

000246b6 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   246b6:	2301      	movs	r3, #1
   246b8:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   246ba:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   246bc:	f3bf 8f5b 	dmb	ish
   246c0:	e850 2f00 	ldrex	r2, [r0]
   246c4:	401a      	ands	r2, r3
   246c6:	e840 2100 	strex	r1, r2, [r0]
   246ca:	2900      	cmp	r1, #0
   246cc:	d1f8      	bne.n	246c0 <atomic_clear_bit+0xa>
   246ce:	f3bf 8f5b 	dmb	ish
}
   246d2:	4770      	bx	lr

000246d4 <bt_addr_le_copy>:
   246d4:	680b      	ldr	r3, [r1, #0]
   246d6:	6003      	str	r3, [r0, #0]
   246d8:	888b      	ldrh	r3, [r1, #4]
   246da:	8083      	strh	r3, [r0, #4]
   246dc:	798b      	ldrb	r3, [r1, #6]
   246de:	7183      	strb	r3, [r0, #6]
   246e0:	4770      	bx	lr

000246e2 <smp_s1>:
{
   246e2:	b410      	push	{r4}
   246e4:	4614      	mov	r4, r2
   246e6:	461a      	mov	r2, r3
   246e8:	6823      	ldr	r3, [r4, #0]
   246ea:	6013      	str	r3, [r2, #0]
   246ec:	6863      	ldr	r3, [r4, #4]
   246ee:	6053      	str	r3, [r2, #4]
   246f0:	680b      	ldr	r3, [r1, #0]
   246f2:	6093      	str	r3, [r2, #8]
   246f4:	684b      	ldr	r3, [r1, #4]
}
   246f6:	bc10      	pop	{r4}
   246f8:	60d3      	str	r3, [r2, #12]
	return bt_encrypt_le(k, out, out);
   246fa:	4611      	mov	r1, r2
   246fc:	f7ee b9ca 	b.w	12a94 <bt_encrypt_le>

00024700 <bt_smp_aes_cmac>:
{
   24700:	b570      	push	{r4, r5, r6, lr}
   24702:	b0c2      	sub	sp, #264	; 0x108
   24704:	460d      	mov	r5, r1
   24706:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   24708:	4601      	mov	r1, r0
   2470a:	aa16      	add	r2, sp, #88	; 0x58
   2470c:	4668      	mov	r0, sp
{
   2470e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   24710:	f7fe f8ea 	bl	228e8 <tc_cmac_setup>
   24714:	b150      	cbz	r0, 2472c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   24716:	4632      	mov	r2, r6
   24718:	4629      	mov	r1, r5
   2471a:	4668      	mov	r0, sp
   2471c:	f7fe f90f 	bl	2293e <tc_cmac_update>
   24720:	b120      	cbz	r0, 2472c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   24722:	4669      	mov	r1, sp
   24724:	4620      	mov	r0, r4
   24726:	f7fe f975 	bl	22a14 <tc_cmac_final>
   2472a:	b918      	cbnz	r0, 24734 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2472c:	f06f 0004 	mvn.w	r0, #4
}
   24730:	b042      	add	sp, #264	; 0x108
   24732:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   24734:	2000      	movs	r0, #0
   24736:	e7fb      	b.n	24730 <bt_smp_aes_cmac+0x30>

00024738 <bt_smp_disconnected>:
{
   24738:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   2473a:	6803      	ldr	r3, [r0, #0]
   2473c:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   24740:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   24742:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   24746:	f001 fbaa 	bl	25e9e <k_delayed_work_cancel>
	if (keys) {
   2474a:	b13d      	cbz	r5, 2475c <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2474c:	89eb      	ldrh	r3, [r5, #14]
   2474e:	b113      	cbz	r3, 24756 <bt_smp_disconnected+0x1e>
   24750:	7b6b      	ldrb	r3, [r5, #13]
   24752:	079b      	lsls	r3, r3, #30
   24754:	d502      	bpl.n	2475c <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   24756:	4628      	mov	r0, r5
   24758:	f000 fe2c 	bl	253b4 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2475c:	4620      	mov	r0, r4
   2475e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   24762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24766:	2100      	movs	r1, #0
   24768:	f001 bda3 	b.w	262b2 <memset>

0002476c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2476c:	b510      	push	{r4, lr}
   2476e:	1e43      	subs	r3, r0, #1
   24770:	f100 0210 	add.w	r2, r0, #16
   24774:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   24776:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2477a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2477e:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   24780:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   24782:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   24784:	d1f7      	bne.n	24776 <sys_mem_swap.constprop.0+0xa>
	}
}
   24786:	bd10      	pop	{r4, pc}

00024788 <smp_f6>:
{
   24788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2478c:	b097      	sub	sp, #92	; 0x5c
   2478e:	4604      	mov	r4, r0
   24790:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   24792:	a805      	add	r0, sp, #20
   24794:	2210      	movs	r2, #16
{
   24796:	461d      	mov	r5, r3
   24798:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
   2479c:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2479e:	f7ff ff5f 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   247a2:	2210      	movs	r2, #16
   247a4:	4631      	mov	r1, r6
   247a6:	a809      	add	r0, sp, #36	; 0x24
   247a8:	f7ff ff5a 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   247ac:	2210      	movs	r2, #16
   247ae:	4629      	mov	r1, r5
   247b0:	a80d      	add	r0, sp, #52	; 0x34
   247b2:	f7ff ff55 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   247b6:	991e      	ldr	r1, [sp, #120]	; 0x78
   247b8:	2203      	movs	r2, #3
   247ba:	a811      	add	r0, sp, #68	; 0x44
   247bc:	f7ff ff50 	bl	24660 <sys_memcpy_swap>
	m[51] = a1->type;
   247c0:	4649      	mov	r1, r9
	memcpy(m + 52, a1->a.val, 6);
   247c2:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   247c6:	f811 3b01 	ldrb.w	r3, [r1], #1
   247ca:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   247ce:	9012      	str	r0, [sp, #72]	; 0x48
   247d0:	888b      	ldrh	r3, [r1, #4]
   247d2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   247d6:	2206      	movs	r2, #6
   247d8:	a812      	add	r0, sp, #72	; 0x48
   247da:	f7ff ff41 	bl	24660 <sys_memcpy_swap>
	m[58] = a2->type;
   247de:	4641      	mov	r1, r8
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   247e0:	2206      	movs	r2, #6
	m[58] = a2->type;
   247e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   247e6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   247ea:	f8d8 3001 	ldr.w	r3, [r8, #1]
   247ee:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   247f2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   247f6:	888b      	ldrh	r3, [r1, #4]
   247f8:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   247fc:	f7ff ff30 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   24800:	4621      	mov	r1, r4
   24802:	2210      	movs	r2, #16
   24804:	a801      	add	r0, sp, #4
   24806:	f7ff ff2b 	bl	24660 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2480a:	463b      	mov	r3, r7
   2480c:	2241      	movs	r2, #65	; 0x41
   2480e:	a905      	add	r1, sp, #20
   24810:	a801      	add	r0, sp, #4
   24812:	f7ff ff75 	bl	24700 <bt_smp_aes_cmac>
	if (err) {
   24816:	4604      	mov	r4, r0
   24818:	b910      	cbnz	r0, 24820 <smp_f6+0x98>
	sys_mem_swap(check, 16);
   2481a:	4638      	mov	r0, r7
   2481c:	f7ff ffa6 	bl	2476c <sys_mem_swap.constprop.0>
}
   24820:	4620      	mov	r0, r4
   24822:	b017      	add	sp, #92	; 0x5c
   24824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00024828 <smp_f4>:
{
   24828:	b5f0      	push	{r4, r5, r6, r7, lr}
   2482a:	b097      	sub	sp, #92	; 0x5c
   2482c:	4614      	mov	r4, r2
   2482e:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   24830:	2220      	movs	r2, #32
   24832:	4601      	mov	r1, r0
   24834:	a805      	add	r0, sp, #20
{
   24836:	461d      	mov	r5, r3
   24838:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2483a:	f7ff ff11 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2483e:	2220      	movs	r2, #32
   24840:	4631      	mov	r1, r6
   24842:	a80d      	add	r0, sp, #52	; 0x34
   24844:	f7ff ff0c 	bl	24660 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   24848:	4621      	mov	r1, r4
   2484a:	2210      	movs	r2, #16
   2484c:	a801      	add	r0, sp, #4
	m[64] = z;
   2484e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   24852:	f7ff ff05 	bl	24660 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   24856:	463b      	mov	r3, r7
   24858:	2241      	movs	r2, #65	; 0x41
   2485a:	a905      	add	r1, sp, #20
   2485c:	a801      	add	r0, sp, #4
   2485e:	f7ff ff4f 	bl	24700 <bt_smp_aes_cmac>
	if (err) {
   24862:	4604      	mov	r4, r0
   24864:	b910      	cbnz	r0, 2486c <smp_f4+0x44>
	sys_mem_swap(res, 16);
   24866:	4638      	mov	r0, r7
   24868:	f7ff ff80 	bl	2476c <sys_mem_swap.constprop.0>
}
   2486c:	4620      	mov	r0, r4
   2486e:	b017      	add	sp, #92	; 0x5c
   24870:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024872 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24872:	f3bf 8f5b 	dmb	ish
   24876:	6800      	ldr	r0, [r0, #0]
   24878:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2487c:	4108      	asrs	r0, r1
}
   2487e:	f000 0001 	and.w	r0, r0, #1
   24882:	4770      	bx	lr

00024884 <smp_keys_check>:
{
   24884:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   24886:	210b      	movs	r1, #11
{
   24888:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2488a:	3004      	adds	r0, #4
   2488c:	f7ff fff1 	bl	24872 <atomic_test_bit>
   24890:	b108      	cbz	r0, 24896 <smp_keys_check+0x12>
		return false;
   24892:	2000      	movs	r0, #0
}
   24894:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   24896:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2489a:	b983      	cbnz	r3, 248be <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   2489c:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   248a0:	7a21      	ldrb	r1, [r4, #8]
   248a2:	462a      	mov	r2, r5
   248a4:	2020      	movs	r0, #32
   248a6:	f7ea fd5b 	bl	f360 <bt_keys_find>
   248aa:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   248ae:	b930      	cbnz	r0, 248be <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   248b0:	7a21      	ldrb	r1, [r4, #8]
   248b2:	462a      	mov	r2, r5
   248b4:	2004      	movs	r0, #4
   248b6:	f7ea fd53 	bl	f360 <bt_keys_find>
   248ba:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   248be:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   248c2:	2b00      	cmp	r3, #0
   248c4:	d0e5      	beq.n	24892 <smp_keys_check+0xe>
   248c6:	89da      	ldrh	r2, [r3, #14]
   248c8:	f002 0224 	and.w	r2, r2, #36	; 0x24
   248cc:	2a00      	cmp	r2, #0
   248ce:	d0e0      	beq.n	24892 <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   248d0:	7aa2      	ldrb	r2, [r4, #10]
   248d2:	2a02      	cmp	r2, #2
   248d4:	d902      	bls.n	248dc <smp_keys_check+0x58>
   248d6:	7b5b      	ldrb	r3, [r3, #13]
   248d8:	07db      	lsls	r3, r3, #31
   248da:	d5da      	bpl.n	24892 <smp_keys_check+0xe>
	return true;
   248dc:	2001      	movs	r0, #1
   248de:	e7d9      	b.n	24894 <smp_keys_check+0x10>

000248e0 <update_keys_check>:
{
   248e0:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   248e2:	6805      	ldr	r5, [r0, #0]
	if (!conn->le.keys) {
   248e4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
{
   248e8:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   248ea:	b933      	cbnz	r3, 248fa <update_keys_check+0x1a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   248ec:	7a28      	ldrb	r0, [r5, #8]
   248ee:	f105 0188 	add.w	r1, r5, #136	; 0x88
   248f2:	f7ea fcf7 	bl	f2e4 <bt_keys_get_addr>
   248f6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   248fa:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
   248fe:	b1fa      	cbz	r2, 24940 <update_keys_check+0x60>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   24900:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
   24902:	f011 0f24 	tst.w	r1, #36	; 0x24
   24906:	d01b      	beq.n	24940 <update_keys_check+0x60>
	return MIN(req->max_key_size, rsp->max_key_size);
   24908:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   2490c:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
   24910:	7b12      	ldrb	r2, [r2, #12]
   24912:	4283      	cmp	r3, r0
   24914:	bf28      	it	cs
   24916:	4603      	movcs	r3, r0
   24918:	429a      	cmp	r2, r3
   2491a:	d901      	bls.n	24920 <update_keys_check+0x40>
		return false;
   2491c:	2000      	movs	r0, #0
}
   2491e:	bd38      	pop	{r3, r4, r5, pc}
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   24920:	068b      	lsls	r3, r1, #26
   24922:	d405      	bmi.n	24930 <update_keys_check+0x50>
	if ((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   24924:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   24928:	3800      	subs	r0, #0
   2492a:	bf18      	it	ne
   2492c:	2001      	movne	r0, #1
   2492e:	e7f6      	b.n	2491e <update_keys_check+0x3e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   24930:	2105      	movs	r1, #5
   24932:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   24936:	f7ff ff9c 	bl	24872 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   2493a:	2800      	cmp	r0, #0
   2493c:	d1f2      	bne.n	24924 <update_keys_check+0x44>
   2493e:	e7ed      	b.n	2491c <update_keys_check+0x3c>
		return true;
   24940:	2001      	movs	r0, #1
   24942:	e7ec      	b.n	2491e <update_keys_check+0x3e>

00024944 <atomic_test_and_clear_bit>:
{
   24944:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24946:	2301      	movs	r3, #1
   24948:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2494c:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2494e:	f3bf 8f5b 	dmb	ish
   24952:	e850 3f00 	ldrex	r3, [r0]
   24956:	ea03 0c02 	and.w	ip, r3, r2
   2495a:	e840 ce00 	strex	lr, ip, [r0]
   2495e:	f1be 0f00 	cmp.w	lr, #0
   24962:	d1f6      	bne.n	24952 <atomic_test_and_clear_bit+0xe>
   24964:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   24968:	420b      	tst	r3, r1
}
   2496a:	bf14      	ite	ne
   2496c:	2001      	movne	r0, #1
   2496e:	2000      	moveq	r0, #0
   24970:	f85d fb04 	ldr.w	pc, [sp], #4

00024974 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24974:	2301      	movs	r3, #1
   24976:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24978:	f3bf 8f5b 	dmb	ish
   2497c:	e850 2f00 	ldrex	r2, [r0]
   24980:	431a      	orrs	r2, r3
   24982:	e840 2100 	strex	r1, r2, [r0]
   24986:	2900      	cmp	r1, #0
   24988:	d1f8      	bne.n	2497c <atomic_set_bit+0x8>
   2498a:	f3bf 8f5b 	dmb	ish
}
   2498e:	4770      	bx	lr

00024990 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   24990:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   24992:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   24996:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   24998:	4628      	mov	r0, r5
   2499a:	2104      	movs	r1, #4
   2499c:	f7ff ff69 	bl	24872 <atomic_test_bit>
   249a0:	b168      	cbz	r0, 249be <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   249a2:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   249a4:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   249a6:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   249a8:	4608      	mov	r0, r1
   249aa:	f7fe fda8 	bl	234fe <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   249ae:	4604      	mov	r4, r0
   249b0:	b940      	cbnz	r0, 249c4 <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   249b2:	2104      	movs	r1, #4
   249b4:	4628      	mov	r0, r5
   249b6:	f7ff ffdd 	bl	24974 <atomic_set_bit>
}
   249ba:	4620      	mov	r0, r4
   249bc:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   249be:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   249c2:	e7ef      	b.n	249a4 <smp_create_pdu.constprop.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   249c4:	2101      	movs	r1, #1
   249c6:	3008      	adds	r0, #8
   249c8:	f000 fd5f 	bl	2548a <net_buf_simple_add>
	hdr->code = op;
   249cc:	7006      	strb	r6, [r0, #0]
	return buf;
   249ce:	e7f4      	b.n	249ba <smp_create_pdu.constprop.0+0x2a>

000249d0 <send_pairing_rsp>:
{
   249d0:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   249d2:	2102      	movs	r1, #2
{
   249d4:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   249d6:	f7ff ffdb 	bl	24990 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   249da:	4605      	mov	r5, r0
   249dc:	b180      	cbz	r0, 24a00 <send_pairing_rsp+0x30>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   249de:	2106      	movs	r1, #6
   249e0:	3008      	adds	r0, #8
   249e2:	f000 fd52 	bl	2548a <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   249e6:	f8d4 30c9 	ldr.w	r3, [r4, #201]	; 0xc9
   249ea:	6003      	str	r3, [r0, #0]
   249ec:	f8b4 30cd 	ldrh.w	r3, [r4, #205]	; 0xcd
   249f0:	8083      	strh	r3, [r0, #4]
	smp_send(smp, rsp_buf, NULL, NULL);
   249f2:	2200      	movs	r2, #0
   249f4:	4620      	mov	r0, r4
   249f6:	4629      	mov	r1, r5
   249f8:	f7e9 f8da 	bl	dbb0 <smp_send.constprop.0>
	return 0;
   249fc:	2000      	movs	r0, #0
}
   249fe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   24a00:	2008      	movs	r0, #8
   24a02:	e7fc      	b.n	249fe <send_pairing_rsp+0x2e>

00024a04 <smp_send_pairing_random>:
{
   24a04:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   24a06:	2104      	movs	r1, #4
{
   24a08:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   24a0a:	f7ff ffc1 	bl	24990 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   24a0e:	4605      	mov	r5, r0
   24a10:	b1a0      	cbz	r0, 24a3c <smp_send_pairing_random+0x38>
	req = net_buf_add(rsp_buf, sizeof(*req));
   24a12:	2110      	movs	r1, #16
   24a14:	3008      	adds	r0, #8
   24a16:	f000 fd38 	bl	2548a <net_buf_simple_add>
   24a1a:	f104 03df 	add.w	r3, r4, #223	; 0xdf
   24a1e:	f104 02ef 	add.w	r2, r4, #239	; 0xef
   24a22:	f853 1b04 	ldr.w	r1, [r3], #4
   24a26:	f840 1b04 	str.w	r1, [r0], #4
   24a2a:	4293      	cmp	r3, r2
   24a2c:	d1f9      	bne.n	24a22 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   24a2e:	4620      	mov	r0, r4
   24a30:	2200      	movs	r2, #0
   24a32:	4629      	mov	r1, r5
   24a34:	f7e9 f8bc 	bl	dbb0 <smp_send.constprop.0>
	return 0;
   24a38:	2000      	movs	r0, #0
}
   24a3a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   24a3c:	2008      	movs	r0, #8
   24a3e:	e7fc      	b.n	24a3a <smp_send_pairing_random+0x36>

00024a40 <sc_smp_send_dhkey_check>:
{
   24a40:	b570      	push	{r4, r5, r6, lr}
   24a42:	460c      	mov	r4, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   24a44:	210d      	movs	r1, #13
{
   24a46:	4606      	mov	r6, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   24a48:	f7ff ffa2 	bl	24990 <smp_create_pdu.constprop.0>
	if (!buf) {
   24a4c:	4605      	mov	r5, r0
   24a4e:	b198      	cbz	r0, 24a78 <sc_smp_send_dhkey_check+0x38>
	req = net_buf_add(buf, sizeof(*req));
   24a50:	2110      	movs	r1, #16
   24a52:	3008      	adds	r0, #8
   24a54:	f000 fd19 	bl	2548a <net_buf_simple_add>
   24a58:	4621      	mov	r1, r4
   24a5a:	f104 0310 	add.w	r3, r4, #16
   24a5e:	f851 2b04 	ldr.w	r2, [r1], #4
   24a62:	f840 2b04 	str.w	r2, [r0], #4
   24a66:	4299      	cmp	r1, r3
   24a68:	d1f9      	bne.n	24a5e <sc_smp_send_dhkey_check+0x1e>
	smp_send(smp, buf, NULL, NULL);
   24a6a:	4630      	mov	r0, r6
   24a6c:	2200      	movs	r2, #0
   24a6e:	4629      	mov	r1, r5
   24a70:	f7e9 f89e 	bl	dbb0 <smp_send.constprop.0>
	return 0;
   24a74:	2000      	movs	r0, #0
}
   24a76:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   24a78:	2008      	movs	r0, #8
   24a7a:	e7fc      	b.n	24a76 <sc_smp_send_dhkey_check+0x36>

00024a7c <compute_and_send_master_dhcheck>:
{
   24a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a80:	4604      	mov	r4, r0
   24a82:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   24a84:	2210      	movs	r2, #16
   24a86:	2100      	movs	r1, #0
   24a88:	a808      	add	r0, sp, #32
   24a8a:	f001 fc12 	bl	262b2 <memset>
	switch (smp->method) {
   24a8e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   24a92:	2b05      	cmp	r3, #5
   24a94:	d81d      	bhi.n	24ad2 <compute_and_send_master_dhcheck+0x56>
   24a96:	e8df f003 	tbb	[pc, r3]
   24a9a:	0306      	.short	0x0306
   24a9c:	1e1c0603 	.word	0x1e1c0603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   24aa0:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   24aa4:	9308      	str	r3, [sp, #32]
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   24aa6:	4625      	mov	r5, r4
		   smp->tk)) {
   24aa8:	f104 02ff 	add.w	r2, r4, #255	; 0xff
		   &smp->chan.chan.conn->le.init_addr,
   24aac:	f855 3bef 	ldr.w	r3, [r5], #239
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   24ab0:	f204 177f 	addw	r7, r4, #383	; 0x17f
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   24ab4:	e9cd 7201 	strd	r7, r2, [sp, #4]
   24ab8:	f104 08df 	add.w	r8, r4, #223	; 0xdf
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   24abc:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   24ac0:	9200      	str	r2, [sp, #0]
   24ac2:	338f      	adds	r3, #143	; 0x8f
   24ac4:	462a      	mov	r2, r5
   24ac6:	4641      	mov	r1, r8
   24ac8:	f204 104f 	addw	r0, r4, #335	; 0x14f
   24acc:	f7e8 ffd4 	bl	da78 <smp_f5>
   24ad0:	b188      	cbz	r0, 24af6 <compute_and_send_master_dhcheck+0x7a>
	switch (smp->method) {
   24ad2:	2008      	movs	r0, #8
   24ad4:	e02b      	b.n	24b2e <compute_and_send_master_dhcheck+0xb2>
		if (smp->oobd_remote) {
   24ad6:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   24ada:	2b00      	cmp	r3, #0
   24adc:	d0e3      	beq.n	24aa6 <compute_and_send_master_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   24ade:	ad08      	add	r5, sp, #32
   24ae0:	f103 0610 	add.w	r6, r3, #16
   24ae4:	6818      	ldr	r0, [r3, #0]
   24ae6:	6859      	ldr	r1, [r3, #4]
   24ae8:	462a      	mov	r2, r5
   24aea:	c203      	stmia	r2!, {r0, r1}
   24aec:	3308      	adds	r3, #8
   24aee:	42b3      	cmp	r3, r6
   24af0:	4615      	mov	r5, r2
   24af2:	d1f7      	bne.n	24ae4 <compute_and_send_master_dhcheck+0x68>
   24af4:	e7d7      	b.n	24aa6 <compute_and_send_master_dhcheck+0x2a>
		   &smp->chan.chan.conn->le.init_addr,
   24af6:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   24af8:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
   24afa:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   24afe:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   24b00:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   24b04:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   24b06:	e9cd 2300 	strd	r2, r3, [sp]
   24b0a:	9102      	str	r1, [sp, #8]
   24b0c:	ab08      	add	r3, sp, #32
   24b0e:	462a      	mov	r2, r5
   24b10:	4641      	mov	r1, r8
   24b12:	4638      	mov	r0, r7
   24b14:	f7ff fe38 	bl	24788 <smp_f6>
   24b18:	2800      	cmp	r0, #0
   24b1a:	d1da      	bne.n	24ad2 <compute_and_send_master_dhcheck+0x56>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   24b1c:	210d      	movs	r1, #13
   24b1e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   24b22:	f7ff ff27 	bl	24974 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   24b26:	4631      	mov	r1, r6
   24b28:	4620      	mov	r0, r4
   24b2a:	f7ff ff89 	bl	24a40 <sc_smp_send_dhkey_check>
}
   24b2e:	b00c      	add	sp, #48	; 0x30
   24b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024b34 <compute_and_check_and_send_slave_dhcheck>:
{
   24b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24b38:	4604      	mov	r4, r0
   24b3a:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   24b3c:	2210      	movs	r2, #16
   24b3e:	2100      	movs	r1, #0
   24b40:	a80c      	add	r0, sp, #48	; 0x30
   24b42:	f001 fbb6 	bl	262b2 <memset>
	switch (smp->method) {
   24b46:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   24b4a:	2b05      	cmp	r3, #5
   24b4c:	d81d      	bhi.n	24b8a <compute_and_check_and_send_slave_dhcheck+0x56>
   24b4e:	e8df f003 	tbb	[pc, r3]
   24b52:	0306      	.short	0x0306
   24b54:	1e1c0603 	.word	0x1e1c0603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   24b58:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   24b5c:	930c      	str	r3, [sp, #48]	; 0x30
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   24b5e:	4625      	mov	r5, r4
		   smp->tk)) {
   24b60:	f104 02ff 	add.w	r2, r4, #255	; 0xff
		   &smp->chan.chan.conn->le.init_addr,
   24b64:	f855 3bdf 	ldr.w	r3, [r5], #223
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   24b68:	f204 167f 	addw	r6, r4, #383	; 0x17f
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   24b6c:	e9cd 6201 	strd	r6, r2, [sp, #4]
   24b70:	f104 07ef 	add.w	r7, r4, #239	; 0xef
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   24b74:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   24b78:	9200      	str	r2, [sp, #0]
   24b7a:	338f      	adds	r3, #143	; 0x8f
   24b7c:	462a      	mov	r2, r5
   24b7e:	4639      	mov	r1, r7
   24b80:	f204 104f 	addw	r0, r4, #335	; 0x14f
   24b84:	f7e8 ff78 	bl	da78 <smp_f5>
   24b88:	b188      	cbz	r0, 24bae <compute_and_check_and_send_slave_dhcheck+0x7a>
	switch (smp->method) {
   24b8a:	2508      	movs	r5, #8
   24b8c:	e05f      	b.n	24c4e <compute_and_check_and_send_slave_dhcheck+0x11a>
		if (smp->oobd_remote) {
   24b8e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   24b92:	2b00      	cmp	r3, #0
   24b94:	d0e3      	beq.n	24b5e <compute_and_check_and_send_slave_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   24b96:	ad0c      	add	r5, sp, #48	; 0x30
   24b98:	f103 0610 	add.w	r6, r3, #16
   24b9c:	6818      	ldr	r0, [r3, #0]
   24b9e:	6859      	ldr	r1, [r3, #4]
   24ba0:	462a      	mov	r2, r5
   24ba2:	c203      	stmia	r2!, {r0, r1}
   24ba4:	3308      	adds	r3, #8
   24ba6:	42b3      	cmp	r3, r6
   24ba8:	4615      	mov	r5, r2
   24baa:	d1f7      	bne.n	24b9c <compute_and_check_and_send_slave_dhcheck+0x68>
   24bac:	e7d7      	b.n	24b5e <compute_and_check_and_send_slave_dhcheck+0x2a>
		   &smp->chan.chan.conn->le.resp_addr,
   24bae:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   24bb0:	f10d 0820 	add.w	r8, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
   24bb4:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   24bb8:	f8cd 800c 	str.w	r8, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   24bbc:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   24bc0:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   24bc2:	e9cd 2300 	strd	r2, r3, [sp]
   24bc6:	9102      	str	r1, [sp, #8]
   24bc8:	ab0c      	add	r3, sp, #48	; 0x30
   24bca:	463a      	mov	r2, r7
   24bcc:	4629      	mov	r1, r5
   24bce:	4630      	mov	r0, r6
   24bd0:	f7ff fdda 	bl	24788 <smp_f6>
   24bd4:	2800      	cmp	r0, #0
   24bd6:	d1d8      	bne.n	24b8a <compute_and_check_and_send_slave_dhcheck+0x56>
	if (smp->method == LE_SC_OOB) {
   24bd8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   24bdc:	2b05      	cmp	r3, #5
   24bde:	d10f      	bne.n	24c00 <compute_and_check_and_send_slave_dhcheck+0xcc>
		if (smp->oobd_local) {
   24be0:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
   24be4:	b3b9      	cbz	r1, 24c56 <compute_and_check_and_send_slave_dhcheck+0x122>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   24be6:	460b      	mov	r3, r1
   24be8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   24bec:	f101 0e10 	add.w	lr, r1, #16
   24bf0:	6818      	ldr	r0, [r3, #0]
   24bf2:	6859      	ldr	r1, [r3, #4]
   24bf4:	4662      	mov	r2, ip
   24bf6:	c203      	stmia	r2!, {r0, r1}
   24bf8:	3308      	adds	r3, #8
   24bfa:	4573      	cmp	r3, lr
   24bfc:	4694      	mov	ip, r2
   24bfe:	d1f7      	bne.n	24bf0 <compute_and_check_and_send_slave_dhcheck+0xbc>
		   &smp->chan.chan.conn->le.init_addr,
   24c00:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   24c02:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
   24c06:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   24c0a:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   24c0e:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   24c12:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   24c14:	e9cd 2300 	strd	r2, r3, [sp]
   24c18:	9102      	str	r1, [sp, #8]
   24c1a:	ab0c      	add	r3, sp, #48	; 0x30
   24c1c:	462a      	mov	r2, r5
   24c1e:	4639      	mov	r1, r7
   24c20:	4630      	mov	r0, r6
   24c22:	f7ff fdb1 	bl	24788 <smp_f6>
   24c26:	2800      	cmp	r0, #0
   24c28:	d1af      	bne.n	24b8a <compute_and_check_and_send_slave_dhcheck+0x56>
	if (memcmp(smp->e, re, 16)) {
   24c2a:	2210      	movs	r2, #16
   24c2c:	4649      	mov	r1, r9
   24c2e:	f204 106f 	addw	r0, r4, #367	; 0x16f
   24c32:	f001 fb20 	bl	26276 <memcmp>
   24c36:	b998      	cbnz	r0, 24c60 <compute_and_check_and_send_slave_dhcheck+0x12c>
	err = sc_smp_send_dhkey_check(smp, e);
   24c38:	4641      	mov	r1, r8
   24c3a:	4620      	mov	r0, r4
   24c3c:	f7ff ff00 	bl	24a40 <sc_smp_send_dhkey_check>
	if (err) {
   24c40:	4605      	mov	r5, r0
   24c42:	b920      	cbnz	r0, 24c4e <compute_and_check_and_send_slave_dhcheck+0x11a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   24c44:	2101      	movs	r1, #1
   24c46:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   24c4a:	f7ff fe93 	bl	24974 <atomic_set_bit>
}
   24c4e:	4628      	mov	r0, r5
   24c50:	b011      	add	sp, #68	; 0x44
   24c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   24c56:	2210      	movs	r2, #16
   24c58:	a80c      	add	r0, sp, #48	; 0x30
   24c5a:	f001 fb2a 	bl	262b2 <memset>
   24c5e:	e7cf      	b.n	24c00 <compute_and_check_and_send_slave_dhcheck+0xcc>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   24c60:	250b      	movs	r5, #11
   24c62:	e7f4      	b.n	24c4e <compute_and_check_and_send_slave_dhcheck+0x11a>

00024c64 <smp_dhkey_check>:
{
   24c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   24c68:	6807      	ldr	r7, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   24c6a:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   24c6c:	78fd      	ldrb	r5, [r7, #3]
{
   24c6e:	b090      	sub	sp, #64	; 0x40
   24c70:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24c72:	2d00      	cmp	r5, #0
   24c74:	d15f      	bne.n	24d36 <smp_dhkey_check+0xd2>
		(void)memset(r, 0, sizeof(r));
   24c76:	2210      	movs	r2, #16
   24c78:	4629      	mov	r1, r5
   24c7a:	a80c      	add	r0, sp, #48	; 0x30
   24c7c:	f001 fb19 	bl	262b2 <memset>
		switch (smp->method) {
   24c80:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   24c84:	2b05      	cmp	r3, #5
   24c86:	d81d      	bhi.n	24cc4 <smp_dhkey_check+0x60>
   24c88:	e8df f003 	tbb	[pc, r3]
   24c8c:	06030306 	.word	0x06030306
   24c90:	211c      	.short	0x211c
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   24c92:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   24c96:	930c      	str	r3, [sp, #48]	; 0x30
			   &smp->chan.chan.conn->le.init_addr, e)) {
   24c98:	f107 038f 	add.w	r3, r7, #143	; 0x8f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   24c9c:	f10d 0820 	add.w	r8, sp, #32
   24ca0:	9302      	str	r3, [sp, #8]
			   &smp->chan.chan.conn->le.resp_addr,
   24ca2:	3796      	adds	r7, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   24ca4:	f104 03c9 	add.w	r3, r4, #201	; 0xc9
   24ca8:	9300      	str	r3, [sp, #0]
   24caa:	f8cd 800c 	str.w	r8, [sp, #12]
   24cae:	9701      	str	r7, [sp, #4]
   24cb0:	ab0c      	add	r3, sp, #48	; 0x30
   24cb2:	f104 02df 	add.w	r2, r4, #223	; 0xdf
   24cb6:	f104 01ef 	add.w	r1, r4, #239	; 0xef
   24cba:	f204 107f 	addw	r0, r4, #383	; 0x17f
   24cbe:	f7ff fd63 	bl	24788 <smp_f6>
   24cc2:	b1a8      	cbz	r0, 24cf0 <smp_dhkey_check+0x8c>
		switch (smp->method) {
   24cc4:	2508      	movs	r5, #8
}
   24cc6:	4628      	mov	r0, r5
   24cc8:	b010      	add	sp, #64	; 0x40
   24cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (smp->oobd_local) {
   24cce:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   24cd2:	2b00      	cmp	r3, #0
   24cd4:	d0e0      	beq.n	24c98 <smp_dhkey_check+0x34>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   24cd6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   24cda:	f103 0e10 	add.w	lr, r3, #16
   24cde:	6818      	ldr	r0, [r3, #0]
   24ce0:	6859      	ldr	r1, [r3, #4]
   24ce2:	4662      	mov	r2, ip
   24ce4:	c203      	stmia	r2!, {r0, r1}
   24ce6:	3308      	adds	r3, #8
   24ce8:	4573      	cmp	r3, lr
   24cea:	4694      	mov	ip, r2
   24cec:	d1f7      	bne.n	24cde <smp_dhkey_check+0x7a>
   24cee:	e7d3      	b.n	24c98 <smp_dhkey_check+0x34>
		if (memcmp(e, req->e, 16)) {
   24cf0:	2210      	movs	r2, #16
   24cf2:	4631      	mov	r1, r6
   24cf4:	4640      	mov	r0, r8
   24cf6:	f001 fabe 	bl	26276 <memcmp>
   24cfa:	b9d0      	cbnz	r0, 24d32 <smp_dhkey_check+0xce>
	return MIN(req->max_key_size, rsp->max_key_size);
   24cfc:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
   24d00:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   24d04:	429a      	cmp	r2, r3
   24d06:	bf94      	ite	ls
   24d08:	9200      	strls	r2, [sp, #0]
   24d0a:	9300      	strhi	r3, [sp, #0]
		(void)memset(rand, 0, sizeof(rand));
   24d0c:	e9cd 0006 	strd	r0, r0, [sp, #24]
		(void)memset(ediv, 0, sizeof(ediv));
   24d10:	f8ad 0014 	strh.w	r0, [sp, #20]
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   24d14:	f104 03ff 	add.w	r3, r4, #255	; 0xff
   24d18:	6820      	ldr	r0, [r4, #0]
   24d1a:	aa05      	add	r2, sp, #20
   24d1c:	a906      	add	r1, sp, #24
   24d1e:	f7fe fa90 	bl	23242 <bt_conn_le_start_encryption>
   24d22:	2800      	cmp	r0, #0
   24d24:	dbce      	blt.n	24cc4 <smp_dhkey_check+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   24d26:	2101      	movs	r1, #1
   24d28:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24d2c:	f7ff fe22 	bl	24974 <atomic_set_bit>
			return 0;
   24d30:	e7c9      	b.n	24cc6 <smp_dhkey_check+0x62>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   24d32:	250b      	movs	r5, #11
   24d34:	e7c7      	b.n	24cc6 <smp_dhkey_check+0x62>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   24d36:	2d01      	cmp	r5, #1
   24d38:	d11a      	bne.n	24d70 <smp_dhkey_check+0x10c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   24d3a:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
   24d3e:	210f      	movs	r1, #15
   24d40:	4638      	mov	r0, r7
   24d42:	f7ff fcb8 	bl	246b6 <atomic_clear_bit>
   24d46:	4631      	mov	r1, r6
   24d48:	f204 136f 	addw	r3, r4, #367	; 0x16f
   24d4c:	f106 0210 	add.w	r2, r6, #16
   24d50:	f851 0b04 	ldr.w	r0, [r1], #4
   24d54:	f843 0b04 	str.w	r0, [r3], #4
   24d58:	4291      	cmp	r1, r2
   24d5a:	d1f9      	bne.n	24d50 <smp_dhkey_check+0xec>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   24d5c:	2107      	movs	r1, #7
   24d5e:	4638      	mov	r0, r7
   24d60:	f7ff fd87 	bl	24872 <atomic_test_bit>
   24d64:	4605      	mov	r5, r0
   24d66:	b128      	cbz	r0, 24d74 <smp_dhkey_check+0x110>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24d68:	2108      	movs	r1, #8
   24d6a:	4638      	mov	r0, r7
   24d6c:	f7ff fe02 	bl	24974 <atomic_set_bit>
	return 0;
   24d70:	2500      	movs	r5, #0
   24d72:	e7a8      	b.n	24cc6 <smp_dhkey_check+0x62>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   24d74:	2109      	movs	r1, #9
   24d76:	4638      	mov	r0, r7
   24d78:	f7ff fd7b 	bl	24872 <atomic_test_bit>
   24d7c:	b110      	cbz	r0, 24d84 <smp_dhkey_check+0x120>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   24d7e:	2108      	movs	r1, #8
   24d80:	4638      	mov	r0, r7
   24d82:	e7d3      	b.n	24d2c <smp_dhkey_check+0xc8>
		return compute_and_check_and_send_slave_dhcheck(smp);
   24d84:	4620      	mov	r0, r4
}
   24d86:	b010      	add	sp, #64	; 0x40
   24d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   24d8c:	f7ff bed2 	b.w	24b34 <compute_and_check_and_send_slave_dhcheck>

00024d90 <smp_reset>:
{
   24d90:	b538      	push	{r3, r4, r5, lr}
   24d92:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   24d94:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   24d96:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   24d9a:	f001 f880 	bl	25e9e <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   24d9e:	2300      	movs	r3, #0
   24da0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   24da4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24da8:	f3bf 8f5b 	dmb	ish
   24dac:	e850 2f00 	ldrex	r2, [r0]
   24db0:	e840 3100 	strex	r1, r3, [r0]
   24db4:	2900      	cmp	r1, #0
   24db6:	d1f9      	bne.n	24dac <smp_reset+0x1c>
   24db8:	f3bf 8f5b 	dmb	ish
   24dbc:	f3bf 8f5b 	dmb	ish
   24dc0:	34bc      	adds	r4, #188	; 0xbc
   24dc2:	e854 2f00 	ldrex	r2, [r4]
   24dc6:	e844 3100 	strex	r1, r3, [r4]
   24dca:	2900      	cmp	r1, #0
   24dcc:	d1f9      	bne.n	24dc2 <smp_reset+0x32>
   24dce:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   24dd2:	7a6b      	ldrb	r3, [r5, #9]
   24dd4:	7aaa      	ldrb	r2, [r5, #10]
   24dd6:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   24dd8:	bf18      	it	ne
   24dda:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24ddc:	78eb      	ldrb	r3, [r5, #3]
   24dde:	b923      	cbnz	r3, 24dea <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   24de0:	210b      	movs	r1, #11
}
   24de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   24de6:	f7ff bdc5 	b.w	24974 <atomic_set_bit>
   24dea:	2101      	movs	r1, #1
   24dec:	e7f9      	b.n	24de2 <smp_reset+0x52>

00024dee <smp_error>:
{
   24dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24df0:	4606      	mov	r6, r0
   24df2:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   24df4:	f7e9 fc14 	bl	e620 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   24df8:	2105      	movs	r1, #5
   24dfa:	4630      	mov	r0, r6
   24dfc:	f7ff fdc8 	bl	24990 <smp_create_pdu.constprop.0>
	if (!buf) {
   24e00:	4605      	mov	r5, r0
   24e02:	b178      	cbz	r0, 24e24 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   24e04:	2101      	movs	r1, #1
   24e06:	3008      	adds	r0, #8
   24e08:	f000 fb3f 	bl	2548a <net_buf_simple_add>
	rsp->reason = reason;
   24e0c:	7004      	strb	r4, [r0, #0]
   24e0e:	2400      	movs	r4, #0
   24e10:	6830      	ldr	r0, [r6, #0]
   24e12:	9400      	str	r4, [sp, #0]
   24e14:	4623      	mov	r3, r4
   24e16:	462a      	mov	r2, r5
   24e18:	2106      	movs	r1, #6
   24e1a:	f7fe fb73 	bl	23504 <bt_l2cap_send_cb>
	return 0;
   24e1e:	4620      	mov	r0, r4
}
   24e20:	b002      	add	sp, #8
   24e22:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   24e24:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24e28:	e7fa      	b.n	24e20 <smp_error+0x32>

00024e2a <smp_ident_sent>:
{
   24e2a:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   24e2c:	7883      	ldrb	r3, [r0, #2]
   24e2e:	2b01      	cmp	r3, #1
   24e30:	d10f      	bne.n	24e52 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   24e32:	2106      	movs	r1, #6
   24e34:	f7fe fb96 	bl	23564 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   24e38:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   24e3c:	f022 0201 	bic.w	r2, r2, #1
   24e40:	f880 21a0 	strb.w	r2, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   24e44:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   24e48:	b919      	cbnz	r1, 24e52 <smp_ident_sent+0x28>
}
   24e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   24e4e:	f7e9 bbe7 	b.w	e620 <smp_pairing_complete>
}
   24e52:	bd08      	pop	{r3, pc}

00024e54 <bt_smp_encrypt_change>:
{
   24e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   24e56:	4605      	mov	r5, r0
{
   24e58:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   24e5a:	f855 7bbc 	ldr.w	r7, [r5], #188
{
   24e5e:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   24e60:	2101      	movs	r1, #1
   24e62:	4628      	mov	r0, r5
   24e64:	f7ff fc27 	bl	246b6 <atomic_clear_bit>
	if (hci_status) {
   24e68:	2e00      	cmp	r6, #0
   24e6a:	d14a      	bne.n	24f02 <bt_smp_encrypt_change+0xae>
	if (!conn->encrypt) {
   24e6c:	7afb      	ldrb	r3, [r7, #11]
   24e6e:	2b00      	cmp	r3, #0
   24e70:	d047      	beq.n	24f02 <bt_smp_encrypt_change+0xae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   24e72:	2103      	movs	r1, #3
   24e74:	f7ff fcfd 	bl	24872 <atomic_test_bit>
   24e78:	b920      	cbnz	r0, 24e84 <bt_smp_encrypt_change+0x30>
		smp_reset(smp);
   24e7a:	4620      	mov	r0, r4
}
   24e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_reset(smp);
   24e80:	f7ff bf86 	b.w	24d90 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   24e84:	2105      	movs	r1, #5
   24e86:	4628      	mov	r0, r5
   24e88:	f7ff fcf3 	bl	24872 <atomic_test_bit>
   24e8c:	b198      	cbz	r0, 24eb6 <bt_smp_encrypt_change+0x62>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   24e8e:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   24e92:	071e      	lsls	r6, r3, #28
   24e94:	d507      	bpl.n	24ea6 <bt_smp_encrypt_change+0x52>
   24e96:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   24e9a:	0718      	lsls	r0, r3, #28
   24e9c:	d503      	bpl.n	24ea6 <bt_smp_encrypt_change+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   24e9e:	2110      	movs	r1, #16
   24ea0:	4628      	mov	r0, r5
   24ea2:	f7ff fd67 	bl	24974 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   24ea6:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
   24eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   24eae:	f023 0308 	bic.w	r3, r3, #8
   24eb2:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   24eb6:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   24eba:	07d9      	lsls	r1, r3, #31
   24ebc:	d519      	bpl.n	24ef2 <bt_smp_encrypt_change+0x9e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   24ebe:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   24ec0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   24ec4:	f7ff fd56 	bl	24974 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   24ec8:	2102      	movs	r1, #2
   24eca:	4628      	mov	r0, r5
   24ecc:	f7ff fd52 	bl	24974 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   24ed0:	78fb      	ldrb	r3, [r7, #3]
   24ed2:	b913      	cbnz	r3, 24eda <bt_smp_encrypt_change+0x86>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   24ed4:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   24ed8:	b99b      	cbnz	r3, 24f02 <bt_smp_encrypt_change+0xae>
	if (bt_smp_distribute_keys(smp)) {
   24eda:	4620      	mov	r0, r4
   24edc:	f7e9 f850 	bl	df80 <bt_smp_distribute_keys>
   24ee0:	b978      	cbnz	r0, 24f02 <bt_smp_encrypt_change+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
   24ee2:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   24ee6:	b961      	cbnz	r1, 24f02 <bt_smp_encrypt_change+0xae>
		smp_pairing_complete(smp, 0);
   24ee8:	4620      	mov	r0, r4
}
   24eea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_pairing_complete(smp, 0);
   24eee:	f7e9 bb97 	b.w	e620 <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   24ef2:	079a      	lsls	r2, r3, #30
   24ef4:	d501      	bpl.n	24efa <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   24ef6:	2108      	movs	r1, #8
   24ef8:	e7e2      	b.n	24ec0 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   24efa:	075b      	lsls	r3, r3, #29
   24efc:	d5e4      	bpl.n	24ec8 <bt_smp_encrypt_change+0x74>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   24efe:	210a      	movs	r1, #10
   24f00:	e7de      	b.n	24ec0 <bt_smp_encrypt_change+0x6c>
}
   24f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024f04 <smp_c1>:
{
   24f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   24f06:	b089      	sub	sp, #36	; 0x24
   24f08:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   24f0c:	4605      	mov	r5, r0
	p1[0] = ia->type;
   24f0e:	7830      	ldrb	r0, [r6, #0]
   24f10:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   24f14:	7838      	ldrb	r0, [r7, #0]
   24f16:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   24f1a:	6810      	ldr	r0, [r2, #0]
   24f1c:	f8cd 0002 	str.w	r0, [sp, #2]
   24f20:	8890      	ldrh	r0, [r2, #4]
   24f22:	7992      	ldrb	r2, [r2, #6]
{
   24f24:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   24f26:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   24f2a:	681a      	ldr	r2, [r3, #0]
   24f2c:	f8cd 2009 	str.w	r2, [sp, #9]
   24f30:	889a      	ldrh	r2, [r3, #4]
   24f32:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   24f34:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   24f38:	f8ad 200d 	strh.w	r2, [sp, #13]
   24f3c:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   24f40:	f101 0c10 	add.w	ip, r1, #16
   24f44:	4620      	mov	r0, r4
   24f46:	466a      	mov	r2, sp
   24f48:	458c      	cmp	ip, r1
   24f4a:	d124      	bne.n	24f96 <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   24f4c:	4622      	mov	r2, r4
   24f4e:	4621      	mov	r1, r4
   24f50:	4628      	mov	r0, r5
   24f52:	f7ed fd9f 	bl	12a94 <bt_encrypt_le>
	if (err) {
   24f56:	4603      	mov	r3, r0
   24f58:	bb70      	cbnz	r0, 24fb8 <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   24f5a:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   24f5e:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   24f62:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   24f66:	f8d7 0001 	ldr.w	r0, [r7, #1]
	memcpy(p2 + 6, ia->a.val, 6);
   24f6a:	f8cd 2016 	str.w	r2, [sp, #22]
   24f6e:	f8b6 2005 	ldrh.w	r2, [r6, #5]
	memcpy(p2, ra->a.val, 6);
   24f72:	9004      	str	r0, [sp, #16]
	(void)memset(p2 + 12, 0, 4);
   24f74:	9307      	str	r3, [sp, #28]
	memcpy(p2 + 6, ia->a.val, 6);
   24f76:	f8ad 201a 	strh.w	r2, [sp, #26]
	while (len--) {
   24f7a:	f104 0010 	add.w	r0, r4, #16
   24f7e:	4623      	mov	r3, r4
   24f80:	a904      	add	r1, sp, #16
   24f82:	4283      	cmp	r3, r0
   24f84:	d110      	bne.n	24fa8 <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   24f86:	4622      	mov	r2, r4
   24f88:	4621      	mov	r1, r4
   24f8a:	4628      	mov	r0, r5
}
   24f8c:	b009      	add	sp, #36	; 0x24
   24f8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   24f92:	f7ed bd7f 	b.w	12a94 <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   24f96:	f811 3b01 	ldrb.w	r3, [r1], #1
   24f9a:	f812 eb01 	ldrb.w	lr, [r2], #1
   24f9e:	ea83 030e 	eor.w	r3, r3, lr
   24fa2:	f800 3b01 	strb.w	r3, [r0], #1
   24fa6:	e7cf      	b.n	24f48 <smp_c1+0x44>
   24fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
   24fac:	f811 6b01 	ldrb.w	r6, [r1], #1
   24fb0:	4072      	eors	r2, r6
   24fb2:	f803 2c01 	strb.w	r2, [r3, #-1]
   24fb6:	e7e4      	b.n	24f82 <smp_c1+0x7e>
}
   24fb8:	b009      	add	sp, #36	; 0x24
   24fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024fbc <legacy_send_pairing_confirm>:
{
   24fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   24fbe:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   24fc0:	6804      	ldr	r4, [r0, #0]
{
   24fc2:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   24fc4:	f7ff fce4 	bl	24990 <smp_create_pdu.constprop.0>
	if (!buf) {
   24fc8:	4606      	mov	r6, r0
   24fca:	b1c0      	cbz	r0, 24ffe <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
   24fcc:	2110      	movs	r1, #16
   24fce:	3008      	adds	r0, #8
   24fd0:	f000 fa5b 	bl	2548a <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   24fd4:	f104 0396 	add.w	r3, r4, #150	; 0x96
   24fd8:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   24fda:	9002      	str	r0, [sp, #8]
   24fdc:	9301      	str	r3, [sp, #4]
   24fde:	9400      	str	r4, [sp, #0]
   24fe0:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   24fe4:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   24fe8:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   24fec:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   24ff0:	f7ff ff88 	bl	24f04 <smp_c1>
   24ff4:	4604      	mov	r4, r0
   24ff6:	b120      	cbz	r0, 25002 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   24ff8:	4630      	mov	r0, r6
   24ffa:	f7f8 fd0f 	bl	1da1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   24ffe:	2008      	movs	r0, #8
   25000:	e00a      	b.n	25018 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   25002:	4602      	mov	r2, r0
   25004:	4631      	mov	r1, r6
   25006:	4628      	mov	r0, r5
   25008:	f7e8 fdd2 	bl	dbb0 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2500c:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   25010:	4621      	mov	r1, r4
   25012:	f7ff fb50 	bl	246b6 <atomic_clear_bit>
	return 0;
   25016:	4620      	mov	r0, r4
}
   25018:	b004      	add	sp, #16
   2501a:	bd70      	pop	{r4, r5, r6, pc}

0002501c <legacy_pairing_confirm>:
{
   2501c:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2501e:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   25020:	78db      	ldrb	r3, [r3, #3]
{
   25022:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   25024:	b94b      	cbnz	r3, 2503a <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   25026:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
   25028:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   2502c:	f7ff fca2 	bl	24974 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
   25030:	4620      	mov	r0, r4
}
   25032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
   25036:	f7ff bfc1 	b.w	24fbc <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2503a:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   2503e:	2109      	movs	r1, #9
   25040:	4618      	mov	r0, r3
   25042:	f7ff fc16 	bl	24872 <atomic_test_bit>
   25046:	b908      	cbnz	r0, 2504c <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
   25048:	2104      	movs	r1, #4
   2504a:	e7ed      	b.n	25028 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2504c:	4618      	mov	r0, r3
   2504e:	2100      	movs	r1, #0
   25050:	f7ff fc90 	bl	24974 <atomic_set_bit>
}
   25054:	2000      	movs	r0, #0
   25056:	bd10      	pop	{r4, pc}

00025058 <smp_pairing_confirm>:
{
   25058:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2505a:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2505c:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
{
   25060:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   25062:	210a      	movs	r1, #10
   25064:	4630      	mov	r0, r6
   25066:	f7ff fb26 	bl	246b6 <atomic_clear_bit>
   2506a:	462b      	mov	r3, r5
   2506c:	f104 02cf 	add.w	r2, r4, #207	; 0xcf
   25070:	f105 0110 	add.w	r1, r5, #16
   25074:	f853 0b04 	ldr.w	r0, [r3], #4
   25078:	f842 0b04 	str.w	r0, [r2], #4
   2507c:	428b      	cmp	r3, r1
   2507e:	d1f9      	bne.n	25074 <smp_pairing_confirm+0x1c>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   25080:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   25082:	78db      	ldrb	r3, [r3, #3]
   25084:	b94b      	cbnz	r3, 2509a <smp_pairing_confirm+0x42>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   25086:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   2508a:	2104      	movs	r1, #4
   2508c:	f7ff fc72 	bl	24974 <atomic_set_bit>
		return smp_send_pairing_random(smp);
   25090:	4620      	mov	r0, r4
}
   25092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   25096:	f7ff bcb5 	b.w	24a04 <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2509a:	2105      	movs	r1, #5
   2509c:	4630      	mov	r0, r6
   2509e:	f7ff fbe8 	bl	24872 <atomic_test_bit>
   250a2:	b920      	cbnz	r0, 250ae <smp_pairing_confirm+0x56>
		return legacy_pairing_confirm(smp);
   250a4:	4620      	mov	r0, r4
}
   250a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   250aa:	f7ff bfb7 	b.w	2501c <legacy_pairing_confirm>
	switch (smp->method) {
   250ae:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   250b2:	2b01      	cmp	r3, #1
   250b4:	d00b      	beq.n	250ce <smp_pairing_confirm+0x76>
   250b6:	2b02      	cmp	r3, #2
   250b8:	d115      	bne.n	250e6 <smp_pairing_confirm+0x8e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   250ba:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   250be:	2104      	movs	r1, #4
   250c0:	f7ff fc58 	bl	24974 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   250c4:	4620      	mov	r0, r4
}
   250c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   250ca:	f7e9 b907 	b.w	e2dc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   250ce:	2109      	movs	r1, #9
   250d0:	4630      	mov	r0, r6
   250d2:	f7ff fbce 	bl	24872 <atomic_test_bit>
   250d6:	2800      	cmp	r0, #0
   250d8:	d0ef      	beq.n	250ba <smp_pairing_confirm+0x62>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   250da:	4630      	mov	r0, r6
   250dc:	2100      	movs	r1, #0
   250de:	f7ff fc49 	bl	24974 <atomic_set_bit>
			return 0;
   250e2:	2000      	movs	r0, #0
}
   250e4:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   250e6:	2008      	movs	r0, #8
   250e8:	e7fc      	b.n	250e4 <smp_pairing_confirm+0x8c>

000250ea <bt_smp_request_ltk>:
{
   250ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   250ee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   250f0:	e9cd 2300 	strd	r2, r3, [sp]
   250f4:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   250f6:	f7e8 fc67 	bl	d9c8 <smp_chan_get>
	if (!smp) {
   250fa:	4605      	mov	r5, r0
   250fc:	2800      	cmp	r0, #0
   250fe:	f000 809d 	beq.w	2523c <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   25102:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   25106:	f1b9 0f00 	cmp.w	r9, #0
   2510a:	d12d      	bne.n	25168 <bt_smp_request_ltk+0x7e>
   2510c:	e9dd 2300 	ldrd	r2, r3, [sp]
   25110:	4313      	orrs	r3, r2
   25112:	d129      	bne.n	25168 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   25114:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   25118:	2103      	movs	r1, #3
   2511a:	4640      	mov	r0, r8
   2511c:	f7ff fba9 	bl	24872 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   25120:	b310      	cbz	r0, 25168 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   25122:	2101      	movs	r1, #1
   25124:	4640      	mov	r0, r8
   25126:	f7ff fba4 	bl	24872 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2512a:	4606      	mov	r6, r0
   2512c:	b1e0      	cbz	r0, 25168 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2512e:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   25132:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   25136:	429c      	cmp	r4, r3
   25138:	bf28      	it	cs
   2513a:	461c      	movcs	r4, r3
   2513c:	4622      	mov	r2, r4
   2513e:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   25142:	4638      	mov	r0, r7
   25144:	f001 f8a7 	bl	26296 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   25148:	2c0f      	cmp	r4, #15
   2514a:	d805      	bhi.n	25158 <bt_smp_request_ltk+0x6e>
__ssp_bos_icheck3(memset, void *, int)
   2514c:	f1c4 0210 	rsb	r2, r4, #16
   25150:	4649      	mov	r1, r9
   25152:	1938      	adds	r0, r7, r4
   25154:	f001 f8ad 	bl	262b2 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   25158:	2101      	movs	r1, #1
   2515a:	4640      	mov	r0, r8
   2515c:	f7ff fc0a 	bl	24974 <atomic_set_bit>
}
   25160:	4630      	mov	r0, r6
   25162:	b003      	add	sp, #12
   25164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   25168:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2516c:	b983      	cbnz	r3, 25190 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   2516e:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   25172:	7a21      	ldrb	r1, [r4, #8]
   25174:	4632      	mov	r2, r6
   25176:	2020      	movs	r0, #32
   25178:	f7ea f8f2 	bl	f360 <bt_keys_find>
   2517c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   25180:	b930      	cbnz	r0, 25190 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   25182:	7a21      	ldrb	r1, [r4, #8]
   25184:	4632      	mov	r2, r6
   25186:	2001      	movs	r0, #1
   25188:	f7ea f8ea 	bl	f360 <bt_keys_find>
   2518c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   25190:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   25194:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   25198:	b9ce      	cbnz	r6, 251ce <bt_smp_request_ltk+0xe4>
   2519a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2519e:	4313      	orrs	r3, r2
   251a0:	d115      	bne.n	251ce <bt_smp_request_ltk+0xe4>
   251a2:	2800      	cmp	r0, #0
   251a4:	d03c      	beq.n	25220 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   251a6:	89c3      	ldrh	r3, [r0, #14]
   251a8:	069a      	lsls	r2, r3, #26
   251aa:	d511      	bpl.n	251d0 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   251ac:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   251ae:	f100 011a 	add.w	r1, r0, #26
   251b2:	4622      	mov	r2, r4
   251b4:	4638      	mov	r0, r7
   251b6:	f001 f86e 	bl	26296 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   251ba:	2c0f      	cmp	r4, #15
   251bc:	d805      	bhi.n	251ca <bt_smp_request_ltk+0xe0>
__ssp_bos_icheck3(memset, void *, int)
   251be:	f1c4 0210 	rsb	r2, r4, #16
   251c2:	4631      	mov	r1, r6
   251c4:	1938      	adds	r0, r7, r4
   251c6:	f001 f874 	bl	262b2 <memset>
		return true;
   251ca:	2601      	movs	r6, #1
   251cc:	e7c8      	b.n	25160 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   251ce:	b338      	cbz	r0, 25220 <bt_smp_request_ltk+0x136>
   251d0:	89c3      	ldrh	r3, [r0, #14]
   251d2:	07db      	lsls	r3, r3, #31
   251d4:	d524      	bpl.n	25220 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   251d6:	2208      	movs	r2, #8
   251d8:	4669      	mov	r1, sp
   251da:	3040      	adds	r0, #64	; 0x40
   251dc:	f001 f84b 	bl	26276 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   251e0:	b9f0      	cbnz	r0, 25220 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   251e2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   251e6:	2202      	movs	r2, #2
   251e8:	a90a      	add	r1, sp, #40	; 0x28
   251ea:	3048      	adds	r0, #72	; 0x48
   251ec:	f001 f843 	bl	26276 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   251f0:	4606      	mov	r6, r0
   251f2:	b9a8      	cbnz	r0, 25220 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   251f4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   251f8:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   251fa:	4638      	mov	r0, r7
   251fc:	4622      	mov	r2, r4
   251fe:	314a      	adds	r1, #74	; 0x4a
   25200:	f001 f849 	bl	26296 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   25204:	2c0f      	cmp	r4, #15
   25206:	d805      	bhi.n	25214 <bt_smp_request_ltk+0x12a>
__ssp_bos_icheck3(memset, void *, int)
   25208:	f1c4 0210 	rsb	r2, r4, #16
   2520c:	4631      	mov	r1, r6
   2520e:	1938      	adds	r0, r7, r4
   25210:	f001 f84f 	bl	262b2 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   25214:	2101      	movs	r1, #1
   25216:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2521a:	f7ff fbab 	bl	24974 <atomic_set_bit>
		return true;
   2521e:	e7d4      	b.n	251ca <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   25220:	210e      	movs	r1, #14
   25222:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   25226:	f7ff fb24 	bl	24872 <atomic_test_bit>
   2522a:	b120      	cbz	r0, 25236 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2522c:	2202      	movs	r2, #2
   2522e:	2106      	movs	r1, #6
   25230:	4620      	mov	r0, r4
   25232:	f7e5 f84d 	bl	a2d0 <bt_conn_security_changed>
	smp_reset(smp);
   25236:	4628      	mov	r0, r5
   25238:	f7ff fdaa 	bl	24d90 <smp_reset>
	return false;
   2523c:	2600      	movs	r6, #0
   2523e:	e78f      	b.n	25160 <bt_smp_request_ltk+0x76>

00025240 <bt_smp_sign>:
   25240:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25244:	4770      	bx	lr

00025246 <bt_smp_start_security>:
{
   25246:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   2524a:	78c4      	ldrb	r4, [r0, #3]
{
   2524c:	4605      	mov	r5, r0
	switch (conn->role) {
   2524e:	b124      	cbz	r4, 2525a <bt_smp_start_security+0x14>
   25250:	2c01      	cmp	r4, #1
   25252:	d03f      	beq.n	252d4 <bt_smp_start_security+0x8e>
		return -EINVAL;
   25254:	f06f 0415 	mvn.w	r4, #21
   25258:	e005      	b.n	25266 <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   2525a:	f7e8 fbb5 	bl	d9c8 <smp_chan_get>
		if (!smp) {
   2525e:	4606      	mov	r6, r0
   25260:	b928      	cbnz	r0, 2526e <bt_smp_start_security+0x28>
			return -ENOTCONN;
   25262:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
   25266:	4620      	mov	r0, r4
   25268:	b003      	add	sp, #12
   2526a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!smp_keys_check(conn)) {
   2526e:	4628      	mov	r0, r5
   25270:	f7ff fb08 	bl	24884 <smp_keys_check>
   25274:	b928      	cbnz	r0, 25282 <bt_smp_start_security+0x3c>
			return smp_send_pairing_req(conn);
   25276:	4628      	mov	r0, r5
}
   25278:	b003      	add	sp, #12
   2527a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   2527e:	f7e8 bf27 	b.w	e0d0 <smp_send_pairing_req>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   25282:	f106 07bc 	add.w	r7, r6, #188	; 0xbc
   25286:	2103      	movs	r1, #3
   25288:	4638      	mov	r0, r7
   2528a:	f7ff faf2 	bl	24872 <atomic_test_bit>
   2528e:	b110      	cbz	r0, 25296 <bt_smp_start_security+0x50>
			return -EBUSY;
   25290:	f06f 040f 	mvn.w	r4, #15
   25294:	e7e7      	b.n	25266 <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   25296:	2101      	movs	r1, #1
   25298:	4638      	mov	r0, r7
   2529a:	f7ff faea 	bl	24872 <atomic_test_bit>
   2529e:	2800      	cmp	r0, #0
   252a0:	d1f6      	bne.n	25290 <bt_smp_start_security+0x4a>
						  conn->le.keys->ltk.rand,
   252a2:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   252a6:	7b0b      	ldrb	r3, [r1, #12]
   252a8:	9300      	str	r3, [sp, #0]
   252aa:	f101 0218 	add.w	r2, r1, #24
   252ae:	f101 031a 	add.w	r3, r1, #26
   252b2:	4628      	mov	r0, r5
   252b4:	3110      	adds	r1, #16
   252b6:	f7fd ffc4 	bl	23242 <bt_conn_le_start_encryption>
		if (err) {
   252ba:	4604      	mov	r4, r0
   252bc:	2800      	cmp	r0, #0
   252be:	d1d2      	bne.n	25266 <bt_smp_start_security+0x20>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   252c0:	210b      	movs	r1, #11
   252c2:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
   252c6:	f7ff fb55 	bl	24974 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   252ca:	2101      	movs	r1, #1
   252cc:	4638      	mov	r0, r7
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   252ce:	f7ff fb51 	bl	24974 <atomic_set_bit>
	return 0;
   252d2:	e7c8      	b.n	25266 <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   252d4:	f7e8 fb78 	bl	d9c8 <smp_chan_get>
	if (!smp) {
   252d8:	4606      	mov	r6, r0
   252da:	2800      	cmp	r0, #0
   252dc:	d0c1      	beq.n	25262 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   252de:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   252e2:	2104      	movs	r1, #4
   252e4:	4640      	mov	r0, r8
   252e6:	f7ff fac4 	bl	24872 <atomic_test_bit>
   252ea:	2800      	cmp	r0, #0
   252ec:	d14b      	bne.n	25386 <bt_smp_start_security+0x140>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   252ee:	2103      	movs	r1, #3
   252f0:	4640      	mov	r0, r8
   252f2:	f7ff fabe 	bl	24872 <atomic_test_bit>
   252f6:	2800      	cmp	r0, #0
   252f8:	d1ca      	bne.n	25290 <bt_smp_start_security+0x4a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   252fa:	4621      	mov	r1, r4
   252fc:	4640      	mov	r0, r8
   252fe:	f7ff fab8 	bl	24872 <atomic_test_bit>
   25302:	2800      	cmp	r0, #0
   25304:	d1c4      	bne.n	25290 <bt_smp_start_security+0x4a>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   25306:	7aa8      	ldrb	r0, [r5, #10]
   25308:	f7e8 fc6a 	bl	dbe0 <sec_level_reachable.isra.0>
   2530c:	b168      	cbz	r0, 2532a <bt_smp_start_security+0xe4>
	if (!conn->le.keys) {
   2530e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   25312:	b983      	cbnz	r3, 25336 <bt_smp_start_security+0xf0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   25314:	7a28      	ldrb	r0, [r5, #8]
   25316:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2531a:	f7e9 ffe3 	bl	f2e4 <bt_keys_get_addr>
   2531e:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   25322:	b940      	cbnz	r0, 25336 <bt_smp_start_security+0xf0>
			return -ENOMEM;
   25324:	f06f 040b 	mvn.w	r4, #11
   25328:	e79d      	b.n	25266 <bt_smp_start_security+0x20>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2532a:	4628      	mov	r0, r5
   2532c:	f7ff faaa 	bl	24884 <smp_keys_check>
   25330:	2800      	cmp	r0, #0
   25332:	d1ec      	bne.n	2530e <bt_smp_start_security+0xc8>
   25334:	e78e      	b.n	25254 <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   25336:	4630      	mov	r0, r6
   25338:	f7e8 fcfe 	bl	dd38 <smp_init>
   2533c:	4604      	mov	r4, r0
   2533e:	b110      	cbz	r0, 25346 <bt_smp_start_security+0x100>
		return -ENOBUFS;
   25340:	f06f 0468 	mvn.w	r4, #104	; 0x68
   25344:	e78f      	b.n	25266 <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   25346:	210b      	movs	r1, #11
   25348:	4630      	mov	r0, r6
   2534a:	f7ff fb21 	bl	24990 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2534e:	4607      	mov	r7, r0
   25350:	2800      	cmp	r0, #0
   25352:	d0f5      	beq.n	25340 <bt_smp_start_security+0xfa>
	req = net_buf_add(req_buf, sizeof(*req));
   25354:	2101      	movs	r1, #1
   25356:	3008      	adds	r0, #8
   25358:	f000 f897 	bl	2548a <net_buf_simple_add>
   2535c:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   2535e:	2009      	movs	r0, #9
   25360:	f7e8 fb6c 	bl	da3c <get_auth.constprop.0>
   25364:	4623      	mov	r3, r4
   25366:	f889 0000 	strb.w	r0, [r9]
   2536a:	463a      	mov	r2, r7
   2536c:	2106      	movs	r1, #6
   2536e:	9400      	str	r4, [sp, #0]
   25370:	4628      	mov	r0, r5
   25372:	f7fe f8c7 	bl	23504 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   25376:	210e      	movs	r1, #14
   25378:	4640      	mov	r0, r8
   2537a:	f7ff fafb 	bl	24974 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2537e:	2101      	movs	r1, #1
   25380:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
   25384:	e7a3      	b.n	252ce <bt_smp_start_security+0x88>
		return -EIO;
   25386:	f06f 0404 	mvn.w	r4, #4
   2538a:	e76c      	b.n	25266 <bt_smp_start_security+0x20>

0002538c <bt_keys_get_type>:
{
   2538c:	b570      	push	{r4, r5, r6, lr}
   2538e:	4604      	mov	r4, r0
   25390:	460d      	mov	r5, r1
   25392:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   25394:	f7e9 ffe4 	bl	f360 <bt_keys_find>
	if (keys) {
   25398:	b938      	cbnz	r0, 253aa <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2539a:	4631      	mov	r1, r6
   2539c:	4628      	mov	r0, r5
   2539e:	f7e9 ffa1 	bl	f2e4 <bt_keys_get_addr>
	if (!keys) {
   253a2:	b110      	cbz	r0, 253aa <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   253a4:	89c3      	ldrh	r3, [r0, #14]
   253a6:	431c      	orrs	r4, r3
   253a8:	81c4      	strh	r4, [r0, #14]
}
   253aa:	bd70      	pop	{r4, r5, r6, pc}

000253ac <bt_keys_add_type>:
	keys->keys |= type;
   253ac:	89c3      	ldrh	r3, [r0, #14]
   253ae:	4319      	orrs	r1, r3
   253b0:	81c1      	strh	r1, [r0, #14]
}
   253b2:	4770      	bx	lr

000253b4 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   253b4:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   253b6:	7a03      	ldrb	r3, [r0, #8]
   253b8:	075b      	lsls	r3, r3, #29
{
   253ba:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   253bc:	d501      	bpl.n	253c2 <bt_keys_clear+0xe>
		bt_id_del(keys);
   253be:	f7e3 fc45 	bl	8c4c <bt_id_del>
   253c2:	4620      	mov	r0, r4
   253c4:	225c      	movs	r2, #92	; 0x5c
		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   253c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   253ca:	2100      	movs	r1, #0
   253cc:	f000 bf71 	b.w	262b2 <memset>

000253d0 <fixed_data_unref>:
}
   253d0:	4770      	bx	lr

000253d2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   253d2:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   253d4:	6849      	ldr	r1, [r1, #4]
   253d6:	6809      	ldr	r1, [r1, #0]
   253d8:	f7f8 ba92 	b.w	1d900 <net_buf_alloc_len>

000253dc <net_buf_get>:
{
   253dc:	b570      	push	{r4, r5, r6, lr}
   253de:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   253e0:	f7f9 fcfa 	bl	1edd8 <z_impl_k_queue_get>
	if (!buf) {
   253e4:	4605      	mov	r5, r0
   253e6:	b128      	cbz	r0, 253f4 <net_buf_get+0x18>
   253e8:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   253ea:	7963      	ldrb	r3, [r4, #5]
   253ec:	f013 0301 	ands.w	r3, r3, #1
   253f0:	d102      	bne.n	253f8 <net_buf_get+0x1c>
	frag->frags = NULL;
   253f2:	6023      	str	r3, [r4, #0]
}
   253f4:	4628      	mov	r0, r5
   253f6:	bd70      	pop	{r4, r5, r6, pc}
   253f8:	2300      	movs	r3, #0
   253fa:	2200      	movs	r2, #0
   253fc:	4630      	mov	r0, r6
   253fe:	f7f9 fceb 	bl	1edd8 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   25402:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   25404:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   25406:	f023 0301 	bic.w	r3, r3, #1
   2540a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2540c:	4604      	mov	r4, r0
   2540e:	e7ec      	b.n	253ea <net_buf_get+0xe>

00025410 <net_buf_simple_init_with_data>:
	buf->size  = size;
   25410:	b292      	uxth	r2, r2
	buf->__buf = data;
   25412:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   25414:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   25416:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   25418:	8082      	strh	r2, [r0, #4]
}
   2541a:	4770      	bx	lr

0002541c <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2541c:	6883      	ldr	r3, [r0, #8]
   2541e:	440b      	add	r3, r1
   25420:	6003      	str	r3, [r0, #0]
}
   25422:	4770      	bx	lr

00025424 <net_buf_put>:
{
   25424:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   25426:	460a      	mov	r2, r1
   25428:	6814      	ldr	r4, [r2, #0]
   2542a:	b914      	cbnz	r4, 25432 <net_buf_put+0xe>
}
   2542c:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2542e:	f000 bb54 	b.w	25ada <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   25432:	7953      	ldrb	r3, [r2, #5]
   25434:	f043 0301 	orr.w	r3, r3, #1
   25438:	7153      	strb	r3, [r2, #5]
   2543a:	4622      	mov	r2, r4
   2543c:	e7f4      	b.n	25428 <net_buf_put+0x4>

0002543e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2543e:	7902      	ldrb	r2, [r0, #4]
   25440:	3201      	adds	r2, #1
   25442:	7102      	strb	r2, [r0, #4]
	return buf;
}
   25444:	4770      	bx	lr

00025446 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   25446:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   25448:	4618      	mov	r0, r3
   2544a:	681b      	ldr	r3, [r3, #0]
   2544c:	2b00      	cmp	r3, #0
   2544e:	d1fb      	bne.n	25448 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   25450:	4770      	bx	lr

00025452 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   25452:	6802      	ldr	r2, [r0, #0]
{
   25454:	b510      	push	{r4, lr}
	if (parent->frags) {
   25456:	b12a      	cbz	r2, 25464 <net_buf_frag_insert+0x12>
   25458:	460b      	mov	r3, r1
	while (buf->frags) {
   2545a:	461c      	mov	r4, r3
   2545c:	681b      	ldr	r3, [r3, #0]
   2545e:	2b00      	cmp	r3, #0
   25460:	d1fb      	bne.n	2545a <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   25462:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   25464:	6001      	str	r1, [r0, #0]
}
   25466:	bd10      	pop	{r4, pc}

00025468 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   25468:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2546a:	4604      	mov	r4, r0
   2546c:	b920      	cbnz	r0, 25478 <net_buf_frag_add+0x10>
	buf->ref++;
   2546e:	790b      	ldrb	r3, [r1, #4]
   25470:	3301      	adds	r3, #1
   25472:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   25474:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   25476:	bd10      	pop	{r4, pc}
   25478:	4603      	mov	r3, r0
	while (buf->frags) {
   2547a:	4618      	mov	r0, r3
   2547c:	681b      	ldr	r3, [r3, #0]
   2547e:	2b00      	cmp	r3, #0
   25480:	d1fb      	bne.n	2547a <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   25482:	f7ff ffe6 	bl	25452 <net_buf_frag_insert>
   25486:	4620      	mov	r0, r4
   25488:	e7f5      	b.n	25476 <net_buf_frag_add+0xe>

0002548a <net_buf_simple_add>:
	return buf->data + buf->len;
   2548a:	8883      	ldrh	r3, [r0, #4]
   2548c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2548e:	4419      	add	r1, r3
   25490:	8081      	strh	r1, [r0, #4]
	return tail;
}
   25492:	18d0      	adds	r0, r2, r3
   25494:	4770      	bx	lr

00025496 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   25496:	b430      	push	{r4, r5}
   25498:	8884      	ldrh	r4, [r0, #4]
   2549a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2549c:	18a3      	adds	r3, r4, r2
   2549e:	8083      	strh	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   254a0:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   254a2:	bc30      	pop	{r4, r5}
   254a4:	f000 bef7 	b.w	26296 <memcpy>

000254a8 <net_buf_simple_add_u8>:
   254a8:	8883      	ldrh	r3, [r0, #4]
   254aa:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   254ac:	b510      	push	{r4, lr}
	buf->len += len;
   254ae:	1c5c      	adds	r4, r3, #1
   254b0:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   254b2:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   254b4:	18d0      	adds	r0, r2, r3
   254b6:	bd10      	pop	{r4, pc}

000254b8 <net_buf_simple_add_le16>:
   254b8:	8883      	ldrh	r3, [r0, #4]
   254ba:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   254bc:	b530      	push	{r4, r5, lr}
   254be:	18d4      	adds	r4, r2, r3
	buf->len += len;
   254c0:	1c9d      	adds	r5, r3, #2
   254c2:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   254c4:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   254c6:	0a09      	lsrs	r1, r1, #8
   254c8:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   254ca:	bd30      	pop	{r4, r5, pc}

000254cc <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   254cc:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   254ce:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   254d0:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   254d2:	1a40      	subs	r0, r0, r1
	buf->len += len;
   254d4:	4411      	add	r1, r2
	buf->data -= len;
   254d6:	6018      	str	r0, [r3, #0]
	buf->len += len;
   254d8:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   254da:	4770      	bx	lr

000254dc <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   254dc:	8882      	ldrh	r2, [r0, #4]
   254de:	1a52      	subs	r2, r2, r1
{
   254e0:	4603      	mov	r3, r0
	buf->len -= len;
   254e2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   254e4:	6800      	ldr	r0, [r0, #0]
   254e6:	4408      	add	r0, r1
   254e8:	6018      	str	r0, [r3, #0]
}
   254ea:	4770      	bx	lr

000254ec <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   254ec:	4603      	mov	r3, r0
	void *data = buf->data;
   254ee:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   254f0:	889a      	ldrh	r2, [r3, #4]
   254f2:	1a52      	subs	r2, r2, r1
	buf->data += len;
   254f4:	4401      	add	r1, r0
	buf->len -= len;
   254f6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   254f8:	6019      	str	r1, [r3, #0]

	return data;
}
   254fa:	4770      	bx	lr

000254fc <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   254fc:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   254fe:	6803      	ldr	r3, [r0, #0]
   25500:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   25502:	2101      	movs	r1, #1
   25504:	f7ff ffea 	bl	254dc <net_buf_simple_pull>

	return val;
}
   25508:	4620      	mov	r0, r4
   2550a:	bd10      	pop	{r4, pc}

0002550c <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2550c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2550e:	6803      	ldr	r3, [r0, #0]
   25510:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   25512:	2102      	movs	r1, #2
   25514:	f7ff ffe2 	bl	254dc <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   25518:	4620      	mov	r0, r4
   2551a:	bd10      	pop	{r4, pc}

0002551c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2551c:	6802      	ldr	r2, [r0, #0]
   2551e:	6880      	ldr	r0, [r0, #8]
}
   25520:	1a10      	subs	r0, r2, r0
   25522:	4770      	bx	lr

00025524 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25524:	8883      	ldrh	r3, [r0, #4]
   25526:	88c2      	ldrh	r2, [r0, #6]
   25528:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2552a:	6803      	ldr	r3, [r0, #0]
   2552c:	6880      	ldr	r0, [r0, #8]
   2552e:	1a18      	subs	r0, r3, r0
}
   25530:	1a10      	subs	r0, r2, r0
   25532:	4770      	bx	lr

00025534 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25534:	6843      	ldr	r3, [r0, #4]
   25536:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   25538:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2553c:	600b      	str	r3, [r1, #0]
}
   2553e:	2000      	movs	r0, #0
   25540:	4770      	bx	lr

00025542 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25542:	6843      	ldr	r3, [r0, #4]
   25544:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   25546:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2554a:	4042      	eors	r2, r0
   2554c:	400a      	ands	r2, r1
   2554e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   25550:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   25554:	2000      	movs	r0, #0
   25556:	4770      	bx	lr

00025558 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25558:	6843      	ldr	r3, [r0, #4]
   2555a:	685b      	ldr	r3, [r3, #4]
}
   2555c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2555e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   25562:	4770      	bx	lr

00025564 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25564:	6843      	ldr	r3, [r0, #4]
   25566:	685b      	ldr	r3, [r3, #4]
}
   25568:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2556a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2556e:	4770      	bx	lr

00025570 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25570:	6843      	ldr	r3, [r0, #4]
   25572:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   25574:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   25578:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2557a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2557e:	2000      	movs	r0, #0
   25580:	4770      	bx	lr

00025582 <gpio_nrfx_manage_callback>:
	return port->data;
   25582:	68c3      	ldr	r3, [r0, #12]
	return list->head;
   25584:	6858      	ldr	r0, [r3, #4]
{
   25586:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   25588:	b158      	cbz	r0, 255a2 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2558a:	2400      	movs	r4, #0
   2558c:	4281      	cmp	r1, r0
   2558e:	d112      	bne.n	255b6 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   25590:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   25592:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   25594:	b954      	cbnz	r4, 255ac <gpio_nrfx_manage_callback+0x2a>
   25596:	428d      	cmp	r5, r1
	list->head = node;
   25598:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2559a:	d100      	bne.n	2559e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2559c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2559e:	2000      	movs	r0, #0
   255a0:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   255a2:	b96a      	cbnz	r2, 255c0 <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   255a4:	2000      	movs	r0, #0
}
   255a6:	bd30      	pop	{r4, r5, pc}
   255a8:	4628      	mov	r0, r5
   255aa:	e7ef      	b.n	2558c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   255ac:	428d      	cmp	r5, r1
	parent->next = child;
   255ae:	6020      	str	r0, [r4, #0]
	list->tail = node;
   255b0:	bf08      	it	eq
   255b2:	609c      	streq	r4, [r3, #8]
}
   255b4:	e7f3      	b.n	2559e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   255b6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   255b8:	4604      	mov	r4, r0
   255ba:	2d00      	cmp	r5, #0
   255bc:	d1f4      	bne.n	255a8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   255be:	b13a      	cbz	r2, 255d0 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   255c0:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   255c2:	685a      	ldr	r2, [r3, #4]
   255c4:	600a      	str	r2, [r1, #0]
	list->head = node;
   255c6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   255c8:	2800      	cmp	r0, #0
   255ca:	d1eb      	bne.n	255a4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   255cc:	6099      	str	r1, [r3, #8]
}
   255ce:	e7ea      	b.n	255a6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   255d0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   255d4:	e7e7      	b.n	255a6 <gpio_nrfx_manage_callback+0x24>

000255d6 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   255d6:	b570      	push	{r4, r5, r6, lr}
   255d8:	460e      	mov	r6, r1
   255da:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   255dc:	4601      	mov	r1, r0
   255de:	b150      	cbz	r0, 255f6 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
   255e0:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
   255e2:	688a      	ldr	r2, [r1, #8]
   255e4:	402a      	ands	r2, r5
   255e6:	d002      	beq.n	255ee <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   255e8:	684b      	ldr	r3, [r1, #4]
   255ea:	4630      	mov	r0, r6
   255ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   255ee:	b114      	cbz	r4, 255f6 <gpio_fire_callbacks.isra.0+0x20>
   255f0:	4621      	mov	r1, r4
   255f2:	6824      	ldr	r4, [r4, #0]
   255f4:	e7f5      	b.n	255e2 <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
   255f6:	bd70      	pop	{r4, r5, r6, pc}

000255f8 <cfg_level_pins>:
{
   255f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
   255fc:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   255fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   25602:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   25604:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   25608:	4313      	orrs	r3, r2
   2560a:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   2560e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   25610:	2500      	movs	r5, #0
	while (level_pins) {
   25612:	b90c      	cbnz	r4, 25618 <cfg_level_pins+0x20>
}
   25614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   25618:	4226      	tst	r6, r4
   2561a:	d010      	beq.n	2563e <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2561c:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2561e:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   25622:	40e9      	lsrs	r1, r5
   25624:	f001 0101 	and.w	r1, r1, #1
   25628:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2562c:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   25630:	b2c9      	uxtb	r1, r1
   25632:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   25636:	f7f8 fa9d 	bl	1db74 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2563a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2563e:	3501      	adds	r5, #1
		bit <<= 1;
   25640:	0076      	lsls	r6, r6, #1
   25642:	e7e6      	b.n	25612 <cfg_level_pins+0x1a>

00025644 <check_level_trigger_pins>:
	return port->data;
   25644:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   25646:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   2564a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   2564e:	68dc      	ldr	r4, [r3, #12]
	return port->config;
   25650:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   25654:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   25656:	430a      	orrs	r2, r1
   25658:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2565c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   25660:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   25664:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   25666:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   2566a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2566c:	2700      	movs	r7, #0
	while (level_pins) {
   2566e:	b914      	cbnz	r4, 25676 <check_level_trigger_pins+0x32>
}
   25670:	4628      	mov	r0, r5
   25672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   25676:	4234      	tst	r4, r6
   25678:	d00a      	beq.n	25690 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2567a:	f898 0008 	ldrb.w	r0, [r8, #8]
   2567e:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   25682:	2100      	movs	r1, #0
   25684:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   25688:	f7f8 fa74 	bl	1db74 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2568c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   25690:	3701      	adds	r7, #1
		bit <<= 1;
   25692:	0076      	lsls	r6, r6, #1
   25694:	e7eb      	b.n	2566e <check_level_trigger_pins+0x2a>

00025696 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   25696:	68c2      	ldr	r2, [r0, #12]
{
   25698:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2569a:	e892 0003 	ldmia.w	r2, {r0, r1}
   2569e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   256a2:	2000      	movs	r0, #0
   256a4:	4770      	bx	lr

000256a6 <uarte_nrfx_config_get>:

static int uarte_nrfx_config_get(const struct device *dev,
				 struct uart_config *cfg)
{
	*cfg = get_dev_data(dev)->uart_config;
   256a6:	68c2      	ldr	r2, [r0, #12]
{
   256a8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   256aa:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   256ae:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
   256b2:	2000      	movs	r0, #0
   256b4:	4770      	bx	lr

000256b6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   256b6:	6843      	ldr	r3, [r0, #4]
   256b8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   256ba:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   256be:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
static int uarte_nrfx_err_check(const struct device *dev)
{
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	/* register bitfields maps to the defines in uart.h */
	return nrf_uarte_errorsrc_get_and_clear(uarte);
}
   256c2:	4770      	bx	lr

000256c4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   256c4:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   256c6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   256c8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   256ca:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (data->async) {
		return -ENOTSUP;
	}
#endif

	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   256ce:	b148      	cbz	r0, 256e4 <uarte_nrfx_poll_in+0x20>
		return -1;
	}

	*c = data->rx_data;
   256d0:	7c12      	ldrb	r2, [r2, #16]
   256d2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   256d4:	2000      	movs	r0, #0
   256d6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   256da:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   256de:	2201      	movs	r2, #1
   256e0:	601a      	str	r2, [r3, #0]

	/* clear the interrupt */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
   256e2:	4770      	bx	lr
		return -1;
   256e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   256e8:	4770      	bx	lr

000256ea <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   256ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   256ee:	6843      	ldr	r3, [r0, #4]
{
   256f0:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   256f4:	681c      	ldr	r4, [r3, #0]
	return dev->data;
   256f6:	68c6      	ldr	r6, [r0, #12]
		lock = &data->async->tx_size;
	} else
#endif
		lock = &data->poll_out_lock;

	if (!k_is_in_isr()) {
   256f8:	f000 fb56 	bl	25da8 <k_is_in_isr>
   256fc:	bbb8      	cbnz	r0, 2576e <uarte_nrfx_poll_out+0x84>
		lock = &data->poll_out_lock;
   256fe:	f106 070c 	add.w	r7, r6, #12
   25702:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25704:	f04f 0801 	mov.w	r8, #1
   25708:	f3bf 8f5b 	dmb	ish
   2570c:	e857 3f00 	ldrex	r3, [r7]
   25710:	2b00      	cmp	r3, #0
   25712:	d103      	bne.n	2571c <uarte_nrfx_poll_out+0x32>
   25714:	e847 8200 	strex	r2, r8, [r7]
   25718:	2a00      	cmp	r2, #0
   2571a:	d1f7      	bne.n	2570c <uarte_nrfx_poll_out+0x22>
   2571c:	f3bf 8f5b 	dmb	ish
		uint8_t safety_cnt = 100;

		while (atomic_cas((atomic_t *) lock,
   25720:	d007      	beq.n	25732 <uarte_nrfx_poll_out+0x48>
	return z_impl_k_sleep(timeout);
   25722:	2021      	movs	r0, #33	; 0x21
   25724:	2100      	movs	r1, #0
				(atomic_val_t) 1) == false) {
			/* k_sleep allows other threads to execute and finish
			 * their transactions.
			 */
			k_msleep(1);
			if (--safety_cnt == 0) {
   25726:	3d01      	subs	r5, #1
   25728:	f7f9 feba 	bl	1f4a0 <z_impl_k_sleep>
   2572c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   25730:	d1ea      	bne.n	25708 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25732:	2300      	movs	r3, #0
   25734:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   25738:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2573c:	f10d 0307 	add.w	r3, sp, #7
   25740:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25744:	2301      	movs	r3, #1
   25746:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2574a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2574e:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25750:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);

	/* Wait for transmitter to be ready */
	int res;

	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   25754:	b923      	cbnz	r3, 25760 <uarte_nrfx_poll_out+0x76>
   25756:	2001      	movs	r0, #1
   25758:	f000 f862 	bl	25820 <nrfx_busy_wait>
   2575c:	3d01      	subs	r5, #1
   2575e:	d1f7      	bne.n	25750 <uarte_nrfx_poll_out+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25760:	2301      	movs	r3, #1
   25762:	60e3      	str	r3, [r4, #12]
	 * consume power.
	 */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	/* Release the lock. */
	*lock = 0;
   25764:	2300      	movs	r3, #0
   25766:	60f3      	str	r3, [r6, #12]
}
   25768:	b002      	add	sp, #8
   2576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   2576e:	2301      	movs	r3, #1
   25770:	60f3      	str	r3, [r6, #12]
   25772:	e7de      	b.n	25732 <uarte_nrfx_poll_out+0x48>

00025774 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   25774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   25778:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   2577a:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   2577c:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2577e:	f04f 0800 	mov.w	r8, #0
   25782:	2122      	movs	r1, #34	; 0x22
UART_NRF_UARTE_DEVICE(1);
   25784:	4605      	mov	r5, r0
   25786:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
	data->dev = dev;
   2578a:	6030      	str	r0, [r6, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2578c:	a801      	add	r0, sp, #4
   2578e:	9101      	str	r1, [sp, #4]
   25790:	f7f8 fc9e 	bl	1e0d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   25794:	9b01      	ldr	r3, [sp, #4]
   25796:	2701      	movs	r7, #1
   25798:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   2579c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   257a0:	a801      	add	r0, sp, #4
   257a2:	9101      	str	r1, [sp, #4]
   257a4:	f7f8 fc94 	bl	1e0d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   257a8:	9b01      	ldr	r3, [sp, #4]
   257aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   257ae:	2203      	movs	r2, #3
   257b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   257b4:	f04f 0921 	mov.w	r9, #33	; 0x21
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   257b8:	a801      	add	r0, sp, #4
   257ba:	f8cd 9004 	str.w	r9, [sp, #4]
   257be:	f7f8 fc87 	bl	1e0d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   257c2:	9b01      	ldr	r3, [sp, #4]
   257c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   257c8:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   257cc:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   257d0:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RXD = pselrxd;
   257d2:	f8c4 9514 	str.w	r9, [r4, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
   257d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   257da:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
   257de:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   257e0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   257e4:	4628      	mov	r0, r5
   257e6:	f7f8 fc81 	bl	1e0ec <uarte_nrfx_configure>
	if (err) {
   257ea:	b960      	cbnz	r0, 25806 <uarte_1_init+0x92>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   257ec:	2308      	movs	r3, #8
   257ee:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   257f2:	3610      	adds	r6, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   257f4:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   257f8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   257fc:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   25800:	f8c4 7538 	str.w	r7, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25804:	6027      	str	r7, [r4, #0]
UART_NRF_UARTE_DEVICE(1);
   25806:	b003      	add	sp, #12
   25808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002580c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2580c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   25810:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   25814:	f1a0 0308 	sub.w	r3, r0, #8
   25818:	4258      	negs	r0, r3
   2581a:	4158      	adcs	r0, r3
   2581c:	4770      	bx	lr

0002581e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2581e:	4700      	bx	r0

00025820 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   25820:	f000 bac8 	b.w	25db4 <z_impl_k_busy_wait>

00025824 <nrfx_clock_enable>:
{
   25824:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   25826:	2000      	movs	r0, #0
   25828:	f7e0 ff84 	bl	6734 <arch_irq_is_enabled>
   2582c:	b908      	cbnz	r0, 25832 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2582e:	f7e0 ff5d 	bl	66ec <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   25832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   25836:	2201      	movs	r2, #1
   25838:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   2583c:	bd08      	pop	{r3, pc}

0002583e <nrfx_clock_start>:
    switch (domain)
   2583e:	b110      	cbz	r0, 25846 <nrfx_clock_start+0x8>
   25840:	2801      	cmp	r0, #1
   25842:	d00c      	beq.n	2585e <nrfx_clock_start+0x20>
   25844:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2584a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   2584e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   25852:	2202      	movs	r2, #2
   25854:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25858:	2201      	movs	r2, #1
   2585a:	609a      	str	r2, [r3, #8]
}
   2585c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2585e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   25862:	2200      	movs	r2, #0
   25864:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   25868:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2586c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25870:	6018      	str	r0, [r3, #0]
}
   25872:	4770      	bx	lr

00025874 <arch_system_halt>:
	__asm__ volatile(
   25874:	f04f 0220 	mov.w	r2, #32
   25878:	f3ef 8311 	mrs	r3, BASEPRI
   2587c:	f382 8811 	msr	BASEPRI, r2
   25880:	f3bf 8f6f 	isb	sy
	for (;;) {
   25884:	e7fe      	b.n	25884 <arch_system_halt+0x10>

00025886 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   25886:	f7fb bfde 	b.w	21846 <z_clock_idle_exit>

0002588a <k_heap_init>:
{
   2588a:	b410      	push	{r4}
   2588c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   25890:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   25894:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   25896:	f7fb bb86 	b.w	20fa6 <sys_heap_init>

0002589a <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2589a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2589e:	4606      	mov	r6, r0
   258a0:	4688      	mov	r8, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   258a2:	4610      	mov	r0, r2
   258a4:	4619      	mov	r1, r3
   258a6:	f000 fb55 	bl	25f54 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   258aa:	f106 0914 	add.w	r9, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   258ae:	4605      	mov	r5, r0
   258b0:	460f      	mov	r7, r1
   258b2:	f04f 0320 	mov.w	r3, #32
   258b6:	f3ef 8411 	mrs	r4, BASEPRI
   258ba:	f383 8811 	msr	BASEPRI, r3
   258be:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   258c2:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   258c6:	4641      	mov	r1, r8
   258c8:	4630      	mov	r0, r6
   258ca:	f7fb fb38 	bl	20f3e <sys_heap_alloc>
   258ce:	4683      	mov	fp, r0
		now = z_tick_get();
   258d0:	f7fa f89e 	bl	1fa10 <z_tick_get>
   258d4:	4603      	mov	r3, r0
		if ((ret != NULL) || ((end - now) <= 0)) {
   258d6:	f1bb 0f00 	cmp.w	fp, #0
   258da:	d007      	beq.n	258ec <k_heap_alloc+0x52>
	__asm__ volatile(
   258dc:	f384 8811 	msr	BASEPRI, r4
   258e0:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   258e4:	4658      	mov	r0, fp
   258e6:	b003      	add	sp, #12
   258e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   258ec:	1aeb      	subs	r3, r5, r3
   258ee:	eb67 0101 	sbc.w	r1, r7, r1
   258f2:	2b01      	cmp	r3, #1
   258f4:	f171 0200 	sbcs.w	r2, r1, #0
   258f8:	dbf0      	blt.n	258dc <k_heap_alloc+0x42>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   258fa:	e9cd 3100 	strd	r3, r1, [sp]
   258fe:	4652      	mov	r2, sl
   25900:	4621      	mov	r1, r4
   25902:	4648      	mov	r0, r9
   25904:	f7f9 fcec 	bl	1f2e0 <z_pend_curr>
	__asm__ volatile(
   25908:	f04f 0320 	mov.w	r3, #32
   2590c:	f3ef 8411 	mrs	r4, BASEPRI
   25910:	f383 8811 	msr	BASEPRI, r3
   25914:	f3bf 8f6f 	isb	sy
   25918:	e7d5      	b.n	258c6 <k_heap_alloc+0x2c>

0002591a <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2591a:	b538      	push	{r3, r4, r5, lr}
   2591c:	4604      	mov	r4, r0
   2591e:	f04f 0320 	mov.w	r3, #32
   25922:	f3ef 8511 	mrs	r5, BASEPRI
   25926:	f383 8811 	msr	BASEPRI, r3
   2592a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2592e:	f7fb fab1 	bl	20e94 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   25932:	f104 000c 	add.w	r0, r4, #12
   25936:	f000 fa17 	bl	25d68 <z_unpend_all>
   2593a:	b130      	cbz	r0, 2594a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2593c:	4629      	mov	r1, r5
   2593e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   25942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   25946:	f7f9 babb 	b.w	1eec0 <z_reschedule>
	__asm__ volatile(
   2594a:	f385 8811 	msr	BASEPRI, r5
   2594e:	f3bf 8f6f 	isb	sy
}
   25952:	bd38      	pop	{r3, r4, r5, pc}

00025954 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   25954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25956:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
	block->id.heap = p->heap;
   2595a:	6800      	ldr	r0, [r0, #0]
   2595c:	6048      	str	r0, [r1, #4]
{
   2595e:	4614      	mov	r4, r2
   25960:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   25962:	463a      	mov	r2, r7
   25964:	4633      	mov	r3, r6
   25966:	4621      	mov	r1, r4
   25968:	f7ff ff97 	bl	2589a <k_heap_alloc>
   2596c:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   2596e:	b134      	cbz	r4, 2597e <k_mem_pool_alloc+0x2a>
   25970:	b928      	cbnz	r0, 2597e <k_mem_pool_alloc+0x2a>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   25972:	ea57 0306 	orrs.w	r3, r7, r6
   25976:	d004      	beq.n	25982 <k_mem_pool_alloc+0x2e>
   25978:	f06f 000a 	mvn.w	r0, #10
	} else {
		return 0;
	}
}
   2597c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2597e:	2000      	movs	r0, #0
   25980:	e7fc      	b.n	2597c <k_mem_pool_alloc+0x28>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   25982:	f06f 000b 	mvn.w	r0, #11
   25986:	e7f9      	b.n	2597c <k_mem_pool_alloc+0x28>

00025988 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   25988:	e9d0 1000 	ldrd	r1, r0, [r0]
   2598c:	f7ff bfc5 	b.w	2591a <k_heap_free>

00025990 <k_mem_slab_init>:
{
   25990:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   25992:	2400      	movs	r4, #0
   25994:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   25996:	ea41 0402 	orr.w	r4, r1, r2
   2599a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2599e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   259a2:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   259a4:	d10c      	bne.n	259c0 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   259a6:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   259a8:	42a3      	cmp	r3, r4
   259aa:	d103      	bne.n	259b4 <k_mem_slab_init+0x24>
   259ac:	e9c0 0000 	strd	r0, r0, [r0]
}
   259b0:	2000      	movs	r0, #0
}
   259b2:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   259b4:	6945      	ldr	r5, [r0, #20]
   259b6:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   259b8:	3401      	adds	r4, #1
		slab->free_list = p;
   259ba:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   259bc:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   259be:	e7f3      	b.n	259a8 <k_mem_slab_init+0x18>
		return -EINVAL;
   259c0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   259c4:	e7f5      	b.n	259b2 <k_mem_slab_init+0x22>

000259c6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   259c6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   259ca:	428b      	cmp	r3, r1
   259cc:	d001      	beq.n	259d2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   259ce:	f7f9 bc9b 	b.w	1f308 <z_set_prio>
}
   259d2:	2000      	movs	r0, #0
   259d4:	4770      	bx	lr

000259d6 <queue_insert>:
{
   259d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   259da:	4604      	mov	r4, r0
   259dc:	460d      	mov	r5, r1
   259de:	4690      	mov	r8, r2
   259e0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   259e2:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   259e6:	f04f 0320 	mov.w	r3, #32
   259ea:	f3ef 8711 	mrs	r7, BASEPRI
   259ee:	f383 8811 	msr	BASEPRI, r3
   259f2:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   259f6:	4630      	mov	r0, r6
   259f8:	f000 f989 	bl	25d0e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   259fc:	b158      	cbz	r0, 25a16 <queue_insert+0x40>
   259fe:	2400      	movs	r4, #0
   25a00:	67c4      	str	r4, [r0, #124]	; 0x7c
   25a02:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   25a06:	f000 f90f 	bl	25c28 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   25a0a:	4630      	mov	r0, r6
   25a0c:	4639      	mov	r1, r7
   25a0e:	f7f9 fa57 	bl	1eec0 <z_reschedule>
	return 0;
   25a12:	2000      	movs	r0, #0
   25a14:	e00c      	b.n	25a30 <queue_insert+0x5a>
	if (alloc) {
   25a16:	f1b9 0f00 	cmp.w	r9, #0
   25a1a:	d01b      	beq.n	25a54 <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   25a1c:	2008      	movs	r0, #8
   25a1e:	f7fa f909 	bl	1fc34 <z_thread_malloc>
		if (anode == NULL) {
   25a22:	b938      	cbnz	r0, 25a34 <queue_insert+0x5e>
	__asm__ volatile(
   25a24:	f387 8811 	msr	BASEPRI, r7
   25a28:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   25a2c:	f06f 000b 	mvn.w	r0, #11
}
   25a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   25a34:	2301      	movs	r3, #1
		anode->data = data;
   25a36:	f8c0 8004 	str.w	r8, [r0, #4]
   25a3a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25a3c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25a3e:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   25a42:	b95d      	cbnz	r5, 25a5c <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25a44:	6823      	ldr	r3, [r4, #0]
   25a46:	4313      	orrs	r3, r2
   25a48:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25a4a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   25a4c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25a4e:	b973      	cbnz	r3, 25a6e <queue_insert+0x98>
	list->tail = node;
   25a50:	6060      	str	r0, [r4, #4]
}
   25a52:	e00c      	b.n	25a6e <queue_insert+0x98>
	node->next_and_flags = flags;
   25a54:	f8c8 9000 	str.w	r9, [r8]
}
   25a58:	4640      	mov	r0, r8
   25a5a:	e7ef      	b.n	25a3c <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25a5c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25a5e:	f033 0303 	bics.w	r3, r3, #3
   25a62:	d110      	bne.n	25a86 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25a64:	6002      	str	r2, [r0, #0]
	return list->tail;
   25a66:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   25a68:	b93a      	cbnz	r2, 25a7a <queue_insert+0xa4>
	list->head = node;
   25a6a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25a6e:	2104      	movs	r1, #4
   25a70:	f104 0010 	add.w	r0, r4, #16
   25a74:	f000 fbd4 	bl	26220 <z_handle_obj_poll_events>
   25a78:	e7c7      	b.n	25a0a <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25a7a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25a7c:	f003 0303 	and.w	r3, r3, #3
   25a80:	4303      	orrs	r3, r0
   25a82:	6013      	str	r3, [r2, #0]
   25a84:	e7e4      	b.n	25a50 <queue_insert+0x7a>
   25a86:	4313      	orrs	r3, r2
   25a88:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25a8a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25a8c:	f003 0303 	and.w	r3, r3, #3
   25a90:	4303      	orrs	r3, r0
   25a92:	602b      	str	r3, [r5, #0]
}
   25a94:	e7eb      	b.n	25a6e <queue_insert+0x98>

00025a96 <z_queue_node_peek>:
{
   25a96:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   25a98:	4604      	mov	r4, r0
   25a9a:	b130      	cbz	r0, 25aaa <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25a9c:	6802      	ldr	r2, [r0, #0]
   25a9e:	0793      	lsls	r3, r2, #30
   25aa0:	d003      	beq.n	25aaa <z_queue_node_peek+0x14>
		ret = anode->data;
   25aa2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25aa4:	b109      	cbz	r1, 25aaa <z_queue_node_peek+0x14>
			k_free(anode);
   25aa6:	f000 fbe1 	bl	2626c <k_free>
}
   25aaa:	4620      	mov	r0, r4
   25aac:	bd10      	pop	{r4, pc}

00025aae <z_impl_k_queue_init>:
	list->head = NULL;
   25aae:	2300      	movs	r3, #0
	list->tail = NULL;
   25ab0:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   25ab4:	f100 0308 	add.w	r3, r0, #8
   25ab8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   25abc:	f100 0310 	add.w	r3, r0, #16
   25ac0:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   25ac4:	4770      	bx	lr

00025ac6 <k_queue_append>:
{
   25ac6:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   25ac8:	2300      	movs	r3, #0
   25aca:	6841      	ldr	r1, [r0, #4]
   25acc:	f7ff bf83 	b.w	259d6 <queue_insert>

00025ad0 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   25ad0:	2300      	movs	r3, #0
{
   25ad2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   25ad4:	4619      	mov	r1, r3
   25ad6:	f7ff bf7e 	b.w	259d6 <queue_insert>

00025ada <k_queue_append_list>:
{
   25ada:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ade:	4605      	mov	r5, r0
   25ae0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   25ae2:	460c      	mov	r4, r1
   25ae4:	b391      	cbz	r1, 25b4c <k_queue_append_list+0x72>
   25ae6:	b38a      	cbz	r2, 25b4c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25ae8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   25aec:	f04f 0320 	mov.w	r3, #32
   25af0:	f3ef 8811 	mrs	r8, BASEPRI
   25af4:	f383 8811 	msr	BASEPRI, r3
   25af8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   25afc:	4638      	mov	r0, r7
   25afe:	f000 f906 	bl	25d0e <z_unpend_first_thread>
   25b02:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   25b06:	b920      	cbnz	r0, 25b12 <k_queue_append_list+0x38>
	return list->tail;
   25b08:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25b0a:	b9ca      	cbnz	r2, 25b40 <k_queue_append_list+0x66>
	list->head = node;
   25b0c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   25b0e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25b10:	e00a      	b.n	25b28 <k_queue_append_list+0x4e>
   25b12:	6144      	str	r4, [r0, #20]
   25b14:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   25b18:	f000 f886 	bl	25c28 <z_ready_thread>
		head = *(void **)head;
   25b1c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   25b1e:	4638      	mov	r0, r7
   25b20:	f000 f8f5 	bl	25d0e <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   25b24:	2c00      	cmp	r4, #0
   25b26:	d1ee      	bne.n	25b06 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   25b28:	2104      	movs	r1, #4
   25b2a:	f105 0010 	add.w	r0, r5, #16
   25b2e:	f000 fb77 	bl	26220 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25b32:	4638      	mov	r0, r7
   25b34:	4641      	mov	r1, r8
   25b36:	f7f9 f9c3 	bl	1eec0 <z_reschedule>
	return 0;
   25b3a:	2000      	movs	r0, #0
}
   25b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25b40:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25b42:	f003 0303 	and.w	r3, r3, #3
   25b46:	431c      	orrs	r4, r3
   25b48:	6014      	str	r4, [r2, #0]
}
   25b4a:	e7e0      	b.n	25b0e <k_queue_append_list+0x34>
		return -EINVAL;
   25b4c:	f06f 0015 	mvn.w	r0, #21
   25b50:	e7f4      	b.n	25b3c <k_queue_append_list+0x62>

00025b52 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   25b52:	f990 000e 	ldrsb.w	r0, [r0, #14]
   25b56:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   25b5a:	4298      	cmp	r0, r3
   25b5c:	bfac      	ite	ge
   25b5e:	2000      	movge	r0, #0
   25b60:	2001      	movlt	r0, #1
   25b62:	4770      	bx	lr

00025b64 <z_find_first_thread_to_unpend>:
{
   25b64:	b510      	push	{r4, lr}
   25b66:	f04f 0320 	mov.w	r3, #32
   25b6a:	f3ef 8411 	mrs	r4, BASEPRI
   25b6e:	f383 8811 	msr	BASEPRI, r3
   25b72:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25b76:	f000 f851 	bl	25c1c <z_priq_dumb_best>
	__asm__ volatile(
   25b7a:	f384 8811 	msr	BASEPRI, r4
   25b7e:	f3bf 8f6f 	isb	sy
}
   25b82:	bd10      	pop	{r4, pc}

00025b84 <z_unpend_thread_no_timeout>:
{
   25b84:	b538      	push	{r3, r4, r5, lr}
   25b86:	4604      	mov	r4, r0
	__asm__ volatile(
   25b88:	f04f 0320 	mov.w	r3, #32
   25b8c:	f3ef 8511 	mrs	r5, BASEPRI
   25b90:	f383 8811 	msr	BASEPRI, r3
   25b94:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25b98:	4601      	mov	r1, r0
   25b9a:	6880      	ldr	r0, [r0, #8]
   25b9c:	f7f9 f9b6 	bl	1ef0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25ba0:	7b63      	ldrb	r3, [r4, #13]
   25ba2:	f023 0302 	bic.w	r3, r3, #2
   25ba6:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   25ba8:	2300      	movs	r3, #0
   25baa:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   25bac:	f385 8811 	msr	BASEPRI, r5
   25bb0:	f3bf 8f6f 	isb	sy
}
   25bb4:	bd38      	pop	{r3, r4, r5, pc}

00025bb6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25bb6:	4603      	mov	r3, r0
   25bb8:	b920      	cbnz	r0, 25bc4 <z_reschedule_irqlock+0xe>
   25bba:	f3ef 8205 	mrs	r2, IPSR
   25bbe:	b90a      	cbnz	r2, 25bc4 <z_reschedule_irqlock+0xe>
   25bc0:	f7e0 bd46 	b.w	6650 <arch_swap>
   25bc4:	f383 8811 	msr	BASEPRI, r3
   25bc8:	f3bf 8f6f 	isb	sy
}
   25bcc:	4770      	bx	lr

00025bce <z_reschedule_unlocked>:
	__asm__ volatile(
   25bce:	f04f 0320 	mov.w	r3, #32
   25bd2:	f3ef 8011 	mrs	r0, BASEPRI
   25bd6:	f383 8811 	msr	BASEPRI, r3
   25bda:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25bde:	f7ff bfea 	b.w	25bb6 <z_reschedule_irqlock>

00025be2 <z_unpend_thread>:
{
   25be2:	b510      	push	{r4, lr}
   25be4:	4601      	mov	r1, r0
   25be6:	f04f 0320 	mov.w	r3, #32
   25bea:	f3ef 8411 	mrs	r4, BASEPRI
   25bee:	f383 8811 	msr	BASEPRI, r3
   25bf2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25bf6:	6880      	ldr	r0, [r0, #8]
   25bf8:	f7f9 f988 	bl	1ef0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25bfc:	7b4b      	ldrb	r3, [r1, #13]
   25bfe:	f023 0302 	bic.w	r3, r3, #2
   25c02:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   25c04:	2300      	movs	r3, #0
   25c06:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   25c08:	f384 8811 	msr	BASEPRI, r4
   25c0c:	f3bf 8f6f 	isb	sy
}
   25c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   25c14:	f101 0018 	add.w	r0, r1, #24
   25c18:	f000 b956 	b.w	25ec8 <z_abort_timeout>

00025c1c <z_priq_dumb_best>:
{
   25c1c:	4603      	mov	r3, r0
	return list->head == list;
   25c1e:	6800      	ldr	r0, [r0, #0]
}
   25c20:	4283      	cmp	r3, r0
   25c22:	bf08      	it	eq
   25c24:	2000      	moveq	r0, #0
   25c26:	4770      	bx	lr

00025c28 <z_ready_thread>:
{
   25c28:	b510      	push	{r4, lr}
	__asm__ volatile(
   25c2a:	f04f 0320 	mov.w	r3, #32
   25c2e:	f3ef 8411 	mrs	r4, BASEPRI
   25c32:	f383 8811 	msr	BASEPRI, r3
   25c36:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   25c3a:	f7f9 f9bd 	bl	1efb8 <ready_thread>
	__asm__ volatile(
   25c3e:	f384 8811 	msr	BASEPRI, r4
   25c42:	f3bf 8f6f 	isb	sy
}
   25c46:	bd10      	pop	{r4, pc}

00025c48 <z_thread_timeout>:
{
   25c48:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   25c4a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   25c4e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   25c50:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   25c54:	b1c3      	cbz	r3, 25c88 <z_thread_timeout+0x40>
	__asm__ volatile(
   25c56:	f04f 0320 	mov.w	r3, #32
   25c5a:	f3ef 8511 	mrs	r5, BASEPRI
   25c5e:	f383 8811 	msr	BASEPRI, r3
   25c62:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25c66:	f850 0c10 	ldr.w	r0, [r0, #-16]
   25c6a:	f7f9 f94f 	bl	1ef0c <z_priq_dumb_remove>
   25c6e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25c72:	f023 0302 	bic.w	r3, r3, #2
   25c76:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   25c7a:	2300      	movs	r3, #0
   25c7c:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   25c80:	f385 8811 	msr	BASEPRI, r5
   25c84:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25c88:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25c8c:	f023 0314 	bic.w	r3, r3, #20
   25c90:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   25c94:	4608      	mov	r0, r1
}
   25c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   25c9a:	f7ff bfc5 	b.w	25c28 <z_ready_thread>

00025c9e <z_remove_thread_from_ready_q>:
{
   25c9e:	b510      	push	{r4, lr}
	__asm__ volatile(
   25ca0:	f04f 0320 	mov.w	r3, #32
   25ca4:	f3ef 8411 	mrs	r4, BASEPRI
   25ca8:	f383 8811 	msr	BASEPRI, r3
   25cac:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   25cb0:	f7f9 fad6 	bl	1f260 <unready_thread>
	__asm__ volatile(
   25cb4:	f384 8811 	msr	BASEPRI, r4
   25cb8:	f3bf 8f6f 	isb	sy
}
   25cbc:	bd10      	pop	{r4, pc}

00025cbe <add_to_waitq_locked>:
{
   25cbe:	b538      	push	{r3, r4, r5, lr}
   25cc0:	4604      	mov	r4, r0
   25cc2:	460d      	mov	r5, r1
	unready_thread(thread);
   25cc4:	f7f9 facc 	bl	1f260 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   25cc8:	7b63      	ldrb	r3, [r4, #13]
   25cca:	f043 0302 	orr.w	r3, r3, #2
   25cce:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   25cd0:	b17d      	cbz	r5, 25cf2 <add_to_waitq_locked+0x34>
   25cd2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   25cd4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25cd6:	429d      	cmp	r5, r3
   25cd8:	d012      	beq.n	25d00 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25cda:	b18b      	cbz	r3, 25d00 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   25cdc:	f994 200e 	ldrsb.w	r2, [r4, #14]
   25ce0:	f993 100e 	ldrsb.w	r1, [r3, #14]
   25ce4:	4291      	cmp	r1, r2
   25ce6:	dd05      	ble.n	25cf4 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   25ce8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25cea:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   25cee:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25cf0:	605c      	str	r4, [r3, #4]
}
   25cf2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   25cf4:	6869      	ldr	r1, [r5, #4]
   25cf6:	428b      	cmp	r3, r1
   25cf8:	d002      	beq.n	25d00 <add_to_waitq_locked+0x42>
   25cfa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25cfc:	2b00      	cmp	r3, #0
   25cfe:	d1ef      	bne.n	25ce0 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   25d00:	686b      	ldr	r3, [r5, #4]
   25d02:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   25d04:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   25d06:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   25d08:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25d0a:	606c      	str	r4, [r5, #4]
}
   25d0c:	e7f1      	b.n	25cf2 <add_to_waitq_locked+0x34>

00025d0e <z_unpend_first_thread>:
{
   25d0e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25d10:	f04f 0320 	mov.w	r3, #32
   25d14:	f3ef 8211 	mrs	r2, BASEPRI
   25d18:	f383 8811 	msr	BASEPRI, r3
   25d1c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25d20:	f7ff ff7c 	bl	25c1c <z_priq_dumb_best>
   25d24:	4604      	mov	r4, r0
	__asm__ volatile(
   25d26:	f382 8811 	msr	BASEPRI, r2
   25d2a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   25d2e:	b1c8      	cbz	r0, 25d64 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   25d30:	f04f 0320 	mov.w	r3, #32
   25d34:	f3ef 8511 	mrs	r5, BASEPRI
   25d38:	f383 8811 	msr	BASEPRI, r3
   25d3c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25d40:	4601      	mov	r1, r0
   25d42:	6880      	ldr	r0, [r0, #8]
   25d44:	f7f9 f8e2 	bl	1ef0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25d48:	7b63      	ldrb	r3, [r4, #13]
   25d4a:	f023 0302 	bic.w	r3, r3, #2
   25d4e:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   25d50:	2300      	movs	r3, #0
   25d52:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   25d54:	f385 8811 	msr	BASEPRI, r5
   25d58:	f3bf 8f6f 	isb	sy
   25d5c:	f104 0018 	add.w	r0, r4, #24
   25d60:	f000 f8b2 	bl	25ec8 <z_abort_timeout>
}
   25d64:	4620      	mov	r0, r4
   25d66:	bd38      	pop	{r3, r4, r5, pc}

00025d68 <z_unpend_all>:
{
   25d68:	b538      	push	{r3, r4, r5, lr}
   25d6a:	4605      	mov	r5, r0
	int need_sched = 0;
   25d6c:	2000      	movs	r0, #0
	return list->head == list;
   25d6e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25d70:	42a5      	cmp	r5, r4
   25d72:	d000      	beq.n	25d76 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25d74:	b904      	cbnz	r4, 25d78 <z_unpend_all+0x10>
}
   25d76:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   25d78:	4620      	mov	r0, r4
   25d7a:	f7ff ff32 	bl	25be2 <z_unpend_thread>
		z_ready_thread(thread);
   25d7e:	4620      	mov	r0, r4
   25d80:	f7ff ff52 	bl	25c28 <z_ready_thread>
		need_sched = 1;
   25d84:	2001      	movs	r0, #1
   25d86:	e7f2      	b.n	25d6e <z_unpend_all+0x6>

00025d88 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   25d88:	b15a      	cbz	r2, 25da2 <z_impl_k_sem_init+0x1a>
   25d8a:	428a      	cmp	r2, r1
   25d8c:	d309      	bcc.n	25da2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   25d8e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25d92:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   25d96:	e9c0 0000 	strd	r0, r0, [r0]
   25d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   25d9e:	2000      	movs	r0, #0
   25da0:	4770      	bx	lr
		return -EINVAL;
   25da2:	f06f 0015 	mvn.w	r0, #21
}
   25da6:	4770      	bx	lr

00025da8 <k_is_in_isr>:
   25da8:	f3ef 8005 	mrs	r0, IPSR
}
   25dac:	3800      	subs	r0, #0
   25dae:	bf18      	it	ne
   25db0:	2001      	movne	r0, #1
   25db2:	4770      	bx	lr

00025db4 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   25db4:	f7e1 b96a 	b.w	708c <arch_busy_wait>

00025db8 <z_impl_k_thread_name_set>:
}
   25db8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   25dbc:	4770      	bx	lr

00025dbe <k_thread_name_get>:
}
   25dbe:	2000      	movs	r0, #0
   25dc0:	4770      	bx	lr

00025dc2 <k_work_submit_to_queue>:
{
   25dc2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25dc4:	f101 0308 	add.w	r3, r1, #8
   25dc8:	f3bf 8f5b 	dmb	ish
   25dcc:	e853 2f00 	ldrex	r2, [r3]
   25dd0:	f042 0c01 	orr.w	ip, r2, #1
   25dd4:	e843 ce00 	strex	lr, ip, [r3]
   25dd8:	f1be 0f00 	cmp.w	lr, #0
   25ddc:	d1f6      	bne.n	25dcc <k_work_submit_to_queue+0xa>
   25dde:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   25de2:	07d3      	lsls	r3, r2, #31
   25de4:	d403      	bmi.n	25dee <k_work_submit_to_queue+0x2c>
}
   25de6:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   25dea:	f7ff be6c 	b.w	25ac6 <k_queue_append>
}
   25dee:	f85d fb04 	ldr.w	pc, [sp], #4

00025df2 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   25df2:	f1a0 0110 	sub.w	r1, r0, #16
   25df6:	6980      	ldr	r0, [r0, #24]
   25df8:	f7ff bfe3 	b.w	25dc2 <k_work_submit_to_queue>

00025dfc <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   25dfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   25dfe:	b570      	push	{r4, r5, r6, lr}
   25e00:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   25e02:	b913      	cbnz	r3, 25e0a <work_cancel+0xe>
		return -EALREADY;
   25e04:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   25e08:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25e0a:	f3bf 8f5b 	dmb	ish
   25e0e:	6883      	ldr	r3, [r0, #8]
   25e10:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   25e14:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   25e16:	f100 0508 	add.w	r5, r0, #8
   25e1a:	d532      	bpl.n	25e82 <work_cancel+0x86>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   25e1c:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   25e1e:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   25e20:	2100      	movs	r1, #0
   25e22:	b913      	cbnz	r3, 25e2a <work_cancel+0x2e>
			return -EINVAL;
   25e24:	f06f 0015 	mvn.w	r0, #21
   25e28:	e7ee      	b.n	25e08 <work_cancel+0xc>
   25e2a:	429c      	cmp	r4, r3
   25e2c:	d124      	bne.n	25e78 <work_cancel+0x7c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25e2e:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   25e30:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25e32:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   25e36:	b9b1      	cbnz	r1, 25e66 <work_cancel+0x6a>
   25e38:	42b4      	cmp	r4, r6
	list->head = node;
   25e3a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   25e3c:	d100      	bne.n	25e40 <work_cancel+0x44>
	list->tail = node;
   25e3e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25e40:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25e42:	f003 0303 	and.w	r3, r3, #3
   25e46:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   25e48:	2000      	movs	r0, #0
   25e4a:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25e4c:	f3bf 8f5b 	dmb	ish
   25e50:	e855 3f00 	ldrex	r3, [r5]
   25e54:	f023 0301 	bic.w	r3, r3, #1
   25e58:	e845 3200 	strex	r2, r3, [r5]
   25e5c:	2a00      	cmp	r2, #0
   25e5e:	d1f7      	bne.n	25e50 <work_cancel+0x54>
   25e60:	f3bf 8f5b 	dmb	ish
   25e64:	e7d0      	b.n	25e08 <work_cancel+0xc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25e66:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25e68:	f003 0303 	and.w	r3, r3, #3
   25e6c:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   25e6e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   25e70:	600b      	str	r3, [r1, #0]
	list->tail = node;
   25e72:	bf08      	it	eq
   25e74:	6051      	streq	r1, [r2, #4]
}
   25e76:	e7e3      	b.n	25e40 <work_cancel+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25e78:	6818      	ldr	r0, [r3, #0]
   25e7a:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   25e7c:	f020 0303 	bic.w	r3, r0, #3
   25e80:	e7cf      	b.n	25e22 <work_cancel+0x26>
		int err = z_abort_timeout(&work->timeout);
   25e82:	3010      	adds	r0, #16
   25e84:	f000 f820 	bl	25ec8 <z_abort_timeout>
		if (err) {
   25e88:	2800      	cmp	r0, #0
   25e8a:	d0dd      	beq.n	25e48 <work_cancel+0x4c>
   25e8c:	e7ba      	b.n	25e04 <work_cancel+0x8>

00025e8e <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25e8e:	2300      	movs	r3, #0
   25e90:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   25e94:	e9c0 3304 	strd	r3, r3, [r0, #16]
   25e98:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   25e9a:	6283      	str	r3, [r0, #40]	; 0x28
}
   25e9c:	4770      	bx	lr

00025e9e <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   25e9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   25ea0:	b510      	push	{r4, lr}
	if (!work->work_q) {
   25ea2:	b173      	cbz	r3, 25ec2 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   25ea4:	f04f 0320 	mov.w	r3, #32
   25ea8:	f3ef 8411 	mrs	r4, BASEPRI
   25eac:	f383 8811 	msr	BASEPRI, r3
   25eb0:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   25eb4:	f7ff ffa2 	bl	25dfc <work_cancel>
	__asm__ volatile(
   25eb8:	f384 8811 	msr	BASEPRI, r4
   25ebc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   25ec0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25ec2:	f06f 0015 	mvn.w	r0, #21
   25ec6:	e7fb      	b.n	25ec0 <k_delayed_work_cancel+0x22>

00025ec8 <z_abort_timeout>:
{
   25ec8:	b510      	push	{r4, lr}
	__asm__ volatile(
   25eca:	f04f 0220 	mov.w	r2, #32
   25ece:	f3ef 8411 	mrs	r4, BASEPRI
   25ed2:	f382 8811 	msr	BASEPRI, r2
   25ed6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   25eda:	6803      	ldr	r3, [r0, #0]
   25edc:	b13b      	cbz	r3, 25eee <z_abort_timeout+0x26>
			remove_timeout(to);
   25ede:	f7f9 fca7 	bl	1f830 <remove_timeout>
			ret = 0;
   25ee2:	2000      	movs	r0, #0
	__asm__ volatile(
   25ee4:	f384 8811 	msr	BASEPRI, r4
   25ee8:	f3bf 8f6f 	isb	sy
}
   25eec:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   25eee:	f06f 0015 	mvn.w	r0, #21
   25ef2:	e7f7      	b.n	25ee4 <z_abort_timeout+0x1c>

00025ef4 <z_get_next_timeout_expiry>:
{
   25ef4:	b510      	push	{r4, lr}
	__asm__ volatile(
   25ef6:	f04f 0320 	mov.w	r3, #32
   25efa:	f3ef 8411 	mrs	r4, BASEPRI
   25efe:	f383 8811 	msr	BASEPRI, r3
   25f02:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   25f06:	f7f9 fc79 	bl	1f7fc <next_timeout>
	__asm__ volatile(
   25f0a:	f384 8811 	msr	BASEPRI, r4
   25f0e:	f3bf 8f6f 	isb	sy
}
   25f12:	bd10      	pop	{r4, pc}

00025f14 <z_set_timeout_expiry>:
{
   25f14:	b570      	push	{r4, r5, r6, lr}
   25f16:	4604      	mov	r4, r0
   25f18:	460d      	mov	r5, r1
	__asm__ volatile(
   25f1a:	f04f 0320 	mov.w	r3, #32
   25f1e:	f3ef 8611 	mrs	r6, BASEPRI
   25f22:	f383 8811 	msr	BASEPRI, r3
   25f26:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   25f2a:	f7f9 fc67 	bl	1f7fc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25f2e:	2801      	cmp	r0, #1
   25f30:	dd05      	ble.n	25f3e <z_set_timeout_expiry+0x2a>
   25f32:	42a0      	cmp	r0, r4
   25f34:	dd03      	ble.n	25f3e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   25f36:	4629      	mov	r1, r5
   25f38:	4620      	mov	r0, r4
   25f3a:	f7e0 f943 	bl	61c4 <z_clock_set_timeout>
	__asm__ volatile(
   25f3e:	f386 8811 	msr	BASEPRI, r6
   25f42:	f3bf 8f6f 	isb	sy
}
   25f46:	bd70      	pop	{r4, r5, r6, pc}

00025f48 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   25f48:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   25f4a:	f7f9 fd61 	bl	1fa10 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   25f4e:	bd08      	pop	{r3, pc}

00025f50 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   25f50:	f7f9 bd5e 	b.w	1fa10 <z_tick_get>

00025f54 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25f54:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   25f58:	bf08      	it	eq
   25f5a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   25f5e:	b538      	push	{r3, r4, r5, lr}
   25f60:	4605      	mov	r5, r0
   25f62:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25f64:	d01d      	beq.n	25fa2 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25f66:	ea51 0300 	orrs.w	r3, r1, r0
   25f6a:	d103      	bne.n	25f74 <z_timeout_end_calc+0x20>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   25f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   25f70:	f7f9 bd4e 	b.w	1fa10 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   25f74:	f06f 0301 	mvn.w	r3, #1
   25f78:	1a18      	subs	r0, r3, r0
   25f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25f7e:	eb63 0101 	sbc.w	r1, r3, r1
   25f82:	2900      	cmp	r1, #0
   25f84:	da0c      	bge.n	25fa0 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   25f86:	f7f9 fd43 	bl	1fa10 <z_tick_get>
   25f8a:	2d01      	cmp	r5, #1
   25f8c:	4622      	mov	r2, r4
   25f8e:	f174 0400 	sbcs.w	r4, r4, #0
   25f92:	462b      	mov	r3, r5
   25f94:	bfbc      	itt	lt
   25f96:	2301      	movlt	r3, #1
   25f98:	2200      	movlt	r2, #0
   25f9a:	1818      	adds	r0, r3, r0
   25f9c:	eb41 0102 	adc.w	r1, r1, r2
}
   25fa0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   25fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25fa6:	4601      	mov	r1, r0
   25fa8:	e7fa      	b.n	25fa0 <z_timeout_end_calc+0x4c>

00025faa <k_timer_init>:
	timer->status = 0U;
   25faa:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   25fac:	e9c0 1208 	strd	r1, r2, [r0, #32]
   25fb0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   25fb4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   25fb8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   25fbc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   25fbe:	6343      	str	r3, [r0, #52]	; 0x34
}
   25fc0:	4770      	bx	lr

00025fc2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   25fc2:	b510      	push	{r4, lr}
   25fc4:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   25fc6:	f7ff ff7f 	bl	25ec8 <z_abort_timeout>

	if (inactive) {
   25fca:	b9d8      	cbnz	r0, 26004 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   25fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25fce:	b10b      	cbz	r3, 25fd4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   25fd0:	4620      	mov	r0, r4
   25fd2:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   25fd4:	f104 0018 	add.w	r0, r4, #24
   25fd8:	2100      	movs	r1, #0
   25fda:	f7ff fdc3 	bl	25b64 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   25fde:	4604      	mov	r4, r0
   25fe0:	b180      	cbz	r0, 26004 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   25fe2:	f7ff fdcf 	bl	25b84 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   25fe6:	4620      	mov	r0, r4
   25fe8:	f7ff fe1e 	bl	25c28 <z_ready_thread>
	__asm__ volatile(
   25fec:	f04f 0320 	mov.w	r3, #32
   25ff0:	f3ef 8011 	mrs	r0, BASEPRI
   25ff4:	f383 8811 	msr	BASEPRI, r3
   25ff8:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   25ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   26000:	f7ff bdd9 	b.w	25bb6 <z_reschedule_irqlock>
   26004:	bd10      	pop	{r4, pc}

00026006 <signal_poll_event>:
{
   26006:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   26008:	6884      	ldr	r4, [r0, #8]
{
   2600a:	4605      	mov	r5, r0
   2600c:	460e      	mov	r6, r1
	if (poller) {
   2600e:	b19c      	cbz	r4, 26038 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   26010:	68a3      	ldr	r3, [r4, #8]
   26012:	b95b      	cbnz	r3, 2602c <signal_poll_event+0x26>
		poller->is_polling = false;
   26014:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   26016:	4618      	mov	r0, r3
	event->poller = NULL;
   26018:	2300      	movs	r3, #0
   2601a:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2601c:	68eb      	ldr	r3, [r5, #12]
   2601e:	f3c3 3104 	ubfx	r1, r3, #12, #5
   26022:	430e      	orrs	r6, r1
   26024:	f366 3310 	bfi	r3, r6, #12, #5
   26028:	60eb      	str	r3, [r5, #12]
	return retcode;
   2602a:	e004      	b.n	26036 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2602c:	4798      	blx	r3
		poller->is_polling = false;
   2602e:	2300      	movs	r3, #0
		if (retcode < 0) {
   26030:	2800      	cmp	r0, #0
		poller->is_polling = false;
   26032:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   26034:	daf0      	bge.n	26018 <signal_poll_event+0x12>
}
   26036:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   26038:	4620      	mov	r0, r4
   2603a:	e7ed      	b.n	26018 <signal_poll_event+0x12>

0002603c <k_poll_poller_cb>:
{
   2603c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2603e:	6883      	ldr	r3, [r0, #8]
   26040:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   26042:	7b63      	ldrb	r3, [r4, #13]
   26044:	079a      	lsls	r2, r3, #30
{
   26046:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   26048:	d513      	bpl.n	26072 <k_poll_poller_cb+0x36>
	if (z_is_thread_timeout_expired(thread)) {
   2604a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2604e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26052:	bf08      	it	eq
   26054:	f112 0f02 	cmneq.w	r2, #2
   26058:	d014      	beq.n	26084 <k_poll_poller_cb+0x48>
	z_unpend_thread(thread);
   2605a:	4620      	mov	r0, r4
   2605c:	f7ff fdc1 	bl	25be2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   26060:	2d08      	cmp	r5, #8
   26062:	bf0c      	ite	eq
   26064:	f06f 0303 	mvneq.w	r3, #3
   26068:	2300      	movne	r3, #0
   2606a:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2606c:	7b63      	ldrb	r3, [r4, #13]
   2606e:	06db      	lsls	r3, r3, #27
   26070:	d001      	beq.n	26076 <k_poll_poller_cb+0x3a>
		return 0;
   26072:	2000      	movs	r0, #0
}
   26074:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   26076:	69a5      	ldr	r5, [r4, #24]
   26078:	2d00      	cmp	r5, #0
   2607a:	d1fa      	bne.n	26072 <k_poll_poller_cb+0x36>
	z_ready_thread(thread);
   2607c:	4620      	mov	r0, r4
   2607e:	f7ff fdd3 	bl	25c28 <z_ready_thread>
	return 0;
   26082:	e7f6      	b.n	26072 <k_poll_poller_cb+0x36>
		return -EAGAIN;
   26084:	f06f 000a 	mvn.w	r0, #10
   26088:	e7f4      	b.n	26074 <k_poll_poller_cb+0x38>

0002608a <add_event>:
{
   2608a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2608c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2608e:	e9d0 2300 	ldrd	r2, r3, [r0]
   26092:	4290      	cmp	r0, r2
   26094:	4604      	mov	r4, r0
   26096:	460d      	mov	r5, r1
   26098:	d106      	bne.n	260a8 <add_event+0x1e>
	node->prev = list->tail;
   2609a:	6863      	ldr	r3, [r4, #4]
   2609c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2609e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   260a0:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   260a2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   260a4:	6065      	str	r5, [r4, #4]
}
   260a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   260a8:	2b00      	cmp	r3, #0
   260aa:	d0f6      	beq.n	2609a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   260ac:	689b      	ldr	r3, [r3, #8]
   260ae:	6879      	ldr	r1, [r7, #4]
   260b0:	6858      	ldr	r0, [r3, #4]
   260b2:	f7ff fd4e 	bl	25b52 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   260b6:	2800      	cmp	r0, #0
   260b8:	d1ef      	bne.n	2609a <add_event+0x10>
	return list->head == list;
   260ba:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   260bc:	42b4      	cmp	r4, r6
   260be:	d0ec      	beq.n	2609a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   260c0:	2e00      	cmp	r6, #0
   260c2:	d0ea      	beq.n	2609a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   260c4:	68b3      	ldr	r3, [r6, #8]
   260c6:	6878      	ldr	r0, [r7, #4]
   260c8:	6859      	ldr	r1, [r3, #4]
   260ca:	f7ff fd42 	bl	25b52 <z_is_t1_higher_prio_than_t2>
   260ce:	b128      	cbz	r0, 260dc <add_event+0x52>
	node->prev = successor->prev;
   260d0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   260d2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   260d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   260d8:	6075      	str	r5, [r6, #4]
			return;
   260da:	e7e4      	b.n	260a6 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   260dc:	6863      	ldr	r3, [r4, #4]
   260de:	429e      	cmp	r6, r3
   260e0:	d0db      	beq.n	2609a <add_event+0x10>
   260e2:	6836      	ldr	r6, [r6, #0]
   260e4:	e7ec      	b.n	260c0 <add_event+0x36>

000260e6 <register_events>:
{
   260e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   260ea:	f04f 0a00 	mov.w	sl, #0
{
   260ee:	460e      	mov	r6, r1
   260f0:	4614      	mov	r4, r2
   260f2:	461f      	mov	r7, r3
   260f4:	4683      	mov	fp, r0
	int events_registered = 0;
   260f6:	4655      	mov	r5, sl
	event->poller = NULL;
   260f8:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   260fa:	45b2      	cmp	sl, r6
   260fc:	db02      	blt.n	26104 <register_events+0x1e>
}
   260fe:	4628      	mov	r0, r5
   26100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26104:	f04f 0320 	mov.w	r3, #32
   26108:	f3ef 8911 	mrs	r9, BASEPRI
   2610c:	f383 8811 	msr	BASEPRI, r3
   26110:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   26114:	f89b 200d 	ldrb.w	r2, [fp, #13]
   26118:	f002 020f 	and.w	r2, r2, #15
   2611c:	2a02      	cmp	r2, #2
   2611e:	d006      	beq.n	2612e <register_events+0x48>
   26120:	2a04      	cmp	r2, #4
   26122:	d008      	beq.n	26136 <register_events+0x50>
   26124:	2a01      	cmp	r2, #1
   26126:	d120      	bne.n	2616a <register_events+0x84>
		if (event->signal->signaled != 0U) {
   26128:	f8db 3010 	ldr.w	r3, [fp, #16]
   2612c:	e001      	b.n	26132 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   2612e:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   26132:	689b      	ldr	r3, [r3, #8]
   26134:	e002      	b.n	2613c <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   26136:	f8db 3010 	ldr.w	r3, [fp, #16]
   2613a:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   2613c:	b1ab      	cbz	r3, 2616a <register_events+0x84>
	event->state |= state;
   2613e:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   26142:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   26146:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2614a:	430a      	orrs	r2, r1
   2614c:	f362 3310 	bfi	r3, r2, #12, #5
   26150:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   26154:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   26158:	f389 8811 	msr	BASEPRI, r9
   2615c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   26160:	f10a 0a01 	add.w	sl, sl, #1
   26164:	f10b 0b14 	add.w	fp, fp, #20
   26168:	e7c7      	b.n	260fa <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2616a:	2f00      	cmp	r7, #0
   2616c:	d1f4      	bne.n	26158 <register_events+0x72>
   2616e:	7823      	ldrb	r3, [r4, #0]
   26170:	2b00      	cmp	r3, #0
   26172:	d0f1      	beq.n	26158 <register_events+0x72>
	switch (event->type) {
   26174:	f89b 300d 	ldrb.w	r3, [fp, #13]
   26178:	f003 030f 	and.w	r3, r3, #15
   2617c:	2b02      	cmp	r3, #2
   2617e:	d008      	beq.n	26192 <register_events+0xac>
   26180:	2b04      	cmp	r3, #4
   26182:	d006      	beq.n	26192 <register_events+0xac>
   26184:	2b01      	cmp	r3, #1
   26186:	d10b      	bne.n	261a0 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   26188:	f8db 0010 	ldr.w	r0, [fp, #16]
   2618c:	4622      	mov	r2, r4
   2618e:	4659      	mov	r1, fp
   26190:	e004      	b.n	2619c <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   26192:	f8db 0010 	ldr.w	r0, [fp, #16]
   26196:	4622      	mov	r2, r4
   26198:	4659      	mov	r1, fp
   2619a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2619c:	f7ff ff75 	bl	2608a <add_event>
	event->poller = poller;
   261a0:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   261a4:	3501      	adds	r5, #1
   261a6:	e7d7      	b.n	26158 <register_events+0x72>

000261a8 <clear_event_registrations>:
	while (num_events--) {
   261a8:	2314      	movs	r3, #20
{
   261aa:	b570      	push	{r4, r5, r6, lr}
   261ac:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   261b0:	2400      	movs	r4, #0
	while (num_events--) {
   261b2:	b901      	cbnz	r1, 261b6 <clear_event_registrations+0xe>
}
   261b4:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   261b6:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   261ba:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   261be:	f003 030f 	and.w	r3, r3, #15
   261c2:	2b02      	cmp	r3, #2
   261c4:	f1a0 0614 	sub.w	r6, r0, #20
   261c8:	d80a      	bhi.n	261e0 <clear_event_registrations+0x38>
   261ca:	b15b      	cbz	r3, 261e4 <clear_event_registrations+0x3c>
	return node->next != NULL;
   261cc:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   261d0:	b143      	cbz	r3, 261e4 <clear_event_registrations+0x3c>
	node->prev->next = node->next;
   261d2:	f850 5c10 	ldr.w	r5, [r0, #-16]
   261d6:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   261d8:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   261da:	e940 4405 	strd	r4, r4, [r0, #-20]
}
   261de:	e001      	b.n	261e4 <clear_event_registrations+0x3c>
	switch (event->type) {
   261e0:	2b04      	cmp	r3, #4
   261e2:	d0f3      	beq.n	261cc <clear_event_registrations+0x24>
   261e4:	f382 8811 	msr	BASEPRI, r2
   261e8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   261ec:	f04f 0320 	mov.w	r3, #32
   261f0:	f3ef 8211 	mrs	r2, BASEPRI
   261f4:	f383 8811 	msr	BASEPRI, r3
   261f8:	f3bf 8f6f 	isb	sy
   261fc:	3901      	subs	r1, #1
   261fe:	4630      	mov	r0, r6
   26200:	e7d7      	b.n	261b2 <clear_event_registrations+0xa>

00026202 <k_poll_event_init>:
{
   26202:	b510      	push	{r4, lr}
	event->type = type;
   26204:	0452      	lsls	r2, r2, #17
   26206:	0209      	lsls	r1, r1, #8
   26208:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   2620c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   26210:	430a      	orrs	r2, r1
   26212:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   26214:	2400      	movs	r4, #0
	event->type = type;
   26216:	430a      	orrs	r2, r1
	event->obj = obj;
   26218:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2621c:	6084      	str	r4, [r0, #8]
}
   2621e:	bd10      	pop	{r4, pc}

00026220 <z_handle_obj_poll_events>:
{
   26220:	4603      	mov	r3, r0
	return list->head == list;
   26222:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   26224:	4283      	cmp	r3, r0
   26226:	d008      	beq.n	2623a <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   26228:	e9d0 3200 	ldrd	r3, r2, [r0]
   2622c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2622e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26230:	2300      	movs	r3, #0
	node->prev = NULL;
   26232:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   26236:	f7ff bee6 	b.w	26006 <signal_poll_event>
}
   2623a:	4770      	bx	lr

0002623c <k_mem_pool_malloc>:
{
   2623c:	b530      	push	{r4, r5, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2623e:	f111 0208 	adds.w	r2, r1, #8
   26242:	b085      	sub	sp, #20
   26244:	d207      	bcs.n	26256 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   26246:	2400      	movs	r4, #0
   26248:	2500      	movs	r5, #0
   2624a:	e9cd 4500 	strd	r4, r5, [sp]
   2624e:	a902      	add	r1, sp, #8
   26250:	f7ff fb80 	bl	25954 <k_mem_pool_alloc>
   26254:	b110      	cbz	r0, 2625c <k_mem_pool_malloc+0x20>
		return NULL;
   26256:	2000      	movs	r0, #0
}
   26258:	b005      	add	sp, #20
   2625a:	bd30      	pop	{r4, r5, pc}
   2625c:	ab02      	add	r3, sp, #8
   2625e:	cb03      	ldmia	r3!, {r0, r1}
   26260:	9a02      	ldr	r2, [sp, #8]
   26262:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   26264:	9802      	ldr	r0, [sp, #8]
   26266:	6051      	str	r1, [r2, #4]
   26268:	3008      	adds	r0, #8
   2626a:	e7f5      	b.n	26258 <k_mem_pool_malloc+0x1c>

0002626c <k_free>:
	if (ptr != NULL) {
   2626c:	b110      	cbz	r0, 26274 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2626e:	3808      	subs	r0, #8
   26270:	f7ff bb8a 	b.w	25988 <k_mem_pool_free_id>
}
   26274:	4770      	bx	lr

00026276 <memcmp>:
   26276:	b510      	push	{r4, lr}
   26278:	3901      	subs	r1, #1
   2627a:	4402      	add	r2, r0
   2627c:	4290      	cmp	r0, r2
   2627e:	d101      	bne.n	26284 <memcmp+0xe>
   26280:	2000      	movs	r0, #0
   26282:	e005      	b.n	26290 <memcmp+0x1a>
   26284:	7803      	ldrb	r3, [r0, #0]
   26286:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2628a:	42a3      	cmp	r3, r4
   2628c:	d001      	beq.n	26292 <memcmp+0x1c>
   2628e:	1b18      	subs	r0, r3, r4
   26290:	bd10      	pop	{r4, pc}
   26292:	3001      	adds	r0, #1
   26294:	e7f2      	b.n	2627c <memcmp+0x6>

00026296 <memcpy>:
   26296:	440a      	add	r2, r1
   26298:	4291      	cmp	r1, r2
   2629a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2629e:	d100      	bne.n	262a2 <memcpy+0xc>
   262a0:	4770      	bx	lr
   262a2:	b510      	push	{r4, lr}
   262a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   262a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   262ac:	4291      	cmp	r1, r2
   262ae:	d1f9      	bne.n	262a4 <memcpy+0xe>
   262b0:	bd10      	pop	{r4, pc}

000262b2 <memset>:
   262b2:	4402      	add	r2, r0
   262b4:	4603      	mov	r3, r0
   262b6:	4293      	cmp	r3, r2
   262b8:	d100      	bne.n	262bc <memset+0xa>
   262ba:	4770      	bx	lr
   262bc:	f803 1b01 	strb.w	r1, [r3], #1
   262c0:	e7f9      	b.n	262b6 <memset+0x4>

000262c2 <__sfputc_r>:
   262c2:	6893      	ldr	r3, [r2, #8]
   262c4:	3b01      	subs	r3, #1
   262c6:	2b00      	cmp	r3, #0
   262c8:	b410      	push	{r4}
   262ca:	6093      	str	r3, [r2, #8]
   262cc:	da07      	bge.n	262de <__sfputc_r+0x1c>
   262ce:	6994      	ldr	r4, [r2, #24]
   262d0:	42a3      	cmp	r3, r4
   262d2:	db01      	blt.n	262d8 <__sfputc_r+0x16>
   262d4:	290a      	cmp	r1, #10
   262d6:	d102      	bne.n	262de <__sfputc_r+0x1c>
   262d8:	bc10      	pop	{r4}
   262da:	f7f9 bf43 	b.w	20164 <__swbuf_r>
   262de:	6813      	ldr	r3, [r2, #0]
   262e0:	1c58      	adds	r0, r3, #1
   262e2:	6010      	str	r0, [r2, #0]
   262e4:	7019      	strb	r1, [r3, #0]
   262e6:	4608      	mov	r0, r1
   262e8:	bc10      	pop	{r4}
   262ea:	4770      	bx	lr

000262ec <__sfputs_r>:
   262ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262ee:	4606      	mov	r6, r0
   262f0:	460f      	mov	r7, r1
   262f2:	4614      	mov	r4, r2
   262f4:	18d5      	adds	r5, r2, r3
   262f6:	42ac      	cmp	r4, r5
   262f8:	d101      	bne.n	262fe <__sfputs_r+0x12>
   262fa:	2000      	movs	r0, #0
   262fc:	e007      	b.n	2630e <__sfputs_r+0x22>
   262fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   26302:	463a      	mov	r2, r7
   26304:	4630      	mov	r0, r6
   26306:	f7ff ffdc 	bl	262c2 <__sfputc_r>
   2630a:	1c43      	adds	r3, r0, #1
   2630c:	d1f3      	bne.n	262f6 <__sfputs_r+0xa>
   2630e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026310 <_printf_common>:
   26310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26314:	4616      	mov	r6, r2
   26316:	4699      	mov	r9, r3
   26318:	688a      	ldr	r2, [r1, #8]
   2631a:	690b      	ldr	r3, [r1, #16]
   2631c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   26320:	4293      	cmp	r3, r2
   26322:	bfb8      	it	lt
   26324:	4613      	movlt	r3, r2
   26326:	6033      	str	r3, [r6, #0]
   26328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2632c:	4607      	mov	r7, r0
   2632e:	460c      	mov	r4, r1
   26330:	b10a      	cbz	r2, 26336 <_printf_common+0x26>
   26332:	3301      	adds	r3, #1
   26334:	6033      	str	r3, [r6, #0]
   26336:	6823      	ldr	r3, [r4, #0]
   26338:	0699      	lsls	r1, r3, #26
   2633a:	bf42      	ittt	mi
   2633c:	6833      	ldrmi	r3, [r6, #0]
   2633e:	3302      	addmi	r3, #2
   26340:	6033      	strmi	r3, [r6, #0]
   26342:	6825      	ldr	r5, [r4, #0]
   26344:	f015 0506 	ands.w	r5, r5, #6
   26348:	d106      	bne.n	26358 <_printf_common+0x48>
   2634a:	f104 0a19 	add.w	sl, r4, #25
   2634e:	68e3      	ldr	r3, [r4, #12]
   26350:	6832      	ldr	r2, [r6, #0]
   26352:	1a9b      	subs	r3, r3, r2
   26354:	42ab      	cmp	r3, r5
   26356:	dc26      	bgt.n	263a6 <_printf_common+0x96>
   26358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2635c:	1e13      	subs	r3, r2, #0
   2635e:	6822      	ldr	r2, [r4, #0]
   26360:	bf18      	it	ne
   26362:	2301      	movne	r3, #1
   26364:	0692      	lsls	r2, r2, #26
   26366:	d42b      	bmi.n	263c0 <_printf_common+0xb0>
   26368:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2636c:	4649      	mov	r1, r9
   2636e:	4638      	mov	r0, r7
   26370:	47c0      	blx	r8
   26372:	3001      	adds	r0, #1
   26374:	d01e      	beq.n	263b4 <_printf_common+0xa4>
   26376:	6823      	ldr	r3, [r4, #0]
   26378:	68e5      	ldr	r5, [r4, #12]
   2637a:	6832      	ldr	r2, [r6, #0]
   2637c:	f003 0306 	and.w	r3, r3, #6
   26380:	2b04      	cmp	r3, #4
   26382:	bf08      	it	eq
   26384:	1aad      	subeq	r5, r5, r2
   26386:	68a3      	ldr	r3, [r4, #8]
   26388:	6922      	ldr	r2, [r4, #16]
   2638a:	bf0c      	ite	eq
   2638c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   26390:	2500      	movne	r5, #0
   26392:	4293      	cmp	r3, r2
   26394:	bfc4      	itt	gt
   26396:	1a9b      	subgt	r3, r3, r2
   26398:	18ed      	addgt	r5, r5, r3
   2639a:	2600      	movs	r6, #0
   2639c:	341a      	adds	r4, #26
   2639e:	42b5      	cmp	r5, r6
   263a0:	d11a      	bne.n	263d8 <_printf_common+0xc8>
   263a2:	2000      	movs	r0, #0
   263a4:	e008      	b.n	263b8 <_printf_common+0xa8>
   263a6:	2301      	movs	r3, #1
   263a8:	4652      	mov	r2, sl
   263aa:	4649      	mov	r1, r9
   263ac:	4638      	mov	r0, r7
   263ae:	47c0      	blx	r8
   263b0:	3001      	adds	r0, #1
   263b2:	d103      	bne.n	263bc <_printf_common+0xac>
   263b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   263b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   263bc:	3501      	adds	r5, #1
   263be:	e7c6      	b.n	2634e <_printf_common+0x3e>
   263c0:	18e1      	adds	r1, r4, r3
   263c2:	1c5a      	adds	r2, r3, #1
   263c4:	2030      	movs	r0, #48	; 0x30
   263c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   263ca:	4422      	add	r2, r4
   263cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   263d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   263d4:	3302      	adds	r3, #2
   263d6:	e7c7      	b.n	26368 <_printf_common+0x58>
   263d8:	2301      	movs	r3, #1
   263da:	4622      	mov	r2, r4
   263dc:	4649      	mov	r1, r9
   263de:	4638      	mov	r0, r7
   263e0:	47c0      	blx	r8
   263e2:	3001      	adds	r0, #1
   263e4:	d0e6      	beq.n	263b4 <_printf_common+0xa4>
   263e6:	3601      	adds	r6, #1
   263e8:	e7d9      	b.n	2639e <_printf_common+0x8e>

000263ea <strcpy>:
   263ea:	4603      	mov	r3, r0
   263ec:	f811 2b01 	ldrb.w	r2, [r1], #1
   263f0:	f803 2b01 	strb.w	r2, [r3], #1
   263f4:	2a00      	cmp	r2, #0
   263f6:	d1f9      	bne.n	263ec <strcpy+0x2>
   263f8:	4770      	bx	lr

000263fa <strncpy>:
   263fa:	b510      	push	{r4, lr}
   263fc:	3901      	subs	r1, #1
   263fe:	4603      	mov	r3, r0
   26400:	b132      	cbz	r2, 26410 <strncpy+0x16>
   26402:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26406:	f803 4b01 	strb.w	r4, [r3], #1
   2640a:	3a01      	subs	r2, #1
   2640c:	2c00      	cmp	r4, #0
   2640e:	d1f7      	bne.n	26400 <strncpy+0x6>
   26410:	441a      	add	r2, r3
   26412:	2100      	movs	r1, #0
   26414:	4293      	cmp	r3, r2
   26416:	d100      	bne.n	2641a <strncpy+0x20>
   26418:	bd10      	pop	{r4, pc}
   2641a:	f803 1b01 	strb.w	r1, [r3], #1
   2641e:	e7f9      	b.n	26414 <strncpy+0x1a>

00026420 <abort>:
   26420:	b508      	push	{r3, lr}
   26422:	2006      	movs	r0, #6
   26424:	f7fa fa0a 	bl	2083c <raise>
   26428:	2001      	movs	r0, #1
   2642a:	f7e0 fded 	bl	7008 <_exit>

0002642e <__sfmoreglue>:
   2642e:	b570      	push	{r4, r5, r6, lr}
   26430:	2268      	movs	r2, #104	; 0x68
   26432:	1e4d      	subs	r5, r1, #1
   26434:	4355      	muls	r5, r2
   26436:	460e      	mov	r6, r1
   26438:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2643c:	f7fa f97a 	bl	20734 <_malloc_r>
   26440:	4604      	mov	r4, r0
   26442:	b140      	cbz	r0, 26456 <__sfmoreglue+0x28>
   26444:	2100      	movs	r1, #0
   26446:	e9c0 1600 	strd	r1, r6, [r0]
   2644a:	300c      	adds	r0, #12
   2644c:	60a0      	str	r0, [r4, #8]
   2644e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   26452:	f7ff ff2e 	bl	262b2 <memset>
   26456:	4620      	mov	r0, r4
   26458:	bd70      	pop	{r4, r5, r6, pc}

0002645a <_fwalk_reent>:
   2645a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2645e:	4606      	mov	r6, r0
   26460:	4688      	mov	r8, r1
   26462:	f100 0448 	add.w	r4, r0, #72	; 0x48
   26466:	2700      	movs	r7, #0
   26468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2646c:	f1b9 0901 	subs.w	r9, r9, #1
   26470:	d505      	bpl.n	2647e <_fwalk_reent+0x24>
   26472:	6824      	ldr	r4, [r4, #0]
   26474:	2c00      	cmp	r4, #0
   26476:	d1f7      	bne.n	26468 <_fwalk_reent+0xe>
   26478:	4638      	mov	r0, r7
   2647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2647e:	89ab      	ldrh	r3, [r5, #12]
   26480:	2b01      	cmp	r3, #1
   26482:	d907      	bls.n	26494 <_fwalk_reent+0x3a>
   26484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   26488:	3301      	adds	r3, #1
   2648a:	d003      	beq.n	26494 <_fwalk_reent+0x3a>
   2648c:	4629      	mov	r1, r5
   2648e:	4630      	mov	r0, r6
   26490:	47c0      	blx	r8
   26492:	4307      	orrs	r7, r0
   26494:	3568      	adds	r5, #104	; 0x68
   26496:	e7e9      	b.n	2646c <_fwalk_reent+0x12>

00026498 <__retarget_lock_init_recursive>:
   26498:	4770      	bx	lr

0002649a <__retarget_lock_acquire_recursive>:
   2649a:	4770      	bx	lr

0002649c <__retarget_lock_release_recursive>:
   2649c:	4770      	bx	lr

0002649e <__swhatbuf_r>:
   2649e:	b570      	push	{r4, r5, r6, lr}
   264a0:	460e      	mov	r6, r1
   264a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   264a6:	2900      	cmp	r1, #0
   264a8:	b096      	sub	sp, #88	; 0x58
   264aa:	4614      	mov	r4, r2
   264ac:	461d      	mov	r5, r3
   264ae:	da08      	bge.n	264c2 <__swhatbuf_r+0x24>
   264b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   264b4:	2200      	movs	r2, #0
   264b6:	602a      	str	r2, [r5, #0]
   264b8:	061a      	lsls	r2, r3, #24
   264ba:	d410      	bmi.n	264de <__swhatbuf_r+0x40>
   264bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   264c0:	e00e      	b.n	264e0 <__swhatbuf_r+0x42>
   264c2:	466a      	mov	r2, sp
   264c4:	f7fa f9f6 	bl	208b4 <_fstat_r>
   264c8:	2800      	cmp	r0, #0
   264ca:	dbf1      	blt.n	264b0 <__swhatbuf_r+0x12>
   264cc:	9a01      	ldr	r2, [sp, #4]
   264ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   264d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   264d6:	425a      	negs	r2, r3
   264d8:	415a      	adcs	r2, r3
   264da:	602a      	str	r2, [r5, #0]
   264dc:	e7ee      	b.n	264bc <__swhatbuf_r+0x1e>
   264de:	2340      	movs	r3, #64	; 0x40
   264e0:	2000      	movs	r0, #0
   264e2:	6023      	str	r3, [r4, #0]
   264e4:	b016      	add	sp, #88	; 0x58
   264e6:	bd70      	pop	{r4, r5, r6, pc}

000264e8 <_raise_r>:
   264e8:	291f      	cmp	r1, #31
   264ea:	b538      	push	{r3, r4, r5, lr}
   264ec:	4604      	mov	r4, r0
   264ee:	460d      	mov	r5, r1
   264f0:	d904      	bls.n	264fc <_raise_r+0x14>
   264f2:	2316      	movs	r3, #22
   264f4:	6003      	str	r3, [r0, #0]
   264f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   264fa:	bd38      	pop	{r3, r4, r5, pc}
   264fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   264fe:	b112      	cbz	r2, 26506 <_raise_r+0x1e>
   26500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   26504:	b94b      	cbnz	r3, 2651a <_raise_r+0x32>
   26506:	4620      	mov	r0, r4
   26508:	f000 f816 	bl	26538 <_getpid_r>
   2650c:	462a      	mov	r2, r5
   2650e:	4601      	mov	r1, r0
   26510:	4620      	mov	r0, r4
   26512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26516:	f7fa b999 	b.w	2084c <_kill_r>
   2651a:	2b01      	cmp	r3, #1
   2651c:	d00a      	beq.n	26534 <_raise_r+0x4c>
   2651e:	1c59      	adds	r1, r3, #1
   26520:	d103      	bne.n	2652a <_raise_r+0x42>
   26522:	2316      	movs	r3, #22
   26524:	6003      	str	r3, [r0, #0]
   26526:	2001      	movs	r0, #1
   26528:	e7e7      	b.n	264fa <_raise_r+0x12>
   2652a:	2400      	movs	r4, #0
   2652c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   26530:	4628      	mov	r0, r5
   26532:	4798      	blx	r3
   26534:	2000      	movs	r0, #0
   26536:	e7e0      	b.n	264fa <_raise_r+0x12>

00026538 <_getpid_r>:
   26538:	f7fc bac6 	b.w	22ac8 <_getpid>

0002653c <__sread>:
   2653c:	b510      	push	{r4, lr}
   2653e:	460c      	mov	r4, r1
   26540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26544:	f7fa f9f6 	bl	20934 <_read_r>
   26548:	2800      	cmp	r0, #0
   2654a:	bfab      	itete	ge
   2654c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2654e:	89a3      	ldrhlt	r3, [r4, #12]
   26550:	181b      	addge	r3, r3, r0
   26552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   26556:	bfac      	ite	ge
   26558:	6563      	strge	r3, [r4, #84]	; 0x54
   2655a:	81a3      	strhlt	r3, [r4, #12]
   2655c:	bd10      	pop	{r4, pc}

0002655e <__swrite>:
   2655e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26562:	461f      	mov	r7, r3
   26564:	898b      	ldrh	r3, [r1, #12]
   26566:	05db      	lsls	r3, r3, #23
   26568:	4605      	mov	r5, r0
   2656a:	460c      	mov	r4, r1
   2656c:	4616      	mov	r6, r2
   2656e:	d505      	bpl.n	2657c <__swrite+0x1e>
   26570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26574:	2302      	movs	r3, #2
   26576:	2200      	movs	r2, #0
   26578:	f7fa f9be 	bl	208f8 <_lseek_r>
   2657c:	89a3      	ldrh	r3, [r4, #12]
   2657e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   26586:	81a3      	strh	r3, [r4, #12]
   26588:	4632      	mov	r2, r6
   2658a:	463b      	mov	r3, r7
   2658c:	4628      	mov	r0, r5
   2658e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26592:	f7fa b96d 	b.w	20870 <_write_r>

00026596 <__sseek>:
   26596:	b510      	push	{r4, lr}
   26598:	460c      	mov	r4, r1
   2659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2659e:	f7fa f9ab 	bl	208f8 <_lseek_r>
   265a2:	1c43      	adds	r3, r0, #1
   265a4:	89a3      	ldrh	r3, [r4, #12]
   265a6:	bf15      	itete	ne
   265a8:	6560      	strne	r0, [r4, #84]	; 0x54
   265aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   265ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   265b2:	81a3      	strheq	r3, [r4, #12]
   265b4:	bf18      	it	ne
   265b6:	81a3      	strhne	r3, [r4, #12]
   265b8:	bd10      	pop	{r4, pc}

000265ba <__sclose>:
   265ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   265be:	f7fa b969 	b.w	20894 <_close_r>
